
403LEDnButton.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eac  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001d4  0800708c  0800708c  0000808c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007260  08007260  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007268  08007268  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007268  08007268  00008268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800726c  0800726c  0000826c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007270  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c89c  20000014  08007284  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004c8b0  08007284  000098b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001460b  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030fa  00000000  00000000  0001d64f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  00020750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ef9  00000000  00000000  00021ac8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023aa2  00000000  00000000  000229c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c13  00000000  00000000  00046463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db058  00000000  00000000  0005d076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001380ce  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005160  00000000  00000000  00138114  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d0  00000000  00000000  0013d274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007074 	.word	0x08007074

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08007074 	.word	0x08007074

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2004b2dc 	.word	0x2004b2dc

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b96a 	b.w	80005a0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14e      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f0:	4694      	mov	ip, r2
 80002f2:	458c      	cmp	ip, r1
 80002f4:	4686      	mov	lr, r0
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	d962      	bls.n	80003c2 <__udivmoddi4+0xde>
 80002fc:	b14a      	cbz	r2, 8000312 <__udivmoddi4+0x2e>
 80002fe:	f1c2 0320 	rsb	r3, r2, #32
 8000302:	4091      	lsls	r1, r2
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	fa0c fc02 	lsl.w	ip, ip, r2
 800030c:	4319      	orrs	r1, r3
 800030e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f f68c 	uxth.w	r6, ip
 800031a:	fbb1 f4f7 	udiv	r4, r1, r7
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb07 1114 	mls	r1, r7, r4, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb04 f106 	mul.w	r1, r4, r6
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f104 30ff 	add.w	r0, r4, #4294967295
 800033a:	f080 8112 	bcs.w	8000562 <__udivmoddi4+0x27e>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 810f 	bls.w	8000562 <__udivmoddi4+0x27e>
 8000344:	3c02      	subs	r4, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000352:	fb07 1110 	mls	r1, r7, r0, r1
 8000356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035a:	fb00 f606 	mul.w	r6, r0, r6
 800035e:	429e      	cmp	r6, r3
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x94>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 31ff 	add.w	r1, r0, #4294967295
 800036a:	f080 80fc 	bcs.w	8000566 <__udivmoddi4+0x282>
 800036e:	429e      	cmp	r6, r3
 8000370:	f240 80f9 	bls.w	8000566 <__udivmoddi4+0x282>
 8000374:	4463      	add	r3, ip
 8000376:	3802      	subs	r0, #2
 8000378:	1b9b      	subs	r3, r3, r6
 800037a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037e:	2100      	movs	r1, #0
 8000380:	b11d      	cbz	r5, 800038a <__udivmoddi4+0xa6>
 8000382:	40d3      	lsrs	r3, r2
 8000384:	2200      	movs	r2, #0
 8000386:	e9c5 3200 	strd	r3, r2, [r5]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d905      	bls.n	800039e <__udivmoddi4+0xba>
 8000392:	b10d      	cbz	r5, 8000398 <__udivmoddi4+0xb4>
 8000394:	e9c5 0100 	strd	r0, r1, [r5]
 8000398:	2100      	movs	r1, #0
 800039a:	4608      	mov	r0, r1
 800039c:	e7f5      	b.n	800038a <__udivmoddi4+0xa6>
 800039e:	fab3 f183 	clz	r1, r3
 80003a2:	2900      	cmp	r1, #0
 80003a4:	d146      	bne.n	8000434 <__udivmoddi4+0x150>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xcc>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f0c0 80f0 	bcc.w	8000590 <__udivmoddi4+0x2ac>
 80003b0:	1a86      	subs	r6, r0, r2
 80003b2:	eb64 0303 	sbc.w	r3, r4, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d0e6      	beq.n	800038a <__udivmoddi4+0xa6>
 80003bc:	e9c5 6300 	strd	r6, r3, [r5]
 80003c0:	e7e3      	b.n	800038a <__udivmoddi4+0xa6>
 80003c2:	2a00      	cmp	r2, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x204>
 80003c8:	eba1 040c 	sub.w	r4, r1, ip
 80003cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	2101      	movs	r1, #1
 80003d6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb08 4416 	mls	r4, r8, r6, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb07 f006 	mul.w	r0, r7, r6
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x11c>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x11a>
 80003f8:	4298      	cmp	r0, r3
 80003fa:	f200 80cd 	bhi.w	8000598 <__udivmoddi4+0x2b4>
 80003fe:	4626      	mov	r6, r4
 8000400:	1a1c      	subs	r4, r3, r0
 8000402:	fa1f f38e 	uxth.w	r3, lr
 8000406:	fbb4 f0f8 	udiv	r0, r4, r8
 800040a:	fb08 4410 	mls	r4, r8, r0, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb00 f707 	mul.w	r7, r0, r7
 8000416:	429f      	cmp	r7, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x148>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x146>
 8000424:	429f      	cmp	r7, r3
 8000426:	f200 80b0 	bhi.w	800058a <__udivmoddi4+0x2a6>
 800042a:	4620      	mov	r0, r4
 800042c:	1bdb      	subs	r3, r3, r7
 800042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0x9c>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	431f      	orrs	r7, r3
 8000440:	fa20 fc06 	lsr.w	ip, r0, r6
 8000444:	fa04 f301 	lsl.w	r3, r4, r1
 8000448:	ea43 030c 	orr.w	r3, r3, ip
 800044c:	40f4      	lsrs	r4, r6
 800044e:	fa00 f801 	lsl.w	r8, r0, r1
 8000452:	0c38      	lsrs	r0, r7, #16
 8000454:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000458:	fbb4 fef0 	udiv	lr, r4, r0
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	fb00 441e 	mls	r4, r0, lr, r4
 8000464:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a1      	cmp	r9, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	d90a      	bls.n	800048a <__udivmoddi4+0x1a6>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047a:	f080 8084 	bcs.w	8000586 <__udivmoddi4+0x2a2>
 800047e:	45a1      	cmp	r9, r4
 8000480:	f240 8081 	bls.w	8000586 <__udivmoddi4+0x2a2>
 8000484:	f1ae 0e02 	sub.w	lr, lr, #2
 8000488:	443c      	add	r4, r7
 800048a:	eba4 0409 	sub.w	r4, r4, r9
 800048e:	fa1f f983 	uxth.w	r9, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1d2>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	d267      	bcs.n	800057e <__udivmoddi4+0x29a>
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d965      	bls.n	800057e <__udivmoddi4+0x29a>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ba:	fba0 9302 	umull	r9, r3, r0, r2
 80004be:	eba4 040c 	sub.w	r4, r4, ip
 80004c2:	429c      	cmp	r4, r3
 80004c4:	46ce      	mov	lr, r9
 80004c6:	469c      	mov	ip, r3
 80004c8:	d351      	bcc.n	800056e <__udivmoddi4+0x28a>
 80004ca:	d04e      	beq.n	800056a <__udivmoddi4+0x286>
 80004cc:	b155      	cbz	r5, 80004e4 <__udivmoddi4+0x200>
 80004ce:	ebb8 030e 	subs.w	r3, r8, lr
 80004d2:	eb64 040c 	sbc.w	r4, r4, ip
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	40cb      	lsrs	r3, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	e9c5 6400 	strd	r6, r4, [r5]
 80004e4:	2100      	movs	r1, #0
 80004e6:	e750      	b.n	800038a <__udivmoddi4+0xa6>
 80004e8:	f1c2 0320 	rsb	r3, r2, #32
 80004ec:	fa20 f103 	lsr.w	r1, r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa24 f303 	lsr.w	r3, r4, r3
 80004f8:	4094      	lsls	r4, r2
 80004fa:	430c      	orrs	r4, r1
 80004fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000500:	fa00 fe02 	lsl.w	lr, r0, r2
 8000504:	fa1f f78c 	uxth.w	r7, ip
 8000508:	fbb3 f0f8 	udiv	r0, r3, r8
 800050c:	fb08 3110 	mls	r1, r8, r0, r3
 8000510:	0c23      	lsrs	r3, r4, #16
 8000512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000516:	fb00 f107 	mul.w	r1, r0, r7
 800051a:	4299      	cmp	r1, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x24c>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 36ff 	add.w	r6, r0, #4294967295
 8000526:	d22c      	bcs.n	8000582 <__udivmoddi4+0x29e>
 8000528:	4299      	cmp	r1, r3
 800052a:	d92a      	bls.n	8000582 <__udivmoddi4+0x29e>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1a5b      	subs	r3, r3, r1
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb3 f1f8 	udiv	r1, r3, r8
 8000538:	fb08 3311 	mls	r3, r8, r1, r3
 800053c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000540:	fb01 f307 	mul.w	r3, r1, r7
 8000544:	42a3      	cmp	r3, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x276>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000550:	d213      	bcs.n	800057a <__udivmoddi4+0x296>
 8000552:	42a3      	cmp	r3, r4
 8000554:	d911      	bls.n	800057a <__udivmoddi4+0x296>
 8000556:	3902      	subs	r1, #2
 8000558:	4464      	add	r4, ip
 800055a:	1ae4      	subs	r4, r4, r3
 800055c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000560:	e739      	b.n	80003d6 <__udivmoddi4+0xf2>
 8000562:	4604      	mov	r4, r0
 8000564:	e6f0      	b.n	8000348 <__udivmoddi4+0x64>
 8000566:	4608      	mov	r0, r1
 8000568:	e706      	b.n	8000378 <__udivmoddi4+0x94>
 800056a:	45c8      	cmp	r8, r9
 800056c:	d2ae      	bcs.n	80004cc <__udivmoddi4+0x1e8>
 800056e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000572:	eb63 0c07 	sbc.w	ip, r3, r7
 8000576:	3801      	subs	r0, #1
 8000578:	e7a8      	b.n	80004cc <__udivmoddi4+0x1e8>
 800057a:	4631      	mov	r1, r6
 800057c:	e7ed      	b.n	800055a <__udivmoddi4+0x276>
 800057e:	4603      	mov	r3, r0
 8000580:	e799      	b.n	80004b6 <__udivmoddi4+0x1d2>
 8000582:	4630      	mov	r0, r6
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0x24c>
 8000586:	46d6      	mov	lr, sl
 8000588:	e77f      	b.n	800048a <__udivmoddi4+0x1a6>
 800058a:	4463      	add	r3, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e74d      	b.n	800042c <__udivmoddi4+0x148>
 8000590:	4606      	mov	r6, r0
 8000592:	4623      	mov	r3, r4
 8000594:	4608      	mov	r0, r1
 8000596:	e70f      	b.n	80003b8 <__udivmoddi4+0xd4>
 8000598:	3e02      	subs	r6, #2
 800059a:	4463      	add	r3, ip
 800059c:	e730      	b.n	8000400 <__udivmoddi4+0x11c>
 800059e:	bf00      	nop

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fbe1 	bl	8000d70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f8a7 	bl	8000700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f903 	bl	80007bc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 80005b6:	4b43      	ldr	r3, [pc, #268]	@ (80006c4 <main+0x120>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a42      	ldr	r2, [pc, #264]	@ (80006c4 <main+0x120>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c2:	f004 fbeb 	bl	8004d9c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005c6:	f005 ff6f 	bl	80064a8 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &LED1_task_handle);
 80005ca:	4b3f      	ldr	r3, [pc, #252]	@ (80006c8 <main+0x124>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2303      	movs	r3, #3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	@ 0xc8
 80005d6:	493d      	ldr	r1, [pc, #244]	@ (80006cc <main+0x128>)
 80005d8:	483d      	ldr	r0, [pc, #244]	@ (80006d0 <main+0x12c>)
 80005da:	f002 fa1d 	bl	8002a18 <xTaskCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a3c      	ldr	r2, [pc, #240]	@ (80006d4 <main+0x130>)
 80005e2:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 80005e4:	4b3b      	ldr	r3, [pc, #236]	@ (80006d4 <main+0x130>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x5c>

  next_task_handle = LED1_task_handle;
 8000604:	4b30      	ldr	r3, [pc, #192]	@ (80006c8 <main+0x124>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a33      	ldr	r2, [pc, #204]	@ (80006d8 <main+0x134>)
 800060a:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &LED2_task_handle);
 800060c:	4b33      	ldr	r3, [pc, #204]	@ (80006dc <main+0x138>)
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2302      	movs	r3, #2
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	22c8      	movs	r2, #200	@ 0xc8
 8000618:	4931      	ldr	r1, [pc, #196]	@ (80006e0 <main+0x13c>)
 800061a:	4832      	ldr	r0, [pc, #200]	@ (80006e4 <main+0x140>)
 800061c:	f002 f9fc 	bl	8002a18 <xTaskCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a2c      	ldr	r2, [pc, #176]	@ (80006d4 <main+0x130>)
 8000624:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 8000626:	4b2b      	ldr	r3, [pc, #172]	@ (80006d4 <main+0x130>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00b      	beq.n	8000646 <main+0xa2>
        __asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000632:	f383 8811 	msr	BASEPRI, r3
 8000636:	f3bf 8f6f 	isb	sy
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	60bb      	str	r3, [r7, #8]
    }
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0x9e>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &LED3_task_handle);
 8000646:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <main+0x144>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	22c8      	movs	r2, #200	@ 0xc8
 8000652:	4926      	ldr	r1, [pc, #152]	@ (80006ec <main+0x148>)
 8000654:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <main+0x14c>)
 8000656:	f002 f9df 	bl	8002a18 <xTaskCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a1d      	ldr	r2, [pc, #116]	@ (80006d4 <main+0x130>)
 800065e:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 8000660:	4b1c      	ldr	r3, [pc, #112]	@ (80006d4 <main+0x130>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d00b      	beq.n	8000680 <main+0xdc>
        __asm volatile
 8000668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	f3bf 8f6f 	isb	sy
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	607b      	str	r3, [r7, #4]
    }
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0xd8>

  status = xTaskCreate(btn_handler, "Button_task", 200, NULL, 4, &BTN_task_handle);
 8000680:	4b1c      	ldr	r3, [pc, #112]	@ (80006f4 <main+0x150>)
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	2304      	movs	r3, #4
 8000686:	9300      	str	r3, [sp, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	22c8      	movs	r2, #200	@ 0xc8
 800068c:	491a      	ldr	r1, [pc, #104]	@ (80006f8 <main+0x154>)
 800068e:	481b      	ldr	r0, [pc, #108]	@ (80006fc <main+0x158>)
 8000690:	f002 f9c2 	bl	8002a18 <xTaskCreate>
 8000694:	4603      	mov	r3, r0
 8000696:	4a0f      	ldr	r2, [pc, #60]	@ (80006d4 <main+0x130>)
 8000698:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <main+0x130>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d00b      	beq.n	80006ba <main+0x116>
        __asm volatile
 80006a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006a6:	f383 8811 	msr	BASEPRI, r3
 80006aa:	f3bf 8f6f 	isb	sy
 80006ae:	f3bf 8f4f 	dsb	sy
 80006b2:	603b      	str	r3, [r7, #0]
    }
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0x112>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80006ba:	f002 fc21 	bl	8002f00 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006be:	bf00      	nop
 80006c0:	e7fd      	b.n	80006be <main+0x11a>
 80006c2:	bf00      	nop
 80006c4:	e0001000 	.word	0xe0001000
 80006c8:	20000030 	.word	0x20000030
 80006cc:	0800708c 	.word	0x0800708c
 80006d0:	08000965 	.word	0x08000965
 80006d4:	20000044 	.word	0x20000044
 80006d8:	20000040 	.word	0x20000040
 80006dc:	20000034 	.word	0x20000034
 80006e0:	0800709c 	.word	0x0800709c
 80006e4:	080009e1 	.word	0x080009e1
 80006e8:	20000038 	.word	0x20000038
 80006ec:	080070ac 	.word	0x080070ac
 80006f0:	08000a5d 	.word	0x08000a5d
 80006f4:	2000003c 	.word	0x2000003c
 80006f8:	080070bc 	.word	0x080070bc
 80006fc:	08000ae5 	.word	0x08000ae5

08000700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b094      	sub	sp, #80	@ 0x50
 8000704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000706:	f107 031c 	add.w	r3, r7, #28
 800070a:	2234      	movs	r2, #52	@ 0x34
 800070c:	2100      	movs	r1, #0
 800070e:	4618      	mov	r0, r3
 8000710:	f006 fc76 	bl	8007000 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000714:	f107 0308 	add.w	r3, r7, #8
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
 8000722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000724:	2300      	movs	r3, #0
 8000726:	607b      	str	r3, [r7, #4]
 8000728:	4b22      	ldr	r3, [pc, #136]	@ (80007b4 <SystemClock_Config+0xb4>)
 800072a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800072c:	4a21      	ldr	r2, [pc, #132]	@ (80007b4 <SystemClock_Config+0xb4>)
 800072e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000732:	6413      	str	r3, [r2, #64]	@ 0x40
 8000734:	4b1f      	ldr	r3, [pc, #124]	@ (80007b4 <SystemClock_Config+0xb4>)
 8000736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800073c:	607b      	str	r3, [r7, #4]
 800073e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000740:	2300      	movs	r3, #0
 8000742:	603b      	str	r3, [r7, #0]
 8000744:	4b1c      	ldr	r3, [pc, #112]	@ (80007b8 <SystemClock_Config+0xb8>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a1b      	ldr	r2, [pc, #108]	@ (80007b8 <SystemClock_Config+0xb8>)
 800074a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800074e:	6013      	str	r3, [r2, #0]
 8000750:	4b19      	ldr	r3, [pc, #100]	@ (80007b8 <SystemClock_Config+0xb8>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000758:	603b      	str	r3, [r7, #0]
 800075a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800075c:	2302      	movs	r3, #2
 800075e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000760:	2301      	movs	r3, #1
 8000762:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000764:	2310      	movs	r3, #16
 8000766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000768:	2300      	movs	r3, #0
 800076a:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800076c:	f107 031c 	add.w	r3, r7, #28
 8000770:	4618      	mov	r0, r3
 8000772:	f001 f83f 	bl	80017f4 <HAL_RCC_OscConfig>
 8000776:	4603      	mov	r3, r0
 8000778:	2b00      	cmp	r3, #0
 800077a:	d001      	beq.n	8000780 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800077c:	f000 f9ec 	bl	8000b58 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000780:	230f      	movs	r3, #15
 8000782:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000784:	2300      	movs	r3, #0
 8000786:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000788:	2300      	movs	r3, #0
 800078a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800078c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000790:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000796:	f107 0308 	add.w	r3, r7, #8
 800079a:	2100      	movs	r1, #0
 800079c:	4618      	mov	r0, r3
 800079e:	f000 fdeb 	bl	8001378 <HAL_RCC_ClockConfig>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d001      	beq.n	80007ac <SystemClock_Config+0xac>
  {
    Error_Handler();
 80007a8:	f000 f9d6 	bl	8000b58 <Error_Handler>
  }
}
 80007ac:	bf00      	nop
 80007ae:	3750      	adds	r7, #80	@ 0x50
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	@ 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	2300      	movs	r3, #0
 80007d4:	61bb      	str	r3, [r7, #24]
 80007d6:	4b5d      	ldr	r3, [pc, #372]	@ (800094c <MX_GPIO_Init+0x190>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007da:	4a5c      	ldr	r2, [pc, #368]	@ (800094c <MX_GPIO_Init+0x190>)
 80007dc:	f043 0304 	orr.w	r3, r3, #4
 80007e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e2:	4b5a      	ldr	r3, [pc, #360]	@ (800094c <MX_GPIO_Init+0x190>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	f003 0304 	and.w	r3, r3, #4
 80007ea:	61bb      	str	r3, [r7, #24]
 80007ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ee:	2300      	movs	r3, #0
 80007f0:	617b      	str	r3, [r7, #20]
 80007f2:	4b56      	ldr	r3, [pc, #344]	@ (800094c <MX_GPIO_Init+0x190>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f6:	4a55      	ldr	r2, [pc, #340]	@ (800094c <MX_GPIO_Init+0x190>)
 80007f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007fe:	4b53      	ldr	r3, [pc, #332]	@ (800094c <MX_GPIO_Init+0x190>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000806:	617b      	str	r3, [r7, #20]
 8000808:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800080a:	2300      	movs	r3, #0
 800080c:	613b      	str	r3, [r7, #16]
 800080e:	4b4f      	ldr	r3, [pc, #316]	@ (800094c <MX_GPIO_Init+0x190>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000812:	4a4e      	ldr	r2, [pc, #312]	@ (800094c <MX_GPIO_Init+0x190>)
 8000814:	f043 0302 	orr.w	r3, r3, #2
 8000818:	6313      	str	r3, [r2, #48]	@ 0x30
 800081a:	4b4c      	ldr	r3, [pc, #304]	@ (800094c <MX_GPIO_Init+0x190>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	f003 0302 	and.w	r3, r3, #2
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	60fb      	str	r3, [r7, #12]
 800082a:	4b48      	ldr	r3, [pc, #288]	@ (800094c <MX_GPIO_Init+0x190>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082e:	4a47      	ldr	r2, [pc, #284]	@ (800094c <MX_GPIO_Init+0x190>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	@ 0x30
 8000836:	4b45      	ldr	r3, [pc, #276]	@ (800094c <MX_GPIO_Init+0x190>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	60bb      	str	r3, [r7, #8]
 8000846:	4b41      	ldr	r3, [pc, #260]	@ (800094c <MX_GPIO_Init+0x190>)
 8000848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084a:	4a40      	ldr	r2, [pc, #256]	@ (800094c <MX_GPIO_Init+0x190>)
 800084c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000850:	6313      	str	r3, [r2, #48]	@ 0x30
 8000852:	4b3e      	ldr	r3, [pc, #248]	@ (800094c <MX_GPIO_Init+0x190>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b3a      	ldr	r3, [pc, #232]	@ (800094c <MX_GPIO_Init+0x190>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000866:	4a39      	ldr	r2, [pc, #228]	@ (800094c <MX_GPIO_Init+0x190>)
 8000868:	f043 0301 	orr.w	r3, r3, #1
 800086c:	6313      	str	r3, [r2, #48]	@ 0x30
 800086e:	4b37      	ldr	r3, [pc, #220]	@ (800094c <MX_GPIO_Init+0x190>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000880:	4833      	ldr	r0, [pc, #204]	@ (8000950 <MX_GPIO_Init+0x194>)
 8000882:	f000 fd45 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	2140      	movs	r1, #64	@ 0x40
 800088a:	4832      	ldr	r0, [pc, #200]	@ (8000954 <MX_GPIO_Init+0x198>)
 800088c:	f000 fd40 	bl	8001310 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000890:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000896:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800089a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008a0:	f107 031c 	add.w	r3, r7, #28
 80008a4:	4619      	mov	r1, r3
 80008a6:	482c      	ldr	r0, [pc, #176]	@ (8000958 <MX_GPIO_Init+0x19c>)
 80008a8:	f000 fb86 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008ac:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b2:	2301      	movs	r3, #1
 80008b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b6:	2300      	movs	r3, #0
 80008b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4822      	ldr	r0, [pc, #136]	@ (8000950 <MX_GPIO_Init+0x194>)
 80008c6:	f000 fb77 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008d0:	2302      	movs	r3, #2
 80008d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d4:	2300      	movs	r3, #0
 80008d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d8:	2303      	movs	r3, #3
 80008da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008dc:	2307      	movs	r3, #7
 80008de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008e0:	f107 031c 	add.w	r3, r7, #28
 80008e4:	4619      	mov	r1, r3
 80008e6:	481d      	ldr	r0, [pc, #116]	@ (800095c <MX_GPIO_Init+0x1a0>)
 80008e8:	f000 fb66 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f0:	2301      	movs	r3, #1
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f8:	2300      	movs	r3, #0
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	4814      	ldr	r0, [pc, #80]	@ (8000954 <MX_GPIO_Init+0x198>)
 8000904:	f000 fb58 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000908:	2380      	movs	r3, #128	@ 0x80
 800090a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090c:	2300      	movs	r3, #0
 800090e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	2300      	movs	r3, #0
 8000912:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	480e      	ldr	r0, [pc, #56]	@ (8000954 <MX_GPIO_Init+0x198>)
 800091c:	f000 fb4c 	bl	8000fb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000920:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000924:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000926:	2302      	movs	r3, #2
 8000928:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800092e:	2303      	movs	r3, #3
 8000930:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000932:	230a      	movs	r3, #10
 8000934:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4808      	ldr	r0, [pc, #32]	@ (8000960 <MX_GPIO_Init+0x1a4>)
 800093e:	f000 fb3b 	bl	8000fb8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000942:	bf00      	nop
 8000944:	3730      	adds	r7, #48	@ 0x30
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	40020400 	.word	0x40020400
 8000954:	40021800 	.word	0x40021800
 8000958:	40020800 	.word	0x40020800
 800095c:	40020c00 	.word	0x40020c00
 8000960:	40020000 	.word	0x40020000

08000964 <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters){
 8000964:	b580      	push	{r7, lr}
 8000966:	b086      	sub	sp, #24
 8000968:	af02      	add	r7, sp, #8
 800096a:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_OnTaskStartExec(1);
 800096c:	2001      	movs	r0, #1
 800096e:	f006 f93b 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000972:	4816      	ldr	r0, [pc, #88]	@ (80009cc <led_green_handler+0x68>)
 8000974:	f006 fac4 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 8000978:	2101      	movs	r1, #1
 800097a:	4815      	ldr	r0, [pc, #84]	@ (80009d0 <led_green_handler+0x6c>)
 800097c:	f000 fce1 	bl	8001342 <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000980:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000984:	9300      	str	r3, [sp, #0]
 8000986:	2300      	movs	r3, #0
 8000988:	2200      	movs	r2, #0
 800098a:	2100      	movs	r1, #0
 800098c:	2000      	movs	r0, #0
 800098e:	f003 f873 	bl	8003a78 <xTaskGenericNotifyWait>
 8000992:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d114      	bne.n	80009c4 <led_green_handler+0x60>
			vTaskSuspendAll();
 800099a:	f002 fb13 	bl	8002fc4 <vTaskSuspendAll>
			next_task_handle = LED2_task_handle;
 800099e:	4b0d      	ldr	r3, [pc, #52]	@ (80009d4 <led_green_handler+0x70>)
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	4a0d      	ldr	r2, [pc, #52]	@ (80009d8 <led_green_handler+0x74>)
 80009a4:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 80009a6:	f002 fb1b 	bl	8002fe0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_SET);
 80009aa:	2201      	movs	r2, #1
 80009ac:	2101      	movs	r1, #1
 80009ae:	4808      	ldr	r0, [pc, #32]	@ (80009d0 <led_green_handler+0x6c>)
 80009b0:	f000 fcae 	bl	8001310 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 80009b4:	4809      	ldr	r0, [pc, #36]	@ (80009dc <led_green_handler+0x78>)
 80009b6:	f006 faa3 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
			SEGGER_SYSVIEW_OnTaskStopExec();
 80009ba:	f006 f957 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
			vTaskDelete(NULL);
 80009be:	2000      	movs	r0, #0
 80009c0:	f002 f9b4 	bl	8002d2c <vTaskDelete>
			}
		SEGGER_SYSVIEW_OnTaskStopExec();
 80009c4:	f006 f952 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
		SEGGER_SYSVIEW_OnTaskStartExec(1);
 80009c8:	e7d0      	b.n	800096c <led_green_handler+0x8>
 80009ca:	bf00      	nop
 80009cc:	080070c8 	.word	0x080070c8
 80009d0:	40020400 	.word	0x40020400
 80009d4:	20000034 	.word	0x20000034
 80009d8:	20000040 	.word	0x20000040
 80009dc:	080070dc 	.word	0x080070dc

080009e0 <led_blue_handler>:
	}
}

static void led_blue_handler(void* parameters){
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af02      	add	r7, sp, #8
 80009e6:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_OnTaskStartExec(2);
 80009e8:	2002      	movs	r0, #2
 80009ea:	f006 f8fd 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80009ee:	4816      	ldr	r0, [pc, #88]	@ (8000a48 <led_blue_handler+0x68>)
 80009f0:	f006 fa86 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 80009f4:	2180      	movs	r1, #128	@ 0x80
 80009f6:	4815      	ldr	r0, [pc, #84]	@ (8000a4c <led_blue_handler+0x6c>)
 80009f8:	f000 fca3 	bl	8001342 <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80009fc:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8000a00:	9300      	str	r3, [sp, #0]
 8000a02:	2300      	movs	r3, #0
 8000a04:	2200      	movs	r2, #0
 8000a06:	2100      	movs	r1, #0
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f003 f835 	bl	8003a78 <xTaskGenericNotifyWait>
 8000a0e:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d114      	bne.n	8000a40 <led_blue_handler+0x60>
			vTaskSuspendAll();
 8000a16:	f002 fad5 	bl	8002fc4 <vTaskSuspendAll>
			next_task_handle = LED3_task_handle;
 8000a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a50 <led_blue_handler+0x70>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4a0d      	ldr	r2, [pc, #52]	@ (8000a54 <led_blue_handler+0x74>)
 8000a20:	6013      	str	r3, [r2, #0]
			xTaskResumeAll();
 8000a22:	f002 fadd 	bl	8002fe0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB,LD2_Pin,GPIO_PIN_SET);
 8000a26:	2201      	movs	r2, #1
 8000a28:	2180      	movs	r1, #128	@ 0x80
 8000a2a:	4808      	ldr	r0, [pc, #32]	@ (8000a4c <led_blue_handler+0x6c>)
 8000a2c:	f000 fc70 	bl	8001310 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue LED task");
 8000a30:	4809      	ldr	r0, [pc, #36]	@ (8000a58 <led_blue_handler+0x78>)
 8000a32:	f006 fa65 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
			SEGGER_SYSVIEW_OnTaskStopExec();
 8000a36:	f006 f919 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
			vTaskDelete(NULL);
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f002 f976 	bl	8002d2c <vTaskDelete>
		}
		SEGGER_SYSVIEW_OnTaskStopExec();
 8000a40:	f006 f914 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
		SEGGER_SYSVIEW_OnTaskStartExec(2);
 8000a44:	e7d0      	b.n	80009e8 <led_blue_handler+0x8>
 8000a46:	bf00      	nop
 8000a48:	080070f4 	.word	0x080070f4
 8000a4c:	40020400 	.word	0x40020400
 8000a50:	20000038 	.word	0x20000038
 8000a54:	20000040 	.word	0x20000040
 8000a58:	08007108 	.word	0x08007108

08000a5c <led_red_handler>:
	}
}

static void led_red_handler(void* parameters){
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af02      	add	r7, sp, #8
 8000a62:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_OnTaskStartExec(3);
 8000a64:	2003      	movs	r0, #3
 8000a66:	f006 f8bf 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a6a:	4819      	ldr	r0, [pc, #100]	@ (8000ad0 <led_red_handler+0x74>)
 8000a6c:	f006 fa48 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
 8000a70:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a74:	4817      	ldr	r0, [pc, #92]	@ (8000ad4 <led_red_handler+0x78>)
 8000a76:	f000 fc64 	bl	8001342 <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a7a:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a7e:	9300      	str	r3, [sp, #0]
 8000a80:	2300      	movs	r3, #0
 8000a82:	2200      	movs	r2, #0
 8000a84:	2100      	movs	r1, #0
 8000a86:	2000      	movs	r0, #0
 8000a88:	f002 fff6 	bl	8003a78 <xTaskGenericNotifyWait>
 8000a8c:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 8000a8e:	68fb      	ldr	r3, [r7, #12]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d119      	bne.n	8000ac8 <led_red_handler+0x6c>
			vTaskSuspendAll();
 8000a94:	f002 fa96 	bl	8002fc4 <vTaskSuspendAll>
			next_task_handle = NULL;
 8000a98:	4b0f      	ldr	r3, [pc, #60]	@ (8000ad8 <led_red_handler+0x7c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]
			xTaskResumeAll();
 8000a9e:	f002 fa9f 	bl	8002fe0 <xTaskResumeAll>
			HAL_GPIO_WritePin(GPIOB,LD3_Pin,GPIO_PIN_SET);
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000aa8:	480a      	ldr	r0, [pc, #40]	@ (8000ad4 <led_red_handler+0x78>)
 8000aaa:	f000 fc31 	bl	8001310 <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000aae:	480b      	ldr	r0, [pc, #44]	@ (8000adc <led_red_handler+0x80>)
 8000ab0:	f006 fa26 	bl	8006f00 <SEGGER_SYSVIEW_PrintfTarget>
			vTaskDelete(BTN_task_handle);
 8000ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ae0 <led_red_handler+0x84>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4618      	mov	r0, r3
 8000aba:	f002 f937 	bl	8002d2c <vTaskDelete>
			SEGGER_SYSVIEW_OnTaskStopExec();
 8000abe:	f006 f8d5 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
			vTaskDelete(NULL);
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	f002 f932 	bl	8002d2c <vTaskDelete>
		}
		SEGGER_SYSVIEW_OnTaskStopExec();
 8000ac8:	f006 f8d0 	bl	8006c6c <SEGGER_SYSVIEW_OnTaskStopExec>
		SEGGER_SYSVIEW_OnTaskStartExec(3);
 8000acc:	e7ca      	b.n	8000a64 <led_red_handler+0x8>
 8000ace:	bf00      	nop
 8000ad0:	08007120 	.word	0x08007120
 8000ad4:	40020400 	.word	0x40020400
 8000ad8:	20000040 	.word	0x20000040
 8000adc:	08007134 	.word	0x08007134
 8000ae0:	2000003c 	.word	0x2000003c

08000ae4 <btn_handler>:
	}
}

static void btn_handler(void* parameters){
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b086      	sub	sp, #24
 8000ae8:	af02      	add	r7, sp, #8
 8000aea:	6078      	str	r0, [r7, #4]

	uint8_t btn_read = 0;
 8000aec:	2300      	movs	r3, #0
 8000aee:	73bb      	strb	r3, [r7, #14]
	uint8_t prev_read = 0;
 8000af0:	2300      	movs	r3, #0
 8000af2:	73fb      	strb	r3, [r7, #15]

	while(1){
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000af4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000af8:	480c      	ldr	r0, [pc, #48]	@ (8000b2c <btn_handler+0x48>)
 8000afa:	f000 fbf1 	bl	80012e0 <HAL_GPIO_ReadPin>
 8000afe:	4603      	mov	r3, r0
 8000b00:	73bb      	strb	r3, [r7, #14]

		if(btn_read){
 8000b02:	7bbb      	ldrb	r3, [r7, #14]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d00b      	beq.n	8000b20 <btn_handler+0x3c>
			if(! prev_read){
 8000b08:	7bfb      	ldrb	r3, [r7, #15]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d108      	bne.n	8000b20 <btn_handler+0x3c>
				xTaskNotify(next_task_handle ,0,eNoAction);
 8000b0e:	4b08      	ldr	r3, [pc, #32]	@ (8000b30 <btn_handler+0x4c>)
 8000b10:	6818      	ldr	r0, [r3, #0]
 8000b12:	2300      	movs	r3, #0
 8000b14:	9300      	str	r3, [sp, #0]
 8000b16:	2300      	movs	r3, #0
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2100      	movs	r1, #0
 8000b1c:	f003 f836 	bl	8003b8c <xTaskGenericNotify>
			}
		}
		prev_read = btn_read;
 8000b20:	7bbb      	ldrb	r3, [r7, #14]
 8000b22:	73fb      	strb	r3, [r7, #15]
		vTaskDelay(pdMS_TO_TICKS(10));
 8000b24:	200a      	movs	r0, #10
 8000b26:	f002 f9b1 	bl	8002e8c <vTaskDelay>
		btn_read = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000b2a:	e7e3      	b.n	8000af4 <btn_handler+0x10>
 8000b2c:	40020800 	.word	0x40020800
 8000b30:	20000040 	.word	0x20000040

08000b34 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	4a04      	ldr	r2, [pc, #16]	@ (8000b54 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b42:	4293      	cmp	r3, r2
 8000b44:	d101      	bne.n	8000b4a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b46:	f000 f935 	bl	8000db4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b4a:	bf00      	nop
 8000b4c:	3708      	adds	r7, #8
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40001000 	.word	0x40001000

08000b58 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b5c:	b672      	cpsid	i
}
 8000b5e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b60:	bf00      	nop
 8000b62:	e7fd      	b.n	8000b60 <Error_Handler+0x8>

08000b64 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	4b10      	ldr	r3, [pc, #64]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b72:	4a0f      	ldr	r2, [pc, #60]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b74:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b78:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b82:	607b      	str	r3, [r7, #4]
 8000b84:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b86:	2300      	movs	r3, #0
 8000b88:	603b      	str	r3, [r7, #0]
 8000b8a:	4b09      	ldr	r3, [pc, #36]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b8e:	4a08      	ldr	r2, [pc, #32]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b94:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b96:	4b06      	ldr	r3, [pc, #24]	@ (8000bb0 <HAL_MspInit+0x4c>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b9e:	603b      	str	r3, [r7, #0]
 8000ba0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000ba2:	f003 fd6b 	bl	800467c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	3708      	adds	r7, #8
 8000baa:	46bd      	mov	sp, r7
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40023800 	.word	0x40023800

08000bb4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	@ 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	60fb      	str	r3, [r7, #12]
 8000bc8:	4b33      	ldr	r3, [pc, #204]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bcc:	4a32      	ldr	r2, [pc, #200]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bd4:	4b30      	ldr	r3, [pc, #192]	@ (8000c98 <HAL_InitTick+0xe4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	f003 0310 	and.w	r3, r3, #16
 8000bdc:	60fb      	str	r3, [r7, #12]
 8000bde:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000be0:	f107 0210 	add.w	r2, r7, #16
 8000be4:	f107 0314 	add.w	r3, r7, #20
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fdd0 	bl	8001790 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000bf0:	6a3b      	ldr	r3, [r7, #32]
 8000bf2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d103      	bne.n	8000c02 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000bfa:	f000 fdb5 	bl	8001768 <HAL_RCC_GetPCLK1Freq>
 8000bfe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000c00:	e004      	b.n	8000c0c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c02:	f000 fdb1 	bl	8001768 <HAL_RCC_GetPCLK1Freq>
 8000c06:	4603      	mov	r3, r0
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000c0e:	4a23      	ldr	r2, [pc, #140]	@ (8000c9c <HAL_InitTick+0xe8>)
 8000c10:	fba2 2303 	umull	r2, r3, r2, r3
 8000c14:	0c9b      	lsrs	r3, r3, #18
 8000c16:	3b01      	subs	r3, #1
 8000c18:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c1c:	4a21      	ldr	r2, [pc, #132]	@ (8000ca4 <HAL_InitTick+0xf0>)
 8000c1e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c22:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000c26:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c28:	4a1d      	ldr	r2, [pc, #116]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000c2c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c34:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3a:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c40:	4817      	ldr	r0, [pc, #92]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c42:	f001 f85b 	bl	8001cfc <HAL_TIM_Base_Init>
 8000c46:	4603      	mov	r3, r0
 8000c48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000c4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d11b      	bne.n	8000c8c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c54:	4812      	ldr	r0, [pc, #72]	@ (8000ca0 <HAL_InitTick+0xec>)
 8000c56:	f001 f8ab 	bl	8001db0 <HAL_TIM_Base_Start_IT>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c60:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c64:	2b00      	cmp	r3, #0
 8000c66:	d111      	bne.n	8000c8c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c68:	2036      	movs	r0, #54	@ 0x36
 8000c6a:	f000 f997 	bl	8000f9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	2b0f      	cmp	r3, #15
 8000c72:	d808      	bhi.n	8000c86 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c74:	2200      	movs	r2, #0
 8000c76:	6879      	ldr	r1, [r7, #4]
 8000c78:	2036      	movs	r0, #54	@ 0x36
 8000c7a:	f000 f973 	bl	8000f64 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c7e:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca8 <HAL_InitTick+0xf4>)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	6013      	str	r3, [r2, #0]
 8000c84:	e002      	b.n	8000c8c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c86:	2301      	movs	r3, #1
 8000c88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3738      	adds	r7, #56	@ 0x38
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	431bde83 	.word	0x431bde83
 8000ca0:	20000048 	.word	0x20000048
 8000ca4:	40001000 	.word	0x40001000
 8000ca8:	20000004 	.word	0x20000004

08000cac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cac:	b480      	push	{r7}
 8000cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000cb0:	bf00      	nop
 8000cb2:	e7fd      	b.n	8000cb0 <NMI_Handler+0x4>

08000cb4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cb8:	bf00      	nop
 8000cba:	e7fd      	b.n	8000cb8 <HardFault_Handler+0x4>

08000cbc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cc0:	bf00      	nop
 8000cc2:	e7fd      	b.n	8000cc0 <MemManage_Handler+0x4>

08000cc4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cc8:	bf00      	nop
 8000cca:	e7fd      	b.n	8000cc8 <BusFault_Handler+0x4>

08000ccc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000cd0:	bf00      	nop
 8000cd2:	e7fd      	b.n	8000cd0 <UsageFault_Handler+0x4>

08000cd4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cd8:	bf00      	nop
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce0:	4770      	bx	lr
	...

08000ce4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ce8:	4802      	ldr	r0, [pc, #8]	@ (8000cf4 <TIM6_DAC_IRQHandler+0x10>)
 8000cea:	f001 f8d1 	bl	8001e90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000cee:	bf00      	nop
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	20000048 	.word	0x20000048

08000cf8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cfc:	4b06      	ldr	r3, [pc, #24]	@ (8000d18 <SystemInit+0x20>)
 8000cfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d02:	4a05      	ldr	r2, [pc, #20]	@ (8000d18 <SystemInit+0x20>)
 8000d04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d0c:	bf00      	nop
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d14:	4770      	bx	lr
 8000d16:	bf00      	nop
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000d1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000d54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000d20:	f7ff ffea 	bl	8000cf8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d24:	480c      	ldr	r0, [pc, #48]	@ (8000d58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000d26:	490d      	ldr	r1, [pc, #52]	@ (8000d5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000d2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d2c:	e002      	b.n	8000d34 <LoopCopyDataInit>

08000d2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d32:	3304      	adds	r3, #4

08000d34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d38:	d3f9      	bcc.n	8000d2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000d64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000d3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000d68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000d3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d40:	e001      	b.n	8000d46 <LoopFillZerobss>

08000d42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d44:	3204      	adds	r2, #4

08000d46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d48:	d3fb      	bcc.n	8000d42 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000d4a:	f006 f961 	bl	8007010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d4e:	f7ff fc29 	bl	80005a4 <main>
  bx  lr    
 8000d52:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000d54:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d5c:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d60:	08007270 	.word	0x08007270
  ldr r2, =_sbss
 8000d64:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000d68:	2004c8b0 	.word	0x2004c8b0

08000d6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d6c:	e7fe      	b.n	8000d6c <ADC_IRQHandler>
	...

08000d70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d74:	4b0e      	ldr	r3, [pc, #56]	@ (8000db0 <HAL_Init+0x40>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a0d      	ldr	r2, [pc, #52]	@ (8000db0 <HAL_Init+0x40>)
 8000d7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d80:	4b0b      	ldr	r3, [pc, #44]	@ (8000db0 <HAL_Init+0x40>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	4a0a      	ldr	r2, [pc, #40]	@ (8000db0 <HAL_Init+0x40>)
 8000d86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d8c:	4b08      	ldr	r3, [pc, #32]	@ (8000db0 <HAL_Init+0x40>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a07      	ldr	r2, [pc, #28]	@ (8000db0 <HAL_Init+0x40>)
 8000d92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d98:	2003      	movs	r0, #3
 8000d9a:	f000 f8d8 	bl	8000f4e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d9e:	200f      	movs	r0, #15
 8000da0:	f7ff ff08 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000da4:	f7ff fede 	bl	8000b64 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000da8:	2300      	movs	r3, #0
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023c00 	.word	0x40023c00

08000db4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000db8:	4b06      	ldr	r3, [pc, #24]	@ (8000dd4 <HAL_IncTick+0x20>)
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	4b06      	ldr	r3, [pc, #24]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	4413      	add	r3, r2
 8000dc4:	4a04      	ldr	r2, [pc, #16]	@ (8000dd8 <HAL_IncTick+0x24>)
 8000dc6:	6013      	str	r3, [r2, #0]
}
 8000dc8:	bf00      	nop
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	20000008 	.word	0x20000008
 8000dd8:	20000090 	.word	0x20000090

08000ddc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  return uwTick;
 8000de0:	4b03      	ldr	r3, [pc, #12]	@ (8000df0 <HAL_GetTick+0x14>)
 8000de2:	681b      	ldr	r3, [r3, #0]
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	20000090 	.word	0x20000090

08000df4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	f003 0307 	and.w	r3, r3, #7
 8000e02:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e04:	4b0c      	ldr	r3, [pc, #48]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e06:	68db      	ldr	r3, [r3, #12]
 8000e08:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e10:	4013      	ands	r3, r2
 8000e12:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e1c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e20:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e24:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e26:	4a04      	ldr	r2, [pc, #16]	@ (8000e38 <__NVIC_SetPriorityGrouping+0x44>)
 8000e28:	68bb      	ldr	r3, [r7, #8]
 8000e2a:	60d3      	str	r3, [r2, #12]
}
 8000e2c:	bf00      	nop
 8000e2e:	3714      	adds	r7, #20
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr
 8000e38:	e000ed00 	.word	0xe000ed00

08000e3c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e40:	4b04      	ldr	r3, [pc, #16]	@ (8000e54 <__NVIC_GetPriorityGrouping+0x18>)
 8000e42:	68db      	ldr	r3, [r3, #12]
 8000e44:	0a1b      	lsrs	r3, r3, #8
 8000e46:	f003 0307 	and.w	r3, r3, #7
}
 8000e4a:	4618      	mov	r0, r3
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	4603      	mov	r3, r0
 8000e60:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	db0b      	blt.n	8000e82 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e6a:	79fb      	ldrb	r3, [r7, #7]
 8000e6c:	f003 021f 	and.w	r2, r3, #31
 8000e70:	4907      	ldr	r1, [pc, #28]	@ (8000e90 <__NVIC_EnableIRQ+0x38>)
 8000e72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e76:	095b      	lsrs	r3, r3, #5
 8000e78:	2001      	movs	r0, #1
 8000e7a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e7e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	e000e100 	.word	0xe000e100

08000e94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b083      	sub	sp, #12
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	6039      	str	r1, [r7, #0]
 8000e9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	db0a      	blt.n	8000ebe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	b2da      	uxtb	r2, r3
 8000eac:	490c      	ldr	r1, [pc, #48]	@ (8000ee0 <__NVIC_SetPriority+0x4c>)
 8000eae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb2:	0112      	lsls	r2, r2, #4
 8000eb4:	b2d2      	uxtb	r2, r2
 8000eb6:	440b      	add	r3, r1
 8000eb8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ebc:	e00a      	b.n	8000ed4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	b2da      	uxtb	r2, r3
 8000ec2:	4908      	ldr	r1, [pc, #32]	@ (8000ee4 <__NVIC_SetPriority+0x50>)
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	f003 030f 	and.w	r3, r3, #15
 8000eca:	3b04      	subs	r3, #4
 8000ecc:	0112      	lsls	r2, r2, #4
 8000ece:	b2d2      	uxtb	r2, r2
 8000ed0:	440b      	add	r3, r1
 8000ed2:	761a      	strb	r2, [r3, #24]
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr
 8000ee0:	e000e100 	.word	0xe000e100
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	b089      	sub	sp, #36	@ 0x24
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	60b9      	str	r1, [r7, #8]
 8000ef2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	f003 0307 	and.w	r3, r3, #7
 8000efa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f1c3 0307 	rsb	r3, r3, #7
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	bf28      	it	cs
 8000f06:	2304      	movcs	r3, #4
 8000f08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	2b06      	cmp	r3, #6
 8000f10:	d902      	bls.n	8000f18 <NVIC_EncodePriority+0x30>
 8000f12:	69fb      	ldr	r3, [r7, #28]
 8000f14:	3b03      	subs	r3, #3
 8000f16:	e000      	b.n	8000f1a <NVIC_EncodePriority+0x32>
 8000f18:	2300      	movs	r3, #0
 8000f1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f1c:	f04f 32ff 	mov.w	r2, #4294967295
 8000f20:	69bb      	ldr	r3, [r7, #24]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43da      	mvns	r2, r3
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	401a      	ands	r2, r3
 8000f2c:	697b      	ldr	r3, [r7, #20]
 8000f2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f30:	f04f 31ff 	mov.w	r1, #4294967295
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	fa01 f303 	lsl.w	r3, r1, r3
 8000f3a:	43d9      	mvns	r1, r3
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f40:	4313      	orrs	r3, r2
         );
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3724      	adds	r7, #36	@ 0x24
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr

08000f4e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff ff4c 	bl	8000df4 <__NVIC_SetPriorityGrouping>
}
 8000f5c:	bf00      	nop
 8000f5e:	3708      	adds	r7, #8
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
 8000f70:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f76:	f7ff ff61 	bl	8000e3c <__NVIC_GetPriorityGrouping>
 8000f7a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f7c:	687a      	ldr	r2, [r7, #4]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	6978      	ldr	r0, [r7, #20]
 8000f82:	f7ff ffb1 	bl	8000ee8 <NVIC_EncodePriority>
 8000f86:	4602      	mov	r2, r0
 8000f88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f8c:	4611      	mov	r1, r2
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff ff80 	bl	8000e94 <__NVIC_SetPriority>
}
 8000f94:	bf00      	nop
 8000f96:	3718      	adds	r7, #24
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}

08000f9c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	b082      	sub	sp, #8
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff54 	bl	8000e58 <__NVIC_EnableIRQ>
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b089      	sub	sp, #36	@ 0x24
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fce:	2300      	movs	r3, #0
 8000fd0:	61fb      	str	r3, [r7, #28]
 8000fd2:	e165      	b.n	80012a0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	697b      	ldr	r3, [r7, #20]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8154 	bne.w	800129a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0303 	and.w	r3, r3, #3
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d005      	beq.n	800100a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001006:	2b02      	cmp	r3, #2
 8001008:	d130      	bne.n	800106c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	689b      	ldr	r3, [r3, #8]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	2203      	movs	r2, #3
 8001016:	fa02 f303 	lsl.w	r3, r2, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4013      	ands	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	68da      	ldr	r2, [r3, #12]
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	69ba      	ldr	r2, [r7, #24]
 8001030:	4313      	orrs	r3, r2
 8001032:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	69ba      	ldr	r2, [r7, #24]
 8001038:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001040:	2201      	movs	r2, #1
 8001042:	69fb      	ldr	r3, [r7, #28]
 8001044:	fa02 f303 	lsl.w	r3, r2, r3
 8001048:	43db      	mvns	r3, r3
 800104a:	69ba      	ldr	r2, [r7, #24]
 800104c:	4013      	ands	r3, r2
 800104e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	091b      	lsrs	r3, r3, #4
 8001056:	f003 0201 	and.w	r2, r3, #1
 800105a:	69fb      	ldr	r3, [r7, #28]
 800105c:	fa02 f303 	lsl.w	r3, r2, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4313      	orrs	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	69ba      	ldr	r2, [r7, #24]
 800106a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f003 0303 	and.w	r3, r3, #3
 8001074:	2b03      	cmp	r3, #3
 8001076:	d017      	beq.n	80010a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	2203      	movs	r2, #3
 8001084:	fa02 f303 	lsl.w	r3, r2, r3
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	4313      	orrs	r3, r2
 80010a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f003 0303 	and.w	r3, r3, #3
 80010b0:	2b02      	cmp	r3, #2
 80010b2:	d123      	bne.n	80010fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010b4:	69fb      	ldr	r3, [r7, #28]
 80010b6:	08da      	lsrs	r2, r3, #3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	3208      	adds	r2, #8
 80010bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	f003 0307 	and.w	r3, r3, #7
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	69ba      	ldr	r2, [r7, #24]
 80010d4:	4013      	ands	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	691a      	ldr	r2, [r3, #16]
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f003 0307 	and.w	r3, r3, #7
 80010e2:	009b      	lsls	r3, r3, #2
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	4313      	orrs	r3, r2
 80010ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80010ee:	69fb      	ldr	r3, [r7, #28]
 80010f0:	08da      	lsrs	r2, r3, #3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	3208      	adds	r2, #8
 80010f6:	69b9      	ldr	r1, [r7, #24]
 80010f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	005b      	lsls	r3, r3, #1
 8001106:	2203      	movs	r2, #3
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43db      	mvns	r3, r3
 800110e:	69ba      	ldr	r2, [r7, #24]
 8001110:	4013      	ands	r3, r2
 8001112:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	f003 0203 	and.w	r2, r3, #3
 800111c:	69fb      	ldr	r3, [r7, #28]
 800111e:	005b      	lsls	r3, r3, #1
 8001120:	fa02 f303 	lsl.w	r3, r2, r3
 8001124:	69ba      	ldr	r2, [r7, #24]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001138:	2b00      	cmp	r3, #0
 800113a:	f000 80ae 	beq.w	800129a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800113e:	2300      	movs	r3, #0
 8001140:	60fb      	str	r3, [r7, #12]
 8001142:	4b5d      	ldr	r3, [pc, #372]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001144:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001146:	4a5c      	ldr	r2, [pc, #368]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001148:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800114c:	6453      	str	r3, [r2, #68]	@ 0x44
 800114e:	4b5a      	ldr	r3, [pc, #360]	@ (80012b8 <HAL_GPIO_Init+0x300>)
 8001150:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001152:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001156:	60fb      	str	r3, [r7, #12]
 8001158:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800115a:	4a58      	ldr	r2, [pc, #352]	@ (80012bc <HAL_GPIO_Init+0x304>)
 800115c:	69fb      	ldr	r3, [r7, #28]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001166:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001168:	69fb      	ldr	r3, [r7, #28]
 800116a:	f003 0303 	and.w	r3, r3, #3
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	220f      	movs	r2, #15
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
 8001176:	43db      	mvns	r3, r3
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	4013      	ands	r3, r2
 800117c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a4f      	ldr	r2, [pc, #316]	@ (80012c0 <HAL_GPIO_Init+0x308>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d025      	beq.n	80011d2 <HAL_GPIO_Init+0x21a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	4a4e      	ldr	r2, [pc, #312]	@ (80012c4 <HAL_GPIO_Init+0x30c>)
 800118a:	4293      	cmp	r3, r2
 800118c:	d01f      	beq.n	80011ce <HAL_GPIO_Init+0x216>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a4d      	ldr	r2, [pc, #308]	@ (80012c8 <HAL_GPIO_Init+0x310>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d019      	beq.n	80011ca <HAL_GPIO_Init+0x212>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a4c      	ldr	r2, [pc, #304]	@ (80012cc <HAL_GPIO_Init+0x314>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d013      	beq.n	80011c6 <HAL_GPIO_Init+0x20e>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a4b      	ldr	r2, [pc, #300]	@ (80012d0 <HAL_GPIO_Init+0x318>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d00d      	beq.n	80011c2 <HAL_GPIO_Init+0x20a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a4a      	ldr	r2, [pc, #296]	@ (80012d4 <HAL_GPIO_Init+0x31c>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d007      	beq.n	80011be <HAL_GPIO_Init+0x206>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4a49      	ldr	r2, [pc, #292]	@ (80012d8 <HAL_GPIO_Init+0x320>)
 80011b2:	4293      	cmp	r3, r2
 80011b4:	d101      	bne.n	80011ba <HAL_GPIO_Init+0x202>
 80011b6:	2306      	movs	r3, #6
 80011b8:	e00c      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ba:	2307      	movs	r3, #7
 80011bc:	e00a      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011be:	2305      	movs	r3, #5
 80011c0:	e008      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c2:	2304      	movs	r3, #4
 80011c4:	e006      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011c6:	2303      	movs	r3, #3
 80011c8:	e004      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ca:	2302      	movs	r3, #2
 80011cc:	e002      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011ce:	2301      	movs	r3, #1
 80011d0:	e000      	b.n	80011d4 <HAL_GPIO_Init+0x21c>
 80011d2:	2300      	movs	r3, #0
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	f002 0203 	and.w	r2, r2, #3
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	4093      	lsls	r3, r2
 80011de:	69ba      	ldr	r2, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80011e4:	4935      	ldr	r1, [pc, #212]	@ (80012bc <HAL_GPIO_Init+0x304>)
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	089b      	lsrs	r3, r3, #2
 80011ea:	3302      	adds	r3, #2
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80011f2:	4b3a      	ldr	r3, [pc, #232]	@ (80012dc <HAL_GPIO_Init+0x324>)
 80011f4:	689b      	ldr	r3, [r3, #8]
 80011f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f8:	693b      	ldr	r3, [r7, #16]
 80011fa:	43db      	mvns	r3, r3
 80011fc:	69ba      	ldr	r2, [r7, #24]
 80011fe:	4013      	ands	r3, r2
 8001200:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800120a:	2b00      	cmp	r3, #0
 800120c:	d003      	beq.n	8001216 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001216:	4a31      	ldr	r2, [pc, #196]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800121c:	4b2f      	ldr	r3, [pc, #188]	@ (80012dc <HAL_GPIO_Init+0x324>)
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	43db      	mvns	r3, r3
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4013      	ands	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001234:	2b00      	cmp	r3, #0
 8001236:	d003      	beq.n	8001240 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001240:	4a26      	ldr	r2, [pc, #152]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001242:	69bb      	ldr	r3, [r7, #24]
 8001244:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001246:	4b25      	ldr	r3, [pc, #148]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	43db      	mvns	r3, r3
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	4013      	ands	r3, r2
 8001254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685b      	ldr	r3, [r3, #4]
 800125a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800125e:	2b00      	cmp	r3, #0
 8001260:	d003      	beq.n	800126a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001262:	69ba      	ldr	r2, [r7, #24]
 8001264:	693b      	ldr	r3, [r7, #16]
 8001266:	4313      	orrs	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800126a:	4a1c      	ldr	r2, [pc, #112]	@ (80012dc <HAL_GPIO_Init+0x324>)
 800126c:	69bb      	ldr	r3, [r7, #24]
 800126e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001270:	4b1a      	ldr	r3, [pc, #104]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	43db      	mvns	r3, r3
 800127a:	69ba      	ldr	r2, [r7, #24]
 800127c:	4013      	ands	r3, r2
 800127e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001280:	683b      	ldr	r3, [r7, #0]
 8001282:	685b      	ldr	r3, [r3, #4]
 8001284:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001288:	2b00      	cmp	r3, #0
 800128a:	d003      	beq.n	8001294 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	4313      	orrs	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001294:	4a11      	ldr	r2, [pc, #68]	@ (80012dc <HAL_GPIO_Init+0x324>)
 8001296:	69bb      	ldr	r3, [r7, #24]
 8001298:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	3301      	adds	r3, #1
 800129e:	61fb      	str	r3, [r7, #28]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	2b0f      	cmp	r3, #15
 80012a4:	f67f ae96 	bls.w	8000fd4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012a8:	bf00      	nop
 80012aa:	bf00      	nop
 80012ac:	3724      	adds	r7, #36	@ 0x24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40013800 	.word	0x40013800
 80012c0:	40020000 	.word	0x40020000
 80012c4:	40020400 	.word	0x40020400
 80012c8:	40020800 	.word	0x40020800
 80012cc:	40020c00 	.word	0x40020c00
 80012d0:	40021000 	.word	0x40021000
 80012d4:	40021400 	.word	0x40021400
 80012d8:	40021800 	.word	0x40021800
 80012dc:	40013c00 	.word	0x40013c00

080012e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
 80012e8:	460b      	mov	r3, r1
 80012ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	691a      	ldr	r2, [r3, #16]
 80012f0:	887b      	ldrh	r3, [r7, #2]
 80012f2:	4013      	ands	r3, r2
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80012f8:	2301      	movs	r3, #1
 80012fa:	73fb      	strb	r3, [r7, #15]
 80012fc:	e001      	b.n	8001302 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80012fe:	2300      	movs	r3, #0
 8001300:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001302:	7bfb      	ldrb	r3, [r7, #15]
}
 8001304:	4618      	mov	r0, r3
 8001306:	3714      	adds	r7, #20
 8001308:	46bd      	mov	sp, r7
 800130a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130e:	4770      	bx	lr

08001310 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
 8001318:	460b      	mov	r3, r1
 800131a:	807b      	strh	r3, [r7, #2]
 800131c:	4613      	mov	r3, r2
 800131e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001320:	787b      	ldrb	r3, [r7, #1]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001326:	887a      	ldrh	r2, [r7, #2]
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800132c:	e003      	b.n	8001336 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800132e:	887b      	ldrh	r3, [r7, #2]
 8001330:	041a      	lsls	r2, r3, #16
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	619a      	str	r2, [r3, #24]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001342:	b480      	push	{r7}
 8001344:	b085      	sub	sp, #20
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
 800134a:	460b      	mov	r3, r1
 800134c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	695b      	ldr	r3, [r3, #20]
 8001352:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	4013      	ands	r3, r2
 800135a:	041a      	lsls	r2, r3, #16
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	43d9      	mvns	r1, r3
 8001360:	887b      	ldrh	r3, [r7, #2]
 8001362:	400b      	ands	r3, r1
 8001364:	431a      	orrs	r2, r3
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	619a      	str	r2, [r3, #24]
}
 800136a:	bf00      	nop
 800136c:	3714      	adds	r7, #20
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	2b00      	cmp	r3, #0
 8001386:	d101      	bne.n	800138c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e0cc      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800138c:	4b68      	ldr	r3, [pc, #416]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 0307 	and.w	r3, r3, #7
 8001394:	683a      	ldr	r2, [r7, #0]
 8001396:	429a      	cmp	r2, r3
 8001398:	d90c      	bls.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800139a:	4b65      	ldr	r3, [pc, #404]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800139c:	683a      	ldr	r2, [r7, #0]
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80013a2:	4b63      	ldr	r3, [pc, #396]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0307 	and.w	r3, r3, #7
 80013aa:	683a      	ldr	r2, [r7, #0]
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d001      	beq.n	80013b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e0b8      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d020      	beq.n	8001402 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0304 	and.w	r3, r3, #4
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d005      	beq.n	80013d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80013cc:	4b59      	ldr	r3, [pc, #356]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ce:	689b      	ldr	r3, [r3, #8]
 80013d0:	4a58      	ldr	r2, [pc, #352]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80013d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 0308 	and.w	r3, r3, #8
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d005      	beq.n	80013f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80013e4:	4b53      	ldr	r3, [pc, #332]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	4a52      	ldr	r2, [pc, #328]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80013ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013f0:	4b50      	ldr	r3, [pc, #320]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	689b      	ldr	r3, [r3, #8]
 80013fc:	494d      	ldr	r1, [pc, #308]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80013fe:	4313      	orrs	r3, r2
 8001400:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f003 0301 	and.w	r3, r3, #1
 800140a:	2b00      	cmp	r3, #0
 800140c:	d044      	beq.n	8001498 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	2b01      	cmp	r3, #1
 8001414:	d107      	bne.n	8001426 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	4b47      	ldr	r3, [pc, #284]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141e:	2b00      	cmp	r3, #0
 8001420:	d119      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e07f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	2b02      	cmp	r3, #2
 800142c:	d003      	beq.n	8001436 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001432:	2b03      	cmp	r3, #3
 8001434:	d107      	bne.n	8001446 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001436:	4b3f      	ldr	r3, [pc, #252]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800143e:	2b00      	cmp	r3, #0
 8001440:	d109      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e06f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001446:	4b3b      	ldr	r3, [pc, #236]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	2b00      	cmp	r3, #0
 8001450:	d101      	bne.n	8001456 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e067      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001456:	4b37      	ldr	r3, [pc, #220]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	f023 0203 	bic.w	r2, r3, #3
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	685b      	ldr	r3, [r3, #4]
 8001462:	4934      	ldr	r1, [pc, #208]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001464:	4313      	orrs	r3, r2
 8001466:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001468:	f7ff fcb8 	bl	8000ddc <HAL_GetTick>
 800146c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800146e:	e00a      	b.n	8001486 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001470:	f7ff fcb4 	bl	8000ddc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800147e:	4293      	cmp	r3, r2
 8001480:	d901      	bls.n	8001486 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001482:	2303      	movs	r3, #3
 8001484:	e04f      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001486:	4b2b      	ldr	r3, [pc, #172]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001488:	689b      	ldr	r3, [r3, #8]
 800148a:	f003 020c 	and.w	r2, r3, #12
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	429a      	cmp	r2, r3
 8001496:	d1eb      	bne.n	8001470 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001498:	4b25      	ldr	r3, [pc, #148]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	683a      	ldr	r2, [r7, #0]
 80014a2:	429a      	cmp	r2, r3
 80014a4:	d20c      	bcs.n	80014c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a6:	4b22      	ldr	r3, [pc, #136]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014a8:	683a      	ldr	r2, [r7, #0]
 80014aa:	b2d2      	uxtb	r2, r2
 80014ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014ae:	4b20      	ldr	r3, [pc, #128]	@ (8001530 <HAL_RCC_ClockConfig+0x1b8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0307 	and.w	r3, r3, #7
 80014b6:	683a      	ldr	r2, [r7, #0]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d001      	beq.n	80014c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e032      	b.n	8001526 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f003 0304 	and.w	r3, r3, #4
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d008      	beq.n	80014de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80014cc:	4b19      	ldr	r3, [pc, #100]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	68db      	ldr	r3, [r3, #12]
 80014d8:	4916      	ldr	r1, [pc, #88]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0308 	and.w	r3, r3, #8
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d009      	beq.n	80014fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80014ea:	4b12      	ldr	r3, [pc, #72]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	00db      	lsls	r3, r3, #3
 80014f8:	490e      	ldr	r1, [pc, #56]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 80014fa:	4313      	orrs	r3, r2
 80014fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014fe:	f000 f821 	bl	8001544 <HAL_RCC_GetSysClockFreq>
 8001502:	4602      	mov	r2, r0
 8001504:	4b0b      	ldr	r3, [pc, #44]	@ (8001534 <HAL_RCC_ClockConfig+0x1bc>)
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	091b      	lsrs	r3, r3, #4
 800150a:	f003 030f 	and.w	r3, r3, #15
 800150e:	490a      	ldr	r1, [pc, #40]	@ (8001538 <HAL_RCC_ClockConfig+0x1c0>)
 8001510:	5ccb      	ldrb	r3, [r1, r3]
 8001512:	fa22 f303 	lsr.w	r3, r2, r3
 8001516:	4a09      	ldr	r2, [pc, #36]	@ (800153c <HAL_RCC_ClockConfig+0x1c4>)
 8001518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800151a:	4b09      	ldr	r3, [pc, #36]	@ (8001540 <HAL_RCC_ClockConfig+0x1c8>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	4618      	mov	r0, r3
 8001520:	f7ff fb48 	bl	8000bb4 <HAL_InitTick>

  return HAL_OK;
 8001524:	2300      	movs	r3, #0
}
 8001526:	4618      	mov	r0, r3
 8001528:	3710      	adds	r7, #16
 800152a:	46bd      	mov	sp, r7
 800152c:	bd80      	pop	{r7, pc}
 800152e:	bf00      	nop
 8001530:	40023c00 	.word	0x40023c00
 8001534:	40023800 	.word	0x40023800
 8001538:	08007224 	.word	0x08007224
 800153c:	20000000 	.word	0x20000000
 8001540:	20000004 	.word	0x20000004

08001544 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001544:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001548:	b094      	sub	sp, #80	@ 0x50
 800154a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800154c:	2300      	movs	r3, #0
 800154e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001558:	2300      	movs	r3, #0
 800155a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800155c:	4b79      	ldr	r3, [pc, #484]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	f003 030c 	and.w	r3, r3, #12
 8001564:	2b08      	cmp	r3, #8
 8001566:	d00d      	beq.n	8001584 <HAL_RCC_GetSysClockFreq+0x40>
 8001568:	2b08      	cmp	r3, #8
 800156a:	f200 80e1 	bhi.w	8001730 <HAL_RCC_GetSysClockFreq+0x1ec>
 800156e:	2b00      	cmp	r3, #0
 8001570:	d002      	beq.n	8001578 <HAL_RCC_GetSysClockFreq+0x34>
 8001572:	2b04      	cmp	r3, #4
 8001574:	d003      	beq.n	800157e <HAL_RCC_GetSysClockFreq+0x3a>
 8001576:	e0db      	b.n	8001730 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001578:	4b73      	ldr	r3, [pc, #460]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x204>)
 800157a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800157c:	e0db      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800157e:	4b73      	ldr	r3, [pc, #460]	@ (800174c <HAL_RCC_GetSysClockFreq+0x208>)
 8001580:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001582:	e0d8      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001584:	4b6f      	ldr	r3, [pc, #444]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800158c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800158e:	4b6d      	ldr	r3, [pc, #436]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d063      	beq.n	8001662 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800159a:	4b6a      	ldr	r3, [pc, #424]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	099b      	lsrs	r3, r3, #6
 80015a0:	2200      	movs	r2, #0
 80015a2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80015a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80015a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80015a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80015ae:	2300      	movs	r3, #0
 80015b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80015b2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80015b6:	4622      	mov	r2, r4
 80015b8:	462b      	mov	r3, r5
 80015ba:	f04f 0000 	mov.w	r0, #0
 80015be:	f04f 0100 	mov.w	r1, #0
 80015c2:	0159      	lsls	r1, r3, #5
 80015c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015c8:	0150      	lsls	r0, r2, #5
 80015ca:	4602      	mov	r2, r0
 80015cc:	460b      	mov	r3, r1
 80015ce:	4621      	mov	r1, r4
 80015d0:	1a51      	subs	r1, r2, r1
 80015d2:	6139      	str	r1, [r7, #16]
 80015d4:	4629      	mov	r1, r5
 80015d6:	eb63 0301 	sbc.w	r3, r3, r1
 80015da:	617b      	str	r3, [r7, #20]
 80015dc:	f04f 0200 	mov.w	r2, #0
 80015e0:	f04f 0300 	mov.w	r3, #0
 80015e4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80015e8:	4659      	mov	r1, fp
 80015ea:	018b      	lsls	r3, r1, #6
 80015ec:	4651      	mov	r1, sl
 80015ee:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015f2:	4651      	mov	r1, sl
 80015f4:	018a      	lsls	r2, r1, #6
 80015f6:	4651      	mov	r1, sl
 80015f8:	ebb2 0801 	subs.w	r8, r2, r1
 80015fc:	4659      	mov	r1, fp
 80015fe:	eb63 0901 	sbc.w	r9, r3, r1
 8001602:	f04f 0200 	mov.w	r2, #0
 8001606:	f04f 0300 	mov.w	r3, #0
 800160a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800160e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001612:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001616:	4690      	mov	r8, r2
 8001618:	4699      	mov	r9, r3
 800161a:	4623      	mov	r3, r4
 800161c:	eb18 0303 	adds.w	r3, r8, r3
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	462b      	mov	r3, r5
 8001624:	eb49 0303 	adc.w	r3, r9, r3
 8001628:	60fb      	str	r3, [r7, #12]
 800162a:	f04f 0200 	mov.w	r2, #0
 800162e:	f04f 0300 	mov.w	r3, #0
 8001632:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001636:	4629      	mov	r1, r5
 8001638:	024b      	lsls	r3, r1, #9
 800163a:	4621      	mov	r1, r4
 800163c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001640:	4621      	mov	r1, r4
 8001642:	024a      	lsls	r2, r1, #9
 8001644:	4610      	mov	r0, r2
 8001646:	4619      	mov	r1, r3
 8001648:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800164a:	2200      	movs	r2, #0
 800164c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800164e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001650:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001654:	f7fe fe2e 	bl	80002b4 <__aeabi_uldivmod>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	4613      	mov	r3, r2
 800165e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001660:	e058      	b.n	8001714 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	099b      	lsrs	r3, r3, #6
 8001668:	2200      	movs	r2, #0
 800166a:	4618      	mov	r0, r3
 800166c:	4611      	mov	r1, r2
 800166e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001672:	623b      	str	r3, [r7, #32]
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
 8001678:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800167c:	4642      	mov	r2, r8
 800167e:	464b      	mov	r3, r9
 8001680:	f04f 0000 	mov.w	r0, #0
 8001684:	f04f 0100 	mov.w	r1, #0
 8001688:	0159      	lsls	r1, r3, #5
 800168a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800168e:	0150      	lsls	r0, r2, #5
 8001690:	4602      	mov	r2, r0
 8001692:	460b      	mov	r3, r1
 8001694:	4641      	mov	r1, r8
 8001696:	ebb2 0a01 	subs.w	sl, r2, r1
 800169a:	4649      	mov	r1, r9
 800169c:	eb63 0b01 	sbc.w	fp, r3, r1
 80016a0:	f04f 0200 	mov.w	r2, #0
 80016a4:	f04f 0300 	mov.w	r3, #0
 80016a8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80016ac:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80016b0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80016b4:	ebb2 040a 	subs.w	r4, r2, sl
 80016b8:	eb63 050b 	sbc.w	r5, r3, fp
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	f04f 0300 	mov.w	r3, #0
 80016c4:	00eb      	lsls	r3, r5, #3
 80016c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80016ca:	00e2      	lsls	r2, r4, #3
 80016cc:	4614      	mov	r4, r2
 80016ce:	461d      	mov	r5, r3
 80016d0:	4643      	mov	r3, r8
 80016d2:	18e3      	adds	r3, r4, r3
 80016d4:	603b      	str	r3, [r7, #0]
 80016d6:	464b      	mov	r3, r9
 80016d8:	eb45 0303 	adc.w	r3, r5, r3
 80016dc:	607b      	str	r3, [r7, #4]
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80016ea:	4629      	mov	r1, r5
 80016ec:	028b      	lsls	r3, r1, #10
 80016ee:	4621      	mov	r1, r4
 80016f0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80016f4:	4621      	mov	r1, r4
 80016f6:	028a      	lsls	r2, r1, #10
 80016f8:	4610      	mov	r0, r2
 80016fa:	4619      	mov	r1, r3
 80016fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016fe:	2200      	movs	r2, #0
 8001700:	61bb      	str	r3, [r7, #24]
 8001702:	61fa      	str	r2, [r7, #28]
 8001704:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001708:	f7fe fdd4 	bl	80002b4 <__aeabi_uldivmod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4613      	mov	r3, r2
 8001712:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001714:	4b0b      	ldr	r3, [pc, #44]	@ (8001744 <HAL_RCC_GetSysClockFreq+0x200>)
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	0c1b      	lsrs	r3, r3, #16
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	3301      	adds	r3, #1
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001724:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001726:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001728:	fbb2 f3f3 	udiv	r3, r2, r3
 800172c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800172e:	e002      	b.n	8001736 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001730:	4b05      	ldr	r3, [pc, #20]	@ (8001748 <HAL_RCC_GetSysClockFreq+0x204>)
 8001732:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001734:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001736:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001738:	4618      	mov	r0, r3
 800173a:	3750      	adds	r7, #80	@ 0x50
 800173c:	46bd      	mov	sp, r7
 800173e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001742:	bf00      	nop
 8001744:	40023800 	.word	0x40023800
 8001748:	00f42400 	.word	0x00f42400
 800174c:	007a1200 	.word	0x007a1200

08001750 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001754:	4b03      	ldr	r3, [pc, #12]	@ (8001764 <HAL_RCC_GetHCLKFreq+0x14>)
 8001756:	681b      	ldr	r3, [r3, #0]
}
 8001758:	4618      	mov	r0, r3
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	20000000 	.word	0x20000000

08001768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800176c:	f7ff fff0 	bl	8001750 <HAL_RCC_GetHCLKFreq>
 8001770:	4602      	mov	r2, r0
 8001772:	4b05      	ldr	r3, [pc, #20]	@ (8001788 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	0a9b      	lsrs	r3, r3, #10
 8001778:	f003 0307 	and.w	r3, r3, #7
 800177c:	4903      	ldr	r1, [pc, #12]	@ (800178c <HAL_RCC_GetPCLK1Freq+0x24>)
 800177e:	5ccb      	ldrb	r3, [r1, r3]
 8001780:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001784:	4618      	mov	r0, r3
 8001786:	bd80      	pop	{r7, pc}
 8001788:	40023800 	.word	0x40023800
 800178c:	08007234 	.word	0x08007234

08001790 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001790:	b480      	push	{r7}
 8001792:	b083      	sub	sp, #12
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	220f      	movs	r2, #15
 800179e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80017a0:	4b12      	ldr	r3, [pc, #72]	@ (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	f003 0203 	and.w	r2, r3, #3
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80017b8:	4b0c      	ldr	r3, [pc, #48]	@ (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017ba:	689b      	ldr	r3, [r3, #8]
 80017bc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80017c4:	4b09      	ldr	r3, [pc, #36]	@ (80017ec <HAL_RCC_GetClockConfig+0x5c>)
 80017c6:	689b      	ldr	r3, [r3, #8]
 80017c8:	08db      	lsrs	r3, r3, #3
 80017ca:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80017d2:	4b07      	ldr	r3, [pc, #28]	@ (80017f0 <HAL_RCC_GetClockConfig+0x60>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f003 0207 	and.w	r2, r3, #7
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	601a      	str	r2, [r3, #0]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr
 80017ea:	bf00      	nop
 80017ec:	40023800 	.word	0x40023800
 80017f0:	40023c00 	.word	0x40023c00

080017f4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d101      	bne.n	8001806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001802:	2301      	movs	r3, #1
 8001804:	e273      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b00      	cmp	r3, #0
 8001810:	d075      	beq.n	80018fe <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001812:	4b88      	ldr	r3, [pc, #544]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b04      	cmp	r3, #4
 800181c:	d00c      	beq.n	8001838 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800181e:	4b85      	ldr	r3, [pc, #532]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	f003 030c 	and.w	r3, r3, #12
        || \
 8001826:	2b08      	cmp	r3, #8
 8001828:	d112      	bne.n	8001850 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800182a:	4b82      	ldr	r3, [pc, #520]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001832:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001836:	d10b      	bne.n	8001850 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001838:	4b7e      	ldr	r3, [pc, #504]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d05b      	beq.n	80018fc <HAL_RCC_OscConfig+0x108>
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d157      	bne.n	80018fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800184c:	2301      	movs	r3, #1
 800184e:	e24e      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	685b      	ldr	r3, [r3, #4]
 8001854:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001858:	d106      	bne.n	8001868 <HAL_RCC_OscConfig+0x74>
 800185a:	4b76      	ldr	r3, [pc, #472]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	4a75      	ldr	r2, [pc, #468]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001860:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001864:	6013      	str	r3, [r2, #0]
 8001866:	e01d      	b.n	80018a4 <HAL_RCC_OscConfig+0xb0>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001870:	d10c      	bne.n	800188c <HAL_RCC_OscConfig+0x98>
 8001872:	4b70      	ldr	r3, [pc, #448]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a6f      	ldr	r2, [pc, #444]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001878:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800187c:	6013      	str	r3, [r2, #0]
 800187e:	4b6d      	ldr	r3, [pc, #436]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a6c      	ldr	r2, [pc, #432]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001884:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001888:	6013      	str	r3, [r2, #0]
 800188a:	e00b      	b.n	80018a4 <HAL_RCC_OscConfig+0xb0>
 800188c:	4b69      	ldr	r3, [pc, #420]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a68      	ldr	r2, [pc, #416]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001892:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001896:	6013      	str	r3, [r2, #0]
 8001898:	4b66      	ldr	r3, [pc, #408]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4a65      	ldr	r2, [pc, #404]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800189e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d013      	beq.n	80018d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ac:	f7ff fa96 	bl	8000ddc <HAL_GetTick>
 80018b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018b4:	f7ff fa92 	bl	8000ddc <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	693b      	ldr	r3, [r7, #16]
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b64      	cmp	r3, #100	@ 0x64
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e213      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018c6:	4b5b      	ldr	r3, [pc, #364]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f0      	beq.n	80018b4 <HAL_RCC_OscConfig+0xc0>
 80018d2:	e014      	b.n	80018fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d4:	f7ff fa82 	bl	8000ddc <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018dc:	f7ff fa7e 	bl	8000ddc <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b64      	cmp	r3, #100	@ 0x64
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e1ff      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018ee:	4b51      	ldr	r3, [pc, #324]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d1f0      	bne.n	80018dc <HAL_RCC_OscConfig+0xe8>
 80018fa:	e000      	b.n	80018fe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	2b00      	cmp	r3, #0
 8001908:	d063      	beq.n	80019d2 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800190a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f003 030c 	and.w	r3, r3, #12
 8001912:	2b00      	cmp	r3, #0
 8001914:	d00b      	beq.n	800192e <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001916:	4b47      	ldr	r3, [pc, #284]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	f003 030c 	and.w	r3, r3, #12
        || \
 800191e:	2b08      	cmp	r3, #8
 8001920:	d11c      	bne.n	800195c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001922:	4b44      	ldr	r3, [pc, #272]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001924:	685b      	ldr	r3, [r3, #4]
 8001926:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800192a:	2b00      	cmp	r3, #0
 800192c:	d116      	bne.n	800195c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800192e:	4b41      	ldr	r3, [pc, #260]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 0302 	and.w	r3, r3, #2
 8001936:	2b00      	cmp	r3, #0
 8001938:	d005      	beq.n	8001946 <HAL_RCC_OscConfig+0x152>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	68db      	ldr	r3, [r3, #12]
 800193e:	2b01      	cmp	r3, #1
 8001940:	d001      	beq.n	8001946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e1d3      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001946:	4b3b      	ldr	r3, [pc, #236]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	00db      	lsls	r3, r3, #3
 8001954:	4937      	ldr	r1, [pc, #220]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001956:	4313      	orrs	r3, r2
 8001958:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800195a:	e03a      	b.n	80019d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001964:	4b34      	ldr	r3, [pc, #208]	@ (8001a38 <HAL_RCC_OscConfig+0x244>)
 8001966:	2201      	movs	r2, #1
 8001968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196a:	f7ff fa37 	bl	8000ddc <HAL_GetTick>
 800196e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001972:	f7ff fa33 	bl	8000ddc <HAL_GetTick>
 8001976:	4602      	mov	r2, r0
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1b4      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001984:	4b2b      	ldr	r3, [pc, #172]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d0f0      	beq.n	8001972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001990:	4b28      	ldr	r3, [pc, #160]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	691b      	ldr	r3, [r3, #16]
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4925      	ldr	r1, [pc, #148]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 80019a0:	4313      	orrs	r3, r2
 80019a2:	600b      	str	r3, [r1, #0]
 80019a4:	e015      	b.n	80019d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a6:	4b24      	ldr	r3, [pc, #144]	@ (8001a38 <HAL_RCC_OscConfig+0x244>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fa16 	bl	8000ddc <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b4:	f7ff fa12 	bl	8000ddc <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e193      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019c6:	4b1b      	ldr	r3, [pc, #108]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 0308 	and.w	r3, r3, #8
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d036      	beq.n	8001a4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	695b      	ldr	r3, [r3, #20]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d016      	beq.n	8001a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e6:	4b15      	ldr	r3, [pc, #84]	@ (8001a3c <HAL_RCC_OscConfig+0x248>)
 80019e8:	2201      	movs	r2, #1
 80019ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ec:	f7ff f9f6 	bl	8000ddc <HAL_GetTick>
 80019f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019f2:	e008      	b.n	8001a06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019f4:	f7ff f9f2 	bl	8000ddc <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d901      	bls.n	8001a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e173      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a06:	4b0b      	ldr	r3, [pc, #44]	@ (8001a34 <HAL_RCC_OscConfig+0x240>)
 8001a08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d0f0      	beq.n	80019f4 <HAL_RCC_OscConfig+0x200>
 8001a12:	e01b      	b.n	8001a4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a14:	4b09      	ldr	r3, [pc, #36]	@ (8001a3c <HAL_RCC_OscConfig+0x248>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1a:	f7ff f9df 	bl	8000ddc <HAL_GetTick>
 8001a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a20:	e00e      	b.n	8001a40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a22:	f7ff f9db 	bl	8000ddc <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d907      	bls.n	8001a40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e15c      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
 8001a34:	40023800 	.word	0x40023800
 8001a38:	42470000 	.word	0x42470000
 8001a3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a40:	4b8a      	ldr	r3, [pc, #552]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001a42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a44:	f003 0302 	and.w	r3, r3, #2
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1ea      	bne.n	8001a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0304 	and.w	r3, r3, #4
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	f000 8097 	beq.w	8001b88 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a5e:	4b83      	ldr	r3, [pc, #524]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d10f      	bne.n	8001a8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	60bb      	str	r3, [r7, #8]
 8001a6e:	4b7f      	ldr	r3, [pc, #508]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a72:	4a7e      	ldr	r2, [pc, #504]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001a74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a78:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a7a:	4b7c      	ldr	r3, [pc, #496]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a86:	2301      	movs	r3, #1
 8001a88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8a:	4b79      	ldr	r3, [pc, #484]	@ (8001c70 <HAL_RCC_OscConfig+0x47c>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d118      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a96:	4b76      	ldr	r3, [pc, #472]	@ (8001c70 <HAL_RCC_OscConfig+0x47c>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a75      	ldr	r2, [pc, #468]	@ (8001c70 <HAL_RCC_OscConfig+0x47c>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aa2:	f7ff f99b 	bl	8000ddc <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aaa:	f7ff f997 	bl	8000ddc <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e118      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001abc:	4b6c      	ldr	r3, [pc, #432]	@ (8001c70 <HAL_RCC_OscConfig+0x47c>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b01      	cmp	r3, #1
 8001ace:	d106      	bne.n	8001ade <HAL_RCC_OscConfig+0x2ea>
 8001ad0:	4b66      	ldr	r3, [pc, #408]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ad4:	4a65      	ldr	r2, [pc, #404]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001ad6:	f043 0301 	orr.w	r3, r3, #1
 8001ada:	6713      	str	r3, [r2, #112]	@ 0x70
 8001adc:	e01c      	b.n	8001b18 <HAL_RCC_OscConfig+0x324>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	689b      	ldr	r3, [r3, #8]
 8001ae2:	2b05      	cmp	r3, #5
 8001ae4:	d10c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x30c>
 8001ae6:	4b61      	ldr	r3, [pc, #388]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aea:	4a60      	ldr	r2, [pc, #384]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001aec:	f043 0304 	orr.w	r3, r3, #4
 8001af0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af2:	4b5e      	ldr	r3, [pc, #376]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001af4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af6:	4a5d      	ldr	r2, [pc, #372]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001afe:	e00b      	b.n	8001b18 <HAL_RCC_OscConfig+0x324>
 8001b00:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b04:	4a59      	ldr	r2, [pc, #356]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b0c:	4b57      	ldr	r3, [pc, #348]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b0e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b10:	4a56      	ldr	r2, [pc, #344]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b12:	f023 0304 	bic.w	r3, r3, #4
 8001b16:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d015      	beq.n	8001b4c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b20:	f7ff f95c 	bl	8000ddc <HAL_GetTick>
 8001b24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b26:	e00a      	b.n	8001b3e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b28:	f7ff f958 	bl	8000ddc <HAL_GetTick>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	693b      	ldr	r3, [r7, #16]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d901      	bls.n	8001b3e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b3a:	2303      	movs	r3, #3
 8001b3c:	e0d7      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b3e:	4b4b      	ldr	r3, [pc, #300]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b42:	f003 0302 	and.w	r3, r3, #2
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d0ee      	beq.n	8001b28 <HAL_RCC_OscConfig+0x334>
 8001b4a:	e014      	b.n	8001b76 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b4c:	f7ff f946 	bl	8000ddc <HAL_GetTick>
 8001b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b52:	e00a      	b.n	8001b6a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b54:	f7ff f942 	bl	8000ddc <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b62:	4293      	cmp	r3, r2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e0c1      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b6a:	4b40      	ldr	r3, [pc, #256]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b6e:	f003 0302 	and.w	r3, r3, #2
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1ee      	bne.n	8001b54 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b76:	7dfb      	ldrb	r3, [r7, #23]
 8001b78:	2b01      	cmp	r3, #1
 8001b7a:	d105      	bne.n	8001b88 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b7c:	4b3b      	ldr	r3, [pc, #236]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b80:	4a3a      	ldr	r2, [pc, #232]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b82:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b86:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80ad 	beq.w	8001cec <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b92:	4b36      	ldr	r3, [pc, #216]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f003 030c 	and.w	r3, r3, #12
 8001b9a:	2b08      	cmp	r3, #8
 8001b9c:	d060      	beq.n	8001c60 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	699b      	ldr	r3, [r3, #24]
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d145      	bne.n	8001c32 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ba6:	4b33      	ldr	r3, [pc, #204]	@ (8001c74 <HAL_RCC_OscConfig+0x480>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bac:	f7ff f916 	bl	8000ddc <HAL_GetTick>
 8001bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb4:	f7ff f912 	bl	8000ddc <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e093      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bc6:	4b29      	ldr	r3, [pc, #164]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d1f0      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69da      	ldr	r2, [r3, #28]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	6a1b      	ldr	r3, [r3, #32]
 8001bda:	431a      	orrs	r2, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be0:	019b      	lsls	r3, r3, #6
 8001be2:	431a      	orrs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	3b01      	subs	r3, #1
 8001bec:	041b      	lsls	r3, r3, #16
 8001bee:	431a      	orrs	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bf4:	061b      	lsls	r3, r3, #24
 8001bf6:	431a      	orrs	r2, r3
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bfc:	071b      	lsls	r3, r3, #28
 8001bfe:	491b      	ldr	r1, [pc, #108]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001c00:	4313      	orrs	r3, r2
 8001c02:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c04:	4b1b      	ldr	r3, [pc, #108]	@ (8001c74 <HAL_RCC_OscConfig+0x480>)
 8001c06:	2201      	movs	r2, #1
 8001c08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c0a:	f7ff f8e7 	bl	8000ddc <HAL_GetTick>
 8001c0e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c10:	e008      	b.n	8001c24 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c12:	f7ff f8e3 	bl	8000ddc <HAL_GetTick>
 8001c16:	4602      	mov	r2, r0
 8001c18:	693b      	ldr	r3, [r7, #16]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	2b02      	cmp	r3, #2
 8001c1e:	d901      	bls.n	8001c24 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001c20:	2303      	movs	r3, #3
 8001c22:	e064      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c24:	4b11      	ldr	r3, [pc, #68]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d0f0      	beq.n	8001c12 <HAL_RCC_OscConfig+0x41e>
 8001c30:	e05c      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c32:	4b10      	ldr	r3, [pc, #64]	@ (8001c74 <HAL_RCC_OscConfig+0x480>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c38:	f7ff f8d0 	bl	8000ddc <HAL_GetTick>
 8001c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c40:	f7ff f8cc 	bl	8000ddc <HAL_GetTick>
 8001c44:	4602      	mov	r2, r0
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e04d      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c52:	4b06      	ldr	r3, [pc, #24]	@ (8001c6c <HAL_RCC_OscConfig+0x478>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x44c>
 8001c5e:	e045      	b.n	8001cec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	699b      	ldr	r3, [r3, #24]
 8001c64:	2b01      	cmp	r3, #1
 8001c66:	d107      	bne.n	8001c78 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e040      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40007000 	.word	0x40007000
 8001c74:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c78:	4b1f      	ldr	r3, [pc, #124]	@ (8001cf8 <HAL_RCC_OscConfig+0x504>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	699b      	ldr	r3, [r3, #24]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d030      	beq.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d129      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c9e:	429a      	cmp	r2, r3
 8001ca0:	d122      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca2:	68fa      	ldr	r2, [r7, #12]
 8001ca4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ca8:	4013      	ands	r3, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001cae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d119      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cbe:	085b      	lsrs	r3, r3, #1
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001cc4:	429a      	cmp	r2, r3
 8001cc6:	d10f      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cd2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d107      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ce2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ce4:	429a      	cmp	r2, r3
 8001ce6:	d001      	beq.n	8001cec <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	40023800 	.word	0x40023800

08001cfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e041      	b.n	8001d92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d22:	6878      	ldr	r0, [r7, #4]
 8001d24:	f000 f839 	bl	8001d9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	3304      	adds	r3, #4
 8001d38:	4619      	mov	r1, r3
 8001d3a:	4610      	mov	r0, r2
 8001d3c:	f000 f9c0 	bl	80020c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2201      	movs	r2, #1
 8001d7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2201      	movs	r2, #1
 8001d84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	3708      	adds	r7, #8
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}

08001d9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001da2:	bf00      	nop
 8001da4:	370c      	adds	r7, #12
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
	...

08001db0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001db0:	b480      	push	{r7}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001dbe:	b2db      	uxtb	r3, r3
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d001      	beq.n	8001dc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e04e      	b.n	8001e66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2202      	movs	r2, #2
 8001dcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0201 	orr.w	r2, r2, #1
 8001dde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a23      	ldr	r2, [pc, #140]	@ (8001e74 <HAL_TIM_Base_Start_IT+0xc4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d022      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001df2:	d01d      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	4a1f      	ldr	r2, [pc, #124]	@ (8001e78 <HAL_TIM_Base_Start_IT+0xc8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d018      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <HAL_TIM_Base_Start_IT+0xcc>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d013      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a1c      	ldr	r2, [pc, #112]	@ (8001e80 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d00e      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4a1b      	ldr	r2, [pc, #108]	@ (8001e84 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e18:	4293      	cmp	r3, r2
 8001e1a:	d009      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	4a19      	ldr	r2, [pc, #100]	@ (8001e88 <HAL_TIM_Base_Start_IT+0xd8>)
 8001e22:	4293      	cmp	r3, r2
 8001e24:	d004      	beq.n	8001e30 <HAL_TIM_Base_Start_IT+0x80>
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4a18      	ldr	r2, [pc, #96]	@ (8001e8c <HAL_TIM_Base_Start_IT+0xdc>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d111      	bne.n	8001e54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 0307 	and.w	r3, r3, #7
 8001e3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b06      	cmp	r3, #6
 8001e40:	d010      	beq.n	8001e64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f042 0201 	orr.w	r2, r2, #1
 8001e50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001e52:	e007      	b.n	8001e64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	681a      	ldr	r2, [r3, #0]
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f042 0201 	orr.w	r2, r2, #1
 8001e62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e64:	2300      	movs	r3, #0
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3714      	adds	r7, #20
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	40010000 	.word	0x40010000
 8001e78:	40000400 	.word	0x40000400
 8001e7c:	40000800 	.word	0x40000800
 8001e80:	40000c00 	.word	0x40000c00
 8001e84:	40010400 	.word	0x40010400
 8001e88:	40014000 	.word	0x40014000
 8001e8c:	40001800 	.word	0x40001800

08001e90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	68db      	ldr	r3, [r3, #12]
 8001e9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	d020      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f003 0302 	and.w	r3, r3, #2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d01b      	beq.n	8001ef4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0202 	mvn.w	r2, #2
 8001ec4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2201      	movs	r2, #1
 8001eca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	699b      	ldr	r3, [r3, #24]
 8001ed2:	f003 0303 	and.w	r3, r3, #3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d003      	beq.n	8001ee2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f8d2 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001ee0:	e005      	b.n	8001eee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f8c4 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	f000 f8d5 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001ef4:	68bb      	ldr	r3, [r7, #8]
 8001ef6:	f003 0304 	and.w	r3, r3, #4
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d020      	beq.n	8001f40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d01b      	beq.n	8001f40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f06f 0204 	mvn.w	r2, #4
 8001f10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2202      	movs	r2, #2
 8001f16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	699b      	ldr	r3, [r3, #24]
 8001f1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	f000 f8ac 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001f2c:	e005      	b.n	8001f3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f2e:	6878      	ldr	r0, [r7, #4]
 8001f30:	f000 f89e 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f34:	6878      	ldr	r0, [r7, #4]
 8001f36:	f000 f8af 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	f003 0308 	and.w	r3, r3, #8
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d020      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01b      	beq.n	8001f8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f06f 0208 	mvn.w	r2, #8
 8001f5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2204      	movs	r2, #4
 8001f62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	69db      	ldr	r3, [r3, #28]
 8001f6a:	f003 0303 	and.w	r3, r3, #3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d003      	beq.n	8001f7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 f886 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001f78:	e005      	b.n	8001f86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f7a:	6878      	ldr	r0, [r7, #4]
 8001f7c:	f000 f878 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f80:	6878      	ldr	r0, [r7, #4]
 8001f82:	f000 f889 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0310 	and.w	r3, r3, #16
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d020      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0310 	and.w	r3, r3, #16
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d01b      	beq.n	8001fd8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0210 	mvn.w	r2, #16
 8001fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2208      	movs	r2, #8
 8001fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d003      	beq.n	8001fc6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f860 	bl	8002084 <HAL_TIM_IC_CaptureCallback>
 8001fc4:	e005      	b.n	8001fd2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f852 	bl	8002070 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 f863 	bl	8002098 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001fd8:	68bb      	ldr	r3, [r7, #8]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d00c      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f003 0301 	and.w	r3, r3, #1
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d007      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f06f 0201 	mvn.w	r2, #1
 8001ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ff6:	6878      	ldr	r0, [r7, #4]
 8001ff8:	f7fe fd9c 	bl	8000b34 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002002:	2b00      	cmp	r3, #0
 8002004:	d00c      	beq.n	8002020 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800200c:	2b00      	cmp	r3, #0
 800200e:	d007      	beq.n	8002020 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002018:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f906 	bl	800222c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002026:	2b00      	cmp	r3, #0
 8002028:	d00c      	beq.n	8002044 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002030:	2b00      	cmp	r3, #0
 8002032:	d007      	beq.n	8002044 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800203c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	f000 f834 	bl	80020ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	f003 0320 	and.w	r3, r3, #32
 800204a:	2b00      	cmp	r3, #0
 800204c:	d00c      	beq.n	8002068 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	f003 0320 	and.w	r3, r3, #32
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f06f 0220 	mvn.w	r2, #32
 8002060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f000 f8d8 	bl	8002218 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002068:	bf00      	nop
 800206a:	3710      	adds	r7, #16
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}

08002070 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002070:	b480      	push	{r7}
 8002072:	b083      	sub	sp, #12
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002078:	bf00      	nop
 800207a:	370c      	adds	r7, #12
 800207c:	46bd      	mov	sp, r7
 800207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002082:	4770      	bx	lr

08002084 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr

08002098 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80020a0:	bf00      	nop
 80020a2:	370c      	adds	r7, #12
 80020a4:	46bd      	mov	sp, r7
 80020a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020aa:	4770      	bx	lr

080020ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80020b4:	bf00      	nop
 80020b6:	370c      	adds	r7, #12
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr

080020c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
 80020c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	4a46      	ldr	r2, [pc, #280]	@ (80021ec <TIM_Base_SetConfig+0x12c>)
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d013      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020de:	d00f      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	4a43      	ldr	r2, [pc, #268]	@ (80021f0 <TIM_Base_SetConfig+0x130>)
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d00b      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a42      	ldr	r2, [pc, #264]	@ (80021f4 <TIM_Base_SetConfig+0x134>)
 80020ec:	4293      	cmp	r3, r2
 80020ee:	d007      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	4a41      	ldr	r2, [pc, #260]	@ (80021f8 <TIM_Base_SetConfig+0x138>)
 80020f4:	4293      	cmp	r3, r2
 80020f6:	d003      	beq.n	8002100 <TIM_Base_SetConfig+0x40>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	4a40      	ldr	r2, [pc, #256]	@ (80021fc <TIM_Base_SetConfig+0x13c>)
 80020fc:	4293      	cmp	r3, r2
 80020fe:	d108      	bne.n	8002112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	68fa      	ldr	r2, [r7, #12]
 800210e:	4313      	orrs	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a35      	ldr	r2, [pc, #212]	@ (80021ec <TIM_Base_SetConfig+0x12c>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002120:	d027      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a32      	ldr	r2, [pc, #200]	@ (80021f0 <TIM_Base_SetConfig+0x130>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d023      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a31      	ldr	r2, [pc, #196]	@ (80021f4 <TIM_Base_SetConfig+0x134>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d01f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a30      	ldr	r2, [pc, #192]	@ (80021f8 <TIM_Base_SetConfig+0x138>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d01b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a2f      	ldr	r2, [pc, #188]	@ (80021fc <TIM_Base_SetConfig+0x13c>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d017      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a2e      	ldr	r2, [pc, #184]	@ (8002200 <TIM_Base_SetConfig+0x140>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d013      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a2d      	ldr	r2, [pc, #180]	@ (8002204 <TIM_Base_SetConfig+0x144>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d00f      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a2c      	ldr	r2, [pc, #176]	@ (8002208 <TIM_Base_SetConfig+0x148>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d00b      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a2b      	ldr	r2, [pc, #172]	@ (800220c <TIM_Base_SetConfig+0x14c>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d007      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	4a2a      	ldr	r2, [pc, #168]	@ (8002210 <TIM_Base_SetConfig+0x150>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d003      	beq.n	8002172 <TIM_Base_SetConfig+0xb2>
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a29      	ldr	r2, [pc, #164]	@ (8002214 <TIM_Base_SetConfig+0x154>)
 800216e:	4293      	cmp	r3, r2
 8002170:	d108      	bne.n	8002184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	68fa      	ldr	r2, [r7, #12]
 8002180:	4313      	orrs	r3, r2
 8002182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	695b      	ldr	r3, [r3, #20]
 800218e:	4313      	orrs	r3, r2
 8002190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	68fa      	ldr	r2, [r7, #12]
 8002196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a10      	ldr	r2, [pc, #64]	@ (80021ec <TIM_Base_SetConfig+0x12c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d003      	beq.n	80021b8 <TIM_Base_SetConfig+0xf8>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	4a12      	ldr	r2, [pc, #72]	@ (80021fc <TIM_Base_SetConfig+0x13c>)
 80021b4:	4293      	cmp	r3, r2
 80021b6:	d103      	bne.n	80021c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	691a      	ldr	r2, [r3, #16]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	691b      	ldr	r3, [r3, #16]
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d105      	bne.n	80021de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	691b      	ldr	r3, [r3, #16]
 80021d6:	f023 0201 	bic.w	r2, r3, #1
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	611a      	str	r2, [r3, #16]
  }
}
 80021de:	bf00      	nop
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	40010000 	.word	0x40010000
 80021f0:	40000400 	.word	0x40000400
 80021f4:	40000800 	.word	0x40000800
 80021f8:	40000c00 	.word	0x40000c00
 80021fc:	40010400 	.word	0x40010400
 8002200:	40014000 	.word	0x40014000
 8002204:	40014400 	.word	0x40014400
 8002208:	40014800 	.word	0x40014800
 800220c:	40001800 	.word	0x40001800
 8002210:	40001c00 	.word	0x40001c00
 8002214:	40002000 	.word	0x40002000

08002218 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002220:	bf00      	nop
 8002222:	370c      	adds	r7, #12
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800222c:	b480      	push	{r7}
 800222e:	b083      	sub	sp, #12
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002234:	bf00      	nop
 8002236:	370c      	adds	r7, #12
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f103 0208 	add.w	r2, r3, #8
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f04f 32ff 	mov.w	r2, #4294967295
 8002258:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f103 0208 	add.w	r2, r3, #8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f103 0208 	add.w	r2, r3, #8
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002280:	b480      	push	{r7}
 8002282:	b083      	sub	sp, #12
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2200      	movs	r2, #0
 800228c:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800228e:	bf00      	nop
 8002290:	370c      	adds	r7, #12
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr

0800229a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800229a:	b480      	push	{r7}
 800229c:	b085      	sub	sp, #20
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
 80022a2:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	689a      	ldr	r2, [r3, #8]
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	683a      	ldr	r2, [r7, #0]
 80022be:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	1c5a      	adds	r2, r3, #1
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	601a      	str	r2, [r3, #0]
}
 80022d6:	bf00      	nop
 80022d8:	3714      	adds	r7, #20
 80022da:	46bd      	mov	sp, r7
 80022dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e0:	4770      	bx	lr

080022e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80022e2:	b480      	push	{r7}
 80022e4:	b085      	sub	sp, #20
 80022e6:	af00      	add	r7, sp, #0
 80022e8:	6078      	str	r0, [r7, #4]
 80022ea:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022f8:	d103      	bne.n	8002302 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	691b      	ldr	r3, [r3, #16]
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	e00c      	b.n	800231c <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	3308      	adds	r3, #8
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	e002      	b.n	8002310 <vListInsert+0x2e>
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	60fb      	str	r3, [r7, #12]
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	68ba      	ldr	r2, [r7, #8]
 8002318:	429a      	cmp	r2, r3
 800231a:	d2f6      	bcs.n	800230a <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	68fa      	ldr	r2, [r7, #12]
 8002330:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	683a      	ldr	r2, [r7, #0]
 8002336:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	601a      	str	r2, [r3, #0]
}
 8002348:	bf00      	nop
 800234a:	3714      	adds	r7, #20
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	687a      	ldr	r2, [r7, #4]
 8002368:	6892      	ldr	r2, [r2, #8]
 800236a:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	687a      	ldr	r2, [r7, #4]
 8002372:	6852      	ldr	r2, [r2, #4]
 8002374:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	d103      	bne.n	8002388 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2200      	movs	r2, #0
 800238c:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	1e5a      	subs	r2, r3, #1
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3714      	adds	r7, #20
 80023a0:	46bd      	mov	sp, r7
 80023a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a6:	4770      	bx	lr

080023a8 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
 80023b0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80023b2:	2301      	movs	r3, #1
 80023b4:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10b      	bne.n	80023d8 <xQueueGenericReset+0x30>
        __asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	60fb      	str	r3, [r7, #12]
    }
 80023d2:	bf00      	nop
 80023d4:	bf00      	nop
 80023d6:	e7fd      	b.n	80023d4 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80023d8:	693b      	ldr	r3, [r7, #16]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d05d      	beq.n	800249a <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d059      	beq.n	800249a <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023ee:	2100      	movs	r1, #0
 80023f0:	fba3 2302 	umull	r2, r3, r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d000      	beq.n	80023fa <xQueueGenericReset+0x52>
 80023f8:	2101      	movs	r1, #1
 80023fa:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d14c      	bne.n	800249a <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002400:	f002 f9bc 	bl	800477c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	693b      	ldr	r3, [r7, #16]
 800240a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800240c:	6939      	ldr	r1, [r7, #16]
 800240e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	441a      	add	r2, r3
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800241a:	693b      	ldr	r3, [r7, #16]
 800241c:	2200      	movs	r2, #0
 800241e:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	693b      	ldr	r3, [r7, #16]
 8002426:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002430:	3b01      	subs	r3, #1
 8002432:	6939      	ldr	r1, [r7, #16]
 8002434:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002436:	fb01 f303 	mul.w	r3, r1, r3
 800243a:	441a      	add	r2, r3
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	22ff      	movs	r2, #255	@ 0xff
 8002444:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	22ff      	movs	r2, #255	@ 0xff
 800244c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d114      	bne.n	8002480 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d01a      	beq.n	8002494 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800245e:	693b      	ldr	r3, [r7, #16]
 8002460:	3310      	adds	r3, #16
 8002462:	4618      	mov	r0, r3
 8002464:	f001 f8d4 	bl	8003610 <xTaskRemoveFromEventList>
 8002468:	4603      	mov	r3, r0
 800246a:	2b00      	cmp	r3, #0
 800246c:	d012      	beq.n	8002494 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800246e:	4b16      	ldr	r3, [pc, #88]	@ (80024c8 <xQueueGenericReset+0x120>)
 8002470:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	f3bf 8f4f 	dsb	sy
 800247a:	f3bf 8f6f 	isb	sy
 800247e:	e009      	b.n	8002494 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	3310      	adds	r3, #16
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fedb 	bl	8002240 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	3324      	adds	r3, #36	@ 0x24
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fed6 	bl	8002240 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002494:	f002 f9a4 	bl	80047e0 <vPortExitCritical>
 8002498:	e001      	b.n	800249e <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800249a:	2300      	movs	r3, #0
 800249c:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10b      	bne.n	80024bc <xQueueGenericReset+0x114>
        __asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	60bb      	str	r3, [r7, #8]
    }
 80024b6:	bf00      	nop
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80024bc:	697b      	ldr	r3, [r7, #20]
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3718      	adds	r7, #24
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000ed04 	.word	0xe000ed04

080024cc <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b08a      	sub	sp, #40	@ 0x28
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	4613      	mov	r3, r2
 80024d8:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80024da:	2300      	movs	r3, #0
 80024dc:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d02e      	beq.n	8002542 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80024e4:	2100      	movs	r1, #0
 80024e6:	68ba      	ldr	r2, [r7, #8]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	fba3 2302 	umull	r2, r3, r3, r2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d000      	beq.n	80024f4 <xQueueGenericCreate+0x28>
 80024f2:	2101      	movs	r1, #1
 80024f4:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d123      	bne.n	8002542 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	68ba      	ldr	r2, [r7, #8]
 80024fe:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002502:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002506:	d81c      	bhi.n	8002542 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	68ba      	ldr	r2, [r7, #8]
 800250c:	fb02 f303 	mul.w	r3, r2, r3
 8002510:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	3350      	adds	r3, #80	@ 0x50
 8002516:	4618      	mov	r0, r3
 8002518:	f002 fa62 	bl	80049e0 <pvPortMalloc>
 800251c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800251e:	69fb      	ldr	r3, [r7, #28]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d01d      	beq.n	8002560 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002528:	697b      	ldr	r3, [r7, #20]
 800252a:	3350      	adds	r3, #80	@ 0x50
 800252c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800252e:	79fa      	ldrb	r2, [r7, #7]
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	9300      	str	r3, [sp, #0]
 8002534:	4613      	mov	r3, r2
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	68b9      	ldr	r1, [r7, #8]
 800253a:	68f8      	ldr	r0, [r7, #12]
 800253c:	f000 f815 	bl	800256a <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002540:	e00e      	b.n	8002560 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d10b      	bne.n	8002560 <xQueueGenericCreate+0x94>
        __asm volatile
 8002548:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800254c:	f383 8811 	msr	BASEPRI, r3
 8002550:	f3bf 8f6f 	isb	sy
 8002554:	f3bf 8f4f 	dsb	sy
 8002558:	613b      	str	r3, [r7, #16]
    }
 800255a:	bf00      	nop
 800255c:	bf00      	nop
 800255e:	e7fd      	b.n	800255c <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002560:	69fb      	ldr	r3, [r7, #28]
    }
 8002562:	4618      	mov	r0, r3
 8002564:	3720      	adds	r7, #32
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b084      	sub	sp, #16
 800256e:	af00      	add	r7, sp, #0
 8002570:	60f8      	str	r0, [r7, #12]
 8002572:	60b9      	str	r1, [r7, #8]
 8002574:	607a      	str	r2, [r7, #4]
 8002576:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d103      	bne.n	8002586 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	e002      	b.n	800258c <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002586:	69bb      	ldr	r3, [r7, #24]
 8002588:	687a      	ldr	r2, [r7, #4]
 800258a:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 800258c:	69bb      	ldr	r3, [r7, #24]
 800258e:	68fa      	ldr	r2, [r7, #12]
 8002590:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	68ba      	ldr	r2, [r7, #8]
 8002596:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002598:	2101      	movs	r1, #1
 800259a:	69b8      	ldr	r0, [r7, #24]
 800259c:	f7ff ff04 	bl	80023a8 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80025a0:	69bb      	ldr	r3, [r7, #24]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80025a8:	78fb      	ldrb	r3, [r7, #3]
 80025aa:	68ba      	ldr	r2, [r7, #8]
 80025ac:	68f9      	ldr	r1, [r7, #12]
 80025ae:	2073      	movs	r0, #115	@ 0x73
 80025b0:	f003 fe72 	bl	8006298 <SEGGER_SYSVIEW_RecordU32x3>
}
 80025b4:	bf00      	nop
 80025b6:	3710      	adds	r7, #16
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bd80      	pop	{r7, pc}

080025bc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80025bc:	b590      	push	{r4, r7, lr}
 80025be:	b08f      	sub	sp, #60	@ 0x3c
 80025c0:	af02      	add	r7, sp, #8
 80025c2:	60f8      	str	r0, [r7, #12]
 80025c4:	60b9      	str	r1, [r7, #8]
 80025c6:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80025c8:	2300      	movs	r3, #0
 80025ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80025d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10b      	bne.n	80025ee <xQueueReceive+0x32>
        __asm volatile
 80025d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025da:	f383 8811 	msr	BASEPRI, r3
 80025de:	f3bf 8f6f 	isb	sy
 80025e2:	f3bf 8f4f 	dsb	sy
 80025e6:	623b      	str	r3, [r7, #32]
    }
 80025e8:	bf00      	nop
 80025ea:	bf00      	nop
 80025ec:	e7fd      	b.n	80025ea <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d103      	bne.n	80025fc <xQueueReceive+0x40>
 80025f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d101      	bne.n	8002600 <xQueueReceive+0x44>
 80025fc:	2301      	movs	r3, #1
 80025fe:	e000      	b.n	8002602 <xQueueReceive+0x46>
 8002600:	2300      	movs	r3, #0
 8002602:	2b00      	cmp	r3, #0
 8002604:	d10b      	bne.n	800261e <xQueueReceive+0x62>
        __asm volatile
 8002606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800260a:	f383 8811 	msr	BASEPRI, r3
 800260e:	f3bf 8f6f 	isb	sy
 8002612:	f3bf 8f4f 	dsb	sy
 8002616:	61fb      	str	r3, [r7, #28]
    }
 8002618:	bf00      	nop
 800261a:	bf00      	nop
 800261c:	e7fd      	b.n	800261a <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800261e:	f001 fa0d 	bl	8003a3c <xTaskGetSchedulerState>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d102      	bne.n	800262e <xQueueReceive+0x72>
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d101      	bne.n	8002632 <xQueueReceive+0x76>
 800262e:	2301      	movs	r3, #1
 8002630:	e000      	b.n	8002634 <xQueueReceive+0x78>
 8002632:	2300      	movs	r3, #0
 8002634:	2b00      	cmp	r3, #0
 8002636:	d10b      	bne.n	8002650 <xQueueReceive+0x94>
        __asm volatile
 8002638:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800263c:	f383 8811 	msr	BASEPRI, r3
 8002640:	f3bf 8f6f 	isb	sy
 8002644:	f3bf 8f4f 	dsb	sy
 8002648:	61bb      	str	r3, [r7, #24]
    }
 800264a:	bf00      	nop
 800264c:	bf00      	nop
 800264e:	e7fd      	b.n	800264c <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002650:	f002 f894 	bl	800477c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002654:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002656:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002658:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800265c:	2b00      	cmp	r3, #0
 800265e:	d02f      	beq.n	80026c0 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002660:	68b9      	ldr	r1, [r7, #8]
 8002662:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002664:	f000 f8be 	bl	80027e4 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800266a:	4618      	mov	r0, r3
 800266c:	f004 fb5c 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8002670:	4604      	mov	r4, r0
 8002672:	2000      	movs	r0, #0
 8002674:	f004 fb58 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8002678:	4602      	mov	r2, r0
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2101      	movs	r1, #1
 800267e:	9100      	str	r1, [sp, #0]
 8002680:	4621      	mov	r1, r4
 8002682:	205c      	movs	r0, #92	@ 0x5c
 8002684:	f003 fe7e 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	1e5a      	subs	r2, r3, #1
 800268c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800268e:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00f      	beq.n	80026b8 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800269a:	3310      	adds	r3, #16
 800269c:	4618      	mov	r0, r3
 800269e:	f000 ffb7 	bl	8003610 <xTaskRemoveFromEventList>
 80026a2:	4603      	mov	r3, r0
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d007      	beq.n	80026b8 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026a8:	4b4d      	ldr	r3, [pc, #308]	@ (80027e0 <xQueueReceive+0x224>)
 80026aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026ae:	601a      	str	r2, [r3, #0]
 80026b0:	f3bf 8f4f 	dsb	sy
 80026b4:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80026b8:	f002 f892 	bl	80047e0 <vPortExitCritical>
                return pdPASS;
 80026bc:	2301      	movs	r3, #1
 80026be:	e08a      	b.n	80027d6 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d113      	bne.n	80026ee <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80026c6:	f002 f88b 	bl	80047e0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80026ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026cc:	4618      	mov	r0, r3
 80026ce:	f004 fb2b 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 80026d2:	4604      	mov	r4, r0
 80026d4:	2000      	movs	r0, #0
 80026d6:	f004 fb27 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 80026da:	4602      	mov	r2, r0
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2101      	movs	r1, #1
 80026e0:	9100      	str	r1, [sp, #0]
 80026e2:	4621      	mov	r1, r4
 80026e4:	205c      	movs	r0, #92	@ 0x5c
 80026e6:	f003 fe4d 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80026ea:	2300      	movs	r3, #0
 80026ec:	e073      	b.n	80027d6 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80026ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d106      	bne.n	8002702 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80026f4:	f107 0310 	add.w	r3, r7, #16
 80026f8:	4618      	mov	r0, r3
 80026fa:	f001 f863 	bl	80037c4 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80026fe:	2301      	movs	r3, #1
 8002700:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002702:	f002 f86d 	bl	80047e0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002706:	f000 fc5d 	bl	8002fc4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800270a:	f002 f837 	bl	800477c <vPortEnterCritical>
 800270e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002710:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002714:	b25b      	sxtb	r3, r3
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295
 800271a:	d103      	bne.n	8002724 <xQueueReceive+0x168>
 800271c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800271e:	2200      	movs	r2, #0
 8002720:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002726:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800272a:	b25b      	sxtb	r3, r3
 800272c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002730:	d103      	bne.n	800273a <xQueueReceive+0x17e>
 8002732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002734:	2200      	movs	r2, #0
 8002736:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800273a:	f002 f851 	bl	80047e0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800273e:	1d3a      	adds	r2, r7, #4
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f001 f852 	bl	80037f0 <xTaskCheckForTimeOut>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d124      	bne.n	800279c <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002754:	f000 f8be 	bl	80028d4 <prvIsQueueEmpty>
 8002758:	4603      	mov	r3, r0
 800275a:	2b00      	cmp	r3, #0
 800275c:	d018      	beq.n	8002790 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800275e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002760:	3324      	adds	r3, #36	@ 0x24
 8002762:	687a      	ldr	r2, [r7, #4]
 8002764:	4611      	mov	r1, r2
 8002766:	4618      	mov	r0, r3
 8002768:	f000 fee2 	bl	8003530 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800276c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800276e:	f000 f85f 	bl	8002830 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002772:	f000 fc35 	bl	8002fe0 <xTaskResumeAll>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	f47f af69 	bne.w	8002650 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800277e:	4b18      	ldr	r3, [pc, #96]	@ (80027e0 <xQueueReceive+0x224>)
 8002780:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002784:	601a      	str	r2, [r3, #0]
 8002786:	f3bf 8f4f 	dsb	sy
 800278a:	f3bf 8f6f 	isb	sy
 800278e:	e75f      	b.n	8002650 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002790:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002792:	f000 f84d 	bl	8002830 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002796:	f000 fc23 	bl	8002fe0 <xTaskResumeAll>
 800279a:	e759      	b.n	8002650 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800279c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800279e:	f000 f847 	bl	8002830 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80027a2:	f000 fc1d 	bl	8002fe0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80027a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80027a8:	f000 f894 	bl	80028d4 <prvIsQueueEmpty>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f43f af4e 	beq.w	8002650 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80027b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b6:	4618      	mov	r0, r3
 80027b8:	f004 fab6 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 80027bc:	4604      	mov	r4, r0
 80027be:	2000      	movs	r0, #0
 80027c0:	f004 fab2 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 80027c4:	4602      	mov	r2, r0
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2101      	movs	r1, #1
 80027ca:	9100      	str	r1, [sp, #0]
 80027cc:	4621      	mov	r1, r4
 80027ce:	205c      	movs	r0, #92	@ 0x5c
 80027d0:	f003 fdd8 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80027d4:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	3734      	adds	r7, #52	@ 0x34
 80027da:	46bd      	mov	sp, r7
 80027dc:	bd90      	pop	{r4, r7, pc}
 80027de:	bf00      	nop
 80027e0:	e000ed04 	.word	0xe000ed04

080027e4 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
 80027ec:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d018      	beq.n	8002828 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	68da      	ldr	r2, [r3, #12]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	441a      	add	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	68da      	ldr	r2, [r3, #12]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	429a      	cmp	r2, r3
 800280e:	d303      	bcc.n	8002818 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681a      	ldr	r2, [r3, #0]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68d9      	ldr	r1, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002820:	461a      	mov	r2, r3
 8002822:	6838      	ldr	r0, [r7, #0]
 8002824:	f004 fc18 	bl	8007058 <memcpy>
    }
}
 8002828:	bf00      	nop
 800282a:	3708      	adds	r7, #8
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}

08002830 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b084      	sub	sp, #16
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002838:	f001 ffa0 	bl	800477c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002842:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002844:	e011      	b.n	800286a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800284a:	2b00      	cmp	r3, #0
 800284c:	d012      	beq.n	8002874 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	3324      	adds	r3, #36	@ 0x24
 8002852:	4618      	mov	r0, r3
 8002854:	f000 fedc 	bl	8003610 <xTaskRemoveFromEventList>
 8002858:	4603      	mov	r3, r0
 800285a:	2b00      	cmp	r3, #0
 800285c:	d001      	beq.n	8002862 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800285e:	f001 f82f 	bl	80038c0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002862:	7bfb      	ldrb	r3, [r7, #15]
 8002864:	3b01      	subs	r3, #1
 8002866:	b2db      	uxtb	r3, r3
 8002868:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800286a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800286e:	2b00      	cmp	r3, #0
 8002870:	dce9      	bgt.n	8002846 <prvUnlockQueue+0x16>
 8002872:	e000      	b.n	8002876 <prvUnlockQueue+0x46>
                    break;
 8002874:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	22ff      	movs	r2, #255	@ 0xff
 800287a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800287e:	f001 ffaf 	bl	80047e0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002882:	f001 ff7b 	bl	800477c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800288c:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800288e:	e011      	b.n	80028b4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	691b      	ldr	r3, [r3, #16]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d012      	beq.n	80028be <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	3310      	adds	r3, #16
 800289c:	4618      	mov	r0, r3
 800289e:	f000 feb7 	bl	8003610 <xTaskRemoveFromEventList>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d001      	beq.n	80028ac <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80028a8:	f001 f80a 	bl	80038c0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80028ac:	7bbb      	ldrb	r3, [r7, #14]
 80028ae:	3b01      	subs	r3, #1
 80028b0:	b2db      	uxtb	r3, r3
 80028b2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80028b4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	dce9      	bgt.n	8002890 <prvUnlockQueue+0x60>
 80028bc:	e000      	b.n	80028c0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80028be:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	22ff      	movs	r2, #255	@ 0xff
 80028c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80028c8:	f001 ff8a 	bl	80047e0 <vPortExitCritical>
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b084      	sub	sp, #16
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80028dc:	f001 ff4e 	bl	800477c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d102      	bne.n	80028ee <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80028e8:	2301      	movs	r3, #1
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	e001      	b.n	80028f2 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80028f2:	f001 ff75 	bl	80047e0 <vPortExitCritical>

    return xReturn;
 80028f6:	68fb      	ldr	r3, [r7, #12]
}
 80028f8:	4618      	mov	r0, r3
 80028fa:	3710      	adds	r7, #16
 80028fc:	46bd      	mov	sp, r7
 80028fe:	bd80      	pop	{r7, pc}

08002900 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002900:	b580      	push	{r7, lr}
 8002902:	b086      	sub	sp, #24
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
 8002908:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10b      	bne.n	800292c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002914:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002918:	f383 8811 	msr	BASEPRI, r3
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	f3bf 8f4f 	dsb	sy
 8002924:	60fb      	str	r3, [r7, #12]
    }
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	e7fd      	b.n	8002928 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d024      	beq.n	800297c <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002932:	2300      	movs	r3, #0
 8002934:	617b      	str	r3, [r7, #20]
 8002936:	e01e      	b.n	8002976 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002938:	4a1c      	ldr	r2, [pc, #112]	@ (80029ac <vQueueAddToRegistry+0xac>)
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	429a      	cmp	r2, r3
 8002946:	d105      	bne.n	8002954 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	00db      	lsls	r3, r3, #3
 800294c:	4a17      	ldr	r2, [pc, #92]	@ (80029ac <vQueueAddToRegistry+0xac>)
 800294e:	4413      	add	r3, r2
 8002950:	613b      	str	r3, [r7, #16]
                    break;
 8002952:	e013      	b.n	800297c <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	2b00      	cmp	r3, #0
 8002958:	d10a      	bne.n	8002970 <vQueueAddToRegistry+0x70>
 800295a:	4a14      	ldr	r2, [pc, #80]	@ (80029ac <vQueueAddToRegistry+0xac>)
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d104      	bne.n	8002970 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002966:	697b      	ldr	r3, [r7, #20]
 8002968:	00db      	lsls	r3, r3, #3
 800296a:	4a10      	ldr	r2, [pc, #64]	@ (80029ac <vQueueAddToRegistry+0xac>)
 800296c:	4413      	add	r3, r2
 800296e:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	3301      	adds	r3, #1
 8002974:	617b      	str	r3, [r7, #20]
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b07      	cmp	r3, #7
 800297a:	d9dd      	bls.n	8002938 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 800297c:	693b      	ldr	r3, [r7, #16]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00f      	beq.n	80029a2 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002982:	693b      	ldr	r3, [r7, #16]
 8002984:	683a      	ldr	r2, [r7, #0]
 8002986:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	687a      	ldr	r2, [r7, #4]
 800298c:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4618      	mov	r0, r3
 8002992:	f004 f9c9 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8002996:	4601      	mov	r1, r0
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	461a      	mov	r2, r3
 800299c:	2071      	movs	r0, #113	@ 0x71
 800299e:	f003 fc21 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80029a2:	bf00      	nop
 80029a4:	3718      	adds	r7, #24
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	20000094 	.word	0x20000094

080029b0 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80029c0:	f001 fedc 	bl	800477c <vPortEnterCritical>
 80029c4:	697b      	ldr	r3, [r7, #20]
 80029c6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029ca:	b25b      	sxtb	r3, r3
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d103      	bne.n	80029da <vQueueWaitForMessageRestricted+0x2a>
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e0:	b25b      	sxtb	r3, r3
 80029e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e6:	d103      	bne.n	80029f0 <vQueueWaitForMessageRestricted+0x40>
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	2200      	movs	r2, #0
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f0:	f001 fef6 	bl	80047e0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d106      	bne.n	8002a0a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	3324      	adds	r3, #36	@ 0x24
 8002a00:	687a      	ldr	r2, [r7, #4]
 8002a02:	68b9      	ldr	r1, [r7, #8]
 8002a04:	4618      	mov	r0, r3
 8002a06:	f000 fdb9 	bl	800357c <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002a0a:	6978      	ldr	r0, [r7, #20]
 8002a0c:	f7ff ff10 	bl	8002830 <prvUnlockQueue>
    }
 8002a10:	bf00      	nop
 8002a12:	3718      	adds	r7, #24
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08c      	sub	sp, #48	@ 0x30
 8002a1c:	af04      	add	r7, sp, #16
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	603b      	str	r3, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002a28:	88fb      	ldrh	r3, [r7, #6]
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f001 ffd7 	bl	80049e0 <pvPortMalloc>
 8002a32:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d013      	beq.n	8002a62 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002a3a:	2058      	movs	r0, #88	@ 0x58
 8002a3c:	f001 ffd0 	bl	80049e0 <pvPortMalloc>
 8002a40:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d008      	beq.n	8002a5a <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002a48:	2258      	movs	r2, #88	@ 0x58
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	69f8      	ldr	r0, [r7, #28]
 8002a4e:	f004 fad7 	bl	8007000 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002a52:	69fb      	ldr	r3, [r7, #28]
 8002a54:	697a      	ldr	r2, [r7, #20]
 8002a56:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a58:	e005      	b.n	8002a66 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002a5a:	6978      	ldr	r0, [r7, #20]
 8002a5c:	f002 f87c 	bl	8004b58 <vPortFree>
 8002a60:	e001      	b.n	8002a66 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002a62:	2300      	movs	r3, #0
 8002a64:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d013      	beq.n	8002a94 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	2300      	movs	r3, #0
 8002a70:	9303      	str	r3, [sp, #12]
 8002a72:	69fb      	ldr	r3, [r7, #28]
 8002a74:	9302      	str	r3, [sp, #8]
 8002a76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002a78:	9301      	str	r3, [sp, #4]
 8002a7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a7c:	9300      	str	r3, [sp, #0]
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f80e 	bl	8002aa4 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002a88:	69f8      	ldr	r0, [r7, #28]
 8002a8a:	f000 f89b 	bl	8002bc4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002a8e:	2301      	movs	r3, #1
 8002a90:	61bb      	str	r3, [r7, #24]
 8002a92:	e002      	b.n	8002a9a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a94:	f04f 33ff 	mov.w	r3, #4294967295
 8002a98:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3720      	adds	r7, #32
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b088      	sub	sp, #32
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	60f8      	str	r0, [r7, #12]
 8002aac:	60b9      	str	r1, [r7, #8]
 8002aae:	607a      	str	r2, [r7, #4]
 8002ab0:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ab4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	461a      	mov	r2, r3
 8002abc:	21a5      	movs	r1, #165	@ 0xa5
 8002abe:	f004 fa9f 	bl	8007000 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002acc:	3b01      	subs	r3, #1
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	4413      	add	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	f023 0307 	bic.w	r3, r3, #7
 8002ada:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002adc:	69bb      	ldr	r3, [r7, #24]
 8002ade:	f003 0307 	and.w	r3, r3, #7
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d00b      	beq.n	8002afe <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	617b      	str	r3, [r7, #20]
    }
 8002af8:	bf00      	nop
 8002afa:	bf00      	nop
 8002afc:	e7fd      	b.n	8002afa <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d01e      	beq.n	8002b42 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b04:	2300      	movs	r3, #0
 8002b06:	61fb      	str	r3, [r7, #28]
 8002b08:	e012      	b.n	8002b30 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002b0a:	68ba      	ldr	r2, [r7, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	4413      	add	r3, r2
 8002b10:	7819      	ldrb	r1, [r3, #0]
 8002b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	4413      	add	r3, r2
 8002b18:	3334      	adds	r3, #52	@ 0x34
 8002b1a:	460a      	mov	r2, r1
 8002b1c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002b1e:	68ba      	ldr	r2, [r7, #8]
 8002b20:	69fb      	ldr	r3, [r7, #28]
 8002b22:	4413      	add	r3, r2
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d006      	beq.n	8002b38 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	61fb      	str	r3, [r7, #28]
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b09      	cmp	r3, #9
 8002b34:	d9e9      	bls.n	8002b0a <prvInitialiseNewTask+0x66>
 8002b36:	e000      	b.n	8002b3a <prvInitialiseNewTask+0x96>
            {
                break;
 8002b38:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b44:	2b04      	cmp	r3, #4
 8002b46:	d90b      	bls.n	8002b60 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4c:	f383 8811 	msr	BASEPRI, r3
 8002b50:	f3bf 8f6f 	isb	sy
 8002b54:	f3bf 8f4f 	dsb	sy
 8002b58:	613b      	str	r3, [r7, #16]
    }
 8002b5a:	bf00      	nop
 8002b5c:	bf00      	nop
 8002b5e:	e7fd      	b.n	8002b5c <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b62:	2b04      	cmp	r3, #4
 8002b64:	d901      	bls.n	8002b6a <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002b66:	2304      	movs	r3, #4
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002b70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b72:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002b74:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002b76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b78:	3304      	adds	r3, #4
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7ff fb80 	bl	8002280 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b82:	3318      	adds	r3, #24
 8002b84:	4618      	mov	r0, r3
 8002b86:	f7ff fb7b 	bl	8002280 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002b8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b8e:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b92:	f1c3 0205 	rsb	r2, r3, #5
 8002b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b98:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b9e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002ba0:	683a      	ldr	r2, [r7, #0]
 8002ba2:	68f9      	ldr	r1, [r7, #12]
 8002ba4:	69b8      	ldr	r0, [r7, #24]
 8002ba6:	f001 fc35 	bl	8004414 <pxPortInitialiseStack>
 8002baa:	4602      	mov	r2, r0
 8002bac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002bae:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d002      	beq.n	8002bbc <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002bb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bb8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002bba:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002bbc:	bf00      	nop
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002bc4:	b5b0      	push	{r4, r5, r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af02      	add	r7, sp, #8
 8002bca:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002bcc:	f001 fdd6 	bl	800477c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002bd0:	4b4f      	ldr	r3, [pc, #316]	@ (8002d10 <prvAddNewTaskToReadyList+0x14c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	4a4e      	ldr	r2, [pc, #312]	@ (8002d10 <prvAddNewTaskToReadyList+0x14c>)
 8002bd8:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002bda:	4b4e      	ldr	r3, [pc, #312]	@ (8002d14 <prvAddNewTaskToReadyList+0x150>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d109      	bne.n	8002bf6 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002be2:	4a4c      	ldr	r2, [pc, #304]	@ (8002d14 <prvAddNewTaskToReadyList+0x150>)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002be8:	4b49      	ldr	r3, [pc, #292]	@ (8002d10 <prvAddNewTaskToReadyList+0x14c>)
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b01      	cmp	r3, #1
 8002bee:	d110      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002bf0:	f000 fe8a 	bl	8003908 <prvInitialiseTaskLists>
 8002bf4:	e00d      	b.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002bf6:	4b48      	ldr	r3, [pc, #288]	@ (8002d18 <prvAddNewTaskToReadyList+0x154>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002bfe:	4b45      	ldr	r3, [pc, #276]	@ (8002d14 <prvAddNewTaskToReadyList+0x150>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d802      	bhi.n	8002c12 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002c0c:	4a41      	ldr	r2, [pc, #260]	@ (8002d14 <prvAddNewTaskToReadyList+0x150>)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002c12:	4b42      	ldr	r3, [pc, #264]	@ (8002d1c <prvAddNewTaskToReadyList+0x158>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	3301      	adds	r3, #1
 8002c18:	4a40      	ldr	r2, [pc, #256]	@ (8002d1c <prvAddNewTaskToReadyList+0x158>)
 8002c1a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002c1c:	4b3f      	ldr	r3, [pc, #252]	@ (8002d1c <prvAddNewTaskToReadyList+0x158>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d016      	beq.n	8002c58 <prvAddNewTaskToReadyList+0x94>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f003 ff99 	bl	8006b64 <SEGGER_SYSVIEW_OnTaskCreate>
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	461d      	mov	r5, r3
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	461c      	mov	r4, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	1ae3      	subs	r3, r4, r3
 8002c50:	9300      	str	r3, [sp, #0]
 8002c52:	462b      	mov	r3, r5
 8002c54:	f002 f944 	bl	8004ee0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f004 f822 	bl	8006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c64:	2201      	movs	r2, #1
 8002c66:	409a      	lsls	r2, r3
 8002c68:	4b2d      	ldr	r3, [pc, #180]	@ (8002d20 <prvAddNewTaskToReadyList+0x15c>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	4a2c      	ldr	r2, [pc, #176]	@ (8002d20 <prvAddNewTaskToReadyList+0x15c>)
 8002c70:	6013      	str	r3, [r2, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c76:	492b      	ldr	r1, [pc, #172]	@ (8002d24 <prvAddNewTaskToReadyList+0x160>)
 8002c78:	4613      	mov	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	440b      	add	r3, r1
 8002c82:	3304      	adds	r3, #4
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	68fa      	ldr	r2, [r7, #12]
 8002c8c:	609a      	str	r2, [r3, #8]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	689a      	ldr	r2, [r3, #8]
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	3204      	adds	r2, #4
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	1d1a      	adds	r2, r3, #4
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	609a      	str	r2, [r3, #8]
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cac:	4613      	mov	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	4413      	add	r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d24 <prvAddNewTaskToReadyList+0x160>)
 8002cb6:	441a      	add	r2, r3
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	615a      	str	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cc0:	4918      	ldr	r1, [pc, #96]	@ (8002d24 <prvAddNewTaskToReadyList+0x160>)
 8002cc2:	4613      	mov	r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	4413      	add	r3, r2
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	440b      	add	r3, r1
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	1c59      	adds	r1, r3, #1
 8002cd0:	4814      	ldr	r0, [pc, #80]	@ (8002d24 <prvAddNewTaskToReadyList+0x160>)
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	009b      	lsls	r3, r3, #2
 8002cd6:	4413      	add	r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	4403      	add	r3, r0
 8002cdc:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002cde:	f001 fd7f 	bl	80047e0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8002d18 <prvAddNewTaskToReadyList+0x154>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00e      	beq.n	8002d08 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002cea:	4b0a      	ldr	r3, [pc, #40]	@ (8002d14 <prvAddNewTaskToReadyList+0x150>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d207      	bcs.n	8002d08 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002cf8:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <prvAddNewTaskToReadyList+0x164>)
 8002cfa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	f3bf 8f4f 	dsb	sy
 8002d04:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002d08:	bf00      	nop
 8002d0a:	3710      	adds	r7, #16
 8002d0c:	46bd      	mov	sp, r7
 8002d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8002d10:	200001ac 	.word	0x200001ac
 8002d14:	200000d4 	.word	0x200000d4
 8002d18:	200001b8 	.word	0x200001b8
 8002d1c:	200001c8 	.word	0x200001c8
 8002d20:	200001b4 	.word	0x200001b4
 8002d24:	200000d8 	.word	0x200000d8
 8002d28:	e000ed04 	.word	0xe000ed04

08002d2c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b084      	sub	sp, #16
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002d34:	f001 fd22 	bl	800477c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d102      	bne.n	8002d44 <vTaskDelete+0x18>
 8002d3e:	4b49      	ldr	r3, [pc, #292]	@ (8002e64 <vTaskDelete+0x138>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	e000      	b.n	8002d46 <vTaskDelete+0x1a>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	3304      	adds	r3, #4
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f7ff fb01 	bl	8002354 <uxListRemove>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d115      	bne.n	8002d84 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5c:	4942      	ldr	r1, [pc, #264]	@ (8002e68 <vTaskDelete+0x13c>)
 8002d5e:	4613      	mov	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4413      	add	r3, r2
 8002d64:	009b      	lsls	r3, r3, #2
 8002d66:	440b      	add	r3, r1
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d10a      	bne.n	8002d84 <vTaskDelete+0x58>
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d72:	2201      	movs	r2, #1
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43da      	mvns	r2, r3
 8002d7a:	4b3c      	ldr	r3, [pc, #240]	@ (8002e6c <vTaskDelete+0x140>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4013      	ands	r3, r2
 8002d80:	4a3a      	ldr	r2, [pc, #232]	@ (8002e6c <vTaskDelete+0x140>)
 8002d82:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d004      	beq.n	8002d96 <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	3318      	adds	r3, #24
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fadf 	bl	8002354 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002d96:	4b36      	ldr	r3, [pc, #216]	@ (8002e70 <vTaskDelete+0x144>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	3301      	adds	r3, #1
 8002d9c:	4a34      	ldr	r2, [pc, #208]	@ (8002e70 <vTaskDelete+0x144>)
 8002d9e:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002da0:	4b30      	ldr	r3, [pc, #192]	@ (8002e64 <vTaskDelete+0x138>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d118      	bne.n	8002ddc <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	3304      	adds	r3, #4
 8002dae:	4619      	mov	r1, r3
 8002db0:	4830      	ldr	r0, [pc, #192]	@ (8002e74 <vTaskDelete+0x148>)
 8002db2:	f7ff fa72 	bl	800229a <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002db6:	4b30      	ldr	r3, [pc, #192]	@ (8002e78 <vTaskDelete+0x14c>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	3301      	adds	r3, #1
 8002dbc:	4a2e      	ldr	r2, [pc, #184]	@ (8002e78 <vTaskDelete+0x14c>)
 8002dbe:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f003 ffb0 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4619      	mov	r1, r3
 8002dcc:	2022      	movs	r0, #34	@ 0x22
 8002dce:	f003 f9cd 	bl	800616c <SEGGER_SYSVIEW_RecordU32>
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f002 f8eb 	bl	8004fb0 <SYSVIEW_DeleteTask>
 8002dda:	e013      	b.n	8002e04 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002ddc:	4b27      	ldr	r3, [pc, #156]	@ (8002e7c <vTaskDelete+0x150>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	3b01      	subs	r3, #1
 8002de2:	4a26      	ldr	r2, [pc, #152]	@ (8002e7c <vTaskDelete+0x150>)
 8002de4:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f003 ff9d 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8002dee:	4603      	mov	r3, r0
 8002df0:	4619      	mov	r1, r3
 8002df2:	2022      	movs	r0, #34	@ 0x22
 8002df4:	f003 f9ba 	bl	800616c <SEGGER_SYSVIEW_RecordU32>
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f002 f8d8 	bl	8004fb0 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002e00:	f000 fe00 	bl	8003a04 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002e04:	f001 fcec 	bl	80047e0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002e08:	4b16      	ldr	r3, [pc, #88]	@ (8002e64 <vTaskDelete+0x138>)
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d002      	beq.n	8002e18 <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002e12:	68f8      	ldr	r0, [r7, #12]
 8002e14:	f000 fde6 	bl	80039e4 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002e18:	4b19      	ldr	r3, [pc, #100]	@ (8002e80 <vTaskDelete+0x154>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d01c      	beq.n	8002e5a <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002e20:	4b10      	ldr	r3, [pc, #64]	@ (8002e64 <vTaskDelete+0x138>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	68fa      	ldr	r2, [r7, #12]
 8002e26:	429a      	cmp	r2, r3
 8002e28:	d117      	bne.n	8002e5a <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002e2a:	4b16      	ldr	r3, [pc, #88]	@ (8002e84 <vTaskDelete+0x158>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d00b      	beq.n	8002e4a <vTaskDelete+0x11e>
        __asm volatile
 8002e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e36:	f383 8811 	msr	BASEPRI, r3
 8002e3a:	f3bf 8f6f 	isb	sy
 8002e3e:	f3bf 8f4f 	dsb	sy
 8002e42:	60bb      	str	r3, [r7, #8]
    }
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop
 8002e48:	e7fd      	b.n	8002e46 <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002e4a:	4b0f      	ldr	r3, [pc, #60]	@ (8002e88 <vTaskDelete+0x15c>)
 8002e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002e5a:	bf00      	nop
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	200000d4 	.word	0x200000d4
 8002e68:	200000d8 	.word	0x200000d8
 8002e6c:	200001b4 	.word	0x200001b4
 8002e70:	200001c8 	.word	0x200001c8
 8002e74:	20000180 	.word	0x20000180
 8002e78:	20000194 	.word	0x20000194
 8002e7c:	200001ac 	.word	0x200001ac
 8002e80:	200001b8 	.word	0x200001b8
 8002e84:	200001d4 	.word	0x200001d4
 8002e88:	e000ed04 	.word	0xe000ed04

08002e8c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b084      	sub	sp, #16
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d01c      	beq.n	8002ed8 <vTaskDelay+0x4c>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8002e9e:	4b16      	ldr	r3, [pc, #88]	@ (8002ef8 <vTaskDelay+0x6c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <vTaskDelay+0x32>
        __asm volatile
 8002ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eaa:	f383 8811 	msr	BASEPRI, r3
 8002eae:	f3bf 8f6f 	isb	sy
 8002eb2:	f3bf 8f4f 	dsb	sy
 8002eb6:	60bb      	str	r3, [r7, #8]
    }
 8002eb8:	bf00      	nop
 8002eba:	bf00      	nop
 8002ebc:	e7fd      	b.n	8002eba <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8002ebe:	f000 f881 	bl	8002fc4 <vTaskSuspendAll>
            {
                traceTASK_DELAY();
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	2023      	movs	r0, #35	@ 0x23
 8002ec6:	f003 f951 	bl	800616c <SEGGER_SYSVIEW_RecordU32>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8002eca:	2100      	movs	r1, #0
 8002ecc:	6878      	ldr	r0, [r7, #4]
 8002ece:	f000 ff95 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8002ed2:	f000 f885 	bl	8002fe0 <xTaskResumeAll>
 8002ed6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d107      	bne.n	8002eee <vTaskDelay+0x62>
        {
            portYIELD_WITHIN_API();
 8002ede:	4b07      	ldr	r3, [pc, #28]	@ (8002efc <vTaskDelay+0x70>)
 8002ee0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ee4:	601a      	str	r2, [r3, #0]
 8002ee6:	f3bf 8f4f 	dsb	sy
 8002eea:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8002eee:	bf00      	nop
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
 8002ef6:	bf00      	nop
 8002ef8:	200001d4 	.word	0x200001d4
 8002efc:	e000ed04 	.word	0xe000ed04

08002f00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b086      	sub	sp, #24
 8002f04:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002f06:	4b27      	ldr	r3, [pc, #156]	@ (8002fa4 <vTaskStartScheduler+0xa4>)
 8002f08:	9301      	str	r3, [sp, #4]
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	2300      	movs	r3, #0
 8002f10:	2282      	movs	r2, #130	@ 0x82
 8002f12:	4925      	ldr	r1, [pc, #148]	@ (8002fa8 <vTaskStartScheduler+0xa8>)
 8002f14:	4825      	ldr	r0, [pc, #148]	@ (8002fac <vTaskStartScheduler+0xac>)
 8002f16:	f7ff fd7f 	bl	8002a18 <xTaskCreate>
 8002f1a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2b01      	cmp	r3, #1
 8002f20:	d102      	bne.n	8002f28 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002f22:	f000 ffeb 	bl	8003efc <xTimerCreateTimerTask>
 8002f26:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d124      	bne.n	8002f78 <vTaskStartScheduler+0x78>
        __asm volatile
 8002f2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f32:	f383 8811 	msr	BASEPRI, r3
 8002f36:	f3bf 8f6f 	isb	sy
 8002f3a:	f3bf 8f4f 	dsb	sy
 8002f3e:	60bb      	str	r3, [r7, #8]
    }
 8002f40:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002f42:	4b1b      	ldr	r3, [pc, #108]	@ (8002fb0 <vTaskStartScheduler+0xb0>)
 8002f44:	f04f 32ff 	mov.w	r2, #4294967295
 8002f48:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002f4a:	4b1a      	ldr	r3, [pc, #104]	@ (8002fb4 <vTaskStartScheduler+0xb4>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002f50:	4b19      	ldr	r3, [pc, #100]	@ (8002fb8 <vTaskStartScheduler+0xb8>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002f56:	4b19      	ldr	r3, [pc, #100]	@ (8002fbc <vTaskStartScheduler+0xbc>)
 8002f58:	681a      	ldr	r2, [r3, #0]
 8002f5a:	4b12      	ldr	r3, [pc, #72]	@ (8002fa4 <vTaskStartScheduler+0xa4>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d102      	bne.n	8002f68 <vTaskStartScheduler+0x68>
 8002f62:	f003 fde3 	bl	8006b2c <SEGGER_SYSVIEW_OnIdle>
 8002f66:	e004      	b.n	8002f72 <vTaskStartScheduler+0x72>
 8002f68:	4b14      	ldr	r3, [pc, #80]	@ (8002fbc <vTaskStartScheduler+0xbc>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f003 fe3b 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002f72:	f001 fadf 	bl	8004534 <xPortStartScheduler>
 8002f76:	e00f      	b.n	8002f98 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f7e:	d10b      	bne.n	8002f98 <vTaskStartScheduler+0x98>
        __asm volatile
 8002f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f84:	f383 8811 	msr	BASEPRI, r3
 8002f88:	f3bf 8f6f 	isb	sy
 8002f8c:	f3bf 8f4f 	dsb	sy
 8002f90:	607b      	str	r3, [r7, #4]
    }
 8002f92:	bf00      	nop
 8002f94:	bf00      	nop
 8002f96:	e7fd      	b.n	8002f94 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002f98:	4b09      	ldr	r3, [pc, #36]	@ (8002fc0 <vTaskStartScheduler+0xc0>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
}
 8002f9c:	bf00      	nop
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}
 8002fa4:	200001d0 	.word	0x200001d0
 8002fa8:	08007148 	.word	0x08007148
 8002fac:	080038d9 	.word	0x080038d9
 8002fb0:	200001cc 	.word	0x200001cc
 8002fb4:	200001b8 	.word	0x200001b8
 8002fb8:	200001b0 	.word	0x200001b0
 8002fbc:	200000d4 	.word	0x200000d4
 8002fc0:	2000000c 	.word	0x2000000c

08002fc4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002fc8:	4b04      	ldr	r3, [pc, #16]	@ (8002fdc <vTaskSuspendAll+0x18>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	3301      	adds	r3, #1
 8002fce:	4a03      	ldr	r2, [pc, #12]	@ (8002fdc <vTaskSuspendAll+0x18>)
 8002fd0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002fd2:	bf00      	nop
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	200001d4 	.word	0x200001d4

08002fe0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b088      	sub	sp, #32
 8002fe4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002fea:	2300      	movs	r3, #0
 8002fec:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002fee:	4b73      	ldr	r3, [pc, #460]	@ (80031bc <xTaskResumeAll+0x1dc>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10b      	bne.n	800300e <xTaskResumeAll+0x2e>
        __asm volatile
 8002ff6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ffa:	f383 8811 	msr	BASEPRI, r3
 8002ffe:	f3bf 8f6f 	isb	sy
 8003002:	f3bf 8f4f 	dsb	sy
 8003006:	607b      	str	r3, [r7, #4]
    }
 8003008:	bf00      	nop
 800300a:	bf00      	nop
 800300c:	e7fd      	b.n	800300a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800300e:	f001 fbb5 	bl	800477c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8003012:	4b6a      	ldr	r3, [pc, #424]	@ (80031bc <xTaskResumeAll+0x1dc>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	3b01      	subs	r3, #1
 8003018:	4a68      	ldr	r2, [pc, #416]	@ (80031bc <xTaskResumeAll+0x1dc>)
 800301a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800301c:	4b67      	ldr	r3, [pc, #412]	@ (80031bc <xTaskResumeAll+0x1dc>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f040 80c4 	bne.w	80031ae <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003026:	4b66      	ldr	r3, [pc, #408]	@ (80031c0 <xTaskResumeAll+0x1e0>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	f000 80bf 	beq.w	80031ae <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003030:	e08e      	b.n	8003150 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003032:	4b64      	ldr	r3, [pc, #400]	@ (80031c4 <xTaskResumeAll+0x1e4>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	68db      	ldr	r3, [r3, #12]
 8003038:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303e:	613b      	str	r3, [r7, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	69db      	ldr	r3, [r3, #28]
 8003044:	69fa      	ldr	r2, [r7, #28]
 8003046:	6a12      	ldr	r2, [r2, #32]
 8003048:	609a      	str	r2, [r3, #8]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	6a1b      	ldr	r3, [r3, #32]
 800304e:	69fa      	ldr	r2, [r7, #28]
 8003050:	69d2      	ldr	r2, [r2, #28]
 8003052:	605a      	str	r2, [r3, #4]
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	685a      	ldr	r2, [r3, #4]
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	3318      	adds	r3, #24
 800305c:	429a      	cmp	r2, r3
 800305e:	d103      	bne.n	8003068 <xTaskResumeAll+0x88>
 8003060:	69fb      	ldr	r3, [r7, #28]
 8003062:	6a1a      	ldr	r2, [r3, #32]
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	605a      	str	r2, [r3, #4]
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	2200      	movs	r2, #0
 800306c:	629a      	str	r2, [r3, #40]	@ 0x28
 800306e:	693b      	ldr	r3, [r7, #16]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	1e5a      	subs	r2, r3, #1
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	695b      	ldr	r3, [r3, #20]
 800307c:	60fb      	str	r3, [r7, #12]
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	69fa      	ldr	r2, [r7, #28]
 8003084:	68d2      	ldr	r2, [r2, #12]
 8003086:	609a      	str	r2, [r3, #8]
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	69fa      	ldr	r2, [r7, #28]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	605a      	str	r2, [r3, #4]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	685a      	ldr	r2, [r3, #4]
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	3304      	adds	r3, #4
 800309a:	429a      	cmp	r2, r3
 800309c:	d103      	bne.n	80030a6 <xTaskResumeAll+0xc6>
 800309e:	69fb      	ldr	r3, [r7, #28]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	605a      	str	r2, [r3, #4]
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	2200      	movs	r2, #0
 80030aa:	615a      	str	r2, [r3, #20]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	1e5a      	subs	r2, r3, #1
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f003 fdf3 	bl	8006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80030be:	69fb      	ldr	r3, [r7, #28]
 80030c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030c2:	2201      	movs	r2, #1
 80030c4:	409a      	lsls	r2, r3
 80030c6:	4b40      	ldr	r3, [pc, #256]	@ (80031c8 <xTaskResumeAll+0x1e8>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	4a3e      	ldr	r2, [pc, #248]	@ (80031c8 <xTaskResumeAll+0x1e8>)
 80030ce:	6013      	str	r3, [r2, #0]
 80030d0:	69fb      	ldr	r3, [r7, #28]
 80030d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d4:	493d      	ldr	r1, [pc, #244]	@ (80031cc <xTaskResumeAll+0x1ec>)
 80030d6:	4613      	mov	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	4413      	add	r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	3304      	adds	r3, #4
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	60bb      	str	r3, [r7, #8]
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	68ba      	ldr	r2, [r7, #8]
 80030ea:	609a      	str	r2, [r3, #8]
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	689a      	ldr	r2, [r3, #8]
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	68bb      	ldr	r3, [r7, #8]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	3204      	adds	r2, #4
 80030fc:	605a      	str	r2, [r3, #4]
 80030fe:	69fb      	ldr	r3, [r7, #28]
 8003100:	1d1a      	adds	r2, r3, #4
 8003102:	68bb      	ldr	r3, [r7, #8]
 8003104:	609a      	str	r2, [r3, #8]
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310a:	4613      	mov	r3, r2
 800310c:	009b      	lsls	r3, r3, #2
 800310e:	4413      	add	r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	4a2e      	ldr	r2, [pc, #184]	@ (80031cc <xTaskResumeAll+0x1ec>)
 8003114:	441a      	add	r2, r3
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	615a      	str	r2, [r3, #20]
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800311e:	492b      	ldr	r1, [pc, #172]	@ (80031cc <xTaskResumeAll+0x1ec>)
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	009b      	lsls	r3, r3, #2
 8003128:	440b      	add	r3, r1
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	1c59      	adds	r1, r3, #1
 800312e:	4827      	ldr	r0, [pc, #156]	@ (80031cc <xTaskResumeAll+0x1ec>)
 8003130:	4613      	mov	r3, r2
 8003132:	009b      	lsls	r3, r3, #2
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	4403      	add	r3, r0
 800313a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003140:	4b23      	ldr	r3, [pc, #140]	@ (80031d0 <xTaskResumeAll+0x1f0>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003146:	429a      	cmp	r2, r3
 8003148:	d302      	bcc.n	8003150 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800314a:	4b22      	ldr	r3, [pc, #136]	@ (80031d4 <xTaskResumeAll+0x1f4>)
 800314c:	2201      	movs	r2, #1
 800314e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003150:	4b1c      	ldr	r3, [pc, #112]	@ (80031c4 <xTaskResumeAll+0x1e4>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	2b00      	cmp	r3, #0
 8003156:	f47f af6c 	bne.w	8003032 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003160:	f000 fc50 	bl	8003a04 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003164:	4b1c      	ldr	r3, [pc, #112]	@ (80031d8 <xTaskResumeAll+0x1f8>)
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800316a:	697b      	ldr	r3, [r7, #20]
 800316c:	2b00      	cmp	r3, #0
 800316e:	d010      	beq.n	8003192 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003170:	f000 f858 	bl	8003224 <xTaskIncrementTick>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800317a:	4b16      	ldr	r3, [pc, #88]	@ (80031d4 <xTaskResumeAll+0x1f4>)
 800317c:	2201      	movs	r2, #1
 800317e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003180:	697b      	ldr	r3, [r7, #20]
 8003182:	3b01      	subs	r3, #1
 8003184:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d1f1      	bne.n	8003170 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800318c:	4b12      	ldr	r3, [pc, #72]	@ (80031d8 <xTaskResumeAll+0x1f8>)
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003192:	4b10      	ldr	r3, [pc, #64]	@ (80031d4 <xTaskResumeAll+0x1f4>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d009      	beq.n	80031ae <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 800319a:	2301      	movs	r3, #1
 800319c:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 800319e:	4b0f      	ldr	r3, [pc, #60]	@ (80031dc <xTaskResumeAll+0x1fc>)
 80031a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031a4:	601a      	str	r2, [r3, #0]
 80031a6:	f3bf 8f4f 	dsb	sy
 80031aa:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80031ae:	f001 fb17 	bl	80047e0 <vPortExitCritical>

    return xAlreadyYielded;
 80031b2:	69bb      	ldr	r3, [r7, #24]
}
 80031b4:	4618      	mov	r0, r3
 80031b6:	3720      	adds	r7, #32
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	200001d4 	.word	0x200001d4
 80031c0:	200001ac 	.word	0x200001ac
 80031c4:	2000016c 	.word	0x2000016c
 80031c8:	200001b4 	.word	0x200001b4
 80031cc:	200000d8 	.word	0x200000d8
 80031d0:	200000d4 	.word	0x200000d4
 80031d4:	200001c0 	.word	0x200001c0
 80031d8:	200001bc 	.word	0x200001bc
 80031dc:	e000ed04 	.word	0xe000ed04

080031e0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80031e6:	4b05      	ldr	r3, [pc, #20]	@ (80031fc <xTaskGetTickCount+0x1c>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80031ec:	687b      	ldr	r3, [r7, #4]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	370c      	adds	r7, #12
 80031f2:	46bd      	mov	sp, r7
 80031f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f8:	4770      	bx	lr
 80031fa:	bf00      	nop
 80031fc:	200001b0 	.word	0x200001b0

08003200 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b082      	sub	sp, #8
 8003204:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003206:	f001 fba9 	bl	800495c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800320a:	2300      	movs	r3, #0
 800320c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 800320e:	4b04      	ldr	r3, [pc, #16]	@ (8003220 <xTaskGetTickCountFromISR+0x20>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8003214:	683b      	ldr	r3, [r7, #0]
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}
 800321e:	bf00      	nop
 8003220:	200001b0 	.word	0x200001b0

08003224 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b08a      	sub	sp, #40	@ 0x28
 8003228:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800322e:	4b80      	ldr	r3, [pc, #512]	@ (8003430 <xTaskIncrementTick+0x20c>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2b00      	cmp	r3, #0
 8003234:	f040 80f1 	bne.w	800341a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003238:	4b7e      	ldr	r3, [pc, #504]	@ (8003434 <xTaskIncrementTick+0x210>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	3301      	adds	r3, #1
 800323e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003240:	4a7c      	ldr	r2, [pc, #496]	@ (8003434 <xTaskIncrementTick+0x210>)
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003246:	6a3b      	ldr	r3, [r7, #32]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d121      	bne.n	8003290 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 800324c:	4b7a      	ldr	r3, [pc, #488]	@ (8003438 <xTaskIncrementTick+0x214>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d00b      	beq.n	800326e <xTaskIncrementTick+0x4a>
        __asm volatile
 8003256:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325a:	f383 8811 	msr	BASEPRI, r3
 800325e:	f3bf 8f6f 	isb	sy
 8003262:	f3bf 8f4f 	dsb	sy
 8003266:	607b      	str	r3, [r7, #4]
    }
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	e7fd      	b.n	800326a <xTaskIncrementTick+0x46>
 800326e:	4b72      	ldr	r3, [pc, #456]	@ (8003438 <xTaskIncrementTick+0x214>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	61fb      	str	r3, [r7, #28]
 8003274:	4b71      	ldr	r3, [pc, #452]	@ (800343c <xTaskIncrementTick+0x218>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a6f      	ldr	r2, [pc, #444]	@ (8003438 <xTaskIncrementTick+0x214>)
 800327a:	6013      	str	r3, [r2, #0]
 800327c:	4a6f      	ldr	r2, [pc, #444]	@ (800343c <xTaskIncrementTick+0x218>)
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	6013      	str	r3, [r2, #0]
 8003282:	4b6f      	ldr	r3, [pc, #444]	@ (8003440 <xTaskIncrementTick+0x21c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	4a6d      	ldr	r2, [pc, #436]	@ (8003440 <xTaskIncrementTick+0x21c>)
 800328a:	6013      	str	r3, [r2, #0]
 800328c:	f000 fbba 	bl	8003a04 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003290:	4b6c      	ldr	r3, [pc, #432]	@ (8003444 <xTaskIncrementTick+0x220>)
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	6a3a      	ldr	r2, [r7, #32]
 8003296:	429a      	cmp	r2, r3
 8003298:	f0c0 80aa 	bcc.w	80033f0 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329c:	4b66      	ldr	r3, [pc, #408]	@ (8003438 <xTaskIncrementTick+0x214>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d104      	bne.n	80032b0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80032a6:	4b67      	ldr	r3, [pc, #412]	@ (8003444 <xTaskIncrementTick+0x220>)
 80032a8:	f04f 32ff 	mov.w	r2, #4294967295
 80032ac:	601a      	str	r2, [r3, #0]
                    break;
 80032ae:	e09f      	b.n	80033f0 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032b0:	4b61      	ldr	r3, [pc, #388]	@ (8003438 <xTaskIncrementTick+0x214>)
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	68db      	ldr	r3, [r3, #12]
 80032b6:	68db      	ldr	r3, [r3, #12]
 80032b8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80032ba:	69bb      	ldr	r3, [r7, #24]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80032c0:	6a3a      	ldr	r2, [r7, #32]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d203      	bcs.n	80032d0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80032c8:	4a5e      	ldr	r2, [pc, #376]	@ (8003444 <xTaskIncrementTick+0x220>)
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80032ce:	e08f      	b.n	80033f0 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	695b      	ldr	r3, [r3, #20]
 80032d4:	613b      	str	r3, [r7, #16]
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	69ba      	ldr	r2, [r7, #24]
 80032dc:	68d2      	ldr	r2, [r2, #12]
 80032de:	609a      	str	r2, [r3, #8]
 80032e0:	69bb      	ldr	r3, [r7, #24]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	69ba      	ldr	r2, [r7, #24]
 80032e6:	6892      	ldr	r2, [r2, #8]
 80032e8:	605a      	str	r2, [r3, #4]
 80032ea:	693b      	ldr	r3, [r7, #16]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	69bb      	ldr	r3, [r7, #24]
 80032f0:	3304      	adds	r3, #4
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d103      	bne.n	80032fe <xTaskIncrementTick+0xda>
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	68da      	ldr	r2, [r3, #12]
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	69bb      	ldr	r3, [r7, #24]
 8003300:	2200      	movs	r2, #0
 8003302:	615a      	str	r2, [r3, #20]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	1e5a      	subs	r2, r3, #1
 800330a:	693b      	ldr	r3, [r7, #16]
 800330c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003312:	2b00      	cmp	r3, #0
 8003314:	d01e      	beq.n	8003354 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003316:	69bb      	ldr	r3, [r7, #24]
 8003318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800331a:	60fb      	str	r3, [r7, #12]
 800331c:	69bb      	ldr	r3, [r7, #24]
 800331e:	69db      	ldr	r3, [r3, #28]
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	6a12      	ldr	r2, [r2, #32]
 8003324:	609a      	str	r2, [r3, #8]
 8003326:	69bb      	ldr	r3, [r7, #24]
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	69d2      	ldr	r2, [r2, #28]
 800332e:	605a      	str	r2, [r3, #4]
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	69bb      	ldr	r3, [r7, #24]
 8003336:	3318      	adds	r3, #24
 8003338:	429a      	cmp	r2, r3
 800333a:	d103      	bne.n	8003344 <xTaskIncrementTick+0x120>
 800333c:	69bb      	ldr	r3, [r7, #24]
 800333e:	6a1a      	ldr	r2, [r3, #32]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	605a      	str	r2, [r3, #4]
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2200      	movs	r2, #0
 8003348:	629a      	str	r2, [r3, #40]	@ 0x28
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	1e5a      	subs	r2, r3, #1
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003354:	69bb      	ldr	r3, [r7, #24]
 8003356:	4618      	mov	r0, r3
 8003358:	f003 fca4 	bl	8006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003360:	2201      	movs	r2, #1
 8003362:	409a      	lsls	r2, r3
 8003364:	4b38      	ldr	r3, [pc, #224]	@ (8003448 <xTaskIncrementTick+0x224>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4313      	orrs	r3, r2
 800336a:	4a37      	ldr	r2, [pc, #220]	@ (8003448 <xTaskIncrementTick+0x224>)
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003372:	4936      	ldr	r1, [pc, #216]	@ (800344c <xTaskIncrementTick+0x228>)
 8003374:	4613      	mov	r3, r2
 8003376:	009b      	lsls	r3, r3, #2
 8003378:	4413      	add	r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3304      	adds	r3, #4
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	60bb      	str	r3, [r7, #8]
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	68ba      	ldr	r2, [r7, #8]
 8003388:	609a      	str	r2, [r3, #8]
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	689a      	ldr	r2, [r3, #8]
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60da      	str	r2, [r3, #12]
 8003392:	68bb      	ldr	r3, [r7, #8]
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	3204      	adds	r2, #4
 800339a:	605a      	str	r2, [r3, #4]
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1d1a      	adds	r2, r3, #4
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	609a      	str	r2, [r3, #8]
 80033a4:	69bb      	ldr	r3, [r7, #24]
 80033a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033a8:	4613      	mov	r3, r2
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	4a26      	ldr	r2, [pc, #152]	@ (800344c <xTaskIncrementTick+0x228>)
 80033b2:	441a      	add	r2, r3
 80033b4:	69bb      	ldr	r3, [r7, #24]
 80033b6:	615a      	str	r2, [r3, #20]
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033bc:	4923      	ldr	r1, [pc, #140]	@ (800344c <xTaskIncrementTick+0x228>)
 80033be:	4613      	mov	r3, r2
 80033c0:	009b      	lsls	r3, r3, #2
 80033c2:	4413      	add	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	440b      	add	r3, r1
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	1c59      	adds	r1, r3, #1
 80033cc:	481f      	ldr	r0, [pc, #124]	@ (800344c <xTaskIncrementTick+0x228>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4403      	add	r3, r0
 80033d8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033de:	4b1c      	ldr	r3, [pc, #112]	@ (8003450 <xTaskIncrementTick+0x22c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	429a      	cmp	r2, r3
 80033e6:	f67f af59 	bls.w	800329c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80033ea:	2301      	movs	r3, #1
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80033ee:	e755      	b.n	800329c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80033f0:	4b17      	ldr	r3, [pc, #92]	@ (8003450 <xTaskIncrementTick+0x22c>)
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033f6:	4915      	ldr	r1, [pc, #84]	@ (800344c <xTaskIncrementTick+0x228>)
 80033f8:	4613      	mov	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4413      	add	r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	2b01      	cmp	r3, #1
 8003406:	d901      	bls.n	800340c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003408:	2301      	movs	r3, #1
 800340a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800340c:	4b11      	ldr	r3, [pc, #68]	@ (8003454 <xTaskIncrementTick+0x230>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d007      	beq.n	8003424 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003414:	2301      	movs	r3, #1
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
 8003418:	e004      	b.n	8003424 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800341a:	4b0f      	ldr	r3, [pc, #60]	@ (8003458 <xTaskIncrementTick+0x234>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	3301      	adds	r3, #1
 8003420:	4a0d      	ldr	r2, [pc, #52]	@ (8003458 <xTaskIncrementTick+0x234>)
 8003422:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003426:	4618      	mov	r0, r3
 8003428:	3728      	adds	r7, #40	@ 0x28
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200001d4 	.word	0x200001d4
 8003434:	200001b0 	.word	0x200001b0
 8003438:	20000164 	.word	0x20000164
 800343c:	20000168 	.word	0x20000168
 8003440:	200001c4 	.word	0x200001c4
 8003444:	200001cc 	.word	0x200001cc
 8003448:	200001b4 	.word	0x200001b4
 800344c:	200000d8 	.word	0x200000d8
 8003450:	200000d4 	.word	0x200000d4
 8003454:	200001c0 	.word	0x200001c0
 8003458:	200001bc 	.word	0x200001bc

0800345c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b086      	sub	sp, #24
 8003460:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003462:	4b2d      	ldr	r3, [pc, #180]	@ (8003518 <vTaskSwitchContext+0xbc>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800346a:	4b2c      	ldr	r3, [pc, #176]	@ (800351c <vTaskSwitchContext+0xc0>)
 800346c:	2201      	movs	r2, #1
 800346e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003470:	e04e      	b.n	8003510 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003472:	4b2a      	ldr	r3, [pc, #168]	@ (800351c <vTaskSwitchContext+0xc0>)
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003478:	4b29      	ldr	r3, [pc, #164]	@ (8003520 <vTaskSwitchContext+0xc4>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	fab3 f383 	clz	r3, r3
 8003484:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003486:	7afb      	ldrb	r3, [r7, #11]
 8003488:	f1c3 031f 	rsb	r3, r3, #31
 800348c:	617b      	str	r3, [r7, #20]
 800348e:	4925      	ldr	r1, [pc, #148]	@ (8003524 <vTaskSwitchContext+0xc8>)
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	4613      	mov	r3, r2
 8003494:	009b      	lsls	r3, r3, #2
 8003496:	4413      	add	r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <vTaskSwitchContext+0x5e>
        __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	607b      	str	r3, [r7, #4]
    }
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <vTaskSwitchContext+0x5a>
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	4613      	mov	r3, r2
 80034be:	009b      	lsls	r3, r3, #2
 80034c0:	4413      	add	r3, r2
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	4a17      	ldr	r2, [pc, #92]	@ (8003524 <vTaskSwitchContext+0xc8>)
 80034c6:	4413      	add	r3, r2
 80034c8:	613b      	str	r3, [r7, #16]
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	685a      	ldr	r2, [r3, #4]
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	693b      	ldr	r3, [r7, #16]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	3308      	adds	r3, #8
 80034dc:	429a      	cmp	r2, r3
 80034de:	d104      	bne.n	80034ea <vTaskSwitchContext+0x8e>
 80034e0:	693b      	ldr	r3, [r7, #16]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	685a      	ldr	r2, [r3, #4]
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	605a      	str	r2, [r3, #4]
 80034ea:	693b      	ldr	r3, [r7, #16]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	4a0d      	ldr	r2, [pc, #52]	@ (8003528 <vTaskSwitchContext+0xcc>)
 80034f2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <vTaskSwitchContext+0xcc>)
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	4b0c      	ldr	r3, [pc, #48]	@ (800352c <vTaskSwitchContext+0xd0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d102      	bne.n	8003506 <vTaskSwitchContext+0xaa>
 8003500:	f003 fb14 	bl	8006b2c <SEGGER_SYSVIEW_OnIdle>
}
 8003504:	e004      	b.n	8003510 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003506:	4b08      	ldr	r3, [pc, #32]	@ (8003528 <vTaskSwitchContext+0xcc>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4618      	mov	r0, r3
 800350c:	f003 fb6c 	bl	8006be8 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003510:	bf00      	nop
 8003512:	3718      	adds	r7, #24
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	200001d4 	.word	0x200001d4
 800351c:	200001c0 	.word	0x200001c0
 8003520:	200001b4 	.word	0x200001b4
 8003524:	200000d8 	.word	0x200000d8
 8003528:	200000d4 	.word	0x200000d4
 800352c:	200001d0 	.word	0x200001d0

08003530 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10b      	bne.n	8003558 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003544:	f383 8811 	msr	BASEPRI, r3
 8003548:	f3bf 8f6f 	isb	sy
 800354c:	f3bf 8f4f 	dsb	sy
 8003550:	60fb      	str	r3, [r7, #12]
    }
 8003552:	bf00      	nop
 8003554:	bf00      	nop
 8003556:	e7fd      	b.n	8003554 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003558:	4b07      	ldr	r3, [pc, #28]	@ (8003578 <vTaskPlaceOnEventList+0x48>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	3318      	adds	r3, #24
 800355e:	4619      	mov	r1, r3
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f7fe febe 	bl	80022e2 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003566:	2101      	movs	r1, #1
 8003568:	6838      	ldr	r0, [r7, #0]
 800356a:	f000 fc47 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	200000d4 	.word	0x200000d4

0800357c <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 800357c:	b580      	push	{r7, lr}
 800357e:	b086      	sub	sp, #24
 8003580:	af00      	add	r7, sp, #0
 8003582:	60f8      	str	r0, [r7, #12]
 8003584:	60b9      	str	r1, [r7, #8]
 8003586:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d10b      	bne.n	80035a6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800358e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003592:	f383 8811 	msr	BASEPRI, r3
 8003596:	f3bf 8f6f 	isb	sy
 800359a:	f3bf 8f4f 	dsb	sy
 800359e:	613b      	str	r3, [r7, #16]
    }
 80035a0:	bf00      	nop
 80035a2:	bf00      	nop
 80035a4:	e7fd      	b.n	80035a2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	685b      	ldr	r3, [r3, #4]
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	4b17      	ldr	r3, [pc, #92]	@ (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	697a      	ldr	r2, [r7, #20]
 80035b2:	61da      	str	r2, [r3, #28]
 80035b4:	4b15      	ldr	r3, [pc, #84]	@ (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	697a      	ldr	r2, [r7, #20]
 80035ba:	6892      	ldr	r2, [r2, #8]
 80035bc:	621a      	str	r2, [r3, #32]
 80035be:	4b13      	ldr	r3, [pc, #76]	@ (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	689b      	ldr	r3, [r3, #8]
 80035c6:	3218      	adds	r2, #24
 80035c8:	605a      	str	r2, [r3, #4]
 80035ca:	4b10      	ldr	r3, [pc, #64]	@ (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f103 0218 	add.w	r2, r3, #24
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	609a      	str	r2, [r3, #8]
 80035d6:	4b0d      	ldr	r3, [pc, #52]	@ (800360c <vTaskPlaceOnEventListRestricted+0x90>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	629a      	str	r2, [r3, #40]	@ 0x28
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1c5a      	adds	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80035ee:	f04f 33ff 	mov.w	r3, #4294967295
 80035f2:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80035f4:	2024      	movs	r0, #36	@ 0x24
 80035f6:	f002 fd9b 	bl	8006130 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	68b8      	ldr	r0, [r7, #8]
 80035fe:	f000 fbfd 	bl	8003dfc <prvAddCurrentTaskToDelayedList>
    }
 8003602:	bf00      	nop
 8003604:	3718      	adds	r7, #24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
 800360a:	bf00      	nop
 800360c:	200000d4 	.word	0x200000d4

08003610 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	@ 0x28
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003620:	6a3b      	ldr	r3, [r7, #32]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362a:	f383 8811 	msr	BASEPRI, r3
 800362e:	f3bf 8f6f 	isb	sy
 8003632:	f3bf 8f4f 	dsb	sy
 8003636:	60fb      	str	r3, [r7, #12]
    }
 8003638:	bf00      	nop
 800363a:	bf00      	nop
 800363c:	e7fd      	b.n	800363a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003642:	61fb      	str	r3, [r7, #28]
 8003644:	6a3b      	ldr	r3, [r7, #32]
 8003646:	69db      	ldr	r3, [r3, #28]
 8003648:	6a3a      	ldr	r2, [r7, #32]
 800364a:	6a12      	ldr	r2, [r2, #32]
 800364c:	609a      	str	r2, [r3, #8]
 800364e:	6a3b      	ldr	r3, [r7, #32]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	6a3a      	ldr	r2, [r7, #32]
 8003654:	69d2      	ldr	r2, [r2, #28]
 8003656:	605a      	str	r2, [r3, #4]
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	3318      	adds	r3, #24
 8003660:	429a      	cmp	r2, r3
 8003662:	d103      	bne.n	800366c <xTaskRemoveFromEventList+0x5c>
 8003664:	6a3b      	ldr	r3, [r7, #32]
 8003666:	6a1a      	ldr	r2, [r3, #32]
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	605a      	str	r2, [r3, #4]
 800366c:	6a3b      	ldr	r3, [r7, #32]
 800366e:	2200      	movs	r2, #0
 8003670:	629a      	str	r2, [r3, #40]	@ 0x28
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	1e5a      	subs	r2, r3, #1
 8003678:	69fb      	ldr	r3, [r7, #28]
 800367a:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800367c:	4b4b      	ldr	r3, [pc, #300]	@ (80037ac <xTaskRemoveFromEventList+0x19c>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d162      	bne.n	800374a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	695b      	ldr	r3, [r3, #20]
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	6a3b      	ldr	r3, [r7, #32]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	6a3a      	ldr	r2, [r7, #32]
 8003690:	68d2      	ldr	r2, [r2, #12]
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	6a3a      	ldr	r2, [r7, #32]
 800369a:	6892      	ldr	r2, [r2, #8]
 800369c:	605a      	str	r2, [r3, #4]
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	685a      	ldr	r2, [r3, #4]
 80036a2:	6a3b      	ldr	r3, [r7, #32]
 80036a4:	3304      	adds	r3, #4
 80036a6:	429a      	cmp	r2, r3
 80036a8:	d103      	bne.n	80036b2 <xTaskRemoveFromEventList+0xa2>
 80036aa:	6a3b      	ldr	r3, [r7, #32]
 80036ac:	68da      	ldr	r2, [r3, #12]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	605a      	str	r2, [r3, #4]
 80036b2:	6a3b      	ldr	r3, [r7, #32]
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
 80036b8:	697b      	ldr	r3, [r7, #20]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	1e5a      	subs	r2, r3, #1
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80036c2:	6a3b      	ldr	r3, [r7, #32]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f003 faed 	bl	8006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>
 80036ca:	6a3b      	ldr	r3, [r7, #32]
 80036cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036ce:	2201      	movs	r2, #1
 80036d0:	409a      	lsls	r2, r3
 80036d2:	4b37      	ldr	r3, [pc, #220]	@ (80037b0 <xTaskRemoveFromEventList+0x1a0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4313      	orrs	r3, r2
 80036d8:	4a35      	ldr	r2, [pc, #212]	@ (80037b0 <xTaskRemoveFromEventList+0x1a0>)
 80036da:	6013      	str	r3, [r2, #0]
 80036dc:	6a3b      	ldr	r3, [r7, #32]
 80036de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036e0:	4934      	ldr	r1, [pc, #208]	@ (80037b4 <xTaskRemoveFromEventList+0x1a4>)
 80036e2:	4613      	mov	r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	4413      	add	r3, r2
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	440b      	add	r3, r1
 80036ec:	3304      	adds	r3, #4
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	613b      	str	r3, [r7, #16]
 80036f2:	6a3b      	ldr	r3, [r7, #32]
 80036f4:	693a      	ldr	r2, [r7, #16]
 80036f6:	609a      	str	r2, [r3, #8]
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	689a      	ldr	r2, [r3, #8]
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	6a3a      	ldr	r2, [r7, #32]
 8003706:	3204      	adds	r2, #4
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	6a3b      	ldr	r3, [r7, #32]
 800370c:	1d1a      	adds	r2, r3, #4
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	609a      	str	r2, [r3, #8]
 8003712:	6a3b      	ldr	r3, [r7, #32]
 8003714:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003716:	4613      	mov	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	4413      	add	r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	4a25      	ldr	r2, [pc, #148]	@ (80037b4 <xTaskRemoveFromEventList+0x1a4>)
 8003720:	441a      	add	r2, r3
 8003722:	6a3b      	ldr	r3, [r7, #32]
 8003724:	615a      	str	r2, [r3, #20]
 8003726:	6a3b      	ldr	r3, [r7, #32]
 8003728:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800372a:	4922      	ldr	r1, [pc, #136]	@ (80037b4 <xTaskRemoveFromEventList+0x1a4>)
 800372c:	4613      	mov	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	1c59      	adds	r1, r3, #1
 800373a:	481e      	ldr	r0, [pc, #120]	@ (80037b4 <xTaskRemoveFromEventList+0x1a4>)
 800373c:	4613      	mov	r3, r2
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4403      	add	r3, r0
 8003746:	6019      	str	r1, [r3, #0]
 8003748:	e01b      	b.n	8003782 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800374a:	4b1b      	ldr	r3, [pc, #108]	@ (80037b8 <xTaskRemoveFromEventList+0x1a8>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	61bb      	str	r3, [r7, #24]
 8003750:	6a3b      	ldr	r3, [r7, #32]
 8003752:	69ba      	ldr	r2, [r7, #24]
 8003754:	61da      	str	r2, [r3, #28]
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	6a3b      	ldr	r3, [r7, #32]
 800375c:	621a      	str	r2, [r3, #32]
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	6a3a      	ldr	r2, [r7, #32]
 8003764:	3218      	adds	r2, #24
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	6a3b      	ldr	r3, [r7, #32]
 800376a:	f103 0218 	add.w	r2, r3, #24
 800376e:	69bb      	ldr	r3, [r7, #24]
 8003770:	609a      	str	r2, [r3, #8]
 8003772:	6a3b      	ldr	r3, [r7, #32]
 8003774:	4a10      	ldr	r2, [pc, #64]	@ (80037b8 <xTaskRemoveFromEventList+0x1a8>)
 8003776:	629a      	str	r2, [r3, #40]	@ 0x28
 8003778:	4b0f      	ldr	r3, [pc, #60]	@ (80037b8 <xTaskRemoveFromEventList+0x1a8>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	3301      	adds	r3, #1
 800377e:	4a0e      	ldr	r2, [pc, #56]	@ (80037b8 <xTaskRemoveFromEventList+0x1a8>)
 8003780:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003782:	6a3b      	ldr	r3, [r7, #32]
 8003784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003786:	4b0d      	ldr	r3, [pc, #52]	@ (80037bc <xTaskRemoveFromEventList+0x1ac>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800378c:	429a      	cmp	r2, r3
 800378e:	d905      	bls.n	800379c <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003790:	2301      	movs	r3, #1
 8003792:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003794:	4b0a      	ldr	r3, [pc, #40]	@ (80037c0 <xTaskRemoveFromEventList+0x1b0>)
 8003796:	2201      	movs	r2, #1
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e001      	b.n	80037a0 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 800379c:	2300      	movs	r3, #0
 800379e:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80037a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	3728      	adds	r7, #40	@ 0x28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd80      	pop	{r7, pc}
 80037aa:	bf00      	nop
 80037ac:	200001d4 	.word	0x200001d4
 80037b0:	200001b4 	.word	0x200001b4
 80037b4:	200000d8 	.word	0x200000d8
 80037b8:	2000016c 	.word	0x2000016c
 80037bc:	200000d4 	.word	0x200000d4
 80037c0:	200001c0 	.word	0x200001c0

080037c4 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80037cc:	4b06      	ldr	r3, [pc, #24]	@ (80037e8 <vTaskInternalSetTimeOutState+0x24>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80037d4:	4b05      	ldr	r3, [pc, #20]	@ (80037ec <vTaskInternalSetTimeOutState+0x28>)
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	605a      	str	r2, [r3, #4]
}
 80037dc:	bf00      	nop
 80037de:	370c      	adds	r7, #12
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	200001c4 	.word	0x200001c4
 80037ec:	200001b0 	.word	0x200001b0

080037f0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b088      	sub	sp, #32
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
 80037f8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d10b      	bne.n	8003818 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003800:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003804:	f383 8811 	msr	BASEPRI, r3
 8003808:	f3bf 8f6f 	isb	sy
 800380c:	f3bf 8f4f 	dsb	sy
 8003810:	613b      	str	r3, [r7, #16]
    }
 8003812:	bf00      	nop
 8003814:	bf00      	nop
 8003816:	e7fd      	b.n	8003814 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b00      	cmp	r3, #0
 800381c:	d10b      	bne.n	8003836 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800381e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003822:	f383 8811 	msr	BASEPRI, r3
 8003826:	f3bf 8f6f 	isb	sy
 800382a:	f3bf 8f4f 	dsb	sy
 800382e:	60fb      	str	r3, [r7, #12]
    }
 8003830:	bf00      	nop
 8003832:	bf00      	nop
 8003834:	e7fd      	b.n	8003832 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003836:	f000 ffa1 	bl	800477c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800383a:	4b1f      	ldr	r3, [pc, #124]	@ (80038b8 <xTaskCheckForTimeOut+0xc8>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	69ba      	ldr	r2, [r7, #24]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003852:	d102      	bne.n	800385a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
 8003858:	e026      	b.n	80038a8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	4b17      	ldr	r3, [pc, #92]	@ (80038bc <xTaskCheckForTimeOut+0xcc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d00a      	beq.n	800387c <xTaskCheckForTimeOut+0x8c>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	69ba      	ldr	r2, [r7, #24]
 800386c:	429a      	cmp	r2, r3
 800386e:	d305      	bcc.n	800387c <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003870:	2301      	movs	r3, #1
 8003872:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2200      	movs	r2, #0
 8003878:	601a      	str	r2, [r3, #0]
 800387a:	e015      	b.n	80038a8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	697a      	ldr	r2, [r7, #20]
 8003882:	429a      	cmp	r2, r3
 8003884:	d20b      	bcs.n	800389e <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	1ad2      	subs	r2, r2, r3
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003892:	6878      	ldr	r0, [r7, #4]
 8003894:	f7ff ff96 	bl	80037c4 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003898:	2300      	movs	r3, #0
 800389a:	61fb      	str	r3, [r7, #28]
 800389c:	e004      	b.n	80038a8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2200      	movs	r2, #0
 80038a2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80038a4:	2301      	movs	r3, #1
 80038a6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80038a8:	f000 ff9a 	bl	80047e0 <vPortExitCritical>

    return xReturn;
 80038ac:	69fb      	ldr	r3, [r7, #28]
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3720      	adds	r7, #32
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	200001b0 	.word	0x200001b0
 80038bc:	200001c4 	.word	0x200001c4

080038c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80038c0:	b480      	push	{r7}
 80038c2:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80038c4:	4b03      	ldr	r3, [pc, #12]	@ (80038d4 <vTaskMissedYield+0x14>)
 80038c6:	2201      	movs	r2, #1
 80038c8:	601a      	str	r2, [r3, #0]
}
 80038ca:	bf00      	nop
 80038cc:	46bd      	mov	sp, r7
 80038ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d2:	4770      	bx	lr
 80038d4:	200001c0 	.word	0x200001c0

080038d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	b082      	sub	sp, #8
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80038e0:	f000 f852 	bl	8003988 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80038e4:	4b06      	ldr	r3, [pc, #24]	@ (8003900 <prvIdleTask+0x28>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b01      	cmp	r3, #1
 80038ea:	d9f9      	bls.n	80038e0 <prvIdleTask+0x8>
            {
                taskYIELD();
 80038ec:	4b05      	ldr	r3, [pc, #20]	@ (8003904 <prvIdleTask+0x2c>)
 80038ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038f2:	601a      	str	r2, [r3, #0]
 80038f4:	f3bf 8f4f 	dsb	sy
 80038f8:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80038fc:	e7f0      	b.n	80038e0 <prvIdleTask+0x8>
 80038fe:	bf00      	nop
 8003900:	200000d8 	.word	0x200000d8
 8003904:	e000ed04 	.word	0xe000ed04

08003908 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b082      	sub	sp, #8
 800390c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800390e:	2300      	movs	r3, #0
 8003910:	607b      	str	r3, [r7, #4]
 8003912:	e00c      	b.n	800392e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003914:	687a      	ldr	r2, [r7, #4]
 8003916:	4613      	mov	r3, r2
 8003918:	009b      	lsls	r3, r3, #2
 800391a:	4413      	add	r3, r2
 800391c:	009b      	lsls	r3, r3, #2
 800391e:	4a12      	ldr	r2, [pc, #72]	@ (8003968 <prvInitialiseTaskLists+0x60>)
 8003920:	4413      	add	r3, r2
 8003922:	4618      	mov	r0, r3
 8003924:	f7fe fc8c 	bl	8002240 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	3301      	adds	r3, #1
 800392c:	607b      	str	r3, [r7, #4]
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2b04      	cmp	r3, #4
 8003932:	d9ef      	bls.n	8003914 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003934:	480d      	ldr	r0, [pc, #52]	@ (800396c <prvInitialiseTaskLists+0x64>)
 8003936:	f7fe fc83 	bl	8002240 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800393a:	480d      	ldr	r0, [pc, #52]	@ (8003970 <prvInitialiseTaskLists+0x68>)
 800393c:	f7fe fc80 	bl	8002240 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003940:	480c      	ldr	r0, [pc, #48]	@ (8003974 <prvInitialiseTaskLists+0x6c>)
 8003942:	f7fe fc7d 	bl	8002240 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003946:	480c      	ldr	r0, [pc, #48]	@ (8003978 <prvInitialiseTaskLists+0x70>)
 8003948:	f7fe fc7a 	bl	8002240 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800394c:	480b      	ldr	r0, [pc, #44]	@ (800397c <prvInitialiseTaskLists+0x74>)
 800394e:	f7fe fc77 	bl	8002240 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003952:	4b0b      	ldr	r3, [pc, #44]	@ (8003980 <prvInitialiseTaskLists+0x78>)
 8003954:	4a05      	ldr	r2, [pc, #20]	@ (800396c <prvInitialiseTaskLists+0x64>)
 8003956:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003958:	4b0a      	ldr	r3, [pc, #40]	@ (8003984 <prvInitialiseTaskLists+0x7c>)
 800395a:	4a05      	ldr	r2, [pc, #20]	@ (8003970 <prvInitialiseTaskLists+0x68>)
 800395c:	601a      	str	r2, [r3, #0]
}
 800395e:	bf00      	nop
 8003960:	3708      	adds	r7, #8
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}
 8003966:	bf00      	nop
 8003968:	200000d8 	.word	0x200000d8
 800396c:	2000013c 	.word	0x2000013c
 8003970:	20000150 	.word	0x20000150
 8003974:	2000016c 	.word	0x2000016c
 8003978:	20000180 	.word	0x20000180
 800397c:	20000198 	.word	0x20000198
 8003980:	20000164 	.word	0x20000164
 8003984:	20000168 	.word	0x20000168

08003988 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b082      	sub	sp, #8
 800398c:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800398e:	e019      	b.n	80039c4 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003990:	f000 fef4 	bl	800477c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003994:	4b10      	ldr	r3, [pc, #64]	@ (80039d8 <prvCheckTasksWaitingTermination+0x50>)
 8003996:	68db      	ldr	r3, [r3, #12]
 8003998:	68db      	ldr	r3, [r3, #12]
 800399a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fe fcd7 	bl	8002354 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <prvCheckTasksWaitingTermination+0x54>)
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	3b01      	subs	r3, #1
 80039ac:	4a0b      	ldr	r2, [pc, #44]	@ (80039dc <prvCheckTasksWaitingTermination+0x54>)
 80039ae:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	3b01      	subs	r3, #1
 80039b6:	4a0a      	ldr	r2, [pc, #40]	@ (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039b8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80039ba:	f000 ff11 	bl	80047e0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f000 f810 	bl	80039e4 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80039c4:	4b06      	ldr	r3, [pc, #24]	@ (80039e0 <prvCheckTasksWaitingTermination+0x58>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1e1      	bne.n	8003990 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3708      	adds	r7, #8
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000180 	.word	0x20000180
 80039dc:	200001ac 	.word	0x200001ac
 80039e0:	20000194 	.word	0x20000194

080039e4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f0:	4618      	mov	r0, r3
 80039f2:	f001 f8b1 	bl	8004b58 <vPortFree>
            vPortFree( pxTCB );
 80039f6:	6878      	ldr	r0, [r7, #4]
 80039f8:	f001 f8ae 	bl	8004b58 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80039fc:	bf00      	nop
 80039fe:	3708      	adds	r7, #8
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}

08003a04 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a08:	4b0a      	ldr	r3, [pc, #40]	@ (8003a34 <prvResetNextTaskUnblockTime+0x30>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d104      	bne.n	8003a1c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003a12:	4b09      	ldr	r3, [pc, #36]	@ (8003a38 <prvResetNextTaskUnblockTime+0x34>)
 8003a14:	f04f 32ff 	mov.w	r2, #4294967295
 8003a18:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003a1a:	e005      	b.n	8003a28 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003a1c:	4b05      	ldr	r3, [pc, #20]	@ (8003a34 <prvResetNextTaskUnblockTime+0x30>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	68db      	ldr	r3, [r3, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a04      	ldr	r2, [pc, #16]	@ (8003a38 <prvResetNextTaskUnblockTime+0x34>)
 8003a26:	6013      	str	r3, [r2, #0]
}
 8003a28:	bf00      	nop
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr
 8003a32:	bf00      	nop
 8003a34:	20000164 	.word	0x20000164
 8003a38:	200001cc 	.word	0x200001cc

08003a3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003a3c:	b480      	push	{r7}
 8003a3e:	b083      	sub	sp, #12
 8003a40:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003a42:	4b0b      	ldr	r3, [pc, #44]	@ (8003a70 <xTaskGetSchedulerState+0x34>)
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d102      	bne.n	8003a50 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	607b      	str	r3, [r7, #4]
 8003a4e:	e008      	b.n	8003a62 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a50:	4b08      	ldr	r3, [pc, #32]	@ (8003a74 <xTaskGetSchedulerState+0x38>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d102      	bne.n	8003a5e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003a58:	2302      	movs	r3, #2
 8003a5a:	607b      	str	r3, [r7, #4]
 8003a5c:	e001      	b.n	8003a62 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003a5e:	2300      	movs	r3, #0
 8003a60:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003a62:	687b      	ldr	r3, [r7, #4]
    }
 8003a64:	4618      	mov	r0, r3
 8003a66:	370c      	adds	r7, #12
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6e:	4770      	bx	lr
 8003a70:	200001b8 	.word	0x200001b8
 8003a74:	200001d4 	.word	0x200001d4

08003a78 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b088      	sub	sp, #32
 8003a7c:	af02      	add	r7, sp, #8
 8003a7e:	60f8      	str	r0, [r7, #12]
 8003a80:	60b9      	str	r1, [r7, #8]
 8003a82:	607a      	str	r2, [r7, #4]
 8003a84:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d00b      	beq.n	8003aa4 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 8003a8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a90:	f383 8811 	msr	BASEPRI, r3
 8003a94:	f3bf 8f6f 	isb	sy
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	613b      	str	r3, [r7, #16]
    }
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	e7fd      	b.n	8003aa0 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003aa4:	f000 fe6a 	bl	800477c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003aa8:	4b36      	ldr	r3, [pc, #216]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003aaa:	681a      	ldr	r2, [r3, #0]
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	3354      	adds	r3, #84	@ 0x54
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b02      	cmp	r3, #2
 8003ab8:	d022      	beq.n	8003b00 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 8003aba:	4b32      	ldr	r3, [pc, #200]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	3214      	adds	r2, #20
 8003ac2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003ac6:	68ba      	ldr	r2, [r7, #8]
 8003ac8:	43d2      	mvns	r2, r2
 8003aca:	4011      	ands	r1, r2
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	3214      	adds	r2, #20
 8003ad0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003ad4:	4b2b      	ldr	r3, [pc, #172]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	4413      	add	r3, r2
 8003adc:	3354      	adds	r3, #84	@ 0x54
 8003ade:	2201      	movs	r2, #1
 8003ae0:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003ae2:	6a3b      	ldr	r3, [r7, #32]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d00b      	beq.n	8003b00 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ae8:	2101      	movs	r1, #1
 8003aea:	6a38      	ldr	r0, [r7, #32]
 8003aec:	f000 f986 	bl	8003dfc <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003af0:	4b25      	ldr	r3, [pc, #148]	@ (8003b88 <xTaskGenericNotifyWait+0x110>)
 8003af2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003af6:	601a      	str	r2, [r3, #0]
 8003af8:	f3bf 8f4f 	dsb	sy
 8003afc:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003b00:	f000 fe6e 	bl	80047e0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003b04:	f000 fe3a 	bl	800477c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	6a3b      	ldr	r3, [r7, #32]
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	4613      	mov	r3, r2
 8003b10:	687a      	ldr	r2, [r7, #4]
 8003b12:	68b9      	ldr	r1, [r7, #8]
 8003b14:	2040      	movs	r0, #64	@ 0x40
 8003b16:	f002 fc35 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d007      	beq.n	8003b30 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003b20:	4b18      	ldr	r3, [pc, #96]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	68fa      	ldr	r2, [r7, #12]
 8003b26:	3214      	adds	r2, #20
 8003b28:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003b30:	4b14      	ldr	r3, [pc, #80]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	4413      	add	r3, r2
 8003b38:	3354      	adds	r3, #84	@ 0x54
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b02      	cmp	r3, #2
 8003b40:	d002      	beq.n	8003b48 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8003b42:	2300      	movs	r3, #0
 8003b44:	617b      	str	r3, [r7, #20]
 8003b46:	e00e      	b.n	8003b66 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 8003b48:	4b0e      	ldr	r3, [pc, #56]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	3214      	adds	r2, #20
 8003b50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	43d2      	mvns	r2, r2
 8003b58:	4011      	ands	r1, r2
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	3214      	adds	r2, #20
 8003b5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 8003b62:	2301      	movs	r3, #1
 8003b64:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 8003b66:	4b07      	ldr	r3, [pc, #28]	@ (8003b84 <xTaskGenericNotifyWait+0x10c>)
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	4413      	add	r3, r2
 8003b6e:	3354      	adds	r3, #84	@ 0x54
 8003b70:	2200      	movs	r2, #0
 8003b72:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8003b74:	f000 fe34 	bl	80047e0 <vPortExitCritical>

        return xReturn;
 8003b78:	697b      	ldr	r3, [r7, #20]
    }
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	200000d4 	.word	0x200000d4
 8003b88:	e000ed04 	.word	0xe000ed04

08003b8c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b090      	sub	sp, #64	@ 0x40
 8003b90:	af02      	add	r7, sp, #8
 8003b92:	60f8      	str	r0, [r7, #12]
 8003b94:	60b9      	str	r1, [r7, #8]
 8003b96:	607a      	str	r2, [r7, #4]
 8003b98:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t ucOriginalNotifyState;

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003b9e:	68bb      	ldr	r3, [r7, #8]
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d00b      	beq.n	8003bbc <xTaskGenericNotify+0x30>
        __asm volatile
 8003ba4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ba8:	f383 8811 	msr	BASEPRI, r3
 8003bac:	f3bf 8f6f 	isb	sy
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	623b      	str	r3, [r7, #32]
    }
 8003bb6:	bf00      	nop
 8003bb8:	bf00      	nop
 8003bba:	e7fd      	b.n	8003bb8 <xTaskGenericNotify+0x2c>
        configASSERT( xTaskToNotify );
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10b      	bne.n	8003bda <xTaskGenericNotify+0x4e>
        __asm volatile
 8003bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003bc6:	f383 8811 	msr	BASEPRI, r3
 8003bca:	f3bf 8f6f 	isb	sy
 8003bce:	f3bf 8f4f 	dsb	sy
 8003bd2:	61fb      	str	r3, [r7, #28]
    }
 8003bd4:	bf00      	nop
 8003bd6:	bf00      	nop
 8003bd8:	e7fd      	b.n	8003bd6 <xTaskGenericNotify+0x4a>
        pxTCB = xTaskToNotify;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	633b      	str	r3, [r7, #48]	@ 0x30

        taskENTER_CRITICAL();
 8003bde:	f000 fdcd 	bl	800477c <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8003be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d006      	beq.n	8003bf6 <xTaskGenericNotify+0x6a>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003be8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	3214      	adds	r2, #20
 8003bee:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003bf2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	4413      	add	r3, r2
 8003bfc:	3354      	adds	r3, #84	@ 0x54
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003c04:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	4413      	add	r3, r2
 8003c0a:	3354      	adds	r3, #84	@ 0x54
 8003c0c:	2202      	movs	r2, #2
 8003c0e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003c10:	78fb      	ldrb	r3, [r7, #3]
 8003c12:	2b04      	cmp	r3, #4
 8003c14:	d83b      	bhi.n	8003c8e <xTaskGenericNotify+0x102>
 8003c16:	a201      	add	r2, pc, #4	@ (adr r2, 8003c1c <xTaskGenericNotify+0x90>)
 8003c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c1c:	08003caf 	.word	0x08003caf
 8003c20:	08003c31 	.word	0x08003c31
 8003c24:	08003c4d 	.word	0x08003c4d
 8003c28:	08003c65 	.word	0x08003c65
 8003c2c:	08003c73 	.word	0x08003c73
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003c30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	3214      	adds	r2, #20
 8003c36:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	ea42 0103 	orr.w	r1, r2, r3
 8003c40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	3214      	adds	r2, #20
 8003c46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c4a:	e033      	b.n	8003cb4 <xTaskGenericNotify+0x128>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003c4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	3214      	adds	r2, #20
 8003c52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c5a:	68ba      	ldr	r2, [r7, #8]
 8003c5c:	3214      	adds	r2, #20
 8003c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c62:	e027      	b.n	8003cb4 <xTaskGenericNotify+0x128>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c66:	68ba      	ldr	r2, [r7, #8]
 8003c68:	3214      	adds	r2, #20
 8003c6a:	6879      	ldr	r1, [r7, #4]
 8003c6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003c70:	e020      	b.n	8003cb4 <xTaskGenericNotify+0x128>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d006      	beq.n	8003c88 <xTaskGenericNotify+0xfc>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003c7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c7c:	68ba      	ldr	r2, [r7, #8]
 8003c7e:	3214      	adds	r2, #20
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003c86:	e015      	b.n	8003cb4 <xTaskGenericNotify+0x128>
                        xReturn = pdFAIL;
 8003c88:	2300      	movs	r3, #0
 8003c8a:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8003c8c:	e012      	b.n	8003cb4 <xTaskGenericNotify+0x128>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003c8e:	4b56      	ldr	r3, [pc, #344]	@ (8003de8 <xTaskGenericNotify+0x25c>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <xTaskGenericNotify+0x126>
        __asm volatile
 8003c96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c9a:	f383 8811 	msr	BASEPRI, r3
 8003c9e:	f3bf 8f6f 	isb	sy
 8003ca2:	f3bf 8f4f 	dsb	sy
 8003ca6:	61bb      	str	r3, [r7, #24]
    }
 8003ca8:	bf00      	nop
 8003caa:	bf00      	nop
 8003cac:	e7fd      	b.n	8003caa <xTaskGenericNotify+0x11e>
                    break;
 8003cae:	bf00      	nop
 8003cb0:	e000      	b.n	8003cb4 <xTaskGenericNotify+0x128>

                    break;
 8003cb2:	bf00      	nop
            }

            traceTASK_NOTIFY(  );
 8003cb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	f003 f836 	bl	8006d28 <SEGGER_SYSVIEW_ShrinkId>
 8003cbc:	4601      	mov	r1, r0
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc2:	9300      	str	r3, [sp, #0]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	687a      	ldr	r2, [r7, #4]
 8003cc8:	203e      	movs	r0, #62	@ 0x3e
 8003cca:	f002 fb5b 	bl	8006384 <SEGGER_SYSVIEW_RecordU32x4>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003cce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003cd2:	2b01      	cmp	r3, #1
 8003cd4:	f040 8081 	bne.w	8003dda <xTaskGenericNotify+0x24e>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003cd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cda:	695b      	ldr	r3, [r3, #20]
 8003cdc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003ce4:	68d2      	ldr	r2, [r2, #12]
 8003ce6:	609a      	str	r2, [r3, #8]
 8003ce8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cea:	68db      	ldr	r3, [r3, #12]
 8003cec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cee:	6892      	ldr	r2, [r2, #8]
 8003cf0:	605a      	str	r2, [r3, #4]
 8003cf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003cf4:	685a      	ldr	r2, [r3, #4]
 8003cf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003cf8:	3304      	adds	r3, #4
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d103      	bne.n	8003d06 <xTaskGenericNotify+0x17a>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	68da      	ldr	r2, [r3, #12]
 8003d02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d04:	605a      	str	r2, [r3, #4]
 8003d06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d08:	2200      	movs	r2, #0
 8003d0a:	615a      	str	r2, [r3, #20]
 8003d0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	1e5a      	subs	r2, r3, #1
 8003d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003d14:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f002 ffc3 	bl	8006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d22:	2201      	movs	r2, #1
 8003d24:	409a      	lsls	r2, r3
 8003d26:	4b31      	ldr	r3, [pc, #196]	@ (8003dec <xTaskGenericNotify+0x260>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4313      	orrs	r3, r2
 8003d2c:	4a2f      	ldr	r2, [pc, #188]	@ (8003dec <xTaskGenericNotify+0x260>)
 8003d2e:	6013      	str	r3, [r2, #0]
 8003d30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d34:	492e      	ldr	r1, [pc, #184]	@ (8003df0 <xTaskGenericNotify+0x264>)
 8003d36:	4613      	mov	r3, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4413      	add	r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	440b      	add	r3, r1
 8003d40:	3304      	adds	r3, #4
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d4a:	609a      	str	r2, [r3, #8]
 8003d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d52:	60da      	str	r2, [r3, #12]
 8003d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d5a:	3204      	adds	r2, #4
 8003d5c:	605a      	str	r2, [r3, #4]
 8003d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d60:	1d1a      	adds	r2, r3, #4
 8003d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d64:	609a      	str	r2, [r3, #8]
 8003d66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d6a:	4613      	mov	r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4413      	add	r3, r2
 8003d70:	009b      	lsls	r3, r3, #2
 8003d72:	4a1f      	ldr	r2, [pc, #124]	@ (8003df0 <xTaskGenericNotify+0x264>)
 8003d74:	441a      	add	r2, r3
 8003d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d78:	615a      	str	r2, [r3, #20]
 8003d7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d7e:	491c      	ldr	r1, [pc, #112]	@ (8003df0 <xTaskGenericNotify+0x264>)
 8003d80:	4613      	mov	r3, r2
 8003d82:	009b      	lsls	r3, r3, #2
 8003d84:	4413      	add	r3, r2
 8003d86:	009b      	lsls	r3, r3, #2
 8003d88:	440b      	add	r3, r1
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	1c59      	adds	r1, r3, #1
 8003d8e:	4818      	ldr	r0, [pc, #96]	@ (8003df0 <xTaskGenericNotify+0x264>)
 8003d90:	4613      	mov	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4413      	add	r3, r2
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	4403      	add	r3, r0
 8003d9a:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00b      	beq.n	8003dbc <xTaskGenericNotify+0x230>
        __asm volatile
 8003da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003da8:	f383 8811 	msr	BASEPRI, r3
 8003dac:	f3bf 8f6f 	isb	sy
 8003db0:	f3bf 8f4f 	dsb	sy
 8003db4:	617b      	str	r3, [r7, #20]
    }
 8003db6:	bf00      	nop
 8003db8:	bf00      	nop
 8003dba:	e7fd      	b.n	8003db8 <xTaskGenericNotify+0x22c>
                     * earliest possible time. */
                    prvResetNextTaskUnblockTime();
                }
                #endif

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003dbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8003df4 <xTaskGenericNotify+0x268>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d907      	bls.n	8003dda <xTaskGenericNotify+0x24e>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    taskYIELD_IF_USING_PREEMPTION();
 8003dca:	4b0b      	ldr	r3, [pc, #44]	@ (8003df8 <xTaskGenericNotify+0x26c>)
 8003dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003dd0:	601a      	str	r2, [r3, #0]
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003dda:	f000 fd01 	bl	80047e0 <vPortExitCritical>

        return xReturn;
 8003dde:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8003de0:	4618      	mov	r0, r3
 8003de2:	3738      	adds	r7, #56	@ 0x38
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	200001b0 	.word	0x200001b0
 8003dec:	200001b4 	.word	0x200001b4
 8003df0:	200000d8 	.word	0x200000d8
 8003df4:	200000d4 	.word	0x200000d4
 8003df8:	e000ed04 	.word	0xe000ed04

08003dfc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003e06:	4b36      	ldr	r3, [pc, #216]	@ (8003ee0 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e0c:	4b35      	ldr	r3, [pc, #212]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3304      	adds	r3, #4
 8003e12:	4618      	mov	r0, r3
 8003e14:	f7fe fa9e 	bl	8002354 <uxListRemove>
 8003e18:	4603      	mov	r3, r0
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d10b      	bne.n	8003e36 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003e1e:	4b31      	ldr	r3, [pc, #196]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e24:	2201      	movs	r2, #1
 8003e26:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2a:	43da      	mvns	r2, r3
 8003e2c:	4b2e      	ldr	r3, [pc, #184]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	4013      	ands	r3, r2
 8003e32:	4a2d      	ldr	r2, [pc, #180]	@ (8003ee8 <prvAddCurrentTaskToDelayedList+0xec>)
 8003e34:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d124      	bne.n	8003e88 <prvAddCurrentTaskToDelayedList+0x8c>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d021      	beq.n	8003e88 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e44:	4b29      	ldr	r3, [pc, #164]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	613b      	str	r3, [r7, #16]
 8003e4a:	4b26      	ldr	r3, [pc, #152]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	693a      	ldr	r2, [r7, #16]
 8003e50:	609a      	str	r2, [r3, #8]
 8003e52:	4b24      	ldr	r3, [pc, #144]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	6892      	ldr	r2, [r2, #8]
 8003e5a:	60da      	str	r2, [r3, #12]
 8003e5c:	4b21      	ldr	r3, [pc, #132]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	693b      	ldr	r3, [r7, #16]
 8003e62:	689b      	ldr	r3, [r3, #8]
 8003e64:	3204      	adds	r2, #4
 8003e66:	605a      	str	r2, [r3, #4]
 8003e68:	4b1e      	ldr	r3, [pc, #120]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1d1a      	adds	r2, r3, #4
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	609a      	str	r2, [r3, #8]
 8003e72:	4b1c      	ldr	r3, [pc, #112]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	4a1d      	ldr	r2, [pc, #116]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e78:	615a      	str	r2, [r3, #20]
 8003e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3301      	adds	r3, #1
 8003e80:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <prvAddCurrentTaskToDelayedList+0xf0>)
 8003e82:	6013      	str	r3, [r2, #0]
 8003e84:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003e86:	e026      	b.n	8003ed6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4413      	add	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e90:	4b14      	ldr	r3, [pc, #80]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	68fa      	ldr	r2, [r7, #12]
 8003e96:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d209      	bcs.n	8003eb4 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003ea0:	4b13      	ldr	r3, [pc, #76]	@ (8003ef0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003ea2:	681a      	ldr	r2, [r3, #0]
 8003ea4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	3304      	adds	r3, #4
 8003eaa:	4619      	mov	r1, r3
 8003eac:	4610      	mov	r0, r2
 8003eae:	f7fe fa18 	bl	80022e2 <vListInsert>
}
 8003eb2:	e010      	b.n	8003ed6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003eb6:	681a      	ldr	r2, [r3, #0]
 8003eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ee4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3304      	adds	r3, #4
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4610      	mov	r0, r2
 8003ec2:	f7fe fa0e 	bl	80022e2 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8003ef8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	68fa      	ldr	r2, [r7, #12]
 8003ecc:	429a      	cmp	r2, r3
 8003ece:	d202      	bcs.n	8003ed6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003ed0:	4a09      	ldr	r2, [pc, #36]	@ (8003ef8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6013      	str	r3, [r2, #0]
}
 8003ed6:	bf00      	nop
 8003ed8:	3718      	adds	r7, #24
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}
 8003ede:	bf00      	nop
 8003ee0:	200001b0 	.word	0x200001b0
 8003ee4:	200000d4 	.word	0x200000d4
 8003ee8:	200001b4 	.word	0x200001b4
 8003eec:	20000198 	.word	0x20000198
 8003ef0:	20000168 	.word	0x20000168
 8003ef4:	20000164 	.word	0x20000164
 8003ef8:	200001cc 	.word	0x200001cc

08003efc <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003f02:	2300      	movs	r3, #0
 8003f04:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003f06:	f000 fa4f 	bl	80043a8 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003f0a:	4b12      	ldr	r3, [pc, #72]	@ (8003f54 <xTimerCreateTimerTask+0x58>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d00b      	beq.n	8003f2a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003f12:	4b11      	ldr	r3, [pc, #68]	@ (8003f58 <xTimerCreateTimerTask+0x5c>)
 8003f14:	9301      	str	r3, [sp, #4]
 8003f16:	2302      	movs	r3, #2
 8003f18:	9300      	str	r3, [sp, #0]
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003f20:	490e      	ldr	r1, [pc, #56]	@ (8003f5c <xTimerCreateTimerTask+0x60>)
 8003f22:	480f      	ldr	r0, [pc, #60]	@ (8003f60 <xTimerCreateTimerTask+0x64>)
 8003f24:	f7fe fd78 	bl	8002a18 <xTaskCreate>
 8003f28:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10b      	bne.n	8003f48 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	603b      	str	r3, [r7, #0]
    }
 8003f42:	bf00      	nop
 8003f44:	bf00      	nop
 8003f46:	e7fd      	b.n	8003f44 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003f48:	687b      	ldr	r3, [r7, #4]
    }
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	3708      	adds	r7, #8
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	bd80      	pop	{r7, pc}
 8003f52:	bf00      	nop
 8003f54:	20000208 	.word	0x20000208
 8003f58:	2000020c 	.word	0x2000020c
 8003f5c:	08007150 	.word	0x08007150
 8003f60:	08004009 	.word	0x08004009

08003f64 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b084      	sub	sp, #16
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	60f8      	str	r0, [r7, #12]
 8003f6c:	60b9      	str	r1, [r7, #8]
 8003f6e:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f70:	e008      	b.n	8003f84 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	68ba      	ldr	r2, [r7, #8]
 8003f78:	4413      	add	r3, r2
 8003f7a:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	6a1b      	ldr	r3, [r3, #32]
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	699a      	ldr	r2, [r3, #24]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	18d1      	adds	r1, r2, r3
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	687a      	ldr	r2, [r7, #4]
 8003f90:	68f8      	ldr	r0, [r7, #12]
 8003f92:	f000 f8df 	bl	8004154 <prvInsertTimerInActiveList>
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d1ea      	bne.n	8003f72 <prvReloadTimer+0xe>
        }
    }
 8003f9c:	bf00      	nop
 8003f9e:	bf00      	nop
 8003fa0:	3710      	adds	r7, #16
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd80      	pop	{r7, pc}
	...

08003fa8 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b084      	sub	sp, #16
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb2:	4b14      	ldr	r3, [pc, #80]	@ (8004004 <prvProcessExpiredTimer+0x5c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	3304      	adds	r3, #4
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f9c7 	bl	8002354 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d005      	beq.n	8003fe0 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003fd4:	683a      	ldr	r2, [r7, #0]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	68f8      	ldr	r0, [r7, #12]
 8003fda:	f7ff ffc3 	bl	8003f64 <prvReloadTimer>
 8003fde:	e008      	b.n	8003ff2 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003fe6:	f023 0301 	bic.w	r3, r3, #1
 8003fea:	b2da      	uxtb	r2, r3
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6a1b      	ldr	r3, [r3, #32]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	4798      	blx	r3
    }
 8003ffa:	bf00      	nop
 8003ffc:	3710      	adds	r7, #16
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	20000200 	.word	0x20000200

08004008 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004010:	f107 0308 	add.w	r3, r7, #8
 8004014:	4618      	mov	r0, r3
 8004016:	f000 f859 	bl	80040cc <prvGetNextExpireTime>
 800401a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	4619      	mov	r1, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f000 f805 	bl	8004030 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8004026:	f000 f8d7 	bl	80041d8 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800402a:	bf00      	nop
 800402c:	e7f0      	b.n	8004010 <prvTimerTask+0x8>
	...

08004030 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8004030:	b580      	push	{r7, lr}
 8004032:	b084      	sub	sp, #16
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
 8004038:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 800403a:	f7fe ffc3 	bl	8002fc4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800403e:	f107 0308 	add.w	r3, r7, #8
 8004042:	4618      	mov	r0, r3
 8004044:	f000 f866 	bl	8004114 <prvSampleTimeNow>
 8004048:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d130      	bne.n	80040b2 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d10a      	bne.n	800406c <prvProcessTimerOrBlockTask+0x3c>
 8004056:	687a      	ldr	r2, [r7, #4]
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	429a      	cmp	r2, r3
 800405c:	d806      	bhi.n	800406c <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800405e:	f7fe ffbf 	bl	8002fe0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004062:	68f9      	ldr	r1, [r7, #12]
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f7ff ff9f 	bl	8003fa8 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 800406a:	e024      	b.n	80040b6 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d008      	beq.n	8004084 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004072:	4b13      	ldr	r3, [pc, #76]	@ (80040c0 <prvProcessTimerOrBlockTask+0x90>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <prvProcessTimerOrBlockTask+0x50>
 800407c:	2301      	movs	r3, #1
 800407e:	e000      	b.n	8004082 <prvProcessTimerOrBlockTask+0x52>
 8004080:	2300      	movs	r3, #0
 8004082:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004084:	4b0f      	ldr	r3, [pc, #60]	@ (80040c4 <prvProcessTimerOrBlockTask+0x94>)
 8004086:	6818      	ldr	r0, [r3, #0]
 8004088:	687a      	ldr	r2, [r7, #4]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	683a      	ldr	r2, [r7, #0]
 8004090:	4619      	mov	r1, r3
 8004092:	f7fe fc8d 	bl	80029b0 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8004096:	f7fe ffa3 	bl	8002fe0 <xTaskResumeAll>
 800409a:	4603      	mov	r3, r0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 80040a0:	4b09      	ldr	r3, [pc, #36]	@ (80040c8 <prvProcessTimerOrBlockTask+0x98>)
 80040a2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80040a6:	601a      	str	r2, [r3, #0]
 80040a8:	f3bf 8f4f 	dsb	sy
 80040ac:	f3bf 8f6f 	isb	sy
    }
 80040b0:	e001      	b.n	80040b6 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 80040b2:	f7fe ff95 	bl	8002fe0 <xTaskResumeAll>
    }
 80040b6:	bf00      	nop
 80040b8:	3710      	adds	r7, #16
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000204 	.word	0x20000204
 80040c4:	20000208 	.word	0x20000208
 80040c8:	e000ed04 	.word	0xe000ed04

080040cc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 80040cc:	b480      	push	{r7}
 80040ce:	b085      	sub	sp, #20
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80040d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004110 <prvGetNextExpireTime+0x44>)
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d101      	bne.n	80040e2 <prvGetNextExpireTime+0x16>
 80040de:	2201      	movs	r2, #1
 80040e0:	e000      	b.n	80040e4 <prvGetNextExpireTime+0x18>
 80040e2:	2200      	movs	r2, #0
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d105      	bne.n	80040fc <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80040f0:	4b07      	ldr	r3, [pc, #28]	@ (8004110 <prvGetNextExpireTime+0x44>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68db      	ldr	r3, [r3, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	60fb      	str	r3, [r7, #12]
 80040fa:	e001      	b.n	8004100 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80040fc:	2300      	movs	r3, #0
 80040fe:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004100:	68fb      	ldr	r3, [r7, #12]
    }
 8004102:	4618      	mov	r0, r3
 8004104:	3714      	adds	r7, #20
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr
 800410e:	bf00      	nop
 8004110:	20000200 	.word	0x20000200

08004114 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800411c:	f7ff f860 	bl	80031e0 <xTaskGetTickCount>
 8004120:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004122:	4b0b      	ldr	r3, [pc, #44]	@ (8004150 <prvSampleTimeNow+0x3c>)
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68fa      	ldr	r2, [r7, #12]
 8004128:	429a      	cmp	r2, r3
 800412a:	d205      	bcs.n	8004138 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800412c:	f000 f916 	bl	800435c <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2201      	movs	r2, #1
 8004134:	601a      	str	r2, [r3, #0]
 8004136:	e002      	b.n	800413e <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2200      	movs	r2, #0
 800413c:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 800413e:	4a04      	ldr	r2, [pc, #16]	@ (8004150 <prvSampleTimeNow+0x3c>)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004144:	68fb      	ldr	r3, [r7, #12]
    }
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}
 800414e:	bf00      	nop
 8004150:	20000210 	.word	0x20000210

08004154 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004154:	b580      	push	{r7, lr}
 8004156:	b086      	sub	sp, #24
 8004158:	af00      	add	r7, sp, #0
 800415a:	60f8      	str	r0, [r7, #12]
 800415c:	60b9      	str	r1, [r7, #8]
 800415e:	607a      	str	r2, [r7, #4]
 8004160:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004162:	2300      	movs	r3, #0
 8004164:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	68ba      	ldr	r2, [r7, #8]
 800416a:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	68fa      	ldr	r2, [r7, #12]
 8004170:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004172:	68ba      	ldr	r2, [r7, #8]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	429a      	cmp	r2, r3
 8004178:	d812      	bhi.n	80041a0 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800417a:	687a      	ldr	r2, [r7, #4]
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	1ad2      	subs	r2, r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	429a      	cmp	r2, r3
 8004186:	d302      	bcc.n	800418e <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8004188:	2301      	movs	r3, #1
 800418a:	617b      	str	r3, [r7, #20]
 800418c:	e01b      	b.n	80041c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800418e:	4b10      	ldr	r3, [pc, #64]	@ (80041d0 <prvInsertTimerInActiveList+0x7c>)
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	3304      	adds	r3, #4
 8004196:	4619      	mov	r1, r3
 8004198:	4610      	mov	r0, r2
 800419a:	f7fe f8a2 	bl	80022e2 <vListInsert>
 800419e:	e012      	b.n	80041c6 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80041a0:	687a      	ldr	r2, [r7, #4]
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d206      	bcs.n	80041b6 <prvInsertTimerInActiveList+0x62>
 80041a8:	68ba      	ldr	r2, [r7, #8]
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	429a      	cmp	r2, r3
 80041ae:	d302      	bcc.n	80041b6 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 80041b0:	2301      	movs	r3, #1
 80041b2:	617b      	str	r3, [r7, #20]
 80041b4:	e007      	b.n	80041c6 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80041b6:	4b07      	ldr	r3, [pc, #28]	@ (80041d4 <prvInsertTimerInActiveList+0x80>)
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3304      	adds	r3, #4
 80041be:	4619      	mov	r1, r3
 80041c0:	4610      	mov	r0, r2
 80041c2:	f7fe f88e 	bl	80022e2 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80041c6:	697b      	ldr	r3, [r7, #20]
    }
 80041c8:	4618      	mov	r0, r3
 80041ca:	3718      	adds	r7, #24
 80041cc:	46bd      	mov	sp, r7
 80041ce:	bd80      	pop	{r7, pc}
 80041d0:	20000204 	.word	0x20000204
 80041d4:	20000200 	.word	0x20000200

080041d8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80041d8:	b580      	push	{r7, lr}
 80041da:	b088      	sub	sp, #32
 80041dc:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80041de:	e0a9      	b.n	8004334 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f2c0 80a6 	blt.w	8004334 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80041e8:	693b      	ldr	r3, [r7, #16]
 80041ea:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	695b      	ldr	r3, [r3, #20]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d004      	beq.n	80041fe <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	3304      	adds	r3, #4
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7fe f8ab 	bl	8002354 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80041fe:	1d3b      	adds	r3, r7, #4
 8004200:	4618      	mov	r0, r3
 8004202:	f7ff ff87 	bl	8004114 <prvSampleTimeNow>
 8004206:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	3b01      	subs	r3, #1
 800420c:	2b08      	cmp	r3, #8
 800420e:	f200 808e 	bhi.w	800432e <prvProcessReceivedCommands+0x156>
 8004212:	a201      	add	r2, pc, #4	@ (adr r2, 8004218 <prvProcessReceivedCommands+0x40>)
 8004214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004218:	0800423d 	.word	0x0800423d
 800421c:	0800423d 	.word	0x0800423d
 8004220:	080042a5 	.word	0x080042a5
 8004224:	080042b9 	.word	0x080042b9
 8004228:	08004305 	.word	0x08004305
 800422c:	0800423d 	.word	0x0800423d
 8004230:	0800423d 	.word	0x0800423d
 8004234:	080042a5 	.word	0x080042a5
 8004238:	080042b9 	.word	0x080042b9
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004242:	f043 0301 	orr.w	r3, r3, #1
 8004246:	b2da      	uxtb	r2, r3
 8004248:	69fb      	ldr	r3, [r7, #28]
 800424a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800424e:	68fa      	ldr	r2, [r7, #12]
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	699b      	ldr	r3, [r3, #24]
 8004254:	18d1      	adds	r1, r2, r3
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	69f8      	ldr	r0, [r7, #28]
 800425c:	f7ff ff7a 	bl	8004154 <prvInsertTimerInActiveList>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d065      	beq.n	8004332 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004266:	69fb      	ldr	r3, [r7, #28]
 8004268:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800426c:	f003 0304 	and.w	r3, r3, #4
 8004270:	2b00      	cmp	r3, #0
 8004272:	d009      	beq.n	8004288 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	4413      	add	r3, r2
 800427c:	69ba      	ldr	r2, [r7, #24]
 800427e:	4619      	mov	r1, r3
 8004280:	69f8      	ldr	r0, [r7, #28]
 8004282:	f7ff fe6f 	bl	8003f64 <prvReloadTimer>
 8004286:	e008      	b.n	800429a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800428e:	f023 0301 	bic.w	r3, r3, #1
 8004292:	b2da      	uxtb	r2, r3
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	6a1b      	ldr	r3, [r3, #32]
 800429e:	69f8      	ldr	r0, [r7, #28]
 80042a0:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 80042a2:	e046      	b.n	8004332 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042aa:	f023 0301 	bic.w	r3, r3, #1
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	69fb      	ldr	r3, [r7, #28]
 80042b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80042b6:	e03d      	b.n	8004334 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80042be:	f043 0301 	orr.w	r3, r3, #1
 80042c2:	b2da      	uxtb	r2, r3
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80042d0:	69fb      	ldr	r3, [r7, #28]
 80042d2:	699b      	ldr	r3, [r3, #24]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d10b      	bne.n	80042f0 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80042d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042dc:	f383 8811 	msr	BASEPRI, r3
 80042e0:	f3bf 8f6f 	isb	sy
 80042e4:	f3bf 8f4f 	dsb	sy
 80042e8:	617b      	str	r3, [r7, #20]
    }
 80042ea:	bf00      	nop
 80042ec:	bf00      	nop
 80042ee:	e7fd      	b.n	80042ec <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	699a      	ldr	r2, [r3, #24]
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	18d1      	adds	r1, r2, r3
 80042f8:	69bb      	ldr	r3, [r7, #24]
 80042fa:	69ba      	ldr	r2, [r7, #24]
 80042fc:	69f8      	ldr	r0, [r7, #28]
 80042fe:	f7ff ff29 	bl	8004154 <prvInsertTimerInActiveList>
                        break;
 8004302:	e017      	b.n	8004334 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800430a:	f003 0302 	and.w	r3, r3, #2
 800430e:	2b00      	cmp	r3, #0
 8004310:	d103      	bne.n	800431a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004312:	69f8      	ldr	r0, [r7, #28]
 8004314:	f000 fc20 	bl	8004b58 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8004318:	e00c      	b.n	8004334 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004320:	f023 0301 	bic.w	r3, r3, #1
 8004324:	b2da      	uxtb	r2, r3
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800432c:	e002      	b.n	8004334 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 800432e:	bf00      	nop
 8004330:	e000      	b.n	8004334 <prvProcessReceivedCommands+0x15c>
                        break;
 8004332:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004334:	4b08      	ldr	r3, [pc, #32]	@ (8004358 <prvProcessReceivedCommands+0x180>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f107 0108 	add.w	r1, r7, #8
 800433c:	2200      	movs	r2, #0
 800433e:	4618      	mov	r0, r3
 8004340:	f7fe f93c 	bl	80025bc <xQueueReceive>
 8004344:	4603      	mov	r3, r0
 8004346:	2b00      	cmp	r3, #0
 8004348:	f47f af4a 	bne.w	80041e0 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 800434c:	bf00      	nop
 800434e:	bf00      	nop
 8004350:	3720      	adds	r7, #32
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
 8004356:	bf00      	nop
 8004358:	20000208 	.word	0x20000208

0800435c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004362:	e009      	b.n	8004378 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004364:	4b0e      	ldr	r3, [pc, #56]	@ (80043a0 <prvSwitchTimerLists+0x44>)
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	68db      	ldr	r3, [r3, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 800436e:	f04f 31ff 	mov.w	r1, #4294967295
 8004372:	6838      	ldr	r0, [r7, #0]
 8004374:	f7ff fe18 	bl	8003fa8 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004378:	4b09      	ldr	r3, [pc, #36]	@ (80043a0 <prvSwitchTimerLists+0x44>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	2b00      	cmp	r3, #0
 8004380:	d1f0      	bne.n	8004364 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004382:	4b07      	ldr	r3, [pc, #28]	@ (80043a0 <prvSwitchTimerLists+0x44>)
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8004388:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <prvSwitchTimerLists+0x48>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	4a04      	ldr	r2, [pc, #16]	@ (80043a0 <prvSwitchTimerLists+0x44>)
 800438e:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004390:	4a04      	ldr	r2, [pc, #16]	@ (80043a4 <prvSwitchTimerLists+0x48>)
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6013      	str	r3, [r2, #0]
    }
 8004396:	bf00      	nop
 8004398:	3708      	adds	r7, #8
 800439a:	46bd      	mov	sp, r7
 800439c:	bd80      	pop	{r7, pc}
 800439e:	bf00      	nop
 80043a0:	20000200 	.word	0x20000200
 80043a4:	20000204 	.word	0x20000204

080043a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 80043a8:	b580      	push	{r7, lr}
 80043aa:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 80043ac:	f000 f9e6 	bl	800477c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 80043b0:	4b12      	ldr	r3, [pc, #72]	@ (80043fc <prvCheckForValidListAndQueue+0x54>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d11d      	bne.n	80043f4 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 80043b8:	4811      	ldr	r0, [pc, #68]	@ (8004400 <prvCheckForValidListAndQueue+0x58>)
 80043ba:	f7fd ff41 	bl	8002240 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80043be:	4811      	ldr	r0, [pc, #68]	@ (8004404 <prvCheckForValidListAndQueue+0x5c>)
 80043c0:	f7fd ff3e 	bl	8002240 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80043c4:	4b10      	ldr	r3, [pc, #64]	@ (8004408 <prvCheckForValidListAndQueue+0x60>)
 80043c6:	4a0e      	ldr	r2, [pc, #56]	@ (8004400 <prvCheckForValidListAndQueue+0x58>)
 80043c8:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80043ca:	4b10      	ldr	r3, [pc, #64]	@ (800440c <prvCheckForValidListAndQueue+0x64>)
 80043cc:	4a0d      	ldr	r2, [pc, #52]	@ (8004404 <prvCheckForValidListAndQueue+0x5c>)
 80043ce:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80043d0:	2200      	movs	r2, #0
 80043d2:	210c      	movs	r1, #12
 80043d4:	200a      	movs	r0, #10
 80043d6:	f7fe f879 	bl	80024cc <xQueueGenericCreate>
 80043da:	4603      	mov	r3, r0
 80043dc:	4a07      	ldr	r2, [pc, #28]	@ (80043fc <prvCheckForValidListAndQueue+0x54>)
 80043de:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80043e0:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <prvCheckForValidListAndQueue+0x54>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d005      	beq.n	80043f4 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80043e8:	4b04      	ldr	r3, [pc, #16]	@ (80043fc <prvCheckForValidListAndQueue+0x54>)
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4908      	ldr	r1, [pc, #32]	@ (8004410 <prvCheckForValidListAndQueue+0x68>)
 80043ee:	4618      	mov	r0, r3
 80043f0:	f7fe fa86 	bl	8002900 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80043f4:	f000 f9f4 	bl	80047e0 <vPortExitCritical>
    }
 80043f8:	bf00      	nop
 80043fa:	bd80      	pop	{r7, pc}
 80043fc:	20000208 	.word	0x20000208
 8004400:	200001d8 	.word	0x200001d8
 8004404:	200001ec 	.word	0x200001ec
 8004408:	20000200 	.word	0x20000200
 800440c:	20000204 	.word	0x20000204
 8004410:	08007158 	.word	0x08007158

08004414 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3b04      	subs	r3, #4
 8004424:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800442c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	3b04      	subs	r3, #4
 8004432:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	f023 0201 	bic.w	r2, r3, #1
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	3b04      	subs	r3, #4
 8004442:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004444:	4a0c      	ldr	r2, [pc, #48]	@ (8004478 <pxPortInitialiseStack+0x64>)
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	3b14      	subs	r3, #20
 800444e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004450:	687a      	ldr	r2, [r7, #4]
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	3b04      	subs	r3, #4
 800445a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f06f 0202 	mvn.w	r2, #2
 8004462:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	3b20      	subs	r3, #32
 8004468:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800446a:	68fb      	ldr	r3, [r7, #12]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr
 8004478:	0800447d 	.word	0x0800447d

0800447c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004482:	2300      	movs	r3, #0
 8004484:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8004486:	4b13      	ldr	r3, [pc, #76]	@ (80044d4 <prvTaskExitError+0x58>)
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800448e:	d00b      	beq.n	80044a8 <prvTaskExitError+0x2c>
        __asm volatile
 8004490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004494:	f383 8811 	msr	BASEPRI, r3
 8004498:	f3bf 8f6f 	isb	sy
 800449c:	f3bf 8f4f 	dsb	sy
 80044a0:	60fb      	str	r3, [r7, #12]
    }
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	e7fd      	b.n	80044a4 <prvTaskExitError+0x28>
        __asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	60bb      	str	r3, [r7, #8]
    }
 80044ba:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80044bc:	bf00      	nop
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d0fc      	beq.n	80044be <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80044c4:	bf00      	nop
 80044c6:	bf00      	nop
 80044c8:	3714      	adds	r7, #20
 80044ca:	46bd      	mov	sp, r7
 80044cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d0:	4770      	bx	lr
 80044d2:	bf00      	nop
 80044d4:	20000010 	.word	0x20000010
	...

080044e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80044e0:	4b07      	ldr	r3, [pc, #28]	@ (8004500 <pxCurrentTCBConst2>)
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	6808      	ldr	r0, [r1, #0]
 80044e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80044ea:	f380 8809 	msr	PSP, r0
 80044ee:	f3bf 8f6f 	isb	sy
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f380 8811 	msr	BASEPRI, r0
 80044fa:	4770      	bx	lr
 80044fc:	f3af 8000 	nop.w

08004500 <pxCurrentTCBConst2>:
 8004500:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004504:	bf00      	nop
 8004506:	bf00      	nop

08004508 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004508:	4808      	ldr	r0, [pc, #32]	@ (800452c <prvPortStartFirstTask+0x24>)
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	6800      	ldr	r0, [r0, #0]
 800450e:	f380 8808 	msr	MSP, r0
 8004512:	f04f 0000 	mov.w	r0, #0
 8004516:	f380 8814 	msr	CONTROL, r0
 800451a:	b662      	cpsie	i
 800451c:	b661      	cpsie	f
 800451e:	f3bf 8f4f 	dsb	sy
 8004522:	f3bf 8f6f 	isb	sy
 8004526:	df00      	svc	0
 8004528:	bf00      	nop
 800452a:	0000      	.short	0x0000
 800452c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004530:	bf00      	nop
 8004532:	bf00      	nop

08004534 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800453a:	4b47      	ldr	r3, [pc, #284]	@ (8004658 <xPortStartScheduler+0x124>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a47      	ldr	r2, [pc, #284]	@ (800465c <xPortStartScheduler+0x128>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d10b      	bne.n	800455c <xPortStartScheduler+0x28>
        __asm volatile
 8004544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004548:	f383 8811 	msr	BASEPRI, r3
 800454c:	f3bf 8f6f 	isb	sy
 8004550:	f3bf 8f4f 	dsb	sy
 8004554:	613b      	str	r3, [r7, #16]
    }
 8004556:	bf00      	nop
 8004558:	bf00      	nop
 800455a:	e7fd      	b.n	8004558 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800455c:	4b3e      	ldr	r3, [pc, #248]	@ (8004658 <xPortStartScheduler+0x124>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a3f      	ldr	r2, [pc, #252]	@ (8004660 <xPortStartScheduler+0x12c>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d10b      	bne.n	800457e <xPortStartScheduler+0x4a>
        __asm volatile
 8004566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800456a:	f383 8811 	msr	BASEPRI, r3
 800456e:	f3bf 8f6f 	isb	sy
 8004572:	f3bf 8f4f 	dsb	sy
 8004576:	60fb      	str	r3, [r7, #12]
    }
 8004578:	bf00      	nop
 800457a:	bf00      	nop
 800457c:	e7fd      	b.n	800457a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800457e:	4b39      	ldr	r3, [pc, #228]	@ (8004664 <xPortStartScheduler+0x130>)
 8004580:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	b2db      	uxtb	r3, r3
 8004588:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	22ff      	movs	r2, #255	@ 0xff
 800458e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	b2db      	uxtb	r3, r3
 8004596:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	b2db      	uxtb	r3, r3
 800459c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b31      	ldr	r3, [pc, #196]	@ (8004668 <xPortStartScheduler+0x134>)
 80045a4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045a6:	4b31      	ldr	r3, [pc, #196]	@ (800466c <xPortStartScheduler+0x138>)
 80045a8:	2207      	movs	r2, #7
 80045aa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ac:	e009      	b.n	80045c2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 80045ae:	4b2f      	ldr	r3, [pc, #188]	@ (800466c <xPortStartScheduler+0x138>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	3b01      	subs	r3, #1
 80045b4:	4a2d      	ldr	r2, [pc, #180]	@ (800466c <xPortStartScheduler+0x138>)
 80045b6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045b8:	78fb      	ldrb	r3, [r7, #3]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	005b      	lsls	r3, r3, #1
 80045be:	b2db      	uxtb	r3, r3
 80045c0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045c2:	78fb      	ldrb	r3, [r7, #3]
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045ca:	2b80      	cmp	r3, #128	@ 0x80
 80045cc:	d0ef      	beq.n	80045ae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045ce:	4b27      	ldr	r3, [pc, #156]	@ (800466c <xPortStartScheduler+0x138>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1c3 0307 	rsb	r3, r3, #7
 80045d6:	2b04      	cmp	r3, #4
 80045d8:	d00b      	beq.n	80045f2 <xPortStartScheduler+0xbe>
        __asm volatile
 80045da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80045de:	f383 8811 	msr	BASEPRI, r3
 80045e2:	f3bf 8f6f 	isb	sy
 80045e6:	f3bf 8f4f 	dsb	sy
 80045ea:	60bb      	str	r3, [r7, #8]
    }
 80045ec:	bf00      	nop
 80045ee:	bf00      	nop
 80045f0:	e7fd      	b.n	80045ee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80045f2:	4b1e      	ldr	r3, [pc, #120]	@ (800466c <xPortStartScheduler+0x138>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	021b      	lsls	r3, r3, #8
 80045f8:	4a1c      	ldr	r2, [pc, #112]	@ (800466c <xPortStartScheduler+0x138>)
 80045fa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80045fc:	4b1b      	ldr	r3, [pc, #108]	@ (800466c <xPortStartScheduler+0x138>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004604:	4a19      	ldr	r2, [pc, #100]	@ (800466c <xPortStartScheduler+0x138>)
 8004606:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	697b      	ldr	r3, [r7, #20]
 800460e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004610:	4b17      	ldr	r3, [pc, #92]	@ (8004670 <xPortStartScheduler+0x13c>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a16      	ldr	r2, [pc, #88]	@ (8004670 <xPortStartScheduler+0x13c>)
 8004616:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800461a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800461c:	4b14      	ldr	r3, [pc, #80]	@ (8004670 <xPortStartScheduler+0x13c>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4a13      	ldr	r2, [pc, #76]	@ (8004670 <xPortStartScheduler+0x13c>)
 8004622:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004626:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004628:	f000 f968 	bl	80048fc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800462c:	4b11      	ldr	r3, [pc, #68]	@ (8004674 <xPortStartScheduler+0x140>)
 800462e:	2200      	movs	r2, #0
 8004630:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004632:	f000 f987 	bl	8004944 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004636:	4b10      	ldr	r3, [pc, #64]	@ (8004678 <xPortStartScheduler+0x144>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a0f      	ldr	r2, [pc, #60]	@ (8004678 <xPortStartScheduler+0x144>)
 800463c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004640:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004642:	f7ff ff61 	bl	8004508 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004646:	f7fe ff09 	bl	800345c <vTaskSwitchContext>
    prvTaskExitError();
 800464a:	f7ff ff17 	bl	800447c <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	e000ed00 	.word	0xe000ed00
 800465c:	410fc271 	.word	0x410fc271
 8004660:	410fc270 	.word	0x410fc270
 8004664:	e000e400 	.word	0xe000e400
 8004668:	20000214 	.word	0x20000214
 800466c:	20000218 	.word	0x20000218
 8004670:	e000ed20 	.word	0xe000ed20
 8004674:	20000010 	.word	0x20000010
 8004678:	e000ef34 	.word	0xe000ef34

0800467c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004682:	4b38      	ldr	r3, [pc, #224]	@ (8004764 <vInitPrioGroupValue+0xe8>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a38      	ldr	r2, [pc, #224]	@ (8004768 <vInitPrioGroupValue+0xec>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d10b      	bne.n	80046a4 <vInitPrioGroupValue+0x28>
        __asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	613b      	str	r3, [r7, #16]
    }
 800469e:	bf00      	nop
 80046a0:	bf00      	nop
 80046a2:	e7fd      	b.n	80046a0 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046a4:	4b2f      	ldr	r3, [pc, #188]	@ (8004764 <vInitPrioGroupValue+0xe8>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a30      	ldr	r2, [pc, #192]	@ (800476c <vInitPrioGroupValue+0xf0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d10b      	bne.n	80046c6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	60fb      	str	r3, [r7, #12]
    }
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046c6:	4b2a      	ldr	r3, [pc, #168]	@ (8004770 <vInitPrioGroupValue+0xf4>)
 80046c8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	781b      	ldrb	r3, [r3, #0]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046d2:	697b      	ldr	r3, [r7, #20]
 80046d4:	22ff      	movs	r2, #255	@ 0xff
 80046d6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	b2db      	uxtb	r3, r3
 80046de:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80046e8:	b2da      	uxtb	r2, r3
 80046ea:	4b22      	ldr	r3, [pc, #136]	@ (8004774 <vInitPrioGroupValue+0xf8>)
 80046ec:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046ee:	4b22      	ldr	r3, [pc, #136]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 80046f0:	2207      	movs	r2, #7
 80046f2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f4:	e009      	b.n	800470a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	3b01      	subs	r3, #1
 80046fc:	4a1e      	ldr	r2, [pc, #120]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 80046fe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004700:	78fb      	ldrb	r3, [r7, #3]
 8004702:	b2db      	uxtb	r3, r3
 8004704:	005b      	lsls	r3, r3, #1
 8004706:	b2db      	uxtb	r3, r3
 8004708:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800470a:	78fb      	ldrb	r3, [r7, #3]
 800470c:	b2db      	uxtb	r3, r3
 800470e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004712:	2b80      	cmp	r3, #128	@ 0x80
 8004714:	d0ef      	beq.n	80046f6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004716:	4b18      	ldr	r3, [pc, #96]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f1c3 0307 	rsb	r3, r3, #7
 800471e:	2b04      	cmp	r3, #4
 8004720:	d00b      	beq.n	800473a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	60bb      	str	r3, [r7, #8]
    }
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800473a:	4b0f      	ldr	r3, [pc, #60]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	021b      	lsls	r3, r3, #8
 8004740:	4a0d      	ldr	r2, [pc, #52]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 8004742:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004744:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800474c:	4a0a      	ldr	r2, [pc, #40]	@ (8004778 <vInitPrioGroupValue+0xfc>)
 800474e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	b2da      	uxtb	r2, r3
 8004754:	697b      	ldr	r3, [r7, #20]
 8004756:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004758:	bf00      	nop
 800475a:	371c      	adds	r7, #28
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr
 8004764:	e000ed00 	.word	0xe000ed00
 8004768:	410fc271 	.word	0x410fc271
 800476c:	410fc270 	.word	0x410fc270
 8004770:	e000e400 	.word	0xe000e400
 8004774:	20000214 	.word	0x20000214
 8004778:	20000218 	.word	0x20000218

0800477c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
        __asm volatile
 8004782:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004786:	f383 8811 	msr	BASEPRI, r3
 800478a:	f3bf 8f6f 	isb	sy
 800478e:	f3bf 8f4f 	dsb	sy
 8004792:	607b      	str	r3, [r7, #4]
    }
 8004794:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004796:	4b10      	ldr	r3, [pc, #64]	@ (80047d8 <vPortEnterCritical+0x5c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	3301      	adds	r3, #1
 800479c:	4a0e      	ldr	r2, [pc, #56]	@ (80047d8 <vPortEnterCritical+0x5c>)
 800479e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 80047a0:	4b0d      	ldr	r3, [pc, #52]	@ (80047d8 <vPortEnterCritical+0x5c>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d110      	bne.n	80047ca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <vPortEnterCritical+0x60>)
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d00b      	beq.n	80047ca <vPortEnterCritical+0x4e>
        __asm volatile
 80047b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	603b      	str	r3, [r7, #0]
    }
 80047c4:	bf00      	nop
 80047c6:	bf00      	nop
 80047c8:	e7fd      	b.n	80047c6 <vPortEnterCritical+0x4a>
    }
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	20000010 	.word	0x20000010
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80047e6:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <vPortExitCritical+0x50>)
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10b      	bne.n	8004806 <vPortExitCritical+0x26>
        __asm volatile
 80047ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047f2:	f383 8811 	msr	BASEPRI, r3
 80047f6:	f3bf 8f6f 	isb	sy
 80047fa:	f3bf 8f4f 	dsb	sy
 80047fe:	607b      	str	r3, [r7, #4]
    }
 8004800:	bf00      	nop
 8004802:	bf00      	nop
 8004804:	e7fd      	b.n	8004802 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004806:	4b0a      	ldr	r3, [pc, #40]	@ (8004830 <vPortExitCritical+0x50>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	3b01      	subs	r3, #1
 800480c:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <vPortExitCritical+0x50>)
 800480e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004810:	4b07      	ldr	r3, [pc, #28]	@ (8004830 <vPortExitCritical+0x50>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d105      	bne.n	8004824 <vPortExitCritical+0x44>
 8004818:	2300      	movs	r3, #0
 800481a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004822:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004824:	bf00      	nop
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr
 8004830:	20000010 	.word	0x20000010
	...

08004840 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004840:	f3ef 8009 	mrs	r0, PSP
 8004844:	f3bf 8f6f 	isb	sy
 8004848:	4b15      	ldr	r3, [pc, #84]	@ (80048a0 <pxCurrentTCBConst>)
 800484a:	681a      	ldr	r2, [r3, #0]
 800484c:	f01e 0f10 	tst.w	lr, #16
 8004850:	bf08      	it	eq
 8004852:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004856:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485a:	6010      	str	r0, [r2, #0]
 800485c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004860:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004864:	f380 8811 	msr	BASEPRI, r0
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f7fe fdf4 	bl	800345c <vTaskSwitchContext>
 8004874:	f04f 0000 	mov.w	r0, #0
 8004878:	f380 8811 	msr	BASEPRI, r0
 800487c:	bc09      	pop	{r0, r3}
 800487e:	6819      	ldr	r1, [r3, #0]
 8004880:	6808      	ldr	r0, [r1, #0]
 8004882:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004886:	f01e 0f10 	tst.w	lr, #16
 800488a:	bf08      	it	eq
 800488c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004890:	f380 8809 	msr	PSP, r0
 8004894:	f3bf 8f6f 	isb	sy
 8004898:	4770      	bx	lr
 800489a:	bf00      	nop
 800489c:	f3af 8000 	nop.w

080048a0 <pxCurrentTCBConst>:
 80048a0:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop

080048a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
        __asm volatile
 80048ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b2:	f383 8811 	msr	BASEPRI, r3
 80048b6:	f3bf 8f6f 	isb	sy
 80048ba:	f3bf 8f4f 	dsb	sy
 80048be:	607b      	str	r3, [r7, #4]
    }
 80048c0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80048c2:	f002 f8b9 	bl	8006a38 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80048c6:	f7fe fcad 	bl	8003224 <xTaskIncrementTick>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d006      	beq.n	80048de <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80048d0:	f002 f910 	bl	8006af4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048d4:	4b08      	ldr	r3, [pc, #32]	@ (80048f8 <SysTick_Handler+0x50>)
 80048d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048da:	601a      	str	r2, [r3, #0]
 80048dc:	e001      	b.n	80048e2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80048de:	f002 f8ed 	bl	8006abc <SEGGER_SYSVIEW_RecordExitISR>
 80048e2:	2300      	movs	r3, #0
 80048e4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	f383 8811 	msr	BASEPRI, r3
    }
 80048ec:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	e000ed04 	.word	0xe000ed04

080048fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80048fc:	b480      	push	{r7}
 80048fe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004900:	4b0b      	ldr	r3, [pc, #44]	@ (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004902:	2200      	movs	r2, #0
 8004904:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004906:	4b0b      	ldr	r3, [pc, #44]	@ (8004934 <vPortSetupTimerInterrupt+0x38>)
 8004908:	2200      	movs	r2, #0
 800490a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800490c:	4b0a      	ldr	r3, [pc, #40]	@ (8004938 <vPortSetupTimerInterrupt+0x3c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a0a      	ldr	r2, [pc, #40]	@ (800493c <vPortSetupTimerInterrupt+0x40>)
 8004912:	fba2 2303 	umull	r2, r3, r2, r3
 8004916:	099b      	lsrs	r3, r3, #6
 8004918:	4a09      	ldr	r2, [pc, #36]	@ (8004940 <vPortSetupTimerInterrupt+0x44>)
 800491a:	3b01      	subs	r3, #1
 800491c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800491e:	4b04      	ldr	r3, [pc, #16]	@ (8004930 <vPortSetupTimerInterrupt+0x34>)
 8004920:	2207      	movs	r2, #7
 8004922:	601a      	str	r2, [r3, #0]
}
 8004924:	bf00      	nop
 8004926:	46bd      	mov	sp, r7
 8004928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492c:	4770      	bx	lr
 800492e:	bf00      	nop
 8004930:	e000e010 	.word	0xe000e010
 8004934:	e000e018 	.word	0xe000e018
 8004938:	20000000 	.word	0x20000000
 800493c:	10624dd3 	.word	0x10624dd3
 8004940:	e000e014 	.word	0xe000e014

08004944 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004944:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004954 <vPortEnableVFP+0x10>
 8004948:	6801      	ldr	r1, [r0, #0]
 800494a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800494e:	6001      	str	r1, [r0, #0]
 8004950:	4770      	bx	lr
 8004952:	0000      	.short	0x0000
 8004954:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004958:	bf00      	nop
 800495a:	bf00      	nop

0800495c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004962:	f3ef 8305 	mrs	r3, IPSR
 8004966:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	2b0f      	cmp	r3, #15
 800496c:	d915      	bls.n	800499a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800496e:	4a18      	ldr	r2, [pc, #96]	@ (80049d0 <vPortValidateInterruptPriority+0x74>)
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	4413      	add	r3, r2
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004978:	4b16      	ldr	r3, [pc, #88]	@ (80049d4 <vPortValidateInterruptPriority+0x78>)
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	7afa      	ldrb	r2, [r7, #11]
 800497e:	429a      	cmp	r2, r3
 8004980:	d20b      	bcs.n	800499a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004986:	f383 8811 	msr	BASEPRI, r3
 800498a:	f3bf 8f6f 	isb	sy
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	607b      	str	r3, [r7, #4]
    }
 8004994:	bf00      	nop
 8004996:	bf00      	nop
 8004998:	e7fd      	b.n	8004996 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800499a:	4b0f      	ldr	r3, [pc, #60]	@ (80049d8 <vPortValidateInterruptPriority+0x7c>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80049a2:	4b0e      	ldr	r3, [pc, #56]	@ (80049dc <vPortValidateInterruptPriority+0x80>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90b      	bls.n	80049c2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	603b      	str	r3, [r7, #0]
    }
 80049bc:	bf00      	nop
 80049be:	bf00      	nop
 80049c0:	e7fd      	b.n	80049be <vPortValidateInterruptPriority+0x62>
    }
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
 80049ce:	bf00      	nop
 80049d0:	e000e3f0 	.word	0xe000e3f0
 80049d4:	20000214 	.word	0x20000214
 80049d8:	e000ed0c 	.word	0xe000ed0c
 80049dc:	20000218 	.word	0x20000218

080049e0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b08a      	sub	sp, #40	@ 0x28
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80049e8:	2300      	movs	r3, #0
 80049ea:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80049ec:	f7fe faea 	bl	8002fc4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80049f0:	4b54      	ldr	r3, [pc, #336]	@ (8004b44 <pvPortMalloc+0x164>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80049f8:	f000 f90c 	bl	8004c14 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d012      	beq.n	8004a28 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004a02:	2208      	movs	r2, #8
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	f003 0307 	and.w	r3, r3, #7
 8004a0a:	1ad3      	subs	r3, r2, r3
 8004a0c:	3308      	adds	r3, #8
 8004a0e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004a10:	69bb      	ldr	r3, [r7, #24]
 8004a12:	43db      	mvns	r3, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	429a      	cmp	r2, r3
 8004a18:	d804      	bhi.n	8004a24 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	4413      	add	r3, r2
 8004a20:	607b      	str	r3, [r7, #4]
 8004a22:	e001      	b.n	8004a28 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004a24:	2300      	movs	r3, #0
 8004a26:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	db71      	blt.n	8004b12 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d06e      	beq.n	8004b12 <pvPortMalloc+0x132>
 8004a34:	4b44      	ldr	r3, [pc, #272]	@ (8004b48 <pvPortMalloc+0x168>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	687a      	ldr	r2, [r7, #4]
 8004a3a:	429a      	cmp	r2, r3
 8004a3c:	d869      	bhi.n	8004b12 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8004a3e:	4b43      	ldr	r3, [pc, #268]	@ (8004b4c <pvPortMalloc+0x16c>)
 8004a40:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004a42:	4b42      	ldr	r3, [pc, #264]	@ (8004b4c <pvPortMalloc+0x16c>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a48:	e004      	b.n	8004a54 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004a54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d903      	bls.n	8004a66 <pvPortMalloc+0x86>
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d1f1      	bne.n	8004a4a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004a66:	4b37      	ldr	r3, [pc, #220]	@ (8004b44 <pvPortMalloc+0x164>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a6c:	429a      	cmp	r2, r3
 8004a6e:	d050      	beq.n	8004b12 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	2208      	movs	r2, #8
 8004a76:	4413      	add	r3, r2
 8004a78:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	6a3b      	ldr	r3, [r7, #32]
 8004a80:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a84:	685a      	ldr	r2, [r3, #4]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	1ad2      	subs	r2, r2, r3
 8004a8a:	2308      	movs	r3, #8
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d920      	bls.n	8004ad4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a92:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00b      	beq.n	8004abc <pvPortMalloc+0xdc>
        __asm volatile
 8004aa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aa8:	f383 8811 	msr	BASEPRI, r3
 8004aac:	f3bf 8f6f 	isb	sy
 8004ab0:	f3bf 8f4f 	dsb	sy
 8004ab4:	613b      	str	r3, [r7, #16]
    }
 8004ab6:	bf00      	nop
 8004ab8:	bf00      	nop
 8004aba:	e7fd      	b.n	8004ab8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004abc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004abe:	685a      	ldr	r2, [r3, #4]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1ad2      	subs	r2, r2, r3
 8004ac4:	697b      	ldr	r3, [r7, #20]
 8004ac6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004aca:	687a      	ldr	r2, [r7, #4]
 8004acc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ace:	6978      	ldr	r0, [r7, #20]
 8004ad0:	f000 f8fc 	bl	8004ccc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ad4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b48 <pvPortMalloc+0x168>)
 8004ad6:	681a      	ldr	r2, [r3, #0]
 8004ad8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	1ad3      	subs	r3, r2, r3
 8004ade:	4a1a      	ldr	r2, [pc, #104]	@ (8004b48 <pvPortMalloc+0x168>)
 8004ae0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ae2:	4b19      	ldr	r3, [pc, #100]	@ (8004b48 <pvPortMalloc+0x168>)
 8004ae4:	681a      	ldr	r2, [r3, #0]
 8004ae6:	4b1a      	ldr	r3, [pc, #104]	@ (8004b50 <pvPortMalloc+0x170>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	429a      	cmp	r2, r3
 8004aec:	d203      	bcs.n	8004af6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004aee:	4b16      	ldr	r3, [pc, #88]	@ (8004b48 <pvPortMalloc+0x168>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	4a17      	ldr	r2, [pc, #92]	@ (8004b50 <pvPortMalloc+0x170>)
 8004af4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004afe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b00:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2200      	movs	r2, #0
 8004b06:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004b08:	4b12      	ldr	r3, [pc, #72]	@ (8004b54 <pvPortMalloc+0x174>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	3301      	adds	r3, #1
 8004b0e:	4a11      	ldr	r2, [pc, #68]	@ (8004b54 <pvPortMalloc+0x174>)
 8004b10:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004b12:	f7fe fa65 	bl	8002fe0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d00b      	beq.n	8004b38 <pvPortMalloc+0x158>
        __asm volatile
 8004b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b24:	f383 8811 	msr	BASEPRI, r3
 8004b28:	f3bf 8f6f 	isb	sy
 8004b2c:	f3bf 8f4f 	dsb	sy
 8004b30:	60fb      	str	r3, [r7, #12]
    }
 8004b32:	bf00      	nop
 8004b34:	bf00      	nop
 8004b36:	e7fd      	b.n	8004b34 <pvPortMalloc+0x154>
    return pvReturn;
 8004b38:	69fb      	ldr	r3, [r7, #28]
}
 8004b3a:	4618      	mov	r0, r3
 8004b3c:	3728      	adds	r7, #40	@ 0x28
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}
 8004b42:	bf00      	nop
 8004b44:	2004b224 	.word	0x2004b224
 8004b48:	2004b228 	.word	0x2004b228
 8004b4c:	2004b21c 	.word	0x2004b21c
 8004b50:	2004b22c 	.word	0x2004b22c
 8004b54:	2004b230 	.word	0x2004b230

08004b58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b086      	sub	sp, #24
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d04b      	beq.n	8004c02 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	425b      	negs	r3, r3
 8004b6e:	697a      	ldr	r2, [r7, #20]
 8004b70:	4413      	add	r3, r2
 8004b72:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004b74:	697b      	ldr	r3, [r7, #20]
 8004b76:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	db0b      	blt.n	8004b98 <vPortFree+0x40>
        __asm volatile
 8004b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b84:	f383 8811 	msr	BASEPRI, r3
 8004b88:	f3bf 8f6f 	isb	sy
 8004b8c:	f3bf 8f4f 	dsb	sy
 8004b90:	60fb      	str	r3, [r7, #12]
    }
 8004b92:	bf00      	nop
 8004b94:	bf00      	nop
 8004b96:	e7fd      	b.n	8004b94 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d00b      	beq.n	8004bb8 <vPortFree+0x60>
        __asm volatile
 8004ba0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ba4:	f383 8811 	msr	BASEPRI, r3
 8004ba8:	f3bf 8f6f 	isb	sy
 8004bac:	f3bf 8f4f 	dsb	sy
 8004bb0:	60bb      	str	r3, [r7, #8]
    }
 8004bb2:	bf00      	nop
 8004bb4:	bf00      	nop
 8004bb6:	e7fd      	b.n	8004bb4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	685b      	ldr	r3, [r3, #4]
 8004bbc:	0fdb      	lsrs	r3, r3, #31
 8004bbe:	f003 0301 	and.w	r3, r3, #1
 8004bc2:	b2db      	uxtb	r3, r3
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d01c      	beq.n	8004c02 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004bc8:	693b      	ldr	r3, [r7, #16]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d118      	bne.n	8004c02 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	685b      	ldr	r3, [r3, #4]
 8004bd4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004bdc:	f7fe f9f2 	bl	8002fc4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	4b09      	ldr	r3, [pc, #36]	@ (8004c0c <vPortFree+0xb4>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	4413      	add	r3, r2
 8004bea:	4a08      	ldr	r2, [pc, #32]	@ (8004c0c <vPortFree+0xb4>)
 8004bec:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004bee:	6938      	ldr	r0, [r7, #16]
 8004bf0:	f000 f86c 	bl	8004ccc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004bf4:	4b06      	ldr	r3, [pc, #24]	@ (8004c10 <vPortFree+0xb8>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	4a05      	ldr	r2, [pc, #20]	@ (8004c10 <vPortFree+0xb8>)
 8004bfc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004bfe:	f7fe f9ef 	bl	8002fe0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004c02:	bf00      	nop
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	2004b228 	.word	0x2004b228
 8004c10:	2004b234 	.word	0x2004b234

08004c14 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004c1a:	f44f 2396 	mov.w	r3, #307200	@ 0x4b000
 8004c1e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c20:	4b25      	ldr	r3, [pc, #148]	@ (8004cb8 <prvHeapInit+0xa4>)
 8004c22:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	f003 0307 	and.w	r3, r3, #7
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d00c      	beq.n	8004c48 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	3307      	adds	r3, #7
 8004c32:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	f023 0307 	bic.w	r3, r3, #7
 8004c3a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004c3c:	68ba      	ldr	r2, [r7, #8]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	4a1d      	ldr	r2, [pc, #116]	@ (8004cb8 <prvHeapInit+0xa4>)
 8004c44:	4413      	add	r3, r2
 8004c46:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004c4c:	4a1b      	ldr	r2, [pc, #108]	@ (8004cbc <prvHeapInit+0xa8>)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004c52:	4b1a      	ldr	r3, [pc, #104]	@ (8004cbc <prvHeapInit+0xa8>)
 8004c54:	2200      	movs	r2, #0
 8004c56:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68ba      	ldr	r2, [r7, #8]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004c60:	2208      	movs	r2, #8
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	1a9b      	subs	r3, r3, r2
 8004c66:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	f023 0307 	bic.w	r3, r3, #7
 8004c6e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a13      	ldr	r2, [pc, #76]	@ (8004cc0 <prvHeapInit+0xac>)
 8004c74:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004c76:	4b12      	ldr	r3, [pc, #72]	@ (8004cc0 <prvHeapInit+0xac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004c7e:	4b10      	ldr	r3, [pc, #64]	@ (8004cc0 <prvHeapInit+0xac>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	2200      	movs	r2, #0
 8004c84:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004c8a:	683b      	ldr	r3, [r7, #0]
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	1ad2      	subs	r2, r2, r3
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c94:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <prvHeapInit+0xac>)
 8004c96:	681a      	ldr	r2, [r3, #0]
 8004c98:	683b      	ldr	r3, [r7, #0]
 8004c9a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	4a08      	ldr	r2, [pc, #32]	@ (8004cc4 <prvHeapInit+0xb0>)
 8004ca2:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	4a07      	ldr	r2, [pc, #28]	@ (8004cc8 <prvHeapInit+0xb4>)
 8004caa:	6013      	str	r3, [r2, #0]
}
 8004cac:	bf00      	nop
 8004cae:	3714      	adds	r7, #20
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb6:	4770      	bx	lr
 8004cb8:	2000021c 	.word	0x2000021c
 8004cbc:	2004b21c 	.word	0x2004b21c
 8004cc0:	2004b224 	.word	0x2004b224
 8004cc4:	2004b22c 	.word	0x2004b22c
 8004cc8:	2004b228 	.word	0x2004b228

08004ccc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b085      	sub	sp, #20
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004cd4:	4b28      	ldr	r3, [pc, #160]	@ (8004d78 <prvInsertBlockIntoFreeList+0xac>)
 8004cd6:	60fb      	str	r3, [r7, #12]
 8004cd8:	e002      	b.n	8004ce0 <prvInsertBlockIntoFreeList+0x14>
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d8f7      	bhi.n	8004cda <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	685b      	ldr	r3, [r3, #4]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d108      	bne.n	8004d0e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	685a      	ldr	r2, [r3, #4]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	441a      	add	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	441a      	add	r2, r3
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	429a      	cmp	r2, r3
 8004d20:	d118      	bne.n	8004d54 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681a      	ldr	r2, [r3, #0]
 8004d26:	4b15      	ldr	r3, [pc, #84]	@ (8004d7c <prvInsertBlockIntoFreeList+0xb0>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d00d      	beq.n	8004d4a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	441a      	add	r2, r3
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	601a      	str	r2, [r3, #0]
 8004d48:	e008      	b.n	8004d5c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004d4a:	4b0c      	ldr	r3, [pc, #48]	@ (8004d7c <prvInsertBlockIntoFreeList+0xb0>)
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e003      	b.n	8004d5c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	429a      	cmp	r2, r3
 8004d62:	d002      	beq.n	8004d6a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	687a      	ldr	r2, [r7, #4]
 8004d68:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004d6a:	bf00      	nop
 8004d6c:	3714      	adds	r7, #20
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
 8004d76:	bf00      	nop
 8004d78:	2004b21c 	.word	0x2004b21c
 8004d7c:	2004b224 	.word	0x2004b224

08004d80 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004d84:	4803      	ldr	r0, [pc, #12]	@ (8004d94 <_cbSendSystemDesc+0x14>)
 8004d86:	f001 fe01 	bl	800698c <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004d8a:	4803      	ldr	r0, [pc, #12]	@ (8004d98 <_cbSendSystemDesc+0x18>)
 8004d8c:	f001 fdfe 	bl	800698c <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d90:	bf00      	nop
 8004d92:	bd80      	pop	{r7, pc}
 8004d94:	08007160 	.word	0x08007160
 8004d98:	0800719c 	.word	0x0800719c

08004d9c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004da0:	4b06      	ldr	r3, [pc, #24]	@ (8004dbc <SEGGER_SYSVIEW_Conf+0x20>)
 8004da2:	6818      	ldr	r0, [r3, #0]
 8004da4:	4b05      	ldr	r3, [pc, #20]	@ (8004dbc <SEGGER_SYSVIEW_Conf+0x20>)
 8004da6:	6819      	ldr	r1, [r3, #0]
 8004da8:	4b05      	ldr	r3, [pc, #20]	@ (8004dc0 <SEGGER_SYSVIEW_Conf+0x24>)
 8004daa:	4a06      	ldr	r2, [pc, #24]	@ (8004dc4 <SEGGER_SYSVIEW_Conf+0x28>)
 8004dac:	f001 f96c 	bl	8006088 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004db0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004db4:	f001 f9ac 	bl	8006110 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004db8:	bf00      	nop
 8004dba:	bd80      	pop	{r7, pc}
 8004dbc:	20000000 	.word	0x20000000
 8004dc0:	08004d81 	.word	0x08004d81
 8004dc4:	0800723c 	.word	0x0800723c

08004dc8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004dc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dca:	b085      	sub	sp, #20
 8004dcc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004dce:	2300      	movs	r3, #0
 8004dd0:	607b      	str	r3, [r7, #4]
 8004dd2:	e033      	b.n	8004e3c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004dd4:	491e      	ldr	r1, [pc, #120]	@ (8004e50 <_cbSendTaskList+0x88>)
 8004dd6:	687a      	ldr	r2, [r7, #4]
 8004dd8:	4613      	mov	r3, r2
 8004dda:	009b      	lsls	r3, r3, #2
 8004ddc:	4413      	add	r3, r2
 8004dde:	009b      	lsls	r3, r3, #2
 8004de0:	440b      	add	r3, r1
 8004de2:	6818      	ldr	r0, [r3, #0]
 8004de4:	491a      	ldr	r1, [pc, #104]	@ (8004e50 <_cbSendTaskList+0x88>)
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3304      	adds	r3, #4
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	4c16      	ldr	r4, [pc, #88]	@ (8004e50 <_cbSendTaskList+0x88>)
 8004df8:	687a      	ldr	r2, [r7, #4]
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4423      	add	r3, r4
 8004e04:	3308      	adds	r3, #8
 8004e06:	681c      	ldr	r4, [r3, #0]
 8004e08:	4d11      	ldr	r5, [pc, #68]	@ (8004e50 <_cbSendTaskList+0x88>)
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	4613      	mov	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	4413      	add	r3, r2
 8004e12:	009b      	lsls	r3, r3, #2
 8004e14:	442b      	add	r3, r5
 8004e16:	330c      	adds	r3, #12
 8004e18:	681d      	ldr	r5, [r3, #0]
 8004e1a:	4e0d      	ldr	r6, [pc, #52]	@ (8004e50 <_cbSendTaskList+0x88>)
 8004e1c:	687a      	ldr	r2, [r7, #4]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4433      	add	r3, r6
 8004e28:	3310      	adds	r3, #16
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	9300      	str	r3, [sp, #0]
 8004e2e:	462b      	mov	r3, r5
 8004e30:	4622      	mov	r2, r4
 8004e32:	f000 f979 	bl	8005128 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	3301      	adds	r3, #1
 8004e3a:	607b      	str	r3, [r7, #4]
 8004e3c:	4b05      	ldr	r3, [pc, #20]	@ (8004e54 <_cbSendTaskList+0x8c>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	687a      	ldr	r2, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d3c6      	bcc.n	8004dd4 <_cbSendTaskList+0xc>
  }
}
 8004e46:	bf00      	nop
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e50:	2004b238 	.word	0x2004b238
 8004e54:	2004b2d8 	.word	0x2004b2d8

08004e58 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004e58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004e5c:	b082      	sub	sp, #8
 8004e5e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004e60:	f7fe f9ce 	bl	8003200 <xTaskGetTickCountFromISR>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2200      	movs	r2, #0
 8004e68:	469a      	mov	sl, r3
 8004e6a:	4693      	mov	fp, r2
 8004e6c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004e70:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	f04f 0a00 	mov.w	sl, #0
 8004e7c:	f04f 0b00 	mov.w	fp, #0
 8004e80:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004e84:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004e88:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004e8c:	4652      	mov	r2, sl
 8004e8e:	465b      	mov	r3, fp
 8004e90:	1a14      	subs	r4, r2, r0
 8004e92:	eb63 0501 	sbc.w	r5, r3, r1
 8004e96:	f04f 0200 	mov.w	r2, #0
 8004e9a:	f04f 0300 	mov.w	r3, #0
 8004e9e:	00ab      	lsls	r3, r5, #2
 8004ea0:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004ea4:	00a2      	lsls	r2, r4, #2
 8004ea6:	4614      	mov	r4, r2
 8004ea8:	461d      	mov	r5, r3
 8004eaa:	eb14 0800 	adds.w	r8, r4, r0
 8004eae:	eb45 0901 	adc.w	r9, r5, r1
 8004eb2:	f04f 0200 	mov.w	r2, #0
 8004eb6:	f04f 0300 	mov.w	r3, #0
 8004eba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004ebe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ec2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ec6:	4690      	mov	r8, r2
 8004ec8:	4699      	mov	r9, r3
 8004eca:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004ece:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004ed2:	4610      	mov	r0, r2
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004ee0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af02      	add	r7, sp, #8
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004eee:	2205      	movs	r2, #5
 8004ef0:	492b      	ldr	r1, [pc, #172]	@ (8004fa0 <SYSVIEW_AddTask+0xc0>)
 8004ef2:	68b8      	ldr	r0, [r7, #8]
 8004ef4:	f002 f874 	bl	8006fe0 <memcmp>
 8004ef8:	4603      	mov	r3, r0
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d04b      	beq.n	8004f96 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004efe:	4b29      	ldr	r3, [pc, #164]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2b07      	cmp	r3, #7
 8004f04:	d903      	bls.n	8004f0e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004f06:	4828      	ldr	r0, [pc, #160]	@ (8004fa8 <SYSVIEW_AddTask+0xc8>)
 8004f08:	f002 f80e 	bl	8006f28 <SEGGER_SYSVIEW_Warn>
    return;
 8004f0c:	e044      	b.n	8004f98 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004f0e:	4b25      	ldr	r3, [pc, #148]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	4926      	ldr	r1, [pc, #152]	@ (8004fac <SYSVIEW_AddTask+0xcc>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	68fa      	ldr	r2, [r7, #12]
 8004f20:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004f22:	4b20      	ldr	r3, [pc, #128]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	4921      	ldr	r1, [pc, #132]	@ (8004fac <SYSVIEW_AddTask+0xcc>)
 8004f28:	4613      	mov	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	440b      	add	r3, r1
 8004f32:	3304      	adds	r3, #4
 8004f34:	68ba      	ldr	r2, [r7, #8]
 8004f36:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004f38:	4b1a      	ldr	r3, [pc, #104]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	491b      	ldr	r1, [pc, #108]	@ (8004fac <SYSVIEW_AddTask+0xcc>)
 8004f3e:	4613      	mov	r3, r2
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	4413      	add	r3, r2
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	440b      	add	r3, r1
 8004f48:	3308      	adds	r3, #8
 8004f4a:	687a      	ldr	r2, [r7, #4]
 8004f4c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004f4e:	4b15      	ldr	r3, [pc, #84]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f50:	681a      	ldr	r2, [r3, #0]
 8004f52:	4916      	ldr	r1, [pc, #88]	@ (8004fac <SYSVIEW_AddTask+0xcc>)
 8004f54:	4613      	mov	r3, r2
 8004f56:	009b      	lsls	r3, r3, #2
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	330c      	adds	r3, #12
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004f64:	4b0f      	ldr	r3, [pc, #60]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	4910      	ldr	r1, [pc, #64]	@ (8004fac <SYSVIEW_AddTask+0xcc>)
 8004f6a:	4613      	mov	r3, r2
 8004f6c:	009b      	lsls	r3, r3, #2
 8004f6e:	4413      	add	r3, r2
 8004f70:	009b      	lsls	r3, r3, #2
 8004f72:	440b      	add	r3, r1
 8004f74:	3310      	adds	r3, #16
 8004f76:	69ba      	ldr	r2, [r7, #24]
 8004f78:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004f7a:	4b0a      	ldr	r3, [pc, #40]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	3301      	adds	r3, #1
 8004f80:	4a08      	ldr	r2, [pc, #32]	@ (8004fa4 <SYSVIEW_AddTask+0xc4>)
 8004f82:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	9300      	str	r3, [sp, #0]
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	68b9      	ldr	r1, [r7, #8]
 8004f8e:	68f8      	ldr	r0, [r7, #12]
 8004f90:	f000 f8ca 	bl	8005128 <SYSVIEW_SendTaskInfo>
 8004f94:	e000      	b.n	8004f98 <SYSVIEW_AddTask+0xb8>
    return;
 8004f96:	bf00      	nop

}
 8004f98:	3710      	adds	r7, #16
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	bd80      	pop	{r7, pc}
 8004f9e:	bf00      	nop
 8004fa0:	080071ac 	.word	0x080071ac
 8004fa4:	2004b2d8 	.word	0x2004b2d8
 8004fa8:	080071b4 	.word	0x080071b4
 8004fac:	2004b238 	.word	0x2004b238

08004fb0 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b084      	sub	sp, #16
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004fb8:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f000 80ab 	beq.w	8005118 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	60fb      	str	r3, [r7, #12]
 8004fc6:	e00d      	b.n	8004fe4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004fc8:	4956      	ldr	r1, [pc, #344]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8004fca:	68fa      	ldr	r2, [r7, #12]
 8004fcc:	4613      	mov	r3, r2
 8004fce:	009b      	lsls	r3, r3, #2
 8004fd0:	4413      	add	r3, r2
 8004fd2:	009b      	lsls	r3, r3, #2
 8004fd4:	440b      	add	r3, r1
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	429a      	cmp	r2, r3
 8004fdc:	d008      	beq.n	8004ff0 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	3301      	adds	r3, #1
 8004fe2:	60fb      	str	r3, [r7, #12]
 8004fe4:	4b4e      	ldr	r3, [pc, #312]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d3ec      	bcc.n	8004fc8 <SYSVIEW_DeleteTask+0x18>
 8004fee:	e000      	b.n	8004ff2 <SYSVIEW_DeleteTask+0x42>
      break;
 8004ff0:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004ff2:	4b4b      	ldr	r3, [pc, #300]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	3b01      	subs	r3, #1
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d111      	bne.n	8005022 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004ffe:	68fa      	ldr	r2, [r7, #12]
 8005000:	4613      	mov	r3, r2
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	4413      	add	r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	4a46      	ldr	r2, [pc, #280]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 800500a:	4413      	add	r3, r2
 800500c:	2214      	movs	r2, #20
 800500e:	2100      	movs	r1, #0
 8005010:	4618      	mov	r0, r3
 8005012:	f001 fff5 	bl	8007000 <memset>
    _NumTasks--;
 8005016:	4b42      	ldr	r3, [pc, #264]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	3b01      	subs	r3, #1
 800501c:	4a40      	ldr	r2, [pc, #256]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 800501e:	6013      	str	r3, [r2, #0]
 8005020:	e07b      	b.n	800511a <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8005022:	4b3f      	ldr	r3, [pc, #252]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68fa      	ldr	r2, [r7, #12]
 8005028:	429a      	cmp	r2, r3
 800502a:	d276      	bcs.n	800511a <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 800502c:	4b3c      	ldr	r3, [pc, #240]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	1e5a      	subs	r2, r3, #1
 8005032:	493c      	ldr	r1, [pc, #240]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005034:	4613      	mov	r3, r2
 8005036:	009b      	lsls	r3, r3, #2
 8005038:	4413      	add	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	440b      	add	r3, r1
 800503e:	6819      	ldr	r1, [r3, #0]
 8005040:	4838      	ldr	r0, [pc, #224]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005042:	68fa      	ldr	r2, [r7, #12]
 8005044:	4613      	mov	r3, r2
 8005046:	009b      	lsls	r3, r3, #2
 8005048:	4413      	add	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4403      	add	r3, r0
 800504e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8005050:	4b33      	ldr	r3, [pc, #204]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	1e5a      	subs	r2, r3, #1
 8005056:	4933      	ldr	r1, [pc, #204]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005058:	4613      	mov	r3, r2
 800505a:	009b      	lsls	r3, r3, #2
 800505c:	4413      	add	r3, r2
 800505e:	009b      	lsls	r3, r3, #2
 8005060:	440b      	add	r3, r1
 8005062:	3304      	adds	r3, #4
 8005064:	6819      	ldr	r1, [r3, #0]
 8005066:	482f      	ldr	r0, [pc, #188]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005068:	68fa      	ldr	r2, [r7, #12]
 800506a:	4613      	mov	r3, r2
 800506c:	009b      	lsls	r3, r3, #2
 800506e:	4413      	add	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4403      	add	r3, r0
 8005074:	3304      	adds	r3, #4
 8005076:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8005078:	4b29      	ldr	r3, [pc, #164]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	1e5a      	subs	r2, r3, #1
 800507e:	4929      	ldr	r1, [pc, #164]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005080:	4613      	mov	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	009b      	lsls	r3, r3, #2
 8005088:	440b      	add	r3, r1
 800508a:	3308      	adds	r3, #8
 800508c:	6819      	ldr	r1, [r3, #0]
 800508e:	4825      	ldr	r0, [pc, #148]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	4613      	mov	r3, r2
 8005094:	009b      	lsls	r3, r3, #2
 8005096:	4413      	add	r3, r2
 8005098:	009b      	lsls	r3, r3, #2
 800509a:	4403      	add	r3, r0
 800509c:	3308      	adds	r3, #8
 800509e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 80050a0:	4b1f      	ldr	r3, [pc, #124]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	1e5a      	subs	r2, r3, #1
 80050a6:	491f      	ldr	r1, [pc, #124]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 80050a8:	4613      	mov	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	4413      	add	r3, r2
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	440b      	add	r3, r1
 80050b2:	330c      	adds	r3, #12
 80050b4:	6819      	ldr	r1, [r3, #0]
 80050b6:	481b      	ldr	r0, [pc, #108]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 80050b8:	68fa      	ldr	r2, [r7, #12]
 80050ba:	4613      	mov	r3, r2
 80050bc:	009b      	lsls	r3, r3, #2
 80050be:	4413      	add	r3, r2
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	4403      	add	r3, r0
 80050c4:	330c      	adds	r3, #12
 80050c6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 80050c8:	4b15      	ldr	r3, [pc, #84]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	1e5a      	subs	r2, r3, #1
 80050ce:	4915      	ldr	r1, [pc, #84]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 80050d0:	4613      	mov	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4413      	add	r3, r2
 80050d6:	009b      	lsls	r3, r3, #2
 80050d8:	440b      	add	r3, r1
 80050da:	3310      	adds	r3, #16
 80050dc:	6819      	ldr	r1, [r3, #0]
 80050de:	4811      	ldr	r0, [pc, #68]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 80050e0:	68fa      	ldr	r2, [r7, #12]
 80050e2:	4613      	mov	r3, r2
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	4413      	add	r3, r2
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	4403      	add	r3, r0
 80050ec:	3310      	adds	r3, #16
 80050ee:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	1e5a      	subs	r2, r3, #1
 80050f6:	4613      	mov	r3, r2
 80050f8:	009b      	lsls	r3, r3, #2
 80050fa:	4413      	add	r3, r2
 80050fc:	009b      	lsls	r3, r3, #2
 80050fe:	4a09      	ldr	r2, [pc, #36]	@ (8005124 <SYSVIEW_DeleteTask+0x174>)
 8005100:	4413      	add	r3, r2
 8005102:	2214      	movs	r2, #20
 8005104:	2100      	movs	r1, #0
 8005106:	4618      	mov	r0, r3
 8005108:	f001 ff7a 	bl	8007000 <memset>
    _NumTasks--;
 800510c:	4b04      	ldr	r3, [pc, #16]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	3b01      	subs	r3, #1
 8005112:	4a03      	ldr	r2, [pc, #12]	@ (8005120 <SYSVIEW_DeleteTask+0x170>)
 8005114:	6013      	str	r3, [r2, #0]
 8005116:	e000      	b.n	800511a <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8005118:	bf00      	nop
  }
}
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	2004b2d8 	.word	0x2004b2d8
 8005124:	2004b238 	.word	0x2004b238

08005128 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005128:	b580      	push	{r7, lr}
 800512a:	b08a      	sub	sp, #40	@ 0x28
 800512c:	af00      	add	r7, sp, #0
 800512e:	60f8      	str	r0, [r7, #12]
 8005130:	60b9      	str	r1, [r7, #8]
 8005132:	607a      	str	r2, [r7, #4]
 8005134:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005136:	f107 0314 	add.w	r3, r7, #20
 800513a:	2214      	movs	r2, #20
 800513c:	2100      	movs	r1, #0
 800513e:	4618      	mov	r0, r3
 8005140:	f001 ff5e 	bl	8007000 <memset>
  TaskInfo.TaskID     = TaskID;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005158:	f107 0314 	add.w	r3, r7, #20
 800515c:	4618      	mov	r0, r3
 800515e:	f001 fb1d 	bl	800679c <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005162:	bf00      	nop
 8005164:	3728      	adds	r7, #40	@ 0x28
 8005166:	46bd      	mov	sp, r7
 8005168:	bd80      	pop	{r7, pc}
	...

0800516c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005172:	4b24      	ldr	r3, [pc, #144]	@ (8005204 <_DoInit+0x98>)
 8005174:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2203      	movs	r2, #3
 800517a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2203      	movs	r2, #3
 8005180:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	4a20      	ldr	r2, [pc, #128]	@ (8005208 <_DoInit+0x9c>)
 8005186:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a20      	ldr	r2, [pc, #128]	@ (800520c <_DoInit+0xa0>)
 800518c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005194:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2200      	movs	r2, #0
 800519a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2200      	movs	r2, #0
 80051a0:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a17      	ldr	r2, [pc, #92]	@ (8005208 <_DoInit+0x9c>)
 80051ac:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4a17      	ldr	r2, [pc, #92]	@ (8005210 <_DoInit+0xa4>)
 80051b2:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2210      	movs	r2, #16
 80051b8:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2200      	movs	r2, #0
 80051ca:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	3307      	adds	r3, #7
 80051d0:	4a10      	ldr	r2, [pc, #64]	@ (8005214 <_DoInit+0xa8>)
 80051d2:	6810      	ldr	r0, [r2, #0]
 80051d4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051d6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005218 <_DoInit+0xac>)
 80051de:	6810      	ldr	r0, [r2, #0]
 80051e0:	6018      	str	r0, [r3, #0]
 80051e2:	8891      	ldrh	r1, [r2, #4]
 80051e4:	7992      	ldrb	r2, [r2, #6]
 80051e6:	8099      	strh	r1, [r3, #4]
 80051e8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051ea:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2220      	movs	r2, #32
 80051f2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80051f4:	f3bf 8f5f 	dmb	sy
}
 80051f8:	bf00      	nop
 80051fa:	370c      	adds	r7, #12
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr
 8005204:	2004b2dc 	.word	0x2004b2dc
 8005208:	08007204 	.word	0x08007204
 800520c:	2004b384 	.word	0x2004b384
 8005210:	2004b784 	.word	0x2004b784
 8005214:	08007210 	.word	0x08007210
 8005218:	08007214 	.word	0x08007214

0800521c <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800521c:	b580      	push	{r7, lr}
 800521e:	b08c      	sub	sp, #48	@ 0x30
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005228:	4b3e      	ldr	r3, [pc, #248]	@ (8005324 <SEGGER_RTT_ReadNoLock+0x108>)
 800522a:	623b      	str	r3, [r7, #32]
 800522c:	6a3b      	ldr	r3, [r7, #32]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	b2db      	uxtb	r3, r3
 8005232:	2b00      	cmp	r3, #0
 8005234:	d101      	bne.n	800523a <SEGGER_RTT_ReadNoLock+0x1e>
 8005236:	f7ff ff99 	bl	800516c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	4613      	mov	r3, r2
 800523e:	005b      	lsls	r3, r3, #1
 8005240:	4413      	add	r3, r2
 8005242:	00db      	lsls	r3, r3, #3
 8005244:	3360      	adds	r3, #96	@ 0x60
 8005246:	4a37      	ldr	r2, [pc, #220]	@ (8005324 <SEGGER_RTT_ReadNoLock+0x108>)
 8005248:	4413      	add	r3, r2
 800524a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005250:	69fb      	ldr	r3, [r7, #28]
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800525c:	2300      	movs	r3, #0
 800525e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005260:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005262:	69bb      	ldr	r3, [r7, #24]
 8005264:	429a      	cmp	r2, r3
 8005266:	d92b      	bls.n	80052c0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	689a      	ldr	r2, [r3, #8]
 800526c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526e:	1ad3      	subs	r3, r2, r3
 8005270:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005272:	697a      	ldr	r2, [r7, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	4293      	cmp	r3, r2
 8005278:	bf28      	it	cs
 800527a:	4613      	movcs	r3, r2
 800527c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800527e:	69fb      	ldr	r3, [r7, #28]
 8005280:	685a      	ldr	r2, [r3, #4]
 8005282:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005284:	4413      	add	r3, r2
 8005286:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005288:	697a      	ldr	r2, [r7, #20]
 800528a:	6939      	ldr	r1, [r7, #16]
 800528c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800528e:	f001 fee3 	bl	8007058 <memcpy>
    NumBytesRead += NumBytesRem;
 8005292:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800529a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800529c:	697b      	ldr	r3, [r7, #20]
 800529e:	4413      	add	r3, r2
 80052a0:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	1ad3      	subs	r3, r2, r3
 80052a8:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80052aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	4413      	add	r3, r2
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052b8:	429a      	cmp	r2, r3
 80052ba:	d101      	bne.n	80052c0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80052bc:	2300      	movs	r3, #0
 80052be:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80052c0:	69ba      	ldr	r2, [r7, #24]
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80052c8:	697a      	ldr	r2, [r7, #20]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	4293      	cmp	r3, r2
 80052ce:	bf28      	it	cs
 80052d0:	4613      	movcs	r3, r2
 80052d2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80052d4:	697b      	ldr	r3, [r7, #20]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d019      	beq.n	800530e <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80052da:	69fb      	ldr	r3, [r7, #28]
 80052dc:	685a      	ldr	r2, [r3, #4]
 80052de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052e0:	4413      	add	r3, r2
 80052e2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80052e4:	697a      	ldr	r2, [r7, #20]
 80052e6:	6939      	ldr	r1, [r7, #16]
 80052e8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80052ea:	f001 feb5 	bl	8007058 <memcpy>
    NumBytesRead += NumBytesRem;
 80052ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	4413      	add	r3, r2
 80052f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80052f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	4413      	add	r3, r2
 80052fc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80052fe:	687a      	ldr	r2, [r7, #4]
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005306:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005308:	697b      	ldr	r3, [r7, #20]
 800530a:	4413      	add	r3, r2
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800530e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005318:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800531a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800531c:	4618      	mov	r0, r3
 800531e:	3730      	adds	r7, #48	@ 0x30
 8005320:	46bd      	mov	sp, r7
 8005322:	bd80      	pop	{r7, pc}
 8005324:	2004b2dc 	.word	0x2004b2dc

08005328 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b088      	sub	sp, #32
 800532c:	af00      	add	r7, sp, #0
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
 8005334:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005336:	4b3d      	ldr	r3, [pc, #244]	@ (800542c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005338:	61bb      	str	r3, [r7, #24]
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	781b      	ldrb	r3, [r3, #0]
 800533e:	b2db      	uxtb	r3, r3
 8005340:	2b00      	cmp	r3, #0
 8005342:	d101      	bne.n	8005348 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005344:	f7ff ff12 	bl	800516c <_DoInit>
  SEGGER_RTT_LOCK();
 8005348:	f3ef 8311 	mrs	r3, BASEPRI
 800534c:	f04f 0120 	mov.w	r1, #32
 8005350:	f381 8811 	msr	BASEPRI, r1
 8005354:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005356:	4b35      	ldr	r3, [pc, #212]	@ (800542c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005358:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800535a:	2300      	movs	r3, #0
 800535c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800535e:	6939      	ldr	r1, [r7, #16]
 8005360:	69fb      	ldr	r3, [r7, #28]
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	4613      	mov	r3, r2
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	4413      	add	r3, r2
 800536a:	00db      	lsls	r3, r3, #3
 800536c:	440b      	add	r3, r1
 800536e:	3304      	adds	r3, #4
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d008      	beq.n	8005388 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005376:	69fb      	ldr	r3, [r7, #28]
 8005378:	3301      	adds	r3, #1
 800537a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	691b      	ldr	r3, [r3, #16]
 8005380:	69fa      	ldr	r2, [r7, #28]
 8005382:	429a      	cmp	r2, r3
 8005384:	dbeb      	blt.n	800535e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005386:	e000      	b.n	800538a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005388:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	691b      	ldr	r3, [r3, #16]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	429a      	cmp	r2, r3
 8005392:	da3f      	bge.n	8005414 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005394:	6939      	ldr	r1, [r7, #16]
 8005396:	69fb      	ldr	r3, [r7, #28]
 8005398:	1c5a      	adds	r2, r3, #1
 800539a:	4613      	mov	r3, r2
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	4413      	add	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	440b      	add	r3, r1
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 80053a8:	6939      	ldr	r1, [r7, #16]
 80053aa:	69fb      	ldr	r3, [r7, #28]
 80053ac:	1c5a      	adds	r2, r3, #1
 80053ae:	4613      	mov	r3, r2
 80053b0:	005b      	lsls	r3, r3, #1
 80053b2:	4413      	add	r3, r2
 80053b4:	00db      	lsls	r3, r3, #3
 80053b6:	440b      	add	r3, r1
 80053b8:	3304      	adds	r3, #4
 80053ba:	68ba      	ldr	r2, [r7, #8]
 80053bc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 80053be:	6939      	ldr	r1, [r7, #16]
 80053c0:	69fa      	ldr	r2, [r7, #28]
 80053c2:	4613      	mov	r3, r2
 80053c4:	005b      	lsls	r3, r3, #1
 80053c6:	4413      	add	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	440b      	add	r3, r1
 80053cc:	3320      	adds	r3, #32
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80053d2:	6939      	ldr	r1, [r7, #16]
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	4613      	mov	r3, r2
 80053d8:	005b      	lsls	r3, r3, #1
 80053da:	4413      	add	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	440b      	add	r3, r1
 80053e0:	3328      	adds	r3, #40	@ 0x28
 80053e2:	2200      	movs	r2, #0
 80053e4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80053e6:	6939      	ldr	r1, [r7, #16]
 80053e8:	69fa      	ldr	r2, [r7, #28]
 80053ea:	4613      	mov	r3, r2
 80053ec:	005b      	lsls	r3, r3, #1
 80053ee:	4413      	add	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	440b      	add	r3, r1
 80053f4:	3324      	adds	r3, #36	@ 0x24
 80053f6:	2200      	movs	r2, #0
 80053f8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80053fa:	6939      	ldr	r1, [r7, #16]
 80053fc:	69fa      	ldr	r2, [r7, #28]
 80053fe:	4613      	mov	r3, r2
 8005400:	005b      	lsls	r3, r3, #1
 8005402:	4413      	add	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	440b      	add	r3, r1
 8005408:	332c      	adds	r3, #44	@ 0x2c
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800540e:	f3bf 8f5f 	dmb	sy
 8005412:	e002      	b.n	800541a <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8005414:	f04f 33ff 	mov.w	r3, #4294967295
 8005418:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005420:	69fb      	ldr	r3, [r7, #28]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3720      	adds	r7, #32
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	2004b2dc 	.word	0x2004b2dc

08005430 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b088      	sub	sp, #32
 8005434:	af00      	add	r7, sp, #0
 8005436:	60f8      	str	r0, [r7, #12]
 8005438:	60b9      	str	r1, [r7, #8]
 800543a:	607a      	str	r2, [r7, #4]
 800543c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800543e:	4b33      	ldr	r3, [pc, #204]	@ (800550c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005440:	61bb      	str	r3, [r7, #24]
 8005442:	69bb      	ldr	r3, [r7, #24]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	2b00      	cmp	r3, #0
 800544a:	d101      	bne.n	8005450 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800544c:	f7ff fe8e 	bl	800516c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005450:	4b2e      	ldr	r3, [pc, #184]	@ (800550c <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005452:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	695b      	ldr	r3, [r3, #20]
 8005458:	461a      	mov	r2, r3
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	4293      	cmp	r3, r2
 800545e:	d24d      	bcs.n	80054fc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005460:	f3ef 8311 	mrs	r3, BASEPRI
 8005464:	f04f 0120 	mov.w	r1, #32
 8005468:	f381 8811 	msr	BASEPRI, r1
 800546c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d031      	beq.n	80054d8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005474:	6979      	ldr	r1, [r7, #20]
 8005476:	68fa      	ldr	r2, [r7, #12]
 8005478:	4613      	mov	r3, r2
 800547a:	005b      	lsls	r3, r3, #1
 800547c:	4413      	add	r3, r2
 800547e:	00db      	lsls	r3, r3, #3
 8005480:	440b      	add	r3, r1
 8005482:	3360      	adds	r3, #96	@ 0x60
 8005484:	68ba      	ldr	r2, [r7, #8]
 8005486:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005488:	6979      	ldr	r1, [r7, #20]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4613      	mov	r3, r2
 800548e:	005b      	lsls	r3, r3, #1
 8005490:	4413      	add	r3, r2
 8005492:	00db      	lsls	r3, r3, #3
 8005494:	440b      	add	r3, r1
 8005496:	3364      	adds	r3, #100	@ 0x64
 8005498:	687a      	ldr	r2, [r7, #4]
 800549a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800549c:	6979      	ldr	r1, [r7, #20]
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	4613      	mov	r3, r2
 80054a2:	005b      	lsls	r3, r3, #1
 80054a4:	4413      	add	r3, r2
 80054a6:	00db      	lsls	r3, r3, #3
 80054a8:	440b      	add	r3, r1
 80054aa:	3368      	adds	r3, #104	@ 0x68
 80054ac:	683a      	ldr	r2, [r7, #0]
 80054ae:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 80054b0:	6979      	ldr	r1, [r7, #20]
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	4613      	mov	r3, r2
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	4413      	add	r3, r2
 80054ba:	00db      	lsls	r3, r3, #3
 80054bc:	440b      	add	r3, r1
 80054be:	3370      	adds	r3, #112	@ 0x70
 80054c0:	2200      	movs	r2, #0
 80054c2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80054c4:	6979      	ldr	r1, [r7, #20]
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	4613      	mov	r3, r2
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	00db      	lsls	r3, r3, #3
 80054d0:	440b      	add	r3, r1
 80054d2:	336c      	adds	r3, #108	@ 0x6c
 80054d4:	2200      	movs	r2, #0
 80054d6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80054d8:	6979      	ldr	r1, [r7, #20]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4613      	mov	r3, r2
 80054de:	005b      	lsls	r3, r3, #1
 80054e0:	4413      	add	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	440b      	add	r3, r1
 80054e6:	3374      	adds	r3, #116	@ 0x74
 80054e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80054ea:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80054ec:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80054f6:	2300      	movs	r3, #0
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e002      	b.n	8005502 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80054fc:	f04f 33ff 	mov.w	r3, #4294967295
 8005500:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8005502:	69fb      	ldr	r3, [r7, #28]
}
 8005504:	4618      	mov	r0, r3
 8005506:	3720      	adds	r7, #32
 8005508:	46bd      	mov	sp, r7
 800550a:	bd80      	pop	{r7, pc}
 800550c:	2004b2dc 	.word	0x2004b2dc

08005510 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8005510:	b480      	push	{r7}
 8005512:	b087      	sub	sp, #28
 8005514:	af00      	add	r7, sp, #0
 8005516:	60f8      	str	r0, [r7, #12]
 8005518:	60b9      	str	r1, [r7, #8]
 800551a:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 800551c:	2300      	movs	r3, #0
 800551e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005520:	e002      	b.n	8005528 <_EncodeStr+0x18>
    Len++;
 8005522:	693b      	ldr	r3, [r7, #16]
 8005524:	3301      	adds	r3, #1
 8005526:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005528:	68ba      	ldr	r2, [r7, #8]
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4413      	add	r3, r2
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d1f6      	bne.n	8005522 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	429a      	cmp	r2, r3
 800553a:	d901      	bls.n	8005540 <_EncodeStr+0x30>
    Len = Limit;
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2bfe      	cmp	r3, #254	@ 0xfe
 8005544:	d806      	bhi.n	8005554 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	1c5a      	adds	r2, r3, #1
 800554a:	60fa      	str	r2, [r7, #12]
 800554c:	693a      	ldr	r2, [r7, #16]
 800554e:	b2d2      	uxtb	r2, r2
 8005550:	701a      	strb	r2, [r3, #0]
 8005552:	e011      	b.n	8005578 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1c5a      	adds	r2, r3, #1
 8005558:	60fa      	str	r2, [r7, #12]
 800555a:	22ff      	movs	r2, #255	@ 0xff
 800555c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	1c5a      	adds	r2, r3, #1
 8005562:	60fa      	str	r2, [r7, #12]
 8005564:	693a      	ldr	r2, [r7, #16]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800556a:	693b      	ldr	r3, [r7, #16]
 800556c:	0a19      	lsrs	r1, r3, #8
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	1c5a      	adds	r2, r3, #1
 8005572:	60fa      	str	r2, [r7, #12]
 8005574:	b2ca      	uxtb	r2, r1
 8005576:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005578:	2300      	movs	r3, #0
 800557a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800557c:	e00a      	b.n	8005594 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800557e:	68ba      	ldr	r2, [r7, #8]
 8005580:	1c53      	adds	r3, r2, #1
 8005582:	60bb      	str	r3, [r7, #8]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	1c59      	adds	r1, r3, #1
 8005588:	60f9      	str	r1, [r7, #12]
 800558a:	7812      	ldrb	r2, [r2, #0]
 800558c:	701a      	strb	r2, [r3, #0]
    n++;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	3301      	adds	r3, #1
 8005592:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d3f0      	bcc.n	800557e <_EncodeStr+0x6e>
  }
  return pPayload;
 800559c:	68fb      	ldr	r3, [r7, #12]
}
 800559e:	4618      	mov	r0, r3
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr

080055aa <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80055aa:	b480      	push	{r7}
 80055ac:	b083      	sub	sp, #12
 80055ae:	af00      	add	r7, sp, #0
 80055b0:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	3304      	adds	r3, #4
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	370c      	adds	r7, #12
 80055ba:	46bd      	mov	sp, r7
 80055bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c0:	4770      	bx	lr
	...

080055c4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80055ca:	4b35      	ldr	r3, [pc, #212]	@ (80056a0 <_HandleIncomingPacket+0xdc>)
 80055cc:	7e1b      	ldrb	r3, [r3, #24]
 80055ce:	4618      	mov	r0, r3
 80055d0:	1cfb      	adds	r3, r7, #3
 80055d2:	2201      	movs	r2, #1
 80055d4:	4619      	mov	r1, r3
 80055d6:	f7ff fe21 	bl	800521c <SEGGER_RTT_ReadNoLock>
 80055da:	4603      	mov	r3, r0
 80055dc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	dd59      	ble.n	8005698 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80055e4:	78fb      	ldrb	r3, [r7, #3]
 80055e6:	2b80      	cmp	r3, #128	@ 0x80
 80055e8:	d032      	beq.n	8005650 <_HandleIncomingPacket+0x8c>
 80055ea:	2b80      	cmp	r3, #128	@ 0x80
 80055ec:	dc42      	bgt.n	8005674 <_HandleIncomingPacket+0xb0>
 80055ee:	2b07      	cmp	r3, #7
 80055f0:	dc16      	bgt.n	8005620 <_HandleIncomingPacket+0x5c>
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	dd3e      	ble.n	8005674 <_HandleIncomingPacket+0xb0>
 80055f6:	3b01      	subs	r3, #1
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d83b      	bhi.n	8005674 <_HandleIncomingPacket+0xb0>
 80055fc:	a201      	add	r2, pc, #4	@ (adr r2, 8005604 <_HandleIncomingPacket+0x40>)
 80055fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005602:	bf00      	nop
 8005604:	08005627 	.word	0x08005627
 8005608:	0800562d 	.word	0x0800562d
 800560c:	08005633 	.word	0x08005633
 8005610:	08005639 	.word	0x08005639
 8005614:	0800563f 	.word	0x0800563f
 8005618:	08005645 	.word	0x08005645
 800561c:	0800564b 	.word	0x0800564b
 8005620:	2b7f      	cmp	r3, #127	@ 0x7f
 8005622:	d034      	beq.n	800568e <_HandleIncomingPacket+0xca>
 8005624:	e026      	b.n	8005674 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005626:	f000 ff3f 	bl	80064a8 <SEGGER_SYSVIEW_Start>
      break;
 800562a:	e035      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800562c:	f000 fff6 	bl	800661c <SEGGER_SYSVIEW_Stop>
      break;
 8005630:	e032      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005632:	f001 f9cf 	bl	80069d4 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005636:	e02f      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005638:	f001 f994 	bl	8006964 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800563c:	e02c      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800563e:	f001 f813 	bl	8006668 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005642:	e029      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005644:	f001 fc1e 	bl	8006e84 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005648:	e026      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800564a:	f001 fbfd 	bl	8006e48 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800564e:	e023      	b.n	8005698 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005650:	4b13      	ldr	r3, [pc, #76]	@ (80056a0 <_HandleIncomingPacket+0xdc>)
 8005652:	7e1b      	ldrb	r3, [r3, #24]
 8005654:	4618      	mov	r0, r3
 8005656:	1cfb      	adds	r3, r7, #3
 8005658:	2201      	movs	r2, #1
 800565a:	4619      	mov	r1, r3
 800565c:	f7ff fdde 	bl	800521c <SEGGER_RTT_ReadNoLock>
 8005660:	4603      	mov	r3, r0
 8005662:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2b00      	cmp	r3, #0
 8005668:	dd13      	ble.n	8005692 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800566a:	78fb      	ldrb	r3, [r7, #3]
 800566c:	4618      	mov	r0, r3
 800566e:	f001 fb6b 	bl	8006d48 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005672:	e00e      	b.n	8005692 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005674:	78fb      	ldrb	r3, [r7, #3]
 8005676:	b25b      	sxtb	r3, r3
 8005678:	2b00      	cmp	r3, #0
 800567a:	da0c      	bge.n	8005696 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800567c:	4b08      	ldr	r3, [pc, #32]	@ (80056a0 <_HandleIncomingPacket+0xdc>)
 800567e:	7e1b      	ldrb	r3, [r3, #24]
 8005680:	4618      	mov	r0, r3
 8005682:	1cfb      	adds	r3, r7, #3
 8005684:	2201      	movs	r2, #1
 8005686:	4619      	mov	r1, r3
 8005688:	f7ff fdc8 	bl	800521c <SEGGER_RTT_ReadNoLock>
      }
      break;
 800568c:	e003      	b.n	8005696 <_HandleIncomingPacket+0xd2>
      break;
 800568e:	bf00      	nop
 8005690:	e002      	b.n	8005698 <_HandleIncomingPacket+0xd4>
      break;
 8005692:	bf00      	nop
 8005694:	e000      	b.n	8005698 <_HandleIncomingPacket+0xd4>
      break;
 8005696:	bf00      	nop
    }
  }
}
 8005698:	bf00      	nop
 800569a:	3708      	adds	r7, #8
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	2004c79c 	.word	0x2004c79c

080056a4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08c      	sub	sp, #48	@ 0x30
 80056a8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80056aa:	2301      	movs	r3, #1
 80056ac:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80056ae:	1d3b      	adds	r3, r7, #4
 80056b0:	3301      	adds	r3, #1
 80056b2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b8:	4b31      	ldr	r3, [pc, #196]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 80056ba:	695b      	ldr	r3, [r3, #20]
 80056bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056be:	e00b      	b.n	80056d8 <_TrySendOverflowPacket+0x34>
 80056c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056c2:	b2da      	uxtb	r2, r3
 80056c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056c6:	1c59      	adds	r1, r3, #1
 80056c8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80056ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056ce:	b2d2      	uxtb	r2, r2
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056d4:	09db      	lsrs	r3, r3, #7
 80056d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056da:	2b7f      	cmp	r3, #127	@ 0x7f
 80056dc:	d8f0      	bhi.n	80056c0 <_TrySendOverflowPacket+0x1c>
 80056de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056e0:	1c5a      	adds	r2, r3, #1
 80056e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80056e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056e6:	b2d2      	uxtb	r2, r2
 80056e8:	701a      	strb	r2, [r3, #0]
 80056ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056ec:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80056ee:	4b25      	ldr	r3, [pc, #148]	@ (8005784 <_TrySendOverflowPacket+0xe0>)
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80056f4:	4b22      	ldr	r3, [pc, #136]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 80056f6:	68db      	ldr	r3, [r3, #12]
 80056f8:	69ba      	ldr	r2, [r7, #24]
 80056fa:	1ad3      	subs	r3, r2, r3
 80056fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	627b      	str	r3, [r7, #36]	@ 0x24
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	623b      	str	r3, [r7, #32]
 8005706:	e00b      	b.n	8005720 <_TrySendOverflowPacket+0x7c>
 8005708:	6a3b      	ldr	r3, [r7, #32]
 800570a:	b2da      	uxtb	r2, r3
 800570c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570e:	1c59      	adds	r1, r3, #1
 8005710:	6279      	str	r1, [r7, #36]	@ 0x24
 8005712:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	09db      	lsrs	r3, r3, #7
 800571e:	623b      	str	r3, [r7, #32]
 8005720:	6a3b      	ldr	r3, [r7, #32]
 8005722:	2b7f      	cmp	r3, #127	@ 0x7f
 8005724:	d8f0      	bhi.n	8005708 <_TrySendOverflowPacket+0x64>
 8005726:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005728:	1c5a      	adds	r2, r3, #1
 800572a:	627a      	str	r2, [r7, #36]	@ 0x24
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	b2d2      	uxtb	r2, r2
 8005730:	701a      	strb	r2, [r3, #0]
 8005732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005734:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005736:	4b12      	ldr	r3, [pc, #72]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 8005738:	785b      	ldrb	r3, [r3, #1]
 800573a:	4618      	mov	r0, r3
 800573c:	1d3b      	adds	r3, r7, #4
 800573e:	69fa      	ldr	r2, [r7, #28]
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	461a      	mov	r2, r3
 8005744:	1d3b      	adds	r3, r7, #4
 8005746:	4619      	mov	r1, r3
 8005748:	f7fa fd6a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800574c:	4603      	mov	r3, r0
 800574e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005750:	693b      	ldr	r3, [r7, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d009      	beq.n	800576a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005756:	4a0a      	ldr	r2, [pc, #40]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 8005758:	69bb      	ldr	r3, [r7, #24]
 800575a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800575c:	4b08      	ldr	r3, [pc, #32]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	3b01      	subs	r3, #1
 8005762:	b2da      	uxtb	r2, r3
 8005764:	4b06      	ldr	r3, [pc, #24]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 8005766:	701a      	strb	r2, [r3, #0]
 8005768:	e004      	b.n	8005774 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800576a:	4b05      	ldr	r3, [pc, #20]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 800576c:	695b      	ldr	r3, [r3, #20]
 800576e:	3301      	adds	r3, #1
 8005770:	4a03      	ldr	r2, [pc, #12]	@ (8005780 <_TrySendOverflowPacket+0xdc>)
 8005772:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005774:	693b      	ldr	r3, [r7, #16]
}
 8005776:	4618      	mov	r0, r3
 8005778:	3730      	adds	r7, #48	@ 0x30
 800577a:	46bd      	mov	sp, r7
 800577c:	bd80      	pop	{r7, pc}
 800577e:	bf00      	nop
 8005780:	2004c79c 	.word	0x2004c79c
 8005784:	e0001004 	.word	0xe0001004

08005788 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005788:	b580      	push	{r7, lr}
 800578a:	b08a      	sub	sp, #40	@ 0x28
 800578c:	af00      	add	r7, sp, #0
 800578e:	60f8      	str	r0, [r7, #12]
 8005790:	60b9      	str	r1, [r7, #8]
 8005792:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005794:	4b6c      	ldr	r3, [pc, #432]	@ (8005948 <_SendPacket+0x1c0>)
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	2b01      	cmp	r3, #1
 800579a:	d010      	beq.n	80057be <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800579c:	4b6a      	ldr	r3, [pc, #424]	@ (8005948 <_SendPacket+0x1c0>)
 800579e:	781b      	ldrb	r3, [r3, #0]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80a3 	beq.w	80058ec <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 80057a6:	4b68      	ldr	r3, [pc, #416]	@ (8005948 <_SendPacket+0x1c0>)
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	2b02      	cmp	r3, #2
 80057ac:	d109      	bne.n	80057c2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 80057ae:	f7ff ff79 	bl	80056a4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 80057b2:	4b65      	ldr	r3, [pc, #404]	@ (8005948 <_SendPacket+0x1c0>)
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	f040 809a 	bne.w	80058f0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 80057bc:	e001      	b.n	80057c2 <_SendPacket+0x3a>
    goto Send;
 80057be:	bf00      	nop
 80057c0:	e000      	b.n	80057c4 <_SendPacket+0x3c>
Send:
 80057c2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2b1f      	cmp	r3, #31
 80057c8:	d809      	bhi.n	80057de <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80057ca:	4b5f      	ldr	r3, [pc, #380]	@ (8005948 <_SendPacket+0x1c0>)
 80057cc:	69da      	ldr	r2, [r3, #28]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	fa22 f303 	lsr.w	r3, r2, r3
 80057d4:	f003 0301 	and.w	r3, r3, #1
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f040 808b 	bne.w	80058f4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b17      	cmp	r3, #23
 80057e2:	d807      	bhi.n	80057f4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	b2da      	uxtb	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	701a      	strb	r2, [r3, #0]
 80057f2:	e03d      	b.n	8005870 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	1ad3      	subs	r3, r2, r3
 80057fa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005800:	d912      	bls.n	8005828 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8005802:	69fb      	ldr	r3, [r7, #28]
 8005804:	09da      	lsrs	r2, r3, #7
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	3b01      	subs	r3, #1
 800580a:	60fb      	str	r3, [r7, #12]
 800580c:	b2d2      	uxtb	r2, r2
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	b2db      	uxtb	r3, r3
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	3a01      	subs	r2, #1
 800581a:	60fa      	str	r2, [r7, #12]
 800581c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005820:	b2da      	uxtb	r2, r3
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	701a      	strb	r2, [r3, #0]
 8005826:	e006      	b.n	8005836 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	3b01      	subs	r3, #1
 800582c:	60fb      	str	r3, [r7, #12]
 800582e:	69fb      	ldr	r3, [r7, #28]
 8005830:	b2da      	uxtb	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2b7f      	cmp	r3, #127	@ 0x7f
 800583a:	d912      	bls.n	8005862 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	09da      	lsrs	r2, r3, #7
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	3b01      	subs	r3, #1
 8005844:	60fb      	str	r3, [r7, #12]
 8005846:	b2d2      	uxtb	r2, r2
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	b2db      	uxtb	r3, r3
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	3a01      	subs	r2, #1
 8005854:	60fa      	str	r2, [r7, #12]
 8005856:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800585a:	b2da      	uxtb	r2, r3
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	701a      	strb	r2, [r3, #0]
 8005860:	e006      	b.n	8005870 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3b01      	subs	r3, #1
 8005866:	60fb      	str	r3, [r7, #12]
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	b2da      	uxtb	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005870:	4b36      	ldr	r3, [pc, #216]	@ (800594c <_SendPacket+0x1c4>)
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005876:	4b34      	ldr	r3, [pc, #208]	@ (8005948 <_SendPacket+0x1c0>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	69ba      	ldr	r2, [r7, #24]
 800587c:	1ad3      	subs	r3, r2, r3
 800587e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	627b      	str	r3, [r7, #36]	@ 0x24
 8005884:	697b      	ldr	r3, [r7, #20]
 8005886:	623b      	str	r3, [r7, #32]
 8005888:	e00b      	b.n	80058a2 <_SendPacket+0x11a>
 800588a:	6a3b      	ldr	r3, [r7, #32]
 800588c:	b2da      	uxtb	r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	1c59      	adds	r1, r3, #1
 8005892:	6279      	str	r1, [r7, #36]	@ 0x24
 8005894:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005898:	b2d2      	uxtb	r2, r2
 800589a:	701a      	strb	r2, [r3, #0]
 800589c:	6a3b      	ldr	r3, [r7, #32]
 800589e:	09db      	lsrs	r3, r3, #7
 80058a0:	623b      	str	r3, [r7, #32]
 80058a2:	6a3b      	ldr	r3, [r7, #32]
 80058a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058a6:	d8f0      	bhi.n	800588a <_SendPacket+0x102>
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	1c5a      	adds	r2, r3, #1
 80058ac:	627a      	str	r2, [r7, #36]	@ 0x24
 80058ae:	6a3a      	ldr	r2, [r7, #32]
 80058b0:	b2d2      	uxtb	r2, r2
 80058b2:	701a      	strb	r2, [r3, #0]
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 80058b8:	4b23      	ldr	r3, [pc, #140]	@ (8005948 <_SendPacket+0x1c0>)
 80058ba:	785b      	ldrb	r3, [r3, #1]
 80058bc:	4618      	mov	r0, r3
 80058be:	68ba      	ldr	r2, [r7, #8]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	1ad3      	subs	r3, r2, r3
 80058c4:	461a      	mov	r2, r3
 80058c6:	68f9      	ldr	r1, [r7, #12]
 80058c8:	f7fa fcaa 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80058cc:	4603      	mov	r3, r0
 80058ce:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d003      	beq.n	80058de <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80058d6:	4a1c      	ldr	r2, [pc, #112]	@ (8005948 <_SendPacket+0x1c0>)
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	60d3      	str	r3, [r2, #12]
 80058dc:	e00b      	b.n	80058f6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80058de:	4b1a      	ldr	r3, [pc, #104]	@ (8005948 <_SendPacket+0x1c0>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b18      	ldr	r3, [pc, #96]	@ (8005948 <_SendPacket+0x1c0>)
 80058e8:	701a      	strb	r2, [r3, #0]
 80058ea:	e004      	b.n	80058f6 <_SendPacket+0x16e>
    goto SendDone;
 80058ec:	bf00      	nop
 80058ee:	e002      	b.n	80058f6 <_SendPacket+0x16e>
      goto SendDone;
 80058f0:	bf00      	nop
 80058f2:	e000      	b.n	80058f6 <_SendPacket+0x16e>
      goto SendDone;
 80058f4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80058f6:	4b14      	ldr	r3, [pc, #80]	@ (8005948 <_SendPacket+0x1c0>)
 80058f8:	7e1b      	ldrb	r3, [r3, #24]
 80058fa:	4619      	mov	r1, r3
 80058fc:	4a14      	ldr	r2, [pc, #80]	@ (8005950 <_SendPacket+0x1c8>)
 80058fe:	460b      	mov	r3, r1
 8005900:	005b      	lsls	r3, r3, #1
 8005902:	440b      	add	r3, r1
 8005904:	00db      	lsls	r3, r3, #3
 8005906:	4413      	add	r3, r2
 8005908:	336c      	adds	r3, #108	@ 0x6c
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	4b0e      	ldr	r3, [pc, #56]	@ (8005948 <_SendPacket+0x1c0>)
 800590e:	7e1b      	ldrb	r3, [r3, #24]
 8005910:	4618      	mov	r0, r3
 8005912:	490f      	ldr	r1, [pc, #60]	@ (8005950 <_SendPacket+0x1c8>)
 8005914:	4603      	mov	r3, r0
 8005916:	005b      	lsls	r3, r3, #1
 8005918:	4403      	add	r3, r0
 800591a:	00db      	lsls	r3, r3, #3
 800591c:	440b      	add	r3, r1
 800591e:	3370      	adds	r3, #112	@ 0x70
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	429a      	cmp	r2, r3
 8005924:	d00b      	beq.n	800593e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005926:	4b08      	ldr	r3, [pc, #32]	@ (8005948 <_SendPacket+0x1c0>)
 8005928:	789b      	ldrb	r3, [r3, #2]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d107      	bne.n	800593e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800592e:	4b06      	ldr	r3, [pc, #24]	@ (8005948 <_SendPacket+0x1c0>)
 8005930:	2201      	movs	r2, #1
 8005932:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005934:	f7ff fe46 	bl	80055c4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005938:	4b03      	ldr	r3, [pc, #12]	@ (8005948 <_SendPacket+0x1c0>)
 800593a:	2200      	movs	r2, #0
 800593c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800593e:	bf00      	nop
 8005940:	3728      	adds	r7, #40	@ 0x28
 8005942:	46bd      	mov	sp, r7
 8005944:	bd80      	pop	{r7, pc}
 8005946:	bf00      	nop
 8005948:	2004c79c 	.word	0x2004c79c
 800594c:	e0001004 	.word	0xe0001004
 8005950:	2004b2dc 	.word	0x2004b2dc

08005954 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b08a      	sub	sp, #40	@ 0x28
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	691b      	ldr	r3, [r3, #16]
 8005964:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	3301      	adds	r3, #1
 800596a:	2b80      	cmp	r3, #128	@ 0x80
 800596c:	d80a      	bhi.n	8005984 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	1c59      	adds	r1, r3, #1
 8005974:	687a      	ldr	r2, [r7, #4]
 8005976:	6051      	str	r1, [r2, #4]
 8005978:	78fa      	ldrb	r2, [r7, #3]
 800597a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691b      	ldr	r3, [r3, #16]
 8005988:	2b80      	cmp	r3, #128	@ 0x80
 800598a:	d15a      	bne.n	8005a42 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	691a      	ldr	r2, [r3, #16]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	b2d2      	uxtb	r2, r2
 8005996:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	68db      	ldr	r3, [r3, #12]
 80059a2:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	e00b      	b.n	80059c6 <_StoreChar+0x72>
 80059ae:	6a3b      	ldr	r3, [r7, #32]
 80059b0:	b2da      	uxtb	r2, r3
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	1c59      	adds	r1, r3, #1
 80059b6:	6279      	str	r1, [r7, #36]	@ 0x24
 80059b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6a3b      	ldr	r3, [r7, #32]
 80059c2:	09db      	lsrs	r3, r3, #7
 80059c4:	623b      	str	r3, [r7, #32]
 80059c6:	6a3b      	ldr	r3, [r7, #32]
 80059c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80059ca:	d8f0      	bhi.n	80059ae <_StoreChar+0x5a>
 80059cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ce:	1c5a      	adds	r2, r3, #1
 80059d0:	627a      	str	r2, [r7, #36]	@ 0x24
 80059d2:	6a3a      	ldr	r2, [r7, #32]
 80059d4:	b2d2      	uxtb	r2, r2
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059da:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	61fb      	str	r3, [r7, #28]
 80059e0:	2300      	movs	r3, #0
 80059e2:	61bb      	str	r3, [r7, #24]
 80059e4:	e00b      	b.n	80059fe <_StoreChar+0xaa>
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	1c59      	adds	r1, r3, #1
 80059ee:	61f9      	str	r1, [r7, #28]
 80059f0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059f4:	b2d2      	uxtb	r2, r2
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	69bb      	ldr	r3, [r7, #24]
 80059fa:	09db      	lsrs	r3, r3, #7
 80059fc:	61bb      	str	r3, [r7, #24]
 80059fe:	69bb      	ldr	r3, [r7, #24]
 8005a00:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a02:	d8f0      	bhi.n	80059e6 <_StoreChar+0x92>
 8005a04:	69fb      	ldr	r3, [r7, #28]
 8005a06:	1c5a      	adds	r2, r3, #1
 8005a08:	61fa      	str	r2, [r7, #28]
 8005a0a:	69ba      	ldr	r2, [r7, #24]
 8005a0c:	b2d2      	uxtb	r2, r2
 8005a0e:	701a      	strb	r2, [r3, #0]
 8005a10:	69fb      	ldr	r3, [r7, #28]
 8005a12:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	221a      	movs	r2, #26
 8005a1a:	6939      	ldr	r1, [r7, #16]
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	f7ff feb3 	bl	8005788 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff fdbf 	bl	80055aa <_PreparePacket>
 8005a2c:	4602      	mov	r2, r0
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	689b      	ldr	r3, [r3, #8]
 8005a36:	1c5a      	adds	r2, r3, #1
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2200      	movs	r2, #0
 8005a40:	611a      	str	r2, [r3, #16]
  }
}
 8005a42:	bf00      	nop
 8005a44:	3728      	adds	r7, #40	@ 0x28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	bd80      	pop	{r7, pc}
	...

08005a4c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b08a      	sub	sp, #40	@ 0x28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	60b9      	str	r1, [r7, #8]
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005a62:	2301      	movs	r3, #1
 8005a64:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a66:	e007      	b.n	8005a78 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005a68:	6a3a      	ldr	r2, [r7, #32]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a70:	623b      	str	r3, [r7, #32]
    Width++;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	3301      	adds	r3, #1
 8005a76:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005a78:	6a3a      	ldr	r2, [r7, #32]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d2f3      	bcs.n	8005a68 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005a80:	683a      	ldr	r2, [r7, #0]
 8005a82:	69fb      	ldr	r3, [r7, #28]
 8005a84:	429a      	cmp	r2, r3
 8005a86:	d901      	bls.n	8005a8c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a8e:	f003 0301 	and.w	r3, r3, #1
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d000      	beq.n	8005a98 <_PrintUnsigned+0x4c>
 8005a96:	e01f      	b.n	8005ad8 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005a98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d01c      	beq.n	8005ad8 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005a9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aa0:	f003 0302 	and.w	r3, r3, #2
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <_PrintUnsigned+0x68>
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d102      	bne.n	8005ab4 <_PrintUnsigned+0x68>
        c = '0';
 8005aae:	2330      	movs	r3, #48	@ 0x30
 8005ab0:	76fb      	strb	r3, [r7, #27]
 8005ab2:	e001      	b.n	8005ab8 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005ab4:	2320      	movs	r3, #32
 8005ab6:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ab8:	e007      	b.n	8005aca <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005aba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005abc:	3b01      	subs	r3, #1
 8005abe:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005ac0:	7efb      	ldrb	r3, [r7, #27]
 8005ac2:	4619      	mov	r1, r3
 8005ac4:	68f8      	ldr	r0, [r7, #12]
 8005ac6:	f7ff ff45 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d003      	beq.n	8005ad8 <_PrintUnsigned+0x8c>
 8005ad0:	69fa      	ldr	r2, [r7, #28]
 8005ad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ad4:	429a      	cmp	r2, r3
 8005ad6:	d3f0      	bcc.n	8005aba <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d903      	bls.n	8005ae6 <_PrintUnsigned+0x9a>
      NumDigits--;
 8005ade:	683b      	ldr	r3, [r7, #0]
 8005ae0:	3b01      	subs	r3, #1
 8005ae2:	603b      	str	r3, [r7, #0]
 8005ae4:	e009      	b.n	8005afa <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 8005ae6:	68ba      	ldr	r2, [r7, #8]
 8005ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aea:	fbb2 f3f3 	udiv	r3, r2, r3
 8005aee:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d200      	bcs.n	8005afa <_PrintUnsigned+0xae>
        break;
 8005af8:	e005      	b.n	8005b06 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	687a      	ldr	r2, [r7, #4]
 8005afe:	fb02 f303 	mul.w	r3, r2, r3
 8005b02:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005b04:	e7e8      	b.n	8005ad8 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 8005b06:	68ba      	ldr	r2, [r7, #8]
 8005b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b14:	fb02 f303 	mul.w	r3, r2, r3
 8005b18:	68ba      	ldr	r2, [r7, #8]
 8005b1a:	1ad3      	subs	r3, r2, r3
 8005b1c:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <_PrintUnsigned+0x128>)
 8005b20:	697b      	ldr	r3, [r7, #20]
 8005b22:	4413      	add	r3, r2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	4619      	mov	r1, r3
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f7ff ff13 	bl	8005954 <_StoreChar>
    Digit /= Base;
 8005b2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b36:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1e3      	bne.n	8005b06 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b40:	f003 0301 	and.w	r3, r3, #1
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d011      	beq.n	8005b6c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d00e      	beq.n	8005b6c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b4e:	e006      	b.n	8005b5e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005b50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b52:	3b01      	subs	r3, #1
 8005b54:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005b56:	2120      	movs	r1, #32
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fefb 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d003      	beq.n	8005b6c <_PrintUnsigned+0x120>
 8005b64:	69fa      	ldr	r2, [r7, #28]
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d3f1      	bcc.n	8005b50 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005b6c:	bf00      	nop
 8005b6e:	3728      	adds	r7, #40	@ 0x28
 8005b70:	46bd      	mov	sp, r7
 8005b72:	bd80      	pop	{r7, pc}
 8005b74:	08007250 	.word	0x08007250

08005b78 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b088      	sub	sp, #32
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
 8005b84:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005b86:	68bb      	ldr	r3, [r7, #8]
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	bfb8      	it	lt
 8005b8c:	425b      	neglt	r3, r3
 8005b8e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005b90:	2301      	movs	r3, #1
 8005b92:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005b94:	e007      	b.n	8005ba6 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	693a      	ldr	r2, [r7, #16]
 8005b9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005b9e:	613b      	str	r3, [r7, #16]
    Width++;
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	693a      	ldr	r2, [r7, #16]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	daf3      	bge.n	8005b96 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005bae:	683a      	ldr	r2, [r7, #0]
 8005bb0:	697b      	ldr	r3, [r7, #20]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d901      	bls.n	8005bba <_PrintInt+0x42>
    Width = NumDigits;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005bba:	6a3b      	ldr	r3, [r7, #32]
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d00a      	beq.n	8005bd6 <_PrintInt+0x5e>
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	db04      	blt.n	8005bd0 <_PrintInt+0x58>
 8005bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d002      	beq.n	8005bd6 <_PrintInt+0x5e>
    FieldWidth--;
 8005bd0:	6a3b      	ldr	r3, [r7, #32]
 8005bd2:	3b01      	subs	r3, #1
 8005bd4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd8:	f003 0302 	and.w	r3, r3, #2
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d002      	beq.n	8005be6 <_PrintInt+0x6e>
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d016      	beq.n	8005c14 <_PrintInt+0x9c>
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	f003 0301 	and.w	r3, r3, #1
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d111      	bne.n	8005c14 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005bf0:	6a3b      	ldr	r3, [r7, #32]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00e      	beq.n	8005c14 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005bf6:	e006      	b.n	8005c06 <_PrintInt+0x8e>
        FieldWidth--;
 8005bf8:	6a3b      	ldr	r3, [r7, #32]
 8005bfa:	3b01      	subs	r3, #1
 8005bfc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005bfe:	2120      	movs	r1, #32
 8005c00:	68f8      	ldr	r0, [r7, #12]
 8005c02:	f7ff fea7 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c06:	6a3b      	ldr	r3, [r7, #32]
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d003      	beq.n	8005c14 <_PrintInt+0x9c>
 8005c0c:	697a      	ldr	r2, [r7, #20]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]
 8005c10:	429a      	cmp	r2, r3
 8005c12:	d3f1      	bcc.n	8005bf8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da07      	bge.n	8005c2a <_PrintInt+0xb2>
    v = -v;
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	425b      	negs	r3, r3
 8005c1e:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005c20:	212d      	movs	r1, #45	@ 0x2d
 8005c22:	68f8      	ldr	r0, [r7, #12]
 8005c24:	f7ff fe96 	bl	8005954 <_StoreChar>
 8005c28:	e008      	b.n	8005c3c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c2c:	f003 0304 	and.w	r3, r3, #4
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d003      	beq.n	8005c3c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005c34:	212b      	movs	r1, #43	@ 0x2b
 8005c36:	68f8      	ldr	r0, [r7, #12]
 8005c38:	f7ff fe8c 	bl	8005954 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3e:	f003 0302 	and.w	r3, r3, #2
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d019      	beq.n	8005c7a <_PrintInt+0x102>
 8005c46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d114      	bne.n	8005c7a <_PrintInt+0x102>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d111      	bne.n	8005c7a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005c56:	6a3b      	ldr	r3, [r7, #32]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d00e      	beq.n	8005c7a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c5c:	e006      	b.n	8005c6c <_PrintInt+0xf4>
        FieldWidth--;
 8005c5e:	6a3b      	ldr	r3, [r7, #32]
 8005c60:	3b01      	subs	r3, #1
 8005c62:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005c64:	2130      	movs	r1, #48	@ 0x30
 8005c66:	68f8      	ldr	r0, [r7, #12]
 8005c68:	f7ff fe74 	bl	8005954 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005c6c:	6a3b      	ldr	r3, [r7, #32]
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d003      	beq.n	8005c7a <_PrintInt+0x102>
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	6a3b      	ldr	r3, [r7, #32]
 8005c76:	429a      	cmp	r2, r3
 8005c78:	d3f1      	bcc.n	8005c5e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c7e:	9301      	str	r3, [sp, #4]
 8005c80:	6a3b      	ldr	r3, [r7, #32]
 8005c82:	9300      	str	r3, [sp, #0]
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	687a      	ldr	r2, [r7, #4]
 8005c88:	68f8      	ldr	r0, [r7, #12]
 8005c8a:	f7ff fedf 	bl	8005a4c <_PrintUnsigned>
}
 8005c8e:	bf00      	nop
 8005c90:	3718      	adds	r7, #24
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
	...

08005c98 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b098      	sub	sp, #96	@ 0x60
 8005c9c:	af02      	add	r7, sp, #8
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ca4:	f3ef 8311 	mrs	r3, BASEPRI
 8005ca8:	f04f 0120 	mov.w	r1, #32
 8005cac:	f381 8811 	msr	BASEPRI, r1
 8005cb0:	633b      	str	r3, [r7, #48]	@ 0x30
 8005cb2:	48b7      	ldr	r0, [pc, #732]	@ (8005f90 <_VPrintTarget+0x2f8>)
 8005cb4:	f7ff fc79 	bl	80055aa <_PreparePacket>
 8005cb8:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005cba:	4bb5      	ldr	r3, [pc, #724]	@ (8005f90 <_VPrintTarget+0x2f8>)
 8005cbc:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005cc4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005cc6:	69fb      	ldr	r3, [r7, #28]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	781b      	ldrb	r3, [r3, #0]
 8005cd4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	3301      	adds	r3, #1
 8005cdc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005cde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	f000 8183 	beq.w	8005fee <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005ce8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cec:	2b25      	cmp	r3, #37	@ 0x25
 8005cee:	f040 8170 	bne.w	8005fd2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	781b      	ldrb	r3, [r3, #0]
 8005cfe:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005d02:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d06:	3b23      	subs	r3, #35	@ 0x23
 8005d08:	2b0d      	cmp	r3, #13
 8005d0a:	d83f      	bhi.n	8005d8c <_VPrintTarget+0xf4>
 8005d0c:	a201      	add	r2, pc, #4	@ (adr r2, 8005d14 <_VPrintTarget+0x7c>)
 8005d0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d12:	bf00      	nop
 8005d14:	08005d7d 	.word	0x08005d7d
 8005d18:	08005d8d 	.word	0x08005d8d
 8005d1c:	08005d8d 	.word	0x08005d8d
 8005d20:	08005d8d 	.word	0x08005d8d
 8005d24:	08005d8d 	.word	0x08005d8d
 8005d28:	08005d8d 	.word	0x08005d8d
 8005d2c:	08005d8d 	.word	0x08005d8d
 8005d30:	08005d8d 	.word	0x08005d8d
 8005d34:	08005d6d 	.word	0x08005d6d
 8005d38:	08005d8d 	.word	0x08005d8d
 8005d3c:	08005d4d 	.word	0x08005d4d
 8005d40:	08005d8d 	.word	0x08005d8d
 8005d44:	08005d8d 	.word	0x08005d8d
 8005d48:	08005d5d 	.word	0x08005d5d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005d4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d4e:	f043 0301 	orr.w	r3, r3, #1
 8005d52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	3301      	adds	r3, #1
 8005d58:	60fb      	str	r3, [r7, #12]
 8005d5a:	e01a      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005d5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d5e:	f043 0302 	orr.w	r3, r3, #2
 8005d62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]
 8005d6a:	e012      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005d6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d6e:	f043 0304 	orr.w	r3, r3, #4
 8005d72:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]
 8005d7a:	e00a      	b.n	8005d92 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005d7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d7e:	f043 0308 	orr.w	r3, r3, #8
 8005d82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	3301      	adds	r3, #1
 8005d88:	60fb      	str	r3, [r7, #12]
 8005d8a:	e002      	b.n	8005d92 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d90:	bf00      	nop
        }
      } while (v);
 8005d92:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1b0      	bne.n	8005cfa <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005da4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005da8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005daa:	d912      	bls.n	8005dd2 <_VPrintTarget+0x13a>
 8005dac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005db0:	2b39      	cmp	r3, #57	@ 0x39
 8005db2:	d80e      	bhi.n	8005dd2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	3301      	adds	r3, #1
 8005db8:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005dba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005dbc:	4613      	mov	r3, r2
 8005dbe:	009b      	lsls	r3, r3, #2
 8005dc0:	4413      	add	r3, r2
 8005dc2:	005b      	lsls	r3, r3, #1
 8005dc4:	461a      	mov	r2, r3
 8005dc6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005dca:	4413      	add	r3, r2
 8005dcc:	3b30      	subs	r3, #48	@ 0x30
 8005dce:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005dd0:	e7e4      	b.n	8005d9c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	781b      	ldrb	r3, [r3, #0]
 8005dda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005dde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005de2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005de4:	d11d      	bne.n	8005e22 <_VPrintTarget+0x18a>
        sFormat++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005df4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005df8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005dfa:	d912      	bls.n	8005e22 <_VPrintTarget+0x18a>
 8005dfc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e00:	2b39      	cmp	r3, #57	@ 0x39
 8005e02:	d80e      	bhi.n	8005e22 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	3301      	adds	r3, #1
 8005e08:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005e0a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	4413      	add	r3, r2
 8005e12:	005b      	lsls	r3, r3, #1
 8005e14:	461a      	mov	r2, r3
 8005e16:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e1a:	4413      	add	r3, r2
 8005e1c:	3b30      	subs	r3, #48	@ 0x30
 8005e1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005e20:	e7e4      	b.n	8005dec <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	781b      	ldrb	r3, [r3, #0]
 8005e26:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005e2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e2e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005e30:	d003      	beq.n	8005e3a <_VPrintTarget+0x1a2>
 8005e32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e36:	2b68      	cmp	r3, #104	@ 0x68
 8005e38:	d107      	bne.n	8005e4a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	3301      	adds	r3, #1
 8005e46:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005e48:	e7ef      	b.n	8005e2a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e4e:	2b25      	cmp	r3, #37	@ 0x25
 8005e50:	f000 80b3 	beq.w	8005fba <_VPrintTarget+0x322>
 8005e54:	2b25      	cmp	r3, #37	@ 0x25
 8005e56:	f2c0 80b7 	blt.w	8005fc8 <_VPrintTarget+0x330>
 8005e5a:	2b78      	cmp	r3, #120	@ 0x78
 8005e5c:	f300 80b4 	bgt.w	8005fc8 <_VPrintTarget+0x330>
 8005e60:	2b58      	cmp	r3, #88	@ 0x58
 8005e62:	f2c0 80b1 	blt.w	8005fc8 <_VPrintTarget+0x330>
 8005e66:	3b58      	subs	r3, #88	@ 0x58
 8005e68:	2b20      	cmp	r3, #32
 8005e6a:	f200 80ad 	bhi.w	8005fc8 <_VPrintTarget+0x330>
 8005e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e74 <_VPrintTarget+0x1dc>)
 8005e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e74:	08005f6b 	.word	0x08005f6b
 8005e78:	08005fc9 	.word	0x08005fc9
 8005e7c:	08005fc9 	.word	0x08005fc9
 8005e80:	08005fc9 	.word	0x08005fc9
 8005e84:	08005fc9 	.word	0x08005fc9
 8005e88:	08005fc9 	.word	0x08005fc9
 8005e8c:	08005fc9 	.word	0x08005fc9
 8005e90:	08005fc9 	.word	0x08005fc9
 8005e94:	08005fc9 	.word	0x08005fc9
 8005e98:	08005fc9 	.word	0x08005fc9
 8005e9c:	08005fc9 	.word	0x08005fc9
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f1f 	.word	0x08005f1f
 8005ea8:	08005fc9 	.word	0x08005fc9
 8005eac:	08005fc9 	.word	0x08005fc9
 8005eb0:	08005fc9 	.word	0x08005fc9
 8005eb4:	08005fc9 	.word	0x08005fc9
 8005eb8:	08005fc9 	.word	0x08005fc9
 8005ebc:	08005fc9 	.word	0x08005fc9
 8005ec0:	08005fc9 	.word	0x08005fc9
 8005ec4:	08005fc9 	.word	0x08005fc9
 8005ec8:	08005fc9 	.word	0x08005fc9
 8005ecc:	08005fc9 	.word	0x08005fc9
 8005ed0:	08005fc9 	.word	0x08005fc9
 8005ed4:	08005f95 	.word	0x08005f95
 8005ed8:	08005fc9 	.word	0x08005fc9
 8005edc:	08005fc9 	.word	0x08005fc9
 8005ee0:	08005fc9 	.word	0x08005fc9
 8005ee4:	08005fc9 	.word	0x08005fc9
 8005ee8:	08005f45 	.word	0x08005f45
 8005eec:	08005fc9 	.word	0x08005fc9
 8005ef0:	08005fc9 	.word	0x08005fc9
 8005ef4:	08005f6b 	.word	0x08005f6b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	1d19      	adds	r1, r3, #4
 8005efe:	687a      	ldr	r2, [r7, #4]
 8005f00:	6011      	str	r1, [r2, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005f06:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005f08:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005f0c:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005f10:	f107 0314 	add.w	r3, r7, #20
 8005f14:	4611      	mov	r1, r2
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7ff fd1c 	bl	8005954 <_StoreChar>
        break;
 8005f1c:	e055      	b.n	8005fca <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	1d19      	adds	r1, r3, #4
 8005f24:	687a      	ldr	r2, [r7, #4]
 8005f26:	6011      	str	r1, [r2, #0]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f2c:	f107 0014 	add.w	r0, r7, #20
 8005f30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f32:	9301      	str	r3, [sp, #4]
 8005f34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f36:	9300      	str	r3, [sp, #0]
 8005f38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f3a:	220a      	movs	r2, #10
 8005f3c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f3e:	f7ff fe1b 	bl	8005b78 <_PrintInt>
        break;
 8005f42:	e042      	b.n	8005fca <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	1d19      	adds	r1, r3, #4
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	6011      	str	r1, [r2, #0]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005f52:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f54:	f107 0014 	add.w	r0, r7, #20
 8005f58:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f5a:	9301      	str	r3, [sp, #4]
 8005f5c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f5e:	9300      	str	r3, [sp, #0]
 8005f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f62:	220a      	movs	r2, #10
 8005f64:	f7ff fd72 	bl	8005a4c <_PrintUnsigned>
        break;
 8005f68:	e02f      	b.n	8005fca <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	1d19      	adds	r1, r3, #4
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6011      	str	r1, [r2, #0]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005f78:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005f7a:	f107 0014 	add.w	r0, r7, #20
 8005f7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f80:	9301      	str	r3, [sp, #4]
 8005f82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f84:	9300      	str	r3, [sp, #0]
 8005f86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f88:	2210      	movs	r2, #16
 8005f8a:	f7ff fd5f 	bl	8005a4c <_PrintUnsigned>
        break;
 8005f8e:	e01c      	b.n	8005fca <_VPrintTarget+0x332>
 8005f90:	2004c7cc 	.word	0x2004c7cc
      case 'p':
        v = va_arg(*pParamList, int);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	1d19      	adds	r1, r3, #4
 8005f9a:	687a      	ldr	r2, [r7, #4]
 8005f9c:	6011      	str	r1, [r2, #0]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005fa2:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005fa4:	f107 0014 	add.w	r0, r7, #20
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9301      	str	r3, [sp, #4]
 8005fac:	2308      	movs	r3, #8
 8005fae:	9300      	str	r3, [sp, #0]
 8005fb0:	2308      	movs	r3, #8
 8005fb2:	2210      	movs	r2, #16
 8005fb4:	f7ff fd4a 	bl	8005a4c <_PrintUnsigned>
        break;
 8005fb8:	e007      	b.n	8005fca <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005fba:	f107 0314 	add.w	r3, r7, #20
 8005fbe:	2125      	movs	r1, #37	@ 0x25
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	f7ff fcc7 	bl	8005954 <_StoreChar>
        break;
 8005fc6:	e000      	b.n	8005fca <_VPrintTarget+0x332>
      default:
        break;
 8005fc8:	bf00      	nop
      }
      sFormat++;
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	e007      	b.n	8005fe2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005fd2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005fd6:	f107 0314 	add.w	r3, r7, #20
 8005fda:	4611      	mov	r1, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f7ff fcb9 	bl	8005954 <_StoreChar>
    }
  } while (*sFormat);
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	781b      	ldrb	r3, [r3, #0]
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	f47f ae72 	bne.w	8005cd0 <_VPrintTarget+0x38>
 8005fec:	e000      	b.n	8005ff0 <_VPrintTarget+0x358>
      break;
 8005fee:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d041      	beq.n	800607a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005ff6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	b2d2      	uxtb	r2, r2
 8005ffc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	643b      	str	r3, [r7, #64]	@ 0x40
 8006002:	6a3b      	ldr	r3, [r7, #32]
 8006004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006006:	e00b      	b.n	8006020 <_VPrintTarget+0x388>
 8006008:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800600a:	b2da      	uxtb	r2, r3
 800600c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800600e:	1c59      	adds	r1, r3, #1
 8006010:	6439      	str	r1, [r7, #64]	@ 0x40
 8006012:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006016:	b2d2      	uxtb	r2, r2
 8006018:	701a      	strb	r2, [r3, #0]
 800601a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800601c:	09db      	lsrs	r3, r3, #7
 800601e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006022:	2b7f      	cmp	r3, #127	@ 0x7f
 8006024:	d8f0      	bhi.n	8006008 <_VPrintTarget+0x370>
 8006026:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006028:	1c5a      	adds	r2, r3, #1
 800602a:	643a      	str	r2, [r7, #64]	@ 0x40
 800602c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800602e:	b2d2      	uxtb	r2, r2
 8006030:	701a      	strb	r2, [r3, #0]
 8006032:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006034:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8006036:	69bb      	ldr	r3, [r7, #24]
 8006038:	63bb      	str	r3, [r7, #56]	@ 0x38
 800603a:	2300      	movs	r3, #0
 800603c:	637b      	str	r3, [r7, #52]	@ 0x34
 800603e:	e00b      	b.n	8006058 <_VPrintTarget+0x3c0>
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	b2da      	uxtb	r2, r3
 8006044:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006046:	1c59      	adds	r1, r3, #1
 8006048:	63b9      	str	r1, [r7, #56]	@ 0x38
 800604a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800604e:	b2d2      	uxtb	r2, r2
 8006050:	701a      	strb	r2, [r3, #0]
 8006052:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006054:	09db      	lsrs	r3, r3, #7
 8006056:	637b      	str	r3, [r7, #52]	@ 0x34
 8006058:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605a:	2b7f      	cmp	r3, #127	@ 0x7f
 800605c:	d8f0      	bhi.n	8006040 <_VPrintTarget+0x3a8>
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	1c5a      	adds	r2, r3, #1
 8006062:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006064:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]
 800606a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800606c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	69b9      	ldr	r1, [r7, #24]
 8006072:	221a      	movs	r2, #26
 8006074:	4618      	mov	r0, r3
 8006076:	f7ff fb87 	bl	8005788 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8006080:	bf00      	nop
 8006082:	3758      	adds	r7, #88	@ 0x58
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
 8006094:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8006096:	2300      	movs	r3, #0
 8006098:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800609c:	4917      	ldr	r1, [pc, #92]	@ (80060fc <SEGGER_SYSVIEW_Init+0x74>)
 800609e:	4818      	ldr	r0, [pc, #96]	@ (8006100 <SEGGER_SYSVIEW_Init+0x78>)
 80060a0:	f7ff f942 	bl	8005328 <SEGGER_RTT_AllocUpBuffer>
 80060a4:	4603      	mov	r3, r0
 80060a6:	b2da      	uxtb	r2, r3
 80060a8:	4b16      	ldr	r3, [pc, #88]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060aa:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80060ac:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ae:	785a      	ldrb	r2, [r3, #1]
 80060b0:	4b14      	ldr	r3, [pc, #80]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b2:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80060b4:	4b13      	ldr	r3, [pc, #76]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060b6:	7e1b      	ldrb	r3, [r3, #24]
 80060b8:	4618      	mov	r0, r3
 80060ba:	2300      	movs	r3, #0
 80060bc:	9300      	str	r3, [sp, #0]
 80060be:	2308      	movs	r3, #8
 80060c0:	4a11      	ldr	r2, [pc, #68]	@ (8006108 <SEGGER_SYSVIEW_Init+0x80>)
 80060c2:	490f      	ldr	r1, [pc, #60]	@ (8006100 <SEGGER_SYSVIEW_Init+0x78>)
 80060c4:	f7ff f9b4 	bl	8005430 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 80060c8:	4b0e      	ldr	r3, [pc, #56]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80060ce:	4b0f      	ldr	r3, [pc, #60]	@ (800610c <SEGGER_SYSVIEW_Init+0x84>)
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a0c      	ldr	r2, [pc, #48]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 80060d6:	4a0b      	ldr	r2, [pc, #44]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 80060dc:	4a09      	ldr	r2, [pc, #36]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 80060e2:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 80060e8:	4a06      	ldr	r2, [pc, #24]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 80060ee:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <SEGGER_SYSVIEW_Init+0x7c>)
 80060f0:	2200      	movs	r2, #0
 80060f2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 80060f4:	bf00      	nop
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}
 80060fc:	2004b794 	.word	0x2004b794
 8006100:	0800721c 	.word	0x0800721c
 8006104:	2004c79c 	.word	0x2004c79c
 8006108:	2004c794 	.word	0x2004c794
 800610c:	e0001004 	.word	0xe0001004

08006110 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8006118:	4a04      	ldr	r2, [pc, #16]	@ (800612c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6113      	str	r3, [r2, #16]
}
 800611e:	bf00      	nop
 8006120:	370c      	adds	r7, #12
 8006122:	46bd      	mov	sp, r7
 8006124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop
 800612c:	2004c79c 	.word	0x2004c79c

08006130 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006138:	f3ef 8311 	mrs	r3, BASEPRI
 800613c:	f04f 0120 	mov.w	r1, #32
 8006140:	f381 8811 	msr	BASEPRI, r1
 8006144:	60fb      	str	r3, [r7, #12]
 8006146:	4808      	ldr	r0, [pc, #32]	@ (8006168 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006148:	f7ff fa2f 	bl	80055aa <_PreparePacket>
 800614c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800614e:	687a      	ldr	r2, [r7, #4]
 8006150:	68b9      	ldr	r1, [r7, #8]
 8006152:	68b8      	ldr	r0, [r7, #8]
 8006154:	f7ff fb18 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f383 8811 	msr	BASEPRI, r3
}
 800615e:	bf00      	nop
 8006160:	3710      	adds	r7, #16
 8006162:	46bd      	mov	sp, r7
 8006164:	bd80      	pop	{r7, pc}
 8006166:	bf00      	nop
 8006168:	2004c7cc 	.word	0x2004c7cc

0800616c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800616c:	b580      	push	{r7, lr}
 800616e:	b088      	sub	sp, #32
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
 8006174:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006176:	f3ef 8311 	mrs	r3, BASEPRI
 800617a:	f04f 0120 	mov.w	r1, #32
 800617e:	f381 8811 	msr	BASEPRI, r1
 8006182:	617b      	str	r3, [r7, #20]
 8006184:	4816      	ldr	r0, [pc, #88]	@ (80061e0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006186:	f7ff fa10 	bl	80055aa <_PreparePacket>
 800618a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800618c:	693b      	ldr	r3, [r7, #16]
 800618e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	683b      	ldr	r3, [r7, #0]
 8006196:	61bb      	str	r3, [r7, #24]
 8006198:	e00b      	b.n	80061b2 <SEGGER_SYSVIEW_RecordU32+0x46>
 800619a:	69bb      	ldr	r3, [r7, #24]
 800619c:	b2da      	uxtb	r2, r3
 800619e:	69fb      	ldr	r3, [r7, #28]
 80061a0:	1c59      	adds	r1, r3, #1
 80061a2:	61f9      	str	r1, [r7, #28]
 80061a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061a8:	b2d2      	uxtb	r2, r2
 80061aa:	701a      	strb	r2, [r3, #0]
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	09db      	lsrs	r3, r3, #7
 80061b0:	61bb      	str	r3, [r7, #24]
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061b6:	d8f0      	bhi.n	800619a <SEGGER_SYSVIEW_RecordU32+0x2e>
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	1c5a      	adds	r2, r3, #1
 80061bc:	61fa      	str	r2, [r7, #28]
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	b2d2      	uxtb	r2, r2
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80061c8:	687a      	ldr	r2, [r7, #4]
 80061ca:	68f9      	ldr	r1, [r7, #12]
 80061cc:	6938      	ldr	r0, [r7, #16]
 80061ce:	f7ff fadb 	bl	8005788 <_SendPacket>
  RECORD_END();
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	f383 8811 	msr	BASEPRI, r3
}
 80061d8:	bf00      	nop
 80061da:	3720      	adds	r7, #32
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	2004c7cc 	.word	0x2004c7cc

080061e4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b08c      	sub	sp, #48	@ 0x30
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	60f8      	str	r0, [r7, #12]
 80061ec:	60b9      	str	r1, [r7, #8]
 80061ee:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80061f0:	f3ef 8311 	mrs	r3, BASEPRI
 80061f4:	f04f 0120 	mov.w	r1, #32
 80061f8:	f381 8811 	msr	BASEPRI, r1
 80061fc:	61fb      	str	r3, [r7, #28]
 80061fe:	4825      	ldr	r0, [pc, #148]	@ (8006294 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8006200:	f7ff f9d3 	bl	80055aa <_PreparePacket>
 8006204:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006212:	e00b      	b.n	800622c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8006214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006216:	b2da      	uxtb	r2, r3
 8006218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800621a:	1c59      	adds	r1, r3, #1
 800621c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800621e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006228:	09db      	lsrs	r3, r3, #7
 800622a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800622c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006230:	d8f0      	bhi.n	8006214 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006234:	1c5a      	adds	r2, r3, #1
 8006236:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006238:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800623a:	b2d2      	uxtb	r2, r2
 800623c:	701a      	strb	r2, [r3, #0]
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	627b      	str	r3, [r7, #36]	@ 0x24
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	623b      	str	r3, [r7, #32]
 800624a:	e00b      	b.n	8006264 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800624c:	6a3b      	ldr	r3, [r7, #32]
 800624e:	b2da      	uxtb	r2, r3
 8006250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006252:	1c59      	adds	r1, r3, #1
 8006254:	6279      	str	r1, [r7, #36]	@ 0x24
 8006256:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800625a:	b2d2      	uxtb	r2, r2
 800625c:	701a      	strb	r2, [r3, #0]
 800625e:	6a3b      	ldr	r3, [r7, #32]
 8006260:	09db      	lsrs	r3, r3, #7
 8006262:	623b      	str	r3, [r7, #32]
 8006264:	6a3b      	ldr	r3, [r7, #32]
 8006266:	2b7f      	cmp	r3, #127	@ 0x7f
 8006268:	d8f0      	bhi.n	800624c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800626a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626c:	1c5a      	adds	r2, r3, #1
 800626e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006270:	6a3a      	ldr	r2, [r7, #32]
 8006272:	b2d2      	uxtb	r2, r2
 8006274:	701a      	strb	r2, [r3, #0]
 8006276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006278:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800627a:	68fa      	ldr	r2, [r7, #12]
 800627c:	6979      	ldr	r1, [r7, #20]
 800627e:	69b8      	ldr	r0, [r7, #24]
 8006280:	f7ff fa82 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	f383 8811 	msr	BASEPRI, r3
}
 800628a:	bf00      	nop
 800628c:	3730      	adds	r7, #48	@ 0x30
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	2004c7cc 	.word	0x2004c7cc

08006298 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006298:	b580      	push	{r7, lr}
 800629a:	b08e      	sub	sp, #56	@ 0x38
 800629c:	af00      	add	r7, sp, #0
 800629e:	60f8      	str	r0, [r7, #12]
 80062a0:	60b9      	str	r1, [r7, #8]
 80062a2:	607a      	str	r2, [r7, #4]
 80062a4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80062a6:	f3ef 8311 	mrs	r3, BASEPRI
 80062aa:	f04f 0120 	mov.w	r1, #32
 80062ae:	f381 8811 	msr	BASEPRI, r1
 80062b2:	61fb      	str	r3, [r7, #28]
 80062b4:	4832      	ldr	r0, [pc, #200]	@ (8006380 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80062b6:	f7ff f978 	bl	80055aa <_PreparePacket>
 80062ba:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80062bc:	69bb      	ldr	r3, [r7, #24]
 80062be:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	633b      	str	r3, [r7, #48]	@ 0x30
 80062c8:	e00b      	b.n	80062e2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80062ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062cc:	b2da      	uxtb	r2, r3
 80062ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d0:	1c59      	adds	r1, r3, #1
 80062d2:	6379      	str	r1, [r7, #52]	@ 0x34
 80062d4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062d8:	b2d2      	uxtb	r2, r2
 80062da:	701a      	strb	r2, [r3, #0]
 80062dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062de:	09db      	lsrs	r3, r3, #7
 80062e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062e6:	d8f0      	bhi.n	80062ca <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80062e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ea:	1c5a      	adds	r2, r3, #1
 80062ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80062ee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062f6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006300:	e00b      	b.n	800631a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8006302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006304:	b2da      	uxtb	r2, r3
 8006306:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006308:	1c59      	adds	r1, r3, #1
 800630a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800630c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006310:	b2d2      	uxtb	r2, r2
 8006312:	701a      	strb	r2, [r3, #0]
 8006314:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006316:	09db      	lsrs	r3, r3, #7
 8006318:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631c:	2b7f      	cmp	r3, #127	@ 0x7f
 800631e:	d8f0      	bhi.n	8006302 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006320:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006322:	1c5a      	adds	r2, r3, #1
 8006324:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006326:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006328:	b2d2      	uxtb	r2, r2
 800632a:	701a      	strb	r2, [r3, #0]
 800632c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800632e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	627b      	str	r3, [r7, #36]	@ 0x24
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	623b      	str	r3, [r7, #32]
 8006338:	e00b      	b.n	8006352 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800633a:	6a3b      	ldr	r3, [r7, #32]
 800633c:	b2da      	uxtb	r2, r3
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	1c59      	adds	r1, r3, #1
 8006342:	6279      	str	r1, [r7, #36]	@ 0x24
 8006344:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006348:	b2d2      	uxtb	r2, r2
 800634a:	701a      	strb	r2, [r3, #0]
 800634c:	6a3b      	ldr	r3, [r7, #32]
 800634e:	09db      	lsrs	r3, r3, #7
 8006350:	623b      	str	r3, [r7, #32]
 8006352:	6a3b      	ldr	r3, [r7, #32]
 8006354:	2b7f      	cmp	r3, #127	@ 0x7f
 8006356:	d8f0      	bhi.n	800633a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635a:	1c5a      	adds	r2, r3, #1
 800635c:	627a      	str	r2, [r7, #36]	@ 0x24
 800635e:	6a3a      	ldr	r2, [r7, #32]
 8006360:	b2d2      	uxtb	r2, r2
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006366:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	6979      	ldr	r1, [r7, #20]
 800636c:	69b8      	ldr	r0, [r7, #24]
 800636e:	f7ff fa0b 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006372:	69fb      	ldr	r3, [r7, #28]
 8006374:	f383 8811 	msr	BASEPRI, r3
}
 8006378:	bf00      	nop
 800637a:	3738      	adds	r7, #56	@ 0x38
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	2004c7cc 	.word	0x2004c7cc

08006384 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006384:	b580      	push	{r7, lr}
 8006386:	b090      	sub	sp, #64	@ 0x40
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006392:	f3ef 8311 	mrs	r3, BASEPRI
 8006396:	f04f 0120 	mov.w	r1, #32
 800639a:	f381 8811 	msr	BASEPRI, r1
 800639e:	61fb      	str	r3, [r7, #28]
 80063a0:	4840      	ldr	r0, [pc, #256]	@ (80064a4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 80063a2:	f7ff f902 	bl	80055aa <_PreparePacket>
 80063a6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063a8:	69bb      	ldr	r3, [r7, #24]
 80063aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063b0:	68bb      	ldr	r3, [r7, #8]
 80063b2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063b4:	e00b      	b.n	80063ce <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 80063b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b8:	b2da      	uxtb	r2, r3
 80063ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063bc:	1c59      	adds	r1, r3, #1
 80063be:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80063c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c4:	b2d2      	uxtb	r2, r2
 80063c6:	701a      	strb	r2, [r3, #0]
 80063c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063ca:	09db      	lsrs	r3, r3, #7
 80063cc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d2:	d8f0      	bhi.n	80063b6 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80063d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063d6:	1c5a      	adds	r2, r3, #1
 80063d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80063da:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80063dc:	b2d2      	uxtb	r2, r2
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	633b      	str	r3, [r7, #48]	@ 0x30
 80063ec:	e00b      	b.n	8006406 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	b2da      	uxtb	r2, r3
 80063f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80063f4:	1c59      	adds	r1, r3, #1
 80063f6:	6379      	str	r1, [r7, #52]	@ 0x34
 80063f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063fc:	b2d2      	uxtb	r2, r2
 80063fe:	701a      	strb	r2, [r3, #0]
 8006400:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006402:	09db      	lsrs	r3, r3, #7
 8006404:	633b      	str	r3, [r7, #48]	@ 0x30
 8006406:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006408:	2b7f      	cmp	r3, #127	@ 0x7f
 800640a:	d8f0      	bhi.n	80063ee <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 800640c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800640e:	1c5a      	adds	r2, r3, #1
 8006410:	637a      	str	r2, [r7, #52]	@ 0x34
 8006412:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006414:	b2d2      	uxtb	r2, r2
 8006416:	701a      	strb	r2, [r3, #0]
 8006418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800641a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006424:	e00b      	b.n	800643e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006428:	b2da      	uxtb	r2, r3
 800642a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800642c:	1c59      	adds	r1, r3, #1
 800642e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006430:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006434:	b2d2      	uxtb	r2, r2
 8006436:	701a      	strb	r2, [r3, #0]
 8006438:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800643a:	09db      	lsrs	r3, r3, #7
 800643c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006440:	2b7f      	cmp	r3, #127	@ 0x7f
 8006442:	d8f0      	bhi.n	8006426 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006444:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006446:	1c5a      	adds	r2, r3, #1
 8006448:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800644a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800644c:	b2d2      	uxtb	r2, r2
 800644e:	701a      	strb	r2, [r3, #0]
 8006450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006452:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	627b      	str	r3, [r7, #36]	@ 0x24
 8006458:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800645a:	623b      	str	r3, [r7, #32]
 800645c:	e00b      	b.n	8006476 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800645e:	6a3b      	ldr	r3, [r7, #32]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006464:	1c59      	adds	r1, r3, #1
 8006466:	6279      	str	r1, [r7, #36]	@ 0x24
 8006468:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800646c:	b2d2      	uxtb	r2, r2
 800646e:	701a      	strb	r2, [r3, #0]
 8006470:	6a3b      	ldr	r3, [r7, #32]
 8006472:	09db      	lsrs	r3, r3, #7
 8006474:	623b      	str	r3, [r7, #32]
 8006476:	6a3b      	ldr	r3, [r7, #32]
 8006478:	2b7f      	cmp	r3, #127	@ 0x7f
 800647a:	d8f0      	bhi.n	800645e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800647c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800647e:	1c5a      	adds	r2, r3, #1
 8006480:	627a      	str	r2, [r7, #36]	@ 0x24
 8006482:	6a3a      	ldr	r2, [r7, #32]
 8006484:	b2d2      	uxtb	r2, r2
 8006486:	701a      	strb	r2, [r3, #0]
 8006488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800648a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800648c:	68fa      	ldr	r2, [r7, #12]
 800648e:	6979      	ldr	r1, [r7, #20]
 8006490:	69b8      	ldr	r0, [r7, #24]
 8006492:	f7ff f979 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006496:	69fb      	ldr	r3, [r7, #28]
 8006498:	f383 8811 	msr	BASEPRI, r3
}
 800649c:	bf00      	nop
 800649e:	3740      	adds	r7, #64	@ 0x40
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}
 80064a4:	2004c7cc 	.word	0x2004c7cc

080064a8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08c      	sub	sp, #48	@ 0x30
 80064ac:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064ae:	4b58      	ldr	r3, [pc, #352]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 80064b0:	2201      	movs	r2, #1
 80064b2:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064b4:	f3ef 8311 	mrs	r3, BASEPRI
 80064b8:	f04f 0120 	mov.w	r1, #32
 80064bc:	f381 8811 	msr	BASEPRI, r1
 80064c0:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064c2:	4b53      	ldr	r3, [pc, #332]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 80064c4:	785b      	ldrb	r3, [r3, #1]
 80064c6:	220a      	movs	r2, #10
 80064c8:	4952      	ldr	r1, [pc, #328]	@ (8006614 <SEGGER_SYSVIEW_Start+0x16c>)
 80064ca:	4618      	mov	r0, r3
 80064cc:	f7f9 fea8 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 80064d6:	200a      	movs	r0, #10
 80064d8:	f7ff fe2a 	bl	8006130 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80064dc:	f3ef 8311 	mrs	r3, BASEPRI
 80064e0:	f04f 0120 	mov.w	r1, #32
 80064e4:	f381 8811 	msr	BASEPRI, r1
 80064e8:	60bb      	str	r3, [r7, #8]
 80064ea:	484b      	ldr	r0, [pc, #300]	@ (8006618 <SEGGER_SYSVIEW_Start+0x170>)
 80064ec:	f7ff f85d 	bl	80055aa <_PreparePacket>
 80064f0:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80064fa:	4b45      	ldr	r3, [pc, #276]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006500:	e00b      	b.n	800651a <SEGGER_SYSVIEW_Start+0x72>
 8006502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006504:	b2da      	uxtb	r2, r3
 8006506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006508:	1c59      	adds	r1, r3, #1
 800650a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800650c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006510:	b2d2      	uxtb	r2, r2
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006516:	09db      	lsrs	r3, r3, #7
 8006518:	62bb      	str	r3, [r7, #40]	@ 0x28
 800651a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800651c:	2b7f      	cmp	r3, #127	@ 0x7f
 800651e:	d8f0      	bhi.n	8006502 <SEGGER_SYSVIEW_Start+0x5a>
 8006520:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006522:	1c5a      	adds	r2, r3, #1
 8006524:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006526:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006528:	b2d2      	uxtb	r2, r2
 800652a:	701a      	strb	r2, [r3, #0]
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	627b      	str	r3, [r7, #36]	@ 0x24
 8006534:	4b36      	ldr	r3, [pc, #216]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	623b      	str	r3, [r7, #32]
 800653a:	e00b      	b.n	8006554 <SEGGER_SYSVIEW_Start+0xac>
 800653c:	6a3b      	ldr	r3, [r7, #32]
 800653e:	b2da      	uxtb	r2, r3
 8006540:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006542:	1c59      	adds	r1, r3, #1
 8006544:	6279      	str	r1, [r7, #36]	@ 0x24
 8006546:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654a:	b2d2      	uxtb	r2, r2
 800654c:	701a      	strb	r2, [r3, #0]
 800654e:	6a3b      	ldr	r3, [r7, #32]
 8006550:	09db      	lsrs	r3, r3, #7
 8006552:	623b      	str	r3, [r7, #32]
 8006554:	6a3b      	ldr	r3, [r7, #32]
 8006556:	2b7f      	cmp	r3, #127	@ 0x7f
 8006558:	d8f0      	bhi.n	800653c <SEGGER_SYSVIEW_Start+0x94>
 800655a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800655c:	1c5a      	adds	r2, r3, #1
 800655e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006560:	6a3a      	ldr	r2, [r7, #32]
 8006562:	b2d2      	uxtb	r2, r2
 8006564:	701a      	strb	r2, [r3, #0]
 8006566:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006568:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	61fb      	str	r3, [r7, #28]
 800656e:	4b28      	ldr	r3, [pc, #160]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	61bb      	str	r3, [r7, #24]
 8006574:	e00b      	b.n	800658e <SEGGER_SYSVIEW_Start+0xe6>
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	b2da      	uxtb	r2, r3
 800657a:	69fb      	ldr	r3, [r7, #28]
 800657c:	1c59      	adds	r1, r3, #1
 800657e:	61f9      	str	r1, [r7, #28]
 8006580:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006584:	b2d2      	uxtb	r2, r2
 8006586:	701a      	strb	r2, [r3, #0]
 8006588:	69bb      	ldr	r3, [r7, #24]
 800658a:	09db      	lsrs	r3, r3, #7
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	69bb      	ldr	r3, [r7, #24]
 8006590:	2b7f      	cmp	r3, #127	@ 0x7f
 8006592:	d8f0      	bhi.n	8006576 <SEGGER_SYSVIEW_Start+0xce>
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	1c5a      	adds	r2, r3, #1
 8006598:	61fa      	str	r2, [r7, #28]
 800659a:	69ba      	ldr	r2, [r7, #24]
 800659c:	b2d2      	uxtb	r2, r2
 800659e:	701a      	strb	r2, [r3, #0]
 80065a0:	69fb      	ldr	r3, [r7, #28]
 80065a2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065a4:	683b      	ldr	r3, [r7, #0]
 80065a6:	617b      	str	r3, [r7, #20]
 80065a8:	2300      	movs	r3, #0
 80065aa:	613b      	str	r3, [r7, #16]
 80065ac:	e00b      	b.n	80065c6 <SEGGER_SYSVIEW_Start+0x11e>
 80065ae:	693b      	ldr	r3, [r7, #16]
 80065b0:	b2da      	uxtb	r2, r3
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	1c59      	adds	r1, r3, #1
 80065b6:	6179      	str	r1, [r7, #20]
 80065b8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065bc:	b2d2      	uxtb	r2, r2
 80065be:	701a      	strb	r2, [r3, #0]
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	09db      	lsrs	r3, r3, #7
 80065c4:	613b      	str	r3, [r7, #16]
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ca:	d8f0      	bhi.n	80065ae <SEGGER_SYSVIEW_Start+0x106>
 80065cc:	697b      	ldr	r3, [r7, #20]
 80065ce:	1c5a      	adds	r2, r3, #1
 80065d0:	617a      	str	r2, [r7, #20]
 80065d2:	693a      	ldr	r2, [r7, #16]
 80065d4:	b2d2      	uxtb	r2, r2
 80065d6:	701a      	strb	r2, [r3, #0]
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80065dc:	2218      	movs	r2, #24
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f7ff f8d1 	bl	8005788 <_SendPacket>
      RECORD_END();
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80065ec:	4b08      	ldr	r3, [pc, #32]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 80065ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d002      	beq.n	80065fa <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 80065f4:	4b06      	ldr	r3, [pc, #24]	@ (8006610 <SEGGER_SYSVIEW_Start+0x168>)
 80065f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80065f8:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80065fa:	f000 f9eb 	bl	80069d4 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80065fe:	f000 f9b1 	bl	8006964 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8006602:	f000 fc3f 	bl	8006e84 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006606:	bf00      	nop
 8006608:	3730      	adds	r7, #48	@ 0x30
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}
 800660e:	bf00      	nop
 8006610:	2004c79c 	.word	0x2004c79c
 8006614:	08007244 	.word	0x08007244
 8006618:	2004c7cc 	.word	0x2004c7cc

0800661c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800661c:	b580      	push	{r7, lr}
 800661e:	b082      	sub	sp, #8
 8006620:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006622:	f3ef 8311 	mrs	r3, BASEPRI
 8006626:	f04f 0120 	mov.w	r1, #32
 800662a:	f381 8811 	msr	BASEPRI, r1
 800662e:	607b      	str	r3, [r7, #4]
 8006630:	480b      	ldr	r0, [pc, #44]	@ (8006660 <SEGGER_SYSVIEW_Stop+0x44>)
 8006632:	f7fe ffba 	bl	80055aa <_PreparePacket>
 8006636:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006638:	4b0a      	ldr	r3, [pc, #40]	@ (8006664 <SEGGER_SYSVIEW_Stop+0x48>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d007      	beq.n	8006650 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8006640:	220b      	movs	r2, #11
 8006642:	6839      	ldr	r1, [r7, #0]
 8006644:	6838      	ldr	r0, [r7, #0]
 8006646:	f7ff f89f 	bl	8005788 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800664a:	4b06      	ldr	r3, [pc, #24]	@ (8006664 <SEGGER_SYSVIEW_Stop+0x48>)
 800664c:	2200      	movs	r2, #0
 800664e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f383 8811 	msr	BASEPRI, r3
}
 8006656:	bf00      	nop
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}
 800665e:	bf00      	nop
 8006660:	2004c7cc 	.word	0x2004c7cc
 8006664:	2004c79c 	.word	0x2004c79c

08006668 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006668:	b580      	push	{r7, lr}
 800666a:	b08c      	sub	sp, #48	@ 0x30
 800666c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800666e:	f3ef 8311 	mrs	r3, BASEPRI
 8006672:	f04f 0120 	mov.w	r1, #32
 8006676:	f381 8811 	msr	BASEPRI, r1
 800667a:	60fb      	str	r3, [r7, #12]
 800667c:	4845      	ldr	r0, [pc, #276]	@ (8006794 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800667e:	f7fe ff94 	bl	80055aa <_PreparePacket>
 8006682:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006684:	68bb      	ldr	r3, [r7, #8]
 8006686:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800668c:	4b42      	ldr	r3, [pc, #264]	@ (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800668e:	685b      	ldr	r3, [r3, #4]
 8006690:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006692:	e00b      	b.n	80066ac <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8006694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006696:	b2da      	uxtb	r2, r3
 8006698:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800669a:	1c59      	adds	r1, r3, #1
 800669c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800669e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066a2:	b2d2      	uxtb	r2, r2
 80066a4:	701a      	strb	r2, [r3, #0]
 80066a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a8:	09db      	lsrs	r3, r3, #7
 80066aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80066b0:	d8f0      	bhi.n	8006694 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066b4:	1c5a      	adds	r2, r3, #1
 80066b6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066b8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066ba:	b2d2      	uxtb	r2, r2
 80066bc:	701a      	strb	r2, [r3, #0]
 80066be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066c0:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80066c6:	4b34      	ldr	r3, [pc, #208]	@ (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066c8:	689b      	ldr	r3, [r3, #8]
 80066ca:	623b      	str	r3, [r7, #32]
 80066cc:	e00b      	b.n	80066e6 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 80066ce:	6a3b      	ldr	r3, [r7, #32]
 80066d0:	b2da      	uxtb	r2, r3
 80066d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d4:	1c59      	adds	r1, r3, #1
 80066d6:	6279      	str	r1, [r7, #36]	@ 0x24
 80066d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066dc:	b2d2      	uxtb	r2, r2
 80066de:	701a      	strb	r2, [r3, #0]
 80066e0:	6a3b      	ldr	r3, [r7, #32]
 80066e2:	09db      	lsrs	r3, r3, #7
 80066e4:	623b      	str	r3, [r7, #32]
 80066e6:	6a3b      	ldr	r3, [r7, #32]
 80066e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ea:	d8f0      	bhi.n	80066ce <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80066ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80066f2:	6a3a      	ldr	r2, [r7, #32]
 80066f4:	b2d2      	uxtb	r2, r2
 80066f6:	701a      	strb	r2, [r3, #0]
 80066f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066fa:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	61fb      	str	r3, [r7, #28]
 8006700:	4b25      	ldr	r3, [pc, #148]	@ (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	61bb      	str	r3, [r7, #24]
 8006706:	e00b      	b.n	8006720 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006708:	69bb      	ldr	r3, [r7, #24]
 800670a:	b2da      	uxtb	r2, r3
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	1c59      	adds	r1, r3, #1
 8006710:	61f9      	str	r1, [r7, #28]
 8006712:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006716:	b2d2      	uxtb	r2, r2
 8006718:	701a      	strb	r2, [r3, #0]
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	09db      	lsrs	r3, r3, #7
 800671e:	61bb      	str	r3, [r7, #24]
 8006720:	69bb      	ldr	r3, [r7, #24]
 8006722:	2b7f      	cmp	r3, #127	@ 0x7f
 8006724:	d8f0      	bhi.n	8006708 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006726:	69fb      	ldr	r3, [r7, #28]
 8006728:	1c5a      	adds	r2, r3, #1
 800672a:	61fa      	str	r2, [r7, #28]
 800672c:	69ba      	ldr	r2, [r7, #24]
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	69fb      	ldr	r3, [r7, #28]
 8006734:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	617b      	str	r3, [r7, #20]
 800673a:	2300      	movs	r3, #0
 800673c:	613b      	str	r3, [r7, #16]
 800673e:	e00b      	b.n	8006758 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	b2da      	uxtb	r2, r3
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	1c59      	adds	r1, r3, #1
 8006748:	6179      	str	r1, [r7, #20]
 800674a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800674e:	b2d2      	uxtb	r2, r2
 8006750:	701a      	strb	r2, [r3, #0]
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	09db      	lsrs	r3, r3, #7
 8006756:	613b      	str	r3, [r7, #16]
 8006758:	693b      	ldr	r3, [r7, #16]
 800675a:	2b7f      	cmp	r3, #127	@ 0x7f
 800675c:	d8f0      	bhi.n	8006740 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	617a      	str	r2, [r7, #20]
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	b2d2      	uxtb	r2, r2
 8006768:	701a      	strb	r2, [r3, #0]
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800676e:	2218      	movs	r2, #24
 8006770:	6879      	ldr	r1, [r7, #4]
 8006772:	68b8      	ldr	r0, [r7, #8]
 8006774:	f7ff f808 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800677e:	4b06      	ldr	r3, [pc, #24]	@ (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	2b00      	cmp	r3, #0
 8006784:	d002      	beq.n	800678c <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8006786:	4b04      	ldr	r3, [pc, #16]	@ (8006798 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800678a:	4798      	blx	r3
  }
}
 800678c:	bf00      	nop
 800678e:	3730      	adds	r7, #48	@ 0x30
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	2004c7cc 	.word	0x2004c7cc
 8006798:	2004c79c 	.word	0x2004c79c

0800679c <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800679c:	b580      	push	{r7, lr}
 800679e:	b092      	sub	sp, #72	@ 0x48
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067a4:	f3ef 8311 	mrs	r3, BASEPRI
 80067a8:	f04f 0120 	mov.w	r1, #32
 80067ac:	f381 8811 	msr	BASEPRI, r1
 80067b0:	617b      	str	r3, [r7, #20]
 80067b2:	486a      	ldr	r0, [pc, #424]	@ (800695c <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067b4:	f7fe fef9 	bl	80055aa <_PreparePacket>
 80067b8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b66      	ldr	r3, [pc, #408]	@ (8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80067ce:	e00b      	b.n	80067e8 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 80067d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067d2:	b2da      	uxtb	r2, r3
 80067d4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067d6:	1c59      	adds	r1, r3, #1
 80067d8:	6479      	str	r1, [r7, #68]	@ 0x44
 80067da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067de:	b2d2      	uxtb	r2, r2
 80067e0:	701a      	strb	r2, [r3, #0]
 80067e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067e4:	09db      	lsrs	r3, r3, #7
 80067e6:	643b      	str	r3, [r7, #64]	@ 0x40
 80067e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80067ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80067ec:	d8f0      	bhi.n	80067d0 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80067ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067f0:	1c5a      	adds	r2, r3, #1
 80067f2:	647a      	str	r2, [r7, #68]	@ 0x44
 80067f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80067f6:	b2d2      	uxtb	r2, r2
 80067f8:	701a      	strb	r2, [r3, #0]
 80067fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80067fc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006808:	e00b      	b.n	8006822 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800680a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800680c:	b2da      	uxtb	r2, r3
 800680e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006810:	1c59      	adds	r1, r3, #1
 8006812:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006814:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006818:	b2d2      	uxtb	r2, r2
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800681e:	09db      	lsrs	r3, r3, #7
 8006820:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006822:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006824:	2b7f      	cmp	r3, #127	@ 0x7f
 8006826:	d8f0      	bhi.n	800680a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006828:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800682a:	1c5a      	adds	r2, r3, #1
 800682c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800682e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006830:	b2d2      	uxtb	r2, r2
 8006832:	701a      	strb	r2, [r3, #0]
 8006834:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006836:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2220      	movs	r2, #32
 800683e:	4619      	mov	r1, r3
 8006840:	68f8      	ldr	r0, [r7, #12]
 8006842:	f7fe fe65 	bl	8005510 <_EncodeStr>
 8006846:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006848:	2209      	movs	r2, #9
 800684a:	68f9      	ldr	r1, [r7, #12]
 800684c:	6938      	ldr	r0, [r7, #16]
 800684e:	f7fe ff9b 	bl	8005788 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	637b      	str	r3, [r7, #52]	@ 0x34
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b40      	ldr	r3, [pc, #256]	@ (8006960 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	1ad3      	subs	r3, r2, r3
 8006864:	633b      	str	r3, [r7, #48]	@ 0x30
 8006866:	e00b      	b.n	8006880 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006868:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686a:	b2da      	uxtb	r2, r3
 800686c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800686e:	1c59      	adds	r1, r3, #1
 8006870:	6379      	str	r1, [r7, #52]	@ 0x34
 8006872:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006876:	b2d2      	uxtb	r2, r2
 8006878:	701a      	strb	r2, [r3, #0]
 800687a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687c:	09db      	lsrs	r3, r3, #7
 800687e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006882:	2b7f      	cmp	r3, #127	@ 0x7f
 8006884:	d8f0      	bhi.n	8006868 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8006886:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006888:	1c5a      	adds	r2, r3, #1
 800688a:	637a      	str	r2, [r7, #52]	@ 0x34
 800688c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800688e:	b2d2      	uxtb	r2, r2
 8006890:	701a      	strb	r2, [r3, #0]
 8006892:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006894:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	68db      	ldr	r3, [r3, #12]
 800689e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068a0:	e00b      	b.n	80068ba <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068a4:	b2da      	uxtb	r2, r3
 80068a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a8:	1c59      	adds	r1, r3, #1
 80068aa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068b0:	b2d2      	uxtb	r2, r2
 80068b2:	701a      	strb	r2, [r3, #0]
 80068b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068b6:	09db      	lsrs	r3, r3, #7
 80068b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80068be:	d8f0      	bhi.n	80068a2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80068c6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80068c8:	b2d2      	uxtb	r2, r2
 80068ca:	701a      	strb	r2, [r3, #0]
 80068cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068ce:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	691b      	ldr	r3, [r3, #16]
 80068d8:	623b      	str	r3, [r7, #32]
 80068da:	e00b      	b.n	80068f4 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 80068dc:	6a3b      	ldr	r3, [r7, #32]
 80068de:	b2da      	uxtb	r2, r3
 80068e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068e2:	1c59      	adds	r1, r3, #1
 80068e4:	6279      	str	r1, [r7, #36]	@ 0x24
 80068e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ea:	b2d2      	uxtb	r2, r2
 80068ec:	701a      	strb	r2, [r3, #0]
 80068ee:	6a3b      	ldr	r3, [r7, #32]
 80068f0:	09db      	lsrs	r3, r3, #7
 80068f2:	623b      	str	r3, [r7, #32]
 80068f4:	6a3b      	ldr	r3, [r7, #32]
 80068f6:	2b7f      	cmp	r3, #127	@ 0x7f
 80068f8:	d8f0      	bhi.n	80068dc <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80068fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068fc:	1c5a      	adds	r2, r3, #1
 80068fe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006900:	6a3a      	ldr	r2, [r7, #32]
 8006902:	b2d2      	uxtb	r2, r2
 8006904:	701a      	strb	r2, [r3, #0]
 8006906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006908:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	61fb      	str	r3, [r7, #28]
 800690e:	2300      	movs	r3, #0
 8006910:	61bb      	str	r3, [r7, #24]
 8006912:	e00b      	b.n	800692c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006914:	69bb      	ldr	r3, [r7, #24]
 8006916:	b2da      	uxtb	r2, r3
 8006918:	69fb      	ldr	r3, [r7, #28]
 800691a:	1c59      	adds	r1, r3, #1
 800691c:	61f9      	str	r1, [r7, #28]
 800691e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006922:	b2d2      	uxtb	r2, r2
 8006924:	701a      	strb	r2, [r3, #0]
 8006926:	69bb      	ldr	r3, [r7, #24]
 8006928:	09db      	lsrs	r3, r3, #7
 800692a:	61bb      	str	r3, [r7, #24]
 800692c:	69bb      	ldr	r3, [r7, #24]
 800692e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006930:	d8f0      	bhi.n	8006914 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8006932:	69fb      	ldr	r3, [r7, #28]
 8006934:	1c5a      	adds	r2, r3, #1
 8006936:	61fa      	str	r2, [r7, #28]
 8006938:	69ba      	ldr	r2, [r7, #24]
 800693a:	b2d2      	uxtb	r2, r2
 800693c:	701a      	strb	r2, [r3, #0]
 800693e:	69fb      	ldr	r3, [r7, #28]
 8006940:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8006942:	2215      	movs	r2, #21
 8006944:	68f9      	ldr	r1, [r7, #12]
 8006946:	6938      	ldr	r0, [r7, #16]
 8006948:	f7fe ff1e 	bl	8005788 <_SendPacket>
  RECORD_END();
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	f383 8811 	msr	BASEPRI, r3
}
 8006952:	bf00      	nop
 8006954:	3748      	adds	r7, #72	@ 0x48
 8006956:	46bd      	mov	sp, r7
 8006958:	bd80      	pop	{r7, pc}
 800695a:	bf00      	nop
 800695c:	2004c7cc 	.word	0x2004c7cc
 8006960:	2004c79c 	.word	0x2004c79c

08006964 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006968:	4b07      	ldr	r3, [pc, #28]	@ (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800696a:	6a1b      	ldr	r3, [r3, #32]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006970:	4b05      	ldr	r3, [pc, #20]	@ (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006972:	6a1b      	ldr	r3, [r3, #32]
 8006974:	685b      	ldr	r3, [r3, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d003      	beq.n	8006982 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800697a:	4b03      	ldr	r3, [pc, #12]	@ (8006988 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	685b      	ldr	r3, [r3, #4]
 8006980:	4798      	blx	r3
  }
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	2004c79c 	.word	0x2004c79c

0800698c <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800698c:	b580      	push	{r7, lr}
 800698e:	b086      	sub	sp, #24
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006994:	f3ef 8311 	mrs	r3, BASEPRI
 8006998:	f04f 0120 	mov.w	r1, #32
 800699c:	f381 8811 	msr	BASEPRI, r1
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	480b      	ldr	r0, [pc, #44]	@ (80069d0 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069a4:	f7fe fe01 	bl	80055aa <_PreparePacket>
 80069a8:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069aa:	2280      	movs	r2, #128	@ 0x80
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	6938      	ldr	r0, [r7, #16]
 80069b0:	f7fe fdae 	bl	8005510 <_EncodeStr>
 80069b4:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069b6:	220e      	movs	r2, #14
 80069b8:	68f9      	ldr	r1, [r7, #12]
 80069ba:	6938      	ldr	r0, [r7, #16]
 80069bc:	f7fe fee4 	bl	8005788 <_SendPacket>
  RECORD_END();
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f383 8811 	msr	BASEPRI, r3
}
 80069c6:	bf00      	nop
 80069c8:	3718      	adds	r7, #24
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	2004c7cc 	.word	0x2004c7cc

080069d4 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80069d4:	b590      	push	{r4, r7, lr}
 80069d6:	b083      	sub	sp, #12
 80069d8:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80069da:	4b15      	ldr	r3, [pc, #84]	@ (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069dc:	6a1b      	ldr	r3, [r3, #32]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d01a      	beq.n	8006a18 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80069e2:	4b13      	ldr	r3, [pc, #76]	@ (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d015      	beq.n	8006a18 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80069ec:	4b10      	ldr	r3, [pc, #64]	@ (8006a30 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80069ee:	6a1b      	ldr	r3, [r3, #32]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4798      	blx	r3
 80069f4:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80069f8:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80069fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80069fe:	f04f 0200 	mov.w	r2, #0
 8006a02:	f04f 0300 	mov.w	r3, #0
 8006a06:	000a      	movs	r2, r1
 8006a08:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a0a:	4613      	mov	r3, r2
 8006a0c:	461a      	mov	r2, r3
 8006a0e:	4621      	mov	r1, r4
 8006a10:	200d      	movs	r0, #13
 8006a12:	f7ff fbe7 	bl	80061e4 <SEGGER_SYSVIEW_RecordU32x2>
 8006a16:	e006      	b.n	8006a26 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a18:	4b06      	ldr	r3, [pc, #24]	@ (8006a34 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4619      	mov	r1, r3
 8006a1e:	200c      	movs	r0, #12
 8006a20:	f7ff fba4 	bl	800616c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd90      	pop	{r4, r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2004c79c 	.word	0x2004c79c
 8006a34:	e0001004 	.word	0xe0001004

08006a38 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a38:	b580      	push	{r7, lr}
 8006a3a:	b086      	sub	sp, #24
 8006a3c:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a3e:	f3ef 8311 	mrs	r3, BASEPRI
 8006a42:	f04f 0120 	mov.w	r1, #32
 8006a46:	f381 8811 	msr	BASEPRI, r1
 8006a4a:	60fb      	str	r3, [r7, #12]
 8006a4c:	4819      	ldr	r0, [pc, #100]	@ (8006ab4 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a4e:	f7fe fdac 	bl	80055aa <_PreparePacket>
 8006a52:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a58:	4b17      	ldr	r3, [pc, #92]	@ (8006ab8 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a60:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	617b      	str	r3, [r7, #20]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	e00b      	b.n	8006a84 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	b2da      	uxtb	r2, r3
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	1c59      	adds	r1, r3, #1
 8006a74:	6179      	str	r1, [r7, #20]
 8006a76:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a7a:	b2d2      	uxtb	r2, r2
 8006a7c:	701a      	strb	r2, [r3, #0]
 8006a7e:	693b      	ldr	r3, [r7, #16]
 8006a80:	09db      	lsrs	r3, r3, #7
 8006a82:	613b      	str	r3, [r7, #16]
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a88:	d8f0      	bhi.n	8006a6c <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	1c5a      	adds	r2, r3, #1
 8006a8e:	617a      	str	r2, [r7, #20]
 8006a90:	693a      	ldr	r2, [r7, #16]
 8006a92:	b2d2      	uxtb	r2, r2
 8006a94:	701a      	strb	r2, [r3, #0]
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006a9a:	2202      	movs	r2, #2
 8006a9c:	6879      	ldr	r1, [r7, #4]
 8006a9e:	68b8      	ldr	r0, [r7, #8]
 8006aa0:	f7fe fe72 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f383 8811 	msr	BASEPRI, r3
}
 8006aaa:	bf00      	nop
 8006aac:	3718      	adds	r7, #24
 8006aae:	46bd      	mov	sp, r7
 8006ab0:	bd80      	pop	{r7, pc}
 8006ab2:	bf00      	nop
 8006ab4:	2004c7cc 	.word	0x2004c7cc
 8006ab8:	e000ed04 	.word	0xe000ed04

08006abc <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006abc:	b580      	push	{r7, lr}
 8006abe:	b082      	sub	sp, #8
 8006ac0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006ac2:	f3ef 8311 	mrs	r3, BASEPRI
 8006ac6:	f04f 0120 	mov.w	r1, #32
 8006aca:	f381 8811 	msr	BASEPRI, r1
 8006ace:	607b      	str	r3, [r7, #4]
 8006ad0:	4807      	ldr	r0, [pc, #28]	@ (8006af0 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006ad2:	f7fe fd6a 	bl	80055aa <_PreparePacket>
 8006ad6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006ad8:	2203      	movs	r2, #3
 8006ada:	6839      	ldr	r1, [r7, #0]
 8006adc:	6838      	ldr	r0, [r7, #0]
 8006ade:	f7fe fe53 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f383 8811 	msr	BASEPRI, r3
}
 8006ae8:	bf00      	nop
 8006aea:	3708      	adds	r7, #8
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	2004c7cc 	.word	0x2004c7cc

08006af4 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006afa:	f3ef 8311 	mrs	r3, BASEPRI
 8006afe:	f04f 0120 	mov.w	r1, #32
 8006b02:	f381 8811 	msr	BASEPRI, r1
 8006b06:	607b      	str	r3, [r7, #4]
 8006b08:	4807      	ldr	r0, [pc, #28]	@ (8006b28 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b0a:	f7fe fd4e 	bl	80055aa <_PreparePacket>
 8006b0e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b10:	2212      	movs	r2, #18
 8006b12:	6839      	ldr	r1, [r7, #0]
 8006b14:	6838      	ldr	r0, [r7, #0]
 8006b16:	f7fe fe37 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f383 8811 	msr	BASEPRI, r3
}
 8006b20:	bf00      	nop
 8006b22:	3708      	adds	r7, #8
 8006b24:	46bd      	mov	sp, r7
 8006b26:	bd80      	pop	{r7, pc}
 8006b28:	2004c7cc 	.word	0x2004c7cc

08006b2c <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b082      	sub	sp, #8
 8006b30:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b32:	f3ef 8311 	mrs	r3, BASEPRI
 8006b36:	f04f 0120 	mov.w	r1, #32
 8006b3a:	f381 8811 	msr	BASEPRI, r1
 8006b3e:	607b      	str	r3, [r7, #4]
 8006b40:	4807      	ldr	r0, [pc, #28]	@ (8006b60 <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b42:	f7fe fd32 	bl	80055aa <_PreparePacket>
 8006b46:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b48:	2211      	movs	r2, #17
 8006b4a:	6839      	ldr	r1, [r7, #0]
 8006b4c:	6838      	ldr	r0, [r7, #0]
 8006b4e:	f7fe fe1b 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f383 8811 	msr	BASEPRI, r3
}
 8006b58:	bf00      	nop
 8006b5a:	3708      	adds	r7, #8
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	2004c7cc 	.word	0x2004c7cc

08006b64 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006b64:	b580      	push	{r7, lr}
 8006b66:	b088      	sub	sp, #32
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b6c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b70:	f04f 0120 	mov.w	r1, #32
 8006b74:	f381 8811 	msr	BASEPRI, r1
 8006b78:	617b      	str	r3, [r7, #20]
 8006b7a:	4819      	ldr	r0, [pc, #100]	@ (8006be0 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006b7c:	f7fe fd15 	bl	80055aa <_PreparePacket>
 8006b80:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b86:	4b17      	ldr	r3, [pc, #92]	@ (8006be4 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	687a      	ldr	r2, [r7, #4]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	61fb      	str	r3, [r7, #28]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	61bb      	str	r3, [r7, #24]
 8006b98:	e00b      	b.n	8006bb2 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006b9a:	69bb      	ldr	r3, [r7, #24]
 8006b9c:	b2da      	uxtb	r2, r3
 8006b9e:	69fb      	ldr	r3, [r7, #28]
 8006ba0:	1c59      	adds	r1, r3, #1
 8006ba2:	61f9      	str	r1, [r7, #28]
 8006ba4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ba8:	b2d2      	uxtb	r2, r2
 8006baa:	701a      	strb	r2, [r3, #0]
 8006bac:	69bb      	ldr	r3, [r7, #24]
 8006bae:	09db      	lsrs	r3, r3, #7
 8006bb0:	61bb      	str	r3, [r7, #24]
 8006bb2:	69bb      	ldr	r3, [r7, #24]
 8006bb4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bb6:	d8f0      	bhi.n	8006b9a <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006bb8:	69fb      	ldr	r3, [r7, #28]
 8006bba:	1c5a      	adds	r2, r3, #1
 8006bbc:	61fa      	str	r2, [r7, #28]
 8006bbe:	69ba      	ldr	r2, [r7, #24]
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006bc8:	2208      	movs	r2, #8
 8006bca:	68f9      	ldr	r1, [r7, #12]
 8006bcc:	6938      	ldr	r0, [r7, #16]
 8006bce:	f7fe fddb 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f383 8811 	msr	BASEPRI, r3
}
 8006bd8:	bf00      	nop
 8006bda:	3720      	adds	r7, #32
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	2004c7cc 	.word	0x2004c7cc
 8006be4:	2004c79c 	.word	0x2004c79c

08006be8 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b088      	sub	sp, #32
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006bf0:	f3ef 8311 	mrs	r3, BASEPRI
 8006bf4:	f04f 0120 	mov.w	r1, #32
 8006bf8:	f381 8811 	msr	BASEPRI, r1
 8006bfc:	617b      	str	r3, [r7, #20]
 8006bfe:	4819      	ldr	r0, [pc, #100]	@ (8006c64 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c00:	f7fe fcd3 	bl	80055aa <_PreparePacket>
 8006c04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c06:	693b      	ldr	r3, [r7, #16]
 8006c08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c0a:	4b17      	ldr	r3, [pc, #92]	@ (8006c68 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c0c:	691b      	ldr	r3, [r3, #16]
 8006c0e:	687a      	ldr	r2, [r7, #4]
 8006c10:	1ad3      	subs	r3, r2, r3
 8006c12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	61fb      	str	r3, [r7, #28]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	61bb      	str	r3, [r7, #24]
 8006c1c:	e00b      	b.n	8006c36 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c1e:	69bb      	ldr	r3, [r7, #24]
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	69fb      	ldr	r3, [r7, #28]
 8006c24:	1c59      	adds	r1, r3, #1
 8006c26:	61f9      	str	r1, [r7, #28]
 8006c28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c2c:	b2d2      	uxtb	r2, r2
 8006c2e:	701a      	strb	r2, [r3, #0]
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	09db      	lsrs	r3, r3, #7
 8006c34:	61bb      	str	r3, [r7, #24]
 8006c36:	69bb      	ldr	r3, [r7, #24]
 8006c38:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c3a:	d8f0      	bhi.n	8006c1e <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	61fa      	str	r2, [r7, #28]
 8006c42:	69ba      	ldr	r2, [r7, #24]
 8006c44:	b2d2      	uxtb	r2, r2
 8006c46:	701a      	strb	r2, [r3, #0]
 8006c48:	69fb      	ldr	r3, [r7, #28]
 8006c4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c4c:	2204      	movs	r2, #4
 8006c4e:	68f9      	ldr	r1, [r7, #12]
 8006c50:	6938      	ldr	r0, [r7, #16]
 8006c52:	f7fe fd99 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006c56:	697b      	ldr	r3, [r7, #20]
 8006c58:	f383 8811 	msr	BASEPRI, r3
}
 8006c5c:	bf00      	nop
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}
 8006c64:	2004c7cc 	.word	0x2004c7cc
 8006c68:	2004c79c 	.word	0x2004c79c

08006c6c <SEGGER_SYSVIEW_OnTaskStopExec>:
*
*  Function description
*    Record a Task Stop Execution event.  The Task Stop event
*    corresponds to when a task stops executing and terminates.
*/
void SEGGER_SYSVIEW_OnTaskStopExec(void) {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006c72:	f3ef 8311 	mrs	r3, BASEPRI
 8006c76:	f04f 0120 	mov.w	r1, #32
 8006c7a:	f381 8811 	msr	BASEPRI, r1
 8006c7e:	607b      	str	r3, [r7, #4]
 8006c80:	4807      	ldr	r0, [pc, #28]	@ (8006ca0 <SEGGER_SYSVIEW_OnTaskStopExec+0x34>)
 8006c82:	f7fe fc92 	bl	80055aa <_PreparePacket>
 8006c86:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TASK_STOP_EXEC);
 8006c88:	2205      	movs	r2, #5
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6838      	ldr	r0, [r7, #0]
 8006c8e:	f7fe fd7b 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	2004c7cc 	.word	0x2004c7cc

08006ca4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b088      	sub	sp, #32
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cac:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb0:	f04f 0120 	mov.w	r1, #32
 8006cb4:	f381 8811 	msr	BASEPRI, r1
 8006cb8:	617b      	str	r3, [r7, #20]
 8006cba:	4819      	ldr	r0, [pc, #100]	@ (8006d20 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cbc:	f7fe fc75 	bl	80055aa <_PreparePacket>
 8006cc0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc2:	693b      	ldr	r3, [r7, #16]
 8006cc4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cc6:	4b17      	ldr	r3, [pc, #92]	@ (8006d24 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006cc8:	691b      	ldr	r3, [r3, #16]
 8006cca:	687a      	ldr	r2, [r7, #4]
 8006ccc:	1ad3      	subs	r3, r2, r3
 8006cce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	61fb      	str	r3, [r7, #28]
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	61bb      	str	r3, [r7, #24]
 8006cd8:	e00b      	b.n	8006cf2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006cda:	69bb      	ldr	r3, [r7, #24]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	1c59      	adds	r1, r3, #1
 8006ce2:	61f9      	str	r1, [r7, #28]
 8006ce4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ce8:	b2d2      	uxtb	r2, r2
 8006cea:	701a      	strb	r2, [r3, #0]
 8006cec:	69bb      	ldr	r3, [r7, #24]
 8006cee:	09db      	lsrs	r3, r3, #7
 8006cf0:	61bb      	str	r3, [r7, #24]
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cf6:	d8f0      	bhi.n	8006cda <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cf8:	69fb      	ldr	r3, [r7, #28]
 8006cfa:	1c5a      	adds	r2, r3, #1
 8006cfc:	61fa      	str	r2, [r7, #28]
 8006cfe:	69ba      	ldr	r2, [r7, #24]
 8006d00:	b2d2      	uxtb	r2, r2
 8006d02:	701a      	strb	r2, [r3, #0]
 8006d04:	69fb      	ldr	r3, [r7, #28]
 8006d06:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d08:	2206      	movs	r2, #6
 8006d0a:	68f9      	ldr	r1, [r7, #12]
 8006d0c:	6938      	ldr	r0, [r7, #16]
 8006d0e:	f7fe fd3b 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006d12:	697b      	ldr	r3, [r7, #20]
 8006d14:	f383 8811 	msr	BASEPRI, r3
}
 8006d18:	bf00      	nop
 8006d1a:	3720      	adds	r7, #32
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	2004c7cc 	.word	0x2004c7cc
 8006d24:	2004c79c 	.word	0x2004c79c

08006d28 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d30:	4b04      	ldr	r3, [pc, #16]	@ (8006d44 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d32:	691b      	ldr	r3, [r3, #16]
 8006d34:	687a      	ldr	r2, [r7, #4]
 8006d36:	1ad3      	subs	r3, r2, r3
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	370c      	adds	r7, #12
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	2004c79c 	.word	0x2004c79c

08006d48 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b08c      	sub	sp, #48	@ 0x30
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	4603      	mov	r3, r0
 8006d50:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d52:	4b3b      	ldr	r3, [pc, #236]	@ (8006e40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d06d      	beq.n	8006e36 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006d5a:	4b39      	ldr	r3, [pc, #228]	@ (8006e40 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d60:	2300      	movs	r3, #0
 8006d62:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d64:	e008      	b.n	8006d78 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d68:	691b      	ldr	r3, [r3, #16]
 8006d6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d007      	beq.n	8006d82 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d74:	3301      	adds	r3, #1
 8006d76:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d78:	79fb      	ldrb	r3, [r7, #7]
 8006d7a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d7c:	429a      	cmp	r2, r3
 8006d7e:	d3f2      	bcc.n	8006d66 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d80:	e000      	b.n	8006d84 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d82:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d055      	beq.n	8006e36 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d8e:	f04f 0120 	mov.w	r1, #32
 8006d92:	f381 8811 	msr	BASEPRI, r1
 8006d96:	617b      	str	r3, [r7, #20]
 8006d98:	482a      	ldr	r0, [pc, #168]	@ (8006e44 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006d9a:	f7fe fc06 	bl	80055aa <_PreparePacket>
 8006d9e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006da0:	693b      	ldr	r3, [r7, #16]
 8006da2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006da8:	79fb      	ldrb	r3, [r7, #7]
 8006daa:	623b      	str	r3, [r7, #32]
 8006dac:	e00b      	b.n	8006dc6 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006dae:	6a3b      	ldr	r3, [r7, #32]
 8006db0:	b2da      	uxtb	r2, r3
 8006db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db4:	1c59      	adds	r1, r3, #1
 8006db6:	6279      	str	r1, [r7, #36]	@ 0x24
 8006db8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dbc:	b2d2      	uxtb	r2, r2
 8006dbe:	701a      	strb	r2, [r3, #0]
 8006dc0:	6a3b      	ldr	r3, [r7, #32]
 8006dc2:	09db      	lsrs	r3, r3, #7
 8006dc4:	623b      	str	r3, [r7, #32]
 8006dc6:	6a3b      	ldr	r3, [r7, #32]
 8006dc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dca:	d8f0      	bhi.n	8006dae <SEGGER_SYSVIEW_SendModule+0x66>
 8006dcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dce:	1c5a      	adds	r2, r3, #1
 8006dd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd2:	6a3a      	ldr	r2, [r7, #32]
 8006dd4:	b2d2      	uxtb	r2, r2
 8006dd6:	701a      	strb	r2, [r3, #0]
 8006dd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dda:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	61fb      	str	r3, [r7, #28]
 8006de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de2:	689b      	ldr	r3, [r3, #8]
 8006de4:	61bb      	str	r3, [r7, #24]
 8006de6:	e00b      	b.n	8006e00 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	b2da      	uxtb	r2, r3
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	1c59      	adds	r1, r3, #1
 8006df0:	61f9      	str	r1, [r7, #28]
 8006df2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006df6:	b2d2      	uxtb	r2, r2
 8006df8:	701a      	strb	r2, [r3, #0]
 8006dfa:	69bb      	ldr	r3, [r7, #24]
 8006dfc:	09db      	lsrs	r3, r3, #7
 8006dfe:	61bb      	str	r3, [r7, #24]
 8006e00:	69bb      	ldr	r3, [r7, #24]
 8006e02:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e04:	d8f0      	bhi.n	8006de8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e06:	69fb      	ldr	r3, [r7, #28]
 8006e08:	1c5a      	adds	r2, r3, #1
 8006e0a:	61fa      	str	r2, [r7, #28]
 8006e0c:	69ba      	ldr	r2, [r7, #24]
 8006e0e:	b2d2      	uxtb	r2, r2
 8006e10:	701a      	strb	r2, [r3, #0]
 8006e12:	69fb      	ldr	r3, [r7, #28]
 8006e14:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	2280      	movs	r2, #128	@ 0x80
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	68f8      	ldr	r0, [r7, #12]
 8006e20:	f7fe fb76 	bl	8005510 <_EncodeStr>
 8006e24:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e26:	2216      	movs	r2, #22
 8006e28:	68f9      	ldr	r1, [r7, #12]
 8006e2a:	6938      	ldr	r0, [r7, #16]
 8006e2c:	f7fe fcac 	bl	8005788 <_SendPacket>
      RECORD_END();
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006e36:	bf00      	nop
 8006e38:	3730      	adds	r7, #48	@ 0x30
 8006e3a:	46bd      	mov	sp, r7
 8006e3c:	bd80      	pop	{r7, pc}
 8006e3e:	bf00      	nop
 8006e40:	2004c7c4 	.word	0x2004c7c4
 8006e44:	2004c7cc 	.word	0x2004c7cc

08006e48 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8006e80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00f      	beq.n	8006e76 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e56:	4b0a      	ldr	r3, [pc, #40]	@ (8006e80 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d002      	beq.n	8006e6a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	68db      	ldr	r3, [r3, #12]
 8006e68:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d1f2      	bne.n	8006e5c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e76:	bf00      	nop
 8006e78:	3708      	adds	r7, #8
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	2004c7c4 	.word	0x2004c7c4

08006e84 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b086      	sub	sp, #24
 8006e88:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006e8a:	f3ef 8311 	mrs	r3, BASEPRI
 8006e8e:	f04f 0120 	mov.w	r1, #32
 8006e92:	f381 8811 	msr	BASEPRI, r1
 8006e96:	60fb      	str	r3, [r7, #12]
 8006e98:	4817      	ldr	r0, [pc, #92]	@ (8006ef8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006e9a:	f7fe fb86 	bl	80055aa <_PreparePacket>
 8006e9e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	4b14      	ldr	r3, [pc, #80]	@ (8006efc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006eaa:	781b      	ldrb	r3, [r3, #0]
 8006eac:	613b      	str	r3, [r7, #16]
 8006eae:	e00b      	b.n	8006ec8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006eb0:	693b      	ldr	r3, [r7, #16]
 8006eb2:	b2da      	uxtb	r2, r3
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	1c59      	adds	r1, r3, #1
 8006eb8:	6179      	str	r1, [r7, #20]
 8006eba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ebe:	b2d2      	uxtb	r2, r2
 8006ec0:	701a      	strb	r2, [r3, #0]
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	09db      	lsrs	r3, r3, #7
 8006ec6:	613b      	str	r3, [r7, #16]
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ecc:	d8f0      	bhi.n	8006eb0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ece:	697b      	ldr	r3, [r7, #20]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	617a      	str	r2, [r7, #20]
 8006ed4:	693a      	ldr	r2, [r7, #16]
 8006ed6:	b2d2      	uxtb	r2, r2
 8006ed8:	701a      	strb	r2, [r3, #0]
 8006eda:	697b      	ldr	r3, [r7, #20]
 8006edc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ede:	221b      	movs	r2, #27
 8006ee0:	6879      	ldr	r1, [r7, #4]
 8006ee2:	68b8      	ldr	r0, [r7, #8]
 8006ee4:	f7fe fc50 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f383 8811 	msr	BASEPRI, r3
}
 8006eee:	bf00      	nop
 8006ef0:	3718      	adds	r7, #24
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	bd80      	pop	{r7, pc}
 8006ef6:	bf00      	nop
 8006ef8:	2004c7cc 	.word	0x2004c7cc
 8006efc:	2004c7c8 	.word	0x2004c7c8

08006f00 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f00:	b40f      	push	{r0, r1, r2, r3}
 8006f02:	b580      	push	{r7, lr}
 8006f04:	b082      	sub	sp, #8
 8006f06:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f08:	f107 0314 	add.w	r3, r7, #20
 8006f0c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f0e:	1d3b      	adds	r3, r7, #4
 8006f10:	461a      	mov	r2, r3
 8006f12:	2100      	movs	r1, #0
 8006f14:	6938      	ldr	r0, [r7, #16]
 8006f16:	f7fe febf 	bl	8005c98 <_VPrintTarget>
  va_end(ParamList);
}
 8006f1a:	bf00      	nop
 8006f1c:	3708      	adds	r7, #8
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f24:	b004      	add	sp, #16
 8006f26:	4770      	bx	lr

08006f28 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b08a      	sub	sp, #40	@ 0x28
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f30:	f3ef 8311 	mrs	r3, BASEPRI
 8006f34:	f04f 0120 	mov.w	r1, #32
 8006f38:	f381 8811 	msr	BASEPRI, r1
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	4827      	ldr	r0, [pc, #156]	@ (8006fdc <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f40:	f7fe fb33 	bl	80055aa <_PreparePacket>
 8006f44:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f46:	2280      	movs	r2, #128	@ 0x80
 8006f48:	6879      	ldr	r1, [r7, #4]
 8006f4a:	6938      	ldr	r0, [r7, #16]
 8006f4c:	f7fe fae0 	bl	8005510 <_EncodeStr>
 8006f50:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f56:	2301      	movs	r3, #1
 8006f58:	623b      	str	r3, [r7, #32]
 8006f5a:	e00b      	b.n	8006f74 <SEGGER_SYSVIEW_Warn+0x4c>
 8006f5c:	6a3b      	ldr	r3, [r7, #32]
 8006f5e:	b2da      	uxtb	r2, r3
 8006f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f62:	1c59      	adds	r1, r3, #1
 8006f64:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f66:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f6a:	b2d2      	uxtb	r2, r2
 8006f6c:	701a      	strb	r2, [r3, #0]
 8006f6e:	6a3b      	ldr	r3, [r7, #32]
 8006f70:	09db      	lsrs	r3, r3, #7
 8006f72:	623b      	str	r3, [r7, #32]
 8006f74:	6a3b      	ldr	r3, [r7, #32]
 8006f76:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f78:	d8f0      	bhi.n	8006f5c <SEGGER_SYSVIEW_Warn+0x34>
 8006f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f7c:	1c5a      	adds	r2, r3, #1
 8006f7e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f80:	6a3a      	ldr	r2, [r7, #32]
 8006f82:	b2d2      	uxtb	r2, r2
 8006f84:	701a      	strb	r2, [r3, #0]
 8006f86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f88:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	61fb      	str	r3, [r7, #28]
 8006f8e:	2300      	movs	r3, #0
 8006f90:	61bb      	str	r3, [r7, #24]
 8006f92:	e00b      	b.n	8006fac <SEGGER_SYSVIEW_Warn+0x84>
 8006f94:	69bb      	ldr	r3, [r7, #24]
 8006f96:	b2da      	uxtb	r2, r3
 8006f98:	69fb      	ldr	r3, [r7, #28]
 8006f9a:	1c59      	adds	r1, r3, #1
 8006f9c:	61f9      	str	r1, [r7, #28]
 8006f9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa2:	b2d2      	uxtb	r2, r2
 8006fa4:	701a      	strb	r2, [r3, #0]
 8006fa6:	69bb      	ldr	r3, [r7, #24]
 8006fa8:	09db      	lsrs	r3, r3, #7
 8006faa:	61bb      	str	r3, [r7, #24]
 8006fac:	69bb      	ldr	r3, [r7, #24]
 8006fae:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb0:	d8f0      	bhi.n	8006f94 <SEGGER_SYSVIEW_Warn+0x6c>
 8006fb2:	69fb      	ldr	r3, [r7, #28]
 8006fb4:	1c5a      	adds	r2, r3, #1
 8006fb6:	61fa      	str	r2, [r7, #28]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	b2d2      	uxtb	r2, r2
 8006fbc:	701a      	strb	r2, [r3, #0]
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fc2:	221a      	movs	r2, #26
 8006fc4:	68f9      	ldr	r1, [r7, #12]
 8006fc6:	6938      	ldr	r0, [r7, #16]
 8006fc8:	f7fe fbde 	bl	8005788 <_SendPacket>
  RECORD_END();
 8006fcc:	697b      	ldr	r3, [r7, #20]
 8006fce:	f383 8811 	msr	BASEPRI, r3
}
 8006fd2:	bf00      	nop
 8006fd4:	3728      	adds	r7, #40	@ 0x28
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	2004c7cc 	.word	0x2004c7cc

08006fe0 <memcmp>:
 8006fe0:	b510      	push	{r4, lr}
 8006fe2:	3901      	subs	r1, #1
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4290      	cmp	r0, r2
 8006fe8:	d101      	bne.n	8006fee <memcmp+0xe>
 8006fea:	2000      	movs	r0, #0
 8006fec:	e005      	b.n	8006ffa <memcmp+0x1a>
 8006fee:	7803      	ldrb	r3, [r0, #0]
 8006ff0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ff4:	42a3      	cmp	r3, r4
 8006ff6:	d001      	beq.n	8006ffc <memcmp+0x1c>
 8006ff8:	1b18      	subs	r0, r3, r4
 8006ffa:	bd10      	pop	{r4, pc}
 8006ffc:	3001      	adds	r0, #1
 8006ffe:	e7f2      	b.n	8006fe6 <memcmp+0x6>

08007000 <memset>:
 8007000:	4402      	add	r2, r0
 8007002:	4603      	mov	r3, r0
 8007004:	4293      	cmp	r3, r2
 8007006:	d100      	bne.n	800700a <memset+0xa>
 8007008:	4770      	bx	lr
 800700a:	f803 1b01 	strb.w	r1, [r3], #1
 800700e:	e7f9      	b.n	8007004 <memset+0x4>

08007010 <__libc_init_array>:
 8007010:	b570      	push	{r4, r5, r6, lr}
 8007012:	4d0d      	ldr	r5, [pc, #52]	@ (8007048 <__libc_init_array+0x38>)
 8007014:	4c0d      	ldr	r4, [pc, #52]	@ (800704c <__libc_init_array+0x3c>)
 8007016:	1b64      	subs	r4, r4, r5
 8007018:	10a4      	asrs	r4, r4, #2
 800701a:	2600      	movs	r6, #0
 800701c:	42a6      	cmp	r6, r4
 800701e:	d109      	bne.n	8007034 <__libc_init_array+0x24>
 8007020:	4d0b      	ldr	r5, [pc, #44]	@ (8007050 <__libc_init_array+0x40>)
 8007022:	4c0c      	ldr	r4, [pc, #48]	@ (8007054 <__libc_init_array+0x44>)
 8007024:	f000 f826 	bl	8007074 <_init>
 8007028:	1b64      	subs	r4, r4, r5
 800702a:	10a4      	asrs	r4, r4, #2
 800702c:	2600      	movs	r6, #0
 800702e:	42a6      	cmp	r6, r4
 8007030:	d105      	bne.n	800703e <__libc_init_array+0x2e>
 8007032:	bd70      	pop	{r4, r5, r6, pc}
 8007034:	f855 3b04 	ldr.w	r3, [r5], #4
 8007038:	4798      	blx	r3
 800703a:	3601      	adds	r6, #1
 800703c:	e7ee      	b.n	800701c <__libc_init_array+0xc>
 800703e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007042:	4798      	blx	r3
 8007044:	3601      	adds	r6, #1
 8007046:	e7f2      	b.n	800702e <__libc_init_array+0x1e>
 8007048:	08007268 	.word	0x08007268
 800704c:	08007268 	.word	0x08007268
 8007050:	08007268 	.word	0x08007268
 8007054:	0800726c 	.word	0x0800726c

08007058 <memcpy>:
 8007058:	440a      	add	r2, r1
 800705a:	4291      	cmp	r1, r2
 800705c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007060:	d100      	bne.n	8007064 <memcpy+0xc>
 8007062:	4770      	bx	lr
 8007064:	b510      	push	{r4, lr}
 8007066:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800706e:	4291      	cmp	r1, r2
 8007070:	d1f9      	bne.n	8007066 <memcpy+0xe>
 8007072:	bd10      	pop	{r4, pc}

08007074 <_init>:
 8007074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007076:	bf00      	nop
 8007078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707a:	bc08      	pop	{r3}
 800707c:	469e      	mov	lr, r3
 800707e:	4770      	bx	lr

08007080 <_fini>:
 8007080:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007082:	bf00      	nop
 8007084:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007086:	bc08      	pop	{r3}
 8007088:	469e      	mov	lr, r3
 800708a:	4770      	bx	lr

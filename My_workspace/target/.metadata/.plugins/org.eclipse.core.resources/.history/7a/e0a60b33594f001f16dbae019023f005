#include "main.h"
#include "stm32f4xx_hal.h"

// Define the waveforms
int values1[] = {374, 364, 393, 415, 472, 547, 660, 749, 884, 1008, 1160, 1262, 1358, 1435, 1461, 1493, 1518, 1533, 1549, 1557, 1558, 1565, 1555, 1526, 1466, 1343, 1217, 1098, 962, 833, 695, 589, 512, 474, 417, 392, 397, 410, 386, 389, 382, 393, 377};
int values2[] = {388, 412, 486, 624, 764, 944, 1164, 1409, 1573, 1719, 1805, 1879, 1906, 1927, 1926, 1952, 1956, 2004, 2043, 2064, 2088, 2056, 1946, 1800, 1603, 1394, 1135, 925, 758, 642, 514, 445, 407, 404, 407, 401, 393, 384, 397, 379, 383, 373};
// Add other waveforms as needed

int microSnail = 600; // delay between values in microseconds
int shifftt = 5; // delay between channels given as a number of values
int snaill[] = {201, 318, 41, 44, 5000}; // delay between fluctuations

DAC_HandleTypeDef hdac;
//TIM_HandleTypeDef htim6;

void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
    static int index = 0;
    static int waveIndex = 0;

    if (htim->Instance == TIM6) {
        // Update DAC channels
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, values1[index]);
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, values1[index]);
        //HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, values2[(index + shifftt) % (sizeof(values2) / sizeof(values2[0]))]);

        index++;
        /*if (index >= sizeof(values1) / sizeof(values1[0])) {
            index = 0;
            waveIndex = (waveIndex + 1) % 5;
            HAL_Delay(snaill[waveIndex]);
        }
    }*/
}

int main(void) {
    HAL_Init();
    SystemClock_Config();
    MX_GPIO_Init();
    MX_DAC_Init();
    MX_TIM6_Init();

    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);

    HAL_TIM_Base_Start_IT(&htim6);

    while (1) {
        // Main loop does nothing, DAC updates are handled in the timer interrupt
    }
}

static void MX_DAC_Init(void) {
    DAC_ChannelConfTypeDef sConfig = {0};

    hdac.Instance = DAC;
    HAL_DAC_Init(&hdac);

    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
}

static void MX_TIM6_Init(void) {
    TIM_MasterConfigTypeDef sMasterConfig = {0};

    htim6.Instance = TIM6;
    htim6.Init.Prescaler = 8399; // 10 kHz timer clock
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
    htim6.Init.Period = 599; // 10 kHz / 600 = 16.67 Hz update rate
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
    HAL_TIM_Base_Init(&htim6);

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
    HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
}

void SystemClock_Config(void) {
    // System clock configuration code
}

static void MX_GPIO_Init(void) {
    // GPIO initialization code
}

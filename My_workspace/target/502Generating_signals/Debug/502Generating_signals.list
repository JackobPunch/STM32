
502Generating_signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000013b4  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  0800158c  0800158c  0000258c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001594  08001594  00004830  2**0
                  CONTENTS
  4 .ARM          00000000  08001594  08001594  00004830  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001594  08001594  00004830  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001594  08001594  00002594  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001598  08001598  00002598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001830  20000000  0800159c  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20001830  08002dcc  00004830  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200018ac  08002dcc  000048ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00004830  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a906  00000000  00000000  00004860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b4f  00000000  00000000  0000f166  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ac8  00000000  00000000  00010cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000841  00000000  00000000  00011780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000205ba  00000000  00000000  00011fc1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c127  00000000  00000000  0003257b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c961b  00000000  00000000  0003e6a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00107cbd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002c1c  00000000  00000000  00107d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  0010a91c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20001830 	.word	0x20001830
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08001574 	.word	0x08001574

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20001834 	.word	0x20001834
 8000214:	08001574 	.word	0x08001574

08000218 <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000218:	b580      	push	{r7, lr}
 800021a:	b082      	sub	sp, #8
 800021c:	af00      	add	r7, sp, #0
 800021e:	6078      	str	r0, [r7, #4]
    static int index = 0;

    if (htim->Instance == TIM6) {
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	681b      	ldr	r3, [r3, #0]
 8000224:	4a0f      	ldr	r2, [pc, #60]	@ (8000264 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 8000226:	4293      	cmp	r3, r2
 8000228:	d118      	bne.n	800025c <HAL_TIM_PeriodElapsedCallback+0x44>
        // Update DAC channels
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, values1[index]);
 800022a:	4b0f      	ldr	r3, [pc, #60]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	4a0f      	ldr	r2, [pc, #60]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000230:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000234:	2200      	movs	r2, #0
 8000236:	2100      	movs	r1, #0
 8000238:	480d      	ldr	r0, [pc, #52]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800023a:	f000 fbdc 	bl	80009f6 <HAL_DAC_SetValue>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, values1[index]);
 800023e:	4b0a      	ldr	r3, [pc, #40]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000240:	681b      	ldr	r3, [r3, #0]
 8000242:	4a0a      	ldr	r2, [pc, #40]	@ (800026c <HAL_TIM_PeriodElapsedCallback+0x54>)
 8000244:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000248:	2200      	movs	r2, #0
 800024a:	2110      	movs	r1, #16
 800024c:	4808      	ldr	r0, [pc, #32]	@ (8000270 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800024e:	f000 fbd2 	bl	80009f6 <HAL_DAC_SetValue>
        index++;
 8000252:	4b05      	ldr	r3, [pc, #20]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	4a03      	ldr	r2, [pc, #12]	@ (8000268 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800025a:	6013      	str	r3, [r2, #0]
    }
}
 800025c:	bf00      	nop
 800025e:	3708      	adds	r7, #8
 8000260:	46bd      	mov	sp, r7
 8000262:	bd80      	pop	{r7, pc}
 8000264:	40001000 	.word	0x40001000
 8000268:	20001860 	.word	0x20001860
 800026c:	20000000 	.word	0x20000000
 8000270:	2000184c 	.word	0x2000184c

08000274 <main>:

int main(void) {
 8000274:	b580      	push	{r7, lr}
 8000276:	af00      	add	r7, sp, #0
    HAL_Init();
 8000278:	f000 f9ea 	bl	8000650 <HAL_Init>
    SystemClock_Config();
 800027c:	f000 f86a 	bl	8000354 <SystemClock_Config>
    MX_GPIO_Init();
 8000280:	f000 f86f 	bl	8000362 <MX_GPIO_Init>
    MX_DAC_Init();
 8000284:	f000 f814 	bl	80002b0 <MX_DAC_Init>
    MX_TIM6_Init();
 8000288:	f000 f838 	bl	80002fc <MX_TIM6_Init>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800028c:	2100      	movs	r1, #0
 800028e:	4806      	ldr	r0, [pc, #24]	@ (80002a8 <main+0x34>)
 8000290:	f000 fb04 	bl	800089c <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000294:	2110      	movs	r1, #16
 8000296:	4804      	ldr	r0, [pc, #16]	@ (80002a8 <main+0x34>)
 8000298:	f000 fb00 	bl	800089c <HAL_DAC_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 800029c:	4803      	ldr	r0, [pc, #12]	@ (80002ac <main+0x38>)
 800029e:	f000 fe81 	bl	8000fa4 <HAL_TIM_Base_Start_IT>

    while (1) {
 80002a2:	bf00      	nop
 80002a4:	e7fd      	b.n	80002a2 <main+0x2e>
 80002a6:	bf00      	nop
 80002a8:	2000184c 	.word	0x2000184c
 80002ac:	20001864 	.word	0x20001864

080002b0 <MX_DAC_Init>:
        // Main loop does nothing, DAC updates are handled in the timer interrupt
    }
}

static void MX_DAC_Init(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	b082      	sub	sp, #8
 80002b4:	af00      	add	r7, sp, #0
    DAC_ChannelConfTypeDef sConfig = {0};
 80002b6:	463b      	mov	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]
 80002bc:	605a      	str	r2, [r3, #4]

    hdac.Instance = DAC;
 80002be:	4b0d      	ldr	r3, [pc, #52]	@ (80002f4 <MX_DAC_Init+0x44>)
 80002c0:	4a0d      	ldr	r2, [pc, #52]	@ (80002f8 <MX_DAC_Init+0x48>)
 80002c2:	601a      	str	r2, [r3, #0]
    HAL_DAC_Init(&hdac);
 80002c4:	480b      	ldr	r0, [pc, #44]	@ (80002f4 <MX_DAC_Init+0x44>)
 80002c6:	f000 fac7 	bl	8000858 <HAL_DAC_Init>

    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80002ca:	2304      	movs	r3, #4
 80002cc:	603b      	str	r3, [r7, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80002ce:	2300      	movs	r3, #0
 80002d0:	607b      	str	r3, [r7, #4]
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 80002d2:	463b      	mov	r3, r7
 80002d4:	2200      	movs	r2, #0
 80002d6:	4619      	mov	r1, r3
 80002d8:	4806      	ldr	r0, [pc, #24]	@ (80002f4 <MX_DAC_Init+0x44>)
 80002da:	f000 fbc0 	bl	8000a5e <HAL_DAC_ConfigChannel>
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 80002de:	463b      	mov	r3, r7
 80002e0:	2210      	movs	r2, #16
 80002e2:	4619      	mov	r1, r3
 80002e4:	4803      	ldr	r0, [pc, #12]	@ (80002f4 <MX_DAC_Init+0x44>)
 80002e6:	f000 fbba 	bl	8000a5e <HAL_DAC_ConfigChannel>
}
 80002ea:	bf00      	nop
 80002ec:	3708      	adds	r7, #8
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bd80      	pop	{r7, pc}
 80002f2:	bf00      	nop
 80002f4:	2000184c 	.word	0x2000184c
 80002f8:	40007400 	.word	0x40007400

080002fc <MX_TIM6_Init>:

static void MX_TIM6_Init(void) {
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b082      	sub	sp, #8
 8000300:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000302:	463b      	mov	r3, r7
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
 8000308:	605a      	str	r2, [r3, #4]

    htim6.Instance = TIM6;
 800030a:	4b10      	ldr	r3, [pc, #64]	@ (800034c <MX_TIM6_Init+0x50>)
 800030c:	4a10      	ldr	r2, [pc, #64]	@ (8000350 <MX_TIM6_Init+0x54>)
 800030e:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 8399; // 10 kHz timer clock
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <MX_TIM6_Init+0x50>)
 8000312:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8000316:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000318:	4b0c      	ldr	r3, [pc, #48]	@ (800034c <MX_TIM6_Init+0x50>)
 800031a:	2200      	movs	r2, #0
 800031c:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 99;//599; // 10 kHz / 600 = 16.67 Hz update rate
 800031e:	4b0b      	ldr	r3, [pc, #44]	@ (800034c <MX_TIM6_Init+0x50>)
 8000320:	2263      	movs	r2, #99	@ 0x63
 8000322:	60da      	str	r2, [r3, #12]
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b09      	ldr	r3, [pc, #36]	@ (800034c <MX_TIM6_Init+0x50>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim6);
 800032a:	4808      	ldr	r0, [pc, #32]	@ (800034c <MX_TIM6_Init+0x50>)
 800032c:	f000 fde0 	bl	8000ef0 <HAL_TIM_Base_Init>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000330:	2320      	movs	r3, #32
 8000332:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000334:	2300      	movs	r3, #0
 8000336:	607b      	str	r3, [r7, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 8000338:	463b      	mov	r3, r7
 800033a:	4619      	mov	r1, r3
 800033c:	4803      	ldr	r0, [pc, #12]	@ (800034c <MX_TIM6_Init+0x50>)
 800033e:	f001 f865 	bl	800140c <HAL_TIMEx_MasterConfigSynchronization>
}
 8000342:	bf00      	nop
 8000344:	3708      	adds	r7, #8
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
 800034a:	bf00      	nop
 800034c:	20001864 	.word	0x20001864
 8000350:	40001000 	.word	0x40001000

08000354 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
    // System clock configuration code
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000360:	4770      	bx	lr

08000362 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
    // GPIO initialization code
}
 8000366:	bf00      	nop
 8000368:	46bd      	mov	sp, r7
 800036a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800036e:	4770      	bx	lr

08000370 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000376:	2300      	movs	r3, #0
 8000378:	607b      	str	r3, [r7, #4]
 800037a:	4b10      	ldr	r3, [pc, #64]	@ (80003bc <HAL_MspInit+0x4c>)
 800037c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800037e:	4a0f      	ldr	r2, [pc, #60]	@ (80003bc <HAL_MspInit+0x4c>)
 8000380:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000384:	6453      	str	r3, [r2, #68]	@ 0x44
 8000386:	4b0d      	ldr	r3, [pc, #52]	@ (80003bc <HAL_MspInit+0x4c>)
 8000388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800038a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800038e:	607b      	str	r3, [r7, #4]
 8000390:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000392:	2300      	movs	r3, #0
 8000394:	603b      	str	r3, [r7, #0]
 8000396:	4b09      	ldr	r3, [pc, #36]	@ (80003bc <HAL_MspInit+0x4c>)
 8000398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800039a:	4a08      	ldr	r2, [pc, #32]	@ (80003bc <HAL_MspInit+0x4c>)
 800039c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80003a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80003a2:	4b06      	ldr	r3, [pc, #24]	@ (80003bc <HAL_MspInit+0x4c>)
 80003a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80003aa:	603b      	str	r3, [r7, #0]
 80003ac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ae:	bf00      	nop
 80003b0:	370c      	adds	r7, #12
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	40023800 	.word	0x40023800

080003c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b08a      	sub	sp, #40	@ 0x28
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003c8:	f107 0314 	add.w	r3, r7, #20
 80003cc:	2200      	movs	r2, #0
 80003ce:	601a      	str	r2, [r3, #0]
 80003d0:	605a      	str	r2, [r3, #4]
 80003d2:	609a      	str	r2, [r3, #8]
 80003d4:	60da      	str	r2, [r3, #12]
 80003d6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	681b      	ldr	r3, [r3, #0]
 80003dc:	4a1b      	ldr	r2, [pc, #108]	@ (800044c <HAL_DAC_MspInit+0x8c>)
 80003de:	4293      	cmp	r3, r2
 80003e0:	d12f      	bne.n	8000442 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80003e2:	2300      	movs	r3, #0
 80003e4:	613b      	str	r3, [r7, #16]
 80003e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 80003e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003ea:	4a19      	ldr	r2, [pc, #100]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 80003ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80003f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80003f2:	4b17      	ldr	r3, [pc, #92]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 80003f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80003f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80003fa:	613b      	str	r3, [r7, #16]
 80003fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
 800040e:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <HAL_DAC_MspInit+0x90>)
 8000410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000412:	f003 0301 	and.w	r3, r3, #1
 8000416:	60fb      	str	r3, [r7, #12]
 8000418:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800041a:	2330      	movs	r3, #48	@ 0x30
 800041c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800041e:	2303      	movs	r3, #3
 8000420:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000422:	2300      	movs	r3, #0
 8000424:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000426:	f107 0314 	add.w	r3, r7, #20
 800042a:	4619      	mov	r1, r3
 800042c:	4809      	ldr	r0, [pc, #36]	@ (8000454 <HAL_DAC_MspInit+0x94>)
 800042e:	f000 fb79 	bl	8000b24 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8000432:	2200      	movs	r2, #0
 8000434:	210f      	movs	r1, #15
 8000436:	2036      	movs	r0, #54	@ 0x36
 8000438:	f000 f9e4 	bl	8000804 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800043c:	2036      	movs	r0, #54	@ 0x36
 800043e:	f000 f9fd 	bl	800083c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000442:	bf00      	nop
 8000444:	3728      	adds	r7, #40	@ 0x28
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40007400 	.word	0x40007400
 8000450:	40023800 	.word	0x40023800
 8000454:	40020000 	.word	0x40020000

08000458 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000458:	b580      	push	{r7, lr}
 800045a:	b08e      	sub	sp, #56	@ 0x38
 800045c:	af00      	add	r7, sp, #0
 800045e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000460:	2300      	movs	r3, #0
 8000462:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000464:	2300      	movs	r3, #0
 8000466:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000468:	2300      	movs	r3, #0
 800046a:	60fb      	str	r3, [r7, #12]
 800046c:	4b33      	ldr	r3, [pc, #204]	@ (800053c <HAL_InitTick+0xe4>)
 800046e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000470:	4a32      	ldr	r2, [pc, #200]	@ (800053c <HAL_InitTick+0xe4>)
 8000472:	f043 0310 	orr.w	r3, r3, #16
 8000476:	6413      	str	r3, [r2, #64]	@ 0x40
 8000478:	4b30      	ldr	r3, [pc, #192]	@ (800053c <HAL_InitTick+0xe4>)
 800047a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800047c:	f003 0310 	and.w	r3, r3, #16
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000484:	f107 0210 	add.w	r2, r7, #16
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4611      	mov	r1, r2
 800048e:	4618      	mov	r0, r3
 8000490:	f000 fcfc 	bl	8000e8c <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000494:	6a3b      	ldr	r3, [r7, #32]
 8000496:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800049a:	2b00      	cmp	r3, #0
 800049c:	d103      	bne.n	80004a6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800049e:	f000 fce1 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 80004a2:	6378      	str	r0, [r7, #52]	@ 0x34
 80004a4:	e004      	b.n	80004b0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80004a6:	f000 fcdd 	bl	8000e64 <HAL_RCC_GetPCLK1Freq>
 80004aa:	4603      	mov	r3, r0
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80004b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80004b2:	4a23      	ldr	r2, [pc, #140]	@ (8000540 <HAL_InitTick+0xe8>)
 80004b4:	fba2 2303 	umull	r2, r3, r2, r3
 80004b8:	0c9b      	lsrs	r3, r3, #18
 80004ba:	3b01      	subs	r3, #1
 80004bc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80004be:	4b21      	ldr	r3, [pc, #132]	@ (8000544 <HAL_InitTick+0xec>)
 80004c0:	4a21      	ldr	r2, [pc, #132]	@ (8000548 <HAL_InitTick+0xf0>)
 80004c2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80004c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000544 <HAL_InitTick+0xec>)
 80004c6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80004ca:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80004cc:	4a1d      	ldr	r2, [pc, #116]	@ (8000544 <HAL_InitTick+0xec>)
 80004ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80004d0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80004d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000544 <HAL_InitTick+0xec>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004d8:	4b1a      	ldr	r3, [pc, #104]	@ (8000544 <HAL_InitTick+0xec>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004de:	4b19      	ldr	r3, [pc, #100]	@ (8000544 <HAL_InitTick+0xec>)
 80004e0:	2200      	movs	r2, #0
 80004e2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80004e4:	4817      	ldr	r0, [pc, #92]	@ (8000544 <HAL_InitTick+0xec>)
 80004e6:	f000 fd03 	bl	8000ef0 <HAL_TIM_Base_Init>
 80004ea:	4603      	mov	r3, r0
 80004ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80004f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d11b      	bne.n	8000530 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80004f8:	4812      	ldr	r0, [pc, #72]	@ (8000544 <HAL_InitTick+0xec>)
 80004fa:	f000 fd53 	bl	8000fa4 <HAL_TIM_Base_Start_IT>
 80004fe:	4603      	mov	r3, r0
 8000500:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000504:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000508:	2b00      	cmp	r3, #0
 800050a:	d111      	bne.n	8000530 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800050c:	2036      	movs	r0, #54	@ 0x36
 800050e:	f000 f995 	bl	800083c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	2b0f      	cmp	r3, #15
 8000516:	d808      	bhi.n	800052a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000518:	2200      	movs	r2, #0
 800051a:	6879      	ldr	r1, [r7, #4]
 800051c:	2036      	movs	r0, #54	@ 0x36
 800051e:	f000 f971 	bl	8000804 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000522:	4a0a      	ldr	r2, [pc, #40]	@ (800054c <HAL_InitTick+0xf4>)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	6013      	str	r3, [r2, #0]
 8000528:	e002      	b.n	8000530 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800052a:	2301      	movs	r3, #1
 800052c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000530:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000534:	4618      	mov	r0, r3
 8000536:	3738      	adds	r7, #56	@ 0x38
 8000538:	46bd      	mov	sp, r7
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40023800 	.word	0x40023800
 8000540:	431bde83 	.word	0x431bde83
 8000544:	20001864 	.word	0x20001864
 8000548:	40001000 	.word	0x40001000
 800054c:	2000182c 	.word	0x2000182c

08000550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000554:	bf00      	nop
 8000556:	e7fd      	b.n	8000554 <NMI_Handler+0x4>

08000558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000558:	b480      	push	{r7}
 800055a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800055c:	bf00      	nop
 800055e:	e7fd      	b.n	800055c <HardFault_Handler+0x4>

08000560 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000564:	bf00      	nop
 8000566:	e7fd      	b.n	8000564 <MemManage_Handler+0x4>

08000568 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800056c:	bf00      	nop
 800056e:	e7fd      	b.n	800056c <BusFault_Handler+0x4>

08000570 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000574:	bf00      	nop
 8000576:	e7fd      	b.n	8000574 <UsageFault_Handler+0x4>

08000578 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800057c:	bf00      	nop
 800057e:	46bd      	mov	sp, r7
 8000580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000584:	4770      	bx	lr

08000586 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000586:	b480      	push	{r7}
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000598:	bf00      	nop
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005a2:	b480      	push	{r7}
 80005a4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005a6:	bf00      	nop
 80005a8:	46bd      	mov	sp, r7
 80005aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ae:	4770      	bx	lr

080005b0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80005b4:	4b06      	ldr	r3, [pc, #24]	@ (80005d0 <TIM6_DAC_IRQHandler+0x20>)
 80005b6:	791b      	ldrb	r3, [r3, #4]
 80005b8:	b2db      	uxtb	r3, r3
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d002      	beq.n	80005c4 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80005be:	4804      	ldr	r0, [pc, #16]	@ (80005d0 <TIM6_DAC_IRQHandler+0x20>)
 80005c0:	f000 f9c3 	bl	800094a <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80005c4:	4803      	ldr	r0, [pc, #12]	@ (80005d4 <TIM6_DAC_IRQHandler+0x24>)
 80005c6:	f000 fd5d 	bl	8001084 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80005ca:	bf00      	nop
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	2000184c 	.word	0x2000184c
 80005d4:	20001864 	.word	0x20001864

080005d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005d8:	b480      	push	{r7}
 80005da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005dc:	4b06      	ldr	r3, [pc, #24]	@ (80005f8 <SystemInit+0x20>)
 80005de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80005e2:	4a05      	ldr	r2, [pc, #20]	@ (80005f8 <SystemInit+0x20>)
 80005e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80005e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	e000ed00 	.word	0xe000ed00

080005fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 80005fc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000634 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000600:	f7ff ffea 	bl	80005d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000604:	480c      	ldr	r0, [pc, #48]	@ (8000638 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000606:	490d      	ldr	r1, [pc, #52]	@ (800063c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000608:	4a0d      	ldr	r2, [pc, #52]	@ (8000640 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800060a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800060c:	e002      	b.n	8000614 <LoopCopyDataInit>

0800060e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000610:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000612:	3304      	adds	r3, #4

08000614 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000614:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000616:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000618:	d3f9      	bcc.n	800060e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800061a:	4a0a      	ldr	r2, [pc, #40]	@ (8000644 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800061c:	4c0a      	ldr	r4, [pc, #40]	@ (8000648 <LoopFillZerobss+0x22>)
  movs r3, #0
 800061e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000620:	e001      	b.n	8000626 <LoopFillZerobss>

08000622 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000622:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000624:	3204      	adds	r2, #4

08000626 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000626:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000628:	d3fb      	bcc.n	8000622 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800062a:	f000 ff7f 	bl	800152c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800062e:	f7ff fe21 	bl	8000274 <main>
  bx  lr    
 8000632:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000634:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000638:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800063c:	20001830 	.word	0x20001830
  ldr r2, =_sidata
 8000640:	0800159c 	.word	0x0800159c
  ldr r2, =_sbss
 8000644:	20001830 	.word	0x20001830
  ldr r4, =_ebss
 8000648:	200018ac 	.word	0x200018ac

0800064c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800064c:	e7fe      	b.n	800064c <ADC_IRQHandler>
	...

08000650 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000654:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <HAL_Init+0x40>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	4a0d      	ldr	r2, [pc, #52]	@ (8000690 <HAL_Init+0x40>)
 800065a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800065e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000660:	4b0b      	ldr	r3, [pc, #44]	@ (8000690 <HAL_Init+0x40>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <HAL_Init+0x40>)
 8000666:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800066a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800066c:	4b08      	ldr	r3, [pc, #32]	@ (8000690 <HAL_Init+0x40>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	4a07      	ldr	r2, [pc, #28]	@ (8000690 <HAL_Init+0x40>)
 8000672:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000676:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000678:	2003      	movs	r0, #3
 800067a:	f000 f8b8 	bl	80007ee <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800067e:	200f      	movs	r0, #15
 8000680:	f7ff feea 	bl	8000458 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000684:	f7ff fe74 	bl	8000370 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000688:	2300      	movs	r3, #0
}
 800068a:	4618      	mov	r0, r3
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023c00 	.word	0x40023c00

08000694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	f003 0307 	and.w	r3, r3, #7
 80006a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80006a4:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80006aa:	68ba      	ldr	r2, [r7, #8]
 80006ac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80006b0:	4013      	ands	r3, r2
 80006b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80006b4:	68fb      	ldr	r3, [r7, #12]
 80006b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80006b8:	68bb      	ldr	r3, [r7, #8]
 80006ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80006bc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80006c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006c6:	4a04      	ldr	r2, [pc, #16]	@ (80006d8 <__NVIC_SetPriorityGrouping+0x44>)
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	60d3      	str	r3, [r2, #12]
}
 80006cc:	bf00      	nop
 80006ce:	3714      	adds	r7, #20
 80006d0:	46bd      	mov	sp, r7
 80006d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d6:	4770      	bx	lr
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006e0:	4b04      	ldr	r3, [pc, #16]	@ (80006f4 <__NVIC_GetPriorityGrouping+0x18>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	0a1b      	lsrs	r3, r3, #8
 80006e6:	f003 0307 	and.w	r3, r3, #7
}
 80006ea:	4618      	mov	r0, r3
 80006ec:	46bd      	mov	sp, r7
 80006ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f2:	4770      	bx	lr
 80006f4:	e000ed00 	.word	0xe000ed00

080006f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006f8:	b480      	push	{r7}
 80006fa:	b083      	sub	sp, #12
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000706:	2b00      	cmp	r3, #0
 8000708:	db0b      	blt.n	8000722 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800070a:	79fb      	ldrb	r3, [r7, #7]
 800070c:	f003 021f 	and.w	r2, r3, #31
 8000710:	4907      	ldr	r1, [pc, #28]	@ (8000730 <__NVIC_EnableIRQ+0x38>)
 8000712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000716:	095b      	lsrs	r3, r3, #5
 8000718:	2001      	movs	r0, #1
 800071a:	fa00 f202 	lsl.w	r2, r0, r2
 800071e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000722:	bf00      	nop
 8000724:	370c      	adds	r7, #12
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	e000e100 	.word	0xe000e100

08000734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000734:	b480      	push	{r7}
 8000736:	b083      	sub	sp, #12
 8000738:	af00      	add	r7, sp, #0
 800073a:	4603      	mov	r3, r0
 800073c:	6039      	str	r1, [r7, #0]
 800073e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000744:	2b00      	cmp	r3, #0
 8000746:	db0a      	blt.n	800075e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	b2da      	uxtb	r2, r3
 800074c:	490c      	ldr	r1, [pc, #48]	@ (8000780 <__NVIC_SetPriority+0x4c>)
 800074e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000752:	0112      	lsls	r2, r2, #4
 8000754:	b2d2      	uxtb	r2, r2
 8000756:	440b      	add	r3, r1
 8000758:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800075c:	e00a      	b.n	8000774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800075e:	683b      	ldr	r3, [r7, #0]
 8000760:	b2da      	uxtb	r2, r3
 8000762:	4908      	ldr	r1, [pc, #32]	@ (8000784 <__NVIC_SetPriority+0x50>)
 8000764:	79fb      	ldrb	r3, [r7, #7]
 8000766:	f003 030f 	and.w	r3, r3, #15
 800076a:	3b04      	subs	r3, #4
 800076c:	0112      	lsls	r2, r2, #4
 800076e:	b2d2      	uxtb	r2, r2
 8000770:	440b      	add	r3, r1
 8000772:	761a      	strb	r2, [r3, #24]
}
 8000774:	bf00      	nop
 8000776:	370c      	adds	r7, #12
 8000778:	46bd      	mov	sp, r7
 800077a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077e:	4770      	bx	lr
 8000780:	e000e100 	.word	0xe000e100
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000788:	b480      	push	{r7}
 800078a:	b089      	sub	sp, #36	@ 0x24
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800079c:	69fb      	ldr	r3, [r7, #28]
 800079e:	f1c3 0307 	rsb	r3, r3, #7
 80007a2:	2b04      	cmp	r3, #4
 80007a4:	bf28      	it	cs
 80007a6:	2304      	movcs	r3, #4
 80007a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80007aa:	69fb      	ldr	r3, [r7, #28]
 80007ac:	3304      	adds	r3, #4
 80007ae:	2b06      	cmp	r3, #6
 80007b0:	d902      	bls.n	80007b8 <NVIC_EncodePriority+0x30>
 80007b2:	69fb      	ldr	r3, [r7, #28]
 80007b4:	3b03      	subs	r3, #3
 80007b6:	e000      	b.n	80007ba <NVIC_EncodePriority+0x32>
 80007b8:	2300      	movs	r3, #0
 80007ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007bc:	f04f 32ff 	mov.w	r2, #4294967295
 80007c0:	69bb      	ldr	r3, [r7, #24]
 80007c2:	fa02 f303 	lsl.w	r3, r2, r3
 80007c6:	43da      	mvns	r2, r3
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	401a      	ands	r2, r3
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007d0:	f04f 31ff 	mov.w	r1, #4294967295
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	fa01 f303 	lsl.w	r3, r1, r3
 80007da:	43d9      	mvns	r1, r3
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007e0:	4313      	orrs	r3, r2
         );
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	3724      	adds	r7, #36	@ 0x24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr

080007ee <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80007ee:	b580      	push	{r7, lr}
 80007f0:	b082      	sub	sp, #8
 80007f2:	af00      	add	r7, sp, #0
 80007f4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007f6:	6878      	ldr	r0, [r7, #4]
 80007f8:	f7ff ff4c 	bl	8000694 <__NVIC_SetPriorityGrouping>
}
 80007fc:	bf00      	nop
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}

08000804 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000804:	b580      	push	{r7, lr}
 8000806:	b086      	sub	sp, #24
 8000808:	af00      	add	r7, sp, #0
 800080a:	4603      	mov	r3, r0
 800080c:	60b9      	str	r1, [r7, #8]
 800080e:	607a      	str	r2, [r7, #4]
 8000810:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000812:	2300      	movs	r3, #0
 8000814:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000816:	f7ff ff61 	bl	80006dc <__NVIC_GetPriorityGrouping>
 800081a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800081c:	687a      	ldr	r2, [r7, #4]
 800081e:	68b9      	ldr	r1, [r7, #8]
 8000820:	6978      	ldr	r0, [r7, #20]
 8000822:	f7ff ffb1 	bl	8000788 <NVIC_EncodePriority>
 8000826:	4602      	mov	r2, r0
 8000828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800082c:	4611      	mov	r1, r2
 800082e:	4618      	mov	r0, r3
 8000830:	f7ff ff80 	bl	8000734 <__NVIC_SetPriority>
}
 8000834:	bf00      	nop
 8000836:	3718      	adds	r7, #24
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}

0800083c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000846:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800084a:	4618      	mov	r0, r3
 800084c:	f7ff ff54 	bl	80006f8 <__NVIC_EnableIRQ>
}
 8000850:	bf00      	nop
 8000852:	3708      	adds	r7, #8
 8000854:	46bd      	mov	sp, r7
 8000856:	bd80      	pop	{r7, pc}

08000858 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b082      	sub	sp, #8
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	2b00      	cmp	r3, #0
 8000864:	d101      	bne.n	800086a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000866:	2301      	movs	r3, #1
 8000868:	e014      	b.n	8000894 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	791b      	ldrb	r3, [r3, #4]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d105      	bne.n	8000880 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	2200      	movs	r2, #0
 8000878:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800087a:	6878      	ldr	r0, [r7, #4]
 800087c:	f7ff fda0 	bl	80003c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2202      	movs	r2, #2
 8000884:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	2201      	movs	r2, #1
 8000890:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000892:	2300      	movs	r3, #0
}
 8000894:	4618      	mov	r0, r3
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800089c:	b480      	push	{r7}
 800089e:	b083      	sub	sp, #12
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
 80008a4:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d101      	bne.n	80008b0 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80008ac:	2301      	movs	r3, #1
 80008ae:	e046      	b.n	800093e <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	795b      	ldrb	r3, [r3, #5]
 80008b4:	2b01      	cmp	r3, #1
 80008b6:	d101      	bne.n	80008bc <HAL_DAC_Start+0x20>
 80008b8:	2302      	movs	r3, #2
 80008ba:	e040      	b.n	800093e <HAL_DAC_Start+0xa2>
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2201      	movs	r2, #1
 80008c0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2202      	movs	r2, #2
 80008c6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	6819      	ldr	r1, [r3, #0]
 80008ce:	683b      	ldr	r3, [r7, #0]
 80008d0:	f003 0310 	and.w	r3, r3, #16
 80008d4:	2201      	movs	r2, #1
 80008d6:	409a      	lsls	r2, r3
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	430a      	orrs	r2, r1
 80008de:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80008e0:	683b      	ldr	r3, [r7, #0]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d10f      	bne.n	8000906 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80008f0:	2b3c      	cmp	r3, #60	@ 0x3c
 80008f2:	d11d      	bne.n	8000930 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	685a      	ldr	r2, [r3, #4]
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f042 0201 	orr.w	r2, r2, #1
 8000902:	605a      	str	r2, [r3, #4]
 8000904:	e014      	b.n	8000930 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	f003 0310 	and.w	r3, r3, #16
 8000916:	213c      	movs	r1, #60	@ 0x3c
 8000918:	fa01 f303 	lsl.w	r3, r1, r3
 800091c:	429a      	cmp	r2, r3
 800091e:	d107      	bne.n	8000930 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	685a      	ldr	r2, [r3, #4]
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	f042 0202 	orr.w	r2, r2, #2
 800092e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	2201      	movs	r2, #1
 8000934:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	2200      	movs	r2, #0
 800093a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800093c:	2300      	movs	r3, #0
}
 800093e:	4618      	mov	r0, r3
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr

0800094a <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b084      	sub	sp, #16
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	681b      	ldr	r3, [r3, #0]
 800095e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000960:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000968:	2b00      	cmp	r3, #0
 800096a:	d01d      	beq.n	80009a8 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800096c:	68bb      	ldr	r3, [r7, #8]
 800096e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000972:	2b00      	cmp	r3, #0
 8000974:	d018      	beq.n	80009a8 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2204      	movs	r2, #4
 800097a:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	691b      	ldr	r3, [r3, #16]
 8000980:	f043 0201 	orr.w	r2, r3, #1
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000990:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	681a      	ldr	r2, [r3, #0]
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80009a0:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80009a2:	6878      	ldr	r0, [r7, #4]
 80009a4:	f000 f851 	bl	8000a4a <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d01d      	beq.n	80009ee <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d018      	beq.n	80009ee <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	2204      	movs	r2, #4
 80009c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	691b      	ldr	r3, [r3, #16]
 80009c6:	f043 0202 	orr.w	r2, r3, #2
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	681b      	ldr	r3, [r3, #0]
 80009d2:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80009d6:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80009e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80009e8:	6878      	ldr	r0, [r7, #4]
 80009ea:	f000 f891 	bl	8000b10 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 80009ee:	bf00      	nop
 80009f0:	3710      	adds	r7, #16
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}

080009f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80009f6:	b480      	push	{r7}
 80009f8:	b087      	sub	sp, #28
 80009fa:	af00      	add	r7, sp, #0
 80009fc:	60f8      	str	r0, [r7, #12]
 80009fe:	60b9      	str	r1, [r7, #8]
 8000a00:	607a      	str	r2, [r7, #4]
 8000a02:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000a04:	2300      	movs	r3, #0
 8000a06:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d101      	bne.n	8000a12 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e015      	b.n	8000a3e <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d105      	bne.n	8000a2a <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000a1e:	697a      	ldr	r2, [r7, #20]
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	3308      	adds	r3, #8
 8000a26:	617b      	str	r3, [r7, #20]
 8000a28:	e004      	b.n	8000a34 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000a2a:	697a      	ldr	r2, [r7, #20]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	4413      	add	r3, r2
 8000a30:	3314      	adds	r3, #20
 8000a32:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000a34:	697b      	ldr	r3, [r7, #20]
 8000a36:	461a      	mov	r2, r3
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000a3c:	2300      	movs	r3, #0
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	371c      	adds	r7, #28
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr

08000a4a <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr

08000a5e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000a5e:	b480      	push	{r7}
 8000a60:	b089      	sub	sp, #36	@ 0x24
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	60f8      	str	r0, [r7, #12]
 8000a66:	60b9      	str	r1, [r7, #8]
 8000a68:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d002      	beq.n	8000a7a <HAL_DAC_ConfigChannel+0x1c>
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d101      	bne.n	8000a7e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	e042      	b.n	8000b04 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	795b      	ldrb	r3, [r3, #5]
 8000a82:	2b01      	cmp	r3, #1
 8000a84:	d101      	bne.n	8000a8a <HAL_DAC_ConfigChannel+0x2c>
 8000a86:	2302      	movs	r3, #2
 8000a88:	e03c      	b.n	8000b04 <HAL_DAC_ConfigChannel+0xa6>
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	2201      	movs	r2, #1
 8000a8e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000a90:	68fb      	ldr	r3, [r7, #12]
 8000a92:	2202      	movs	r2, #2
 8000a94:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	f003 0310 	and.w	r3, r3, #16
 8000aa4:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000aa8:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000aac:	43db      	mvns	r3, r3
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	4013      	ands	r3, r2
 8000ab2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000ab4:	68bb      	ldr	r3, [r7, #8]
 8000ab6:	681a      	ldr	r2, [r3, #0]
 8000ab8:	68bb      	ldr	r3, [r7, #8]
 8000aba:	685b      	ldr	r3, [r3, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	f003 0310 	and.w	r3, r3, #16
 8000ac6:	697a      	ldr	r2, [r7, #20]
 8000ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	4313      	orrs	r3, r2
 8000ad0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	6819      	ldr	r1, [r3, #0]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f003 0310 	and.w	r3, r3, #16
 8000ae6:	22c0      	movs	r2, #192	@ 0xc0
 8000ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8000aec:	43da      	mvns	r2, r3
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	400a      	ands	r2, r1
 8000af4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	2201      	movs	r2, #1
 8000afa:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2200      	movs	r2, #0
 8000b00:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000b02:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	3724      	adds	r7, #36	@ 0x24
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0e:	4770      	bx	lr

08000b10 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr

08000b24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b24:	b480      	push	{r7}
 8000b26:	b089      	sub	sp, #36	@ 0x24
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000b32:	2300      	movs	r3, #0
 8000b34:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000b36:	2300      	movs	r3, #0
 8000b38:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
 8000b3e:	e165      	b.n	8000e0c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000b40:	2201      	movs	r2, #1
 8000b42:	69fb      	ldr	r3, [r7, #28]
 8000b44:	fa02 f303 	lsl.w	r3, r2, r3
 8000b48:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b4a:	683b      	ldr	r3, [r7, #0]
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	4013      	ands	r3, r2
 8000b52:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000b54:	693a      	ldr	r2, [r7, #16]
 8000b56:	697b      	ldr	r3, [r7, #20]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	f040 8154 	bne.w	8000e06 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	f003 0303 	and.w	r3, r3, #3
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d005      	beq.n	8000b76 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b6a:	683b      	ldr	r3, [r7, #0]
 8000b6c:	685b      	ldr	r3, [r3, #4]
 8000b6e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000b72:	2b02      	cmp	r3, #2
 8000b74:	d130      	bne.n	8000bd8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	689b      	ldr	r3, [r3, #8]
 8000b7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000b7c:	69fb      	ldr	r3, [r7, #28]
 8000b7e:	005b      	lsls	r3, r3, #1
 8000b80:	2203      	movs	r2, #3
 8000b82:	fa02 f303 	lsl.w	r3, r2, r3
 8000b86:	43db      	mvns	r3, r3
 8000b88:	69ba      	ldr	r2, [r7, #24]
 8000b8a:	4013      	ands	r3, r2
 8000b8c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	68da      	ldr	r2, [r3, #12]
 8000b92:	69fb      	ldr	r3, [r7, #28]
 8000b94:	005b      	lsls	r3, r3, #1
 8000b96:	fa02 f303 	lsl.w	r3, r2, r3
 8000b9a:	69ba      	ldr	r2, [r7, #24]
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	69ba      	ldr	r2, [r7, #24]
 8000ba4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000bac:	2201      	movs	r2, #1
 8000bae:	69fb      	ldr	r3, [r7, #28]
 8000bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb4:	43db      	mvns	r3, r3
 8000bb6:	69ba      	ldr	r2, [r7, #24]
 8000bb8:	4013      	ands	r3, r2
 8000bba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	685b      	ldr	r3, [r3, #4]
 8000bc0:	091b      	lsrs	r3, r3, #4
 8000bc2:	f003 0201 	and.w	r2, r3, #1
 8000bc6:	69fb      	ldr	r3, [r7, #28]
 8000bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bcc:	69ba      	ldr	r2, [r7, #24]
 8000bce:	4313      	orrs	r3, r2
 8000bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	69ba      	ldr	r2, [r7, #24]
 8000bd6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f003 0303 	and.w	r3, r3, #3
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d017      	beq.n	8000c14 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	68db      	ldr	r3, [r3, #12]
 8000be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000bea:	69fb      	ldr	r3, [r7, #28]
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	2203      	movs	r2, #3
 8000bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf4:	43db      	mvns	r3, r3
 8000bf6:	69ba      	ldr	r2, [r7, #24]
 8000bf8:	4013      	ands	r3, r2
 8000bfa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	689a      	ldr	r2, [r3, #8]
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	005b      	lsls	r3, r3, #1
 8000c04:	fa02 f303 	lsl.w	r3, r2, r3
 8000c08:	69ba      	ldr	r2, [r7, #24]
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	69ba      	ldr	r2, [r7, #24]
 8000c12:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f003 0303 	and.w	r3, r3, #3
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d123      	bne.n	8000c68 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000c20:	69fb      	ldr	r3, [r7, #28]
 8000c22:	08da      	lsrs	r2, r3, #3
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	3208      	adds	r2, #8
 8000c28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000c2e:	69fb      	ldr	r3, [r7, #28]
 8000c30:	f003 0307 	and.w	r3, r3, #7
 8000c34:	009b      	lsls	r3, r3, #2
 8000c36:	220f      	movs	r2, #15
 8000c38:	fa02 f303 	lsl.w	r3, r2, r3
 8000c3c:	43db      	mvns	r3, r3
 8000c3e:	69ba      	ldr	r2, [r7, #24]
 8000c40:	4013      	ands	r3, r2
 8000c42:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	691a      	ldr	r2, [r3, #16]
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	f003 0307 	and.w	r3, r3, #7
 8000c4e:	009b      	lsls	r3, r3, #2
 8000c50:	fa02 f303 	lsl.w	r3, r2, r3
 8000c54:	69ba      	ldr	r2, [r7, #24]
 8000c56:	4313      	orrs	r3, r2
 8000c58:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	08da      	lsrs	r2, r3, #3
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	3208      	adds	r2, #8
 8000c62:	69b9      	ldr	r1, [r7, #24]
 8000c64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	005b      	lsls	r3, r3, #1
 8000c72:	2203      	movs	r2, #3
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	43db      	mvns	r3, r3
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	685b      	ldr	r3, [r3, #4]
 8000c84:	f003 0203 	and.w	r2, r3, #3
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c90:	69ba      	ldr	r2, [r7, #24]
 8000c92:	4313      	orrs	r3, r2
 8000c94:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	69ba      	ldr	r2, [r7, #24]
 8000c9a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	685b      	ldr	r3, [r3, #4]
 8000ca0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	f000 80ae 	beq.w	8000e06 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
 8000cae:	4b5d      	ldr	r3, [pc, #372]	@ (8000e24 <HAL_GPIO_Init+0x300>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	4a5c      	ldr	r2, [pc, #368]	@ (8000e24 <HAL_GPIO_Init+0x300>)
 8000cb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cba:	4b5a      	ldr	r3, [pc, #360]	@ (8000e24 <HAL_GPIO_Init+0x300>)
 8000cbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cc2:	60fb      	str	r3, [r7, #12]
 8000cc4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000cc6:	4a58      	ldr	r2, [pc, #352]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000cc8:	69fb      	ldr	r3, [r7, #28]
 8000cca:	089b      	lsrs	r3, r3, #2
 8000ccc:	3302      	adds	r3, #2
 8000cce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000cd4:	69fb      	ldr	r3, [r7, #28]
 8000cd6:	f003 0303 	and.w	r3, r3, #3
 8000cda:	009b      	lsls	r3, r3, #2
 8000cdc:	220f      	movs	r2, #15
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	43db      	mvns	r3, r3
 8000ce4:	69ba      	ldr	r2, [r7, #24]
 8000ce6:	4013      	ands	r3, r2
 8000ce8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4a4f      	ldr	r2, [pc, #316]	@ (8000e2c <HAL_GPIO_Init+0x308>)
 8000cee:	4293      	cmp	r3, r2
 8000cf0:	d025      	beq.n	8000d3e <HAL_GPIO_Init+0x21a>
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	4a4e      	ldr	r2, [pc, #312]	@ (8000e30 <HAL_GPIO_Init+0x30c>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d01f      	beq.n	8000d3a <HAL_GPIO_Init+0x216>
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4a4d      	ldr	r2, [pc, #308]	@ (8000e34 <HAL_GPIO_Init+0x310>)
 8000cfe:	4293      	cmp	r3, r2
 8000d00:	d019      	beq.n	8000d36 <HAL_GPIO_Init+0x212>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	4a4c      	ldr	r2, [pc, #304]	@ (8000e38 <HAL_GPIO_Init+0x314>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d013      	beq.n	8000d32 <HAL_GPIO_Init+0x20e>
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	4a4b      	ldr	r2, [pc, #300]	@ (8000e3c <HAL_GPIO_Init+0x318>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d00d      	beq.n	8000d2e <HAL_GPIO_Init+0x20a>
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	4a4a      	ldr	r2, [pc, #296]	@ (8000e40 <HAL_GPIO_Init+0x31c>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d007      	beq.n	8000d2a <HAL_GPIO_Init+0x206>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a49      	ldr	r2, [pc, #292]	@ (8000e44 <HAL_GPIO_Init+0x320>)
 8000d1e:	4293      	cmp	r3, r2
 8000d20:	d101      	bne.n	8000d26 <HAL_GPIO_Init+0x202>
 8000d22:	2306      	movs	r3, #6
 8000d24:	e00c      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d26:	2307      	movs	r3, #7
 8000d28:	e00a      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	e008      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d2e:	2304      	movs	r3, #4
 8000d30:	e006      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d32:	2303      	movs	r3, #3
 8000d34:	e004      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d36:	2302      	movs	r3, #2
 8000d38:	e002      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	e000      	b.n	8000d40 <HAL_GPIO_Init+0x21c>
 8000d3e:	2300      	movs	r3, #0
 8000d40:	69fa      	ldr	r2, [r7, #28]
 8000d42:	f002 0203 	and.w	r2, r2, #3
 8000d46:	0092      	lsls	r2, r2, #2
 8000d48:	4093      	lsls	r3, r2
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000d50:	4935      	ldr	r1, [pc, #212]	@ (8000e28 <HAL_GPIO_Init+0x304>)
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	089b      	lsrs	r3, r3, #2
 8000d56:	3302      	adds	r3, #2
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000d5e:	4b3a      	ldr	r3, [pc, #232]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d64:	693b      	ldr	r3, [r7, #16]
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	685b      	ldr	r3, [r3, #4]
 8000d72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d003      	beq.n	8000d82 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	693b      	ldr	r3, [r7, #16]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000d82:	4a31      	ldr	r2, [pc, #196]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000d88:	4b2f      	ldr	r3, [pc, #188]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000d8e:	693b      	ldr	r3, [r7, #16]
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000da4:	69ba      	ldr	r2, [r7, #24]
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	4313      	orrs	r3, r2
 8000daa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000dac:	4a26      	ldr	r2, [pc, #152]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000db4:	685b      	ldr	r3, [r3, #4]
 8000db6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000db8:	693b      	ldr	r3, [r7, #16]
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d003      	beq.n	8000dd6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	693b      	ldr	r3, [r7, #16]
 8000dd2:	4313      	orrs	r3, r2
 8000dd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000dd6:	4a1c      	ldr	r2, [pc, #112]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000dd8:	69bb      	ldr	r3, [r7, #24]
 8000dda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ddc:	4b1a      	ldr	r3, [pc, #104]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000de2:	693b      	ldr	r3, [r7, #16]
 8000de4:	43db      	mvns	r3, r3
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	4013      	ands	r3, r2
 8000dea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000dec:	683b      	ldr	r3, [r7, #0]
 8000dee:	685b      	ldr	r3, [r3, #4]
 8000df0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d003      	beq.n	8000e00 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000df8:	69ba      	ldr	r2, [r7, #24]
 8000dfa:	693b      	ldr	r3, [r7, #16]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e00:	4a11      	ldr	r2, [pc, #68]	@ (8000e48 <HAL_GPIO_Init+0x324>)
 8000e02:	69bb      	ldr	r3, [r7, #24]
 8000e04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	3301      	adds	r3, #1
 8000e0a:	61fb      	str	r3, [r7, #28]
 8000e0c:	69fb      	ldr	r3, [r7, #28]
 8000e0e:	2b0f      	cmp	r3, #15
 8000e10:	f67f ae96 	bls.w	8000b40 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000e14:	bf00      	nop
 8000e16:	bf00      	nop
 8000e18:	3724      	adds	r7, #36	@ 0x24
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e20:	4770      	bx	lr
 8000e22:	bf00      	nop
 8000e24:	40023800 	.word	0x40023800
 8000e28:	40013800 	.word	0x40013800
 8000e2c:	40020000 	.word	0x40020000
 8000e30:	40020400 	.word	0x40020400
 8000e34:	40020800 	.word	0x40020800
 8000e38:	40020c00 	.word	0x40020c00
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	40021400 	.word	0x40021400
 8000e44:	40021800 	.word	0x40021800
 8000e48:	40013c00 	.word	0x40013c00

08000e4c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8000e50:	4b03      	ldr	r3, [pc, #12]	@ (8000e60 <HAL_RCC_GetHCLKFreq+0x14>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr
 8000e5e:	bf00      	nop
 8000e60:	20001828 	.word	0x20001828

08000e64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_RCC_GetHCLKFreq>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	4b05      	ldr	r3, [pc, #20]	@ (8000e84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	0a9b      	lsrs	r3, r3, #10
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	4903      	ldr	r1, [pc, #12]	@ (8000e88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000e7a:	5ccb      	ldrb	r3, [r1, r3]
 8000e7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	40023800 	.word	0x40023800
 8000e88:	0800158c 	.word	0x0800158c

08000e8c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
 8000e94:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	220f      	movs	r2, #15
 8000e9a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8000e9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	f003 0203 	and.w	r2, r3, #3
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8000ea8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8000eaa:	689b      	ldr	r3, [r3, #8]
 8000eac:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8000eb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8000eb6:	689b      	ldr	r3, [r3, #8]
 8000eb8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8000ec0:	4b09      	ldr	r3, [pc, #36]	@ (8000ee8 <HAL_RCC_GetClockConfig+0x5c>)
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	08db      	lsrs	r3, r3, #3
 8000ec6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8000ece:	4b07      	ldr	r3, [pc, #28]	@ (8000eec <HAL_RCC_GetClockConfig+0x60>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	f003 0207 	and.w	r2, r3, #7
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	601a      	str	r2, [r3, #0]
}
 8000eda:	bf00      	nop
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	40023c00 	.word	0x40023c00

08000ef0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e041      	b.n	8000f86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000f08:	b2db      	uxtb	r3, r3
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d106      	bne.n	8000f1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f000 f839 	bl	8000f8e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2202      	movs	r2, #2
 8000f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	3304      	adds	r3, #4
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4610      	mov	r0, r2
 8000f30:	f000 f9c0 	bl	80012b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2201      	movs	r2, #1
 8000f38:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2201      	movs	r2, #1
 8000f40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	2201      	movs	r2, #1
 8000f48:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	2201      	movs	r2, #1
 8000f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2201      	movs	r2, #1
 8000f58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2201      	movs	r2, #1
 8000f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2201      	movs	r2, #1
 8000f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	3708      	adds	r7, #8
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bd80      	pop	{r7, pc}

08000f8e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8000f8e:	b480      	push	{r7}
 8000f90:	b083      	sub	sp, #12
 8000f92:	af00      	add	r7, sp, #0
 8000f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
	...

08000fa4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8000fa4:	b480      	push	{r7}
 8000fa6:	b085      	sub	sp, #20
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d001      	beq.n	8000fbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e04e      	b.n	800105a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2202      	movs	r2, #2
 8000fc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	68da      	ldr	r2, [r3, #12]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f042 0201 	orr.w	r2, r2, #1
 8000fd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a23      	ldr	r2, [pc, #140]	@ (8001068 <HAL_TIM_Base_Start_IT+0xc4>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d022      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fe6:	d01d      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1f      	ldr	r2, [pc, #124]	@ (800106c <HAL_TIM_Base_Start_IT+0xc8>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d018      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1e      	ldr	r2, [pc, #120]	@ (8001070 <HAL_TIM_Base_Start_IT+0xcc>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d013      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a1c      	ldr	r2, [pc, #112]	@ (8001074 <HAL_TIM_Base_Start_IT+0xd0>)
 8001002:	4293      	cmp	r3, r2
 8001004:	d00e      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a1b      	ldr	r2, [pc, #108]	@ (8001078 <HAL_TIM_Base_Start_IT+0xd4>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d009      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a19      	ldr	r2, [pc, #100]	@ (800107c <HAL_TIM_Base_Start_IT+0xd8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d004      	beq.n	8001024 <HAL_TIM_Base_Start_IT+0x80>
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4a18      	ldr	r2, [pc, #96]	@ (8001080 <HAL_TIM_Base_Start_IT+0xdc>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d111      	bne.n	8001048 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	689b      	ldr	r3, [r3, #8]
 800102a:	f003 0307 	and.w	r3, r3, #7
 800102e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001030:	68fb      	ldr	r3, [r7, #12]
 8001032:	2b06      	cmp	r3, #6
 8001034:	d010      	beq.n	8001058 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681a      	ldr	r2, [r3, #0]
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f042 0201 	orr.w	r2, r2, #1
 8001044:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001046:	e007      	b.n	8001058 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f042 0201 	orr.w	r2, r2, #1
 8001056:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001058:	2300      	movs	r3, #0
}
 800105a:	4618      	mov	r0, r3
 800105c:	3714      	adds	r7, #20
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40010000 	.word	0x40010000
 800106c:	40000400 	.word	0x40000400
 8001070:	40000800 	.word	0x40000800
 8001074:	40000c00 	.word	0x40000c00
 8001078:	40010400 	.word	0x40010400
 800107c:	40014000 	.word	0x40014000
 8001080:	40001800 	.word	0x40001800

08001084 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b084      	sub	sp, #16
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	68db      	ldr	r3, [r3, #12]
 8001092:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	691b      	ldr	r3, [r3, #16]
 800109a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800109c:	68bb      	ldr	r3, [r7, #8]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d020      	beq.n	80010e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d01b      	beq.n	80010e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f06f 0202 	mvn.w	r2, #2
 80010b8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2201      	movs	r2, #1
 80010be:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	699b      	ldr	r3, [r3, #24]
 80010c6:	f003 0303 	and.w	r3, r3, #3
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80010ce:	6878      	ldr	r0, [r7, #4]
 80010d0:	f000 f8d2 	bl	8001278 <HAL_TIM_IC_CaptureCallback>
 80010d4:	e005      	b.n	80010e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80010d6:	6878      	ldr	r0, [r7, #4]
 80010d8:	f000 f8c4 	bl	8001264 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f000 f8d5 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	2200      	movs	r2, #0
 80010e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	f003 0304 	and.w	r3, r3, #4
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d020      	beq.n	8001134 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	f003 0304 	and.w	r3, r3, #4
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d01b      	beq.n	8001134 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f06f 0204 	mvn.w	r2, #4
 8001104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	2202      	movs	r2, #2
 800110a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	699b      	ldr	r3, [r3, #24]
 8001112:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001116:	2b00      	cmp	r3, #0
 8001118:	d003      	beq.n	8001122 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f000 f8ac 	bl	8001278 <HAL_TIM_IC_CaptureCallback>
 8001120:	e005      	b.n	800112e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f89e 	bl	8001264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001128:	6878      	ldr	r0, [r7, #4]
 800112a:	f000 f8af 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	f003 0308 	and.w	r3, r3, #8
 800113a:	2b00      	cmp	r3, #0
 800113c:	d020      	beq.n	8001180 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	f003 0308 	and.w	r3, r3, #8
 8001144:	2b00      	cmp	r3, #0
 8001146:	d01b      	beq.n	8001180 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f06f 0208 	mvn.w	r2, #8
 8001150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2204      	movs	r2, #4
 8001156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	69db      	ldr	r3, [r3, #28]
 800115e:	f003 0303 	and.w	r3, r3, #3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f886 	bl	8001278 <HAL_TIM_IC_CaptureCallback>
 800116c:	e005      	b.n	800117a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f878 	bl	8001264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001174:	6878      	ldr	r0, [r7, #4]
 8001176:	f000 f889 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	2200      	movs	r2, #0
 800117e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	f003 0310 	and.w	r3, r3, #16
 8001186:	2b00      	cmp	r3, #0
 8001188:	d020      	beq.n	80011cc <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	f003 0310 	and.w	r3, r3, #16
 8001190:	2b00      	cmp	r3, #0
 8001192:	d01b      	beq.n	80011cc <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f06f 0210 	mvn.w	r2, #16
 800119c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2208      	movs	r2, #8
 80011a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	69db      	ldr	r3, [r3, #28]
 80011aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 f860 	bl	8001278 <HAL_TIM_IC_CaptureCallback>
 80011b8:	e005      	b.n	80011c6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80011ba:	6878      	ldr	r0, [r7, #4]
 80011bc:	f000 f852 	bl	8001264 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f000 f863 	bl	800128c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2200      	movs	r2, #0
 80011ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80011cc:	68bb      	ldr	r3, [r7, #8]
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d00c      	beq.n	80011f0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	f003 0301 	and.w	r3, r3, #1
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d007      	beq.n	80011f0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f06f 0201 	mvn.w	r2, #1
 80011e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80011ea:	6878      	ldr	r0, [r7, #4]
 80011ec:	f7ff f814 	bl	8000218 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00c      	beq.n	8001214 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001200:	2b00      	cmp	r3, #0
 8001202:	d007      	beq.n	8001214 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800120c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f982 	bl	8001518 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800121a:	2b00      	cmp	r3, #0
 800121c:	d00c      	beq.n	8001238 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001232:	6878      	ldr	r0, [r7, #4]
 8001234:	f000 f834 	bl	80012a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	f003 0320 	and.w	r3, r3, #32
 800123e:	2b00      	cmp	r3, #0
 8001240:	d00c      	beq.n	800125c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	f003 0320 	and.w	r3, r3, #32
 8001248:	2b00      	cmp	r3, #0
 800124a:	d007      	beq.n	800125c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f06f 0220 	mvn.w	r2, #32
 8001254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001256:	6878      	ldr	r0, [r7, #4]
 8001258:	f000 f954 	bl	8001504 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800125c:	bf00      	nop
 800125e:	3710      	adds	r7, #16
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}

08001264 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800126c:	bf00      	nop
 800126e:	370c      	adds	r7, #12
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001278:	b480      	push	{r7}
 800127a:	b083      	sub	sp, #12
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129e:	4770      	bx	lr

080012a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80012a8:	bf00      	nop
 80012aa:	370c      	adds	r7, #12
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80012b4:	b480      	push	{r7}
 80012b6:	b085      	sub	sp, #20
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
 80012bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4a46      	ldr	r2, [pc, #280]	@ (80013e0 <TIM_Base_SetConfig+0x12c>)
 80012c8:	4293      	cmp	r3, r2
 80012ca:	d013      	beq.n	80012f4 <TIM_Base_SetConfig+0x40>
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80012d2:	d00f      	beq.n	80012f4 <TIM_Base_SetConfig+0x40>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4a43      	ldr	r2, [pc, #268]	@ (80013e4 <TIM_Base_SetConfig+0x130>)
 80012d8:	4293      	cmp	r3, r2
 80012da:	d00b      	beq.n	80012f4 <TIM_Base_SetConfig+0x40>
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	4a42      	ldr	r2, [pc, #264]	@ (80013e8 <TIM_Base_SetConfig+0x134>)
 80012e0:	4293      	cmp	r3, r2
 80012e2:	d007      	beq.n	80012f4 <TIM_Base_SetConfig+0x40>
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	4a41      	ldr	r2, [pc, #260]	@ (80013ec <TIM_Base_SetConfig+0x138>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d003      	beq.n	80012f4 <TIM_Base_SetConfig+0x40>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	4a40      	ldr	r2, [pc, #256]	@ (80013f0 <TIM_Base_SetConfig+0x13c>)
 80012f0:	4293      	cmp	r3, r2
 80012f2:	d108      	bne.n	8001306 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80012fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	68fa      	ldr	r2, [r7, #12]
 8001302:	4313      	orrs	r3, r2
 8001304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a35      	ldr	r2, [pc, #212]	@ (80013e0 <TIM_Base_SetConfig+0x12c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d02b      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001314:	d027      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	4a32      	ldr	r2, [pc, #200]	@ (80013e4 <TIM_Base_SetConfig+0x130>)
 800131a:	4293      	cmp	r3, r2
 800131c:	d023      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4a31      	ldr	r2, [pc, #196]	@ (80013e8 <TIM_Base_SetConfig+0x134>)
 8001322:	4293      	cmp	r3, r2
 8001324:	d01f      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4a30      	ldr	r2, [pc, #192]	@ (80013ec <TIM_Base_SetConfig+0x138>)
 800132a:	4293      	cmp	r3, r2
 800132c:	d01b      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	4a2f      	ldr	r2, [pc, #188]	@ (80013f0 <TIM_Base_SetConfig+0x13c>)
 8001332:	4293      	cmp	r3, r2
 8001334:	d017      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	4a2e      	ldr	r2, [pc, #184]	@ (80013f4 <TIM_Base_SetConfig+0x140>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d013      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	4a2d      	ldr	r2, [pc, #180]	@ (80013f8 <TIM_Base_SetConfig+0x144>)
 8001342:	4293      	cmp	r3, r2
 8001344:	d00f      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	4a2c      	ldr	r2, [pc, #176]	@ (80013fc <TIM_Base_SetConfig+0x148>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d00b      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4a2b      	ldr	r2, [pc, #172]	@ (8001400 <TIM_Base_SetConfig+0x14c>)
 8001352:	4293      	cmp	r3, r2
 8001354:	d007      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	4a2a      	ldr	r2, [pc, #168]	@ (8001404 <TIM_Base_SetConfig+0x150>)
 800135a:	4293      	cmp	r3, r2
 800135c:	d003      	beq.n	8001366 <TIM_Base_SetConfig+0xb2>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	4a29      	ldr	r2, [pc, #164]	@ (8001408 <TIM_Base_SetConfig+0x154>)
 8001362:	4293      	cmp	r3, r2
 8001364:	d108      	bne.n	8001378 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800136c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	68db      	ldr	r3, [r3, #12]
 8001372:	68fa      	ldr	r2, [r7, #12]
 8001374:	4313      	orrs	r3, r2
 8001376:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	4313      	orrs	r3, r2
 8001384:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	68fa      	ldr	r2, [r7, #12]
 800138a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	689a      	ldr	r2, [r3, #8]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a10      	ldr	r2, [pc, #64]	@ (80013e0 <TIM_Base_SetConfig+0x12c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d003      	beq.n	80013ac <TIM_Base_SetConfig+0xf8>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a12      	ldr	r2, [pc, #72]	@ (80013f0 <TIM_Base_SetConfig+0x13c>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d103      	bne.n	80013b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	691a      	ldr	r2, [r3, #16]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691b      	ldr	r3, [r3, #16]
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f023 0201 	bic.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	611a      	str	r2, [r3, #16]
  }
}
 80013d2:	bf00      	nop
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
 80013de:	bf00      	nop
 80013e0:	40010000 	.word	0x40010000
 80013e4:	40000400 	.word	0x40000400
 80013e8:	40000800 	.word	0x40000800
 80013ec:	40000c00 	.word	0x40000c00
 80013f0:	40010400 	.word	0x40010400
 80013f4:	40014000 	.word	0x40014000
 80013f8:	40014400 	.word	0x40014400
 80013fc:	40014800 	.word	0x40014800
 8001400:	40001800 	.word	0x40001800
 8001404:	40001c00 	.word	0x40001c00
 8001408:	40002000 	.word	0x40002000

0800140c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
 8001414:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800141c:	2b01      	cmp	r3, #1
 800141e:	d101      	bne.n	8001424 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001420:	2302      	movs	r3, #2
 8001422:	e05a      	b.n	80014da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2201      	movs	r2, #1
 8001428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2202      	movs	r2, #2
 8001430:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	689b      	ldr	r3, [r3, #8]
 8001442:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001444:	68fb      	ldr	r3, [r7, #12]
 8001446:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800144a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	4313      	orrs	r3, r2
 8001454:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	68fa      	ldr	r2, [r7, #12]
 800145c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4a21      	ldr	r2, [pc, #132]	@ (80014e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8001464:	4293      	cmp	r3, r2
 8001466:	d022      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001470:	d01d      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a1d      	ldr	r2, [pc, #116]	@ (80014ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d018      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a1b      	ldr	r2, [pc, #108]	@ (80014f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8001482:	4293      	cmp	r3, r2
 8001484:	d013      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a1a      	ldr	r2, [pc, #104]	@ (80014f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d00e      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4a18      	ldr	r2, [pc, #96]	@ (80014f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d009      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a17      	ldr	r2, [pc, #92]	@ (80014fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d004      	beq.n	80014ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a15      	ldr	r2, [pc, #84]	@ (8001500 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d10c      	bne.n	80014c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80014ae:	68bb      	ldr	r3, [r7, #8]
 80014b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80014b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4313      	orrs	r3, r2
 80014be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	68ba      	ldr	r2, [r7, #8]
 80014c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3714      	adds	r7, #20
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40010000 	.word	0x40010000
 80014ec:	40000400 	.word	0x40000400
 80014f0:	40000800 	.word	0x40000800
 80014f4:	40000c00 	.word	0x40000c00
 80014f8:	40010400 	.word	0x40010400
 80014fc:	40014000 	.word	0x40014000
 8001500:	40001800 	.word	0x40001800

08001504 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <__libc_init_array>:
 800152c:	b570      	push	{r4, r5, r6, lr}
 800152e:	4d0d      	ldr	r5, [pc, #52]	@ (8001564 <__libc_init_array+0x38>)
 8001530:	4c0d      	ldr	r4, [pc, #52]	@ (8001568 <__libc_init_array+0x3c>)
 8001532:	1b64      	subs	r4, r4, r5
 8001534:	10a4      	asrs	r4, r4, #2
 8001536:	2600      	movs	r6, #0
 8001538:	42a6      	cmp	r6, r4
 800153a:	d109      	bne.n	8001550 <__libc_init_array+0x24>
 800153c:	4d0b      	ldr	r5, [pc, #44]	@ (800156c <__libc_init_array+0x40>)
 800153e:	4c0c      	ldr	r4, [pc, #48]	@ (8001570 <__libc_init_array+0x44>)
 8001540:	f000 f818 	bl	8001574 <_init>
 8001544:	1b64      	subs	r4, r4, r5
 8001546:	10a4      	asrs	r4, r4, #2
 8001548:	2600      	movs	r6, #0
 800154a:	42a6      	cmp	r6, r4
 800154c:	d105      	bne.n	800155a <__libc_init_array+0x2e>
 800154e:	bd70      	pop	{r4, r5, r6, pc}
 8001550:	f855 3b04 	ldr.w	r3, [r5], #4
 8001554:	4798      	blx	r3
 8001556:	3601      	adds	r6, #1
 8001558:	e7ee      	b.n	8001538 <__libc_init_array+0xc>
 800155a:	f855 3b04 	ldr.w	r3, [r5], #4
 800155e:	4798      	blx	r3
 8001560:	3601      	adds	r6, #1
 8001562:	e7f2      	b.n	800154a <__libc_init_array+0x1e>
 8001564:	08001594 	.word	0x08001594
 8001568:	08001594 	.word	0x08001594
 800156c:	08001594 	.word	0x08001594
 8001570:	08001598 	.word	0x08001598

08001574 <_init>:
 8001574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001576:	bf00      	nop
 8001578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800157a:	bc08      	pop	{r3}
 800157c:	469e      	mov	lr, r3
 800157e:	4770      	bx	lr

08001580 <_fini>:
 8001580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001582:	bf00      	nop
 8001584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001586:	bc08      	pop	{r3}
 8001588:	469e      	mov	lr, r3
 800158a:	4770      	bx	lr

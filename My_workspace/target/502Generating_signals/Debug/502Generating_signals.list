
502Generating_signals.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000241c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  080025fc  080025fc  000035fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800263c  0800263c  0000588c  2**0
                  CONTENTS
  4 .ARM          00000008  0800263c  0800263c  0000363c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002644  08002644  0000588c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002644  08002644  00003644  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002648  08002648  00003648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000188c  20000000  0800264c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001cc  2000188c  08003ed8  0000588c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a58  08003ed8  00005a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000588c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b170  00000000  00000000  000058bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddf  00000000  00000000  00010a2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  00012810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008d3  00000000  00000000  000133a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e7e  00000000  00000000  00013c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cfaa  00000000  00000000  00035af9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ceeb2  00000000  00000000  00042aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00111955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000036cc  00000000  00000000  00111998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00115064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000188c 	.word	0x2000188c
 80001fc:	00000000 	.word	0x00000000
 8000200:	080025e4 	.word	0x080025e4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001890 	.word	0x20001890
 800021c:	080025e4 	.word	0x080025e4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <HAL_TIM_PeriodElapsedCallback>:
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
    static int index = 0;

    if (htim->Instance == TIM6) {
 80002c8:	687b      	ldr	r3, [r7, #4]
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	4a14      	ldr	r2, [pc, #80]	@ (8000320 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80002ce:	4293      	cmp	r3, r2
 80002d0:	d121      	bne.n	8000316 <HAL_TIM_PeriodElapsedCallback+0x56>
        // Update DAC channels
    	printf("%d", values1[index]);
 80002d2:	4b14      	ldr	r3, [pc, #80]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	4a14      	ldr	r2, [pc, #80]	@ (8000328 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002dc:	4619      	mov	r1, r3
 80002de:	4813      	ldr	r0, [pc, #76]	@ (800032c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80002e0:	f001 fb12 	bl	8001908 <iprintf>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, values1[index]);
 80002e4:	4b0f      	ldr	r3, [pc, #60]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80002e6:	681b      	ldr	r3, [r3, #0]
 80002e8:	4a0f      	ldr	r2, [pc, #60]	@ (8000328 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80002ee:	2200      	movs	r2, #0
 80002f0:	2100      	movs	r1, #0
 80002f2:	480f      	ldr	r0, [pc, #60]	@ (8000330 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80002f4:	f000 fcab 	bl	8000c4e <HAL_DAC_SetValue>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, values1[index]);
 80002f8:	4b0a      	ldr	r3, [pc, #40]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	4a0a      	ldr	r2, [pc, #40]	@ (8000328 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80002fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000302:	2200      	movs	r2, #0
 8000304:	2110      	movs	r1, #16
 8000306:	480a      	ldr	r0, [pc, #40]	@ (8000330 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8000308:	f000 fca1 	bl	8000c4e <HAL_DAC_SetValue>
        index++;
 800030c:	4b05      	ldr	r3, [pc, #20]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a04      	ldr	r2, [pc, #16]	@ (8000324 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000314:	6013      	str	r3, [r2, #0]
    }
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	40001000 	.word	0x40001000
 8000324:	200018bc 	.word	0x200018bc
 8000328:	20000000 	.word	0x20000000
 800032c:	080025fc 	.word	0x080025fc
 8000330:	200018a8 	.word	0x200018a8

08000334 <main>:

int main(void) {
 8000334:	b580      	push	{r7, lr}
 8000336:	af00      	add	r7, sp, #0
	HAL_Init();
 8000338:	f000 fab6 	bl	80008a8 <HAL_Init>
    SystemClock_Config();
 800033c:	f000 f86a 	bl	8000414 <SystemClock_Config>
    MX_GPIO_Init();
 8000340:	f000 f86f 	bl	8000422 <MX_GPIO_Init>
    MX_DAC_Init();
 8000344:	f000 f814 	bl	8000370 <MX_DAC_Init>
    MX_TIM6_Init();
 8000348:	f000 f838 	bl	80003bc <MX_TIM6_Init>

    HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800034c:	2100      	movs	r1, #0
 800034e:	4806      	ldr	r0, [pc, #24]	@ (8000368 <main+0x34>)
 8000350:	f000 fbd0 	bl	8000af4 <HAL_DAC_Start>
    HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8000354:	2110      	movs	r1, #16
 8000356:	4804      	ldr	r0, [pc, #16]	@ (8000368 <main+0x34>)
 8000358:	f000 fbcc 	bl	8000af4 <HAL_DAC_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 800035c:	4803      	ldr	r0, [pc, #12]	@ (800036c <main+0x38>)
 800035e:	f000 ff4d 	bl	80011fc <HAL_TIM_Base_Start_IT>
    while (1) {
 8000362:	bf00      	nop
 8000364:	e7fd      	b.n	8000362 <main+0x2e>
 8000366:	bf00      	nop
 8000368:	200018a8 	.word	0x200018a8
 800036c:	200018c0 	.word	0x200018c0

08000370 <MX_DAC_Init>:
        // Main loop does nothing, DAC updates are handled in the timer interrupt
    }
}

static void MX_DAC_Init(void) {
 8000370:	b580      	push	{r7, lr}
 8000372:	b082      	sub	sp, #8
 8000374:	af00      	add	r7, sp, #0
    DAC_ChannelConfTypeDef sConfig = {0};
 8000376:	463b      	mov	r3, r7
 8000378:	2200      	movs	r2, #0
 800037a:	601a      	str	r2, [r3, #0]
 800037c:	605a      	str	r2, [r3, #4]

    hdac.Instance = DAC;
 800037e:	4b0d      	ldr	r3, [pc, #52]	@ (80003b4 <MX_DAC_Init+0x44>)
 8000380:	4a0d      	ldr	r2, [pc, #52]	@ (80003b8 <MX_DAC_Init+0x48>)
 8000382:	601a      	str	r2, [r3, #0]
    HAL_DAC_Init(&hdac);
 8000384:	480b      	ldr	r0, [pc, #44]	@ (80003b4 <MX_DAC_Init+0x44>)
 8000386:	f000 fb93 	bl	8000ab0 <HAL_DAC_Init>

    sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 800038a:	2304      	movs	r3, #4
 800038c:	603b      	str	r3, [r7, #0]
    sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1);
 8000392:	463b      	mov	r3, r7
 8000394:	2200      	movs	r2, #0
 8000396:	4619      	mov	r1, r3
 8000398:	4806      	ldr	r0, [pc, #24]	@ (80003b4 <MX_DAC_Init+0x44>)
 800039a:	f000 fc8c 	bl	8000cb6 <HAL_DAC_ConfigChannel>
    HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2);
 800039e:	463b      	mov	r3, r7
 80003a0:	2210      	movs	r2, #16
 80003a2:	4619      	mov	r1, r3
 80003a4:	4803      	ldr	r0, [pc, #12]	@ (80003b4 <MX_DAC_Init+0x44>)
 80003a6:	f000 fc86 	bl	8000cb6 <HAL_DAC_ConfigChannel>
}
 80003aa:	bf00      	nop
 80003ac:	3708      	adds	r7, #8
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	200018a8 	.word	0x200018a8
 80003b8:	40007400 	.word	0x40007400

080003bc <MX_TIM6_Init>:

static void MX_TIM6_Init(void) {
 80003bc:	b580      	push	{r7, lr}
 80003be:	b082      	sub	sp, #8
 80003c0:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003c2:	463b      	mov	r3, r7
 80003c4:	2200      	movs	r2, #0
 80003c6:	601a      	str	r2, [r3, #0]
 80003c8:	605a      	str	r2, [r3, #4]

    htim6.Instance = TIM6;
 80003ca:	4b10      	ldr	r3, [pc, #64]	@ (800040c <MX_TIM6_Init+0x50>)
 80003cc:	4a10      	ldr	r2, [pc, #64]	@ (8000410 <MX_TIM6_Init+0x54>)
 80003ce:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 8399; // 10 kHz timer clock
 80003d0:	4b0e      	ldr	r3, [pc, #56]	@ (800040c <MX_TIM6_Init+0x50>)
 80003d2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80003d6:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003d8:	4b0c      	ldr	r3, [pc, #48]	@ (800040c <MX_TIM6_Init+0x50>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 99; //599; // 10 kHz / 600 = 16.67 Hz update rate
 80003de:	4b0b      	ldr	r3, [pc, #44]	@ (800040c <MX_TIM6_Init+0x50>)
 80003e0:	2263      	movs	r2, #99	@ 0x63
 80003e2:	60da      	str	r2, [r3, #12]
    htim6.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003e4:	4b09      	ldr	r3, [pc, #36]	@ (800040c <MX_TIM6_Init+0x50>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
    HAL_TIM_Base_Init(&htim6);
 80003ea:	4808      	ldr	r0, [pc, #32]	@ (800040c <MX_TIM6_Init+0x50>)
 80003ec:	f000 feac 	bl	8001148 <HAL_TIM_Base_Init>

    sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80003f0:	2320      	movs	r3, #32
 80003f2:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003f4:	2300      	movs	r3, #0
 80003f6:	607b      	str	r3, [r7, #4]
    HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig);
 80003f8:	463b      	mov	r3, r7
 80003fa:	4619      	mov	r1, r3
 80003fc:	4803      	ldr	r0, [pc, #12]	@ (800040c <MX_TIM6_Init+0x50>)
 80003fe:	f001 f931 	bl	8001664 <HAL_TIMEx_MasterConfigSynchronization>
}
 8000402:	bf00      	nop
 8000404:	3708      	adds	r7, #8
 8000406:	46bd      	mov	sp, r7
 8000408:	bd80      	pop	{r7, pc}
 800040a:	bf00      	nop
 800040c:	200018c0 	.word	0x200018c0
 8000410:	40001000 	.word	0x40001000

08000414 <SystemClock_Config>:

void SystemClock_Config(void) {
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
    // System clock configuration code
}
 8000418:	bf00      	nop
 800041a:	46bd      	mov	sp, r7
 800041c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000420:	4770      	bx	lr

08000422 <MX_GPIO_Init>:

static void MX_GPIO_Init(void) {
 8000422:	b480      	push	{r7}
 8000424:	af00      	add	r7, sp, #0
    // GPIO initialization code
}
 8000426:	bf00      	nop
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr

08000430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	b083      	sub	sp, #12
 8000434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	2300      	movs	r3, #0
 8000438:	607b      	str	r3, [r7, #4]
 800043a:	4b10      	ldr	r3, [pc, #64]	@ (800047c <HAL_MspInit+0x4c>)
 800043c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800043e:	4a0f      	ldr	r2, [pc, #60]	@ (800047c <HAL_MspInit+0x4c>)
 8000440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000444:	6453      	str	r3, [r2, #68]	@ 0x44
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <HAL_MspInit+0x4c>)
 8000448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800044a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800044e:	607b      	str	r3, [r7, #4]
 8000450:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000452:	2300      	movs	r3, #0
 8000454:	603b      	str	r3, [r7, #0]
 8000456:	4b09      	ldr	r3, [pc, #36]	@ (800047c <HAL_MspInit+0x4c>)
 8000458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800045a:	4a08      	ldr	r2, [pc, #32]	@ (800047c <HAL_MspInit+0x4c>)
 800045c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000460:	6413      	str	r3, [r2, #64]	@ 0x40
 8000462:	4b06      	ldr	r3, [pc, #24]	@ (800047c <HAL_MspInit+0x4c>)
 8000464:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000466:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800046a:	603b      	str	r3, [r7, #0]
 800046c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800046e:	bf00      	nop
 8000470:	370c      	adds	r7, #12
 8000472:	46bd      	mov	sp, r7
 8000474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	40023800 	.word	0x40023800

08000480 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b08a      	sub	sp, #40	@ 0x28
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	2200      	movs	r2, #0
 800048e:	601a      	str	r2, [r3, #0]
 8000490:	605a      	str	r2, [r3, #4]
 8000492:	609a      	str	r2, [r3, #8]
 8000494:	60da      	str	r2, [r3, #12]
 8000496:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	4a1b      	ldr	r2, [pc, #108]	@ (800050c <HAL_DAC_MspInit+0x8c>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d12f      	bne.n	8000502 <HAL_DAC_MspInit+0x82>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80004a2:	2300      	movs	r3, #0
 80004a4:	613b      	str	r3, [r7, #16]
 80004a6:	4b1a      	ldr	r3, [pc, #104]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004aa:	4a19      	ldr	r2, [pc, #100]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004ac:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80004b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80004b2:	4b17      	ldr	r3, [pc, #92]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80004ba:	613b      	str	r3, [r7, #16]
 80004bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	2300      	movs	r3, #0
 80004c0:	60fb      	str	r3, [r7, #12]
 80004c2:	4b13      	ldr	r3, [pc, #76]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004c6:	4a12      	ldr	r2, [pc, #72]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004c8:	f043 0301 	orr.w	r3, r3, #1
 80004cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80004ce:	4b10      	ldr	r3, [pc, #64]	@ (8000510 <HAL_DAC_MspInit+0x90>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004d2:	f003 0301 	and.w	r3, r3, #1
 80004d6:	60fb      	str	r3, [r7, #12]
 80004d8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80004da:	2330      	movs	r3, #48	@ 0x30
 80004dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80004de:	2303      	movs	r3, #3
 80004e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e2:	2300      	movs	r3, #0
 80004e4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004e6:	f107 0314 	add.w	r3, r7, #20
 80004ea:	4619      	mov	r1, r3
 80004ec:	4809      	ldr	r0, [pc, #36]	@ (8000514 <HAL_DAC_MspInit+0x94>)
 80004ee:	f000 fc45 	bl	8000d7c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 80004f2:	2200      	movs	r2, #0
 80004f4:	210f      	movs	r1, #15
 80004f6:	2036      	movs	r0, #54	@ 0x36
 80004f8:	f000 fab0 	bl	8000a5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80004fc:	2036      	movs	r0, #54	@ 0x36
 80004fe:	f000 fac9 	bl	8000a94 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000502:	bf00      	nop
 8000504:	3728      	adds	r7, #40	@ 0x28
 8000506:	46bd      	mov	sp, r7
 8000508:	bd80      	pop	{r7, pc}
 800050a:	bf00      	nop
 800050c:	40007400 	.word	0x40007400
 8000510:	40023800 	.word	0x40023800
 8000514:	40020000 	.word	0x40020000

08000518 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b08e      	sub	sp, #56	@ 0x38
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000520:	2300      	movs	r3, #0
 8000522:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000524:	2300      	movs	r3, #0
 8000526:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000528:	2300      	movs	r3, #0
 800052a:	60fb      	str	r3, [r7, #12]
 800052c:	4b33      	ldr	r3, [pc, #204]	@ (80005fc <HAL_InitTick+0xe4>)
 800052e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000530:	4a32      	ldr	r2, [pc, #200]	@ (80005fc <HAL_InitTick+0xe4>)
 8000532:	f043 0310 	orr.w	r3, r3, #16
 8000536:	6413      	str	r3, [r2, #64]	@ 0x40
 8000538:	4b30      	ldr	r3, [pc, #192]	@ (80005fc <HAL_InitTick+0xe4>)
 800053a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800053c:	f003 0310 	and.w	r3, r3, #16
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000544:	f107 0210 	add.w	r2, r7, #16
 8000548:	f107 0314 	add.w	r3, r7, #20
 800054c:	4611      	mov	r1, r2
 800054e:	4618      	mov	r0, r3
 8000550:	f000 fdc8 	bl	80010e4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000554:	6a3b      	ldr	r3, [r7, #32]
 8000556:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000558:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800055a:	2b00      	cmp	r3, #0
 800055c:	d103      	bne.n	8000566 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800055e:	f000 fdad 	bl	80010bc <HAL_RCC_GetPCLK1Freq>
 8000562:	6378      	str	r0, [r7, #52]	@ 0x34
 8000564:	e004      	b.n	8000570 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000566:	f000 fda9 	bl	80010bc <HAL_RCC_GetPCLK1Freq>
 800056a:	4603      	mov	r3, r0
 800056c:	005b      	lsls	r3, r3, #1
 800056e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000572:	4a23      	ldr	r2, [pc, #140]	@ (8000600 <HAL_InitTick+0xe8>)
 8000574:	fba2 2303 	umull	r2, r3, r2, r3
 8000578:	0c9b      	lsrs	r3, r3, #18
 800057a:	3b01      	subs	r3, #1
 800057c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800057e:	4b21      	ldr	r3, [pc, #132]	@ (8000604 <HAL_InitTick+0xec>)
 8000580:	4a21      	ldr	r2, [pc, #132]	@ (8000608 <HAL_InitTick+0xf0>)
 8000582:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000584:	4b1f      	ldr	r3, [pc, #124]	@ (8000604 <HAL_InitTick+0xec>)
 8000586:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800058a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800058c:	4a1d      	ldr	r2, [pc, #116]	@ (8000604 <HAL_InitTick+0xec>)
 800058e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000590:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000592:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <HAL_InitTick+0xec>)
 8000594:	2200      	movs	r2, #0
 8000596:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <HAL_InitTick+0xec>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <HAL_InitTick+0xec>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80005a4:	4817      	ldr	r0, [pc, #92]	@ (8000604 <HAL_InitTick+0xec>)
 80005a6:	f000 fdcf 	bl	8001148 <HAL_TIM_Base_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80005b0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d11b      	bne.n	80005f0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80005b8:	4812      	ldr	r0, [pc, #72]	@ (8000604 <HAL_InitTick+0xec>)
 80005ba:	f000 fe1f 	bl	80011fc <HAL_TIM_Base_Start_IT>
 80005be:	4603      	mov	r3, r0
 80005c0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80005c4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d111      	bne.n	80005f0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80005cc:	2036      	movs	r0, #54	@ 0x36
 80005ce:	f000 fa61 	bl	8000a94 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	2b0f      	cmp	r3, #15
 80005d6:	d808      	bhi.n	80005ea <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80005d8:	2200      	movs	r2, #0
 80005da:	6879      	ldr	r1, [r7, #4]
 80005dc:	2036      	movs	r0, #54	@ 0x36
 80005de:	f000 fa3d 	bl	8000a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80005e2:	4a0a      	ldr	r2, [pc, #40]	@ (800060c <HAL_InitTick+0xf4>)
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	6013      	str	r3, [r2, #0]
 80005e8:	e002      	b.n	80005f0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80005ea:	2301      	movs	r3, #1
 80005ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80005f0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80005f4:	4618      	mov	r0, r3
 80005f6:	3738      	adds	r7, #56	@ 0x38
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}
 80005fc:	40023800 	.word	0x40023800
 8000600:	431bde83 	.word	0x431bde83
 8000604:	200018c0 	.word	0x200018c0
 8000608:	40001000 	.word	0x40001000
 800060c:	2000182c 	.word	0x2000182c

08000610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000614:	bf00      	nop
 8000616:	e7fd      	b.n	8000614 <NMI_Handler+0x4>

08000618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800061c:	bf00      	nop
 800061e:	e7fd      	b.n	800061c <HardFault_Handler+0x4>

08000620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000620:	b480      	push	{r7}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000624:	bf00      	nop
 8000626:	e7fd      	b.n	8000624 <MemManage_Handler+0x4>

08000628 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000628:	b480      	push	{r7}
 800062a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800062c:	bf00      	nop
 800062e:	e7fd      	b.n	800062c <BusFault_Handler+0x4>

08000630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000630:	b480      	push	{r7}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000634:	bf00      	nop
 8000636:	e7fd      	b.n	8000634 <UsageFault_Handler+0x4>

08000638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000638:	b480      	push	{r7}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800063c:	bf00      	nop
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr

08000646 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000646:	b480      	push	{r7}
 8000648:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800064a:	bf00      	nop
 800064c:	46bd      	mov	sp, r7
 800064e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000652:	4770      	bx	lr

08000654 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000658:	bf00      	nop
 800065a:	46bd      	mov	sp, r7
 800065c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000660:	4770      	bx	lr

08000662 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000662:	b480      	push	{r7}
 8000664:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000666:	bf00      	nop
 8000668:	46bd      	mov	sp, r7
 800066a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066e:	4770      	bx	lr

08000670 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8000674:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <TIM6_DAC_IRQHandler+0x20>)
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	b2db      	uxtb	r3, r3
 800067a:	2b00      	cmp	r3, #0
 800067c:	d002      	beq.n	8000684 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 800067e:	4804      	ldr	r0, [pc, #16]	@ (8000690 <TIM6_DAC_IRQHandler+0x20>)
 8000680:	f000 fa8f 	bl	8000ba2 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8000684:	4803      	ldr	r0, [pc, #12]	@ (8000694 <TIM6_DAC_IRQHandler+0x24>)
 8000686:	f000 fe29 	bl	80012dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800068a:	bf00      	nop
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	200018a8 	.word	0x200018a8
 8000694:	200018c0 	.word	0x200018c0

08000698 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000698:	b480      	push	{r7}
 800069a:	b083      	sub	sp, #12
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80006a2:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <ITM_SendChar+0x48>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a0e      	ldr	r2, [pc, #56]	@ (80006e0 <ITM_SendChar+0x48>)
 80006a8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80006ac:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80006ae:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <ITM_SendChar+0x4c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a0c      	ldr	r2, [pc, #48]	@ (80006e4 <ITM_SendChar+0x4c>)
 80006b4:	f043 0301 	orr.w	r3, r3, #1
 80006b8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80006ba:	bf00      	nop
 80006bc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d0f8      	beq.n	80006bc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80006ca:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80006ce:	79fb      	ldrb	r3, [r7, #7]
 80006d0:	6013      	str	r3, [r2, #0]
}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	e000edfc 	.word	0xe000edfc
 80006e4:	e0000e00 	.word	0xe0000e00

080006e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b086      	sub	sp, #24
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	60f8      	str	r0, [r7, #12]
 80006f0:	60b9      	str	r1, [r7, #8]
 80006f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	617b      	str	r3, [r7, #20]
 80006f8:	e00a      	b.n	8000710 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80006fa:	f3af 8000 	nop.w
 80006fe:	4601      	mov	r1, r0
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	1c5a      	adds	r2, r3, #1
 8000704:	60ba      	str	r2, [r7, #8]
 8000706:	b2ca      	uxtb	r2, r1
 8000708:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	3301      	adds	r3, #1
 800070e:	617b      	str	r3, [r7, #20]
 8000710:	697a      	ldr	r2, [r7, #20]
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	429a      	cmp	r2, r3
 8000716:	dbf0      	blt.n	80006fa <_read+0x12>
  }

  return len;
 8000718:	687b      	ldr	r3, [r7, #4]
}
 800071a:	4618      	mov	r0, r3
 800071c:	3718      	adds	r7, #24
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}

08000722 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000722:	b580      	push	{r7, lr}
 8000724:	b086      	sub	sp, #24
 8000726:	af00      	add	r7, sp, #0
 8000728:	60f8      	str	r0, [r7, #12]
 800072a:	60b9      	str	r1, [r7, #8]
 800072c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800072e:	2300      	movs	r3, #0
 8000730:	617b      	str	r3, [r7, #20]
 8000732:	e009      	b.n	8000748 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000734:	68bb      	ldr	r3, [r7, #8]
 8000736:	1c5a      	adds	r2, r3, #1
 8000738:	60ba      	str	r2, [r7, #8]
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ffab 	bl	8000698 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000742:	697b      	ldr	r3, [r7, #20]
 8000744:	3301      	adds	r3, #1
 8000746:	617b      	str	r3, [r7, #20]
 8000748:	697a      	ldr	r2, [r7, #20]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	429a      	cmp	r2, r3
 800074e:	dbf1      	blt.n	8000734 <_write+0x12>
  }
  return len;
 8000750:	687b      	ldr	r3, [r7, #4]
}
 8000752:	4618      	mov	r0, r3
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}

0800075a <_close>:

int _close(int file)
{
 800075a:	b480      	push	{r7}
 800075c:	b083      	sub	sp, #12
 800075e:	af00      	add	r7, sp, #0
 8000760:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000762:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000766:	4618      	mov	r0, r3
 8000768:	370c      	adds	r7, #12
 800076a:	46bd      	mov	sp, r7
 800076c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000770:	4770      	bx	lr

08000772 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000772:	b480      	push	{r7}
 8000774:	b083      	sub	sp, #12
 8000776:	af00      	add	r7, sp, #0
 8000778:	6078      	str	r0, [r7, #4]
 800077a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800077c:	683b      	ldr	r3, [r7, #0]
 800077e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000782:	605a      	str	r2, [r3, #4]
  return 0;
 8000784:	2300      	movs	r3, #0
}
 8000786:	4618      	mov	r0, r3
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr

08000792 <_isatty>:

int _isatty(int file)
{
 8000792:	b480      	push	{r7}
 8000794:	b083      	sub	sp, #12
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800079a:	2301      	movs	r3, #1
}
 800079c:	4618      	mov	r0, r3
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007a8:	b480      	push	{r7}
 80007aa:	b085      	sub	sp, #20
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	60f8      	str	r0, [r7, #12]
 80007b0:	60b9      	str	r1, [r7, #8]
 80007b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80007b4:	2300      	movs	r3, #0
}
 80007b6:	4618      	mov	r0, r3
 80007b8:	3714      	adds	r7, #20
 80007ba:	46bd      	mov	sp, r7
 80007bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007c0:	4770      	bx	lr
	...

080007c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b086      	sub	sp, #24
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80007cc:	4a14      	ldr	r2, [pc, #80]	@ (8000820 <_sbrk+0x5c>)
 80007ce:	4b15      	ldr	r3, [pc, #84]	@ (8000824 <_sbrk+0x60>)
 80007d0:	1ad3      	subs	r3, r2, r3
 80007d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80007d8:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <_sbrk+0x64>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d102      	bne.n	80007e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80007e0:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <_sbrk+0x64>)
 80007e2:	4a12      	ldr	r2, [pc, #72]	@ (800082c <_sbrk+0x68>)
 80007e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80007e6:	4b10      	ldr	r3, [pc, #64]	@ (8000828 <_sbrk+0x64>)
 80007e8:	681a      	ldr	r2, [r3, #0]
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	4413      	add	r3, r2
 80007ee:	693a      	ldr	r2, [r7, #16]
 80007f0:	429a      	cmp	r2, r3
 80007f2:	d207      	bcs.n	8000804 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80007f4:	f001 f92c 	bl	8001a50 <__errno>
 80007f8:	4603      	mov	r3, r0
 80007fa:	220c      	movs	r2, #12
 80007fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80007fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000802:	e009      	b.n	8000818 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000804:	4b08      	ldr	r3, [pc, #32]	@ (8000828 <_sbrk+0x64>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800080a:	4b07      	ldr	r3, [pc, #28]	@ (8000828 <_sbrk+0x64>)
 800080c:	681a      	ldr	r2, [r3, #0]
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	4413      	add	r3, r2
 8000812:	4a05      	ldr	r2, [pc, #20]	@ (8000828 <_sbrk+0x64>)
 8000814:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000816:	68fb      	ldr	r3, [r7, #12]
}
 8000818:	4618      	mov	r0, r3
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	20050000 	.word	0x20050000
 8000824:	00000400 	.word	0x00000400
 8000828:	20001908 	.word	0x20001908
 800082c:	20001a58 	.word	0x20001a58

08000830 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000834:	4b06      	ldr	r3, [pc, #24]	@ (8000850 <SystemInit+0x20>)
 8000836:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800083a:	4a05      	ldr	r2, [pc, #20]	@ (8000850 <SystemInit+0x20>)
 800083c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000840:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	e000ed00 	.word	0xe000ed00

08000854 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000854:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800088c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000858:	f7ff ffea 	bl	8000830 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800085c:	480c      	ldr	r0, [pc, #48]	@ (8000890 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800085e:	490d      	ldr	r1, [pc, #52]	@ (8000894 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000860:	4a0d      	ldr	r2, [pc, #52]	@ (8000898 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000862:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000864:	e002      	b.n	800086c <LoopCopyDataInit>

08000866 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000866:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000868:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800086a:	3304      	adds	r3, #4

0800086c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800086c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800086e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000870:	d3f9      	bcc.n	8000866 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000872:	4a0a      	ldr	r2, [pc, #40]	@ (800089c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000874:	4c0a      	ldr	r4, [pc, #40]	@ (80008a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000876:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000878:	e001      	b.n	800087e <LoopFillZerobss>

0800087a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800087a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800087c:	3204      	adds	r2, #4

0800087e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800087e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000880:	d3fb      	bcc.n	800087a <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000882:	f001 f8eb 	bl	8001a5c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000886:	f7ff fd55 	bl	8000334 <main>
  bx  lr    
 800088a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800088c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000890:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000894:	2000188c 	.word	0x2000188c
  ldr r2, =_sidata
 8000898:	0800264c 	.word	0x0800264c
  ldr r2, =_sbss
 800089c:	2000188c 	.word	0x2000188c
  ldr r4, =_ebss
 80008a0:	20001a58 	.word	0x20001a58

080008a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008a4:	e7fe      	b.n	80008a4 <ADC_IRQHandler>
	...

080008a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008ac:	4b0e      	ldr	r3, [pc, #56]	@ (80008e8 <HAL_Init+0x40>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a0d      	ldr	r2, [pc, #52]	@ (80008e8 <HAL_Init+0x40>)
 80008b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <HAL_Init+0x40>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a0a      	ldr	r2, [pc, #40]	@ (80008e8 <HAL_Init+0x40>)
 80008be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008c4:	4b08      	ldr	r3, [pc, #32]	@ (80008e8 <HAL_Init+0x40>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4a07      	ldr	r2, [pc, #28]	@ (80008e8 <HAL_Init+0x40>)
 80008ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80008ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d0:	2003      	movs	r0, #3
 80008d2:	f000 f8b8 	bl	8000a46 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80008d6:	200f      	movs	r0, #15
 80008d8:	f7ff fe1e 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80008dc:	f7ff fda8 	bl	8000430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	40023c00 	.word	0x40023c00

080008ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b085      	sub	sp, #20
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	f003 0307 	and.w	r3, r3, #7
 80008fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 80008fe:	68db      	ldr	r3, [r3, #12]
 8000900:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000902:	68ba      	ldr	r2, [r7, #8]
 8000904:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000908:	4013      	ands	r3, r2
 800090a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800090c:	68fb      	ldr	r3, [r7, #12]
 800090e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000910:	68bb      	ldr	r3, [r7, #8]
 8000912:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000914:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000918:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800091c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800091e:	4a04      	ldr	r2, [pc, #16]	@ (8000930 <__NVIC_SetPriorityGrouping+0x44>)
 8000920:	68bb      	ldr	r3, [r7, #8]
 8000922:	60d3      	str	r3, [r2, #12]
}
 8000924:	bf00      	nop
 8000926:	3714      	adds	r7, #20
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr
 8000930:	e000ed00 	.word	0xe000ed00

08000934 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000934:	b480      	push	{r7}
 8000936:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000938:	4b04      	ldr	r3, [pc, #16]	@ (800094c <__NVIC_GetPriorityGrouping+0x18>)
 800093a:	68db      	ldr	r3, [r3, #12]
 800093c:	0a1b      	lsrs	r3, r3, #8
 800093e:	f003 0307 	and.w	r3, r3, #7
}
 8000942:	4618      	mov	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr
 800094c:	e000ed00 	.word	0xe000ed00

08000950 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b480      	push	{r7}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	db0b      	blt.n	800097a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 021f 	and.w	r2, r3, #31
 8000968:	4907      	ldr	r1, [pc, #28]	@ (8000988 <__NVIC_EnableIRQ+0x38>)
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	095b      	lsrs	r3, r3, #5
 8000970:	2001      	movs	r0, #1
 8000972:	fa00 f202 	lsl.w	r2, r0, r2
 8000976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	e000e100 	.word	0xe000e100

0800098c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800098c:	b480      	push	{r7}
 800098e:	b083      	sub	sp, #12
 8000990:	af00      	add	r7, sp, #0
 8000992:	4603      	mov	r3, r0
 8000994:	6039      	str	r1, [r7, #0]
 8000996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800099c:	2b00      	cmp	r3, #0
 800099e:	db0a      	blt.n	80009b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	490c      	ldr	r1, [pc, #48]	@ (80009d8 <__NVIC_SetPriority+0x4c>)
 80009a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009aa:	0112      	lsls	r2, r2, #4
 80009ac:	b2d2      	uxtb	r2, r2
 80009ae:	440b      	add	r3, r1
 80009b0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80009b4:	e00a      	b.n	80009cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80009b6:	683b      	ldr	r3, [r7, #0]
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4908      	ldr	r1, [pc, #32]	@ (80009dc <__NVIC_SetPriority+0x50>)
 80009bc:	79fb      	ldrb	r3, [r7, #7]
 80009be:	f003 030f 	and.w	r3, r3, #15
 80009c2:	3b04      	subs	r3, #4
 80009c4:	0112      	lsls	r2, r2, #4
 80009c6:	b2d2      	uxtb	r2, r2
 80009c8:	440b      	add	r3, r1
 80009ca:	761a      	strb	r2, [r3, #24]
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	e000e100 	.word	0xe000e100
 80009dc:	e000ed00 	.word	0xe000ed00

080009e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009e0:	b480      	push	{r7}
 80009e2:	b089      	sub	sp, #36	@ 0x24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	60f8      	str	r0, [r7, #12]
 80009e8:	60b9      	str	r1, [r7, #8]
 80009ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	f003 0307 	and.w	r3, r3, #7
 80009f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80009f4:	69fb      	ldr	r3, [r7, #28]
 80009f6:	f1c3 0307 	rsb	r3, r3, #7
 80009fa:	2b04      	cmp	r3, #4
 80009fc:	bf28      	it	cs
 80009fe:	2304      	movcs	r3, #4
 8000a00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a02:	69fb      	ldr	r3, [r7, #28]
 8000a04:	3304      	adds	r3, #4
 8000a06:	2b06      	cmp	r3, #6
 8000a08:	d902      	bls.n	8000a10 <NVIC_EncodePriority+0x30>
 8000a0a:	69fb      	ldr	r3, [r7, #28]
 8000a0c:	3b03      	subs	r3, #3
 8000a0e:	e000      	b.n	8000a12 <NVIC_EncodePriority+0x32>
 8000a10:	2300      	movs	r3, #0
 8000a12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a14:	f04f 32ff 	mov.w	r2, #4294967295
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1e:	43da      	mvns	r2, r3
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	401a      	ands	r2, r3
 8000a24:	697b      	ldr	r3, [r7, #20]
 8000a26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000a28:	f04f 31ff 	mov.w	r1, #4294967295
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000a32:	43d9      	mvns	r1, r3
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a38:	4313      	orrs	r3, r2
         );
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3724      	adds	r7, #36	@ 0x24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a46:	b580      	push	{r7, lr}
 8000a48:	b082      	sub	sp, #8
 8000a4a:	af00      	add	r7, sp, #0
 8000a4c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a4e:	6878      	ldr	r0, [r7, #4]
 8000a50:	f7ff ff4c 	bl	80008ec <__NVIC_SetPriorityGrouping>
}
 8000a54:	bf00      	nop
 8000a56:	3708      	adds	r7, #8
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bd80      	pop	{r7, pc}

08000a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
 8000a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a6e:	f7ff ff61 	bl	8000934 <__NVIC_GetPriorityGrouping>
 8000a72:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a74:	687a      	ldr	r2, [r7, #4]
 8000a76:	68b9      	ldr	r1, [r7, #8]
 8000a78:	6978      	ldr	r0, [r7, #20]
 8000a7a:	f7ff ffb1 	bl	80009e0 <NVIC_EncodePriority>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a84:	4611      	mov	r1, r2
 8000a86:	4618      	mov	r0, r3
 8000a88:	f7ff ff80 	bl	800098c <__NVIC_SetPriority>
}
 8000a8c:	bf00      	nop
 8000a8e:	3718      	adds	r7, #24
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	4618      	mov	r0, r3
 8000aa4:	f7ff ff54 	bl	8000950 <__NVIC_EnableIRQ>
}
 8000aa8:	bf00      	nop
 8000aaa:	3708      	adds	r7, #8
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}

08000ab0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d101      	bne.n	8000ac2 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e014      	b.n	8000aec <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	791b      	ldrb	r3, [r3, #4]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d105      	bne.n	8000ad8 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	2200      	movs	r2, #0
 8000ad0:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000ad2:	6878      	ldr	r0, [r7, #4]
 8000ad4:	f7ff fcd4 	bl	8000480 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	2202      	movs	r2, #2
 8000adc:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	2201      	movs	r2, #1
 8000ae8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8000aea:	2300      	movs	r3, #0
}
 8000aec:	4618      	mov	r0, r3
 8000aee:	3708      	adds	r7, #8
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b083      	sub	sp, #12
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
 8000afc:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d101      	bne.n	8000b08 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8000b04:	2301      	movs	r3, #1
 8000b06:	e046      	b.n	8000b96 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	795b      	ldrb	r3, [r3, #5]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d101      	bne.n	8000b14 <HAL_DAC_Start+0x20>
 8000b10:	2302      	movs	r3, #2
 8000b12:	e040      	b.n	8000b96 <HAL_DAC_Start+0xa2>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	2201      	movs	r2, #1
 8000b18:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	6819      	ldr	r1, [r3, #0]
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	f003 0310 	and.w	r3, r3, #16
 8000b2c:	2201      	movs	r2, #1
 8000b2e:	409a      	lsls	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	430a      	orrs	r2, r1
 8000b36:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8000b38:	683b      	ldr	r3, [r7, #0]
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d10f      	bne.n	8000b5e <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8000b48:	2b3c      	cmp	r3, #60	@ 0x3c
 8000b4a:	d11d      	bne.n	8000b88 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	685a      	ldr	r2, [r3, #4]
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	f042 0201 	orr.w	r2, r2, #1
 8000b5a:	605a      	str	r2, [r3, #4]
 8000b5c:	e014      	b.n	8000b88 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	f003 0310 	and.w	r3, r3, #16
 8000b6e:	213c      	movs	r1, #60	@ 0x3c
 8000b70:	fa01 f303 	lsl.w	r3, r1, r3
 8000b74:	429a      	cmp	r2, r3
 8000b76:	d107      	bne.n	8000b88 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	685a      	ldr	r2, [r3, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	f042 0202 	orr.w	r2, r2, #2
 8000b86:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2200      	movs	r2, #0
 8000b92:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8000b94:	2300      	movs	r3, #0
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000bb8:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d01d      	beq.n	8000c00 <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 8000bc4:	68bb      	ldr	r3, [r7, #8]
 8000bc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d018      	beq.n	8000c00 <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2204      	movs	r2, #4
 8000bd2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	691b      	ldr	r3, [r3, #16]
 8000bd8:	f043 0201 	orr.w	r2, r3, #1
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000be8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8000bf8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8000bfa:	6878      	ldr	r0, [r7, #4]
 8000bfc:	f000 f851 	bl	8000ca2 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d01d      	beq.n	8000c46 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d018      	beq.n	8000c46 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	2204      	movs	r2, #4
 8000c18:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	691b      	ldr	r3, [r3, #16]
 8000c1e:	f043 0202 	orr.w	r2, r3, #2
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	681b      	ldr	r3, [r3, #0]
 8000c2a:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c2e:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 8000c3e:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f000 f891 	bl	8000d68 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8000c46:	bf00      	nop
 8000c48:	3710      	adds	r7, #16
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}

08000c4e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8000c4e:	b480      	push	{r7}
 8000c50:	b087      	sub	sp, #28
 8000c52:	af00      	add	r7, sp, #0
 8000c54:	60f8      	str	r0, [r7, #12]
 8000c56:	60b9      	str	r1, [r7, #8]
 8000c58:	607a      	str	r2, [r7, #4]
 8000c5a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d101      	bne.n	8000c6a <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8000c66:	2301      	movs	r3, #1
 8000c68:	e015      	b.n	8000c96 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8000c6a:	68fb      	ldr	r3, [r7, #12]
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d105      	bne.n	8000c82 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000c76:	697a      	ldr	r2, [r7, #20]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	4413      	add	r3, r2
 8000c7c:	3308      	adds	r3, #8
 8000c7e:	617b      	str	r3, [r7, #20]
 8000c80:	e004      	b.n	8000c8c <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000c82:	697a      	ldr	r2, [r7, #20]
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	4413      	add	r3, r2
 8000c88:	3314      	adds	r3, #20
 8000c8a:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	461a      	mov	r2, r3
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8000c94:	2300      	movs	r3, #0
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	371c      	adds	r7, #28
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	b083      	sub	sp, #12
 8000ca6:	af00      	add	r7, sp, #0
 8000ca8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8000caa:	bf00      	nop
 8000cac:	370c      	adds	r7, #12
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb4:	4770      	bx	lr

08000cb6 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8000cb6:	b480      	push	{r7}
 8000cb8:	b089      	sub	sp, #36	@ 0x24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	60f8      	str	r0, [r7, #12]
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d002      	beq.n	8000cd2 <HAL_DAC_ConfigChannel+0x1c>
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d101      	bne.n	8000cd6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	e042      	b.n	8000d5c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	795b      	ldrb	r3, [r3, #5]
 8000cda:	2b01      	cmp	r3, #1
 8000cdc:	d101      	bne.n	8000ce2 <HAL_DAC_ConfigChannel+0x2c>
 8000cde:	2302      	movs	r3, #2
 8000ce0:	e03c      	b.n	8000d5c <HAL_DAC_ConfigChannel+0xa6>
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	2202      	movs	r2, #2
 8000cec:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	f003 0310 	and.w	r3, r3, #16
 8000cfc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8000d04:	43db      	mvns	r3, r3
 8000d06:	69ba      	ldr	r2, [r7, #24]
 8000d08:	4013      	ands	r3, r2
 8000d0a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8000d0c:	68bb      	ldr	r3, [r7, #8]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	4313      	orrs	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	f003 0310 	and.w	r3, r3, #16
 8000d1e:	697a      	ldr	r2, [r7, #20]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	69ba      	ldr	r2, [r7, #24]
 8000d26:	4313      	orrs	r3, r2
 8000d28:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	6819      	ldr	r1, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	f003 0310 	and.w	r3, r3, #16
 8000d3e:	22c0      	movs	r2, #192	@ 0xc0
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	43da      	mvns	r2, r3
 8000d46:	68fb      	ldr	r3, [r7, #12]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	400a      	ands	r2, r1
 8000d4c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	2201      	movs	r2, #1
 8000d52:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d54:	68fb      	ldr	r3, [r7, #12]
 8000d56:	2200      	movs	r2, #0
 8000d58:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8000d5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3724      	adds	r7, #36	@ 0x24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b089      	sub	sp, #36	@ 0x24
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d86:	2300      	movs	r3, #0
 8000d88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
 8000d96:	e165      	b.n	8001064 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d98:	2201      	movs	r2, #1
 8000d9a:	69fb      	ldr	r3, [r7, #28]
 8000d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000da0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	4013      	ands	r3, r2
 8000daa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dac:	693a      	ldr	r2, [r7, #16]
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	f040 8154 	bne.w	800105e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d005      	beq.n	8000dce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dca:	2b02      	cmp	r3, #2
 8000dcc:	d130      	bne.n	8000e30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	689b      	ldr	r3, [r3, #8]
 8000dd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dd4:	69fb      	ldr	r3, [r7, #28]
 8000dd6:	005b      	lsls	r3, r3, #1
 8000dd8:	2203      	movs	r2, #3
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de6:	683b      	ldr	r3, [r7, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	fa02 f303 	lsl.w	r3, r2, r3
 8000df2:	69ba      	ldr	r2, [r7, #24]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e04:	2201      	movs	r2, #1
 8000e06:	69fb      	ldr	r3, [r7, #28]
 8000e08:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0c:	43db      	mvns	r3, r3
 8000e0e:	69ba      	ldr	r2, [r7, #24]
 8000e10:	4013      	ands	r3, r2
 8000e12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e14:	683b      	ldr	r3, [r7, #0]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	091b      	lsrs	r3, r3, #4
 8000e1a:	f003 0201 	and.w	r2, r3, #1
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	fa02 f303 	lsl.w	r3, r2, r3
 8000e24:	69ba      	ldr	r2, [r7, #24]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	69ba      	ldr	r2, [r7, #24]
 8000e2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f003 0303 	and.w	r3, r3, #3
 8000e38:	2b03      	cmp	r3, #3
 8000e3a:	d017      	beq.n	8000e6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	68db      	ldr	r3, [r3, #12]
 8000e40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	005b      	lsls	r3, r3, #1
 8000e46:	2203      	movs	r2, #3
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	43db      	mvns	r3, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4013      	ands	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	689a      	ldr	r2, [r3, #8]
 8000e58:	69fb      	ldr	r3, [r7, #28]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e60:	69ba      	ldr	r2, [r7, #24]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d123      	bne.n	8000ec0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e78:	69fb      	ldr	r3, [r7, #28]
 8000e7a:	08da      	lsrs	r2, r3, #3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3208      	adds	r2, #8
 8000e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	f003 0307 	and.w	r3, r3, #7
 8000e8c:	009b      	lsls	r3, r3, #2
 8000e8e:	220f      	movs	r2, #15
 8000e90:	fa02 f303 	lsl.w	r3, r2, r3
 8000e94:	43db      	mvns	r3, r3
 8000e96:	69ba      	ldr	r2, [r7, #24]
 8000e98:	4013      	ands	r3, r2
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	691a      	ldr	r2, [r3, #16]
 8000ea0:	69fb      	ldr	r3, [r7, #28]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	08da      	lsrs	r2, r3, #3
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	3208      	adds	r2, #8
 8000eba:	69b9      	ldr	r1, [r7, #24]
 8000ebc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ec6:	69fb      	ldr	r3, [r7, #28]
 8000ec8:	005b      	lsls	r3, r3, #1
 8000eca:	2203      	movs	r2, #3
 8000ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed0:	43db      	mvns	r3, r3
 8000ed2:	69ba      	ldr	r2, [r7, #24]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	685b      	ldr	r3, [r3, #4]
 8000edc:	f003 0203 	and.w	r2, r3, #3
 8000ee0:	69fb      	ldr	r3, [r7, #28]
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee8:	69ba      	ldr	r2, [r7, #24]
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	69ba      	ldr	r2, [r7, #24]
 8000ef2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685b      	ldr	r3, [r3, #4]
 8000ef8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	f000 80ae 	beq.w	800105e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b5d      	ldr	r3, [pc, #372]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f0a:	4a5c      	ldr	r2, [pc, #368]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f10:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f12:	4b5a      	ldr	r3, [pc, #360]	@ (800107c <HAL_GPIO_Init+0x300>)
 8000f14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f1e:	4a58      	ldr	r2, [pc, #352]	@ (8001080 <HAL_GPIO_Init+0x304>)
 8000f20:	69fb      	ldr	r3, [r7, #28]
 8000f22:	089b      	lsrs	r3, r3, #2
 8000f24:	3302      	adds	r3, #2
 8000f26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f2c:	69fb      	ldr	r3, [r7, #28]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	220f      	movs	r2, #15
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	69ba      	ldr	r2, [r7, #24]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	4a4f      	ldr	r2, [pc, #316]	@ (8001084 <HAL_GPIO_Init+0x308>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d025      	beq.n	8000f96 <HAL_GPIO_Init+0x21a>
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4a4e      	ldr	r2, [pc, #312]	@ (8001088 <HAL_GPIO_Init+0x30c>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d01f      	beq.n	8000f92 <HAL_GPIO_Init+0x216>
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a4d      	ldr	r2, [pc, #308]	@ (800108c <HAL_GPIO_Init+0x310>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d019      	beq.n	8000f8e <HAL_GPIO_Init+0x212>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a4c      	ldr	r2, [pc, #304]	@ (8001090 <HAL_GPIO_Init+0x314>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d013      	beq.n	8000f8a <HAL_GPIO_Init+0x20e>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a4b      	ldr	r2, [pc, #300]	@ (8001094 <HAL_GPIO_Init+0x318>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d00d      	beq.n	8000f86 <HAL_GPIO_Init+0x20a>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4a      	ldr	r2, [pc, #296]	@ (8001098 <HAL_GPIO_Init+0x31c>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d007      	beq.n	8000f82 <HAL_GPIO_Init+0x206>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a49      	ldr	r2, [pc, #292]	@ (800109c <HAL_GPIO_Init+0x320>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d101      	bne.n	8000f7e <HAL_GPIO_Init+0x202>
 8000f7a:	2306      	movs	r3, #6
 8000f7c:	e00c      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f7e:	2307      	movs	r3, #7
 8000f80:	e00a      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f82:	2305      	movs	r3, #5
 8000f84:	e008      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f86:	2304      	movs	r3, #4
 8000f88:	e006      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e004      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f8e:	2302      	movs	r3, #2
 8000f90:	e002      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f92:	2301      	movs	r3, #1
 8000f94:	e000      	b.n	8000f98 <HAL_GPIO_Init+0x21c>
 8000f96:	2300      	movs	r3, #0
 8000f98:	69fa      	ldr	r2, [r7, #28]
 8000f9a:	f002 0203 	and.w	r2, r2, #3
 8000f9e:	0092      	lsls	r2, r2, #2
 8000fa0:	4093      	lsls	r3, r2
 8000fa2:	69ba      	ldr	r2, [r7, #24]
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fa8:	4935      	ldr	r1, [pc, #212]	@ (8001080 <HAL_GPIO_Init+0x304>)
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	089b      	lsrs	r3, r3, #2
 8000fae:	3302      	adds	r3, #2
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fb8:	689b      	ldr	r3, [r3, #8]
 8000fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	69ba      	ldr	r2, [r7, #24]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d003      	beq.n	8000fda <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	4313      	orrs	r3, r2
 8000fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fda:	4a31      	ldr	r2, [pc, #196]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8000fe2:	68db      	ldr	r3, [r3, #12]
 8000fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	43db      	mvns	r3, r3
 8000fea:	69ba      	ldr	r2, [r7, #24]
 8000fec:	4013      	ands	r3, r2
 8000fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d003      	beq.n	8001004 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ffc:	69ba      	ldr	r2, [r7, #24]
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	4313      	orrs	r3, r2
 8001002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001004:	4a26      	ldr	r2, [pc, #152]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800100a:	4b25      	ldr	r3, [pc, #148]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001010:	693b      	ldr	r3, [r7, #16]
 8001012:	43db      	mvns	r3, r3
 8001014:	69ba      	ldr	r2, [r7, #24]
 8001016:	4013      	ands	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	685b      	ldr	r3, [r3, #4]
 800101e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d003      	beq.n	800102e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001026:	69ba      	ldr	r2, [r7, #24]
 8001028:	693b      	ldr	r3, [r7, #16]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800102e:	4a1c      	ldr	r2, [pc, #112]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001030:	69bb      	ldr	r3, [r7, #24]
 8001032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001034:	4b1a      	ldr	r3, [pc, #104]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800104c:	2b00      	cmp	r3, #0
 800104e:	d003      	beq.n	8001058 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001058:	4a11      	ldr	r2, [pc, #68]	@ (80010a0 <HAL_GPIO_Init+0x324>)
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3301      	adds	r3, #1
 8001062:	61fb      	str	r3, [r7, #28]
 8001064:	69fb      	ldr	r3, [r7, #28]
 8001066:	2b0f      	cmp	r3, #15
 8001068:	f67f ae96 	bls.w	8000d98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800106c:	bf00      	nop
 800106e:	bf00      	nop
 8001070:	3724      	adds	r7, #36	@ 0x24
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	40023800 	.word	0x40023800
 8001080:	40013800 	.word	0x40013800
 8001084:	40020000 	.word	0x40020000
 8001088:	40020400 	.word	0x40020400
 800108c:	40020800 	.word	0x40020800
 8001090:	40020c00 	.word	0x40020c00
 8001094:	40021000 	.word	0x40021000
 8001098:	40021400 	.word	0x40021400
 800109c:	40021800 	.word	0x40021800
 80010a0:	40013c00 	.word	0x40013c00

080010a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80010a8:	4b03      	ldr	r3, [pc, #12]	@ (80010b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80010aa:	681b      	ldr	r3, [r3, #0]
}
 80010ac:	4618      	mov	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	20001828 	.word	0x20001828

080010bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80010c0:	f7ff fff0 	bl	80010a4 <HAL_RCC_GetHCLKFreq>
 80010c4:	4602      	mov	r2, r0
 80010c6:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80010c8:	689b      	ldr	r3, [r3, #8]
 80010ca:	0a9b      	lsrs	r3, r3, #10
 80010cc:	f003 0307 	and.w	r3, r3, #7
 80010d0:	4903      	ldr	r1, [pc, #12]	@ (80010e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80010d2:	5ccb      	ldrb	r3, [r1, r3]
 80010d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80010d8:	4618      	mov	r0, r3
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	40023800 	.word	0x40023800
 80010e0:	08002600 	.word	0x08002600

080010e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	220f      	movs	r2, #15
 80010f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80010f4:	4b12      	ldr	r3, [pc, #72]	@ (8001140 <HAL_RCC_GetClockConfig+0x5c>)
 80010f6:	689b      	ldr	r3, [r3, #8]
 80010f8:	f003 0203 	and.w	r2, r3, #3
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001100:	4b0f      	ldr	r3, [pc, #60]	@ (8001140 <HAL_RCC_GetClockConfig+0x5c>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800110c:	4b0c      	ldr	r3, [pc, #48]	@ (8001140 <HAL_RCC_GetClockConfig+0x5c>)
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001118:	4b09      	ldr	r3, [pc, #36]	@ (8001140 <HAL_RCC_GetClockConfig+0x5c>)
 800111a:	689b      	ldr	r3, [r3, #8]
 800111c:	08db      	lsrs	r3, r3, #3
 800111e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001126:	4b07      	ldr	r3, [pc, #28]	@ (8001144 <HAL_RCC_GetClockConfig+0x60>)
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	f003 0207 	and.w	r2, r3, #7
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	bf00      	nop
 8001134:	370c      	adds	r7, #12
 8001136:	46bd      	mov	sp, r7
 8001138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113c:	4770      	bx	lr
 800113e:	bf00      	nop
 8001140:	40023800 	.word	0x40023800
 8001144:	40023c00 	.word	0x40023c00

08001148 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d101      	bne.n	800115a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	e041      	b.n	80011de <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001160:	b2db      	uxtb	r3, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	d106      	bne.n	8001174 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f839 	bl	80011e6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	2202      	movs	r2, #2
 8001178:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3304      	adds	r3, #4
 8001184:	4619      	mov	r1, r3
 8001186:	4610      	mov	r0, r2
 8001188:	f000 f9c0 	bl	800150c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	2201      	movs	r2, #1
 8001190:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2201      	movs	r2, #1
 8001198:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2201      	movs	r2, #1
 80011a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	2201      	movs	r2, #1
 80011a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2201      	movs	r2, #1
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2201      	movs	r2, #1
 80011b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	2201      	movs	r2, #1
 80011c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	2201      	movs	r2, #1
 80011c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2201      	movs	r2, #1
 80011d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2201      	movs	r2, #1
 80011d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80011e6:	b480      	push	{r7}
 80011e8:	b083      	sub	sp, #12
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
	...

080011fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b01      	cmp	r3, #1
 800120e:	d001      	beq.n	8001214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001210:	2301      	movs	r3, #1
 8001212:	e04e      	b.n	80012b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2202      	movs	r2, #2
 8001218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	68da      	ldr	r2, [r3, #12]
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f042 0201 	orr.w	r2, r2, #1
 800122a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a23      	ldr	r2, [pc, #140]	@ (80012c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001232:	4293      	cmp	r3, r2
 8001234:	d022      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800123e:	d01d      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a1f      	ldr	r2, [pc, #124]	@ (80012c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d018      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a1e      	ldr	r2, [pc, #120]	@ (80012c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d013      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	4a1c      	ldr	r2, [pc, #112]	@ (80012cc <HAL_TIM_Base_Start_IT+0xd0>)
 800125a:	4293      	cmp	r3, r2
 800125c:	d00e      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	4a1b      	ldr	r2, [pc, #108]	@ (80012d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d009      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	4a19      	ldr	r2, [pc, #100]	@ (80012d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800126e:	4293      	cmp	r3, r2
 8001270:	d004      	beq.n	800127c <HAL_TIM_Base_Start_IT+0x80>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a18      	ldr	r2, [pc, #96]	@ (80012d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d111      	bne.n	80012a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	689b      	ldr	r3, [r3, #8]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	2b06      	cmp	r3, #6
 800128c:	d010      	beq.n	80012b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f042 0201 	orr.w	r2, r2, #1
 800129c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800129e:	e007      	b.n	80012b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	f042 0201 	orr.w	r2, r2, #1
 80012ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80012b0:	2300      	movs	r3, #0
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	3714      	adds	r7, #20
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	40010000 	.word	0x40010000
 80012c4:	40000400 	.word	0x40000400
 80012c8:	40000800 	.word	0x40000800
 80012cc:	40000c00 	.word	0x40000c00
 80012d0:	40010400 	.word	0x40010400
 80012d4:	40014000 	.word	0x40014000
 80012d8:	40001800 	.word	0x40001800

080012dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	68db      	ldr	r3, [r3, #12]
 80012ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	691b      	ldr	r3, [r3, #16]
 80012f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80012f4:	68bb      	ldr	r3, [r7, #8]
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d020      	beq.n	8001340 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d01b      	beq.n	8001340 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f06f 0202 	mvn.w	r2, #2
 8001310:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	2201      	movs	r2, #1
 8001316:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	699b      	ldr	r3, [r3, #24]
 800131e:	f003 0303 	and.w	r3, r3, #3
 8001322:	2b00      	cmp	r3, #0
 8001324:	d003      	beq.n	800132e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001326:	6878      	ldr	r0, [r7, #4]
 8001328:	f000 f8d2 	bl	80014d0 <HAL_TIM_IC_CaptureCallback>
 800132c:	e005      	b.n	800133a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800132e:	6878      	ldr	r0, [r7, #4]
 8001330:	f000 f8c4 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001334:	6878      	ldr	r0, [r7, #4]
 8001336:	f000 f8d5 	bl	80014e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	2200      	movs	r2, #0
 800133e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f003 0304 	and.w	r3, r3, #4
 8001346:	2b00      	cmp	r3, #0
 8001348:	d020      	beq.n	800138c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f003 0304 	and.w	r3, r3, #4
 8001350:	2b00      	cmp	r3, #0
 8001352:	d01b      	beq.n	800138c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f06f 0204 	mvn.w	r2, #4
 800135c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	2202      	movs	r2, #2
 8001362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	699b      	ldr	r3, [r3, #24]
 800136a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800136e:	2b00      	cmp	r3, #0
 8001370:	d003      	beq.n	800137a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f8ac 	bl	80014d0 <HAL_TIM_IC_CaptureCallback>
 8001378:	e005      	b.n	8001386 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f000 f89e 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f000 f8af 	bl	80014e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800138c:	68bb      	ldr	r3, [r7, #8]
 800138e:	f003 0308 	and.w	r3, r3, #8
 8001392:	2b00      	cmp	r3, #0
 8001394:	d020      	beq.n	80013d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b00      	cmp	r3, #0
 800139e:	d01b      	beq.n	80013d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f06f 0208 	mvn.w	r2, #8
 80013a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2204      	movs	r2, #4
 80013ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	69db      	ldr	r3, [r3, #28]
 80013b6:	f003 0303 	and.w	r3, r3, #3
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80013be:	6878      	ldr	r0, [r7, #4]
 80013c0:	f000 f886 	bl	80014d0 <HAL_TIM_IC_CaptureCallback>
 80013c4:	e005      	b.n	80013d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80013c6:	6878      	ldr	r0, [r7, #4]
 80013c8:	f000 f878 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80013cc:	6878      	ldr	r0, [r7, #4]
 80013ce:	f000 f889 	bl	80014e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	2200      	movs	r2, #0
 80013d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80013d8:	68bb      	ldr	r3, [r7, #8]
 80013da:	f003 0310 	and.w	r3, r3, #16
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d020      	beq.n	8001424 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	f003 0310 	and.w	r3, r3, #16
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d01b      	beq.n	8001424 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f06f 0210 	mvn.w	r2, #16
 80013f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2208      	movs	r2, #8
 80013fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	69db      	ldr	r3, [r3, #28]
 8001402:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001406:	2b00      	cmp	r3, #0
 8001408:	d003      	beq.n	8001412 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 f860 	bl	80014d0 <HAL_TIM_IC_CaptureCallback>
 8001410:	e005      	b.n	800141e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f000 f852 	bl	80014bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001418:	6878      	ldr	r0, [r7, #4]
 800141a:	f000 f863 	bl	80014e4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2200      	movs	r2, #0
 8001422:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001424:	68bb      	ldr	r3, [r7, #8]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d007      	beq.n	8001448 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	f06f 0201 	mvn.w	r2, #1
 8001440:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7fe ff3c 	bl	80002c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800144e:	2b00      	cmp	r3, #0
 8001450:	d00c      	beq.n	800146c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001458:	2b00      	cmp	r3, #0
 800145a:	d007      	beq.n	800146c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001464:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f982 	bl	8001770 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800146c:	68bb      	ldr	r3, [r7, #8]
 800146e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001472:	2b00      	cmp	r3, #0
 8001474:	d00c      	beq.n	8001490 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 f834 	bl	80014f8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001490:	68bb      	ldr	r3, [r7, #8]
 8001492:	f003 0320 	and.w	r3, r3, #32
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00c      	beq.n	80014b4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	f003 0320 	and.w	r3, r3, #32
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d007      	beq.n	80014b4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	f06f 0220 	mvn.w	r2, #32
 80014ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80014ae:	6878      	ldr	r0, [r7, #4]
 80014b0:	f000 f954 	bl	800175c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr

080014d0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80014d8:	bf00      	nop
 80014da:	370c      	adds	r7, #12
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr

080014e4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001500:	bf00      	nop
 8001502:	370c      	adds	r7, #12
 8001504:	46bd      	mov	sp, r7
 8001506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150a:	4770      	bx	lr

0800150c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800150c:	b480      	push	{r7}
 800150e:	b085      	sub	sp, #20
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
 8001514:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a46      	ldr	r2, [pc, #280]	@ (8001638 <TIM_Base_SetConfig+0x12c>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d013      	beq.n	800154c <TIM_Base_SetConfig+0x40>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800152a:	d00f      	beq.n	800154c <TIM_Base_SetConfig+0x40>
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	4a43      	ldr	r2, [pc, #268]	@ (800163c <TIM_Base_SetConfig+0x130>)
 8001530:	4293      	cmp	r3, r2
 8001532:	d00b      	beq.n	800154c <TIM_Base_SetConfig+0x40>
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4a42      	ldr	r2, [pc, #264]	@ (8001640 <TIM_Base_SetConfig+0x134>)
 8001538:	4293      	cmp	r3, r2
 800153a:	d007      	beq.n	800154c <TIM_Base_SetConfig+0x40>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a41      	ldr	r2, [pc, #260]	@ (8001644 <TIM_Base_SetConfig+0x138>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d003      	beq.n	800154c <TIM_Base_SetConfig+0x40>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a40      	ldr	r2, [pc, #256]	@ (8001648 <TIM_Base_SetConfig+0x13c>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d108      	bne.n	800155e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001552:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	4313      	orrs	r3, r2
 800155c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a35      	ldr	r2, [pc, #212]	@ (8001638 <TIM_Base_SetConfig+0x12c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d02b      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800156c:	d027      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a32      	ldr	r2, [pc, #200]	@ (800163c <TIM_Base_SetConfig+0x130>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d023      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a31      	ldr	r2, [pc, #196]	@ (8001640 <TIM_Base_SetConfig+0x134>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d01f      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a30      	ldr	r2, [pc, #192]	@ (8001644 <TIM_Base_SetConfig+0x138>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d01b      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a2f      	ldr	r2, [pc, #188]	@ (8001648 <TIM_Base_SetConfig+0x13c>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d017      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	4a2e      	ldr	r2, [pc, #184]	@ (800164c <TIM_Base_SetConfig+0x140>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d013      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4a2d      	ldr	r2, [pc, #180]	@ (8001650 <TIM_Base_SetConfig+0x144>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d00f      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a2c      	ldr	r2, [pc, #176]	@ (8001654 <TIM_Base_SetConfig+0x148>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d00b      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	4a2b      	ldr	r2, [pc, #172]	@ (8001658 <TIM_Base_SetConfig+0x14c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d007      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	4a2a      	ldr	r2, [pc, #168]	@ (800165c <TIM_Base_SetConfig+0x150>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d003      	beq.n	80015be <TIM_Base_SetConfig+0xb2>
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	4a29      	ldr	r2, [pc, #164]	@ (8001660 <TIM_Base_SetConfig+0x154>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	d108      	bne.n	80015d0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80015c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	68db      	ldr	r3, [r3, #12]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	4313      	orrs	r3, r2
 80015ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	4313      	orrs	r3, r2
 80015dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	68fa      	ldr	r2, [r7, #12]
 80015e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	689a      	ldr	r2, [r3, #8]
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	4a10      	ldr	r2, [pc, #64]	@ (8001638 <TIM_Base_SetConfig+0x12c>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d003      	beq.n	8001604 <TIM_Base_SetConfig+0xf8>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	4a12      	ldr	r2, [pc, #72]	@ (8001648 <TIM_Base_SetConfig+0x13c>)
 8001600:	4293      	cmp	r3, r2
 8001602:	d103      	bne.n	800160c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	691a      	ldr	r2, [r3, #16]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2201      	movs	r2, #1
 8001610:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	691b      	ldr	r3, [r3, #16]
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	f023 0201 	bic.w	r2, r3, #1
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	611a      	str	r2, [r3, #16]
  }
}
 800162a:	bf00      	nop
 800162c:	3714      	adds	r7, #20
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	40010000 	.word	0x40010000
 800163c:	40000400 	.word	0x40000400
 8001640:	40000800 	.word	0x40000800
 8001644:	40000c00 	.word	0x40000c00
 8001648:	40010400 	.word	0x40010400
 800164c:	40014000 	.word	0x40014000
 8001650:	40014400 	.word	0x40014400
 8001654:	40014800 	.word	0x40014800
 8001658:	40001800 	.word	0x40001800
 800165c:	40001c00 	.word	0x40001c00
 8001660:	40002000 	.word	0x40002000

08001664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
 800166c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001678:	2302      	movs	r3, #2
 800167a:	e05a      	b.n	8001732 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2201      	movs	r2, #1
 8001680:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2202      	movs	r2, #2
 8001688:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80016a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	4313      	orrs	r3, r2
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a21      	ldr	r2, [pc, #132]	@ (8001740 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d022      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016c8:	d01d      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001744 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d018      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a1b      	ldr	r2, [pc, #108]	@ (8001748 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d013      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a1a      	ldr	r2, [pc, #104]	@ (800174c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00e      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a18      	ldr	r2, [pc, #96]	@ (8001750 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d009      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a17      	ldr	r2, [pc, #92]	@ (8001754 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d004      	beq.n	8001706 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a15      	ldr	r2, [pc, #84]	@ (8001758 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d10c      	bne.n	8001720 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001706:	68bb      	ldr	r3, [r7, #8]
 8001708:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800170c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	68ba      	ldr	r2, [r7, #8]
 8001714:	4313      	orrs	r3, r2
 8001716:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	68ba      	ldr	r2, [r7, #8]
 800171e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2201      	movs	r2, #1
 8001724:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	3714      	adds	r7, #20
 8001736:	46bd      	mov	sp, r7
 8001738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173c:	4770      	bx	lr
 800173e:	bf00      	nop
 8001740:	40010000 	.word	0x40010000
 8001744:	40000400 	.word	0x40000400
 8001748:	40000800 	.word	0x40000800
 800174c:	40000c00 	.word	0x40000c00
 8001750:	40010400 	.word	0x40010400
 8001754:	40014000 	.word	0x40014000
 8001758:	40001800 	.word	0x40001800

0800175c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001764:	bf00      	nop
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001778:	bf00      	nop
 800177a:	370c      	adds	r7, #12
 800177c:	46bd      	mov	sp, r7
 800177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001782:	4770      	bx	lr

08001784 <std>:
 8001784:	2300      	movs	r3, #0
 8001786:	b510      	push	{r4, lr}
 8001788:	4604      	mov	r4, r0
 800178a:	e9c0 3300 	strd	r3, r3, [r0]
 800178e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001792:	6083      	str	r3, [r0, #8]
 8001794:	8181      	strh	r1, [r0, #12]
 8001796:	6643      	str	r3, [r0, #100]	@ 0x64
 8001798:	81c2      	strh	r2, [r0, #14]
 800179a:	6183      	str	r3, [r0, #24]
 800179c:	4619      	mov	r1, r3
 800179e:	2208      	movs	r2, #8
 80017a0:	305c      	adds	r0, #92	@ 0x5c
 80017a2:	f000 f906 	bl	80019b2 <memset>
 80017a6:	4b0d      	ldr	r3, [pc, #52]	@ (80017dc <std+0x58>)
 80017a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80017aa:	4b0d      	ldr	r3, [pc, #52]	@ (80017e0 <std+0x5c>)
 80017ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80017ae:	4b0d      	ldr	r3, [pc, #52]	@ (80017e4 <std+0x60>)
 80017b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80017b2:	4b0d      	ldr	r3, [pc, #52]	@ (80017e8 <std+0x64>)
 80017b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80017b6:	4b0d      	ldr	r3, [pc, #52]	@ (80017ec <std+0x68>)
 80017b8:	6224      	str	r4, [r4, #32]
 80017ba:	429c      	cmp	r4, r3
 80017bc:	d006      	beq.n	80017cc <std+0x48>
 80017be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80017c2:	4294      	cmp	r4, r2
 80017c4:	d002      	beq.n	80017cc <std+0x48>
 80017c6:	33d0      	adds	r3, #208	@ 0xd0
 80017c8:	429c      	cmp	r4, r3
 80017ca:	d105      	bne.n	80017d8 <std+0x54>
 80017cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80017d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80017d4:	f000 b966 	b.w	8001aa4 <__retarget_lock_init_recursive>
 80017d8:	bd10      	pop	{r4, pc}
 80017da:	bf00      	nop
 80017dc:	0800192d 	.word	0x0800192d
 80017e0:	0800194f 	.word	0x0800194f
 80017e4:	08001987 	.word	0x08001987
 80017e8:	080019ab 	.word	0x080019ab
 80017ec:	2000190c 	.word	0x2000190c

080017f0 <stdio_exit_handler>:
 80017f0:	4a02      	ldr	r2, [pc, #8]	@ (80017fc <stdio_exit_handler+0xc>)
 80017f2:	4903      	ldr	r1, [pc, #12]	@ (8001800 <stdio_exit_handler+0x10>)
 80017f4:	4803      	ldr	r0, [pc, #12]	@ (8001804 <stdio_exit_handler+0x14>)
 80017f6:	f000 b869 	b.w	80018cc <_fwalk_sglue>
 80017fa:	bf00      	nop
 80017fc:	20001830 	.word	0x20001830
 8001800:	08002345 	.word	0x08002345
 8001804:	20001840 	.word	0x20001840

08001808 <cleanup_stdio>:
 8001808:	6841      	ldr	r1, [r0, #4]
 800180a:	4b0c      	ldr	r3, [pc, #48]	@ (800183c <cleanup_stdio+0x34>)
 800180c:	4299      	cmp	r1, r3
 800180e:	b510      	push	{r4, lr}
 8001810:	4604      	mov	r4, r0
 8001812:	d001      	beq.n	8001818 <cleanup_stdio+0x10>
 8001814:	f000 fd96 	bl	8002344 <_fflush_r>
 8001818:	68a1      	ldr	r1, [r4, #8]
 800181a:	4b09      	ldr	r3, [pc, #36]	@ (8001840 <cleanup_stdio+0x38>)
 800181c:	4299      	cmp	r1, r3
 800181e:	d002      	beq.n	8001826 <cleanup_stdio+0x1e>
 8001820:	4620      	mov	r0, r4
 8001822:	f000 fd8f 	bl	8002344 <_fflush_r>
 8001826:	68e1      	ldr	r1, [r4, #12]
 8001828:	4b06      	ldr	r3, [pc, #24]	@ (8001844 <cleanup_stdio+0x3c>)
 800182a:	4299      	cmp	r1, r3
 800182c:	d004      	beq.n	8001838 <cleanup_stdio+0x30>
 800182e:	4620      	mov	r0, r4
 8001830:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001834:	f000 bd86 	b.w	8002344 <_fflush_r>
 8001838:	bd10      	pop	{r4, pc}
 800183a:	bf00      	nop
 800183c:	2000190c 	.word	0x2000190c
 8001840:	20001974 	.word	0x20001974
 8001844:	200019dc 	.word	0x200019dc

08001848 <global_stdio_init.part.0>:
 8001848:	b510      	push	{r4, lr}
 800184a:	4b0b      	ldr	r3, [pc, #44]	@ (8001878 <global_stdio_init.part.0+0x30>)
 800184c:	4c0b      	ldr	r4, [pc, #44]	@ (800187c <global_stdio_init.part.0+0x34>)
 800184e:	4a0c      	ldr	r2, [pc, #48]	@ (8001880 <global_stdio_init.part.0+0x38>)
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	4620      	mov	r0, r4
 8001854:	2200      	movs	r2, #0
 8001856:	2104      	movs	r1, #4
 8001858:	f7ff ff94 	bl	8001784 <std>
 800185c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001860:	2201      	movs	r2, #1
 8001862:	2109      	movs	r1, #9
 8001864:	f7ff ff8e 	bl	8001784 <std>
 8001868:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800186c:	2202      	movs	r2, #2
 800186e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001872:	2112      	movs	r1, #18
 8001874:	f7ff bf86 	b.w	8001784 <std>
 8001878:	20001a44 	.word	0x20001a44
 800187c:	2000190c 	.word	0x2000190c
 8001880:	080017f1 	.word	0x080017f1

08001884 <__sfp_lock_acquire>:
 8001884:	4801      	ldr	r0, [pc, #4]	@ (800188c <__sfp_lock_acquire+0x8>)
 8001886:	f000 b90e 	b.w	8001aa6 <__retarget_lock_acquire_recursive>
 800188a:	bf00      	nop
 800188c:	20001a4d 	.word	0x20001a4d

08001890 <__sfp_lock_release>:
 8001890:	4801      	ldr	r0, [pc, #4]	@ (8001898 <__sfp_lock_release+0x8>)
 8001892:	f000 b909 	b.w	8001aa8 <__retarget_lock_release_recursive>
 8001896:	bf00      	nop
 8001898:	20001a4d 	.word	0x20001a4d

0800189c <__sinit>:
 800189c:	b510      	push	{r4, lr}
 800189e:	4604      	mov	r4, r0
 80018a0:	f7ff fff0 	bl	8001884 <__sfp_lock_acquire>
 80018a4:	6a23      	ldr	r3, [r4, #32]
 80018a6:	b11b      	cbz	r3, 80018b0 <__sinit+0x14>
 80018a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80018ac:	f7ff bff0 	b.w	8001890 <__sfp_lock_release>
 80018b0:	4b04      	ldr	r3, [pc, #16]	@ (80018c4 <__sinit+0x28>)
 80018b2:	6223      	str	r3, [r4, #32]
 80018b4:	4b04      	ldr	r3, [pc, #16]	@ (80018c8 <__sinit+0x2c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d1f5      	bne.n	80018a8 <__sinit+0xc>
 80018bc:	f7ff ffc4 	bl	8001848 <global_stdio_init.part.0>
 80018c0:	e7f2      	b.n	80018a8 <__sinit+0xc>
 80018c2:	bf00      	nop
 80018c4:	08001809 	.word	0x08001809
 80018c8:	20001a44 	.word	0x20001a44

080018cc <_fwalk_sglue>:
 80018cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80018d0:	4607      	mov	r7, r0
 80018d2:	4688      	mov	r8, r1
 80018d4:	4614      	mov	r4, r2
 80018d6:	2600      	movs	r6, #0
 80018d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80018dc:	f1b9 0901 	subs.w	r9, r9, #1
 80018e0:	d505      	bpl.n	80018ee <_fwalk_sglue+0x22>
 80018e2:	6824      	ldr	r4, [r4, #0]
 80018e4:	2c00      	cmp	r4, #0
 80018e6:	d1f7      	bne.n	80018d8 <_fwalk_sglue+0xc>
 80018e8:	4630      	mov	r0, r6
 80018ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80018ee:	89ab      	ldrh	r3, [r5, #12]
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d907      	bls.n	8001904 <_fwalk_sglue+0x38>
 80018f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80018f8:	3301      	adds	r3, #1
 80018fa:	d003      	beq.n	8001904 <_fwalk_sglue+0x38>
 80018fc:	4629      	mov	r1, r5
 80018fe:	4638      	mov	r0, r7
 8001900:	47c0      	blx	r8
 8001902:	4306      	orrs	r6, r0
 8001904:	3568      	adds	r5, #104	@ 0x68
 8001906:	e7e9      	b.n	80018dc <_fwalk_sglue+0x10>

08001908 <iprintf>:
 8001908:	b40f      	push	{r0, r1, r2, r3}
 800190a:	b507      	push	{r0, r1, r2, lr}
 800190c:	4906      	ldr	r1, [pc, #24]	@ (8001928 <iprintf+0x20>)
 800190e:	ab04      	add	r3, sp, #16
 8001910:	6808      	ldr	r0, [r1, #0]
 8001912:	f853 2b04 	ldr.w	r2, [r3], #4
 8001916:	6881      	ldr	r1, [r0, #8]
 8001918:	9301      	str	r3, [sp, #4]
 800191a:	f000 f9e9 	bl	8001cf0 <_vfiprintf_r>
 800191e:	b003      	add	sp, #12
 8001920:	f85d eb04 	ldr.w	lr, [sp], #4
 8001924:	b004      	add	sp, #16
 8001926:	4770      	bx	lr
 8001928:	2000183c 	.word	0x2000183c

0800192c <__sread>:
 800192c:	b510      	push	{r4, lr}
 800192e:	460c      	mov	r4, r1
 8001930:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001934:	f000 f868 	bl	8001a08 <_read_r>
 8001938:	2800      	cmp	r0, #0
 800193a:	bfab      	itete	ge
 800193c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800193e:	89a3      	ldrhlt	r3, [r4, #12]
 8001940:	181b      	addge	r3, r3, r0
 8001942:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8001946:	bfac      	ite	ge
 8001948:	6563      	strge	r3, [r4, #84]	@ 0x54
 800194a:	81a3      	strhlt	r3, [r4, #12]
 800194c:	bd10      	pop	{r4, pc}

0800194e <__swrite>:
 800194e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001952:	461f      	mov	r7, r3
 8001954:	898b      	ldrh	r3, [r1, #12]
 8001956:	05db      	lsls	r3, r3, #23
 8001958:	4605      	mov	r5, r0
 800195a:	460c      	mov	r4, r1
 800195c:	4616      	mov	r6, r2
 800195e:	d505      	bpl.n	800196c <__swrite+0x1e>
 8001960:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001964:	2302      	movs	r3, #2
 8001966:	2200      	movs	r2, #0
 8001968:	f000 f83c 	bl	80019e4 <_lseek_r>
 800196c:	89a3      	ldrh	r3, [r4, #12]
 800196e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001972:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001976:	81a3      	strh	r3, [r4, #12]
 8001978:	4632      	mov	r2, r6
 800197a:	463b      	mov	r3, r7
 800197c:	4628      	mov	r0, r5
 800197e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001982:	f000 b853 	b.w	8001a2c <_write_r>

08001986 <__sseek>:
 8001986:	b510      	push	{r4, lr}
 8001988:	460c      	mov	r4, r1
 800198a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800198e:	f000 f829 	bl	80019e4 <_lseek_r>
 8001992:	1c43      	adds	r3, r0, #1
 8001994:	89a3      	ldrh	r3, [r4, #12]
 8001996:	bf15      	itete	ne
 8001998:	6560      	strne	r0, [r4, #84]	@ 0x54
 800199a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800199e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80019a2:	81a3      	strheq	r3, [r4, #12]
 80019a4:	bf18      	it	ne
 80019a6:	81a3      	strhne	r3, [r4, #12]
 80019a8:	bd10      	pop	{r4, pc}

080019aa <__sclose>:
 80019aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019ae:	f000 b809 	b.w	80019c4 <_close_r>

080019b2 <memset>:
 80019b2:	4402      	add	r2, r0
 80019b4:	4603      	mov	r3, r0
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d100      	bne.n	80019bc <memset+0xa>
 80019ba:	4770      	bx	lr
 80019bc:	f803 1b01 	strb.w	r1, [r3], #1
 80019c0:	e7f9      	b.n	80019b6 <memset+0x4>
	...

080019c4 <_close_r>:
 80019c4:	b538      	push	{r3, r4, r5, lr}
 80019c6:	4d06      	ldr	r5, [pc, #24]	@ (80019e0 <_close_r+0x1c>)
 80019c8:	2300      	movs	r3, #0
 80019ca:	4604      	mov	r4, r0
 80019cc:	4608      	mov	r0, r1
 80019ce:	602b      	str	r3, [r5, #0]
 80019d0:	f7fe fec3 	bl	800075a <_close>
 80019d4:	1c43      	adds	r3, r0, #1
 80019d6:	d102      	bne.n	80019de <_close_r+0x1a>
 80019d8:	682b      	ldr	r3, [r5, #0]
 80019da:	b103      	cbz	r3, 80019de <_close_r+0x1a>
 80019dc:	6023      	str	r3, [r4, #0]
 80019de:	bd38      	pop	{r3, r4, r5, pc}
 80019e0:	20001a48 	.word	0x20001a48

080019e4 <_lseek_r>:
 80019e4:	b538      	push	{r3, r4, r5, lr}
 80019e6:	4d07      	ldr	r5, [pc, #28]	@ (8001a04 <_lseek_r+0x20>)
 80019e8:	4604      	mov	r4, r0
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	2200      	movs	r2, #0
 80019f0:	602a      	str	r2, [r5, #0]
 80019f2:	461a      	mov	r2, r3
 80019f4:	f7fe fed8 	bl	80007a8 <_lseek>
 80019f8:	1c43      	adds	r3, r0, #1
 80019fa:	d102      	bne.n	8001a02 <_lseek_r+0x1e>
 80019fc:	682b      	ldr	r3, [r5, #0]
 80019fe:	b103      	cbz	r3, 8001a02 <_lseek_r+0x1e>
 8001a00:	6023      	str	r3, [r4, #0]
 8001a02:	bd38      	pop	{r3, r4, r5, pc}
 8001a04:	20001a48 	.word	0x20001a48

08001a08 <_read_r>:
 8001a08:	b538      	push	{r3, r4, r5, lr}
 8001a0a:	4d07      	ldr	r5, [pc, #28]	@ (8001a28 <_read_r+0x20>)
 8001a0c:	4604      	mov	r4, r0
 8001a0e:	4608      	mov	r0, r1
 8001a10:	4611      	mov	r1, r2
 8001a12:	2200      	movs	r2, #0
 8001a14:	602a      	str	r2, [r5, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	f7fe fe66 	bl	80006e8 <_read>
 8001a1c:	1c43      	adds	r3, r0, #1
 8001a1e:	d102      	bne.n	8001a26 <_read_r+0x1e>
 8001a20:	682b      	ldr	r3, [r5, #0]
 8001a22:	b103      	cbz	r3, 8001a26 <_read_r+0x1e>
 8001a24:	6023      	str	r3, [r4, #0]
 8001a26:	bd38      	pop	{r3, r4, r5, pc}
 8001a28:	20001a48 	.word	0x20001a48

08001a2c <_write_r>:
 8001a2c:	b538      	push	{r3, r4, r5, lr}
 8001a2e:	4d07      	ldr	r5, [pc, #28]	@ (8001a4c <_write_r+0x20>)
 8001a30:	4604      	mov	r4, r0
 8001a32:	4608      	mov	r0, r1
 8001a34:	4611      	mov	r1, r2
 8001a36:	2200      	movs	r2, #0
 8001a38:	602a      	str	r2, [r5, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	f7fe fe71 	bl	8000722 <_write>
 8001a40:	1c43      	adds	r3, r0, #1
 8001a42:	d102      	bne.n	8001a4a <_write_r+0x1e>
 8001a44:	682b      	ldr	r3, [r5, #0]
 8001a46:	b103      	cbz	r3, 8001a4a <_write_r+0x1e>
 8001a48:	6023      	str	r3, [r4, #0]
 8001a4a:	bd38      	pop	{r3, r4, r5, pc}
 8001a4c:	20001a48 	.word	0x20001a48

08001a50 <__errno>:
 8001a50:	4b01      	ldr	r3, [pc, #4]	@ (8001a58 <__errno+0x8>)
 8001a52:	6818      	ldr	r0, [r3, #0]
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	2000183c 	.word	0x2000183c

08001a5c <__libc_init_array>:
 8001a5c:	b570      	push	{r4, r5, r6, lr}
 8001a5e:	4d0d      	ldr	r5, [pc, #52]	@ (8001a94 <__libc_init_array+0x38>)
 8001a60:	4c0d      	ldr	r4, [pc, #52]	@ (8001a98 <__libc_init_array+0x3c>)
 8001a62:	1b64      	subs	r4, r4, r5
 8001a64:	10a4      	asrs	r4, r4, #2
 8001a66:	2600      	movs	r6, #0
 8001a68:	42a6      	cmp	r6, r4
 8001a6a:	d109      	bne.n	8001a80 <__libc_init_array+0x24>
 8001a6c:	4d0b      	ldr	r5, [pc, #44]	@ (8001a9c <__libc_init_array+0x40>)
 8001a6e:	4c0c      	ldr	r4, [pc, #48]	@ (8001aa0 <__libc_init_array+0x44>)
 8001a70:	f000 fdb8 	bl	80025e4 <_init>
 8001a74:	1b64      	subs	r4, r4, r5
 8001a76:	10a4      	asrs	r4, r4, #2
 8001a78:	2600      	movs	r6, #0
 8001a7a:	42a6      	cmp	r6, r4
 8001a7c:	d105      	bne.n	8001a8a <__libc_init_array+0x2e>
 8001a7e:	bd70      	pop	{r4, r5, r6, pc}
 8001a80:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a84:	4798      	blx	r3
 8001a86:	3601      	adds	r6, #1
 8001a88:	e7ee      	b.n	8001a68 <__libc_init_array+0xc>
 8001a8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8001a8e:	4798      	blx	r3
 8001a90:	3601      	adds	r6, #1
 8001a92:	e7f2      	b.n	8001a7a <__libc_init_array+0x1e>
 8001a94:	08002644 	.word	0x08002644
 8001a98:	08002644 	.word	0x08002644
 8001a9c:	08002644 	.word	0x08002644
 8001aa0:	08002648 	.word	0x08002648

08001aa4 <__retarget_lock_init_recursive>:
 8001aa4:	4770      	bx	lr

08001aa6 <__retarget_lock_acquire_recursive>:
 8001aa6:	4770      	bx	lr

08001aa8 <__retarget_lock_release_recursive>:
 8001aa8:	4770      	bx	lr
	...

08001aac <_free_r>:
 8001aac:	b538      	push	{r3, r4, r5, lr}
 8001aae:	4605      	mov	r5, r0
 8001ab0:	2900      	cmp	r1, #0
 8001ab2:	d041      	beq.n	8001b38 <_free_r+0x8c>
 8001ab4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001ab8:	1f0c      	subs	r4, r1, #4
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	bfb8      	it	lt
 8001abe:	18e4      	addlt	r4, r4, r3
 8001ac0:	f000 f8e0 	bl	8001c84 <__malloc_lock>
 8001ac4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b3c <_free_r+0x90>)
 8001ac6:	6813      	ldr	r3, [r2, #0]
 8001ac8:	b933      	cbnz	r3, 8001ad8 <_free_r+0x2c>
 8001aca:	6063      	str	r3, [r4, #4]
 8001acc:	6014      	str	r4, [r2, #0]
 8001ace:	4628      	mov	r0, r5
 8001ad0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001ad4:	f000 b8dc 	b.w	8001c90 <__malloc_unlock>
 8001ad8:	42a3      	cmp	r3, r4
 8001ada:	d908      	bls.n	8001aee <_free_r+0x42>
 8001adc:	6820      	ldr	r0, [r4, #0]
 8001ade:	1821      	adds	r1, r4, r0
 8001ae0:	428b      	cmp	r3, r1
 8001ae2:	bf01      	itttt	eq
 8001ae4:	6819      	ldreq	r1, [r3, #0]
 8001ae6:	685b      	ldreq	r3, [r3, #4]
 8001ae8:	1809      	addeq	r1, r1, r0
 8001aea:	6021      	streq	r1, [r4, #0]
 8001aec:	e7ed      	b.n	8001aca <_free_r+0x1e>
 8001aee:	461a      	mov	r2, r3
 8001af0:	685b      	ldr	r3, [r3, #4]
 8001af2:	b10b      	cbz	r3, 8001af8 <_free_r+0x4c>
 8001af4:	42a3      	cmp	r3, r4
 8001af6:	d9fa      	bls.n	8001aee <_free_r+0x42>
 8001af8:	6811      	ldr	r1, [r2, #0]
 8001afa:	1850      	adds	r0, r2, r1
 8001afc:	42a0      	cmp	r0, r4
 8001afe:	d10b      	bne.n	8001b18 <_free_r+0x6c>
 8001b00:	6820      	ldr	r0, [r4, #0]
 8001b02:	4401      	add	r1, r0
 8001b04:	1850      	adds	r0, r2, r1
 8001b06:	4283      	cmp	r3, r0
 8001b08:	6011      	str	r1, [r2, #0]
 8001b0a:	d1e0      	bne.n	8001ace <_free_r+0x22>
 8001b0c:	6818      	ldr	r0, [r3, #0]
 8001b0e:	685b      	ldr	r3, [r3, #4]
 8001b10:	6053      	str	r3, [r2, #4]
 8001b12:	4408      	add	r0, r1
 8001b14:	6010      	str	r0, [r2, #0]
 8001b16:	e7da      	b.n	8001ace <_free_r+0x22>
 8001b18:	d902      	bls.n	8001b20 <_free_r+0x74>
 8001b1a:	230c      	movs	r3, #12
 8001b1c:	602b      	str	r3, [r5, #0]
 8001b1e:	e7d6      	b.n	8001ace <_free_r+0x22>
 8001b20:	6820      	ldr	r0, [r4, #0]
 8001b22:	1821      	adds	r1, r4, r0
 8001b24:	428b      	cmp	r3, r1
 8001b26:	bf04      	itt	eq
 8001b28:	6819      	ldreq	r1, [r3, #0]
 8001b2a:	685b      	ldreq	r3, [r3, #4]
 8001b2c:	6063      	str	r3, [r4, #4]
 8001b2e:	bf04      	itt	eq
 8001b30:	1809      	addeq	r1, r1, r0
 8001b32:	6021      	streq	r1, [r4, #0]
 8001b34:	6054      	str	r4, [r2, #4]
 8001b36:	e7ca      	b.n	8001ace <_free_r+0x22>
 8001b38:	bd38      	pop	{r3, r4, r5, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20001a54 	.word	0x20001a54

08001b40 <sbrk_aligned>:
 8001b40:	b570      	push	{r4, r5, r6, lr}
 8001b42:	4e0f      	ldr	r6, [pc, #60]	@ (8001b80 <sbrk_aligned+0x40>)
 8001b44:	460c      	mov	r4, r1
 8001b46:	6831      	ldr	r1, [r6, #0]
 8001b48:	4605      	mov	r5, r0
 8001b4a:	b911      	cbnz	r1, 8001b52 <sbrk_aligned+0x12>
 8001b4c:	f000 fcb6 	bl	80024bc <_sbrk_r>
 8001b50:	6030      	str	r0, [r6, #0]
 8001b52:	4621      	mov	r1, r4
 8001b54:	4628      	mov	r0, r5
 8001b56:	f000 fcb1 	bl	80024bc <_sbrk_r>
 8001b5a:	1c43      	adds	r3, r0, #1
 8001b5c:	d103      	bne.n	8001b66 <sbrk_aligned+0x26>
 8001b5e:	f04f 34ff 	mov.w	r4, #4294967295
 8001b62:	4620      	mov	r0, r4
 8001b64:	bd70      	pop	{r4, r5, r6, pc}
 8001b66:	1cc4      	adds	r4, r0, #3
 8001b68:	f024 0403 	bic.w	r4, r4, #3
 8001b6c:	42a0      	cmp	r0, r4
 8001b6e:	d0f8      	beq.n	8001b62 <sbrk_aligned+0x22>
 8001b70:	1a21      	subs	r1, r4, r0
 8001b72:	4628      	mov	r0, r5
 8001b74:	f000 fca2 	bl	80024bc <_sbrk_r>
 8001b78:	3001      	adds	r0, #1
 8001b7a:	d1f2      	bne.n	8001b62 <sbrk_aligned+0x22>
 8001b7c:	e7ef      	b.n	8001b5e <sbrk_aligned+0x1e>
 8001b7e:	bf00      	nop
 8001b80:	20001a50 	.word	0x20001a50

08001b84 <_malloc_r>:
 8001b84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001b88:	1ccd      	adds	r5, r1, #3
 8001b8a:	f025 0503 	bic.w	r5, r5, #3
 8001b8e:	3508      	adds	r5, #8
 8001b90:	2d0c      	cmp	r5, #12
 8001b92:	bf38      	it	cc
 8001b94:	250c      	movcc	r5, #12
 8001b96:	2d00      	cmp	r5, #0
 8001b98:	4606      	mov	r6, r0
 8001b9a:	db01      	blt.n	8001ba0 <_malloc_r+0x1c>
 8001b9c:	42a9      	cmp	r1, r5
 8001b9e:	d904      	bls.n	8001baa <_malloc_r+0x26>
 8001ba0:	230c      	movs	r3, #12
 8001ba2:	6033      	str	r3, [r6, #0]
 8001ba4:	2000      	movs	r0, #0
 8001ba6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001baa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8001c80 <_malloc_r+0xfc>
 8001bae:	f000 f869 	bl	8001c84 <__malloc_lock>
 8001bb2:	f8d8 3000 	ldr.w	r3, [r8]
 8001bb6:	461c      	mov	r4, r3
 8001bb8:	bb44      	cbnz	r4, 8001c0c <_malloc_r+0x88>
 8001bba:	4629      	mov	r1, r5
 8001bbc:	4630      	mov	r0, r6
 8001bbe:	f7ff ffbf 	bl	8001b40 <sbrk_aligned>
 8001bc2:	1c43      	adds	r3, r0, #1
 8001bc4:	4604      	mov	r4, r0
 8001bc6:	d158      	bne.n	8001c7a <_malloc_r+0xf6>
 8001bc8:	f8d8 4000 	ldr.w	r4, [r8]
 8001bcc:	4627      	mov	r7, r4
 8001bce:	2f00      	cmp	r7, #0
 8001bd0:	d143      	bne.n	8001c5a <_malloc_r+0xd6>
 8001bd2:	2c00      	cmp	r4, #0
 8001bd4:	d04b      	beq.n	8001c6e <_malloc_r+0xea>
 8001bd6:	6823      	ldr	r3, [r4, #0]
 8001bd8:	4639      	mov	r1, r7
 8001bda:	4630      	mov	r0, r6
 8001bdc:	eb04 0903 	add.w	r9, r4, r3
 8001be0:	f000 fc6c 	bl	80024bc <_sbrk_r>
 8001be4:	4581      	cmp	r9, r0
 8001be6:	d142      	bne.n	8001c6e <_malloc_r+0xea>
 8001be8:	6821      	ldr	r1, [r4, #0]
 8001bea:	1a6d      	subs	r5, r5, r1
 8001bec:	4629      	mov	r1, r5
 8001bee:	4630      	mov	r0, r6
 8001bf0:	f7ff ffa6 	bl	8001b40 <sbrk_aligned>
 8001bf4:	3001      	adds	r0, #1
 8001bf6:	d03a      	beq.n	8001c6e <_malloc_r+0xea>
 8001bf8:	6823      	ldr	r3, [r4, #0]
 8001bfa:	442b      	add	r3, r5
 8001bfc:	6023      	str	r3, [r4, #0]
 8001bfe:	f8d8 3000 	ldr.w	r3, [r8]
 8001c02:	685a      	ldr	r2, [r3, #4]
 8001c04:	bb62      	cbnz	r2, 8001c60 <_malloc_r+0xdc>
 8001c06:	f8c8 7000 	str.w	r7, [r8]
 8001c0a:	e00f      	b.n	8001c2c <_malloc_r+0xa8>
 8001c0c:	6822      	ldr	r2, [r4, #0]
 8001c0e:	1b52      	subs	r2, r2, r5
 8001c10:	d420      	bmi.n	8001c54 <_malloc_r+0xd0>
 8001c12:	2a0b      	cmp	r2, #11
 8001c14:	d917      	bls.n	8001c46 <_malloc_r+0xc2>
 8001c16:	1961      	adds	r1, r4, r5
 8001c18:	42a3      	cmp	r3, r4
 8001c1a:	6025      	str	r5, [r4, #0]
 8001c1c:	bf18      	it	ne
 8001c1e:	6059      	strne	r1, [r3, #4]
 8001c20:	6863      	ldr	r3, [r4, #4]
 8001c22:	bf08      	it	eq
 8001c24:	f8c8 1000 	streq.w	r1, [r8]
 8001c28:	5162      	str	r2, [r4, r5]
 8001c2a:	604b      	str	r3, [r1, #4]
 8001c2c:	4630      	mov	r0, r6
 8001c2e:	f000 f82f 	bl	8001c90 <__malloc_unlock>
 8001c32:	f104 000b 	add.w	r0, r4, #11
 8001c36:	1d23      	adds	r3, r4, #4
 8001c38:	f020 0007 	bic.w	r0, r0, #7
 8001c3c:	1ac2      	subs	r2, r0, r3
 8001c3e:	bf1c      	itt	ne
 8001c40:	1a1b      	subne	r3, r3, r0
 8001c42:	50a3      	strne	r3, [r4, r2]
 8001c44:	e7af      	b.n	8001ba6 <_malloc_r+0x22>
 8001c46:	6862      	ldr	r2, [r4, #4]
 8001c48:	42a3      	cmp	r3, r4
 8001c4a:	bf0c      	ite	eq
 8001c4c:	f8c8 2000 	streq.w	r2, [r8]
 8001c50:	605a      	strne	r2, [r3, #4]
 8001c52:	e7eb      	b.n	8001c2c <_malloc_r+0xa8>
 8001c54:	4623      	mov	r3, r4
 8001c56:	6864      	ldr	r4, [r4, #4]
 8001c58:	e7ae      	b.n	8001bb8 <_malloc_r+0x34>
 8001c5a:	463c      	mov	r4, r7
 8001c5c:	687f      	ldr	r7, [r7, #4]
 8001c5e:	e7b6      	b.n	8001bce <_malloc_r+0x4a>
 8001c60:	461a      	mov	r2, r3
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	42a3      	cmp	r3, r4
 8001c66:	d1fb      	bne.n	8001c60 <_malloc_r+0xdc>
 8001c68:	2300      	movs	r3, #0
 8001c6a:	6053      	str	r3, [r2, #4]
 8001c6c:	e7de      	b.n	8001c2c <_malloc_r+0xa8>
 8001c6e:	230c      	movs	r3, #12
 8001c70:	6033      	str	r3, [r6, #0]
 8001c72:	4630      	mov	r0, r6
 8001c74:	f000 f80c 	bl	8001c90 <__malloc_unlock>
 8001c78:	e794      	b.n	8001ba4 <_malloc_r+0x20>
 8001c7a:	6005      	str	r5, [r0, #0]
 8001c7c:	e7d6      	b.n	8001c2c <_malloc_r+0xa8>
 8001c7e:	bf00      	nop
 8001c80:	20001a54 	.word	0x20001a54

08001c84 <__malloc_lock>:
 8001c84:	4801      	ldr	r0, [pc, #4]	@ (8001c8c <__malloc_lock+0x8>)
 8001c86:	f7ff bf0e 	b.w	8001aa6 <__retarget_lock_acquire_recursive>
 8001c8a:	bf00      	nop
 8001c8c:	20001a4c 	.word	0x20001a4c

08001c90 <__malloc_unlock>:
 8001c90:	4801      	ldr	r0, [pc, #4]	@ (8001c98 <__malloc_unlock+0x8>)
 8001c92:	f7ff bf09 	b.w	8001aa8 <__retarget_lock_release_recursive>
 8001c96:	bf00      	nop
 8001c98:	20001a4c 	.word	0x20001a4c

08001c9c <__sfputc_r>:
 8001c9c:	6893      	ldr	r3, [r2, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	b410      	push	{r4}
 8001ca4:	6093      	str	r3, [r2, #8]
 8001ca6:	da08      	bge.n	8001cba <__sfputc_r+0x1e>
 8001ca8:	6994      	ldr	r4, [r2, #24]
 8001caa:	42a3      	cmp	r3, r4
 8001cac:	db01      	blt.n	8001cb2 <__sfputc_r+0x16>
 8001cae:	290a      	cmp	r1, #10
 8001cb0:	d103      	bne.n	8001cba <__sfputc_r+0x1e>
 8001cb2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cb6:	f000 bb6d 	b.w	8002394 <__swbuf_r>
 8001cba:	6813      	ldr	r3, [r2, #0]
 8001cbc:	1c58      	adds	r0, r3, #1
 8001cbe:	6010      	str	r0, [r2, #0]
 8001cc0:	7019      	strb	r1, [r3, #0]
 8001cc2:	4608      	mov	r0, r1
 8001cc4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001cc8:	4770      	bx	lr

08001cca <__sfputs_r>:
 8001cca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ccc:	4606      	mov	r6, r0
 8001cce:	460f      	mov	r7, r1
 8001cd0:	4614      	mov	r4, r2
 8001cd2:	18d5      	adds	r5, r2, r3
 8001cd4:	42ac      	cmp	r4, r5
 8001cd6:	d101      	bne.n	8001cdc <__sfputs_r+0x12>
 8001cd8:	2000      	movs	r0, #0
 8001cda:	e007      	b.n	8001cec <__sfputs_r+0x22>
 8001cdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001ce0:	463a      	mov	r2, r7
 8001ce2:	4630      	mov	r0, r6
 8001ce4:	f7ff ffda 	bl	8001c9c <__sfputc_r>
 8001ce8:	1c43      	adds	r3, r0, #1
 8001cea:	d1f3      	bne.n	8001cd4 <__sfputs_r+0xa>
 8001cec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001cf0 <_vfiprintf_r>:
 8001cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001cf4:	460d      	mov	r5, r1
 8001cf6:	b09d      	sub	sp, #116	@ 0x74
 8001cf8:	4614      	mov	r4, r2
 8001cfa:	4698      	mov	r8, r3
 8001cfc:	4606      	mov	r6, r0
 8001cfe:	b118      	cbz	r0, 8001d08 <_vfiprintf_r+0x18>
 8001d00:	6a03      	ldr	r3, [r0, #32]
 8001d02:	b90b      	cbnz	r3, 8001d08 <_vfiprintf_r+0x18>
 8001d04:	f7ff fdca 	bl	800189c <__sinit>
 8001d08:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d0a:	07d9      	lsls	r1, r3, #31
 8001d0c:	d405      	bmi.n	8001d1a <_vfiprintf_r+0x2a>
 8001d0e:	89ab      	ldrh	r3, [r5, #12]
 8001d10:	059a      	lsls	r2, r3, #22
 8001d12:	d402      	bmi.n	8001d1a <_vfiprintf_r+0x2a>
 8001d14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d16:	f7ff fec6 	bl	8001aa6 <__retarget_lock_acquire_recursive>
 8001d1a:	89ab      	ldrh	r3, [r5, #12]
 8001d1c:	071b      	lsls	r3, r3, #28
 8001d1e:	d501      	bpl.n	8001d24 <_vfiprintf_r+0x34>
 8001d20:	692b      	ldr	r3, [r5, #16]
 8001d22:	b99b      	cbnz	r3, 8001d4c <_vfiprintf_r+0x5c>
 8001d24:	4629      	mov	r1, r5
 8001d26:	4630      	mov	r0, r6
 8001d28:	f000 fb72 	bl	8002410 <__swsetup_r>
 8001d2c:	b170      	cbz	r0, 8001d4c <_vfiprintf_r+0x5c>
 8001d2e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001d30:	07dc      	lsls	r4, r3, #31
 8001d32:	d504      	bpl.n	8001d3e <_vfiprintf_r+0x4e>
 8001d34:	f04f 30ff 	mov.w	r0, #4294967295
 8001d38:	b01d      	add	sp, #116	@ 0x74
 8001d3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d3e:	89ab      	ldrh	r3, [r5, #12]
 8001d40:	0598      	lsls	r0, r3, #22
 8001d42:	d4f7      	bmi.n	8001d34 <_vfiprintf_r+0x44>
 8001d44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001d46:	f7ff feaf 	bl	8001aa8 <__retarget_lock_release_recursive>
 8001d4a:	e7f3      	b.n	8001d34 <_vfiprintf_r+0x44>
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001d50:	2320      	movs	r3, #32
 8001d52:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8001d56:	f8cd 800c 	str.w	r8, [sp, #12]
 8001d5a:	2330      	movs	r3, #48	@ 0x30
 8001d5c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8001f0c <_vfiprintf_r+0x21c>
 8001d60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8001d64:	f04f 0901 	mov.w	r9, #1
 8001d68:	4623      	mov	r3, r4
 8001d6a:	469a      	mov	sl, r3
 8001d6c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001d70:	b10a      	cbz	r2, 8001d76 <_vfiprintf_r+0x86>
 8001d72:	2a25      	cmp	r2, #37	@ 0x25
 8001d74:	d1f9      	bne.n	8001d6a <_vfiprintf_r+0x7a>
 8001d76:	ebba 0b04 	subs.w	fp, sl, r4
 8001d7a:	d00b      	beq.n	8001d94 <_vfiprintf_r+0xa4>
 8001d7c:	465b      	mov	r3, fp
 8001d7e:	4622      	mov	r2, r4
 8001d80:	4629      	mov	r1, r5
 8001d82:	4630      	mov	r0, r6
 8001d84:	f7ff ffa1 	bl	8001cca <__sfputs_r>
 8001d88:	3001      	adds	r0, #1
 8001d8a:	f000 80a7 	beq.w	8001edc <_vfiprintf_r+0x1ec>
 8001d8e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8001d90:	445a      	add	r2, fp
 8001d92:	9209      	str	r2, [sp, #36]	@ 0x24
 8001d94:	f89a 3000 	ldrb.w	r3, [sl]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 809f 	beq.w	8001edc <_vfiprintf_r+0x1ec>
 8001d9e:	2300      	movs	r3, #0
 8001da0:	f04f 32ff 	mov.w	r2, #4294967295
 8001da4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001da8:	f10a 0a01 	add.w	sl, sl, #1
 8001dac:	9304      	str	r3, [sp, #16]
 8001dae:	9307      	str	r3, [sp, #28]
 8001db0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8001db4:	931a      	str	r3, [sp, #104]	@ 0x68
 8001db6:	4654      	mov	r4, sl
 8001db8:	2205      	movs	r2, #5
 8001dba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001dbe:	4853      	ldr	r0, [pc, #332]	@ (8001f0c <_vfiprintf_r+0x21c>)
 8001dc0:	f7fe fa2e 	bl	8000220 <memchr>
 8001dc4:	9a04      	ldr	r2, [sp, #16]
 8001dc6:	b9d8      	cbnz	r0, 8001e00 <_vfiprintf_r+0x110>
 8001dc8:	06d1      	lsls	r1, r2, #27
 8001dca:	bf44      	itt	mi
 8001dcc:	2320      	movmi	r3, #32
 8001dce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001dd2:	0713      	lsls	r3, r2, #28
 8001dd4:	bf44      	itt	mi
 8001dd6:	232b      	movmi	r3, #43	@ 0x2b
 8001dd8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8001ddc:	f89a 3000 	ldrb.w	r3, [sl]
 8001de0:	2b2a      	cmp	r3, #42	@ 0x2a
 8001de2:	d015      	beq.n	8001e10 <_vfiprintf_r+0x120>
 8001de4:	9a07      	ldr	r2, [sp, #28]
 8001de6:	4654      	mov	r4, sl
 8001de8:	2000      	movs	r0, #0
 8001dea:	f04f 0c0a 	mov.w	ip, #10
 8001dee:	4621      	mov	r1, r4
 8001df0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001df4:	3b30      	subs	r3, #48	@ 0x30
 8001df6:	2b09      	cmp	r3, #9
 8001df8:	d94b      	bls.n	8001e92 <_vfiprintf_r+0x1a2>
 8001dfa:	b1b0      	cbz	r0, 8001e2a <_vfiprintf_r+0x13a>
 8001dfc:	9207      	str	r2, [sp, #28]
 8001dfe:	e014      	b.n	8001e2a <_vfiprintf_r+0x13a>
 8001e00:	eba0 0308 	sub.w	r3, r0, r8
 8001e04:	fa09 f303 	lsl.w	r3, r9, r3
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	9304      	str	r3, [sp, #16]
 8001e0c:	46a2      	mov	sl, r4
 8001e0e:	e7d2      	b.n	8001db6 <_vfiprintf_r+0xc6>
 8001e10:	9b03      	ldr	r3, [sp, #12]
 8001e12:	1d19      	adds	r1, r3, #4
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	9103      	str	r1, [sp, #12]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	bfbb      	ittet	lt
 8001e1c:	425b      	neglt	r3, r3
 8001e1e:	f042 0202 	orrlt.w	r2, r2, #2
 8001e22:	9307      	strge	r3, [sp, #28]
 8001e24:	9307      	strlt	r3, [sp, #28]
 8001e26:	bfb8      	it	lt
 8001e28:	9204      	strlt	r2, [sp, #16]
 8001e2a:	7823      	ldrb	r3, [r4, #0]
 8001e2c:	2b2e      	cmp	r3, #46	@ 0x2e
 8001e2e:	d10a      	bne.n	8001e46 <_vfiprintf_r+0x156>
 8001e30:	7863      	ldrb	r3, [r4, #1]
 8001e32:	2b2a      	cmp	r3, #42	@ 0x2a
 8001e34:	d132      	bne.n	8001e9c <_vfiprintf_r+0x1ac>
 8001e36:	9b03      	ldr	r3, [sp, #12]
 8001e38:	1d1a      	adds	r2, r3, #4
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	9203      	str	r2, [sp, #12]
 8001e3e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8001e42:	3402      	adds	r4, #2
 8001e44:	9305      	str	r3, [sp, #20]
 8001e46:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8001f1c <_vfiprintf_r+0x22c>
 8001e4a:	7821      	ldrb	r1, [r4, #0]
 8001e4c:	2203      	movs	r2, #3
 8001e4e:	4650      	mov	r0, sl
 8001e50:	f7fe f9e6 	bl	8000220 <memchr>
 8001e54:	b138      	cbz	r0, 8001e66 <_vfiprintf_r+0x176>
 8001e56:	9b04      	ldr	r3, [sp, #16]
 8001e58:	eba0 000a 	sub.w	r0, r0, sl
 8001e5c:	2240      	movs	r2, #64	@ 0x40
 8001e5e:	4082      	lsls	r2, r0
 8001e60:	4313      	orrs	r3, r2
 8001e62:	3401      	adds	r4, #1
 8001e64:	9304      	str	r3, [sp, #16]
 8001e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001e6a:	4829      	ldr	r0, [pc, #164]	@ (8001f10 <_vfiprintf_r+0x220>)
 8001e6c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8001e70:	2206      	movs	r2, #6
 8001e72:	f7fe f9d5 	bl	8000220 <memchr>
 8001e76:	2800      	cmp	r0, #0
 8001e78:	d03f      	beq.n	8001efa <_vfiprintf_r+0x20a>
 8001e7a:	4b26      	ldr	r3, [pc, #152]	@ (8001f14 <_vfiprintf_r+0x224>)
 8001e7c:	bb1b      	cbnz	r3, 8001ec6 <_vfiprintf_r+0x1d6>
 8001e7e:	9b03      	ldr	r3, [sp, #12]
 8001e80:	3307      	adds	r3, #7
 8001e82:	f023 0307 	bic.w	r3, r3, #7
 8001e86:	3308      	adds	r3, #8
 8001e88:	9303      	str	r3, [sp, #12]
 8001e8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8001e8c:	443b      	add	r3, r7
 8001e8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8001e90:	e76a      	b.n	8001d68 <_vfiprintf_r+0x78>
 8001e92:	fb0c 3202 	mla	r2, ip, r2, r3
 8001e96:	460c      	mov	r4, r1
 8001e98:	2001      	movs	r0, #1
 8001e9a:	e7a8      	b.n	8001dee <_vfiprintf_r+0xfe>
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	3401      	adds	r4, #1
 8001ea0:	9305      	str	r3, [sp, #20]
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	f04f 0c0a 	mov.w	ip, #10
 8001ea8:	4620      	mov	r0, r4
 8001eaa:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001eae:	3a30      	subs	r2, #48	@ 0x30
 8001eb0:	2a09      	cmp	r2, #9
 8001eb2:	d903      	bls.n	8001ebc <_vfiprintf_r+0x1cc>
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d0c6      	beq.n	8001e46 <_vfiprintf_r+0x156>
 8001eb8:	9105      	str	r1, [sp, #20]
 8001eba:	e7c4      	b.n	8001e46 <_vfiprintf_r+0x156>
 8001ebc:	fb0c 2101 	mla	r1, ip, r1, r2
 8001ec0:	4604      	mov	r4, r0
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e7f0      	b.n	8001ea8 <_vfiprintf_r+0x1b8>
 8001ec6:	ab03      	add	r3, sp, #12
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	462a      	mov	r2, r5
 8001ecc:	4b12      	ldr	r3, [pc, #72]	@ (8001f18 <_vfiprintf_r+0x228>)
 8001ece:	a904      	add	r1, sp, #16
 8001ed0:	4630      	mov	r0, r6
 8001ed2:	f3af 8000 	nop.w
 8001ed6:	4607      	mov	r7, r0
 8001ed8:	1c78      	adds	r0, r7, #1
 8001eda:	d1d6      	bne.n	8001e8a <_vfiprintf_r+0x19a>
 8001edc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8001ede:	07d9      	lsls	r1, r3, #31
 8001ee0:	d405      	bmi.n	8001eee <_vfiprintf_r+0x1fe>
 8001ee2:	89ab      	ldrh	r3, [r5, #12]
 8001ee4:	059a      	lsls	r2, r3, #22
 8001ee6:	d402      	bmi.n	8001eee <_vfiprintf_r+0x1fe>
 8001ee8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8001eea:	f7ff fddd 	bl	8001aa8 <__retarget_lock_release_recursive>
 8001eee:	89ab      	ldrh	r3, [r5, #12]
 8001ef0:	065b      	lsls	r3, r3, #25
 8001ef2:	f53f af1f 	bmi.w	8001d34 <_vfiprintf_r+0x44>
 8001ef6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8001ef8:	e71e      	b.n	8001d38 <_vfiprintf_r+0x48>
 8001efa:	ab03      	add	r3, sp, #12
 8001efc:	9300      	str	r3, [sp, #0]
 8001efe:	462a      	mov	r2, r5
 8001f00:	4b05      	ldr	r3, [pc, #20]	@ (8001f18 <_vfiprintf_r+0x228>)
 8001f02:	a904      	add	r1, sp, #16
 8001f04:	4630      	mov	r0, r6
 8001f06:	f000 f879 	bl	8001ffc <_printf_i>
 8001f0a:	e7e4      	b.n	8001ed6 <_vfiprintf_r+0x1e6>
 8001f0c:	08002608 	.word	0x08002608
 8001f10:	08002612 	.word	0x08002612
 8001f14:	00000000 	.word	0x00000000
 8001f18:	08001ccb 	.word	0x08001ccb
 8001f1c:	0800260e 	.word	0x0800260e

08001f20 <_printf_common>:
 8001f20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f24:	4616      	mov	r6, r2
 8001f26:	4698      	mov	r8, r3
 8001f28:	688a      	ldr	r2, [r1, #8]
 8001f2a:	690b      	ldr	r3, [r1, #16]
 8001f2c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8001f30:	4293      	cmp	r3, r2
 8001f32:	bfb8      	it	lt
 8001f34:	4613      	movlt	r3, r2
 8001f36:	6033      	str	r3, [r6, #0]
 8001f38:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8001f3c:	4607      	mov	r7, r0
 8001f3e:	460c      	mov	r4, r1
 8001f40:	b10a      	cbz	r2, 8001f46 <_printf_common+0x26>
 8001f42:	3301      	adds	r3, #1
 8001f44:	6033      	str	r3, [r6, #0]
 8001f46:	6823      	ldr	r3, [r4, #0]
 8001f48:	0699      	lsls	r1, r3, #26
 8001f4a:	bf42      	ittt	mi
 8001f4c:	6833      	ldrmi	r3, [r6, #0]
 8001f4e:	3302      	addmi	r3, #2
 8001f50:	6033      	strmi	r3, [r6, #0]
 8001f52:	6825      	ldr	r5, [r4, #0]
 8001f54:	f015 0506 	ands.w	r5, r5, #6
 8001f58:	d106      	bne.n	8001f68 <_printf_common+0x48>
 8001f5a:	f104 0a19 	add.w	sl, r4, #25
 8001f5e:	68e3      	ldr	r3, [r4, #12]
 8001f60:	6832      	ldr	r2, [r6, #0]
 8001f62:	1a9b      	subs	r3, r3, r2
 8001f64:	42ab      	cmp	r3, r5
 8001f66:	dc26      	bgt.n	8001fb6 <_printf_common+0x96>
 8001f68:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8001f6c:	6822      	ldr	r2, [r4, #0]
 8001f6e:	3b00      	subs	r3, #0
 8001f70:	bf18      	it	ne
 8001f72:	2301      	movne	r3, #1
 8001f74:	0692      	lsls	r2, r2, #26
 8001f76:	d42b      	bmi.n	8001fd0 <_printf_common+0xb0>
 8001f78:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8001f7c:	4641      	mov	r1, r8
 8001f7e:	4638      	mov	r0, r7
 8001f80:	47c8      	blx	r9
 8001f82:	3001      	adds	r0, #1
 8001f84:	d01e      	beq.n	8001fc4 <_printf_common+0xa4>
 8001f86:	6823      	ldr	r3, [r4, #0]
 8001f88:	6922      	ldr	r2, [r4, #16]
 8001f8a:	f003 0306 	and.w	r3, r3, #6
 8001f8e:	2b04      	cmp	r3, #4
 8001f90:	bf02      	ittt	eq
 8001f92:	68e5      	ldreq	r5, [r4, #12]
 8001f94:	6833      	ldreq	r3, [r6, #0]
 8001f96:	1aed      	subeq	r5, r5, r3
 8001f98:	68a3      	ldr	r3, [r4, #8]
 8001f9a:	bf0c      	ite	eq
 8001f9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001fa0:	2500      	movne	r5, #0
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	bfc4      	itt	gt
 8001fa6:	1a9b      	subgt	r3, r3, r2
 8001fa8:	18ed      	addgt	r5, r5, r3
 8001faa:	2600      	movs	r6, #0
 8001fac:	341a      	adds	r4, #26
 8001fae:	42b5      	cmp	r5, r6
 8001fb0:	d11a      	bne.n	8001fe8 <_printf_common+0xc8>
 8001fb2:	2000      	movs	r0, #0
 8001fb4:	e008      	b.n	8001fc8 <_printf_common+0xa8>
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	4652      	mov	r2, sl
 8001fba:	4641      	mov	r1, r8
 8001fbc:	4638      	mov	r0, r7
 8001fbe:	47c8      	blx	r9
 8001fc0:	3001      	adds	r0, #1
 8001fc2:	d103      	bne.n	8001fcc <_printf_common+0xac>
 8001fc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fcc:	3501      	adds	r5, #1
 8001fce:	e7c6      	b.n	8001f5e <_printf_common+0x3e>
 8001fd0:	18e1      	adds	r1, r4, r3
 8001fd2:	1c5a      	adds	r2, r3, #1
 8001fd4:	2030      	movs	r0, #48	@ 0x30
 8001fd6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8001fda:	4422      	add	r2, r4
 8001fdc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8001fe0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8001fe4:	3302      	adds	r3, #2
 8001fe6:	e7c7      	b.n	8001f78 <_printf_common+0x58>
 8001fe8:	2301      	movs	r3, #1
 8001fea:	4622      	mov	r2, r4
 8001fec:	4641      	mov	r1, r8
 8001fee:	4638      	mov	r0, r7
 8001ff0:	47c8      	blx	r9
 8001ff2:	3001      	adds	r0, #1
 8001ff4:	d0e6      	beq.n	8001fc4 <_printf_common+0xa4>
 8001ff6:	3601      	adds	r6, #1
 8001ff8:	e7d9      	b.n	8001fae <_printf_common+0x8e>
	...

08001ffc <_printf_i>:
 8001ffc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002000:	7e0f      	ldrb	r7, [r1, #24]
 8002002:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002004:	2f78      	cmp	r7, #120	@ 0x78
 8002006:	4691      	mov	r9, r2
 8002008:	4680      	mov	r8, r0
 800200a:	460c      	mov	r4, r1
 800200c:	469a      	mov	sl, r3
 800200e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002012:	d807      	bhi.n	8002024 <_printf_i+0x28>
 8002014:	2f62      	cmp	r7, #98	@ 0x62
 8002016:	d80a      	bhi.n	800202e <_printf_i+0x32>
 8002018:	2f00      	cmp	r7, #0
 800201a:	f000 80d2 	beq.w	80021c2 <_printf_i+0x1c6>
 800201e:	2f58      	cmp	r7, #88	@ 0x58
 8002020:	f000 80b9 	beq.w	8002196 <_printf_i+0x19a>
 8002024:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002028:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800202c:	e03a      	b.n	80020a4 <_printf_i+0xa8>
 800202e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002032:	2b15      	cmp	r3, #21
 8002034:	d8f6      	bhi.n	8002024 <_printf_i+0x28>
 8002036:	a101      	add	r1, pc, #4	@ (adr r1, 800203c <_printf_i+0x40>)
 8002038:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800203c:	08002095 	.word	0x08002095
 8002040:	080020a9 	.word	0x080020a9
 8002044:	08002025 	.word	0x08002025
 8002048:	08002025 	.word	0x08002025
 800204c:	08002025 	.word	0x08002025
 8002050:	08002025 	.word	0x08002025
 8002054:	080020a9 	.word	0x080020a9
 8002058:	08002025 	.word	0x08002025
 800205c:	08002025 	.word	0x08002025
 8002060:	08002025 	.word	0x08002025
 8002064:	08002025 	.word	0x08002025
 8002068:	080021a9 	.word	0x080021a9
 800206c:	080020d3 	.word	0x080020d3
 8002070:	08002163 	.word	0x08002163
 8002074:	08002025 	.word	0x08002025
 8002078:	08002025 	.word	0x08002025
 800207c:	080021cb 	.word	0x080021cb
 8002080:	08002025 	.word	0x08002025
 8002084:	080020d3 	.word	0x080020d3
 8002088:	08002025 	.word	0x08002025
 800208c:	08002025 	.word	0x08002025
 8002090:	0800216b 	.word	0x0800216b
 8002094:	6833      	ldr	r3, [r6, #0]
 8002096:	1d1a      	adds	r2, r3, #4
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6032      	str	r2, [r6, #0]
 800209c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80020a0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80020a4:	2301      	movs	r3, #1
 80020a6:	e09d      	b.n	80021e4 <_printf_i+0x1e8>
 80020a8:	6833      	ldr	r3, [r6, #0]
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	1d19      	adds	r1, r3, #4
 80020ae:	6031      	str	r1, [r6, #0]
 80020b0:	0606      	lsls	r6, r0, #24
 80020b2:	d501      	bpl.n	80020b8 <_printf_i+0xbc>
 80020b4:	681d      	ldr	r5, [r3, #0]
 80020b6:	e003      	b.n	80020c0 <_printf_i+0xc4>
 80020b8:	0645      	lsls	r5, r0, #25
 80020ba:	d5fb      	bpl.n	80020b4 <_printf_i+0xb8>
 80020bc:	f9b3 5000 	ldrsh.w	r5, [r3]
 80020c0:	2d00      	cmp	r5, #0
 80020c2:	da03      	bge.n	80020cc <_printf_i+0xd0>
 80020c4:	232d      	movs	r3, #45	@ 0x2d
 80020c6:	426d      	negs	r5, r5
 80020c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80020cc:	4859      	ldr	r0, [pc, #356]	@ (8002234 <_printf_i+0x238>)
 80020ce:	230a      	movs	r3, #10
 80020d0:	e011      	b.n	80020f6 <_printf_i+0xfa>
 80020d2:	6821      	ldr	r1, [r4, #0]
 80020d4:	6833      	ldr	r3, [r6, #0]
 80020d6:	0608      	lsls	r0, r1, #24
 80020d8:	f853 5b04 	ldr.w	r5, [r3], #4
 80020dc:	d402      	bmi.n	80020e4 <_printf_i+0xe8>
 80020de:	0649      	lsls	r1, r1, #25
 80020e0:	bf48      	it	mi
 80020e2:	b2ad      	uxthmi	r5, r5
 80020e4:	2f6f      	cmp	r7, #111	@ 0x6f
 80020e6:	4853      	ldr	r0, [pc, #332]	@ (8002234 <_printf_i+0x238>)
 80020e8:	6033      	str	r3, [r6, #0]
 80020ea:	bf14      	ite	ne
 80020ec:	230a      	movne	r3, #10
 80020ee:	2308      	moveq	r3, #8
 80020f0:	2100      	movs	r1, #0
 80020f2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80020f6:	6866      	ldr	r6, [r4, #4]
 80020f8:	60a6      	str	r6, [r4, #8]
 80020fa:	2e00      	cmp	r6, #0
 80020fc:	bfa2      	ittt	ge
 80020fe:	6821      	ldrge	r1, [r4, #0]
 8002100:	f021 0104 	bicge.w	r1, r1, #4
 8002104:	6021      	strge	r1, [r4, #0]
 8002106:	b90d      	cbnz	r5, 800210c <_printf_i+0x110>
 8002108:	2e00      	cmp	r6, #0
 800210a:	d04b      	beq.n	80021a4 <_printf_i+0x1a8>
 800210c:	4616      	mov	r6, r2
 800210e:	fbb5 f1f3 	udiv	r1, r5, r3
 8002112:	fb03 5711 	mls	r7, r3, r1, r5
 8002116:	5dc7      	ldrb	r7, [r0, r7]
 8002118:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800211c:	462f      	mov	r7, r5
 800211e:	42bb      	cmp	r3, r7
 8002120:	460d      	mov	r5, r1
 8002122:	d9f4      	bls.n	800210e <_printf_i+0x112>
 8002124:	2b08      	cmp	r3, #8
 8002126:	d10b      	bne.n	8002140 <_printf_i+0x144>
 8002128:	6823      	ldr	r3, [r4, #0]
 800212a:	07df      	lsls	r7, r3, #31
 800212c:	d508      	bpl.n	8002140 <_printf_i+0x144>
 800212e:	6923      	ldr	r3, [r4, #16]
 8002130:	6861      	ldr	r1, [r4, #4]
 8002132:	4299      	cmp	r1, r3
 8002134:	bfde      	ittt	le
 8002136:	2330      	movle	r3, #48	@ 0x30
 8002138:	f806 3c01 	strble.w	r3, [r6, #-1]
 800213c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002140:	1b92      	subs	r2, r2, r6
 8002142:	6122      	str	r2, [r4, #16]
 8002144:	f8cd a000 	str.w	sl, [sp]
 8002148:	464b      	mov	r3, r9
 800214a:	aa03      	add	r2, sp, #12
 800214c:	4621      	mov	r1, r4
 800214e:	4640      	mov	r0, r8
 8002150:	f7ff fee6 	bl	8001f20 <_printf_common>
 8002154:	3001      	adds	r0, #1
 8002156:	d14a      	bne.n	80021ee <_printf_i+0x1f2>
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	b004      	add	sp, #16
 800215e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	f043 0320 	orr.w	r3, r3, #32
 8002168:	6023      	str	r3, [r4, #0]
 800216a:	4833      	ldr	r0, [pc, #204]	@ (8002238 <_printf_i+0x23c>)
 800216c:	2778      	movs	r7, #120	@ 0x78
 800216e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002172:	6823      	ldr	r3, [r4, #0]
 8002174:	6831      	ldr	r1, [r6, #0]
 8002176:	061f      	lsls	r7, r3, #24
 8002178:	f851 5b04 	ldr.w	r5, [r1], #4
 800217c:	d402      	bmi.n	8002184 <_printf_i+0x188>
 800217e:	065f      	lsls	r7, r3, #25
 8002180:	bf48      	it	mi
 8002182:	b2ad      	uxthmi	r5, r5
 8002184:	6031      	str	r1, [r6, #0]
 8002186:	07d9      	lsls	r1, r3, #31
 8002188:	bf44      	itt	mi
 800218a:	f043 0320 	orrmi.w	r3, r3, #32
 800218e:	6023      	strmi	r3, [r4, #0]
 8002190:	b11d      	cbz	r5, 800219a <_printf_i+0x19e>
 8002192:	2310      	movs	r3, #16
 8002194:	e7ac      	b.n	80020f0 <_printf_i+0xf4>
 8002196:	4827      	ldr	r0, [pc, #156]	@ (8002234 <_printf_i+0x238>)
 8002198:	e7e9      	b.n	800216e <_printf_i+0x172>
 800219a:	6823      	ldr	r3, [r4, #0]
 800219c:	f023 0320 	bic.w	r3, r3, #32
 80021a0:	6023      	str	r3, [r4, #0]
 80021a2:	e7f6      	b.n	8002192 <_printf_i+0x196>
 80021a4:	4616      	mov	r6, r2
 80021a6:	e7bd      	b.n	8002124 <_printf_i+0x128>
 80021a8:	6833      	ldr	r3, [r6, #0]
 80021aa:	6825      	ldr	r5, [r4, #0]
 80021ac:	6961      	ldr	r1, [r4, #20]
 80021ae:	1d18      	adds	r0, r3, #4
 80021b0:	6030      	str	r0, [r6, #0]
 80021b2:	062e      	lsls	r6, r5, #24
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	d501      	bpl.n	80021bc <_printf_i+0x1c0>
 80021b8:	6019      	str	r1, [r3, #0]
 80021ba:	e002      	b.n	80021c2 <_printf_i+0x1c6>
 80021bc:	0668      	lsls	r0, r5, #25
 80021be:	d5fb      	bpl.n	80021b8 <_printf_i+0x1bc>
 80021c0:	8019      	strh	r1, [r3, #0]
 80021c2:	2300      	movs	r3, #0
 80021c4:	6123      	str	r3, [r4, #16]
 80021c6:	4616      	mov	r6, r2
 80021c8:	e7bc      	b.n	8002144 <_printf_i+0x148>
 80021ca:	6833      	ldr	r3, [r6, #0]
 80021cc:	1d1a      	adds	r2, r3, #4
 80021ce:	6032      	str	r2, [r6, #0]
 80021d0:	681e      	ldr	r6, [r3, #0]
 80021d2:	6862      	ldr	r2, [r4, #4]
 80021d4:	2100      	movs	r1, #0
 80021d6:	4630      	mov	r0, r6
 80021d8:	f7fe f822 	bl	8000220 <memchr>
 80021dc:	b108      	cbz	r0, 80021e2 <_printf_i+0x1e6>
 80021de:	1b80      	subs	r0, r0, r6
 80021e0:	6060      	str	r0, [r4, #4]
 80021e2:	6863      	ldr	r3, [r4, #4]
 80021e4:	6123      	str	r3, [r4, #16]
 80021e6:	2300      	movs	r3, #0
 80021e8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80021ec:	e7aa      	b.n	8002144 <_printf_i+0x148>
 80021ee:	6923      	ldr	r3, [r4, #16]
 80021f0:	4632      	mov	r2, r6
 80021f2:	4649      	mov	r1, r9
 80021f4:	4640      	mov	r0, r8
 80021f6:	47d0      	blx	sl
 80021f8:	3001      	adds	r0, #1
 80021fa:	d0ad      	beq.n	8002158 <_printf_i+0x15c>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	079b      	lsls	r3, r3, #30
 8002200:	d413      	bmi.n	800222a <_printf_i+0x22e>
 8002202:	68e0      	ldr	r0, [r4, #12]
 8002204:	9b03      	ldr	r3, [sp, #12]
 8002206:	4298      	cmp	r0, r3
 8002208:	bfb8      	it	lt
 800220a:	4618      	movlt	r0, r3
 800220c:	e7a6      	b.n	800215c <_printf_i+0x160>
 800220e:	2301      	movs	r3, #1
 8002210:	4632      	mov	r2, r6
 8002212:	4649      	mov	r1, r9
 8002214:	4640      	mov	r0, r8
 8002216:	47d0      	blx	sl
 8002218:	3001      	adds	r0, #1
 800221a:	d09d      	beq.n	8002158 <_printf_i+0x15c>
 800221c:	3501      	adds	r5, #1
 800221e:	68e3      	ldr	r3, [r4, #12]
 8002220:	9903      	ldr	r1, [sp, #12]
 8002222:	1a5b      	subs	r3, r3, r1
 8002224:	42ab      	cmp	r3, r5
 8002226:	dcf2      	bgt.n	800220e <_printf_i+0x212>
 8002228:	e7eb      	b.n	8002202 <_printf_i+0x206>
 800222a:	2500      	movs	r5, #0
 800222c:	f104 0619 	add.w	r6, r4, #25
 8002230:	e7f5      	b.n	800221e <_printf_i+0x222>
 8002232:	bf00      	nop
 8002234:	08002619 	.word	0x08002619
 8002238:	0800262a 	.word	0x0800262a

0800223c <__sflush_r>:
 800223c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002240:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002244:	0716      	lsls	r6, r2, #28
 8002246:	4605      	mov	r5, r0
 8002248:	460c      	mov	r4, r1
 800224a:	d454      	bmi.n	80022f6 <__sflush_r+0xba>
 800224c:	684b      	ldr	r3, [r1, #4]
 800224e:	2b00      	cmp	r3, #0
 8002250:	dc02      	bgt.n	8002258 <__sflush_r+0x1c>
 8002252:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002254:	2b00      	cmp	r3, #0
 8002256:	dd48      	ble.n	80022ea <__sflush_r+0xae>
 8002258:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800225a:	2e00      	cmp	r6, #0
 800225c:	d045      	beq.n	80022ea <__sflush_r+0xae>
 800225e:	2300      	movs	r3, #0
 8002260:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002264:	682f      	ldr	r7, [r5, #0]
 8002266:	6a21      	ldr	r1, [r4, #32]
 8002268:	602b      	str	r3, [r5, #0]
 800226a:	d030      	beq.n	80022ce <__sflush_r+0x92>
 800226c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800226e:	89a3      	ldrh	r3, [r4, #12]
 8002270:	0759      	lsls	r1, r3, #29
 8002272:	d505      	bpl.n	8002280 <__sflush_r+0x44>
 8002274:	6863      	ldr	r3, [r4, #4]
 8002276:	1ad2      	subs	r2, r2, r3
 8002278:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800227a:	b10b      	cbz	r3, 8002280 <__sflush_r+0x44>
 800227c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800227e:	1ad2      	subs	r2, r2, r3
 8002280:	2300      	movs	r3, #0
 8002282:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002284:	6a21      	ldr	r1, [r4, #32]
 8002286:	4628      	mov	r0, r5
 8002288:	47b0      	blx	r6
 800228a:	1c43      	adds	r3, r0, #1
 800228c:	89a3      	ldrh	r3, [r4, #12]
 800228e:	d106      	bne.n	800229e <__sflush_r+0x62>
 8002290:	6829      	ldr	r1, [r5, #0]
 8002292:	291d      	cmp	r1, #29
 8002294:	d82b      	bhi.n	80022ee <__sflush_r+0xb2>
 8002296:	4a2a      	ldr	r2, [pc, #168]	@ (8002340 <__sflush_r+0x104>)
 8002298:	410a      	asrs	r2, r1
 800229a:	07d6      	lsls	r6, r2, #31
 800229c:	d427      	bmi.n	80022ee <__sflush_r+0xb2>
 800229e:	2200      	movs	r2, #0
 80022a0:	6062      	str	r2, [r4, #4]
 80022a2:	04d9      	lsls	r1, r3, #19
 80022a4:	6922      	ldr	r2, [r4, #16]
 80022a6:	6022      	str	r2, [r4, #0]
 80022a8:	d504      	bpl.n	80022b4 <__sflush_r+0x78>
 80022aa:	1c42      	adds	r2, r0, #1
 80022ac:	d101      	bne.n	80022b2 <__sflush_r+0x76>
 80022ae:	682b      	ldr	r3, [r5, #0]
 80022b0:	b903      	cbnz	r3, 80022b4 <__sflush_r+0x78>
 80022b2:	6560      	str	r0, [r4, #84]	@ 0x54
 80022b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80022b6:	602f      	str	r7, [r5, #0]
 80022b8:	b1b9      	cbz	r1, 80022ea <__sflush_r+0xae>
 80022ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80022be:	4299      	cmp	r1, r3
 80022c0:	d002      	beq.n	80022c8 <__sflush_r+0x8c>
 80022c2:	4628      	mov	r0, r5
 80022c4:	f7ff fbf2 	bl	8001aac <_free_r>
 80022c8:	2300      	movs	r3, #0
 80022ca:	6363      	str	r3, [r4, #52]	@ 0x34
 80022cc:	e00d      	b.n	80022ea <__sflush_r+0xae>
 80022ce:	2301      	movs	r3, #1
 80022d0:	4628      	mov	r0, r5
 80022d2:	47b0      	blx	r6
 80022d4:	4602      	mov	r2, r0
 80022d6:	1c50      	adds	r0, r2, #1
 80022d8:	d1c9      	bne.n	800226e <__sflush_r+0x32>
 80022da:	682b      	ldr	r3, [r5, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0c6      	beq.n	800226e <__sflush_r+0x32>
 80022e0:	2b1d      	cmp	r3, #29
 80022e2:	d001      	beq.n	80022e8 <__sflush_r+0xac>
 80022e4:	2b16      	cmp	r3, #22
 80022e6:	d11e      	bne.n	8002326 <__sflush_r+0xea>
 80022e8:	602f      	str	r7, [r5, #0]
 80022ea:	2000      	movs	r0, #0
 80022ec:	e022      	b.n	8002334 <__sflush_r+0xf8>
 80022ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80022f2:	b21b      	sxth	r3, r3
 80022f4:	e01b      	b.n	800232e <__sflush_r+0xf2>
 80022f6:	690f      	ldr	r7, [r1, #16]
 80022f8:	2f00      	cmp	r7, #0
 80022fa:	d0f6      	beq.n	80022ea <__sflush_r+0xae>
 80022fc:	0793      	lsls	r3, r2, #30
 80022fe:	680e      	ldr	r6, [r1, #0]
 8002300:	bf08      	it	eq
 8002302:	694b      	ldreq	r3, [r1, #20]
 8002304:	600f      	str	r7, [r1, #0]
 8002306:	bf18      	it	ne
 8002308:	2300      	movne	r3, #0
 800230a:	eba6 0807 	sub.w	r8, r6, r7
 800230e:	608b      	str	r3, [r1, #8]
 8002310:	f1b8 0f00 	cmp.w	r8, #0
 8002314:	dde9      	ble.n	80022ea <__sflush_r+0xae>
 8002316:	6a21      	ldr	r1, [r4, #32]
 8002318:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800231a:	4643      	mov	r3, r8
 800231c:	463a      	mov	r2, r7
 800231e:	4628      	mov	r0, r5
 8002320:	47b0      	blx	r6
 8002322:	2800      	cmp	r0, #0
 8002324:	dc08      	bgt.n	8002338 <__sflush_r+0xfc>
 8002326:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800232a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800232e:	81a3      	strh	r3, [r4, #12]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002338:	4407      	add	r7, r0
 800233a:	eba8 0800 	sub.w	r8, r8, r0
 800233e:	e7e7      	b.n	8002310 <__sflush_r+0xd4>
 8002340:	dfbffffe 	.word	0xdfbffffe

08002344 <_fflush_r>:
 8002344:	b538      	push	{r3, r4, r5, lr}
 8002346:	690b      	ldr	r3, [r1, #16]
 8002348:	4605      	mov	r5, r0
 800234a:	460c      	mov	r4, r1
 800234c:	b913      	cbnz	r3, 8002354 <_fflush_r+0x10>
 800234e:	2500      	movs	r5, #0
 8002350:	4628      	mov	r0, r5
 8002352:	bd38      	pop	{r3, r4, r5, pc}
 8002354:	b118      	cbz	r0, 800235e <_fflush_r+0x1a>
 8002356:	6a03      	ldr	r3, [r0, #32]
 8002358:	b90b      	cbnz	r3, 800235e <_fflush_r+0x1a>
 800235a:	f7ff fa9f 	bl	800189c <__sinit>
 800235e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f3      	beq.n	800234e <_fflush_r+0xa>
 8002366:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002368:	07d0      	lsls	r0, r2, #31
 800236a:	d404      	bmi.n	8002376 <_fflush_r+0x32>
 800236c:	0599      	lsls	r1, r3, #22
 800236e:	d402      	bmi.n	8002376 <_fflush_r+0x32>
 8002370:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002372:	f7ff fb98 	bl	8001aa6 <__retarget_lock_acquire_recursive>
 8002376:	4628      	mov	r0, r5
 8002378:	4621      	mov	r1, r4
 800237a:	f7ff ff5f 	bl	800223c <__sflush_r>
 800237e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002380:	07da      	lsls	r2, r3, #31
 8002382:	4605      	mov	r5, r0
 8002384:	d4e4      	bmi.n	8002350 <_fflush_r+0xc>
 8002386:	89a3      	ldrh	r3, [r4, #12]
 8002388:	059b      	lsls	r3, r3, #22
 800238a:	d4e1      	bmi.n	8002350 <_fflush_r+0xc>
 800238c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800238e:	f7ff fb8b 	bl	8001aa8 <__retarget_lock_release_recursive>
 8002392:	e7dd      	b.n	8002350 <_fflush_r+0xc>

08002394 <__swbuf_r>:
 8002394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002396:	460e      	mov	r6, r1
 8002398:	4614      	mov	r4, r2
 800239a:	4605      	mov	r5, r0
 800239c:	b118      	cbz	r0, 80023a6 <__swbuf_r+0x12>
 800239e:	6a03      	ldr	r3, [r0, #32]
 80023a0:	b90b      	cbnz	r3, 80023a6 <__swbuf_r+0x12>
 80023a2:	f7ff fa7b 	bl	800189c <__sinit>
 80023a6:	69a3      	ldr	r3, [r4, #24]
 80023a8:	60a3      	str	r3, [r4, #8]
 80023aa:	89a3      	ldrh	r3, [r4, #12]
 80023ac:	071a      	lsls	r2, r3, #28
 80023ae:	d501      	bpl.n	80023b4 <__swbuf_r+0x20>
 80023b0:	6923      	ldr	r3, [r4, #16]
 80023b2:	b943      	cbnz	r3, 80023c6 <__swbuf_r+0x32>
 80023b4:	4621      	mov	r1, r4
 80023b6:	4628      	mov	r0, r5
 80023b8:	f000 f82a 	bl	8002410 <__swsetup_r>
 80023bc:	b118      	cbz	r0, 80023c6 <__swbuf_r+0x32>
 80023be:	f04f 37ff 	mov.w	r7, #4294967295
 80023c2:	4638      	mov	r0, r7
 80023c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80023c6:	6823      	ldr	r3, [r4, #0]
 80023c8:	6922      	ldr	r2, [r4, #16]
 80023ca:	1a98      	subs	r0, r3, r2
 80023cc:	6963      	ldr	r3, [r4, #20]
 80023ce:	b2f6      	uxtb	r6, r6
 80023d0:	4283      	cmp	r3, r0
 80023d2:	4637      	mov	r7, r6
 80023d4:	dc05      	bgt.n	80023e2 <__swbuf_r+0x4e>
 80023d6:	4621      	mov	r1, r4
 80023d8:	4628      	mov	r0, r5
 80023da:	f7ff ffb3 	bl	8002344 <_fflush_r>
 80023de:	2800      	cmp	r0, #0
 80023e0:	d1ed      	bne.n	80023be <__swbuf_r+0x2a>
 80023e2:	68a3      	ldr	r3, [r4, #8]
 80023e4:	3b01      	subs	r3, #1
 80023e6:	60a3      	str	r3, [r4, #8]
 80023e8:	6823      	ldr	r3, [r4, #0]
 80023ea:	1c5a      	adds	r2, r3, #1
 80023ec:	6022      	str	r2, [r4, #0]
 80023ee:	701e      	strb	r6, [r3, #0]
 80023f0:	6962      	ldr	r2, [r4, #20]
 80023f2:	1c43      	adds	r3, r0, #1
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d004      	beq.n	8002402 <__swbuf_r+0x6e>
 80023f8:	89a3      	ldrh	r3, [r4, #12]
 80023fa:	07db      	lsls	r3, r3, #31
 80023fc:	d5e1      	bpl.n	80023c2 <__swbuf_r+0x2e>
 80023fe:	2e0a      	cmp	r6, #10
 8002400:	d1df      	bne.n	80023c2 <__swbuf_r+0x2e>
 8002402:	4621      	mov	r1, r4
 8002404:	4628      	mov	r0, r5
 8002406:	f7ff ff9d 	bl	8002344 <_fflush_r>
 800240a:	2800      	cmp	r0, #0
 800240c:	d0d9      	beq.n	80023c2 <__swbuf_r+0x2e>
 800240e:	e7d6      	b.n	80023be <__swbuf_r+0x2a>

08002410 <__swsetup_r>:
 8002410:	b538      	push	{r3, r4, r5, lr}
 8002412:	4b29      	ldr	r3, [pc, #164]	@ (80024b8 <__swsetup_r+0xa8>)
 8002414:	4605      	mov	r5, r0
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	460c      	mov	r4, r1
 800241a:	b118      	cbz	r0, 8002424 <__swsetup_r+0x14>
 800241c:	6a03      	ldr	r3, [r0, #32]
 800241e:	b90b      	cbnz	r3, 8002424 <__swsetup_r+0x14>
 8002420:	f7ff fa3c 	bl	800189c <__sinit>
 8002424:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002428:	0719      	lsls	r1, r3, #28
 800242a:	d422      	bmi.n	8002472 <__swsetup_r+0x62>
 800242c:	06da      	lsls	r2, r3, #27
 800242e:	d407      	bmi.n	8002440 <__swsetup_r+0x30>
 8002430:	2209      	movs	r2, #9
 8002432:	602a      	str	r2, [r5, #0]
 8002434:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002438:	81a3      	strh	r3, [r4, #12]
 800243a:	f04f 30ff 	mov.w	r0, #4294967295
 800243e:	e033      	b.n	80024a8 <__swsetup_r+0x98>
 8002440:	0758      	lsls	r0, r3, #29
 8002442:	d512      	bpl.n	800246a <__swsetup_r+0x5a>
 8002444:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002446:	b141      	cbz	r1, 800245a <__swsetup_r+0x4a>
 8002448:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800244c:	4299      	cmp	r1, r3
 800244e:	d002      	beq.n	8002456 <__swsetup_r+0x46>
 8002450:	4628      	mov	r0, r5
 8002452:	f7ff fb2b 	bl	8001aac <_free_r>
 8002456:	2300      	movs	r3, #0
 8002458:	6363      	str	r3, [r4, #52]	@ 0x34
 800245a:	89a3      	ldrh	r3, [r4, #12]
 800245c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002460:	81a3      	strh	r3, [r4, #12]
 8002462:	2300      	movs	r3, #0
 8002464:	6063      	str	r3, [r4, #4]
 8002466:	6923      	ldr	r3, [r4, #16]
 8002468:	6023      	str	r3, [r4, #0]
 800246a:	89a3      	ldrh	r3, [r4, #12]
 800246c:	f043 0308 	orr.w	r3, r3, #8
 8002470:	81a3      	strh	r3, [r4, #12]
 8002472:	6923      	ldr	r3, [r4, #16]
 8002474:	b94b      	cbnz	r3, 800248a <__swsetup_r+0x7a>
 8002476:	89a3      	ldrh	r3, [r4, #12]
 8002478:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800247c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002480:	d003      	beq.n	800248a <__swsetup_r+0x7a>
 8002482:	4621      	mov	r1, r4
 8002484:	4628      	mov	r0, r5
 8002486:	f000 f84f 	bl	8002528 <__smakebuf_r>
 800248a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800248e:	f013 0201 	ands.w	r2, r3, #1
 8002492:	d00a      	beq.n	80024aa <__swsetup_r+0x9a>
 8002494:	2200      	movs	r2, #0
 8002496:	60a2      	str	r2, [r4, #8]
 8002498:	6962      	ldr	r2, [r4, #20]
 800249a:	4252      	negs	r2, r2
 800249c:	61a2      	str	r2, [r4, #24]
 800249e:	6922      	ldr	r2, [r4, #16]
 80024a0:	b942      	cbnz	r2, 80024b4 <__swsetup_r+0xa4>
 80024a2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80024a6:	d1c5      	bne.n	8002434 <__swsetup_r+0x24>
 80024a8:	bd38      	pop	{r3, r4, r5, pc}
 80024aa:	0799      	lsls	r1, r3, #30
 80024ac:	bf58      	it	pl
 80024ae:	6962      	ldrpl	r2, [r4, #20]
 80024b0:	60a2      	str	r2, [r4, #8]
 80024b2:	e7f4      	b.n	800249e <__swsetup_r+0x8e>
 80024b4:	2000      	movs	r0, #0
 80024b6:	e7f7      	b.n	80024a8 <__swsetup_r+0x98>
 80024b8:	2000183c 	.word	0x2000183c

080024bc <_sbrk_r>:
 80024bc:	b538      	push	{r3, r4, r5, lr}
 80024be:	4d06      	ldr	r5, [pc, #24]	@ (80024d8 <_sbrk_r+0x1c>)
 80024c0:	2300      	movs	r3, #0
 80024c2:	4604      	mov	r4, r0
 80024c4:	4608      	mov	r0, r1
 80024c6:	602b      	str	r3, [r5, #0]
 80024c8:	f7fe f97c 	bl	80007c4 <_sbrk>
 80024cc:	1c43      	adds	r3, r0, #1
 80024ce:	d102      	bne.n	80024d6 <_sbrk_r+0x1a>
 80024d0:	682b      	ldr	r3, [r5, #0]
 80024d2:	b103      	cbz	r3, 80024d6 <_sbrk_r+0x1a>
 80024d4:	6023      	str	r3, [r4, #0]
 80024d6:	bd38      	pop	{r3, r4, r5, pc}
 80024d8:	20001a48 	.word	0x20001a48

080024dc <__swhatbuf_r>:
 80024dc:	b570      	push	{r4, r5, r6, lr}
 80024de:	460c      	mov	r4, r1
 80024e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024e4:	2900      	cmp	r1, #0
 80024e6:	b096      	sub	sp, #88	@ 0x58
 80024e8:	4615      	mov	r5, r2
 80024ea:	461e      	mov	r6, r3
 80024ec:	da0d      	bge.n	800250a <__swhatbuf_r+0x2e>
 80024ee:	89a3      	ldrh	r3, [r4, #12]
 80024f0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	bf14      	ite	ne
 80024fa:	2340      	movne	r3, #64	@ 0x40
 80024fc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002500:	2000      	movs	r0, #0
 8002502:	6031      	str	r1, [r6, #0]
 8002504:	602b      	str	r3, [r5, #0]
 8002506:	b016      	add	sp, #88	@ 0x58
 8002508:	bd70      	pop	{r4, r5, r6, pc}
 800250a:	466a      	mov	r2, sp
 800250c:	f000 f848 	bl	80025a0 <_fstat_r>
 8002510:	2800      	cmp	r0, #0
 8002512:	dbec      	blt.n	80024ee <__swhatbuf_r+0x12>
 8002514:	9901      	ldr	r1, [sp, #4]
 8002516:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800251a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800251e:	4259      	negs	r1, r3
 8002520:	4159      	adcs	r1, r3
 8002522:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002526:	e7eb      	b.n	8002500 <__swhatbuf_r+0x24>

08002528 <__smakebuf_r>:
 8002528:	898b      	ldrh	r3, [r1, #12]
 800252a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800252c:	079d      	lsls	r5, r3, #30
 800252e:	4606      	mov	r6, r0
 8002530:	460c      	mov	r4, r1
 8002532:	d507      	bpl.n	8002544 <__smakebuf_r+0x1c>
 8002534:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002538:	6023      	str	r3, [r4, #0]
 800253a:	6123      	str	r3, [r4, #16]
 800253c:	2301      	movs	r3, #1
 800253e:	6163      	str	r3, [r4, #20]
 8002540:	b003      	add	sp, #12
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002544:	ab01      	add	r3, sp, #4
 8002546:	466a      	mov	r2, sp
 8002548:	f7ff ffc8 	bl	80024dc <__swhatbuf_r>
 800254c:	9f00      	ldr	r7, [sp, #0]
 800254e:	4605      	mov	r5, r0
 8002550:	4639      	mov	r1, r7
 8002552:	4630      	mov	r0, r6
 8002554:	f7ff fb16 	bl	8001b84 <_malloc_r>
 8002558:	b948      	cbnz	r0, 800256e <__smakebuf_r+0x46>
 800255a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800255e:	059a      	lsls	r2, r3, #22
 8002560:	d4ee      	bmi.n	8002540 <__smakebuf_r+0x18>
 8002562:	f023 0303 	bic.w	r3, r3, #3
 8002566:	f043 0302 	orr.w	r3, r3, #2
 800256a:	81a3      	strh	r3, [r4, #12]
 800256c:	e7e2      	b.n	8002534 <__smakebuf_r+0xc>
 800256e:	89a3      	ldrh	r3, [r4, #12]
 8002570:	6020      	str	r0, [r4, #0]
 8002572:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002576:	81a3      	strh	r3, [r4, #12]
 8002578:	9b01      	ldr	r3, [sp, #4]
 800257a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800257e:	b15b      	cbz	r3, 8002598 <__smakebuf_r+0x70>
 8002580:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002584:	4630      	mov	r0, r6
 8002586:	f000 f81d 	bl	80025c4 <_isatty_r>
 800258a:	b128      	cbz	r0, 8002598 <__smakebuf_r+0x70>
 800258c:	89a3      	ldrh	r3, [r4, #12]
 800258e:	f023 0303 	bic.w	r3, r3, #3
 8002592:	f043 0301 	orr.w	r3, r3, #1
 8002596:	81a3      	strh	r3, [r4, #12]
 8002598:	89a3      	ldrh	r3, [r4, #12]
 800259a:	431d      	orrs	r5, r3
 800259c:	81a5      	strh	r5, [r4, #12]
 800259e:	e7cf      	b.n	8002540 <__smakebuf_r+0x18>

080025a0 <_fstat_r>:
 80025a0:	b538      	push	{r3, r4, r5, lr}
 80025a2:	4d07      	ldr	r5, [pc, #28]	@ (80025c0 <_fstat_r+0x20>)
 80025a4:	2300      	movs	r3, #0
 80025a6:	4604      	mov	r4, r0
 80025a8:	4608      	mov	r0, r1
 80025aa:	4611      	mov	r1, r2
 80025ac:	602b      	str	r3, [r5, #0]
 80025ae:	f7fe f8e0 	bl	8000772 <_fstat>
 80025b2:	1c43      	adds	r3, r0, #1
 80025b4:	d102      	bne.n	80025bc <_fstat_r+0x1c>
 80025b6:	682b      	ldr	r3, [r5, #0]
 80025b8:	b103      	cbz	r3, 80025bc <_fstat_r+0x1c>
 80025ba:	6023      	str	r3, [r4, #0]
 80025bc:	bd38      	pop	{r3, r4, r5, pc}
 80025be:	bf00      	nop
 80025c0:	20001a48 	.word	0x20001a48

080025c4 <_isatty_r>:
 80025c4:	b538      	push	{r3, r4, r5, lr}
 80025c6:	4d06      	ldr	r5, [pc, #24]	@ (80025e0 <_isatty_r+0x1c>)
 80025c8:	2300      	movs	r3, #0
 80025ca:	4604      	mov	r4, r0
 80025cc:	4608      	mov	r0, r1
 80025ce:	602b      	str	r3, [r5, #0]
 80025d0:	f7fe f8df 	bl	8000792 <_isatty>
 80025d4:	1c43      	adds	r3, r0, #1
 80025d6:	d102      	bne.n	80025de <_isatty_r+0x1a>
 80025d8:	682b      	ldr	r3, [r5, #0]
 80025da:	b103      	cbz	r3, 80025de <_isatty_r+0x1a>
 80025dc:	6023      	str	r3, [r4, #0]
 80025de:	bd38      	pop	{r3, r4, r5, pc}
 80025e0:	20001a48 	.word	0x20001a48

080025e4 <_init>:
 80025e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025e6:	bf00      	nop
 80025e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025ea:	bc08      	pop	{r3}
 80025ec:	469e      	mov	lr, r3
 80025ee:	4770      	bx	lr

080025f0 <_fini>:
 80025f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025f2:	bf00      	nop
 80025f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80025f6:	bc08      	pop	{r3}
 80025f8:	469e      	mov	lr, r3
 80025fa:	4770      	bx	lr

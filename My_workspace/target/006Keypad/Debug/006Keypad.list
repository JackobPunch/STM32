
006Keypad.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000e7c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08001000  08001000  00002000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001070  08001070  0000305c  2**0
                  CONTENTS
  4 .ARM          00000000  08001070  08001070  0000305c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001070  08001070  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001070  08001070  00002070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001074  08001074  00002074  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001078  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080010d4  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080010d4  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000009bd  00000000  00000000  00003085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000346  00000000  00000000  00003a42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00003d88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00003ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002cbe  00000000  00000000  00003f6d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000015b0  00000000  00000000  00006c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000097e1  00000000  00000000  000081db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000119bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009fc  00000000  00000000  00011a00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000123fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	2000005c 	.word	0x2000005c
 80001a0:	00000000 	.word	0x00000000
 80001a4:	08000fe8 	.word	0x08000fe8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000060 	.word	0x20000060
 80001c0:	08000fe8 	.word	0x08000fe8

080001c4 <delay>:
#include<stdint.h>
#include<stdio.h>

void delay(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b083      	sub	sp, #12
 80001c8:	af00      	add	r7, sp, #0
	for(uint32_t i =0 ; i < 3000000 ; i++);
 80001ca:	2300      	movs	r3, #0
 80001cc:	607b      	str	r3, [r7, #4]
 80001ce:	e002      	b.n	80001d6 <delay+0x12>
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	3301      	adds	r3, #1
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4a04      	ldr	r2, [pc, #16]	@ (80001ec <delay+0x28>)
 80001da:	4293      	cmp	r3, r2
 80001dc:	d9f8      	bls.n	80001d0 <delay+0xc>

}
 80001de:	bf00      	nop
 80001e0:	bf00      	nop
 80001e2:	370c      	adds	r7, #12
 80001e4:	46bd      	mov	sp, r7
 80001e6:	bc80      	pop	{r7}
 80001e8:	4770      	bx	lr
 80001ea:	bf00      	nop
 80001ec:	002dc6bf 	.word	0x002dc6bf

080001f0 <main>:

int main(void)
{
 80001f0:	b580      	push	{r7, lr}
 80001f2:	b088      	sub	sp, #32
 80001f4:	af00      	add	r7, sp, #0
	printf("Start of initialization\n");
 80001f6:	4897      	ldr	r0, [pc, #604]	@ (8000454 <main+0x264>)
 80001f8:	f000 fb68 	bl	80008cc <puts>
	//peripheral register addresses
	uint32_t volatile *const pGPIOEModeReg  =  (uint32_t*)(0x40021000);
 80001fc:	4b96      	ldr	r3, [pc, #600]	@ (8000458 <main+0x268>)
 80001fe:	61fb      	str	r3, [r7, #28]
	uint32_t volatile *const pGPIOFModeReg  =  (uint32_t*)(0x40021400);
 8000200:	4b96      	ldr	r3, [pc, #600]	@ (800045c <main+0x26c>)
 8000202:	61bb      	str	r3, [r7, #24]
	uint32_t volatile *const pEInPutDataReg  =  (uint32_t*)(0x40021000 + 0x10);
 8000204:	4b96      	ldr	r3, [pc, #600]	@ (8000460 <main+0x270>)
 8000206:	617b      	str	r3, [r7, #20]
	uint32_t volatile *const pFInPutDataReg  =  (uint32_t*)(0x40021400 + 0x10);
 8000208:	4b96      	ldr	r3, [pc, #600]	@ (8000464 <main+0x274>)
 800020a:	613b      	str	r3, [r7, #16]
	uint32_t volatile *const pEOutPutDataReg =  (uint32_t*)(0x40020C00 + 0x14);
 800020c:	4b96      	ldr	r3, [pc, #600]	@ (8000468 <main+0x278>)
 800020e:	60fb      	str	r3, [r7, #12]
	uint32_t volatile *const pClockCtrlReg  =  (uint32_t*)(0x40023800 + 0x30);
 8000210:	4b96      	ldr	r3, [pc, #600]	@ (800046c <main+0x27c>)
 8000212:	60bb      	str	r3, [r7, #8]
	uint32_t volatile *const pEPullupDownReg =  (uint32_t*)(0x40021000 + 0x0C);
 8000214:	4b96      	ldr	r3, [pc, #600]	@ (8000470 <main+0x280>)
 8000216:	607b      	str	r3, [r7, #4]
	uint32_t volatile *const pFPullupDownReg =  (uint32_t*)(0x40021400 + 0x0C);
 8000218:	4b96      	ldr	r3, [pc, #600]	@ (8000474 <main+0x284>)
 800021a:	603b      	str	r3, [r7, #0]

     //1.Enable the peripheral clock of GPIOE and GPIOF peripheral
	*pClockCtrlReg |= ( 3 << 4);
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f043 0230 	orr.w	r2, r3, #48	@ 0x30
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	601a      	str	r2, [r3, #0]


    // 2.configure PE2, PE3, PE4, PE5 as output (rows)
	*pGPIOEModeReg &= ~(0xFF<<4); //clear
 8000228:	69fb      	ldr	r3, [r7, #28]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	f423 627f 	bic.w	r2, r3, #4080	@ 0xff0
 8000230:	69fb      	ldr	r3, [r7, #28]
 8000232:	601a      	str	r2, [r3, #0]
	*pGPIOEModeReg |= (0x55<<4);   //set
 8000234:	69fb      	ldr	r3, [r7, #28]
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f443 62aa 	orr.w	r2, r3, #1360	@ 0x550
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	601a      	str	r2, [r3, #0]


	// 3. configure PE6 , PF7, PF8, PF9 as input (columns)
	*pGPIOEModeReg &= ~(0x3<<12); //clear
 8000240:	69fb      	ldr	r3, [r7, #28]
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000248:	69fb      	ldr	r3, [r7, #28]
 800024a:	601a      	str	r2, [r3, #0]
	*pGPIOFModeReg &= ~(0x3F<<14); //clear
 800024c:	69bb      	ldr	r3, [r7, #24]
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	f423 227c 	bic.w	r2, r3, #1032192	@ 0xfc000
 8000254:	69bb      	ldr	r3, [r7, #24]
 8000256:	601a      	str	r2, [r3, #0]

	// 4.Enable internal pull-up resistors for PE6 , PF7, PF8, PF9
    *pEPullupDownReg &= ~(0x3<<12); //clear
 8000258:	687b      	ldr	r3, [r7, #4]
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	601a      	str	r2, [r3, #0]
    *pEPullupDownReg |= (0x1<<12); //set
 8000264:	687b      	ldr	r3, [r7, #4]
 8000266:	681b      	ldr	r3, [r3, #0]
 8000268:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800026c:	687b      	ldr	r3, [r7, #4]
 800026e:	601a      	str	r2, [r3, #0]
    *pFPullupDownReg &= ~(0x3F<<14); //clear
 8000270:	683b      	ldr	r3, [r7, #0]
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	f423 227c 	bic.w	r2, r3, #1032192	@ 0xfc000
 8000278:	683b      	ldr	r3, [r7, #0]
 800027a:	601a      	str	r2, [r3, #0]
    *pFPullupDownReg |= (0x15<<14); //set
 800027c:	683b      	ldr	r3, [r7, #0]
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	f443 22a8 	orr.w	r2, r3, #344064	@ 0x54000
 8000284:	683b      	ldr	r3, [r7, #0]
 8000286:	601a      	str	r2, [r3, #0]

    printf("End of initialization\n");
 8000288:	487b      	ldr	r0, [pc, #492]	@ (8000478 <main+0x288>)
 800028a:	f000 fb1f 	bl	80008cc <puts>

while(1)
{
    //make all rows HIGH
    *pEOutPutDataReg |= (0x0F<<2);
 800028e:	68fb      	ldr	r3, [r7, #12]
 8000290:	681b      	ldr	r3, [r3, #0]
 8000292:	f043 023c 	orr.w	r2, r3, #60	@ 0x3c
 8000296:	68fb      	ldr	r3, [r7, #12]
 8000298:	601a      	str	r2, [r3, #0]

    //make R1 LOW(PE2)
    *pEOutPutDataReg &= ~( 1 << 2);
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	681b      	ldr	r3, [r3, #0]
 800029e:	f023 0204 	bic.w	r2, r3, #4
 80002a2:	68fb      	ldr	r3, [r7, #12]
 80002a4:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PE6) low or high
    if(!(*pEInPutDataReg & ( 1 << 6))){
 80002a6:	697b      	ldr	r3, [r7, #20]
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80002ae:	2b00      	cmp	r3, #0
 80002b0:	d104      	bne.n	80002bc <main+0xcc>
    	//key is pressed
    	delay();
 80002b2:	f7ff ff87 	bl	80001c4 <delay>
    	printf("1\n");
 80002b6:	4871      	ldr	r0, [pc, #452]	@ (800047c <main+0x28c>)
 80002b8:	f000 fb08 	bl	80008cc <puts>
    }

    //check C2(PF7) low or high
    if(!(*pFInPutDataReg & ( 1 << 7))){
 80002bc:	693b      	ldr	r3, [r7, #16]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d104      	bne.n	80002d2 <main+0xe2>
    	//key is pressed
    	delay();
 80002c8:	f7ff ff7c 	bl	80001c4 <delay>
    	printf("2\n");
 80002cc:	486c      	ldr	r0, [pc, #432]	@ (8000480 <main+0x290>)
 80002ce:	f000 fafd 	bl	80008cc <puts>
    }

    //check C3(PF8) low or high
    if(!(*pFInPutDataReg & ( 1 << 8))){
 80002d2:	693b      	ldr	r3, [r7, #16]
 80002d4:	681b      	ldr	r3, [r3, #0]
 80002d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d104      	bne.n	80002e8 <main+0xf8>
    	//key is pressed
    	delay();
 80002de:	f7ff ff71 	bl	80001c4 <delay>
    	printf("3\n");
 80002e2:	4868      	ldr	r0, [pc, #416]	@ (8000484 <main+0x294>)
 80002e4:	f000 faf2 	bl	80008cc <puts>
    }

    //check C4(PF9) low or high
    if(!(*pFInPutDataReg & ( 1 << 9))){
 80002e8:	693b      	ldr	r3, [r7, #16]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d104      	bne.n	80002fe <main+0x10e>
    	//key is pressed
    	delay();
 80002f4:	f7ff ff66 	bl	80001c4 <delay>
    	printf("A\n");
 80002f8:	4863      	ldr	r0, [pc, #396]	@ (8000488 <main+0x298>)
 80002fa:	f000 fae7 	bl	80008cc <puts>
    }


    //make all rows HIGH
     *pEOutPutDataReg |= (0x0f<<2);
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	f043 023c 	orr.w	r2, r3, #60	@ 0x3c
 8000306:	68fb      	ldr	r3, [r7, #12]
 8000308:	601a      	str	r2, [r3, #0]
    //make R2 LOW(PE3)
    *pEOutPutDataReg &= ~( 1 << 3);
 800030a:	68fb      	ldr	r3, [r7, #12]
 800030c:	681b      	ldr	r3, [r3, #0]
 800030e:	f023 0208 	bic.w	r2, r3, #8
 8000312:	68fb      	ldr	r3, [r7, #12]
 8000314:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PE6) low or high
    if(!(*pEInPutDataReg & ( 1 << 6))){
 8000316:	697b      	ldr	r3, [r7, #20]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800031e:	2b00      	cmp	r3, #0
 8000320:	d104      	bne.n	800032c <main+0x13c>
    	//key is pressed
    	delay();
 8000322:	f7ff ff4f 	bl	80001c4 <delay>
    	printf("4\n");
 8000326:	4859      	ldr	r0, [pc, #356]	@ (800048c <main+0x29c>)
 8000328:	f000 fad0 	bl	80008cc <puts>
    }

    //check C2(PF7) low or high
    if(!(*pFInPutDataReg & ( 1 << 7))){
 800032c:	693b      	ldr	r3, [r7, #16]
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000334:	2b00      	cmp	r3, #0
 8000336:	d104      	bne.n	8000342 <main+0x152>
    	//key is pressed
    	delay();
 8000338:	f7ff ff44 	bl	80001c4 <delay>
    	printf("5\n");
 800033c:	4854      	ldr	r0, [pc, #336]	@ (8000490 <main+0x2a0>)
 800033e:	f000 fac5 	bl	80008cc <puts>
    }

    //check C3(PF8) low or high
    if(!(*pFInPutDataReg & ( 1 << 8))){
 8000342:	693b      	ldr	r3, [r7, #16]
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800034a:	2b00      	cmp	r3, #0
 800034c:	d104      	bne.n	8000358 <main+0x168>
    	//key is pressed
    	delay();
 800034e:	f7ff ff39 	bl	80001c4 <delay>
    	printf("6\n");
 8000352:	4850      	ldr	r0, [pc, #320]	@ (8000494 <main+0x2a4>)
 8000354:	f000 faba 	bl	80008cc <puts>
    }

    //check C4(PF9) low or high
    if(!(*pFInPutDataReg & ( 1 << 9))){
 8000358:	693b      	ldr	r3, [r7, #16]
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000360:	2b00      	cmp	r3, #0
 8000362:	d104      	bne.n	800036e <main+0x17e>
    	//key is pressed
    	delay();
 8000364:	f7ff ff2e 	bl	80001c4 <delay>
    	printf("B\n");
 8000368:	484b      	ldr	r0, [pc, #300]	@ (8000498 <main+0x2a8>)
 800036a:	f000 faaf 	bl	80008cc <puts>
    }

    //make all rows HIGH
     *pEOutPutDataReg |= (0x0f<<2);
 800036e:	68fb      	ldr	r3, [r7, #12]
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	f043 023c 	orr.w	r2, r3, #60	@ 0x3c
 8000376:	68fb      	ldr	r3, [r7, #12]
 8000378:	601a      	str	r2, [r3, #0]
    //make R3 LOW(PE4)
    *pEOutPutDataReg &= ~( 1 << 4);
 800037a:	68fb      	ldr	r3, [r7, #12]
 800037c:	681b      	ldr	r3, [r3, #0]
 800037e:	f023 0210 	bic.w	r2, r3, #16
 8000382:	68fb      	ldr	r3, [r7, #12]
 8000384:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PE6) low or high
    if(!(*pEInPutDataReg & ( 1 << 6))){
 8000386:	697b      	ldr	r3, [r7, #20]
 8000388:	681b      	ldr	r3, [r3, #0]
 800038a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800038e:	2b00      	cmp	r3, #0
 8000390:	d104      	bne.n	800039c <main+0x1ac>
    	//key is pressed
    	delay();
 8000392:	f7ff ff17 	bl	80001c4 <delay>
    	printf("7\n");
 8000396:	4841      	ldr	r0, [pc, #260]	@ (800049c <main+0x2ac>)
 8000398:	f000 fa98 	bl	80008cc <puts>
    }

    //check C2(PF7) low or high
    if(!(*pFInPutDataReg & ( 1 << 7))){
 800039c:	693b      	ldr	r3, [r7, #16]
 800039e:	681b      	ldr	r3, [r3, #0]
 80003a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80003a4:	2b00      	cmp	r3, #0
 80003a6:	d104      	bne.n	80003b2 <main+0x1c2>
    	//key is pressed
    	delay();
 80003a8:	f7ff ff0c 	bl	80001c4 <delay>
    	printf("8\n");
 80003ac:	483c      	ldr	r0, [pc, #240]	@ (80004a0 <main+0x2b0>)
 80003ae:	f000 fa8d 	bl	80008cc <puts>
    }

    //check C3(PF8) low or high
    if(!(*pFInPutDataReg & ( 1 << 8))){
 80003b2:	693b      	ldr	r3, [r7, #16]
 80003b4:	681b      	ldr	r3, [r3, #0]
 80003b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d104      	bne.n	80003c8 <main+0x1d8>
    	//key is pressed
    	delay();
 80003be:	f7ff ff01 	bl	80001c4 <delay>
    	printf("9\n");
 80003c2:	4838      	ldr	r0, [pc, #224]	@ (80004a4 <main+0x2b4>)
 80003c4:	f000 fa82 	bl	80008cc <puts>
    }

    //check C4(PF9) low or high
    if(!(*pFInPutDataReg & ( 1 << 9))){
 80003c8:	693b      	ldr	r3, [r7, #16]
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d104      	bne.n	80003de <main+0x1ee>
    	//key is pressed
    	delay();
 80003d4:	f7ff fef6 	bl	80001c4 <delay>
    	printf("C\n");
 80003d8:	4833      	ldr	r0, [pc, #204]	@ (80004a8 <main+0x2b8>)
 80003da:	f000 fa77 	bl	80008cc <puts>
    }

    //make all rows HIGH
     *pEOutPutDataReg |= (0x0f<<2);
 80003de:	68fb      	ldr	r3, [r7, #12]
 80003e0:	681b      	ldr	r3, [r3, #0]
 80003e2:	f043 023c 	orr.w	r2, r3, #60	@ 0x3c
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	601a      	str	r2, [r3, #0]
    //make R4 LOW(PE5)
    *pEOutPutDataReg &= ~( 1 << 5);
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	f023 0220 	bic.w	r2, r3, #32
 80003f2:	68fb      	ldr	r3, [r7, #12]
 80003f4:	601a      	str	r2, [r3, #0]

    //scan the columns
    //check C1(PE6) low or high
    if(!(*pEInPutDataReg & ( 1 << 6))){
 80003f6:	697b      	ldr	r3, [r7, #20]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d104      	bne.n	800040c <main+0x21c>
    	//key is pressed
    	delay();
 8000402:	f7ff fedf 	bl	80001c4 <delay>
    	printf("*\n");
 8000406:	4829      	ldr	r0, [pc, #164]	@ (80004ac <main+0x2bc>)
 8000408:	f000 fa60 	bl	80008cc <puts>
    }

    //check C2(PF7) low or high
    if(!(*pFInPutDataReg & ( 1 << 7))){
 800040c:	693b      	ldr	r3, [r7, #16]
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000414:	2b00      	cmp	r3, #0
 8000416:	d104      	bne.n	8000422 <main+0x232>
    	//key is pressed
    	delay();
 8000418:	f7ff fed4 	bl	80001c4 <delay>
    	printf("0\n");
 800041c:	4824      	ldr	r0, [pc, #144]	@ (80004b0 <main+0x2c0>)
 800041e:	f000 fa55 	bl	80008cc <puts>
    }

    //check C3(PF8) low or high
    if(!(*pFInPutDataReg & ( 1 << 8))){
 8000422:	693b      	ldr	r3, [r7, #16]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800042a:	2b00      	cmp	r3, #0
 800042c:	d104      	bne.n	8000438 <main+0x248>
    	//key is pressed
    	delay();
 800042e:	f7ff fec9 	bl	80001c4 <delay>
    	printf("#\n");
 8000432:	4820      	ldr	r0, [pc, #128]	@ (80004b4 <main+0x2c4>)
 8000434:	f000 fa4a 	bl	80008cc <puts>
    }

    //check C4(PF9) low or high
    if(!(*pFInPutDataReg & ( 1 << 9))){
 8000438:	693b      	ldr	r3, [r7, #16]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000440:	2b00      	cmp	r3, #0
 8000442:	f47f af24 	bne.w	800028e <main+0x9e>
    	//key is pressed
    	delay();
 8000446:	f7ff febd 	bl	80001c4 <delay>
    	printf("D\n");
 800044a:	481b      	ldr	r0, [pc, #108]	@ (80004b8 <main+0x2c8>)
 800044c:	f000 fa3e 	bl	80008cc <puts>
    *pEOutPutDataReg |= (0x0F<<2);
 8000450:	e71d      	b.n	800028e <main+0x9e>
 8000452:	bf00      	nop
 8000454:	08001000 	.word	0x08001000
 8000458:	40021000 	.word	0x40021000
 800045c:	40021400 	.word	0x40021400
 8000460:	40021010 	.word	0x40021010
 8000464:	40021410 	.word	0x40021410
 8000468:	40020c14 	.word	0x40020c14
 800046c:	40023830 	.word	0x40023830
 8000470:	4002100c 	.word	0x4002100c
 8000474:	4002140c 	.word	0x4002140c
 8000478:	08001018 	.word	0x08001018
 800047c:	08001030 	.word	0x08001030
 8000480:	08001034 	.word	0x08001034
 8000484:	08001038 	.word	0x08001038
 8000488:	0800103c 	.word	0x0800103c
 800048c:	08001040 	.word	0x08001040
 8000490:	08001044 	.word	0x08001044
 8000494:	08001048 	.word	0x08001048
 8000498:	0800104c 	.word	0x0800104c
 800049c:	08001050 	.word	0x08001050
 80004a0:	08001054 	.word	0x08001054
 80004a4:	08001058 	.word	0x08001058
 80004a8:	0800105c 	.word	0x0800105c
 80004ac:	08001060 	.word	0x08001060
 80004b0:	08001064 	.word	0x08001064
 80004b4:	08001068 	.word	0x08001068
 80004b8:	0800106c 	.word	0x0800106c

080004bc <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 80004bc:	b480      	push	{r7}
 80004be:	b083      	sub	sp, #12
 80004c0:	af00      	add	r7, sp, #0
 80004c2:	4603      	mov	r3, r0
 80004c4:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 80004c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000500 <ITM_SendChar+0x44>)
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	4a0d      	ldr	r2, [pc, #52]	@ (8000500 <ITM_SendChar+0x44>)
 80004cc:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80004d0:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 80004d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000504 <ITM_SendChar+0x48>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000504 <ITM_SendChar+0x48>)
 80004d8:	f043 0301 	orr.w	r3, r3, #1
 80004dc:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 80004de:	bf00      	nop
 80004e0:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 80004e4:	681b      	ldr	r3, [r3, #0]
 80004e6:	f003 0301 	and.w	r3, r3, #1
 80004ea:	2b00      	cmp	r3, #0
 80004ec:	d0f8      	beq.n	80004e0 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 80004ee:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	6013      	str	r3, [r2, #0]
}
 80004f6:	bf00      	nop
 80004f8:	370c      	adds	r7, #12
 80004fa:	46bd      	mov	sp, r7
 80004fc:	bc80      	pop	{r7}
 80004fe:	4770      	bx	lr
 8000500:	e000edfc 	.word	0xe000edfc
 8000504:	e0000e00 	.word	0xe0000e00

08000508 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b086      	sub	sp, #24
 800050c:	af00      	add	r7, sp, #0
 800050e:	60f8      	str	r0, [r7, #12]
 8000510:	60b9      	str	r1, [r7, #8]
 8000512:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000514:	2300      	movs	r3, #0
 8000516:	617b      	str	r3, [r7, #20]
 8000518:	e00a      	b.n	8000530 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800051a:	f3af 8000 	nop.w
 800051e:	4601      	mov	r1, r0
 8000520:	68bb      	ldr	r3, [r7, #8]
 8000522:	1c5a      	adds	r2, r3, #1
 8000524:	60ba      	str	r2, [r7, #8]
 8000526:	b2ca      	uxtb	r2, r1
 8000528:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800052a:	697b      	ldr	r3, [r7, #20]
 800052c:	3301      	adds	r3, #1
 800052e:	617b      	str	r3, [r7, #20]
 8000530:	697a      	ldr	r2, [r7, #20]
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	429a      	cmp	r2, r3
 8000536:	dbf0      	blt.n	800051a <_read+0x12>
  }

  return len;
 8000538:	687b      	ldr	r3, [r7, #4]
}
 800053a:	4618      	mov	r0, r3
 800053c:	3718      	adds	r7, #24
 800053e:	46bd      	mov	sp, r7
 8000540:	bd80      	pop	{r7, pc}

08000542 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000542:	b580      	push	{r7, lr}
 8000544:	b086      	sub	sp, #24
 8000546:	af00      	add	r7, sp, #0
 8000548:	60f8      	str	r0, [r7, #12]
 800054a:	60b9      	str	r1, [r7, #8]
 800054c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800054e:	2300      	movs	r3, #0
 8000550:	617b      	str	r3, [r7, #20]
 8000552:	e009      	b.n	8000568 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8000554:	68bb      	ldr	r3, [r7, #8]
 8000556:	1c5a      	adds	r2, r3, #1
 8000558:	60ba      	str	r2, [r7, #8]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	4618      	mov	r0, r3
 800055e:	f7ff ffad 	bl	80004bc <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	3301      	adds	r3, #1
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	697a      	ldr	r2, [r7, #20]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	429a      	cmp	r2, r3
 800056e:	dbf1      	blt.n	8000554 <_write+0x12>
  }
  return len;
 8000570:	687b      	ldr	r3, [r7, #4]
}
 8000572:	4618      	mov	r0, r3
 8000574:	3718      	adds	r7, #24
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}

0800057a <_close>:

int _close(int file)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000582:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000586:	4618      	mov	r0, r3
 8000588:	370c      	adds	r7, #12
 800058a:	46bd      	mov	sp, r7
 800058c:	bc80      	pop	{r7}
 800058e:	4770      	bx	lr

08000590 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
 8000598:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800059a:	683b      	ldr	r3, [r7, #0]
 800059c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80005a0:	605a      	str	r2, [r3, #4]
  return 0;
 80005a2:	2300      	movs	r3, #0
}
 80005a4:	4618      	mov	r0, r3
 80005a6:	370c      	adds	r7, #12
 80005a8:	46bd      	mov	sp, r7
 80005aa:	bc80      	pop	{r7}
 80005ac:	4770      	bx	lr

080005ae <_isatty>:

int _isatty(int file)
{
 80005ae:	b480      	push	{r7}
 80005b0:	b083      	sub	sp, #12
 80005b2:	af00      	add	r7, sp, #0
 80005b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80005b6:	2301      	movs	r3, #1
}
 80005b8:	4618      	mov	r0, r3
 80005ba:	370c      	adds	r7, #12
 80005bc:	46bd      	mov	sp, r7
 80005be:	bc80      	pop	{r7}
 80005c0:	4770      	bx	lr

080005c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80005c2:	b480      	push	{r7}
 80005c4:	b085      	sub	sp, #20
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	60f8      	str	r0, [r7, #12]
 80005ca:	60b9      	str	r1, [r7, #8]
 80005cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80005ce:	2300      	movs	r3, #0
}
 80005d0:	4618      	mov	r0, r3
 80005d2:	3714      	adds	r7, #20
 80005d4:	46bd      	mov	sp, r7
 80005d6:	bc80      	pop	{r7}
 80005d8:	4770      	bx	lr
	...

080005dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b086      	sub	sp, #24
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80005e4:	4a14      	ldr	r2, [pc, #80]	@ (8000638 <_sbrk+0x5c>)
 80005e6:	4b15      	ldr	r3, [pc, #84]	@ (800063c <_sbrk+0x60>)
 80005e8:	1ad3      	subs	r3, r2, r3
 80005ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80005ec:	697b      	ldr	r3, [r7, #20]
 80005ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005f0:	4b13      	ldr	r3, [pc, #76]	@ (8000640 <_sbrk+0x64>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d102      	bne.n	80005fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005f8:	4b11      	ldr	r3, [pc, #68]	@ (8000640 <_sbrk+0x64>)
 80005fa:	4a12      	ldr	r2, [pc, #72]	@ (8000644 <_sbrk+0x68>)
 80005fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005fe:	4b10      	ldr	r3, [pc, #64]	@ (8000640 <_sbrk+0x64>)
 8000600:	681a      	ldr	r2, [r3, #0]
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	4413      	add	r3, r2
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	429a      	cmp	r2, r3
 800060a:	d207      	bcs.n	800061c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800060c:	f000 fa8c 	bl	8000b28 <__errno>
 8000610:	4603      	mov	r3, r0
 8000612:	220c      	movs	r2, #12
 8000614:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000616:	f04f 33ff 	mov.w	r3, #4294967295
 800061a:	e009      	b.n	8000630 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800061c:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <_sbrk+0x64>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000622:	4b07      	ldr	r3, [pc, #28]	@ (8000640 <_sbrk+0x64>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	4413      	add	r3, r2
 800062a:	4a05      	ldr	r2, [pc, #20]	@ (8000640 <_sbrk+0x64>)
 800062c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800062e:	68fb      	ldr	r3, [r7, #12]
}
 8000630:	4618      	mov	r0, r3
 8000632:	3718      	adds	r7, #24
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20020000 	.word	0x20020000
 800063c:	00000400 	.word	0x00000400
 8000640:	20000078 	.word	0x20000078
 8000644:	200001c8 	.word	0x200001c8

08000648 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000648:	480d      	ldr	r0, [pc, #52]	@ (8000680 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800064a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800064c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000650:	480c      	ldr	r0, [pc, #48]	@ (8000684 <LoopForever+0x6>)
  ldr r1, =_edata
 8000652:	490d      	ldr	r1, [pc, #52]	@ (8000688 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000654:	4a0d      	ldr	r2, [pc, #52]	@ (800068c <LoopForever+0xe>)
  movs r3, #0
 8000656:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000658:	e002      	b.n	8000660 <LoopCopyDataInit>

0800065a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800065a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800065c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800065e:	3304      	adds	r3, #4

08000660 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000660:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000662:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000664:	d3f9      	bcc.n	800065a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000666:	4a0a      	ldr	r2, [pc, #40]	@ (8000690 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000668:	4c0a      	ldr	r4, [pc, #40]	@ (8000694 <LoopForever+0x16>)
  movs r3, #0
 800066a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800066c:	e001      	b.n	8000672 <LoopFillZerobss>

0800066e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800066e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000670:	3204      	adds	r2, #4

08000672 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000672:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000674:	d3fb      	bcc.n	800066e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000676:	f000 fa5d 	bl	8000b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800067a:	f7ff fdb9 	bl	80001f0 <main>

0800067e <LoopForever>:

LoopForever:
  b LoopForever
 800067e:	e7fe      	b.n	800067e <LoopForever>
  ldr   r0, =_estack
 8000680:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000684:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000688:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800068c:	08001078 	.word	0x08001078
  ldr r2, =_sbss
 8000690:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000694:	200001c8 	.word	0x200001c8

08000698 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000698:	e7fe      	b.n	8000698 <ADC_IRQHandler>
	...

0800069c <std>:
 800069c:	2300      	movs	r3, #0
 800069e:	b510      	push	{r4, lr}
 80006a0:	4604      	mov	r4, r0
 80006a2:	e9c0 3300 	strd	r3, r3, [r0]
 80006a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80006aa:	6083      	str	r3, [r0, #8]
 80006ac:	8181      	strh	r1, [r0, #12]
 80006ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80006b0:	81c2      	strh	r2, [r0, #14]
 80006b2:	6183      	str	r3, [r0, #24]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2208      	movs	r2, #8
 80006b8:	305c      	adds	r0, #92	@ 0x5c
 80006ba:	f000 f9e7 	bl	8000a8c <memset>
 80006be:	4b0d      	ldr	r3, [pc, #52]	@ (80006f4 <std+0x58>)
 80006c0:	6224      	str	r4, [r4, #32]
 80006c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80006c4:	4b0c      	ldr	r3, [pc, #48]	@ (80006f8 <std+0x5c>)
 80006c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 80006c8:	4b0c      	ldr	r3, [pc, #48]	@ (80006fc <std+0x60>)
 80006ca:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80006cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <std+0x64>)
 80006ce:	6323      	str	r3, [r4, #48]	@ 0x30
 80006d0:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <std+0x68>)
 80006d2:	429c      	cmp	r4, r3
 80006d4:	d006      	beq.n	80006e4 <std+0x48>
 80006d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80006da:	4294      	cmp	r4, r2
 80006dc:	d002      	beq.n	80006e4 <std+0x48>
 80006de:	33d0      	adds	r3, #208	@ 0xd0
 80006e0:	429c      	cmp	r4, r3
 80006e2:	d105      	bne.n	80006f0 <std+0x54>
 80006e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80006e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006ec:	f000 ba46 	b.w	8000b7c <__retarget_lock_init_recursive>
 80006f0:	bd10      	pop	{r4, pc}
 80006f2:	bf00      	nop
 80006f4:	080008dd 	.word	0x080008dd
 80006f8:	080008ff 	.word	0x080008ff
 80006fc:	08000937 	.word	0x08000937
 8000700:	0800095b 	.word	0x0800095b
 8000704:	2000007c 	.word	0x2000007c

08000708 <stdio_exit_handler>:
 8000708:	4a02      	ldr	r2, [pc, #8]	@ (8000714 <stdio_exit_handler+0xc>)
 800070a:	4903      	ldr	r1, [pc, #12]	@ (8000718 <stdio_exit_handler+0x10>)
 800070c:	4803      	ldr	r0, [pc, #12]	@ (800071c <stdio_exit_handler+0x14>)
 800070e:	f000 b869 	b.w	80007e4 <_fwalk_sglue>
 8000712:	bf00      	nop
 8000714:	20000000 	.word	0x20000000
 8000718:	08000e71 	.word	0x08000e71
 800071c:	20000010 	.word	0x20000010

08000720 <cleanup_stdio>:
 8000720:	6841      	ldr	r1, [r0, #4]
 8000722:	4b0c      	ldr	r3, [pc, #48]	@ (8000754 <cleanup_stdio+0x34>)
 8000724:	b510      	push	{r4, lr}
 8000726:	4299      	cmp	r1, r3
 8000728:	4604      	mov	r4, r0
 800072a:	d001      	beq.n	8000730 <cleanup_stdio+0x10>
 800072c:	f000 fba0 	bl	8000e70 <_fflush_r>
 8000730:	68a1      	ldr	r1, [r4, #8]
 8000732:	4b09      	ldr	r3, [pc, #36]	@ (8000758 <cleanup_stdio+0x38>)
 8000734:	4299      	cmp	r1, r3
 8000736:	d002      	beq.n	800073e <cleanup_stdio+0x1e>
 8000738:	4620      	mov	r0, r4
 800073a:	f000 fb99 	bl	8000e70 <_fflush_r>
 800073e:	68e1      	ldr	r1, [r4, #12]
 8000740:	4b06      	ldr	r3, [pc, #24]	@ (800075c <cleanup_stdio+0x3c>)
 8000742:	4299      	cmp	r1, r3
 8000744:	d004      	beq.n	8000750 <cleanup_stdio+0x30>
 8000746:	4620      	mov	r0, r4
 8000748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800074c:	f000 bb90 	b.w	8000e70 <_fflush_r>
 8000750:	bd10      	pop	{r4, pc}
 8000752:	bf00      	nop
 8000754:	2000007c 	.word	0x2000007c
 8000758:	200000e4 	.word	0x200000e4
 800075c:	2000014c 	.word	0x2000014c

08000760 <global_stdio_init.part.0>:
 8000760:	b510      	push	{r4, lr}
 8000762:	4b0b      	ldr	r3, [pc, #44]	@ (8000790 <global_stdio_init.part.0+0x30>)
 8000764:	4c0b      	ldr	r4, [pc, #44]	@ (8000794 <global_stdio_init.part.0+0x34>)
 8000766:	4a0c      	ldr	r2, [pc, #48]	@ (8000798 <global_stdio_init.part.0+0x38>)
 8000768:	4620      	mov	r0, r4
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	2104      	movs	r1, #4
 800076e:	2200      	movs	r2, #0
 8000770:	f7ff ff94 	bl	800069c <std>
 8000774:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000778:	2201      	movs	r2, #1
 800077a:	2109      	movs	r1, #9
 800077c:	f7ff ff8e 	bl	800069c <std>
 8000780:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000784:	2202      	movs	r2, #2
 8000786:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800078a:	2112      	movs	r1, #18
 800078c:	f7ff bf86 	b.w	800069c <std>
 8000790:	200001b4 	.word	0x200001b4
 8000794:	2000007c 	.word	0x2000007c
 8000798:	08000709 	.word	0x08000709

0800079c <__sfp_lock_acquire>:
 800079c:	4801      	ldr	r0, [pc, #4]	@ (80007a4 <__sfp_lock_acquire+0x8>)
 800079e:	f000 b9ee 	b.w	8000b7e <__retarget_lock_acquire_recursive>
 80007a2:	bf00      	nop
 80007a4:	200001bd 	.word	0x200001bd

080007a8 <__sfp_lock_release>:
 80007a8:	4801      	ldr	r0, [pc, #4]	@ (80007b0 <__sfp_lock_release+0x8>)
 80007aa:	f000 b9e9 	b.w	8000b80 <__retarget_lock_release_recursive>
 80007ae:	bf00      	nop
 80007b0:	200001bd 	.word	0x200001bd

080007b4 <__sinit>:
 80007b4:	b510      	push	{r4, lr}
 80007b6:	4604      	mov	r4, r0
 80007b8:	f7ff fff0 	bl	800079c <__sfp_lock_acquire>
 80007bc:	6a23      	ldr	r3, [r4, #32]
 80007be:	b11b      	cbz	r3, 80007c8 <__sinit+0x14>
 80007c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007c4:	f7ff bff0 	b.w	80007a8 <__sfp_lock_release>
 80007c8:	4b04      	ldr	r3, [pc, #16]	@ (80007dc <__sinit+0x28>)
 80007ca:	6223      	str	r3, [r4, #32]
 80007cc:	4b04      	ldr	r3, [pc, #16]	@ (80007e0 <__sinit+0x2c>)
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d1f5      	bne.n	80007c0 <__sinit+0xc>
 80007d4:	f7ff ffc4 	bl	8000760 <global_stdio_init.part.0>
 80007d8:	e7f2      	b.n	80007c0 <__sinit+0xc>
 80007da:	bf00      	nop
 80007dc:	08000721 	.word	0x08000721
 80007e0:	200001b4 	.word	0x200001b4

080007e4 <_fwalk_sglue>:
 80007e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80007e8:	4607      	mov	r7, r0
 80007ea:	4688      	mov	r8, r1
 80007ec:	4614      	mov	r4, r2
 80007ee:	2600      	movs	r6, #0
 80007f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007f4:	f1b9 0901 	subs.w	r9, r9, #1
 80007f8:	d505      	bpl.n	8000806 <_fwalk_sglue+0x22>
 80007fa:	6824      	ldr	r4, [r4, #0]
 80007fc:	2c00      	cmp	r4, #0
 80007fe:	d1f7      	bne.n	80007f0 <_fwalk_sglue+0xc>
 8000800:	4630      	mov	r0, r6
 8000802:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000806:	89ab      	ldrh	r3, [r5, #12]
 8000808:	2b01      	cmp	r3, #1
 800080a:	d907      	bls.n	800081c <_fwalk_sglue+0x38>
 800080c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000810:	3301      	adds	r3, #1
 8000812:	d003      	beq.n	800081c <_fwalk_sglue+0x38>
 8000814:	4629      	mov	r1, r5
 8000816:	4638      	mov	r0, r7
 8000818:	47c0      	blx	r8
 800081a:	4306      	orrs	r6, r0
 800081c:	3568      	adds	r5, #104	@ 0x68
 800081e:	e7e9      	b.n	80007f4 <_fwalk_sglue+0x10>

08000820 <_puts_r>:
 8000820:	6a03      	ldr	r3, [r0, #32]
 8000822:	b570      	push	{r4, r5, r6, lr}
 8000824:	4605      	mov	r5, r0
 8000826:	460e      	mov	r6, r1
 8000828:	6884      	ldr	r4, [r0, #8]
 800082a:	b90b      	cbnz	r3, 8000830 <_puts_r+0x10>
 800082c:	f7ff ffc2 	bl	80007b4 <__sinit>
 8000830:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000832:	07db      	lsls	r3, r3, #31
 8000834:	d405      	bmi.n	8000842 <_puts_r+0x22>
 8000836:	89a3      	ldrh	r3, [r4, #12]
 8000838:	0598      	lsls	r0, r3, #22
 800083a:	d402      	bmi.n	8000842 <_puts_r+0x22>
 800083c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800083e:	f000 f99e 	bl	8000b7e <__retarget_lock_acquire_recursive>
 8000842:	89a3      	ldrh	r3, [r4, #12]
 8000844:	0719      	lsls	r1, r3, #28
 8000846:	d502      	bpl.n	800084e <_puts_r+0x2e>
 8000848:	6923      	ldr	r3, [r4, #16]
 800084a:	2b00      	cmp	r3, #0
 800084c:	d135      	bne.n	80008ba <_puts_r+0x9a>
 800084e:	4621      	mov	r1, r4
 8000850:	4628      	mov	r0, r5
 8000852:	f000 f8c5 	bl	80009e0 <__swsetup_r>
 8000856:	b380      	cbz	r0, 80008ba <_puts_r+0x9a>
 8000858:	f04f 35ff 	mov.w	r5, #4294967295
 800085c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800085e:	07da      	lsls	r2, r3, #31
 8000860:	d405      	bmi.n	800086e <_puts_r+0x4e>
 8000862:	89a3      	ldrh	r3, [r4, #12]
 8000864:	059b      	lsls	r3, r3, #22
 8000866:	d402      	bmi.n	800086e <_puts_r+0x4e>
 8000868:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800086a:	f000 f989 	bl	8000b80 <__retarget_lock_release_recursive>
 800086e:	4628      	mov	r0, r5
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	2b00      	cmp	r3, #0
 8000874:	da04      	bge.n	8000880 <_puts_r+0x60>
 8000876:	69a2      	ldr	r2, [r4, #24]
 8000878:	429a      	cmp	r2, r3
 800087a:	dc17      	bgt.n	80008ac <_puts_r+0x8c>
 800087c:	290a      	cmp	r1, #10
 800087e:	d015      	beq.n	80008ac <_puts_r+0x8c>
 8000880:	6823      	ldr	r3, [r4, #0]
 8000882:	1c5a      	adds	r2, r3, #1
 8000884:	6022      	str	r2, [r4, #0]
 8000886:	7019      	strb	r1, [r3, #0]
 8000888:	68a3      	ldr	r3, [r4, #8]
 800088a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800088e:	3b01      	subs	r3, #1
 8000890:	60a3      	str	r3, [r4, #8]
 8000892:	2900      	cmp	r1, #0
 8000894:	d1ed      	bne.n	8000872 <_puts_r+0x52>
 8000896:	2b00      	cmp	r3, #0
 8000898:	da11      	bge.n	80008be <_puts_r+0x9e>
 800089a:	4622      	mov	r2, r4
 800089c:	210a      	movs	r1, #10
 800089e:	4628      	mov	r0, r5
 80008a0:	f000 f85f 	bl	8000962 <__swbuf_r>
 80008a4:	3001      	adds	r0, #1
 80008a6:	d0d7      	beq.n	8000858 <_puts_r+0x38>
 80008a8:	250a      	movs	r5, #10
 80008aa:	e7d7      	b.n	800085c <_puts_r+0x3c>
 80008ac:	4622      	mov	r2, r4
 80008ae:	4628      	mov	r0, r5
 80008b0:	f000 f857 	bl	8000962 <__swbuf_r>
 80008b4:	3001      	adds	r0, #1
 80008b6:	d1e7      	bne.n	8000888 <_puts_r+0x68>
 80008b8:	e7ce      	b.n	8000858 <_puts_r+0x38>
 80008ba:	3e01      	subs	r6, #1
 80008bc:	e7e4      	b.n	8000888 <_puts_r+0x68>
 80008be:	6823      	ldr	r3, [r4, #0]
 80008c0:	1c5a      	adds	r2, r3, #1
 80008c2:	6022      	str	r2, [r4, #0]
 80008c4:	220a      	movs	r2, #10
 80008c6:	701a      	strb	r2, [r3, #0]
 80008c8:	e7ee      	b.n	80008a8 <_puts_r+0x88>
	...

080008cc <puts>:
 80008cc:	4b02      	ldr	r3, [pc, #8]	@ (80008d8 <puts+0xc>)
 80008ce:	4601      	mov	r1, r0
 80008d0:	6818      	ldr	r0, [r3, #0]
 80008d2:	f7ff bfa5 	b.w	8000820 <_puts_r>
 80008d6:	bf00      	nop
 80008d8:	2000000c 	.word	0x2000000c

080008dc <__sread>:
 80008dc:	b510      	push	{r4, lr}
 80008de:	460c      	mov	r4, r1
 80008e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80008e4:	f000 f8fc 	bl	8000ae0 <_read_r>
 80008e8:	2800      	cmp	r0, #0
 80008ea:	bfab      	itete	ge
 80008ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80008ee:	89a3      	ldrhlt	r3, [r4, #12]
 80008f0:	181b      	addge	r3, r3, r0
 80008f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80008f6:	bfac      	ite	ge
 80008f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80008fa:	81a3      	strhlt	r3, [r4, #12]
 80008fc:	bd10      	pop	{r4, pc}

080008fe <__swrite>:
 80008fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000902:	461f      	mov	r7, r3
 8000904:	898b      	ldrh	r3, [r1, #12]
 8000906:	4605      	mov	r5, r0
 8000908:	05db      	lsls	r3, r3, #23
 800090a:	460c      	mov	r4, r1
 800090c:	4616      	mov	r6, r2
 800090e:	d505      	bpl.n	800091c <__swrite+0x1e>
 8000910:	2302      	movs	r3, #2
 8000912:	2200      	movs	r2, #0
 8000914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000918:	f000 f8d0 	bl	8000abc <_lseek_r>
 800091c:	89a3      	ldrh	r3, [r4, #12]
 800091e:	4632      	mov	r2, r6
 8000920:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000924:	81a3      	strh	r3, [r4, #12]
 8000926:	4628      	mov	r0, r5
 8000928:	463b      	mov	r3, r7
 800092a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800092e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000932:	f000 b8e7 	b.w	8000b04 <_write_r>

08000936 <__sseek>:
 8000936:	b510      	push	{r4, lr}
 8000938:	460c      	mov	r4, r1
 800093a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800093e:	f000 f8bd 	bl	8000abc <_lseek_r>
 8000942:	1c43      	adds	r3, r0, #1
 8000944:	89a3      	ldrh	r3, [r4, #12]
 8000946:	bf15      	itete	ne
 8000948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800094a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800094e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8000952:	81a3      	strheq	r3, [r4, #12]
 8000954:	bf18      	it	ne
 8000956:	81a3      	strhne	r3, [r4, #12]
 8000958:	bd10      	pop	{r4, pc}

0800095a <__sclose>:
 800095a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800095e:	f000 b89d 	b.w	8000a9c <_close_r>

08000962 <__swbuf_r>:
 8000962:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000964:	460e      	mov	r6, r1
 8000966:	4614      	mov	r4, r2
 8000968:	4605      	mov	r5, r0
 800096a:	b118      	cbz	r0, 8000974 <__swbuf_r+0x12>
 800096c:	6a03      	ldr	r3, [r0, #32]
 800096e:	b90b      	cbnz	r3, 8000974 <__swbuf_r+0x12>
 8000970:	f7ff ff20 	bl	80007b4 <__sinit>
 8000974:	69a3      	ldr	r3, [r4, #24]
 8000976:	60a3      	str	r3, [r4, #8]
 8000978:	89a3      	ldrh	r3, [r4, #12]
 800097a:	071a      	lsls	r2, r3, #28
 800097c:	d501      	bpl.n	8000982 <__swbuf_r+0x20>
 800097e:	6923      	ldr	r3, [r4, #16]
 8000980:	b943      	cbnz	r3, 8000994 <__swbuf_r+0x32>
 8000982:	4621      	mov	r1, r4
 8000984:	4628      	mov	r0, r5
 8000986:	f000 f82b 	bl	80009e0 <__swsetup_r>
 800098a:	b118      	cbz	r0, 8000994 <__swbuf_r+0x32>
 800098c:	f04f 37ff 	mov.w	r7, #4294967295
 8000990:	4638      	mov	r0, r7
 8000992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000994:	6823      	ldr	r3, [r4, #0]
 8000996:	6922      	ldr	r2, [r4, #16]
 8000998:	b2f6      	uxtb	r6, r6
 800099a:	1a98      	subs	r0, r3, r2
 800099c:	6963      	ldr	r3, [r4, #20]
 800099e:	4637      	mov	r7, r6
 80009a0:	4283      	cmp	r3, r0
 80009a2:	dc05      	bgt.n	80009b0 <__swbuf_r+0x4e>
 80009a4:	4621      	mov	r1, r4
 80009a6:	4628      	mov	r0, r5
 80009a8:	f000 fa62 	bl	8000e70 <_fflush_r>
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d1ed      	bne.n	800098c <__swbuf_r+0x2a>
 80009b0:	68a3      	ldr	r3, [r4, #8]
 80009b2:	3b01      	subs	r3, #1
 80009b4:	60a3      	str	r3, [r4, #8]
 80009b6:	6823      	ldr	r3, [r4, #0]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	6022      	str	r2, [r4, #0]
 80009bc:	701e      	strb	r6, [r3, #0]
 80009be:	6962      	ldr	r2, [r4, #20]
 80009c0:	1c43      	adds	r3, r0, #1
 80009c2:	429a      	cmp	r2, r3
 80009c4:	d004      	beq.n	80009d0 <__swbuf_r+0x6e>
 80009c6:	89a3      	ldrh	r3, [r4, #12]
 80009c8:	07db      	lsls	r3, r3, #31
 80009ca:	d5e1      	bpl.n	8000990 <__swbuf_r+0x2e>
 80009cc:	2e0a      	cmp	r6, #10
 80009ce:	d1df      	bne.n	8000990 <__swbuf_r+0x2e>
 80009d0:	4621      	mov	r1, r4
 80009d2:	4628      	mov	r0, r5
 80009d4:	f000 fa4c 	bl	8000e70 <_fflush_r>
 80009d8:	2800      	cmp	r0, #0
 80009da:	d0d9      	beq.n	8000990 <__swbuf_r+0x2e>
 80009dc:	e7d6      	b.n	800098c <__swbuf_r+0x2a>
	...

080009e0 <__swsetup_r>:
 80009e0:	b538      	push	{r3, r4, r5, lr}
 80009e2:	4b29      	ldr	r3, [pc, #164]	@ (8000a88 <__swsetup_r+0xa8>)
 80009e4:	4605      	mov	r5, r0
 80009e6:	6818      	ldr	r0, [r3, #0]
 80009e8:	460c      	mov	r4, r1
 80009ea:	b118      	cbz	r0, 80009f4 <__swsetup_r+0x14>
 80009ec:	6a03      	ldr	r3, [r0, #32]
 80009ee:	b90b      	cbnz	r3, 80009f4 <__swsetup_r+0x14>
 80009f0:	f7ff fee0 	bl	80007b4 <__sinit>
 80009f4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80009f8:	0719      	lsls	r1, r3, #28
 80009fa:	d422      	bmi.n	8000a42 <__swsetup_r+0x62>
 80009fc:	06da      	lsls	r2, r3, #27
 80009fe:	d407      	bmi.n	8000a10 <__swsetup_r+0x30>
 8000a00:	2209      	movs	r2, #9
 8000a02:	602a      	str	r2, [r5, #0]
 8000a04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000a08:	f04f 30ff 	mov.w	r0, #4294967295
 8000a0c:	81a3      	strh	r3, [r4, #12]
 8000a0e:	e033      	b.n	8000a78 <__swsetup_r+0x98>
 8000a10:	0758      	lsls	r0, r3, #29
 8000a12:	d512      	bpl.n	8000a3a <__swsetup_r+0x5a>
 8000a14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000a16:	b141      	cbz	r1, 8000a2a <__swsetup_r+0x4a>
 8000a18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000a1c:	4299      	cmp	r1, r3
 8000a1e:	d002      	beq.n	8000a26 <__swsetup_r+0x46>
 8000a20:	4628      	mov	r0, r5
 8000a22:	f000 f8af 	bl	8000b84 <_free_r>
 8000a26:	2300      	movs	r3, #0
 8000a28:	6363      	str	r3, [r4, #52]	@ 0x34
 8000a2a:	89a3      	ldrh	r3, [r4, #12]
 8000a2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8000a30:	81a3      	strh	r3, [r4, #12]
 8000a32:	2300      	movs	r3, #0
 8000a34:	6063      	str	r3, [r4, #4]
 8000a36:	6923      	ldr	r3, [r4, #16]
 8000a38:	6023      	str	r3, [r4, #0]
 8000a3a:	89a3      	ldrh	r3, [r4, #12]
 8000a3c:	f043 0308 	orr.w	r3, r3, #8
 8000a40:	81a3      	strh	r3, [r4, #12]
 8000a42:	6923      	ldr	r3, [r4, #16]
 8000a44:	b94b      	cbnz	r3, 8000a5a <__swsetup_r+0x7a>
 8000a46:	89a3      	ldrh	r3, [r4, #12]
 8000a48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8000a4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000a50:	d003      	beq.n	8000a5a <__swsetup_r+0x7a>
 8000a52:	4621      	mov	r1, r4
 8000a54:	4628      	mov	r0, r5
 8000a56:	f000 fa58 	bl	8000f0a <__smakebuf_r>
 8000a5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000a5e:	f013 0201 	ands.w	r2, r3, #1
 8000a62:	d00a      	beq.n	8000a7a <__swsetup_r+0x9a>
 8000a64:	2200      	movs	r2, #0
 8000a66:	60a2      	str	r2, [r4, #8]
 8000a68:	6962      	ldr	r2, [r4, #20]
 8000a6a:	4252      	negs	r2, r2
 8000a6c:	61a2      	str	r2, [r4, #24]
 8000a6e:	6922      	ldr	r2, [r4, #16]
 8000a70:	b942      	cbnz	r2, 8000a84 <__swsetup_r+0xa4>
 8000a72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8000a76:	d1c5      	bne.n	8000a04 <__swsetup_r+0x24>
 8000a78:	bd38      	pop	{r3, r4, r5, pc}
 8000a7a:	0799      	lsls	r1, r3, #30
 8000a7c:	bf58      	it	pl
 8000a7e:	6962      	ldrpl	r2, [r4, #20]
 8000a80:	60a2      	str	r2, [r4, #8]
 8000a82:	e7f4      	b.n	8000a6e <__swsetup_r+0x8e>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7f7      	b.n	8000a78 <__swsetup_r+0x98>
 8000a88:	2000000c 	.word	0x2000000c

08000a8c <memset>:
 8000a8c:	4603      	mov	r3, r0
 8000a8e:	4402      	add	r2, r0
 8000a90:	4293      	cmp	r3, r2
 8000a92:	d100      	bne.n	8000a96 <memset+0xa>
 8000a94:	4770      	bx	lr
 8000a96:	f803 1b01 	strb.w	r1, [r3], #1
 8000a9a:	e7f9      	b.n	8000a90 <memset+0x4>

08000a9c <_close_r>:
 8000a9c:	b538      	push	{r3, r4, r5, lr}
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	4d05      	ldr	r5, [pc, #20]	@ (8000ab8 <_close_r+0x1c>)
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	4608      	mov	r0, r1
 8000aa6:	602b      	str	r3, [r5, #0]
 8000aa8:	f7ff fd67 	bl	800057a <_close>
 8000aac:	1c43      	adds	r3, r0, #1
 8000aae:	d102      	bne.n	8000ab6 <_close_r+0x1a>
 8000ab0:	682b      	ldr	r3, [r5, #0]
 8000ab2:	b103      	cbz	r3, 8000ab6 <_close_r+0x1a>
 8000ab4:	6023      	str	r3, [r4, #0]
 8000ab6:	bd38      	pop	{r3, r4, r5, pc}
 8000ab8:	200001b8 	.word	0x200001b8

08000abc <_lseek_r>:
 8000abc:	b538      	push	{r3, r4, r5, lr}
 8000abe:	4604      	mov	r4, r0
 8000ac0:	4608      	mov	r0, r1
 8000ac2:	4611      	mov	r1, r2
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	4d05      	ldr	r5, [pc, #20]	@ (8000adc <_lseek_r+0x20>)
 8000ac8:	602a      	str	r2, [r5, #0]
 8000aca:	461a      	mov	r2, r3
 8000acc:	f7ff fd79 	bl	80005c2 <_lseek>
 8000ad0:	1c43      	adds	r3, r0, #1
 8000ad2:	d102      	bne.n	8000ada <_lseek_r+0x1e>
 8000ad4:	682b      	ldr	r3, [r5, #0]
 8000ad6:	b103      	cbz	r3, 8000ada <_lseek_r+0x1e>
 8000ad8:	6023      	str	r3, [r4, #0]
 8000ada:	bd38      	pop	{r3, r4, r5, pc}
 8000adc:	200001b8 	.word	0x200001b8

08000ae0 <_read_r>:
 8000ae0:	b538      	push	{r3, r4, r5, lr}
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	4608      	mov	r0, r1
 8000ae6:	4611      	mov	r1, r2
 8000ae8:	2200      	movs	r2, #0
 8000aea:	4d05      	ldr	r5, [pc, #20]	@ (8000b00 <_read_r+0x20>)
 8000aec:	602a      	str	r2, [r5, #0]
 8000aee:	461a      	mov	r2, r3
 8000af0:	f7ff fd0a 	bl	8000508 <_read>
 8000af4:	1c43      	adds	r3, r0, #1
 8000af6:	d102      	bne.n	8000afe <_read_r+0x1e>
 8000af8:	682b      	ldr	r3, [r5, #0]
 8000afa:	b103      	cbz	r3, 8000afe <_read_r+0x1e>
 8000afc:	6023      	str	r3, [r4, #0]
 8000afe:	bd38      	pop	{r3, r4, r5, pc}
 8000b00:	200001b8 	.word	0x200001b8

08000b04 <_write_r>:
 8000b04:	b538      	push	{r3, r4, r5, lr}
 8000b06:	4604      	mov	r4, r0
 8000b08:	4608      	mov	r0, r1
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	4d05      	ldr	r5, [pc, #20]	@ (8000b24 <_write_r+0x20>)
 8000b10:	602a      	str	r2, [r5, #0]
 8000b12:	461a      	mov	r2, r3
 8000b14:	f7ff fd15 	bl	8000542 <_write>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d102      	bne.n	8000b22 <_write_r+0x1e>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	b103      	cbz	r3, 8000b22 <_write_r+0x1e>
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	200001b8 	.word	0x200001b8

08000b28 <__errno>:
 8000b28:	4b01      	ldr	r3, [pc, #4]	@ (8000b30 <__errno+0x8>)
 8000b2a:	6818      	ldr	r0, [r3, #0]
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000000c 	.word	0x2000000c

08000b34 <__libc_init_array>:
 8000b34:	b570      	push	{r4, r5, r6, lr}
 8000b36:	2600      	movs	r6, #0
 8000b38:	4d0c      	ldr	r5, [pc, #48]	@ (8000b6c <__libc_init_array+0x38>)
 8000b3a:	4c0d      	ldr	r4, [pc, #52]	@ (8000b70 <__libc_init_array+0x3c>)
 8000b3c:	1b64      	subs	r4, r4, r5
 8000b3e:	10a4      	asrs	r4, r4, #2
 8000b40:	42a6      	cmp	r6, r4
 8000b42:	d109      	bne.n	8000b58 <__libc_init_array+0x24>
 8000b44:	f000 fa50 	bl	8000fe8 <_init>
 8000b48:	2600      	movs	r6, #0
 8000b4a:	4d0a      	ldr	r5, [pc, #40]	@ (8000b74 <__libc_init_array+0x40>)
 8000b4c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b78 <__libc_init_array+0x44>)
 8000b4e:	1b64      	subs	r4, r4, r5
 8000b50:	10a4      	asrs	r4, r4, #2
 8000b52:	42a6      	cmp	r6, r4
 8000b54:	d105      	bne.n	8000b62 <__libc_init_array+0x2e>
 8000b56:	bd70      	pop	{r4, r5, r6, pc}
 8000b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b5c:	4798      	blx	r3
 8000b5e:	3601      	adds	r6, #1
 8000b60:	e7ee      	b.n	8000b40 <__libc_init_array+0xc>
 8000b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b66:	4798      	blx	r3
 8000b68:	3601      	adds	r6, #1
 8000b6a:	e7f2      	b.n	8000b52 <__libc_init_array+0x1e>
 8000b6c:	08001070 	.word	0x08001070
 8000b70:	08001070 	.word	0x08001070
 8000b74:	08001070 	.word	0x08001070
 8000b78:	08001074 	.word	0x08001074

08000b7c <__retarget_lock_init_recursive>:
 8000b7c:	4770      	bx	lr

08000b7e <__retarget_lock_acquire_recursive>:
 8000b7e:	4770      	bx	lr

08000b80 <__retarget_lock_release_recursive>:
 8000b80:	4770      	bx	lr
	...

08000b84 <_free_r>:
 8000b84:	b538      	push	{r3, r4, r5, lr}
 8000b86:	4605      	mov	r5, r0
 8000b88:	2900      	cmp	r1, #0
 8000b8a:	d040      	beq.n	8000c0e <_free_r+0x8a>
 8000b8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000b90:	1f0c      	subs	r4, r1, #4
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	bfb8      	it	lt
 8000b96:	18e4      	addlt	r4, r4, r3
 8000b98:	f000 f8de 	bl	8000d58 <__malloc_lock>
 8000b9c:	4a1c      	ldr	r2, [pc, #112]	@ (8000c10 <_free_r+0x8c>)
 8000b9e:	6813      	ldr	r3, [r2, #0]
 8000ba0:	b933      	cbnz	r3, 8000bb0 <_free_r+0x2c>
 8000ba2:	6063      	str	r3, [r4, #4]
 8000ba4:	6014      	str	r4, [r2, #0]
 8000ba6:	4628      	mov	r0, r5
 8000ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000bac:	f000 b8da 	b.w	8000d64 <__malloc_unlock>
 8000bb0:	42a3      	cmp	r3, r4
 8000bb2:	d908      	bls.n	8000bc6 <_free_r+0x42>
 8000bb4:	6820      	ldr	r0, [r4, #0]
 8000bb6:	1821      	adds	r1, r4, r0
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	bf01      	itttt	eq
 8000bbc:	6819      	ldreq	r1, [r3, #0]
 8000bbe:	685b      	ldreq	r3, [r3, #4]
 8000bc0:	1809      	addeq	r1, r1, r0
 8000bc2:	6021      	streq	r1, [r4, #0]
 8000bc4:	e7ed      	b.n	8000ba2 <_free_r+0x1e>
 8000bc6:	461a      	mov	r2, r3
 8000bc8:	685b      	ldr	r3, [r3, #4]
 8000bca:	b10b      	cbz	r3, 8000bd0 <_free_r+0x4c>
 8000bcc:	42a3      	cmp	r3, r4
 8000bce:	d9fa      	bls.n	8000bc6 <_free_r+0x42>
 8000bd0:	6811      	ldr	r1, [r2, #0]
 8000bd2:	1850      	adds	r0, r2, r1
 8000bd4:	42a0      	cmp	r0, r4
 8000bd6:	d10b      	bne.n	8000bf0 <_free_r+0x6c>
 8000bd8:	6820      	ldr	r0, [r4, #0]
 8000bda:	4401      	add	r1, r0
 8000bdc:	1850      	adds	r0, r2, r1
 8000bde:	4283      	cmp	r3, r0
 8000be0:	6011      	str	r1, [r2, #0]
 8000be2:	d1e0      	bne.n	8000ba6 <_free_r+0x22>
 8000be4:	6818      	ldr	r0, [r3, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	4408      	add	r0, r1
 8000bea:	6010      	str	r0, [r2, #0]
 8000bec:	6053      	str	r3, [r2, #4]
 8000bee:	e7da      	b.n	8000ba6 <_free_r+0x22>
 8000bf0:	d902      	bls.n	8000bf8 <_free_r+0x74>
 8000bf2:	230c      	movs	r3, #12
 8000bf4:	602b      	str	r3, [r5, #0]
 8000bf6:	e7d6      	b.n	8000ba6 <_free_r+0x22>
 8000bf8:	6820      	ldr	r0, [r4, #0]
 8000bfa:	1821      	adds	r1, r4, r0
 8000bfc:	428b      	cmp	r3, r1
 8000bfe:	bf01      	itttt	eq
 8000c00:	6819      	ldreq	r1, [r3, #0]
 8000c02:	685b      	ldreq	r3, [r3, #4]
 8000c04:	1809      	addeq	r1, r1, r0
 8000c06:	6021      	streq	r1, [r4, #0]
 8000c08:	6063      	str	r3, [r4, #4]
 8000c0a:	6054      	str	r4, [r2, #4]
 8000c0c:	e7cb      	b.n	8000ba6 <_free_r+0x22>
 8000c0e:	bd38      	pop	{r3, r4, r5, pc}
 8000c10:	200001c4 	.word	0x200001c4

08000c14 <sbrk_aligned>:
 8000c14:	b570      	push	{r4, r5, r6, lr}
 8000c16:	4e0f      	ldr	r6, [pc, #60]	@ (8000c54 <sbrk_aligned+0x40>)
 8000c18:	460c      	mov	r4, r1
 8000c1a:	6831      	ldr	r1, [r6, #0]
 8000c1c:	4605      	mov	r5, r0
 8000c1e:	b911      	cbnz	r1, 8000c26 <sbrk_aligned+0x12>
 8000c20:	f000 f9d2 	bl	8000fc8 <_sbrk_r>
 8000c24:	6030      	str	r0, [r6, #0]
 8000c26:	4621      	mov	r1, r4
 8000c28:	4628      	mov	r0, r5
 8000c2a:	f000 f9cd 	bl	8000fc8 <_sbrk_r>
 8000c2e:	1c43      	adds	r3, r0, #1
 8000c30:	d103      	bne.n	8000c3a <sbrk_aligned+0x26>
 8000c32:	f04f 34ff 	mov.w	r4, #4294967295
 8000c36:	4620      	mov	r0, r4
 8000c38:	bd70      	pop	{r4, r5, r6, pc}
 8000c3a:	1cc4      	adds	r4, r0, #3
 8000c3c:	f024 0403 	bic.w	r4, r4, #3
 8000c40:	42a0      	cmp	r0, r4
 8000c42:	d0f8      	beq.n	8000c36 <sbrk_aligned+0x22>
 8000c44:	1a21      	subs	r1, r4, r0
 8000c46:	4628      	mov	r0, r5
 8000c48:	f000 f9be 	bl	8000fc8 <_sbrk_r>
 8000c4c:	3001      	adds	r0, #1
 8000c4e:	d1f2      	bne.n	8000c36 <sbrk_aligned+0x22>
 8000c50:	e7ef      	b.n	8000c32 <sbrk_aligned+0x1e>
 8000c52:	bf00      	nop
 8000c54:	200001c0 	.word	0x200001c0

08000c58 <_malloc_r>:
 8000c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000c5c:	1ccd      	adds	r5, r1, #3
 8000c5e:	f025 0503 	bic.w	r5, r5, #3
 8000c62:	3508      	adds	r5, #8
 8000c64:	2d0c      	cmp	r5, #12
 8000c66:	bf38      	it	cc
 8000c68:	250c      	movcc	r5, #12
 8000c6a:	2d00      	cmp	r5, #0
 8000c6c:	4606      	mov	r6, r0
 8000c6e:	db01      	blt.n	8000c74 <_malloc_r+0x1c>
 8000c70:	42a9      	cmp	r1, r5
 8000c72:	d904      	bls.n	8000c7e <_malloc_r+0x26>
 8000c74:	230c      	movs	r3, #12
 8000c76:	6033      	str	r3, [r6, #0]
 8000c78:	2000      	movs	r0, #0
 8000c7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000c7e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000d54 <_malloc_r+0xfc>
 8000c82:	f000 f869 	bl	8000d58 <__malloc_lock>
 8000c86:	f8d8 3000 	ldr.w	r3, [r8]
 8000c8a:	461c      	mov	r4, r3
 8000c8c:	bb44      	cbnz	r4, 8000ce0 <_malloc_r+0x88>
 8000c8e:	4629      	mov	r1, r5
 8000c90:	4630      	mov	r0, r6
 8000c92:	f7ff ffbf 	bl	8000c14 <sbrk_aligned>
 8000c96:	1c43      	adds	r3, r0, #1
 8000c98:	4604      	mov	r4, r0
 8000c9a:	d158      	bne.n	8000d4e <_malloc_r+0xf6>
 8000c9c:	f8d8 4000 	ldr.w	r4, [r8]
 8000ca0:	4627      	mov	r7, r4
 8000ca2:	2f00      	cmp	r7, #0
 8000ca4:	d143      	bne.n	8000d2e <_malloc_r+0xd6>
 8000ca6:	2c00      	cmp	r4, #0
 8000ca8:	d04b      	beq.n	8000d42 <_malloc_r+0xea>
 8000caa:	6823      	ldr	r3, [r4, #0]
 8000cac:	4639      	mov	r1, r7
 8000cae:	4630      	mov	r0, r6
 8000cb0:	eb04 0903 	add.w	r9, r4, r3
 8000cb4:	f000 f988 	bl	8000fc8 <_sbrk_r>
 8000cb8:	4581      	cmp	r9, r0
 8000cba:	d142      	bne.n	8000d42 <_malloc_r+0xea>
 8000cbc:	6821      	ldr	r1, [r4, #0]
 8000cbe:	4630      	mov	r0, r6
 8000cc0:	1a6d      	subs	r5, r5, r1
 8000cc2:	4629      	mov	r1, r5
 8000cc4:	f7ff ffa6 	bl	8000c14 <sbrk_aligned>
 8000cc8:	3001      	adds	r0, #1
 8000cca:	d03a      	beq.n	8000d42 <_malloc_r+0xea>
 8000ccc:	6823      	ldr	r3, [r4, #0]
 8000cce:	442b      	add	r3, r5
 8000cd0:	6023      	str	r3, [r4, #0]
 8000cd2:	f8d8 3000 	ldr.w	r3, [r8]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	bb62      	cbnz	r2, 8000d34 <_malloc_r+0xdc>
 8000cda:	f8c8 7000 	str.w	r7, [r8]
 8000cde:	e00f      	b.n	8000d00 <_malloc_r+0xa8>
 8000ce0:	6822      	ldr	r2, [r4, #0]
 8000ce2:	1b52      	subs	r2, r2, r5
 8000ce4:	d420      	bmi.n	8000d28 <_malloc_r+0xd0>
 8000ce6:	2a0b      	cmp	r2, #11
 8000ce8:	d917      	bls.n	8000d1a <_malloc_r+0xc2>
 8000cea:	1961      	adds	r1, r4, r5
 8000cec:	42a3      	cmp	r3, r4
 8000cee:	6025      	str	r5, [r4, #0]
 8000cf0:	bf18      	it	ne
 8000cf2:	6059      	strne	r1, [r3, #4]
 8000cf4:	6863      	ldr	r3, [r4, #4]
 8000cf6:	bf08      	it	eq
 8000cf8:	f8c8 1000 	streq.w	r1, [r8]
 8000cfc:	5162      	str	r2, [r4, r5]
 8000cfe:	604b      	str	r3, [r1, #4]
 8000d00:	4630      	mov	r0, r6
 8000d02:	f000 f82f 	bl	8000d64 <__malloc_unlock>
 8000d06:	f104 000b 	add.w	r0, r4, #11
 8000d0a:	1d23      	adds	r3, r4, #4
 8000d0c:	f020 0007 	bic.w	r0, r0, #7
 8000d10:	1ac2      	subs	r2, r0, r3
 8000d12:	bf1c      	itt	ne
 8000d14:	1a1b      	subne	r3, r3, r0
 8000d16:	50a3      	strne	r3, [r4, r2]
 8000d18:	e7af      	b.n	8000c7a <_malloc_r+0x22>
 8000d1a:	6862      	ldr	r2, [r4, #4]
 8000d1c:	42a3      	cmp	r3, r4
 8000d1e:	bf0c      	ite	eq
 8000d20:	f8c8 2000 	streq.w	r2, [r8]
 8000d24:	605a      	strne	r2, [r3, #4]
 8000d26:	e7eb      	b.n	8000d00 <_malloc_r+0xa8>
 8000d28:	4623      	mov	r3, r4
 8000d2a:	6864      	ldr	r4, [r4, #4]
 8000d2c:	e7ae      	b.n	8000c8c <_malloc_r+0x34>
 8000d2e:	463c      	mov	r4, r7
 8000d30:	687f      	ldr	r7, [r7, #4]
 8000d32:	e7b6      	b.n	8000ca2 <_malloc_r+0x4a>
 8000d34:	461a      	mov	r2, r3
 8000d36:	685b      	ldr	r3, [r3, #4]
 8000d38:	42a3      	cmp	r3, r4
 8000d3a:	d1fb      	bne.n	8000d34 <_malloc_r+0xdc>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	6053      	str	r3, [r2, #4]
 8000d40:	e7de      	b.n	8000d00 <_malloc_r+0xa8>
 8000d42:	230c      	movs	r3, #12
 8000d44:	4630      	mov	r0, r6
 8000d46:	6033      	str	r3, [r6, #0]
 8000d48:	f000 f80c 	bl	8000d64 <__malloc_unlock>
 8000d4c:	e794      	b.n	8000c78 <_malloc_r+0x20>
 8000d4e:	6005      	str	r5, [r0, #0]
 8000d50:	e7d6      	b.n	8000d00 <_malloc_r+0xa8>
 8000d52:	bf00      	nop
 8000d54:	200001c4 	.word	0x200001c4

08000d58 <__malloc_lock>:
 8000d58:	4801      	ldr	r0, [pc, #4]	@ (8000d60 <__malloc_lock+0x8>)
 8000d5a:	f7ff bf10 	b.w	8000b7e <__retarget_lock_acquire_recursive>
 8000d5e:	bf00      	nop
 8000d60:	200001bc 	.word	0x200001bc

08000d64 <__malloc_unlock>:
 8000d64:	4801      	ldr	r0, [pc, #4]	@ (8000d6c <__malloc_unlock+0x8>)
 8000d66:	f7ff bf0b 	b.w	8000b80 <__retarget_lock_release_recursive>
 8000d6a:	bf00      	nop
 8000d6c:	200001bc 	.word	0x200001bc

08000d70 <__sflush_r>:
 8000d70:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d76:	0716      	lsls	r6, r2, #28
 8000d78:	4605      	mov	r5, r0
 8000d7a:	460c      	mov	r4, r1
 8000d7c:	d454      	bmi.n	8000e28 <__sflush_r+0xb8>
 8000d7e:	684b      	ldr	r3, [r1, #4]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	dc02      	bgt.n	8000d8a <__sflush_r+0x1a>
 8000d84:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	dd48      	ble.n	8000e1c <__sflush_r+0xac>
 8000d8a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000d8c:	2e00      	cmp	r6, #0
 8000d8e:	d045      	beq.n	8000e1c <__sflush_r+0xac>
 8000d90:	2300      	movs	r3, #0
 8000d92:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000d96:	682f      	ldr	r7, [r5, #0]
 8000d98:	6a21      	ldr	r1, [r4, #32]
 8000d9a:	602b      	str	r3, [r5, #0]
 8000d9c:	d030      	beq.n	8000e00 <__sflush_r+0x90>
 8000d9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000da0:	89a3      	ldrh	r3, [r4, #12]
 8000da2:	0759      	lsls	r1, r3, #29
 8000da4:	d505      	bpl.n	8000db2 <__sflush_r+0x42>
 8000da6:	6863      	ldr	r3, [r4, #4]
 8000da8:	1ad2      	subs	r2, r2, r3
 8000daa:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000dac:	b10b      	cbz	r3, 8000db2 <__sflush_r+0x42>
 8000dae:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000db0:	1ad2      	subs	r2, r2, r3
 8000db2:	2300      	movs	r3, #0
 8000db4:	4628      	mov	r0, r5
 8000db6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000db8:	6a21      	ldr	r1, [r4, #32]
 8000dba:	47b0      	blx	r6
 8000dbc:	1c43      	adds	r3, r0, #1
 8000dbe:	89a3      	ldrh	r3, [r4, #12]
 8000dc0:	d106      	bne.n	8000dd0 <__sflush_r+0x60>
 8000dc2:	6829      	ldr	r1, [r5, #0]
 8000dc4:	291d      	cmp	r1, #29
 8000dc6:	d82b      	bhi.n	8000e20 <__sflush_r+0xb0>
 8000dc8:	4a28      	ldr	r2, [pc, #160]	@ (8000e6c <__sflush_r+0xfc>)
 8000dca:	410a      	asrs	r2, r1
 8000dcc:	07d6      	lsls	r6, r2, #31
 8000dce:	d427      	bmi.n	8000e20 <__sflush_r+0xb0>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	6062      	str	r2, [r4, #4]
 8000dd4:	6922      	ldr	r2, [r4, #16]
 8000dd6:	04d9      	lsls	r1, r3, #19
 8000dd8:	6022      	str	r2, [r4, #0]
 8000dda:	d504      	bpl.n	8000de6 <__sflush_r+0x76>
 8000ddc:	1c42      	adds	r2, r0, #1
 8000dde:	d101      	bne.n	8000de4 <__sflush_r+0x74>
 8000de0:	682b      	ldr	r3, [r5, #0]
 8000de2:	b903      	cbnz	r3, 8000de6 <__sflush_r+0x76>
 8000de4:	6560      	str	r0, [r4, #84]	@ 0x54
 8000de6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000de8:	602f      	str	r7, [r5, #0]
 8000dea:	b1b9      	cbz	r1, 8000e1c <__sflush_r+0xac>
 8000dec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000df0:	4299      	cmp	r1, r3
 8000df2:	d002      	beq.n	8000dfa <__sflush_r+0x8a>
 8000df4:	4628      	mov	r0, r5
 8000df6:	f7ff fec5 	bl	8000b84 <_free_r>
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	6363      	str	r3, [r4, #52]	@ 0x34
 8000dfe:	e00d      	b.n	8000e1c <__sflush_r+0xac>
 8000e00:	2301      	movs	r3, #1
 8000e02:	4628      	mov	r0, r5
 8000e04:	47b0      	blx	r6
 8000e06:	4602      	mov	r2, r0
 8000e08:	1c50      	adds	r0, r2, #1
 8000e0a:	d1c9      	bne.n	8000da0 <__sflush_r+0x30>
 8000e0c:	682b      	ldr	r3, [r5, #0]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d0c6      	beq.n	8000da0 <__sflush_r+0x30>
 8000e12:	2b1d      	cmp	r3, #29
 8000e14:	d001      	beq.n	8000e1a <__sflush_r+0xaa>
 8000e16:	2b16      	cmp	r3, #22
 8000e18:	d11d      	bne.n	8000e56 <__sflush_r+0xe6>
 8000e1a:	602f      	str	r7, [r5, #0]
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e021      	b.n	8000e64 <__sflush_r+0xf4>
 8000e20:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e24:	b21b      	sxth	r3, r3
 8000e26:	e01a      	b.n	8000e5e <__sflush_r+0xee>
 8000e28:	690f      	ldr	r7, [r1, #16]
 8000e2a:	2f00      	cmp	r7, #0
 8000e2c:	d0f6      	beq.n	8000e1c <__sflush_r+0xac>
 8000e2e:	0793      	lsls	r3, r2, #30
 8000e30:	bf18      	it	ne
 8000e32:	2300      	movne	r3, #0
 8000e34:	680e      	ldr	r6, [r1, #0]
 8000e36:	bf08      	it	eq
 8000e38:	694b      	ldreq	r3, [r1, #20]
 8000e3a:	1bf6      	subs	r6, r6, r7
 8000e3c:	600f      	str	r7, [r1, #0]
 8000e3e:	608b      	str	r3, [r1, #8]
 8000e40:	2e00      	cmp	r6, #0
 8000e42:	ddeb      	ble.n	8000e1c <__sflush_r+0xac>
 8000e44:	4633      	mov	r3, r6
 8000e46:	463a      	mov	r2, r7
 8000e48:	4628      	mov	r0, r5
 8000e4a:	6a21      	ldr	r1, [r4, #32]
 8000e4c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8000e50:	47e0      	blx	ip
 8000e52:	2800      	cmp	r0, #0
 8000e54:	dc07      	bgt.n	8000e66 <__sflush_r+0xf6>
 8000e56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e5e:	f04f 30ff 	mov.w	r0, #4294967295
 8000e62:	81a3      	strh	r3, [r4, #12]
 8000e64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000e66:	4407      	add	r7, r0
 8000e68:	1a36      	subs	r6, r6, r0
 8000e6a:	e7e9      	b.n	8000e40 <__sflush_r+0xd0>
 8000e6c:	dfbffffe 	.word	0xdfbffffe

08000e70 <_fflush_r>:
 8000e70:	b538      	push	{r3, r4, r5, lr}
 8000e72:	690b      	ldr	r3, [r1, #16]
 8000e74:	4605      	mov	r5, r0
 8000e76:	460c      	mov	r4, r1
 8000e78:	b913      	cbnz	r3, 8000e80 <_fflush_r+0x10>
 8000e7a:	2500      	movs	r5, #0
 8000e7c:	4628      	mov	r0, r5
 8000e7e:	bd38      	pop	{r3, r4, r5, pc}
 8000e80:	b118      	cbz	r0, 8000e8a <_fflush_r+0x1a>
 8000e82:	6a03      	ldr	r3, [r0, #32]
 8000e84:	b90b      	cbnz	r3, 8000e8a <_fflush_r+0x1a>
 8000e86:	f7ff fc95 	bl	80007b4 <__sinit>
 8000e8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d0f3      	beq.n	8000e7a <_fflush_r+0xa>
 8000e92:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8000e94:	07d0      	lsls	r0, r2, #31
 8000e96:	d404      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e98:	0599      	lsls	r1, r3, #22
 8000e9a:	d402      	bmi.n	8000ea2 <_fflush_r+0x32>
 8000e9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000e9e:	f7ff fe6e 	bl	8000b7e <__retarget_lock_acquire_recursive>
 8000ea2:	4628      	mov	r0, r5
 8000ea4:	4621      	mov	r1, r4
 8000ea6:	f7ff ff63 	bl	8000d70 <__sflush_r>
 8000eaa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8000eac:	4605      	mov	r5, r0
 8000eae:	07da      	lsls	r2, r3, #31
 8000eb0:	d4e4      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb2:	89a3      	ldrh	r3, [r4, #12]
 8000eb4:	059b      	lsls	r3, r3, #22
 8000eb6:	d4e1      	bmi.n	8000e7c <_fflush_r+0xc>
 8000eb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8000eba:	f7ff fe61 	bl	8000b80 <__retarget_lock_release_recursive>
 8000ebe:	e7dd      	b.n	8000e7c <_fflush_r+0xc>

08000ec0 <__swhatbuf_r>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	460c      	mov	r4, r1
 8000ec4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ec8:	4615      	mov	r5, r2
 8000eca:	2900      	cmp	r1, #0
 8000ecc:	461e      	mov	r6, r3
 8000ece:	b096      	sub	sp, #88	@ 0x58
 8000ed0:	da0c      	bge.n	8000eec <__swhatbuf_r+0x2c>
 8000ed2:	89a3      	ldrh	r3, [r4, #12]
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8000eda:	bf14      	ite	ne
 8000edc:	2340      	movne	r3, #64	@ 0x40
 8000ede:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8000ee2:	2000      	movs	r0, #0
 8000ee4:	6031      	str	r1, [r6, #0]
 8000ee6:	602b      	str	r3, [r5, #0]
 8000ee8:	b016      	add	sp, #88	@ 0x58
 8000eea:	bd70      	pop	{r4, r5, r6, pc}
 8000eec:	466a      	mov	r2, sp
 8000eee:	f000 f849 	bl	8000f84 <_fstat_r>
 8000ef2:	2800      	cmp	r0, #0
 8000ef4:	dbed      	blt.n	8000ed2 <__swhatbuf_r+0x12>
 8000ef6:	9901      	ldr	r1, [sp, #4]
 8000ef8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8000efc:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8000f00:	4259      	negs	r1, r3
 8000f02:	4159      	adcs	r1, r3
 8000f04:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f08:	e7eb      	b.n	8000ee2 <__swhatbuf_r+0x22>

08000f0a <__smakebuf_r>:
 8000f0a:	898b      	ldrh	r3, [r1, #12]
 8000f0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000f0e:	079d      	lsls	r5, r3, #30
 8000f10:	4606      	mov	r6, r0
 8000f12:	460c      	mov	r4, r1
 8000f14:	d507      	bpl.n	8000f26 <__smakebuf_r+0x1c>
 8000f16:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8000f1a:	6023      	str	r3, [r4, #0]
 8000f1c:	6123      	str	r3, [r4, #16]
 8000f1e:	2301      	movs	r3, #1
 8000f20:	6163      	str	r3, [r4, #20]
 8000f22:	b003      	add	sp, #12
 8000f24:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f26:	466a      	mov	r2, sp
 8000f28:	ab01      	add	r3, sp, #4
 8000f2a:	f7ff ffc9 	bl	8000ec0 <__swhatbuf_r>
 8000f2e:	9f00      	ldr	r7, [sp, #0]
 8000f30:	4605      	mov	r5, r0
 8000f32:	4639      	mov	r1, r7
 8000f34:	4630      	mov	r0, r6
 8000f36:	f7ff fe8f 	bl	8000c58 <_malloc_r>
 8000f3a:	b948      	cbnz	r0, 8000f50 <__smakebuf_r+0x46>
 8000f3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000f40:	059a      	lsls	r2, r3, #22
 8000f42:	d4ee      	bmi.n	8000f22 <__smakebuf_r+0x18>
 8000f44:	f023 0303 	bic.w	r3, r3, #3
 8000f48:	f043 0302 	orr.w	r3, r3, #2
 8000f4c:	81a3      	strh	r3, [r4, #12]
 8000f4e:	e7e2      	b.n	8000f16 <__smakebuf_r+0xc>
 8000f50:	89a3      	ldrh	r3, [r4, #12]
 8000f52:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8000f56:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f5a:	81a3      	strh	r3, [r4, #12]
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	6020      	str	r0, [r4, #0]
 8000f60:	b15b      	cbz	r3, 8000f7a <__smakebuf_r+0x70>
 8000f62:	4630      	mov	r0, r6
 8000f64:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000f68:	f000 f81e 	bl	8000fa8 <_isatty_r>
 8000f6c:	b128      	cbz	r0, 8000f7a <__smakebuf_r+0x70>
 8000f6e:	89a3      	ldrh	r3, [r4, #12]
 8000f70:	f023 0303 	bic.w	r3, r3, #3
 8000f74:	f043 0301 	orr.w	r3, r3, #1
 8000f78:	81a3      	strh	r3, [r4, #12]
 8000f7a:	89a3      	ldrh	r3, [r4, #12]
 8000f7c:	431d      	orrs	r5, r3
 8000f7e:	81a5      	strh	r5, [r4, #12]
 8000f80:	e7cf      	b.n	8000f22 <__smakebuf_r+0x18>
	...

08000f84 <_fstat_r>:
 8000f84:	b538      	push	{r3, r4, r5, lr}
 8000f86:	2300      	movs	r3, #0
 8000f88:	4d06      	ldr	r5, [pc, #24]	@ (8000fa4 <_fstat_r+0x20>)
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	4608      	mov	r0, r1
 8000f8e:	4611      	mov	r1, r2
 8000f90:	602b      	str	r3, [r5, #0]
 8000f92:	f7ff fafd 	bl	8000590 <_fstat>
 8000f96:	1c43      	adds	r3, r0, #1
 8000f98:	d102      	bne.n	8000fa0 <_fstat_r+0x1c>
 8000f9a:	682b      	ldr	r3, [r5, #0]
 8000f9c:	b103      	cbz	r3, 8000fa0 <_fstat_r+0x1c>
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	bd38      	pop	{r3, r4, r5, pc}
 8000fa2:	bf00      	nop
 8000fa4:	200001b8 	.word	0x200001b8

08000fa8 <_isatty_r>:
 8000fa8:	b538      	push	{r3, r4, r5, lr}
 8000faa:	2300      	movs	r3, #0
 8000fac:	4d05      	ldr	r5, [pc, #20]	@ (8000fc4 <_isatty_r+0x1c>)
 8000fae:	4604      	mov	r4, r0
 8000fb0:	4608      	mov	r0, r1
 8000fb2:	602b      	str	r3, [r5, #0]
 8000fb4:	f7ff fafb 	bl	80005ae <_isatty>
 8000fb8:	1c43      	adds	r3, r0, #1
 8000fba:	d102      	bne.n	8000fc2 <_isatty_r+0x1a>
 8000fbc:	682b      	ldr	r3, [r5, #0]
 8000fbe:	b103      	cbz	r3, 8000fc2 <_isatty_r+0x1a>
 8000fc0:	6023      	str	r3, [r4, #0]
 8000fc2:	bd38      	pop	{r3, r4, r5, pc}
 8000fc4:	200001b8 	.word	0x200001b8

08000fc8 <_sbrk_r>:
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	2300      	movs	r3, #0
 8000fcc:	4d05      	ldr	r5, [pc, #20]	@ (8000fe4 <_sbrk_r+0x1c>)
 8000fce:	4604      	mov	r4, r0
 8000fd0:	4608      	mov	r0, r1
 8000fd2:	602b      	str	r3, [r5, #0]
 8000fd4:	f7ff fb02 	bl	80005dc <_sbrk>
 8000fd8:	1c43      	adds	r3, r0, #1
 8000fda:	d102      	bne.n	8000fe2 <_sbrk_r+0x1a>
 8000fdc:	682b      	ldr	r3, [r5, #0]
 8000fde:	b103      	cbz	r3, 8000fe2 <_sbrk_r+0x1a>
 8000fe0:	6023      	str	r3, [r4, #0]
 8000fe2:	bd38      	pop	{r3, r4, r5, pc}
 8000fe4:	200001b8 	.word	0x200001b8

08000fe8 <_init>:
 8000fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fea:	bf00      	nop
 8000fec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fee:	bc08      	pop	{r3}
 8000ff0:	469e      	mov	lr, r3
 8000ff2:	4770      	bx	lr

08000ff4 <_fini>:
 8000ff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ff6:	bf00      	nop
 8000ff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ffa:	bc08      	pop	{r3}
 8000ffc:	469e      	mov	lr, r3
 8000ffe:	4770      	bx	lr

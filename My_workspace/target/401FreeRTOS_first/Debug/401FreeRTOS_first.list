
401FreeRTOS_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007630  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08007810  08007810  00008810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800799c  0800799c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  0800799c  0800799c  0000899c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079a4  080079a4  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079a4  080079a4  000089a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080079a8  080079a8  000089a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  080079ac  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004ca20  20000064  08007a10  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004ca84  08007a10  00009a84  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018567  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000376e  00000000  00000000  000215fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015e0  00000000  00000000  00024d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fa  00000000  00000000  00026350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024440  00000000  00000000  0002744a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a65c  00000000  00000000  0004b88a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dda6f  00000000  00000000  00065ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00143955  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006120  00000000  00000000  00143998  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00149ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	080077f8 	.word	0x080077f8

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	080077f8 	.word	0x080077f8

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2004b364 	.word	0x2004b364
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96a 	b.w	800064c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	460c      	mov	r4, r1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d14e      	bne.n	800043a <__udivmoddi4+0xaa>
 800039c:	4694      	mov	ip, r2
 800039e:	458c      	cmp	ip, r1
 80003a0:	4686      	mov	lr, r0
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	d962      	bls.n	800046e <__udivmoddi4+0xde>
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0320 	rsb	r3, r2, #32
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fa20 f303 	lsr.w	r3, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	4319      	orrs	r1, r3
 80003ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80003be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c2:	fa1f f68c 	uxth.w	r6, ip
 80003c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb07 1114 	mls	r1, r7, r4, r1
 80003d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d6:	fb04 f106 	mul.w	r1, r4, r6
 80003da:	4299      	cmp	r1, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x64>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003e6:	f080 8112 	bcs.w	800060e <__udivmoddi4+0x27e>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 810f 	bls.w	800060e <__udivmoddi4+0x27e>
 80003f0:	3c02      	subs	r4, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	fa1f f38e 	uxth.w	r3, lr
 80003fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fe:	fb07 1110 	mls	r1, r7, r0, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb00 f606 	mul.w	r6, r0, r6
 800040a:	429e      	cmp	r6, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x94>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 31ff 	add.w	r1, r0, #4294967295
 8000416:	f080 80fc 	bcs.w	8000612 <__udivmoddi4+0x282>
 800041a:	429e      	cmp	r6, r3
 800041c:	f240 80f9 	bls.w	8000612 <__udivmoddi4+0x282>
 8000420:	4463      	add	r3, ip
 8000422:	3802      	subs	r0, #2
 8000424:	1b9b      	subs	r3, r3, r6
 8000426:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800042a:	2100      	movs	r1, #0
 800042c:	b11d      	cbz	r5, 8000436 <__udivmoddi4+0xa6>
 800042e:	40d3      	lsrs	r3, r2
 8000430:	2200      	movs	r2, #0
 8000432:	e9c5 3200 	strd	r3, r2, [r5]
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	428b      	cmp	r3, r1
 800043c:	d905      	bls.n	800044a <__udivmoddi4+0xba>
 800043e:	b10d      	cbz	r5, 8000444 <__udivmoddi4+0xb4>
 8000440:	e9c5 0100 	strd	r0, r1, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	4608      	mov	r0, r1
 8000448:	e7f5      	b.n	8000436 <__udivmoddi4+0xa6>
 800044a:	fab3 f183 	clz	r1, r3
 800044e:	2900      	cmp	r1, #0
 8000450:	d146      	bne.n	80004e0 <__udivmoddi4+0x150>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xcc>
 8000456:	4290      	cmp	r0, r2
 8000458:	f0c0 80f0 	bcc.w	800063c <__udivmoddi4+0x2ac>
 800045c:	1a86      	subs	r6, r0, r2
 800045e:	eb64 0303 	sbc.w	r3, r4, r3
 8000462:	2001      	movs	r0, #1
 8000464:	2d00      	cmp	r5, #0
 8000466:	d0e6      	beq.n	8000436 <__udivmoddi4+0xa6>
 8000468:	e9c5 6300 	strd	r6, r3, [r5]
 800046c:	e7e3      	b.n	8000436 <__udivmoddi4+0xa6>
 800046e:	2a00      	cmp	r2, #0
 8000470:	f040 8090 	bne.w	8000594 <__udivmoddi4+0x204>
 8000474:	eba1 040c 	sub.w	r4, r1, ip
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	2101      	movs	r1, #1
 8000482:	fbb4 f6f8 	udiv	r6, r4, r8
 8000486:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800048a:	fb08 4416 	mls	r4, r8, r6, r4
 800048e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000492:	fb07 f006 	mul.w	r0, r7, r6
 8000496:	4298      	cmp	r0, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x11c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f106 34ff 	add.w	r4, r6, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x11a>
 80004a4:	4298      	cmp	r0, r3
 80004a6:	f200 80cd 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 80004aa:	4626      	mov	r6, r4
 80004ac:	1a1c      	subs	r4, r3, r0
 80004ae:	fa1f f38e 	uxth.w	r3, lr
 80004b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004b6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004be:	fb00 f707 	mul.w	r7, r0, r7
 80004c2:	429f      	cmp	r7, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x148>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ce:	d202      	bcs.n	80004d6 <__udivmoddi4+0x146>
 80004d0:	429f      	cmp	r7, r3
 80004d2:	f200 80b0 	bhi.w	8000636 <__udivmoddi4+0x2a6>
 80004d6:	4620      	mov	r0, r4
 80004d8:	1bdb      	subs	r3, r3, r7
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	e7a5      	b.n	800042c <__udivmoddi4+0x9c>
 80004e0:	f1c1 0620 	rsb	r6, r1, #32
 80004e4:	408b      	lsls	r3, r1
 80004e6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ea:	431f      	orrs	r7, r3
 80004ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80004f0:	fa04 f301 	lsl.w	r3, r4, r1
 80004f4:	ea43 030c 	orr.w	r3, r3, ip
 80004f8:	40f4      	lsrs	r4, r6
 80004fa:	fa00 f801 	lsl.w	r8, r0, r1
 80004fe:	0c38      	lsrs	r0, r7, #16
 8000500:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000504:	fbb4 fef0 	udiv	lr, r4, r0
 8000508:	fa1f fc87 	uxth.w	ip, r7
 800050c:	fb00 441e 	mls	r4, r0, lr, r4
 8000510:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000514:	fb0e f90c 	mul.w	r9, lr, ip
 8000518:	45a1      	cmp	r9, r4
 800051a:	fa02 f201 	lsl.w	r2, r2, r1
 800051e:	d90a      	bls.n	8000536 <__udivmoddi4+0x1a6>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000526:	f080 8084 	bcs.w	8000632 <__udivmoddi4+0x2a2>
 800052a:	45a1      	cmp	r9, r4
 800052c:	f240 8081 	bls.w	8000632 <__udivmoddi4+0x2a2>
 8000530:	f1ae 0e02 	sub.w	lr, lr, #2
 8000534:	443c      	add	r4, r7
 8000536:	eba4 0409 	sub.w	r4, r4, r9
 800053a:	fa1f f983 	uxth.w	r9, r3
 800053e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000542:	fb00 4413 	mls	r4, r0, r3, r4
 8000546:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800054a:	fb03 fc0c 	mul.w	ip, r3, ip
 800054e:	45a4      	cmp	ip, r4
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x1d2>
 8000552:	193c      	adds	r4, r7, r4
 8000554:	f103 30ff 	add.w	r0, r3, #4294967295
 8000558:	d267      	bcs.n	800062a <__udivmoddi4+0x29a>
 800055a:	45a4      	cmp	ip, r4
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0x29a>
 800055e:	3b02      	subs	r3, #2
 8000560:	443c      	add	r4, r7
 8000562:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000566:	fba0 9302 	umull	r9, r3, r0, r2
 800056a:	eba4 040c 	sub.w	r4, r4, ip
 800056e:	429c      	cmp	r4, r3
 8000570:	46ce      	mov	lr, r9
 8000572:	469c      	mov	ip, r3
 8000574:	d351      	bcc.n	800061a <__udivmoddi4+0x28a>
 8000576:	d04e      	beq.n	8000616 <__udivmoddi4+0x286>
 8000578:	b155      	cbz	r5, 8000590 <__udivmoddi4+0x200>
 800057a:	ebb8 030e 	subs.w	r3, r8, lr
 800057e:	eb64 040c 	sbc.w	r4, r4, ip
 8000582:	fa04 f606 	lsl.w	r6, r4, r6
 8000586:	40cb      	lsrs	r3, r1
 8000588:	431e      	orrs	r6, r3
 800058a:	40cc      	lsrs	r4, r1
 800058c:	e9c5 6400 	strd	r6, r4, [r5]
 8000590:	2100      	movs	r1, #0
 8000592:	e750      	b.n	8000436 <__udivmoddi4+0xa6>
 8000594:	f1c2 0320 	rsb	r3, r2, #32
 8000598:	fa20 f103 	lsr.w	r1, r0, r3
 800059c:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a0:	fa24 f303 	lsr.w	r3, r4, r3
 80005a4:	4094      	lsls	r4, r2
 80005a6:	430c      	orrs	r4, r1
 80005a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80005b0:	fa1f f78c 	uxth.w	r7, ip
 80005b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b8:	fb08 3110 	mls	r1, r8, r0, r3
 80005bc:	0c23      	lsrs	r3, r4, #16
 80005be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c2:	fb00 f107 	mul.w	r1, r0, r7
 80005c6:	4299      	cmp	r1, r3
 80005c8:	d908      	bls.n	80005dc <__udivmoddi4+0x24c>
 80005ca:	eb1c 0303 	adds.w	r3, ip, r3
 80005ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80005d2:	d22c      	bcs.n	800062e <__udivmoddi4+0x29e>
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d92a      	bls.n	800062e <__udivmoddi4+0x29e>
 80005d8:	3802      	subs	r0, #2
 80005da:	4463      	add	r3, ip
 80005dc:	1a5b      	subs	r3, r3, r1
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005e4:	fb08 3311 	mls	r3, r8, r1, r3
 80005e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ec:	fb01 f307 	mul.w	r3, r1, r7
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x276>
 80005f4:	eb1c 0404 	adds.w	r4, ip, r4
 80005f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005fc:	d213      	bcs.n	8000626 <__udivmoddi4+0x296>
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d911      	bls.n	8000626 <__udivmoddi4+0x296>
 8000602:	3902      	subs	r1, #2
 8000604:	4464      	add	r4, ip
 8000606:	1ae4      	subs	r4, r4, r3
 8000608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800060c:	e739      	b.n	8000482 <__udivmoddi4+0xf2>
 800060e:	4604      	mov	r4, r0
 8000610:	e6f0      	b.n	80003f4 <__udivmoddi4+0x64>
 8000612:	4608      	mov	r0, r1
 8000614:	e706      	b.n	8000424 <__udivmoddi4+0x94>
 8000616:	45c8      	cmp	r8, r9
 8000618:	d2ae      	bcs.n	8000578 <__udivmoddi4+0x1e8>
 800061a:	ebb9 0e02 	subs.w	lr, r9, r2
 800061e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000622:	3801      	subs	r0, #1
 8000624:	e7a8      	b.n	8000578 <__udivmoddi4+0x1e8>
 8000626:	4631      	mov	r1, r6
 8000628:	e7ed      	b.n	8000606 <__udivmoddi4+0x276>
 800062a:	4603      	mov	r3, r0
 800062c:	e799      	b.n	8000562 <__udivmoddi4+0x1d2>
 800062e:	4630      	mov	r0, r6
 8000630:	e7d4      	b.n	80005dc <__udivmoddi4+0x24c>
 8000632:	46d6      	mov	lr, sl
 8000634:	e77f      	b.n	8000536 <__udivmoddi4+0x1a6>
 8000636:	4463      	add	r3, ip
 8000638:	3802      	subs	r0, #2
 800063a:	e74d      	b.n	80004d8 <__udivmoddi4+0x148>
 800063c:	4606      	mov	r6, r0
 800063e:	4623      	mov	r3, r4
 8000640:	4608      	mov	r0, r1
 8000642:	e70f      	b.n	8000464 <__udivmoddi4+0xd4>
 8000644:	3e02      	subs	r6, #2
 8000646:	4463      	add	r3, ip
 8000648:	e730      	b.n	80004ac <__udivmoddi4+0x11c>
 800064a:	bf00      	nop

0800064c <__aeabi_idiv0>:
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fb5f 	bl	8000d18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f855 	bl	8000708 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f8e9 	bl	8000834 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000662:	f000 f8bd 	bl	80007e0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000666:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <main+0x9c>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <main+0x9c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6013      	str	r3, [r2, #0]

  //SEGGER_UART_init(50000);

  SEGGER_SYSVIEW_Conf();
 8000672:	f004 fb4b 	bl	8004d0c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000676:	f005 fe71 	bl	800635c <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 800067a:	f107 0308 	add.w	r3, r7, #8
 800067e:	9301      	str	r3, [sp, #4]
 8000680:	2302      	movs	r3, #2
 8000682:	9300      	str	r3, [sp, #0]
 8000684:	4b1a      	ldr	r3, [pc, #104]	@ (80006f0 <main+0xa0>)
 8000686:	22c8      	movs	r2, #200	@ 0xc8
 8000688:	491a      	ldr	r1, [pc, #104]	@ (80006f4 <main+0xa4>)
 800068a:	481b      	ldr	r0, [pc, #108]	@ (80006f8 <main+0xa8>)
 800068c:	f002 fc2a 	bl	8002ee4 <xTaskCreate>
 8000690:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b01      	cmp	r3, #1
 8000696:	d00b      	beq.n	80006b0 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800069c:	f383 8811 	msr	BASEPRI, r3
 80006a0:	f3bf 8f6f 	isb	sy
 80006a4:	f3bf 8f4f 	dsb	sy
 80006a8:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <main+0x5c>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006b0:	1d3b      	adds	r3, r7, #4
 80006b2:	9301      	str	r3, [sp, #4]
 80006b4:	2302      	movs	r3, #2
 80006b6:	9300      	str	r3, [sp, #0]
 80006b8:	4b10      	ldr	r3, [pc, #64]	@ (80006fc <main+0xac>)
 80006ba:	22c8      	movs	r2, #200	@ 0xc8
 80006bc:	4910      	ldr	r1, [pc, #64]	@ (8000700 <main+0xb0>)
 80006be:	4811      	ldr	r0, [pc, #68]	@ (8000704 <main+0xb4>)
 80006c0:	f002 fc10 	bl	8002ee4 <xTaskCreate>
 80006c4:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006c6:	697b      	ldr	r3, [r7, #20]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d00b      	beq.n	80006e4 <main+0x94>
        __asm volatile
 80006cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006d0:	f383 8811 	msr	BASEPRI, r3
 80006d4:	f3bf 8f6f 	isb	sy
 80006d8:	f3bf 8f4f 	dsb	sy
 80006dc:	60fb      	str	r3, [r7, #12]
    }
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	e7fd      	b.n	80006e0 <main+0x90>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80006e4:	f002 fd88 	bl	80031f8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e8:	bf00      	nop
 80006ea:	e7fd      	b.n	80006e8 <main+0x98>
 80006ec:	e0001000 	.word	0xe0001000
 80006f0:	08007810 	.word	0x08007810
 80006f4:	08007828 	.word	0x08007828
 80006f8:	080009dd 	.word	0x080009dd
 80006fc:	08007830 	.word	0x08007830
 8000700:	08007848 	.word	0x08007848
 8000704:	08000a15 	.word	0x08000a15

08000708 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b094      	sub	sp, #80	@ 0x50
 800070c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070e:	f107 031c 	add.w	r3, r7, #28
 8000712:	2234      	movs	r2, #52	@ 0x34
 8000714:	2100      	movs	r1, #0
 8000716:	4618      	mov	r0, r3
 8000718:	f006 fbe6 	bl	8006ee8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800071c:	f107 0308 	add.w	r3, r7, #8
 8000720:	2200      	movs	r2, #0
 8000722:	601a      	str	r2, [r3, #0]
 8000724:	605a      	str	r2, [r3, #4]
 8000726:	609a      	str	r2, [r3, #8]
 8000728:	60da      	str	r2, [r3, #12]
 800072a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800072c:	2300      	movs	r3, #0
 800072e:	607b      	str	r3, [r7, #4]
 8000730:	4b29      	ldr	r3, [pc, #164]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000734:	4a28      	ldr	r2, [pc, #160]	@ (80007d8 <SystemClock_Config+0xd0>)
 8000736:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800073a:	6413      	str	r3, [r2, #64]	@ 0x40
 800073c:	4b26      	ldr	r3, [pc, #152]	@ (80007d8 <SystemClock_Config+0xd0>)
 800073e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000740:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000744:	607b      	str	r3, [r7, #4]
 8000746:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000748:	2300      	movs	r3, #0
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	4b23      	ldr	r3, [pc, #140]	@ (80007dc <SystemClock_Config+0xd4>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4a22      	ldr	r2, [pc, #136]	@ (80007dc <SystemClock_Config+0xd4>)
 8000752:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000756:	6013      	str	r3, [r2, #0]
 8000758:	4b20      	ldr	r3, [pc, #128]	@ (80007dc <SystemClock_Config+0xd4>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000760:	603b      	str	r3, [r7, #0]
 8000762:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000764:	2302      	movs	r3, #2
 8000766:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000768:	2301      	movs	r3, #1
 800076a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800076c:	2310      	movs	r3, #16
 800076e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000770:	2302      	movs	r3, #2
 8000772:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000778:	2308      	movs	r3, #8
 800077a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 800077c:	2364      	movs	r3, #100	@ 0x64
 800077e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000788:	2302      	movs	r3, #2
 800078a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800078c:	f107 031c 	add.w	r3, r7, #28
 8000790:	4618      	mov	r0, r3
 8000792:	f000 ffe5 	bl	8001760 <HAL_RCC_OscConfig>
 8000796:	4603      	mov	r3, r0
 8000798:	2b00      	cmp	r3, #0
 800079a:	d001      	beq.n	80007a0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800079c:	f000 f968 	bl	8000a70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007a0:	230f      	movs	r3, #15
 80007a2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a4:	2302      	movs	r3, #2
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b8:	f107 0308 	add.w	r3, r7, #8
 80007bc:	2103      	movs	r1, #3
 80007be:	4618      	mov	r0, r3
 80007c0:	f000 fd7c 	bl	80012bc <HAL_RCC_ClockConfig>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007ca:	f000 f951 	bl	8000a70 <Error_Handler>
  }
}
 80007ce:	bf00      	nop
 80007d0:	3750      	adds	r7, #80	@ 0x50
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	40023800 	.word	0x40023800
 80007dc:	40007000 	.word	0x40007000

080007e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007e4:	4b11      	ldr	r3, [pc, #68]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	@ (8000830 <MX_USART2_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000804:	4b09      	ldr	r3, [pc, #36]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000806:	220c      	movs	r2, #12
 8000808:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	@ (800082c <MX_USART2_UART_Init+0x4c>)
 8000818:	f001 fcc8 	bl	80021ac <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f000 f925 	bl	8000a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	20000080 	.word	0x20000080
 8000830:	40004400 	.word	0x40004400

08000834 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b08c      	sub	sp, #48	@ 0x30
 8000838:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083a:	f107 031c 	add.w	r3, r7, #28
 800083e:	2200      	movs	r2, #0
 8000840:	601a      	str	r2, [r3, #0]
 8000842:	605a      	str	r2, [r3, #4]
 8000844:	609a      	str	r2, [r3, #8]
 8000846:	60da      	str	r2, [r3, #12]
 8000848:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084a:	2300      	movs	r3, #0
 800084c:	61bb      	str	r3, [r7, #24]
 800084e:	4b5d      	ldr	r3, [pc, #372]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000852:	4a5c      	ldr	r2, [pc, #368]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000854:	f043 0304 	orr.w	r3, r3, #4
 8000858:	6313      	str	r3, [r2, #48]	@ 0x30
 800085a:	4b5a      	ldr	r3, [pc, #360]	@ (80009c4 <MX_GPIO_Init+0x190>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	f003 0304 	and.w	r3, r3, #4
 8000862:	61bb      	str	r3, [r7, #24]
 8000864:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000866:	2300      	movs	r3, #0
 8000868:	617b      	str	r3, [r7, #20]
 800086a:	4b56      	ldr	r3, [pc, #344]	@ (80009c4 <MX_GPIO_Init+0x190>)
 800086c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086e:	4a55      	ldr	r2, [pc, #340]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000870:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000874:	6313      	str	r3, [r2, #48]	@ 0x30
 8000876:	4b53      	ldr	r3, [pc, #332]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800087e:	617b      	str	r3, [r7, #20]
 8000880:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000882:	2300      	movs	r3, #0
 8000884:	613b      	str	r3, [r7, #16]
 8000886:	4b4f      	ldr	r3, [pc, #316]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088a:	4a4e      	ldr	r2, [pc, #312]	@ (80009c4 <MX_GPIO_Init+0x190>)
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6313      	str	r3, [r2, #48]	@ 0x30
 8000892:	4b4c      	ldr	r3, [pc, #304]	@ (80009c4 <MX_GPIO_Init+0x190>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	f003 0301 	and.w	r3, r3, #1
 800089a:	613b      	str	r3, [r7, #16]
 800089c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	60fb      	str	r3, [r7, #12]
 80008a2:	4b48      	ldr	r3, [pc, #288]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a6:	4a47      	ldr	r2, [pc, #284]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ae:	4b45      	ldr	r3, [pc, #276]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	60fb      	str	r3, [r7, #12]
 80008b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	4b41      	ldr	r3, [pc, #260]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c2:	4a40      	ldr	r2, [pc, #256]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008c4:	f043 0308 	orr.w	r3, r3, #8
 80008c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ca:	4b3e      	ldr	r3, [pc, #248]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	f003 0308 	and.w	r3, r3, #8
 80008d2:	60bb      	str	r3, [r7, #8]
 80008d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	607b      	str	r3, [r7, #4]
 80008da:	4b3a      	ldr	r3, [pc, #232]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008de:	4a39      	ldr	r2, [pc, #228]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008e6:	4b37      	ldr	r3, [pc, #220]	@ (80009c4 <MX_GPIO_Init+0x190>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008f2:	2200      	movs	r2, #0
 80008f4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008f8:	4833      	ldr	r0, [pc, #204]	@ (80009c8 <MX_GPIO_Init+0x194>)
 80008fa:	f000 fcc5 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008fe:	2200      	movs	r2, #0
 8000900:	2140      	movs	r1, #64	@ 0x40
 8000902:	4832      	ldr	r0, [pc, #200]	@ (80009cc <MX_GPIO_Init+0x198>)
 8000904:	f000 fcc0 	bl	8001288 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000908:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800090e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	4619      	mov	r1, r3
 800091e:	482c      	ldr	r0, [pc, #176]	@ (80009d0 <MX_GPIO_Init+0x19c>)
 8000920:	f000 fb1e 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000924:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800092a:	2301      	movs	r3, #1
 800092c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000932:	2300      	movs	r3, #0
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000936:	f107 031c 	add.w	r3, r7, #28
 800093a:	4619      	mov	r1, r3
 800093c:	4822      	ldr	r0, [pc, #136]	@ (80009c8 <MX_GPIO_Init+0x194>)
 800093e:	f000 fb0f 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000942:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000948:	2302      	movs	r3, #2
 800094a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094c:	2300      	movs	r3, #0
 800094e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000950:	2303      	movs	r3, #3
 8000952:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000954:	2307      	movs	r3, #7
 8000956:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000958:	f107 031c 	add.w	r3, r7, #28
 800095c:	4619      	mov	r1, r3
 800095e:	481d      	ldr	r0, [pc, #116]	@ (80009d4 <MX_GPIO_Init+0x1a0>)
 8000960:	f000 fafe 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000964:	2340      	movs	r3, #64	@ 0x40
 8000966:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	4814      	ldr	r0, [pc, #80]	@ (80009cc <MX_GPIO_Init+0x198>)
 800097c:	f000 faf0 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000980:	2380      	movs	r3, #128	@ 0x80
 8000982:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000984:	2300      	movs	r3, #0
 8000986:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800098c:	f107 031c 	add.w	r3, r7, #28
 8000990:	4619      	mov	r1, r3
 8000992:	480e      	ldr	r0, [pc, #56]	@ (80009cc <MX_GPIO_Init+0x198>)
 8000994:	f000 fae4 	bl	8000f60 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000998:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800099c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099e:	2302      	movs	r3, #2
 80009a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a6:	2303      	movs	r3, #3
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80009aa:	230a      	movs	r3, #10
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ae:	f107 031c 	add.w	r3, r7, #28
 80009b2:	4619      	mov	r1, r3
 80009b4:	4808      	ldr	r0, [pc, #32]	@ (80009d8 <MX_GPIO_Init+0x1a4>)
 80009b6:	f000 fad3 	bl	8000f60 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009ba:	bf00      	nop
 80009bc:	3730      	adds	r7, #48	@ 0x30
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020400 	.word	0x40020400
 80009cc:	40021800 	.word	0x40021800
 80009d0:	40020800 	.word	0x40020800
 80009d4:	40020c00 	.word	0x40020c00
 80009d8:	40020000 	.word	0x40020000

080009dc <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 80009dc:	b580      	push	{r7, lr}
 80009de:	b09c      	sub	sp, #112	@ 0x70
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,(char*)parameters);
 80009e4:	f107 030c 	add.w	r3, r7, #12
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	2164      	movs	r1, #100	@ 0x64
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 fa37 	bl	8006e60 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 80009f2:	f107 030c 	add.w	r3, r7, #12
 80009f6:	4618      	mov	r0, r3
 80009f8:	f006 f9c2 	bl	8006d80 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80009fc:	4b04      	ldr	r3, [pc, #16]	@ (8000a10 <task1_handler+0x34>)
 80009fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a02:	601a      	str	r2, [r3, #0]
 8000a04:	f3bf 8f4f 	dsb	sy
 8000a08:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,(char*)parameters);
 8000a0c:	bf00      	nop
 8000a0e:	e7e9      	b.n	80009e4 <task1_handler+0x8>
 8000a10:	e000ed04 	.word	0xe000ed04

08000a14 <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b09c      	sub	sp, #112	@ 0x70
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	char msg[100];
		while(1){
			//printf("%s\n", (char*)parameters);
			snprintf(msg,100,(char*)parameters);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	2164      	movs	r1, #100	@ 0x64
 8000a24:	4618      	mov	r0, r3
 8000a26:	f006 fa1b 	bl	8006e60 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 8000a2a:	f107 030c 	add.w	r3, r7, #12
 8000a2e:	4618      	mov	r0, r3
 8000a30:	f006 f9a6 	bl	8006d80 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 8000a34:	4b04      	ldr	r3, [pc, #16]	@ (8000a48 <task2_handler+0x34>)
 8000a36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	f3bf 8f4f 	dsb	sy
 8000a40:	f3bf 8f6f 	isb	sy
			snprintf(msg,100,(char*)parameters);
 8000a44:	bf00      	nop
 8000a46:	e7e9      	b.n	8000a1c <task2_handler+0x8>
 8000a48:	e000ed04 	.word	0xe000ed04

08000a4c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a04      	ldr	r2, [pc, #16]	@ (8000a6c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d101      	bne.n	8000a62 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a5e:	f000 f97d 	bl	8000d5c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a62:	bf00      	nop
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40001000 	.word	0x40001000

08000a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a74:	b672      	cpsid	i
}
 8000a76:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a78:	bf00      	nop
 8000a7a:	e7fd      	b.n	8000a78 <Error_Handler+0x8>

08000a7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	4b10      	ldr	r3, [pc, #64]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a8a:	4a0f      	ldr	r2, [pc, #60]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a8c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a90:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a92:	4b0d      	ldr	r3, [pc, #52]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a96:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a9a:	607b      	str	r3, [r7, #4]
 8000a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	603b      	str	r3, [r7, #0]
 8000aa2:	4b09      	ldr	r3, [pc, #36]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aa6:	4a08      	ldr	r2, [pc, #32]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000aa8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aac:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aae:	4b06      	ldr	r3, [pc, #24]	@ (8000ac8 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ab2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ab6:	603b      	str	r3, [r7, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000aba:	f003 fd97 	bl	80045ec <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	40023800 	.word	0x40023800

08000acc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b08a      	sub	sp, #40	@ 0x28
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad4:	f107 0314 	add.w	r3, r7, #20
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	681b      	ldr	r3, [r3, #0]
 8000ae8:	4a19      	ldr	r2, [pc, #100]	@ (8000b50 <HAL_UART_MspInit+0x84>)
 8000aea:	4293      	cmp	r3, r2
 8000aec:	d12b      	bne.n	8000b46 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	613b      	str	r3, [r7, #16]
 8000af2:	4b18      	ldr	r3, [pc, #96]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000af6:	4a17      	ldr	r2, [pc, #92]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000af8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000afc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000afe:	4b15      	ldr	r3, [pc, #84]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b06:	613b      	str	r3, [r7, #16]
 8000b08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60fb      	str	r3, [r7, #12]
 8000b0e:	4b11      	ldr	r3, [pc, #68]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a10      	ldr	r2, [pc, #64]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b14:	f043 0301 	orr.w	r3, r3, #1
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b54 <HAL_UART_MspInit+0x88>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0301 	and.w	r3, r3, #1
 8000b22:	60fb      	str	r3, [r7, #12]
 8000b24:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b26:	230c      	movs	r3, #12
 8000b28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b32:	2303      	movs	r3, #3
 8000b34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b36:	2307      	movs	r3, #7
 8000b38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3a:	f107 0314 	add.w	r3, r7, #20
 8000b3e:	4619      	mov	r1, r3
 8000b40:	4805      	ldr	r0, [pc, #20]	@ (8000b58 <HAL_UART_MspInit+0x8c>)
 8000b42:	f000 fa0d 	bl	8000f60 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000b46:	bf00      	nop
 8000b48:	3728      	adds	r7, #40	@ 0x28
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40004400 	.word	0x40004400
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40020000 	.word	0x40020000

08000b5c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b08e      	sub	sp, #56	@ 0x38
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b64:	2300      	movs	r3, #0
 8000b66:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	4b33      	ldr	r3, [pc, #204]	@ (8000c40 <HAL_InitTick+0xe4>)
 8000b72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b74:	4a32      	ldr	r2, [pc, #200]	@ (8000c40 <HAL_InitTick+0xe4>)
 8000b76:	f043 0310 	orr.w	r3, r3, #16
 8000b7a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b7c:	4b30      	ldr	r3, [pc, #192]	@ (8000c40 <HAL_InitTick+0xe4>)
 8000b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b80:	f003 0310 	and.w	r3, r3, #16
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b88:	f107 0210 	add.w	r2, r7, #16
 8000b8c:	f107 0314 	add.w	r3, r7, #20
 8000b90:	4611      	mov	r1, r2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f000 fdb2 	bl	80016fc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b98:	6a3b      	ldr	r3, [r7, #32]
 8000b9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d103      	bne.n	8000baa <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ba2:	f000 fd83 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8000ba6:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ba8:	e004      	b.n	8000bb4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000baa:	f000 fd7f 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8000bae:	4603      	mov	r3, r0
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000bb6:	4a23      	ldr	r2, [pc, #140]	@ (8000c44 <HAL_InitTick+0xe8>)
 8000bb8:	fba2 2303 	umull	r2, r3, r2, r3
 8000bbc:	0c9b      	lsrs	r3, r3, #18
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000bc2:	4b21      	ldr	r3, [pc, #132]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bc4:	4a21      	ldr	r2, [pc, #132]	@ (8000c4c <HAL_InitTick+0xf0>)
 8000bc6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000bc8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bca:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000bce:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000bd0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000bd4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000bd6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bdc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be2:	4b19      	ldr	r3, [pc, #100]	@ (8000c48 <HAL_InitTick+0xec>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000be8:	4817      	ldr	r0, [pc, #92]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bea:	f001 f83d 	bl	8001c68 <HAL_TIM_Base_Init>
 8000bee:	4603      	mov	r3, r0
 8000bf0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bf4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d11b      	bne.n	8000c34 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bfc:	4812      	ldr	r0, [pc, #72]	@ (8000c48 <HAL_InitTick+0xec>)
 8000bfe:	f001 f88d 	bl	8001d1c <HAL_TIM_Base_Start_IT>
 8000c02:	4603      	mov	r3, r0
 8000c04:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000c08:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d111      	bne.n	8000c34 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000c10:	2036      	movs	r0, #54	@ 0x36
 8000c12:	f000 f997 	bl	8000f44 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2b0f      	cmp	r3, #15
 8000c1a:	d808      	bhi.n	8000c2e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	6879      	ldr	r1, [r7, #4]
 8000c20:	2036      	movs	r0, #54	@ 0x36
 8000c22:	f000 f973 	bl	8000f0c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c26:	4a0a      	ldr	r2, [pc, #40]	@ (8000c50 <HAL_InitTick+0xf4>)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	6013      	str	r3, [r2, #0]
 8000c2c:	e002      	b.n	8000c34 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c34:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3738      	adds	r7, #56	@ 0x38
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	40023800 	.word	0x40023800
 8000c44:	431bde83 	.word	0x431bde83
 8000c48:	200000c8 	.word	0x200000c8
 8000c4c:	40001000 	.word	0x40001000
 8000c50:	20000004 	.word	0x20000004

08000c54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c58:	bf00      	nop
 8000c5a:	e7fd      	b.n	8000c58 <NMI_Handler+0x4>

08000c5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c60:	bf00      	nop
 8000c62:	e7fd      	b.n	8000c60 <HardFault_Handler+0x4>

08000c64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c64:	b480      	push	{r7}
 8000c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c68:	bf00      	nop
 8000c6a:	e7fd      	b.n	8000c68 <MemManage_Handler+0x4>

08000c6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c6c:	b480      	push	{r7}
 8000c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c70:	bf00      	nop
 8000c72:	e7fd      	b.n	8000c70 <BusFault_Handler+0x4>

08000c74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c78:	bf00      	nop
 8000c7a:	e7fd      	b.n	8000c78 <UsageFault_Handler+0x4>

08000c7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c80:	bf00      	nop
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c90:	4802      	ldr	r0, [pc, #8]	@ (8000c9c <TIM6_DAC_IRQHandler+0x10>)
 8000c92:	f001 f8b3 	bl	8001dfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c96:	bf00      	nop
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	200000c8 	.word	0x200000c8

08000ca0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ca4:	4b06      	ldr	r3, [pc, #24]	@ (8000cc0 <SystemInit+0x20>)
 8000ca6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000caa:	4a05      	ldr	r2, [pc, #20]	@ (8000cc0 <SystemInit+0x20>)
 8000cac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000cb0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000cc4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000cfc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cc8:	f7ff ffea 	bl	8000ca0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ccc:	480c      	ldr	r0, [pc, #48]	@ (8000d00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cce:	490d      	ldr	r1, [pc, #52]	@ (8000d04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cd0:	4a0d      	ldr	r2, [pc, #52]	@ (8000d08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cd4:	e002      	b.n	8000cdc <LoopCopyDataInit>

08000cd6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cd6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cd8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cda:	3304      	adds	r3, #4

08000cdc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cdc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cde:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ce0:	d3f9      	bcc.n	8000cd6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ce2:	4a0a      	ldr	r2, [pc, #40]	@ (8000d0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ce4:	4c0a      	ldr	r4, [pc, #40]	@ (8000d10 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ce8:	e001      	b.n	8000cee <LoopFillZerobss>

08000cea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cec:	3204      	adds	r2, #4

08000cee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cf0:	d3fb      	bcc.n	8000cea <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cf2:	f006 f901 	bl	8006ef8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cf6:	f7ff fcab 	bl	8000650 <main>
  bx  lr    
 8000cfa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000cfc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000d00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d04:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d08:	080079ac 	.word	0x080079ac
  ldr r2, =_sbss
 8000d0c:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d10:	2004ca84 	.word	0x2004ca84

08000d14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d14:	e7fe      	b.n	8000d14 <ADC_IRQHandler>
	...

08000d18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d1c:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <HAL_Init+0x40>)
 8000d1e:	681b      	ldr	r3, [r3, #0]
 8000d20:	4a0d      	ldr	r2, [pc, #52]	@ (8000d58 <HAL_Init+0x40>)
 8000d22:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d28:	4b0b      	ldr	r3, [pc, #44]	@ (8000d58 <HAL_Init+0x40>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	4a0a      	ldr	r2, [pc, #40]	@ (8000d58 <HAL_Init+0x40>)
 8000d2e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d34:	4b08      	ldr	r3, [pc, #32]	@ (8000d58 <HAL_Init+0x40>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a07      	ldr	r2, [pc, #28]	@ (8000d58 <HAL_Init+0x40>)
 8000d3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d40:	2003      	movs	r0, #3
 8000d42:	f000 f8d8 	bl	8000ef6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d46:	200f      	movs	r0, #15
 8000d48:	f7ff ff08 	bl	8000b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d4c:	f7ff fe96 	bl	8000a7c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	40023c00 	.word	0x40023c00

08000d5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d60:	4b06      	ldr	r3, [pc, #24]	@ (8000d7c <HAL_IncTick+0x20>)
 8000d62:	781b      	ldrb	r3, [r3, #0]
 8000d64:	461a      	mov	r2, r3
 8000d66:	4b06      	ldr	r3, [pc, #24]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a04      	ldr	r2, [pc, #16]	@ (8000d80 <HAL_IncTick+0x24>)
 8000d6e:	6013      	str	r3, [r2, #0]
}
 8000d70:	bf00      	nop
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000008 	.word	0x20000008
 8000d80:	20000110 	.word	0x20000110

08000d84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  return uwTick;
 8000d88:	4b03      	ldr	r3, [pc, #12]	@ (8000d98 <HAL_GetTick+0x14>)
 8000d8a:	681b      	ldr	r3, [r3, #0]
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop
 8000d98:	20000110 	.word	0x20000110

08000d9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	f003 0307 	and.w	r3, r3, #7
 8000daa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000dac:	4b0c      	ldr	r3, [pc, #48]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dae:	68db      	ldr	r3, [r3, #12]
 8000db0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000db2:	68ba      	ldr	r2, [r7, #8]
 8000db4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000db8:	4013      	ands	r3, r2
 8000dba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dc4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dc8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000dcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dce:	4a04      	ldr	r2, [pc, #16]	@ (8000de0 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	60d3      	str	r3, [r2, #12]
}
 8000dd4:	bf00      	nop
 8000dd6:	3714      	adds	r7, #20
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <__NVIC_GetPriorityGrouping+0x18>)
 8000dea:	68db      	ldr	r3, [r3, #12]
 8000dec:	0a1b      	lsrs	r3, r3, #8
 8000dee:	f003 0307 	and.w	r3, r3, #7
}
 8000df2:	4618      	mov	r0, r3
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	db0b      	blt.n	8000e2a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e12:	79fb      	ldrb	r3, [r7, #7]
 8000e14:	f003 021f 	and.w	r2, r3, #31
 8000e18:	4907      	ldr	r1, [pc, #28]	@ (8000e38 <__NVIC_EnableIRQ+0x38>)
 8000e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	2001      	movs	r0, #1
 8000e22:	fa00 f202 	lsl.w	r2, r0, r2
 8000e26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e2a:	bf00      	nop
 8000e2c:	370c      	adds	r7, #12
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop
 8000e38:	e000e100 	.word	0xe000e100

08000e3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	4603      	mov	r3, r0
 8000e44:	6039      	str	r1, [r7, #0]
 8000e46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	db0a      	blt.n	8000e66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	b2da      	uxtb	r2, r3
 8000e54:	490c      	ldr	r1, [pc, #48]	@ (8000e88 <__NVIC_SetPriority+0x4c>)
 8000e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5a:	0112      	lsls	r2, r2, #4
 8000e5c:	b2d2      	uxtb	r2, r2
 8000e5e:	440b      	add	r3, r1
 8000e60:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e64:	e00a      	b.n	8000e7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	4908      	ldr	r1, [pc, #32]	@ (8000e8c <__NVIC_SetPriority+0x50>)
 8000e6c:	79fb      	ldrb	r3, [r7, #7]
 8000e6e:	f003 030f 	and.w	r3, r3, #15
 8000e72:	3b04      	subs	r3, #4
 8000e74:	0112      	lsls	r2, r2, #4
 8000e76:	b2d2      	uxtb	r2, r2
 8000e78:	440b      	add	r3, r1
 8000e7a:	761a      	strb	r2, [r3, #24]
}
 8000e7c:	bf00      	nop
 8000e7e:	370c      	adds	r7, #12
 8000e80:	46bd      	mov	sp, r7
 8000e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e86:	4770      	bx	lr
 8000e88:	e000e100 	.word	0xe000e100
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b089      	sub	sp, #36	@ 0x24
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	60f8      	str	r0, [r7, #12]
 8000e98:	60b9      	str	r1, [r7, #8]
 8000e9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	f1c3 0307 	rsb	r3, r3, #7
 8000eaa:	2b04      	cmp	r3, #4
 8000eac:	bf28      	it	cs
 8000eae:	2304      	movcs	r3, #4
 8000eb0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	3304      	adds	r3, #4
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d902      	bls.n	8000ec0 <NVIC_EncodePriority+0x30>
 8000eba:	69fb      	ldr	r3, [r7, #28]
 8000ebc:	3b03      	subs	r3, #3
 8000ebe:	e000      	b.n	8000ec2 <NVIC_EncodePriority+0x32>
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ec8:	69bb      	ldr	r3, [r7, #24]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	43da      	mvns	r2, r3
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	401a      	ands	r2, r3
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee2:	43d9      	mvns	r1, r3
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ee8:	4313      	orrs	r3, r2
         );
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3724      	adds	r7, #36	@ 0x24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ff4c 	bl	8000d9c <__NVIC_SetPriorityGrouping>
}
 8000f04:	bf00      	nop
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b086      	sub	sp, #24
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	60b9      	str	r1, [r7, #8]
 8000f16:	607a      	str	r2, [r7, #4]
 8000f18:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f1e:	f7ff ff61 	bl	8000de4 <__NVIC_GetPriorityGrouping>
 8000f22:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f24:	687a      	ldr	r2, [r7, #4]
 8000f26:	68b9      	ldr	r1, [r7, #8]
 8000f28:	6978      	ldr	r0, [r7, #20]
 8000f2a:	f7ff ffb1 	bl	8000e90 <NVIC_EncodePriority>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f34:	4611      	mov	r1, r2
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff80 	bl	8000e3c <__NVIC_SetPriority>
}
 8000f3c:	bf00      	nop
 8000f3e:	3718      	adds	r7, #24
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b082      	sub	sp, #8
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff54 	bl	8000e00 <__NVIC_EnableIRQ>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	@ 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f72:	2300      	movs	r3, #0
 8000f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f76:	2300      	movs	r3, #0
 8000f78:	61fb      	str	r3, [r7, #28]
 8000f7a:	e165      	b.n	8001248 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	697a      	ldr	r2, [r7, #20]
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	429a      	cmp	r2, r3
 8000f96:	f040 8154 	bne.w	8001242 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f003 0303 	and.w	r3, r3, #3
 8000fa2:	2b01      	cmp	r3, #1
 8000fa4:	d005      	beq.n	8000fb2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	685b      	ldr	r3, [r3, #4]
 8000faa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000fae:	2b02      	cmp	r3, #2
 8000fb0:	d130      	bne.n	8001014 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000fb8:	69fb      	ldr	r3, [r7, #28]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	69ba      	ldr	r2, [r7, #24]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	68da      	ldr	r2, [r3, #12]
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	69ba      	ldr	r2, [r7, #24]
 8000fe0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fe8:	2201      	movs	r2, #1
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff0:	43db      	mvns	r3, r3
 8000ff2:	69ba      	ldr	r2, [r7, #24]
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	091b      	lsrs	r3, r3, #4
 8000ffe:	f003 0201 	and.w	r2, r3, #1
 8001002:	69fb      	ldr	r3, [r7, #28]
 8001004:	fa02 f303 	lsl.w	r3, r2, r3
 8001008:	69ba      	ldr	r2, [r7, #24]
 800100a:	4313      	orrs	r3, r2
 800100c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	69ba      	ldr	r2, [r7, #24]
 8001012:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	2b03      	cmp	r3, #3
 800101e:	d017      	beq.n	8001050 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	2203      	movs	r2, #3
 800102c:	fa02 f303 	lsl.w	r3, r2, r3
 8001030:	43db      	mvns	r3, r3
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4013      	ands	r3, r2
 8001036:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	689a      	ldr	r2, [r3, #8]
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	005b      	lsls	r3, r3, #1
 8001040:	fa02 f303 	lsl.w	r3, r2, r3
 8001044:	69ba      	ldr	r2, [r7, #24]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	69ba      	ldr	r2, [r7, #24]
 800104e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001050:	683b      	ldr	r3, [r7, #0]
 8001052:	685b      	ldr	r3, [r3, #4]
 8001054:	f003 0303 	and.w	r3, r3, #3
 8001058:	2b02      	cmp	r3, #2
 800105a:	d123      	bne.n	80010a4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800105c:	69fb      	ldr	r3, [r7, #28]
 800105e:	08da      	lsrs	r2, r3, #3
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	3208      	adds	r2, #8
 8001064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001068:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800106a:	69fb      	ldr	r3, [r7, #28]
 800106c:	f003 0307 	and.w	r3, r3, #7
 8001070:	009b      	lsls	r3, r3, #2
 8001072:	220f      	movs	r2, #15
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	69ba      	ldr	r2, [r7, #24]
 800107c:	4013      	ands	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	691a      	ldr	r2, [r3, #16]
 8001084:	69fb      	ldr	r3, [r7, #28]
 8001086:	f003 0307 	and.w	r3, r3, #7
 800108a:	009b      	lsls	r3, r3, #2
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4313      	orrs	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	08da      	lsrs	r2, r3, #3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	3208      	adds	r2, #8
 800109e:	69b9      	ldr	r1, [r7, #24]
 80010a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	2203      	movs	r2, #3
 80010b0:	fa02 f303 	lsl.w	r3, r2, r3
 80010b4:	43db      	mvns	r3, r3
 80010b6:	69ba      	ldr	r2, [r7, #24]
 80010b8:	4013      	ands	r3, r2
 80010ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f003 0203 	and.w	r2, r3, #3
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	005b      	lsls	r3, r3, #1
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	4313      	orrs	r3, r2
 80010d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	69ba      	ldr	r2, [r7, #24]
 80010d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	f000 80ae 	beq.w	8001242 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ee:	4a5c      	ldr	r2, [pc, #368]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010f0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010f6:	4b5a      	ldr	r3, [pc, #360]	@ (8001260 <HAL_GPIO_Init+0x300>)
 80010f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001102:	4a58      	ldr	r2, [pc, #352]	@ (8001264 <HAL_GPIO_Init+0x304>)
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	3302      	adds	r3, #2
 800110a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800110e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001110:	69fb      	ldr	r3, [r7, #28]
 8001112:	f003 0303 	and.w	r3, r3, #3
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	220f      	movs	r2, #15
 800111a:	fa02 f303 	lsl.w	r3, r2, r3
 800111e:	43db      	mvns	r3, r3
 8001120:	69ba      	ldr	r2, [r7, #24]
 8001122:	4013      	ands	r3, r2
 8001124:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a4f      	ldr	r2, [pc, #316]	@ (8001268 <HAL_GPIO_Init+0x308>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_Init+0x21a>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a4e      	ldr	r2, [pc, #312]	@ (800126c <HAL_GPIO_Init+0x30c>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_Init+0x216>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a4d      	ldr	r2, [pc, #308]	@ (8001270 <HAL_GPIO_Init+0x310>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_Init+0x212>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <HAL_GPIO_Init+0x314>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_Init+0x20e>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a4b      	ldr	r2, [pc, #300]	@ (8001278 <HAL_GPIO_Init+0x318>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_Init+0x20a>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a4a      	ldr	r2, [pc, #296]	@ (800127c <HAL_GPIO_Init+0x31c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_Init+0x206>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a49      	ldr	r2, [pc, #292]	@ (8001280 <HAL_GPIO_Init+0x320>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_Init+0x202>
 800115e:	2306      	movs	r3, #6
 8001160:	e00c      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001162:	2307      	movs	r3, #7
 8001164:	e00a      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001166:	2305      	movs	r3, #5
 8001168:	e008      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116a:	2304      	movs	r3, #4
 800116c:	e006      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800116e:	2303      	movs	r3, #3
 8001170:	e004      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001172:	2302      	movs	r3, #2
 8001174:	e002      	b.n	800117c <HAL_GPIO_Init+0x21c>
 8001176:	2301      	movs	r3, #1
 8001178:	e000      	b.n	800117c <HAL_GPIO_Init+0x21c>
 800117a:	2300      	movs	r3, #0
 800117c:	69fa      	ldr	r2, [r7, #28]
 800117e:	f002 0203 	and.w	r2, r2, #3
 8001182:	0092      	lsls	r2, r2, #2
 8001184:	4093      	lsls	r3, r2
 8001186:	69ba      	ldr	r2, [r7, #24]
 8001188:	4313      	orrs	r3, r2
 800118a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800118c:	4935      	ldr	r1, [pc, #212]	@ (8001264 <HAL_GPIO_Init+0x304>)
 800118e:	69fb      	ldr	r3, [r7, #28]
 8001190:	089b      	lsrs	r3, r3, #2
 8001192:	3302      	adds	r3, #2
 8001194:	69ba      	ldr	r2, [r7, #24]
 8001196:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800119a:	4b3a      	ldr	r3, [pc, #232]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011a0:	693b      	ldr	r3, [r7, #16]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	69ba      	ldr	r2, [r7, #24]
 80011a6:	4013      	ands	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80011b6:	69ba      	ldr	r2, [r7, #24]
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011be:	4a31      	ldr	r2, [pc, #196]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011c0:	69bb      	ldr	r3, [r7, #24]
 80011c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011c4:	4b2f      	ldr	r3, [pc, #188]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d003      	beq.n	80011e8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011e0:	69ba      	ldr	r2, [r7, #24]
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	4313      	orrs	r3, r2
 80011e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011e8:	4a26      	ldr	r2, [pc, #152]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011ee:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <HAL_GPIO_Init+0x324>)
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	43db      	mvns	r3, r3
 80011f8:	69ba      	ldr	r2, [r7, #24]
 80011fa:	4013      	ands	r3, r2
 80011fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001206:	2b00      	cmp	r3, #0
 8001208:	d003      	beq.n	8001212 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800120a:	69ba      	ldr	r2, [r7, #24]
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	4313      	orrs	r3, r2
 8001210:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001212:	4a1c      	ldr	r2, [pc, #112]	@ (8001284 <HAL_GPIO_Init+0x324>)
 8001214:	69bb      	ldr	r3, [r7, #24]
 8001216:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	43db      	mvns	r3, r3
 8001222:	69ba      	ldr	r2, [r7, #24]
 8001224:	4013      	ands	r3, r2
 8001226:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001230:	2b00      	cmp	r3, #0
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	4313      	orrs	r3, r2
 800123a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800123c:	4a11      	ldr	r2, [pc, #68]	@ (8001284 <HAL_GPIO_Init+0x324>)
 800123e:	69bb      	ldr	r3, [r7, #24]
 8001240:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3301      	adds	r3, #1
 8001246:	61fb      	str	r3, [r7, #28]
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	2b0f      	cmp	r3, #15
 800124c:	f67f ae96 	bls.w	8000f7c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	3724      	adds	r7, #36	@ 0x24
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	40023800 	.word	0x40023800
 8001264:	40013800 	.word	0x40013800
 8001268:	40020000 	.word	0x40020000
 800126c:	40020400 	.word	0x40020400
 8001270:	40020800 	.word	0x40020800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	40021000 	.word	0x40021000
 800127c:	40021400 	.word	0x40021400
 8001280:	40021800 	.word	0x40021800
 8001284:	40013c00 	.word	0x40013c00

08001288 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001288:	b480      	push	{r7}
 800128a:	b083      	sub	sp, #12
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	460b      	mov	r3, r1
 8001292:	807b      	strh	r3, [r7, #2]
 8001294:	4613      	mov	r3, r2
 8001296:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001298:	787b      	ldrb	r3, [r7, #1]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d003      	beq.n	80012a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800129e:	887a      	ldrh	r2, [r7, #2]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80012a4:	e003      	b.n	80012ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80012a6:	887b      	ldrh	r3, [r7, #2]
 80012a8:	041a      	lsls	r2, r3, #16
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	370c      	adds	r7, #12
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
 80012c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d101      	bne.n	80012d0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012cc:	2301      	movs	r3, #1
 80012ce:	e0cc      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80012d0:	4b68      	ldr	r3, [pc, #416]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	f003 0307 	and.w	r3, r3, #7
 80012d8:	683a      	ldr	r2, [r7, #0]
 80012da:	429a      	cmp	r2, r3
 80012dc:	d90c      	bls.n	80012f8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012de:	4b65      	ldr	r3, [pc, #404]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	b2d2      	uxtb	r2, r2
 80012e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e6:	4b63      	ldr	r3, [pc, #396]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	683a      	ldr	r2, [r7, #0]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d001      	beq.n	80012f8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e0b8      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d020      	beq.n	8001346 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	2b00      	cmp	r3, #0
 800130e:	d005      	beq.n	800131c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001310:	4b59      	ldr	r3, [pc, #356]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	4a58      	ldr	r2, [pc, #352]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001316:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800131a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0308 	and.w	r3, r3, #8
 8001324:	2b00      	cmp	r3, #0
 8001326:	d005      	beq.n	8001334 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001328:	4b53      	ldr	r3, [pc, #332]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a52      	ldr	r2, [pc, #328]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001332:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001334:	4b50      	ldr	r3, [pc, #320]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	689b      	ldr	r3, [r3, #8]
 8001338:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	689b      	ldr	r3, [r3, #8]
 8001340:	494d      	ldr	r1, [pc, #308]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001342:	4313      	orrs	r3, r2
 8001344:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0301 	and.w	r3, r3, #1
 800134e:	2b00      	cmp	r3, #0
 8001350:	d044      	beq.n	80013dc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d107      	bne.n	800136a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800135a:	4b47      	ldr	r3, [pc, #284]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001362:	2b00      	cmp	r3, #0
 8001364:	d119      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e07f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b02      	cmp	r3, #2
 8001370:	d003      	beq.n	800137a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001376:	2b03      	cmp	r3, #3
 8001378:	d107      	bne.n	800138a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800137a:	4b3f      	ldr	r3, [pc, #252]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001382:	2b00      	cmp	r3, #0
 8001384:	d109      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001386:	2301      	movs	r3, #1
 8001388:	e06f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800138a:	4b3b      	ldr	r3, [pc, #236]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f003 0302 	and.w	r3, r3, #2
 8001392:	2b00      	cmp	r3, #0
 8001394:	d101      	bne.n	800139a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e067      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800139a:	4b37      	ldr	r3, [pc, #220]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	f023 0203 	bic.w	r2, r3, #3
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	4934      	ldr	r1, [pc, #208]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 80013a8:	4313      	orrs	r3, r2
 80013aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80013ac:	f7ff fcea 	bl	8000d84 <HAL_GetTick>
 80013b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013b2:	e00a      	b.n	80013ca <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80013b4:	f7ff fce6 	bl	8000d84 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013c2:	4293      	cmp	r3, r2
 80013c4:	d901      	bls.n	80013ca <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80013c6:	2303      	movs	r3, #3
 80013c8:	e04f      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80013ca:	4b2b      	ldr	r3, [pc, #172]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 80013cc:	689b      	ldr	r3, [r3, #8]
 80013ce:	f003 020c 	and.w	r2, r3, #12
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	429a      	cmp	r2, r3
 80013da:	d1eb      	bne.n	80013b4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80013dc:	4b25      	ldr	r3, [pc, #148]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0307 	and.w	r3, r3, #7
 80013e4:	683a      	ldr	r2, [r7, #0]
 80013e6:	429a      	cmp	r2, r3
 80013e8:	d20c      	bcs.n	8001404 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ea:	4b22      	ldr	r3, [pc, #136]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013ec:	683a      	ldr	r2, [r7, #0]
 80013ee:	b2d2      	uxtb	r2, r2
 80013f0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f2:	4b20      	ldr	r3, [pc, #128]	@ (8001474 <HAL_RCC_ClockConfig+0x1b8>)
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0307 	and.w	r3, r3, #7
 80013fa:	683a      	ldr	r2, [r7, #0]
 80013fc:	429a      	cmp	r2, r3
 80013fe:	d001      	beq.n	8001404 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e032      	b.n	800146a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	d008      	beq.n	8001422 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001410:	4b19      	ldr	r3, [pc, #100]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	68db      	ldr	r3, [r3, #12]
 800141c:	4916      	ldr	r1, [pc, #88]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800141e:	4313      	orrs	r3, r2
 8001420:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800142e:	4b12      	ldr	r3, [pc, #72]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	691b      	ldr	r3, [r3, #16]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	490e      	ldr	r1, [pc, #56]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	4313      	orrs	r3, r2
 8001440:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001442:	f000 f821 	bl	8001488 <HAL_RCC_GetSysClockFreq>
 8001446:	4602      	mov	r2, r0
 8001448:	4b0b      	ldr	r3, [pc, #44]	@ (8001478 <HAL_RCC_ClockConfig+0x1bc>)
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	091b      	lsrs	r3, r3, #4
 800144e:	f003 030f 	and.w	r3, r3, #15
 8001452:	490a      	ldr	r1, [pc, #40]	@ (800147c <HAL_RCC_ClockConfig+0x1c0>)
 8001454:	5ccb      	ldrb	r3, [r1, r3]
 8001456:	fa22 f303 	lsr.w	r3, r2, r3
 800145a:	4a09      	ldr	r2, [pc, #36]	@ (8001480 <HAL_RCC_ClockConfig+0x1c4>)
 800145c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800145e:	4b09      	ldr	r3, [pc, #36]	@ (8001484 <HAL_RCC_ClockConfig+0x1c8>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff fb7a 	bl	8000b5c <HAL_InitTick>

  return HAL_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023c00 	.word	0x40023c00
 8001478:	40023800 	.word	0x40023800
 800147c:	0800792c 	.word	0x0800792c
 8001480:	20000000 	.word	0x20000000
 8001484:	20000004 	.word	0x20000004

08001488 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001488:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800148c:	b094      	sub	sp, #80	@ 0x50
 800148e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001490:	2300      	movs	r3, #0
 8001492:	647b      	str	r3, [r7, #68]	@ 0x44
 8001494:	2300      	movs	r3, #0
 8001496:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001498:	2300      	movs	r3, #0
 800149a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80014a0:	4b79      	ldr	r3, [pc, #484]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 80014a2:	689b      	ldr	r3, [r3, #8]
 80014a4:	f003 030c 	and.w	r3, r3, #12
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d00d      	beq.n	80014c8 <HAL_RCC_GetSysClockFreq+0x40>
 80014ac:	2b08      	cmp	r3, #8
 80014ae:	f200 80e1 	bhi.w	8001674 <HAL_RCC_GetSysClockFreq+0x1ec>
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d002      	beq.n	80014bc <HAL_RCC_GetSysClockFreq+0x34>
 80014b6:	2b04      	cmp	r3, #4
 80014b8:	d003      	beq.n	80014c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80014ba:	e0db      	b.n	8001674 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80014bc:	4b73      	ldr	r3, [pc, #460]	@ (800168c <HAL_RCC_GetSysClockFreq+0x204>)
 80014be:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80014c0:	e0db      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80014c2:	4b73      	ldr	r3, [pc, #460]	@ (8001690 <HAL_RCC_GetSysClockFreq+0x208>)
 80014c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80014c6:	e0d8      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80014c8:	4b6f      	ldr	r3, [pc, #444]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80014d0:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80014d2:	4b6d      	ldr	r3, [pc, #436]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d063      	beq.n	80015a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014de:	4b6a      	ldr	r3, [pc, #424]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 80014e0:	685b      	ldr	r3, [r3, #4]
 80014e2:	099b      	lsrs	r3, r3, #6
 80014e4:	2200      	movs	r2, #0
 80014e6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80014e8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80014ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80014f2:	2300      	movs	r3, #0
 80014f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80014f6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80014fa:	4622      	mov	r2, r4
 80014fc:	462b      	mov	r3, r5
 80014fe:	f04f 0000 	mov.w	r0, #0
 8001502:	f04f 0100 	mov.w	r1, #0
 8001506:	0159      	lsls	r1, r3, #5
 8001508:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800150c:	0150      	lsls	r0, r2, #5
 800150e:	4602      	mov	r2, r0
 8001510:	460b      	mov	r3, r1
 8001512:	4621      	mov	r1, r4
 8001514:	1a51      	subs	r1, r2, r1
 8001516:	6139      	str	r1, [r7, #16]
 8001518:	4629      	mov	r1, r5
 800151a:	eb63 0301 	sbc.w	r3, r3, r1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	f04f 0200 	mov.w	r2, #0
 8001524:	f04f 0300 	mov.w	r3, #0
 8001528:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800152c:	4659      	mov	r1, fp
 800152e:	018b      	lsls	r3, r1, #6
 8001530:	4651      	mov	r1, sl
 8001532:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001536:	4651      	mov	r1, sl
 8001538:	018a      	lsls	r2, r1, #6
 800153a:	4651      	mov	r1, sl
 800153c:	ebb2 0801 	subs.w	r8, r2, r1
 8001540:	4659      	mov	r1, fp
 8001542:	eb63 0901 	sbc.w	r9, r3, r1
 8001546:	f04f 0200 	mov.w	r2, #0
 800154a:	f04f 0300 	mov.w	r3, #0
 800154e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800155a:	4690      	mov	r8, r2
 800155c:	4699      	mov	r9, r3
 800155e:	4623      	mov	r3, r4
 8001560:	eb18 0303 	adds.w	r3, r8, r3
 8001564:	60bb      	str	r3, [r7, #8]
 8001566:	462b      	mov	r3, r5
 8001568:	eb49 0303 	adc.w	r3, r9, r3
 800156c:	60fb      	str	r3, [r7, #12]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800157a:	4629      	mov	r1, r5
 800157c:	024b      	lsls	r3, r1, #9
 800157e:	4621      	mov	r1, r4
 8001580:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001584:	4621      	mov	r1, r4
 8001586:	024a      	lsls	r2, r1, #9
 8001588:	4610      	mov	r0, r2
 800158a:	4619      	mov	r1, r3
 800158c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800158e:	2200      	movs	r2, #0
 8001590:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001592:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001594:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001598:	f7fe fee2 	bl	8000360 <__aeabi_uldivmod>
 800159c:	4602      	mov	r2, r0
 800159e:	460b      	mov	r3, r1
 80015a0:	4613      	mov	r3, r2
 80015a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80015a4:	e058      	b.n	8001658 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015a6:	4b38      	ldr	r3, [pc, #224]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	099b      	lsrs	r3, r3, #6
 80015ac:	2200      	movs	r2, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	4611      	mov	r1, r2
 80015b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80015b6:	623b      	str	r3, [r7, #32]
 80015b8:	2300      	movs	r3, #0
 80015ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80015bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80015c0:	4642      	mov	r2, r8
 80015c2:	464b      	mov	r3, r9
 80015c4:	f04f 0000 	mov.w	r0, #0
 80015c8:	f04f 0100 	mov.w	r1, #0
 80015cc:	0159      	lsls	r1, r3, #5
 80015ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80015d2:	0150      	lsls	r0, r2, #5
 80015d4:	4602      	mov	r2, r0
 80015d6:	460b      	mov	r3, r1
 80015d8:	4641      	mov	r1, r8
 80015da:	ebb2 0a01 	subs.w	sl, r2, r1
 80015de:	4649      	mov	r1, r9
 80015e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80015e4:	f04f 0200 	mov.w	r2, #0
 80015e8:	f04f 0300 	mov.w	r3, #0
 80015ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80015f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80015f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80015f8:	ebb2 040a 	subs.w	r4, r2, sl
 80015fc:	eb63 050b 	sbc.w	r5, r3, fp
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	f04f 0300 	mov.w	r3, #0
 8001608:	00eb      	lsls	r3, r5, #3
 800160a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800160e:	00e2      	lsls	r2, r4, #3
 8001610:	4614      	mov	r4, r2
 8001612:	461d      	mov	r5, r3
 8001614:	4643      	mov	r3, r8
 8001616:	18e3      	adds	r3, r4, r3
 8001618:	603b      	str	r3, [r7, #0]
 800161a:	464b      	mov	r3, r9
 800161c:	eb45 0303 	adc.w	r3, r5, r3
 8001620:	607b      	str	r3, [r7, #4]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	f04f 0300 	mov.w	r3, #0
 800162a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800162e:	4629      	mov	r1, r5
 8001630:	028b      	lsls	r3, r1, #10
 8001632:	4621      	mov	r1, r4
 8001634:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001638:	4621      	mov	r1, r4
 800163a:	028a      	lsls	r2, r1, #10
 800163c:	4610      	mov	r0, r2
 800163e:	4619      	mov	r1, r3
 8001640:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001642:	2200      	movs	r2, #0
 8001644:	61bb      	str	r3, [r7, #24]
 8001646:	61fa      	str	r2, [r7, #28]
 8001648:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800164c:	f7fe fe88 	bl	8000360 <__aeabi_uldivmod>
 8001650:	4602      	mov	r2, r0
 8001652:	460b      	mov	r3, r1
 8001654:	4613      	mov	r3, r2
 8001656:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001658:	4b0b      	ldr	r3, [pc, #44]	@ (8001688 <HAL_RCC_GetSysClockFreq+0x200>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	0c1b      	lsrs	r3, r3, #16
 800165e:	f003 0303 	and.w	r3, r3, #3
 8001662:	3301      	adds	r3, #1
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001668:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800166a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800166c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001670:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001672:	e002      	b.n	800167a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001674:	4b05      	ldr	r3, [pc, #20]	@ (800168c <HAL_RCC_GetSysClockFreq+0x204>)
 8001676:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001678:	bf00      	nop
    }
  }
  return sysclockfreq;
 800167a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800167c:	4618      	mov	r0, r3
 800167e:	3750      	adds	r7, #80	@ 0x50
 8001680:	46bd      	mov	sp, r7
 8001682:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	00f42400 	.word	0x00f42400
 8001690:	007a1200 	.word	0x007a1200

08001694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001694:	b480      	push	{r7}
 8001696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001698:	4b03      	ldr	r3, [pc, #12]	@ (80016a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800169a:	681b      	ldr	r3, [r3, #0]
}
 800169c:	4618      	mov	r0, r3
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	20000000 	.word	0x20000000

080016ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80016b0:	f7ff fff0 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016b4:	4602      	mov	r2, r0
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80016b8:	689b      	ldr	r3, [r3, #8]
 80016ba:	0a9b      	lsrs	r3, r3, #10
 80016bc:	f003 0307 	and.w	r3, r3, #7
 80016c0:	4903      	ldr	r1, [pc, #12]	@ (80016d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80016c2:	5ccb      	ldrb	r3, [r1, r3]
 80016c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	0800793c 	.word	0x0800793c

080016d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80016d8:	f7ff ffdc 	bl	8001694 <HAL_RCC_GetHCLKFreq>
 80016dc:	4602      	mov	r2, r0
 80016de:	4b05      	ldr	r3, [pc, #20]	@ (80016f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80016e0:	689b      	ldr	r3, [r3, #8]
 80016e2:	0b5b      	lsrs	r3, r3, #13
 80016e4:	f003 0307 	and.w	r3, r3, #7
 80016e8:	4903      	ldr	r1, [pc, #12]	@ (80016f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80016ea:	5ccb      	ldrb	r3, [r1, r3]
 80016ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	40023800 	.word	0x40023800
 80016f8:	0800793c 	.word	0x0800793c

080016fc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80016fc:	b480      	push	{r7}
 80016fe:	b083      	sub	sp, #12
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]
 8001704:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	220f      	movs	r2, #15
 800170a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800170c:	4b12      	ldr	r3, [pc, #72]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f003 0203 	and.w	r2, r3, #3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001718:	4b0f      	ldr	r3, [pc, #60]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001724:	4b0c      	ldr	r3, [pc, #48]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 8001726:	689b      	ldr	r3, [r3, #8]
 8001728:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001730:	4b09      	ldr	r3, [pc, #36]	@ (8001758 <HAL_RCC_GetClockConfig+0x5c>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	08db      	lsrs	r3, r3, #3
 8001736:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800173e:	4b07      	ldr	r3, [pc, #28]	@ (800175c <HAL_RCC_GetClockConfig+0x60>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0207 	and.w	r2, r3, #7
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	601a      	str	r2, [r3, #0]
}
 800174a:	bf00      	nop
 800174c:	370c      	adds	r7, #12
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40023c00 	.word	0x40023c00

08001760 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b086      	sub	sp, #24
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d101      	bne.n	8001772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800176e:	2301      	movs	r3, #1
 8001770:	e273      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0301 	and.w	r3, r3, #1
 800177a:	2b00      	cmp	r3, #0
 800177c:	d075      	beq.n	800186a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800177e:	4b88      	ldr	r3, [pc, #544]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b04      	cmp	r3, #4
 8001788:	d00c      	beq.n	80017a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800178a:	4b85      	ldr	r3, [pc, #532]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001792:	2b08      	cmp	r3, #8
 8001794:	d112      	bne.n	80017bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001796:	4b82      	ldr	r3, [pc, #520]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800179e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017a2:	d10b      	bne.n	80017bc <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a4:	4b7e      	ldr	r3, [pc, #504]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d05b      	beq.n	8001868 <HAL_RCC_OscConfig+0x108>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d157      	bne.n	8001868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e24e      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017c4:	d106      	bne.n	80017d4 <HAL_RCC_OscConfig+0x74>
 80017c6:	4b76      	ldr	r3, [pc, #472]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a75      	ldr	r2, [pc, #468]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017d0:	6013      	str	r3, [r2, #0]
 80017d2:	e01d      	b.n	8001810 <HAL_RCC_OscConfig+0xb0>
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80017dc:	d10c      	bne.n	80017f8 <HAL_RCC_OscConfig+0x98>
 80017de:	4b70      	ldr	r3, [pc, #448]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a6f      	ldr	r2, [pc, #444]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017e4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b6d      	ldr	r3, [pc, #436]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a6c      	ldr	r2, [pc, #432]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017f0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80017f4:	6013      	str	r3, [r2, #0]
 80017f6:	e00b      	b.n	8001810 <HAL_RCC_OscConfig+0xb0>
 80017f8:	4b69      	ldr	r3, [pc, #420]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a68      	ldr	r2, [pc, #416]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80017fe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001802:	6013      	str	r3, [r2, #0]
 8001804:	4b66      	ldr	r3, [pc, #408]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a65      	ldr	r2, [pc, #404]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 800180a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800180e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d013      	beq.n	8001840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001818:	f7ff fab4 	bl	8000d84 <HAL_GetTick>
 800181c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181e:	e008      	b.n	8001832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001820:	f7ff fab0 	bl	8000d84 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	1ad3      	subs	r3, r2, r3
 800182a:	2b64      	cmp	r3, #100	@ 0x64
 800182c:	d901      	bls.n	8001832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800182e:	2303      	movs	r3, #3
 8001830:	e213      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001832:	4b5b      	ldr	r3, [pc, #364]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800183a:	2b00      	cmp	r3, #0
 800183c:	d0f0      	beq.n	8001820 <HAL_RCC_OscConfig+0xc0>
 800183e:	e014      	b.n	800186a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001840:	f7ff faa0 	bl	8000d84 <HAL_GetTick>
 8001844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff fa9c 	bl	8000d84 <HAL_GetTick>
 800184c:	4602      	mov	r2, r0
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	@ 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e1ff      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b51      	ldr	r3, [pc, #324]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0xe8>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b00      	cmp	r3, #0
 8001874:	d063      	beq.n	800193e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001876:	4b4a      	ldr	r3, [pc, #296]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001878:	689b      	ldr	r3, [r3, #8]
 800187a:	f003 030c 	and.w	r3, r3, #12
 800187e:	2b00      	cmp	r3, #0
 8001880:	d00b      	beq.n	800189a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001882:	4b47      	ldr	r3, [pc, #284]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800188a:	2b08      	cmp	r3, #8
 800188c:	d11c      	bne.n	80018c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800188e:	4b44      	ldr	r3, [pc, #272]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d116      	bne.n	80018c8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800189a:	4b41      	ldr	r3, [pc, #260]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0302 	and.w	r3, r3, #2
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d005      	beq.n	80018b2 <HAL_RCC_OscConfig+0x152>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	68db      	ldr	r3, [r3, #12]
 80018aa:	2b01      	cmp	r3, #1
 80018ac:	d001      	beq.n	80018b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018ae:	2301      	movs	r3, #1
 80018b0:	e1d3      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018b2:	4b3b      	ldr	r3, [pc, #236]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	691b      	ldr	r3, [r3, #16]
 80018be:	00db      	lsls	r3, r3, #3
 80018c0:	4937      	ldr	r1, [pc, #220]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80018c2:	4313      	orrs	r3, r2
 80018c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c6:	e03a      	b.n	800193e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d020      	beq.n	8001912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018d0:	4b34      	ldr	r3, [pc, #208]	@ (80019a4 <HAL_RCC_OscConfig+0x244>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018d6:	f7ff fa55 	bl	8000d84 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018de:	f7ff fa51 	bl	8000d84 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e1b4      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f0:	4b2b      	ldr	r3, [pc, #172]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fc:	4b28      	ldr	r3, [pc, #160]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	691b      	ldr	r3, [r3, #16]
 8001908:	00db      	lsls	r3, r3, #3
 800190a:	4925      	ldr	r1, [pc, #148]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 800190c:	4313      	orrs	r3, r2
 800190e:	600b      	str	r3, [r1, #0]
 8001910:	e015      	b.n	800193e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001912:	4b24      	ldr	r3, [pc, #144]	@ (80019a4 <HAL_RCC_OscConfig+0x244>)
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001918:	f7ff fa34 	bl	8000d84 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800191e:	e008      	b.n	8001932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001920:	f7ff fa30 	bl	8000d84 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	2b02      	cmp	r3, #2
 800192c:	d901      	bls.n	8001932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800192e:	2303      	movs	r3, #3
 8001930:	e193      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001932:	4b1b      	ldr	r3, [pc, #108]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f003 0302 	and.w	r3, r3, #2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d1f0      	bne.n	8001920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d036      	beq.n	80019b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	695b      	ldr	r3, [r3, #20]
 800194e:	2b00      	cmp	r3, #0
 8001950:	d016      	beq.n	8001980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001952:	4b15      	ldr	r3, [pc, #84]	@ (80019a8 <HAL_RCC_OscConfig+0x248>)
 8001954:	2201      	movs	r2, #1
 8001956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001958:	f7ff fa14 	bl	8000d84 <HAL_GetTick>
 800195c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800195e:	e008      	b.n	8001972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001960:	f7ff fa10 	bl	8000d84 <HAL_GetTick>
 8001964:	4602      	mov	r2, r0
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	1ad3      	subs	r3, r2, r3
 800196a:	2b02      	cmp	r3, #2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e173      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_RCC_OscConfig+0x240>)
 8001974:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0f0      	beq.n	8001960 <HAL_RCC_OscConfig+0x200>
 800197e:	e01b      	b.n	80019b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001980:	4b09      	ldr	r3, [pc, #36]	@ (80019a8 <HAL_RCC_OscConfig+0x248>)
 8001982:	2200      	movs	r2, #0
 8001984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001986:	f7ff f9fd 	bl	8000d84 <HAL_GetTick>
 800198a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800198c:	e00e      	b.n	80019ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800198e:	f7ff f9f9 	bl	8000d84 <HAL_GetTick>
 8001992:	4602      	mov	r2, r0
 8001994:	693b      	ldr	r3, [r7, #16]
 8001996:	1ad3      	subs	r3, r2, r3
 8001998:	2b02      	cmp	r3, #2
 800199a:	d907      	bls.n	80019ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800199c:	2303      	movs	r3, #3
 800199e:	e15c      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
 80019a0:	40023800 	.word	0x40023800
 80019a4:	42470000 	.word	0x42470000
 80019a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019ac:	4b8a      	ldr	r3, [pc, #552]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 80019ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019b0:	f003 0302 	and.w	r3, r3, #2
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d1ea      	bne.n	800198e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8097 	beq.w	8001af4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c6:	2300      	movs	r3, #0
 80019c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019ca:	4b83      	ldr	r3, [pc, #524]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d10f      	bne.n	80019f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	4b7f      	ldr	r3, [pc, #508]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	4a7e      	ldr	r2, [pc, #504]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 80019e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80019e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e6:	4b7c      	ldr	r3, [pc, #496]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80019ee:	60bb      	str	r3, [r7, #8]
 80019f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019f2:	2301      	movs	r3, #1
 80019f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019f6:	4b79      	ldr	r3, [pc, #484]	@ (8001bdc <HAL_RCC_OscConfig+0x47c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d118      	bne.n	8001a34 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a02:	4b76      	ldr	r3, [pc, #472]	@ (8001bdc <HAL_RCC_OscConfig+0x47c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a75      	ldr	r2, [pc, #468]	@ (8001bdc <HAL_RCC_OscConfig+0x47c>)
 8001a08:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a0e:	f7ff f9b9 	bl	8000d84 <HAL_GetTick>
 8001a12:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a14:	e008      	b.n	8001a28 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a16:	f7ff f9b5 	bl	8000d84 <HAL_GetTick>
 8001a1a:	4602      	mov	r2, r0
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	1ad3      	subs	r3, r2, r3
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d901      	bls.n	8001a28 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a24:	2303      	movs	r3, #3
 8001a26:	e118      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a28:	4b6c      	ldr	r3, [pc, #432]	@ (8001bdc <HAL_RCC_OscConfig+0x47c>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f0      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d106      	bne.n	8001a4a <HAL_RCC_OscConfig+0x2ea>
 8001a3c:	4b66      	ldr	r3, [pc, #408]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a40:	4a65      	ldr	r2, [pc, #404]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a42:	f043 0301 	orr.w	r3, r3, #1
 8001a46:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a48:	e01c      	b.n	8001a84 <HAL_RCC_OscConfig+0x324>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	2b05      	cmp	r3, #5
 8001a50:	d10c      	bne.n	8001a6c <HAL_RCC_OscConfig+0x30c>
 8001a52:	4b61      	ldr	r3, [pc, #388]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a56:	4a60      	ldr	r2, [pc, #384]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a5e:	4b5e      	ldr	r3, [pc, #376]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a62:	4a5d      	ldr	r2, [pc, #372]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a64:	f043 0301 	orr.w	r3, r3, #1
 8001a68:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a6a:	e00b      	b.n	8001a84 <HAL_RCC_OscConfig+0x324>
 8001a6c:	4b5a      	ldr	r3, [pc, #360]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a70:	4a59      	ldr	r2, [pc, #356]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a72:	f023 0301 	bic.w	r3, r3, #1
 8001a76:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a78:	4b57      	ldr	r3, [pc, #348]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a7a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a7c:	4a56      	ldr	r2, [pc, #344]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001a7e:	f023 0304 	bic.w	r3, r3, #4
 8001a82:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d015      	beq.n	8001ab8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a8c:	f7ff f97a 	bl	8000d84 <HAL_GetTick>
 8001a90:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a92:	e00a      	b.n	8001aaa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001a94:	f7ff f976 	bl	8000d84 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	693b      	ldr	r3, [r7, #16]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e0d7      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aaa:	4b4b      	ldr	r3, [pc, #300]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d0ee      	beq.n	8001a94 <HAL_RCC_OscConfig+0x334>
 8001ab6:	e014      	b.n	8001ae2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ab8:	f7ff f964 	bl	8000d84 <HAL_GetTick>
 8001abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001abe:	e00a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ac0:	f7ff f960 	bl	8000d84 <HAL_GetTick>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	693b      	ldr	r3, [r7, #16]
 8001ac8:	1ad3      	subs	r3, r2, r3
 8001aca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e0c1      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001ad6:	4b40      	ldr	r3, [pc, #256]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d1ee      	bne.n	8001ac0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ae2:	7dfb      	ldrb	r3, [r7, #23]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d105      	bne.n	8001af4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aec:	4a3a      	ldr	r2, [pc, #232]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001aee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001af2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	f000 80ad 	beq.w	8001c58 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 030c 	and.w	r3, r3, #12
 8001b06:	2b08      	cmp	r3, #8
 8001b08:	d060      	beq.n	8001bcc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d145      	bne.n	8001b9e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b12:	4b33      	ldr	r3, [pc, #204]	@ (8001be0 <HAL_RCC_OscConfig+0x480>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff f934 	bl	8000d84 <HAL_GetTick>
 8001b1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b1e:	e008      	b.n	8001b32 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff f930 	bl	8000d84 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e093      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b32:	4b29      	ldr	r3, [pc, #164]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d1f0      	bne.n	8001b20 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	69da      	ldr	r2, [r3, #28]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6a1b      	ldr	r3, [r3, #32]
 8001b46:	431a      	orrs	r2, r3
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b4c:	019b      	lsls	r3, r3, #6
 8001b4e:	431a      	orrs	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b54:	085b      	lsrs	r3, r3, #1
 8001b56:	3b01      	subs	r3, #1
 8001b58:	041b      	lsls	r3, r3, #16
 8001b5a:	431a      	orrs	r2, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b60:	061b      	lsls	r3, r3, #24
 8001b62:	431a      	orrs	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b68:	071b      	lsls	r3, r3, #28
 8001b6a:	491b      	ldr	r1, [pc, #108]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b70:	4b1b      	ldr	r3, [pc, #108]	@ (8001be0 <HAL_RCC_OscConfig+0x480>)
 8001b72:	2201      	movs	r2, #1
 8001b74:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff f905 	bl	8000d84 <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b7c:	e008      	b.n	8001b90 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b7e:	f7ff f901 	bl	8000d84 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	2b02      	cmp	r3, #2
 8001b8a:	d901      	bls.n	8001b90 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001b8c:	2303      	movs	r3, #3
 8001b8e:	e064      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b90:	4b11      	ldr	r3, [pc, #68]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d0f0      	beq.n	8001b7e <HAL_RCC_OscConfig+0x41e>
 8001b9c:	e05c      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <HAL_RCC_OscConfig+0x480>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ba4:	f7ff f8ee 	bl	8000d84 <HAL_GetTick>
 8001ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	e008      	b.n	8001bbe <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bac:	f7ff f8ea 	bl	8000d84 <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d901      	bls.n	8001bbe <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bba:	2303      	movs	r3, #3
 8001bbc:	e04d      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bbe:	4b06      	ldr	r3, [pc, #24]	@ (8001bd8 <HAL_RCC_OscConfig+0x478>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d1f0      	bne.n	8001bac <HAL_RCC_OscConfig+0x44c>
 8001bca:	e045      	b.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d107      	bne.n	8001be4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e040      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40007000 	.word	0x40007000
 8001be0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001be4:	4b1f      	ldr	r3, [pc, #124]	@ (8001c64 <HAL_RCC_OscConfig+0x504>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	699b      	ldr	r3, [r3, #24]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d030      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001bfc:	429a      	cmp	r2, r3
 8001bfe:	d129      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c0a:	429a      	cmp	r2, r3
 8001c0c:	d122      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c0e:	68fa      	ldr	r2, [r7, #12]
 8001c10:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c14:	4013      	ands	r3, r2
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c1a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c1c:	4293      	cmp	r3, r2
 8001c1e:	d119      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c2a:	085b      	lsrs	r3, r3, #1
 8001c2c:	3b01      	subs	r3, #1
 8001c2e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d10f      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c3e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c4e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c50:	429a      	cmp	r2, r3
 8001c52:	d001      	beq.n	8001c58 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	40023800 	.word	0x40023800

08001c68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d101      	bne.n	8001c7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e041      	b.n	8001cfe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d106      	bne.n	8001c94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2200      	movs	r2, #0
 8001c8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001c8e:	6878      	ldr	r0, [r7, #4]
 8001c90:	f000 f839 	bl	8001d06 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2202      	movs	r2, #2
 8001c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	3304      	adds	r3, #4
 8001ca4:	4619      	mov	r1, r3
 8001ca6:	4610      	mov	r0, r2
 8001ca8:	f000 f9c0 	bl	800202c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2201      	movs	r2, #1
 8001cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2201      	movs	r2, #1
 8001cc8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2201      	movs	r2, #1
 8001cd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001cfc:	2300      	movs	r3, #0
}
 8001cfe:	4618      	mov	r0, r3
 8001d00:	3708      	adds	r7, #8
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}

08001d06 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
	...

08001d1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d2a:	b2db      	uxtb	r3, r3
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d001      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e04e      	b.n	8001dd2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2202      	movs	r2, #2
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	68da      	ldr	r2, [r3, #12]
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f042 0201 	orr.w	r2, r2, #1
 8001d4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a23      	ldr	r2, [pc, #140]	@ (8001de0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d022      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d5e:	d01d      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1f      	ldr	r2, [pc, #124]	@ (8001de4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d018      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a1e      	ldr	r2, [pc, #120]	@ (8001de8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d013      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	4a1c      	ldr	r2, [pc, #112]	@ (8001dec <HAL_TIM_Base_Start_IT+0xd0>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d00e      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	4a1b      	ldr	r2, [pc, #108]	@ (8001df0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d009      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	4a19      	ldr	r2, [pc, #100]	@ (8001df4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d004      	beq.n	8001d9c <HAL_TIM_Base_Start_IT+0x80>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a18      	ldr	r2, [pc, #96]	@ (8001df8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001d98:	4293      	cmp	r3, r2
 8001d9a:	d111      	bne.n	8001dc0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	689b      	ldr	r3, [r3, #8]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b06      	cmp	r3, #6
 8001dac:	d010      	beq.n	8001dd0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f042 0201 	orr.w	r2, r2, #1
 8001dbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dbe:	e007      	b.n	8001dd0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0201 	orr.w	r2, r2, #1
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd0:	2300      	movs	r3, #0
}
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	3714      	adds	r7, #20
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	40010000 	.word	0x40010000
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800
 8001dec:	40000c00 	.word	0x40000c00
 8001df0:	40010400 	.word	0x40010400
 8001df4:	40014000 	.word	0x40014000
 8001df8:	40001800 	.word	0x40001800

08001dfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	68db      	ldr	r3, [r3, #12]
 8001e0a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e14:	68bb      	ldr	r3, [r7, #8]
 8001e16:	f003 0302 	and.w	r3, r3, #2
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d020      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	f003 0302 	and.w	r3, r3, #2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d01b      	beq.n	8001e60 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f06f 0202 	mvn.w	r2, #2
 8001e30:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2201      	movs	r2, #1
 8001e36:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	699b      	ldr	r3, [r3, #24]
 8001e3e:	f003 0303 	and.w	r3, r3, #3
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d003      	beq.n	8001e4e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f000 f8d2 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001e4c:	e005      	b.n	8001e5a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f8c4 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f000 f8d5 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	f003 0304 	and.w	r3, r3, #4
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d020      	beq.n	8001eac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f003 0304 	and.w	r3, r3, #4
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d01b      	beq.n	8001eac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f06f 0204 	mvn.w	r2, #4
 8001e7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	2202      	movs	r2, #2
 8001e82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	699b      	ldr	r3, [r3, #24]
 8001e8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d003      	beq.n	8001e9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e92:	6878      	ldr	r0, [r7, #4]
 8001e94:	f000 f8ac 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001e98:	e005      	b.n	8001ea6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f89e 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f8af 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d020      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	f003 0308 	and.w	r3, r3, #8
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d01b      	beq.n	8001ef8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f06f 0208 	mvn.w	r2, #8
 8001ec8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2204      	movs	r2, #4
 8001ece:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	69db      	ldr	r3, [r3, #28]
 8001ed6:	f003 0303 	and.w	r3, r3, #3
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f886 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001ee4:	e005      	b.n	8001ef2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 f878 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f000 f889 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d020      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0210 	mvn.w	r2, #16
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f860 	bl	8001ff0 <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f852 	bl	8001fdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f863 	bl	8002004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d00c      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	f003 0301 	and.w	r3, r3, #1
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d007      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f06f 0201 	mvn.w	r2, #1
 8001f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7fe fd72 	bl	8000a4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d00c      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d007      	beq.n	8001f8c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f000 f906 	bl	8002198 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d00c      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d007      	beq.n	8001fb0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fa8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f834 	bl	8002018 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	f003 0320 	and.w	r3, r3, #32
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d00c      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d007      	beq.n	8001fd4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0220 	mvn.w	r2, #32
 8001fcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fce:	6878      	ldr	r0, [r7, #4]
 8001fd0:	f000 f8d8 	bl	8002184 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001fe4:	bf00      	nop
 8001fe6:	370c      	adds	r7, #12
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fee:	4770      	bx	lr

08001ff0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ff8:	bf00      	nop
 8001ffa:	370c      	adds	r7, #12
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002002:	4770      	bx	lr

08002004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800200c:	bf00      	nop
 800200e:	370c      	adds	r7, #12
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr

08002018 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800202c:	b480      	push	{r7}
 800202e:	b085      	sub	sp, #20
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a46      	ldr	r2, [pc, #280]	@ (8002158 <TIM_Base_SetConfig+0x12c>)
 8002040:	4293      	cmp	r3, r2
 8002042:	d013      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800204a:	d00f      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	4a43      	ldr	r2, [pc, #268]	@ (800215c <TIM_Base_SetConfig+0x130>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d00b      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	4a42      	ldr	r2, [pc, #264]	@ (8002160 <TIM_Base_SetConfig+0x134>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d007      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	4a41      	ldr	r2, [pc, #260]	@ (8002164 <TIM_Base_SetConfig+0x138>)
 8002060:	4293      	cmp	r3, r2
 8002062:	d003      	beq.n	800206c <TIM_Base_SetConfig+0x40>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a40      	ldr	r2, [pc, #256]	@ (8002168 <TIM_Base_SetConfig+0x13c>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d108      	bne.n	800207e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002072:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a35      	ldr	r2, [pc, #212]	@ (8002158 <TIM_Base_SetConfig+0x12c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d02b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800208c:	d027      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	4a32      	ldr	r2, [pc, #200]	@ (800215c <TIM_Base_SetConfig+0x130>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d023      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	4a31      	ldr	r2, [pc, #196]	@ (8002160 <TIM_Base_SetConfig+0x134>)
 800209a:	4293      	cmp	r3, r2
 800209c:	d01f      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	4a30      	ldr	r2, [pc, #192]	@ (8002164 <TIM_Base_SetConfig+0x138>)
 80020a2:	4293      	cmp	r3, r2
 80020a4:	d01b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	4a2f      	ldr	r2, [pc, #188]	@ (8002168 <TIM_Base_SetConfig+0x13c>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d017      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4a2e      	ldr	r2, [pc, #184]	@ (800216c <TIM_Base_SetConfig+0x140>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d013      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a2d      	ldr	r2, [pc, #180]	@ (8002170 <TIM_Base_SetConfig+0x144>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d00f      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	4a2c      	ldr	r2, [pc, #176]	@ (8002174 <TIM_Base_SetConfig+0x148>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d00b      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a2b      	ldr	r2, [pc, #172]	@ (8002178 <TIM_Base_SetConfig+0x14c>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d007      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a2a      	ldr	r2, [pc, #168]	@ (800217c <TIM_Base_SetConfig+0x150>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d003      	beq.n	80020de <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a29      	ldr	r2, [pc, #164]	@ (8002180 <TIM_Base_SetConfig+0x154>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d108      	bne.n	80020f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80020e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	4a10      	ldr	r2, [pc, #64]	@ (8002158 <TIM_Base_SetConfig+0x12c>)
 8002118:	4293      	cmp	r3, r2
 800211a:	d003      	beq.n	8002124 <TIM_Base_SetConfig+0xf8>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4a12      	ldr	r2, [pc, #72]	@ (8002168 <TIM_Base_SetConfig+0x13c>)
 8002120:	4293      	cmp	r3, r2
 8002122:	d103      	bne.n	800212c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	691a      	ldr	r2, [r3, #16]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2201      	movs	r2, #1
 8002130:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	691b      	ldr	r3, [r3, #16]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b01      	cmp	r3, #1
 800213c:	d105      	bne.n	800214a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	f023 0201 	bic.w	r2, r3, #1
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	611a      	str	r2, [r3, #16]
  }
}
 800214a:	bf00      	nop
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	40010000 	.word	0x40010000
 800215c:	40000400 	.word	0x40000400
 8002160:	40000800 	.word	0x40000800
 8002164:	40000c00 	.word	0x40000c00
 8002168:	40010400 	.word	0x40010400
 800216c:	40014000 	.word	0x40014000
 8002170:	40014400 	.word	0x40014400
 8002174:	40014800 	.word	0x40014800
 8002178:	40001800 	.word	0x40001800
 800217c:	40001c00 	.word	0x40001c00
 8002180:	40002000 	.word	0x40002000

08002184 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800218c:	bf00      	nop
 800218e:	370c      	adds	r7, #12
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr

08002198 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002198:	b480      	push	{r7}
 800219a:	b083      	sub	sp, #12
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021a0:	bf00      	nop
 80021a2:	370c      	adds	r7, #12
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr

080021ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b082      	sub	sp, #8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d101      	bne.n	80021be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80021ba:	2301      	movs	r3, #1
 80021bc:	e042      	b.n	8002244 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80021c4:	b2db      	uxtb	r3, r3
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d106      	bne.n	80021d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2200      	movs	r2, #0
 80021ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80021d2:	6878      	ldr	r0, [r7, #4]
 80021d4:	f7fe fc7a 	bl	8000acc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2224      	movs	r2, #36	@ 0x24
 80021dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	68da      	ldr	r2, [r3, #12]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80021ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f000 f82b 	bl	800224c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002204:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	695a      	ldr	r2, [r3, #20]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002214:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	68da      	ldr	r2, [r3, #12]
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002224:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2220      	movs	r2, #32
 8002230:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	2200      	movs	r2, #0
 8002240:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}

0800224c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800224c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002250:	b0c0      	sub	sp, #256	@ 0x100
 8002252:	af00      	add	r7, sp, #0
 8002254:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002258:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	691b      	ldr	r3, [r3, #16]
 8002260:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002264:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002268:	68d9      	ldr	r1, [r3, #12]
 800226a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800226e:	681a      	ldr	r2, [r3, #0]
 8002270:	ea40 0301 	orr.w	r3, r0, r1
 8002274:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002276:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800227a:	689a      	ldr	r2, [r3, #8]
 800227c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002280:	691b      	ldr	r3, [r3, #16]
 8002282:	431a      	orrs	r2, r3
 8002284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	431a      	orrs	r2, r3
 800228c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4313      	orrs	r3, r2
 8002294:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002298:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80022a4:	f021 010c 	bic.w	r1, r1, #12
 80022a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80022b2:	430b      	orrs	r3, r1
 80022b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80022b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80022c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022c6:	6999      	ldr	r1, [r3, #24]
 80022c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022cc:	681a      	ldr	r2, [r3, #0]
 80022ce:	ea40 0301 	orr.w	r3, r0, r1
 80022d2:	6153      	str	r3, [r2, #20]


#if defined(USART6) && defined(UART9) && defined(UART10)
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
 80022d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	4b95      	ldr	r3, [pc, #596]	@ (8002530 <UART_SetConfig+0x2e4>)
 80022dc:	429a      	cmp	r2, r3
 80022de:	d011      	beq.n	8002304 <UART_SetConfig+0xb8>
 80022e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	4b93      	ldr	r3, [pc, #588]	@ (8002534 <UART_SetConfig+0x2e8>)
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d00b      	beq.n	8002304 <UART_SetConfig+0xb8>
 80022ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022f0:	681a      	ldr	r2, [r3, #0]
 80022f2:	4b91      	ldr	r3, [pc, #580]	@ (8002538 <UART_SetConfig+0x2ec>)
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d005      	beq.n	8002304 <UART_SetConfig+0xb8>
 80022f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	4b8f      	ldr	r3, [pc, #572]	@ (800253c <UART_SetConfig+0x2f0>)
 8002300:	429a      	cmp	r2, r3
 8002302:	d104      	bne.n	800230e <UART_SetConfig+0xc2>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002304:	f7ff f9e6 	bl	80016d4 <HAL_RCC_GetPCLK2Freq>
 8002308:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800230c:	e003      	b.n	8002316 <UART_SetConfig+0xca>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800230e:	f7ff f9cd 	bl	80016ac <HAL_RCC_GetPCLK1Freq>
 8002312:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800231a:	69db      	ldr	r3, [r3, #28]
 800231c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002320:	f040 8110 	bne.w	8002544 <UART_SetConfig+0x2f8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002324:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002328:	2200      	movs	r2, #0
 800232a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800232e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002332:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002336:	4622      	mov	r2, r4
 8002338:	462b      	mov	r3, r5
 800233a:	1891      	adds	r1, r2, r2
 800233c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800233e:	415b      	adcs	r3, r3
 8002340:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002342:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002346:	4621      	mov	r1, r4
 8002348:	eb12 0801 	adds.w	r8, r2, r1
 800234c:	4629      	mov	r1, r5
 800234e:	eb43 0901 	adc.w	r9, r3, r1
 8002352:	f04f 0200 	mov.w	r2, #0
 8002356:	f04f 0300 	mov.w	r3, #0
 800235a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800235e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002362:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002366:	4690      	mov	r8, r2
 8002368:	4699      	mov	r9, r3
 800236a:	4623      	mov	r3, r4
 800236c:	eb18 0303 	adds.w	r3, r8, r3
 8002370:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002374:	462b      	mov	r3, r5
 8002376:	eb49 0303 	adc.w	r3, r9, r3
 800237a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800237e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800238a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800238e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002392:	460b      	mov	r3, r1
 8002394:	18db      	adds	r3, r3, r3
 8002396:	653b      	str	r3, [r7, #80]	@ 0x50
 8002398:	4613      	mov	r3, r2
 800239a:	eb42 0303 	adc.w	r3, r2, r3
 800239e:	657b      	str	r3, [r7, #84]	@ 0x54
 80023a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80023a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80023a8:	f7fd ffda 	bl	8000360 <__aeabi_uldivmod>
 80023ac:	4602      	mov	r2, r0
 80023ae:	460b      	mov	r3, r1
 80023b0:	4b63      	ldr	r3, [pc, #396]	@ (8002540 <UART_SetConfig+0x2f4>)
 80023b2:	fba3 2302 	umull	r2, r3, r3, r2
 80023b6:	095b      	lsrs	r3, r3, #5
 80023b8:	011c      	lsls	r4, r3, #4
 80023ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80023be:	2200      	movs	r2, #0
 80023c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80023c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80023c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80023cc:	4642      	mov	r2, r8
 80023ce:	464b      	mov	r3, r9
 80023d0:	1891      	adds	r1, r2, r2
 80023d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80023d4:	415b      	adcs	r3, r3
 80023d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80023d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023dc:	4641      	mov	r1, r8
 80023de:	eb12 0a01 	adds.w	sl, r2, r1
 80023e2:	4649      	mov	r1, r9
 80023e4:	eb43 0b01 	adc.w	fp, r3, r1
 80023e8:	f04f 0200 	mov.w	r2, #0
 80023ec:	f04f 0300 	mov.w	r3, #0
 80023f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80023f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80023f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80023fc:	4692      	mov	sl, r2
 80023fe:	469b      	mov	fp, r3
 8002400:	4643      	mov	r3, r8
 8002402:	eb1a 0303 	adds.w	r3, sl, r3
 8002406:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800240a:	464b      	mov	r3, r9
 800240c:	eb4b 0303 	adc.w	r3, fp, r3
 8002410:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002414:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002420:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002424:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002428:	460b      	mov	r3, r1
 800242a:	18db      	adds	r3, r3, r3
 800242c:	643b      	str	r3, [r7, #64]	@ 0x40
 800242e:	4613      	mov	r3, r2
 8002430:	eb42 0303 	adc.w	r3, r2, r3
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
 8002436:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800243a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800243e:	f7fd ff8f 	bl	8000360 <__aeabi_uldivmod>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	4611      	mov	r1, r2
 8002448:	4b3d      	ldr	r3, [pc, #244]	@ (8002540 <UART_SetConfig+0x2f4>)
 800244a:	fba3 2301 	umull	r2, r3, r3, r1
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	2264      	movs	r2, #100	@ 0x64
 8002452:	fb02 f303 	mul.w	r3, r2, r3
 8002456:	1acb      	subs	r3, r1, r3
 8002458:	00db      	lsls	r3, r3, #3
 800245a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800245e:	4b38      	ldr	r3, [pc, #224]	@ (8002540 <UART_SetConfig+0x2f4>)
 8002460:	fba3 2302 	umull	r2, r3, r3, r2
 8002464:	095b      	lsrs	r3, r3, #5
 8002466:	005b      	lsls	r3, r3, #1
 8002468:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800246c:	441c      	add	r4, r3
 800246e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002472:	2200      	movs	r2, #0
 8002474:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002478:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800247c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002480:	4642      	mov	r2, r8
 8002482:	464b      	mov	r3, r9
 8002484:	1891      	adds	r1, r2, r2
 8002486:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002488:	415b      	adcs	r3, r3
 800248a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800248c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002490:	4641      	mov	r1, r8
 8002492:	1851      	adds	r1, r2, r1
 8002494:	6339      	str	r1, [r7, #48]	@ 0x30
 8002496:	4649      	mov	r1, r9
 8002498:	414b      	adcs	r3, r1
 800249a:	637b      	str	r3, [r7, #52]	@ 0x34
 800249c:	f04f 0200 	mov.w	r2, #0
 80024a0:	f04f 0300 	mov.w	r3, #0
 80024a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80024a8:	4659      	mov	r1, fp
 80024aa:	00cb      	lsls	r3, r1, #3
 80024ac:	4651      	mov	r1, sl
 80024ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80024b2:	4651      	mov	r1, sl
 80024b4:	00ca      	lsls	r2, r1, #3
 80024b6:	4610      	mov	r0, r2
 80024b8:	4619      	mov	r1, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	4642      	mov	r2, r8
 80024be:	189b      	adds	r3, r3, r2
 80024c0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80024c4:	464b      	mov	r3, r9
 80024c6:	460a      	mov	r2, r1
 80024c8:	eb42 0303 	adc.w	r3, r2, r3
 80024cc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80024d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2200      	movs	r2, #0
 80024d8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80024dc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80024e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80024e4:	460b      	mov	r3, r1
 80024e6:	18db      	adds	r3, r3, r3
 80024e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80024ea:	4613      	mov	r3, r2
 80024ec:	eb42 0303 	adc.w	r3, r2, r3
 80024f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80024f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80024f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80024fa:	f7fd ff31 	bl	8000360 <__aeabi_uldivmod>
 80024fe:	4602      	mov	r2, r0
 8002500:	460b      	mov	r3, r1
 8002502:	4b0f      	ldr	r3, [pc, #60]	@ (8002540 <UART_SetConfig+0x2f4>)
 8002504:	fba3 1302 	umull	r1, r3, r3, r2
 8002508:	095b      	lsrs	r3, r3, #5
 800250a:	2164      	movs	r1, #100	@ 0x64
 800250c:	fb01 f303 	mul.w	r3, r1, r3
 8002510:	1ad3      	subs	r3, r2, r3
 8002512:	00db      	lsls	r3, r3, #3
 8002514:	3332      	adds	r3, #50	@ 0x32
 8002516:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <UART_SetConfig+0x2f4>)
 8002518:	fba2 2303 	umull	r2, r3, r2, r3
 800251c:	095b      	lsrs	r3, r3, #5
 800251e:	f003 0207 	and.w	r2, r3, #7
 8002522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4422      	add	r2, r4
 800252a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800252c:	e10a      	b.n	8002744 <UART_SetConfig+0x4f8>
 800252e:	bf00      	nop
 8002530:	40011000 	.word	0x40011000
 8002534:	40011400 	.word	0x40011400
 8002538:	40011800 	.word	0x40011800
 800253c:	40011c00 	.word	0x40011c00
 8002540:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002544:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002548:	2200      	movs	r2, #0
 800254a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800254e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002552:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002556:	4642      	mov	r2, r8
 8002558:	464b      	mov	r3, r9
 800255a:	1891      	adds	r1, r2, r2
 800255c:	6239      	str	r1, [r7, #32]
 800255e:	415b      	adcs	r3, r3
 8002560:	627b      	str	r3, [r7, #36]	@ 0x24
 8002562:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002566:	4641      	mov	r1, r8
 8002568:	1854      	adds	r4, r2, r1
 800256a:	4649      	mov	r1, r9
 800256c:	eb43 0501 	adc.w	r5, r3, r1
 8002570:	f04f 0200 	mov.w	r2, #0
 8002574:	f04f 0300 	mov.w	r3, #0
 8002578:	00eb      	lsls	r3, r5, #3
 800257a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800257e:	00e2      	lsls	r2, r4, #3
 8002580:	4614      	mov	r4, r2
 8002582:	461d      	mov	r5, r3
 8002584:	4643      	mov	r3, r8
 8002586:	18e3      	adds	r3, r4, r3
 8002588:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800258c:	464b      	mov	r3, r9
 800258e:	eb45 0303 	adc.w	r3, r5, r3
 8002592:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002596:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	2200      	movs	r2, #0
 800259e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80025a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80025a6:	f04f 0200 	mov.w	r2, #0
 80025aa:	f04f 0300 	mov.w	r3, #0
 80025ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80025b2:	4629      	mov	r1, r5
 80025b4:	008b      	lsls	r3, r1, #2
 80025b6:	4621      	mov	r1, r4
 80025b8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80025bc:	4621      	mov	r1, r4
 80025be:	008a      	lsls	r2, r1, #2
 80025c0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80025c4:	f7fd fecc 	bl	8000360 <__aeabi_uldivmod>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4b60      	ldr	r3, [pc, #384]	@ (8002750 <UART_SetConfig+0x504>)
 80025ce:	fba3 2302 	umull	r2, r3, r3, r2
 80025d2:	095b      	lsrs	r3, r3, #5
 80025d4:	011c      	lsls	r4, r3, #4
 80025d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80025da:	2200      	movs	r2, #0
 80025dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80025e0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80025e4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80025e8:	4642      	mov	r2, r8
 80025ea:	464b      	mov	r3, r9
 80025ec:	1891      	adds	r1, r2, r2
 80025ee:	61b9      	str	r1, [r7, #24]
 80025f0:	415b      	adcs	r3, r3
 80025f2:	61fb      	str	r3, [r7, #28]
 80025f4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80025f8:	4641      	mov	r1, r8
 80025fa:	1851      	adds	r1, r2, r1
 80025fc:	6139      	str	r1, [r7, #16]
 80025fe:	4649      	mov	r1, r9
 8002600:	414b      	adcs	r3, r1
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	f04f 0200 	mov.w	r2, #0
 8002608:	f04f 0300 	mov.w	r3, #0
 800260c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002610:	4659      	mov	r1, fp
 8002612:	00cb      	lsls	r3, r1, #3
 8002614:	4651      	mov	r1, sl
 8002616:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800261a:	4651      	mov	r1, sl
 800261c:	00ca      	lsls	r2, r1, #3
 800261e:	4610      	mov	r0, r2
 8002620:	4619      	mov	r1, r3
 8002622:	4603      	mov	r3, r0
 8002624:	4642      	mov	r2, r8
 8002626:	189b      	adds	r3, r3, r2
 8002628:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800262c:	464b      	mov	r3, r9
 800262e:	460a      	mov	r2, r1
 8002630:	eb42 0303 	adc.w	r3, r2, r3
 8002634:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002638:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002642:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002644:	f04f 0200 	mov.w	r2, #0
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002650:	4649      	mov	r1, r9
 8002652:	008b      	lsls	r3, r1, #2
 8002654:	4641      	mov	r1, r8
 8002656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800265a:	4641      	mov	r1, r8
 800265c:	008a      	lsls	r2, r1, #2
 800265e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002662:	f7fd fe7d 	bl	8000360 <__aeabi_uldivmod>
 8002666:	4602      	mov	r2, r0
 8002668:	460b      	mov	r3, r1
 800266a:	4611      	mov	r1, r2
 800266c:	4b38      	ldr	r3, [pc, #224]	@ (8002750 <UART_SetConfig+0x504>)
 800266e:	fba3 2301 	umull	r2, r3, r3, r1
 8002672:	095b      	lsrs	r3, r3, #5
 8002674:	2264      	movs	r2, #100	@ 0x64
 8002676:	fb02 f303 	mul.w	r3, r2, r3
 800267a:	1acb      	subs	r3, r1, r3
 800267c:	011b      	lsls	r3, r3, #4
 800267e:	3332      	adds	r3, #50	@ 0x32
 8002680:	4a33      	ldr	r2, [pc, #204]	@ (8002750 <UART_SetConfig+0x504>)
 8002682:	fba2 2303 	umull	r2, r3, r2, r3
 8002686:	095b      	lsrs	r3, r3, #5
 8002688:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800268c:	441c      	add	r4, r3
 800268e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002692:	2200      	movs	r2, #0
 8002694:	673b      	str	r3, [r7, #112]	@ 0x70
 8002696:	677a      	str	r2, [r7, #116]	@ 0x74
 8002698:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800269c:	4642      	mov	r2, r8
 800269e:	464b      	mov	r3, r9
 80026a0:	1891      	adds	r1, r2, r2
 80026a2:	60b9      	str	r1, [r7, #8]
 80026a4:	415b      	adcs	r3, r3
 80026a6:	60fb      	str	r3, [r7, #12]
 80026a8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80026ac:	4641      	mov	r1, r8
 80026ae:	1851      	adds	r1, r2, r1
 80026b0:	6039      	str	r1, [r7, #0]
 80026b2:	4649      	mov	r1, r9
 80026b4:	414b      	adcs	r3, r1
 80026b6:	607b      	str	r3, [r7, #4]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80026c4:	4659      	mov	r1, fp
 80026c6:	00cb      	lsls	r3, r1, #3
 80026c8:	4651      	mov	r1, sl
 80026ca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80026ce:	4651      	mov	r1, sl
 80026d0:	00ca      	lsls	r2, r1, #3
 80026d2:	4610      	mov	r0, r2
 80026d4:	4619      	mov	r1, r3
 80026d6:	4603      	mov	r3, r0
 80026d8:	4642      	mov	r2, r8
 80026da:	189b      	adds	r3, r3, r2
 80026dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80026de:	464b      	mov	r3, r9
 80026e0:	460a      	mov	r2, r1
 80026e2:	eb42 0303 	adc.w	r3, r2, r3
 80026e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80026e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80026f2:	667a      	str	r2, [r7, #100]	@ 0x64
 80026f4:	f04f 0200 	mov.w	r2, #0
 80026f8:	f04f 0300 	mov.w	r3, #0
 80026fc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002700:	4649      	mov	r1, r9
 8002702:	008b      	lsls	r3, r1, #2
 8002704:	4641      	mov	r1, r8
 8002706:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800270a:	4641      	mov	r1, r8
 800270c:	008a      	lsls	r2, r1, #2
 800270e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002712:	f7fd fe25 	bl	8000360 <__aeabi_uldivmod>
 8002716:	4602      	mov	r2, r0
 8002718:	460b      	mov	r3, r1
 800271a:	4b0d      	ldr	r3, [pc, #52]	@ (8002750 <UART_SetConfig+0x504>)
 800271c:	fba3 1302 	umull	r1, r3, r3, r2
 8002720:	095b      	lsrs	r3, r3, #5
 8002722:	2164      	movs	r1, #100	@ 0x64
 8002724:	fb01 f303 	mul.w	r3, r1, r3
 8002728:	1ad3      	subs	r3, r2, r3
 800272a:	011b      	lsls	r3, r3, #4
 800272c:	3332      	adds	r3, #50	@ 0x32
 800272e:	4a08      	ldr	r2, [pc, #32]	@ (8002750 <UART_SetConfig+0x504>)
 8002730:	fba2 2303 	umull	r2, r3, r2, r3
 8002734:	095b      	lsrs	r3, r3, #5
 8002736:	f003 020f 	and.w	r2, r3, #15
 800273a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4422      	add	r2, r4
 8002742:	609a      	str	r2, [r3, #8]
}
 8002744:	bf00      	nop
 8002746:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800274a:	46bd      	mov	sp, r7
 800274c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002750:	51eb851f 	.word	0x51eb851f

08002754 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f103 0208 	add.w	r2, r3, #8
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f04f 32ff 	mov.w	r2, #4294967295
 800276c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f103 0208 	add.w	r2, r3, #8
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	f103 0208 	add.w	r2, r3, #8
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2200      	movs	r2, #0
 80027a0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80027a2:	bf00      	nop
 80027a4:	370c      	adds	r7, #12
 80027a6:	46bd      	mov	sp, r7
 80027a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ac:	4770      	bx	lr

080027ae <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80027ae:	b480      	push	{r7}
 80027b0:	b085      	sub	sp, #20
 80027b2:	af00      	add	r7, sp, #0
 80027b4:	6078      	str	r0, [r7, #4]
 80027b6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80027be:	68bb      	ldr	r3, [r7, #8]
 80027c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027c4:	d103      	bne.n	80027ce <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	e00c      	b.n	80027e8 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	3308      	adds	r3, #8
 80027d2:	60fb      	str	r3, [r7, #12]
 80027d4:	e002      	b.n	80027dc <vListInsert+0x2e>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	685b      	ldr	r3, [r3, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68ba      	ldr	r2, [r7, #8]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d2f6      	bcs.n	80027d6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	685a      	ldr	r2, [r3, #4]
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	683a      	ldr	r2, [r7, #0]
 80027f6:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68fa      	ldr	r2, [r7, #12]
 80027fc:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	1c5a      	adds	r2, r3, #1
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	601a      	str	r2, [r3, #0]
}
 8002814:	bf00      	nop
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	691b      	ldr	r3, [r3, #16]
 800282c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	685b      	ldr	r3, [r3, #4]
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	6892      	ldr	r2, [r2, #8]
 8002836:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6852      	ldr	r2, [r2, #4]
 8002840:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	685b      	ldr	r3, [r3, #4]
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	429a      	cmp	r2, r3
 800284a:	d103      	bne.n	8002854 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	689a      	ldr	r2, [r3, #8]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	1e5a      	subs	r2, r3, #1
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b086      	sub	sp, #24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800287e:	2301      	movs	r3, #1
 8002880:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	2b00      	cmp	r3, #0
 800288a:	d10b      	bne.n	80028a4 <xQueueGenericReset+0x30>
        __asm volatile
 800288c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002890:	f383 8811 	msr	BASEPRI, r3
 8002894:	f3bf 8f6f 	isb	sy
 8002898:	f3bf 8f4f 	dsb	sy
 800289c:	60fb      	str	r3, [r7, #12]
    }
 800289e:	bf00      	nop
 80028a0:	bf00      	nop
 80028a2:	e7fd      	b.n	80028a0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d05d      	beq.n	8002966 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d059      	beq.n	8002966 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80028b2:	693b      	ldr	r3, [r7, #16]
 80028b4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80028b6:	693b      	ldr	r3, [r7, #16]
 80028b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028ba:	2100      	movs	r1, #0
 80028bc:	fba3 2302 	umull	r2, r3, r3, r2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d000      	beq.n	80028c6 <xQueueGenericReset+0x52>
 80028c4:	2101      	movs	r1, #1
 80028c6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d14c      	bne.n	8002966 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80028cc:	f001 ff0e 	bl	80046ec <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028d8:	6939      	ldr	r1, [r7, #16]
 80028da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80028dc:	fb01 f303 	mul.w	r3, r1, r3
 80028e0:	441a      	add	r2, r3
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	2200      	movs	r2, #0
 80028ea:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	681a      	ldr	r2, [r3, #0]
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028fc:	3b01      	subs	r3, #1
 80028fe:	6939      	ldr	r1, [r7, #16]
 8002900:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002902:	fb01 f303 	mul.w	r3, r1, r3
 8002906:	441a      	add	r2, r3
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	22ff      	movs	r2, #255	@ 0xff
 8002910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	22ff      	movs	r2, #255	@ 0xff
 8002918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d114      	bne.n	800294c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	691b      	ldr	r3, [r3, #16]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d01a      	beq.n	8002960 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	3310      	adds	r3, #16
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ffea 	bl	8003908 <xTaskRemoveFromEventList>
 8002934:	4603      	mov	r3, r0
 8002936:	2b00      	cmp	r3, #0
 8002938:	d012      	beq.n	8002960 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800293a:	4b16      	ldr	r3, [pc, #88]	@ (8002994 <xQueueGenericReset+0x120>)
 800293c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002940:	601a      	str	r2, [r3, #0]
 8002942:	f3bf 8f4f 	dsb	sy
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	e009      	b.n	8002960 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800294c:	693b      	ldr	r3, [r7, #16]
 800294e:	3310      	adds	r3, #16
 8002950:	4618      	mov	r0, r3
 8002952:	f7ff feff 	bl	8002754 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	3324      	adds	r3, #36	@ 0x24
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff fefa 	bl	8002754 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002960:	f001 fef6 	bl	8004750 <vPortExitCritical>
 8002964:	e001      	b.n	800296a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002966:	2300      	movs	r3, #0
 8002968:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d10b      	bne.n	8002988 <xQueueGenericReset+0x114>
        __asm volatile
 8002970:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002974:	f383 8811 	msr	BASEPRI, r3
 8002978:	f3bf 8f6f 	isb	sy
 800297c:	f3bf 8f4f 	dsb	sy
 8002980:	60bb      	str	r3, [r7, #8]
    }
 8002982:	bf00      	nop
 8002984:	bf00      	nop
 8002986:	e7fd      	b.n	8002984 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8002988:	697b      	ldr	r3, [r7, #20]
}
 800298a:	4618      	mov	r0, r3
 800298c:	3718      	adds	r7, #24
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	e000ed04 	.word	0xe000ed04

08002998 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af02      	add	r7, sp, #8
 800299e:	60f8      	str	r0, [r7, #12]
 80029a0:	60b9      	str	r1, [r7, #8]
 80029a2:	4613      	mov	r3, r2
 80029a4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d02e      	beq.n	8002a0e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029b0:	2100      	movs	r1, #0
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	fba3 2302 	umull	r2, r3, r3, r2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d000      	beq.n	80029c0 <xQueueGenericCreate+0x28>
 80029be:	2101      	movs	r1, #1
 80029c0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d123      	bne.n	8002a0e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	68ba      	ldr	r2, [r7, #8]
 80029ca:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80029ce:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80029d2:	d81c      	bhi.n	8002a0e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68ba      	ldr	r2, [r7, #8]
 80029d8:	fb02 f303 	mul.w	r3, r2, r3
 80029dc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	3350      	adds	r3, #80	@ 0x50
 80029e2:	4618      	mov	r0, r3
 80029e4:	f001 ffb4 	bl	8004950 <pvPortMalloc>
 80029e8:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80029ea:	69fb      	ldr	r3, [r7, #28]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d01d      	beq.n	8002a2c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	3350      	adds	r3, #80	@ 0x50
 80029f8:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029fa:	79fa      	ldrb	r2, [r7, #7]
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	9300      	str	r3, [sp, #0]
 8002a00:	4613      	mov	r3, r2
 8002a02:	697a      	ldr	r2, [r7, #20]
 8002a04:	68b9      	ldr	r1, [r7, #8]
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f815 	bl	8002a36 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002a0c:	e00e      	b.n	8002a2c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10b      	bne.n	8002a2c <xQueueGenericCreate+0x94>
        __asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	613b      	str	r3, [r7, #16]
    }
 8002a26:	bf00      	nop
 8002a28:	bf00      	nop
 8002a2a:	e7fd      	b.n	8002a28 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002a2c:	69fb      	ldr	r3, [r7, #28]
    }
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3720      	adds	r7, #32
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}

08002a36 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002a36:	b580      	push	{r7, lr}
 8002a38:	b084      	sub	sp, #16
 8002a3a:	af00      	add	r7, sp, #0
 8002a3c:	60f8      	str	r0, [r7, #12]
 8002a3e:	60b9      	str	r1, [r7, #8]
 8002a40:	607a      	str	r2, [r7, #4]
 8002a42:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d103      	bne.n	8002a52 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002a4a:	69bb      	ldr	r3, [r7, #24]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	601a      	str	r2, [r3, #0]
 8002a50:	e002      	b.n	8002a58 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	687a      	ldr	r2, [r7, #4]
 8002a56:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002a58:	69bb      	ldr	r3, [r7, #24]
 8002a5a:	68fa      	ldr	r2, [r7, #12]
 8002a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002a5e:	69bb      	ldr	r3, [r7, #24]
 8002a60:	68ba      	ldr	r2, [r7, #8]
 8002a62:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a64:	2101      	movs	r1, #1
 8002a66:	69b8      	ldr	r0, [r7, #24]
 8002a68:	f7ff ff04 	bl	8002874 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	78fa      	ldrb	r2, [r7, #3]
 8002a70:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002a74:	78fb      	ldrb	r3, [r7, #3]
 8002a76:	68ba      	ldr	r2, [r7, #8]
 8002a78:	68f9      	ldr	r1, [r7, #12]
 8002a7a:	2073      	movs	r0, #115	@ 0x73
 8002a7c:	f003 fb66 	bl	800614c <SEGGER_SYSVIEW_RecordU32x3>
}
 8002a80:	bf00      	nop
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a88:	b590      	push	{r4, r7, lr}
 8002a8a:	b08f      	sub	sp, #60	@ 0x3c
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a94:	2300      	movs	r3, #0
 8002a96:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10b      	bne.n	8002aba <xQueueReceive+0x32>
        __asm volatile
 8002aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002aa6:	f383 8811 	msr	BASEPRI, r3
 8002aaa:	f3bf 8f6f 	isb	sy
 8002aae:	f3bf 8f4f 	dsb	sy
 8002ab2:	623b      	str	r3, [r7, #32]
    }
 8002ab4:	bf00      	nop
 8002ab6:	bf00      	nop
 8002ab8:	e7fd      	b.n	8002ab6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002aba:	68bb      	ldr	r3, [r7, #8]
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d103      	bne.n	8002ac8 <xQueueReceive+0x40>
 8002ac0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d101      	bne.n	8002acc <xQueueReceive+0x44>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <xQueueReceive+0x46>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d10b      	bne.n	8002aea <xQueueReceive+0x62>
        __asm volatile
 8002ad2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ad6:	f383 8811 	msr	BASEPRI, r3
 8002ada:	f3bf 8f6f 	isb	sy
 8002ade:	f3bf 8f4f 	dsb	sy
 8002ae2:	61fb      	str	r3, [r7, #28]
    }
 8002ae4:	bf00      	nop
 8002ae6:	bf00      	nop
 8002ae8:	e7fd      	b.n	8002ae6 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002aea:	f001 f923 	bl	8003d34 <xTaskGetSchedulerState>
 8002aee:	4603      	mov	r3, r0
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d102      	bne.n	8002afa <xQueueReceive+0x72>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d101      	bne.n	8002afe <xQueueReceive+0x76>
 8002afa:	2301      	movs	r3, #1
 8002afc:	e000      	b.n	8002b00 <xQueueReceive+0x78>
 8002afe:	2300      	movs	r3, #0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d10b      	bne.n	8002b1c <xQueueReceive+0x94>
        __asm volatile
 8002b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b08:	f383 8811 	msr	BASEPRI, r3
 8002b0c:	f3bf 8f6f 	isb	sy
 8002b10:	f3bf 8f4f 	dsb	sy
 8002b14:	61bb      	str	r3, [r7, #24]
    }
 8002b16:	bf00      	nop
 8002b18:	bf00      	nop
 8002b1a:	e7fd      	b.n	8002b18 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002b1c:	f001 fde6 	bl	80046ec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002b24:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d02f      	beq.n	8002b8c <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b2c:	68b9      	ldr	r1, [r7, #8]
 8002b2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002b30:	f000 f8be 	bl	8002cb0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002b34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b36:	4618      	mov	r0, r3
 8002b38:	f004 f836 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	2000      	movs	r0, #0
 8002b40:	f004 f832 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002b44:	4602      	mov	r2, r0
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2101      	movs	r1, #1
 8002b4a:	9100      	str	r1, [sp, #0]
 8002b4c:	4621      	mov	r1, r4
 8002b4e:	205c      	movs	r0, #92	@ 0x5c
 8002b50:	f003 fb72 	bl	8006238 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b56:	1e5a      	subs	r2, r3, #1
 8002b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b5e:	691b      	ldr	r3, [r3, #16]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d00f      	beq.n	8002b84 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b66:	3310      	adds	r3, #16
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f000 fecd 	bl	8003908 <xTaskRemoveFromEventList>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d007      	beq.n	8002b84 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b74:	4b4d      	ldr	r3, [pc, #308]	@ (8002cac <xQueueReceive+0x224>)
 8002b76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	f3bf 8f4f 	dsb	sy
 8002b80:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b84:	f001 fde4 	bl	8004750 <vPortExitCritical>
                return pdPASS;
 8002b88:	2301      	movs	r3, #1
 8002b8a:	e08a      	b.n	8002ca2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d113      	bne.n	8002bba <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b92:	f001 fddd 	bl	8004750 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002b96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f805 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002b9e:	4604      	mov	r4, r0
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f004 f801 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2101      	movs	r1, #1
 8002bac:	9100      	str	r1, [sp, #0]
 8002bae:	4621      	mov	r1, r4
 8002bb0:	205c      	movs	r0, #92	@ 0x5c
 8002bb2:	f003 fb41 	bl	8006238 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	e073      	b.n	8002ca2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d106      	bne.n	8002bce <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002bc0:	f107 0310 	add.w	r3, r7, #16
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 ff79 	bl	8003abc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002bce:	f001 fdbf 	bl	8004750 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002bd2:	f000 fb73 	bl	80032bc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002bd6:	f001 fd89 	bl	80046ec <vPortEnterCritical>
 8002bda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bdc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002be0:	b25b      	sxtb	r3, r3
 8002be2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be6:	d103      	bne.n	8002bf0 <xQueueReceive+0x168>
 8002be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002bf2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002bf6:	b25b      	sxtb	r3, r3
 8002bf8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfc:	d103      	bne.n	8002c06 <xQueueReceive+0x17e>
 8002bfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c00:	2200      	movs	r2, #0
 8002c02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002c06:	f001 fda3 	bl	8004750 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c0a:	1d3a      	adds	r2, r7, #4
 8002c0c:	f107 0310 	add.w	r3, r7, #16
 8002c10:	4611      	mov	r1, r2
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 ff68 	bl	8003ae8 <xTaskCheckForTimeOut>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d124      	bne.n	8002c68 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c1e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c20:	f000 f8be 	bl	8002da0 <prvIsQueueEmpty>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d018      	beq.n	8002c5c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c2c:	3324      	adds	r3, #36	@ 0x24
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	4611      	mov	r1, r2
 8002c32:	4618      	mov	r0, r3
 8002c34:	f000 fdf8 	bl	8003828 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002c38:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c3a:	f000 f85f 	bl	8002cfc <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002c3e:	f000 fb4b 	bl	80032d8 <xTaskResumeAll>
 8002c42:	4603      	mov	r3, r0
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	f47f af69 	bne.w	8002b1c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002c4a:	4b18      	ldr	r3, [pc, #96]	@ (8002cac <xQueueReceive+0x224>)
 8002c4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002c50:	601a      	str	r2, [r3, #0]
 8002c52:	f3bf 8f4f 	dsb	sy
 8002c56:	f3bf 8f6f 	isb	sy
 8002c5a:	e75f      	b.n	8002b1c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002c5c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c5e:	f000 f84d 	bl	8002cfc <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002c62:	f000 fb39 	bl	80032d8 <xTaskResumeAll>
 8002c66:	e759      	b.n	8002b1c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002c68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c6a:	f000 f847 	bl	8002cfc <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002c6e:	f000 fb33 	bl	80032d8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002c74:	f000 f894 	bl	8002da0 <prvIsQueueEmpty>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	f43f af4e 	beq.w	8002b1c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002c80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 ff90 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002c88:	4604      	mov	r4, r0
 8002c8a:	2000      	movs	r0, #0
 8002c8c:	f003 ff8c 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002c90:	4602      	mov	r2, r0
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2101      	movs	r1, #1
 8002c96:	9100      	str	r1, [sp, #0]
 8002c98:	4621      	mov	r1, r4
 8002c9a:	205c      	movs	r0, #92	@ 0x5c
 8002c9c:	f003 facc 	bl	8006238 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002ca0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3734      	adds	r7, #52	@ 0x34
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd90      	pop	{r4, r7, pc}
 8002caa:	bf00      	nop
 8002cac:	e000ed04 	.word	0xe000ed04

08002cb0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d018      	beq.n	8002cf4 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	68da      	ldr	r2, [r3, #12]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cca:	441a      	add	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68da      	ldr	r2, [r3, #12]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689b      	ldr	r3, [r3, #8]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d303      	bcc.n	8002ce4 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68d9      	ldr	r1, [r3, #12]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cec:	461a      	mov	r2, r3
 8002cee:	6838      	ldr	r0, [r7, #0]
 8002cf0:	f004 f928 	bl	8006f44 <memcpy>
    }
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}

08002cfc <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b084      	sub	sp, #16
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002d04:	f001 fcf2 	bl	80046ec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d0e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d10:	e011      	b.n	8002d36 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d012      	beq.n	8002d40 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3324      	adds	r3, #36	@ 0x24
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fdf2 	bl	8003908 <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002d2a:	f000 ff45 	bl	8003bb8 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002d2e:	7bfb      	ldrb	r3, [r7, #15]
 8002d30:	3b01      	subs	r3, #1
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	dce9      	bgt.n	8002d12 <prvUnlockQueue+0x16>
 8002d3e:	e000      	b.n	8002d42 <prvUnlockQueue+0x46>
                    break;
 8002d40:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	22ff      	movs	r2, #255	@ 0xff
 8002d46:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002d4a:	f001 fd01 	bl	8004750 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002d4e:	f001 fccd 	bl	80046ec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002d58:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d5a:	e011      	b.n	8002d80 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	691b      	ldr	r3, [r3, #16]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d012      	beq.n	8002d8a <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3310      	adds	r3, #16
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 fdcd 	bl	8003908 <xTaskRemoveFromEventList>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002d74:	f000 ff20 	bl	8003bb8 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	3b01      	subs	r3, #1
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d80:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	dce9      	bgt.n	8002d5c <prvUnlockQueue+0x60>
 8002d88:	e000      	b.n	8002d8c <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8002d8a:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	22ff      	movs	r2, #255	@ 0xff
 8002d90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002d94:	f001 fcdc 	bl	8004750 <vPortExitCritical>
}
 8002d98:	bf00      	nop
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}

08002da0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8002da8:	f001 fca0 	bl	80046ec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d102      	bne.n	8002dba <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002db4:	2301      	movs	r3, #1
 8002db6:	60fb      	str	r3, [r7, #12]
 8002db8:	e001      	b.n	8002dbe <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002dbe:	f001 fcc7 	bl	8004750 <vPortExitCritical>

    return xReturn;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
}
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b086      	sub	sp, #24
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d10b      	bne.n	8002df8 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002de4:	f383 8811 	msr	BASEPRI, r3
 8002de8:	f3bf 8f6f 	isb	sy
 8002dec:	f3bf 8f4f 	dsb	sy
 8002df0:	60fb      	str	r3, [r7, #12]
    }
 8002df2:	bf00      	nop
 8002df4:	bf00      	nop
 8002df6:	e7fd      	b.n	8002df4 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d024      	beq.n	8002e48 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dfe:	2300      	movs	r3, #0
 8002e00:	617b      	str	r3, [r7, #20]
 8002e02:	e01e      	b.n	8002e42 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002e04:	4a1c      	ldr	r2, [pc, #112]	@ (8002e78 <vQueueAddToRegistry+0xac>)
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	00db      	lsls	r3, r3, #3
 8002e0a:	4413      	add	r3, r2
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	687a      	ldr	r2, [r7, #4]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d105      	bne.n	8002e20 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e14:	697b      	ldr	r3, [r7, #20]
 8002e16:	00db      	lsls	r3, r3, #3
 8002e18:	4a17      	ldr	r2, [pc, #92]	@ (8002e78 <vQueueAddToRegistry+0xac>)
 8002e1a:	4413      	add	r3, r2
 8002e1c:	613b      	str	r3, [r7, #16]
                    break;
 8002e1e:	e013      	b.n	8002e48 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002e20:	693b      	ldr	r3, [r7, #16]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d10a      	bne.n	8002e3c <vQueueAddToRegistry+0x70>
 8002e26:	4a14      	ldr	r2, [pc, #80]	@ (8002e78 <vQueueAddToRegistry+0xac>)
 8002e28:	697b      	ldr	r3, [r7, #20]
 8002e2a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	00db      	lsls	r3, r3, #3
 8002e36:	4a10      	ldr	r2, [pc, #64]	@ (8002e78 <vQueueAddToRegistry+0xac>)
 8002e38:	4413      	add	r3, r2
 8002e3a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	3301      	adds	r3, #1
 8002e40:	617b      	str	r3, [r7, #20]
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	2b07      	cmp	r3, #7
 8002e46:	d9dd      	bls.n	8002e04 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d00f      	beq.n	8002e6e <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	687a      	ldr	r2, [r7, #4]
 8002e58:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	f003 fea3 	bl	8006ba8 <SEGGER_SYSVIEW_ShrinkId>
 8002e62:	4601      	mov	r1, r0
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	461a      	mov	r2, r3
 8002e68:	2071      	movs	r0, #113	@ 0x71
 8002e6a:	f003 f915 	bl	8006098 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002e6e:	bf00      	nop
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	20000114 	.word	0x20000114

08002e7c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	b086      	sub	sp, #24
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002e8c:	f001 fc2e 	bl	80046ec <vPortEnterCritical>
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002e96:	b25b      	sxtb	r3, r3
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d103      	bne.n	8002ea6 <vQueueWaitForMessageRestricted+0x2a>
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002eac:	b25b      	sxtb	r3, r3
 8002eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb2:	d103      	bne.n	8002ebc <vQueueWaitForMessageRestricted+0x40>
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002ebc:	f001 fc48 	bl	8004750 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d106      	bne.n	8002ed6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	3324      	adds	r3, #36	@ 0x24
 8002ecc:	687a      	ldr	r2, [r7, #4]
 8002ece:	68b9      	ldr	r1, [r7, #8]
 8002ed0:	4618      	mov	r0, r3
 8002ed2:	f000 fccf 	bl	8003874 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 8002ed6:	6978      	ldr	r0, [r7, #20]
 8002ed8:	f7ff ff10 	bl	8002cfc <prvUnlockQueue>
    }
 8002edc:	bf00      	nop
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}

08002ee4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b08c      	sub	sp, #48	@ 0x30
 8002ee8:	af04      	add	r7, sp, #16
 8002eea:	60f8      	str	r0, [r7, #12]
 8002eec:	60b9      	str	r1, [r7, #8]
 8002eee:	603b      	str	r3, [r7, #0]
 8002ef0:	4613      	mov	r3, r2
 8002ef2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002ef4:	88fb      	ldrh	r3, [r7, #6]
 8002ef6:	009b      	lsls	r3, r3, #2
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f001 fd29 	bl	8004950 <pvPortMalloc>
 8002efe:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d013      	beq.n	8002f2e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f06:	2058      	movs	r0, #88	@ 0x58
 8002f08:	f001 fd22 	bl	8004950 <pvPortMalloc>
 8002f0c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002f14:	2258      	movs	r2, #88	@ 0x58
 8002f16:	2100      	movs	r1, #0
 8002f18:	69f8      	ldr	r0, [r7, #28]
 8002f1a:	f003 ffe5 	bl	8006ee8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	697a      	ldr	r2, [r7, #20]
 8002f22:	631a      	str	r2, [r3, #48]	@ 0x30
 8002f24:	e005      	b.n	8002f32 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002f26:	6978      	ldr	r0, [r7, #20]
 8002f28:	f001 fdce 	bl	8004ac8 <vPortFree>
 8002f2c:	e001      	b.n	8002f32 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002f32:	69fb      	ldr	r3, [r7, #28]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d013      	beq.n	8002f60 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002f38:	88fa      	ldrh	r2, [r7, #6]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	9303      	str	r3, [sp, #12]
 8002f3e:	69fb      	ldr	r3, [r7, #28]
 8002f40:	9302      	str	r3, [sp, #8]
 8002f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f44:	9301      	str	r3, [sp, #4]
 8002f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f48:	9300      	str	r3, [sp, #0]
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	68b9      	ldr	r1, [r7, #8]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 f80e 	bl	8002f70 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002f54:	69f8      	ldr	r0, [r7, #28]
 8002f56:	f000 f89b 	bl	8003090 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	61bb      	str	r3, [r7, #24]
 8002f5e:	e002      	b.n	8002f66 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002f60:	f04f 33ff 	mov.w	r3, #4294967295
 8002f64:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002f66:	69bb      	ldr	r3, [r7, #24]
    }
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3720      	adds	r7, #32
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}

08002f70 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b088      	sub	sp, #32
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	60f8      	str	r0, [r7, #12]
 8002f78:	60b9      	str	r1, [r7, #8]
 8002f7a:	607a      	str	r2, [r7, #4]
 8002f7c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f80:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	461a      	mov	r2, r3
 8002f88:	21a5      	movs	r1, #165	@ 0xa5
 8002f8a:	f003 ffad 	bl	8006ee8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f90:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	4413      	add	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002fa0:	69bb      	ldr	r3, [r7, #24]
 8002fa2:	f023 0307 	bic.w	r3, r3, #7
 8002fa6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	f003 0307 	and.w	r3, r3, #7
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002fb6:	f383 8811 	msr	BASEPRI, r3
 8002fba:	f3bf 8f6f 	isb	sy
 8002fbe:	f3bf 8f4f 	dsb	sy
 8002fc2:	617b      	str	r3, [r7, #20]
    }
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	e7fd      	b.n	8002fc6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d01e      	beq.n	800300e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	61fb      	str	r3, [r7, #28]
 8002fd4:	e012      	b.n	8002ffc <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002fd6:	68ba      	ldr	r2, [r7, #8]
 8002fd8:	69fb      	ldr	r3, [r7, #28]
 8002fda:	4413      	add	r3, r2
 8002fdc:	7819      	ldrb	r1, [r3, #0]
 8002fde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002fe0:	69fb      	ldr	r3, [r7, #28]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3334      	adds	r3, #52	@ 0x34
 8002fe6:	460a      	mov	r2, r1
 8002fe8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002fea:	68ba      	ldr	r2, [r7, #8]
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d006      	beq.n	8003004 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	3301      	adds	r3, #1
 8002ffa:	61fb      	str	r3, [r7, #28]
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	2b09      	cmp	r3, #9
 8003000:	d9e9      	bls.n	8002fd6 <prvInitialiseNewTask+0x66>
 8003002:	e000      	b.n	8003006 <prvInitialiseNewTask+0x96>
            {
                break;
 8003004:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003006:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003008:	2200      	movs	r2, #0
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800300e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003010:	2b04      	cmp	r3, #4
 8003012:	d90b      	bls.n	800302c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8003014:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003018:	f383 8811 	msr	BASEPRI, r3
 800301c:	f3bf 8f6f 	isb	sy
 8003020:	f3bf 8f4f 	dsb	sy
 8003024:	613b      	str	r3, [r7, #16]
    }
 8003026:	bf00      	nop
 8003028:	bf00      	nop
 800302a:	e7fd      	b.n	8003028 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800302c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800302e:	2b04      	cmp	r3, #4
 8003030:	d901      	bls.n	8003036 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003032:	2304      	movs	r3, #4
 8003034:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003036:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003038:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800303a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800303c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800303e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003040:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003042:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003044:	3304      	adds	r3, #4
 8003046:	4618      	mov	r0, r3
 8003048:	f7ff fba4 	bl	8002794 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800304c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304e:	3318      	adds	r3, #24
 8003050:	4618      	mov	r0, r3
 8003052:	f7ff fb9f 	bl	8002794 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003056:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003058:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800305a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305e:	f1c3 0205 	rsb	r2, r3, #5
 8003062:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003064:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003066:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003068:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800306a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	68f9      	ldr	r1, [r7, #12]
 8003070:	69b8      	ldr	r0, [r7, #24]
 8003072:	f001 f989 	bl	8004388 <pxPortInitialiseStack>
 8003076:	4602      	mov	r2, r0
 8003078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800307a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800307c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800307e:	2b00      	cmp	r3, #0
 8003080:	d002      	beq.n	8003088 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003082:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003084:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003086:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003088:	bf00      	nop
 800308a:	3720      	adds	r7, #32
 800308c:	46bd      	mov	sp, r7
 800308e:	bd80      	pop	{r7, pc}

08003090 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b086      	sub	sp, #24
 8003094:	af02      	add	r7, sp, #8
 8003096:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8003098:	f001 fb28 	bl	80046ec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 800309c:	4b4f      	ldr	r3, [pc, #316]	@ (80031dc <prvAddNewTaskToReadyList+0x14c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3301      	adds	r3, #1
 80030a2:	4a4e      	ldr	r2, [pc, #312]	@ (80031dc <prvAddNewTaskToReadyList+0x14c>)
 80030a4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80030a6:	4b4e      	ldr	r3, [pc, #312]	@ (80031e0 <prvAddNewTaskToReadyList+0x150>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d109      	bne.n	80030c2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80030ae:	4a4c      	ldr	r2, [pc, #304]	@ (80031e0 <prvAddNewTaskToReadyList+0x150>)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80030b4:	4b49      	ldr	r3, [pc, #292]	@ (80031dc <prvAddNewTaskToReadyList+0x14c>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	2b01      	cmp	r3, #1
 80030ba:	d110      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80030bc:	f000 fda0 	bl	8003c00 <prvInitialiseTaskLists>
 80030c0:	e00d      	b.n	80030de <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80030c2:	4b48      	ldr	r3, [pc, #288]	@ (80031e4 <prvAddNewTaskToReadyList+0x154>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d109      	bne.n	80030de <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80030ca:	4b45      	ldr	r3, [pc, #276]	@ (80031e0 <prvAddNewTaskToReadyList+0x150>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d802      	bhi.n	80030de <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80030d8:	4a41      	ldr	r2, [pc, #260]	@ (80031e0 <prvAddNewTaskToReadyList+0x150>)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80030de:	4b42      	ldr	r3, [pc, #264]	@ (80031e8 <prvAddNewTaskToReadyList+0x158>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	3301      	adds	r3, #1
 80030e4:	4a40      	ldr	r2, [pc, #256]	@ (80031e8 <prvAddNewTaskToReadyList+0x158>)
 80030e6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80030e8:	4b3f      	ldr	r3, [pc, #252]	@ (80031e8 <prvAddNewTaskToReadyList+0x158>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d016      	beq.n	8003124 <prvAddNewTaskToReadyList+0x94>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4618      	mov	r0, r3
 80030fa:	f003 fc8f 	bl	8006a1c <SEGGER_SYSVIEW_OnTaskCreate>
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800310e:	461d      	mov	r5, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	461c      	mov	r4, r3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800311a:	1ae3      	subs	r3, r4, r3
 800311c:	9300      	str	r3, [sp, #0]
 800311e:	462b      	mov	r3, r5
 8003120:	f001 fe96 	bl	8004e50 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4618      	mov	r0, r3
 8003128:	f003 fcfc 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStartReady>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003130:	2201      	movs	r2, #1
 8003132:	409a      	lsls	r2, r3
 8003134:	4b2d      	ldr	r3, [pc, #180]	@ (80031ec <prvAddNewTaskToReadyList+0x15c>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4313      	orrs	r3, r2
 800313a:	4a2c      	ldr	r2, [pc, #176]	@ (80031ec <prvAddNewTaskToReadyList+0x15c>)
 800313c:	6013      	str	r3, [r2, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003142:	492b      	ldr	r1, [pc, #172]	@ (80031f0 <prvAddNewTaskToReadyList+0x160>)
 8003144:	4613      	mov	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	4413      	add	r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	3304      	adds	r3, #4
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	60fb      	str	r3, [r7, #12]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	68fa      	ldr	r2, [r7, #12]
 8003158:	609a      	str	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	689a      	ldr	r2, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	3204      	adds	r2, #4
 800316a:	605a      	str	r2, [r3, #4]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	1d1a      	adds	r2, r3, #4
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	609a      	str	r2, [r3, #8]
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003178:	4613      	mov	r3, r2
 800317a:	009b      	lsls	r3, r3, #2
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	4a1b      	ldr	r2, [pc, #108]	@ (80031f0 <prvAddNewTaskToReadyList+0x160>)
 8003182:	441a      	add	r2, r3
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	615a      	str	r2, [r3, #20]
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800318c:	4918      	ldr	r1, [pc, #96]	@ (80031f0 <prvAddNewTaskToReadyList+0x160>)
 800318e:	4613      	mov	r3, r2
 8003190:	009b      	lsls	r3, r3, #2
 8003192:	4413      	add	r3, r2
 8003194:	009b      	lsls	r3, r3, #2
 8003196:	440b      	add	r3, r1
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	4814      	ldr	r0, [pc, #80]	@ (80031f0 <prvAddNewTaskToReadyList+0x160>)
 800319e:	4613      	mov	r3, r2
 80031a0:	009b      	lsls	r3, r3, #2
 80031a2:	4413      	add	r3, r2
 80031a4:	009b      	lsls	r3, r3, #2
 80031a6:	4403      	add	r3, r0
 80031a8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80031aa:	f001 fad1 	bl	8004750 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80031ae:	4b0d      	ldr	r3, [pc, #52]	@ (80031e4 <prvAddNewTaskToReadyList+0x154>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031b6:	4b0a      	ldr	r3, [pc, #40]	@ (80031e0 <prvAddNewTaskToReadyList+0x150>)
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d207      	bcs.n	80031d4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 80031c4:	4b0b      	ldr	r3, [pc, #44]	@ (80031f4 <prvAddNewTaskToReadyList+0x164>)
 80031c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80031ca:	601a      	str	r2, [r3, #0]
 80031cc:	f3bf 8f4f 	dsb	sy
 80031d0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80031d4:	bf00      	nop
 80031d6:	3710      	adds	r7, #16
 80031d8:	46bd      	mov	sp, r7
 80031da:	bdb0      	pop	{r4, r5, r7, pc}
 80031dc:	2000022c 	.word	0x2000022c
 80031e0:	20000154 	.word	0x20000154
 80031e4:	20000238 	.word	0x20000238
 80031e8:	20000248 	.word	0x20000248
 80031ec:	20000234 	.word	0x20000234
 80031f0:	20000158 	.word	0x20000158
 80031f4:	e000ed04 	.word	0xe000ed04

080031f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80031fe:	4b27      	ldr	r3, [pc, #156]	@ (800329c <vTaskStartScheduler+0xa4>)
 8003200:	9301      	str	r3, [sp, #4]
 8003202:	2300      	movs	r3, #0
 8003204:	9300      	str	r3, [sp, #0]
 8003206:	2300      	movs	r3, #0
 8003208:	2282      	movs	r2, #130	@ 0x82
 800320a:	4925      	ldr	r1, [pc, #148]	@ (80032a0 <vTaskStartScheduler+0xa8>)
 800320c:	4825      	ldr	r0, [pc, #148]	@ (80032a4 <vTaskStartScheduler+0xac>)
 800320e:	f7ff fe69 	bl	8002ee4 <xTaskCreate>
 8003212:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d102      	bne.n	8003220 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 800321a:	f000 fe29 	bl	8003e70 <xTimerCreateTimerTask>
 800321e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	2b01      	cmp	r3, #1
 8003224:	d124      	bne.n	8003270 <vTaskStartScheduler+0x78>
        __asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	60bb      	str	r3, [r7, #8]
    }
 8003238:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 800323a:	4b1b      	ldr	r3, [pc, #108]	@ (80032a8 <vTaskStartScheduler+0xb0>)
 800323c:	f04f 32ff 	mov.w	r2, #4294967295
 8003240:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003242:	4b1a      	ldr	r3, [pc, #104]	@ (80032ac <vTaskStartScheduler+0xb4>)
 8003244:	2201      	movs	r2, #1
 8003246:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003248:	4b19      	ldr	r3, [pc, #100]	@ (80032b0 <vTaskStartScheduler+0xb8>)
 800324a:	2200      	movs	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800324e:	4b19      	ldr	r3, [pc, #100]	@ (80032b4 <vTaskStartScheduler+0xbc>)
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	4b12      	ldr	r3, [pc, #72]	@ (800329c <vTaskStartScheduler+0xa4>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	429a      	cmp	r2, r3
 8003258:	d102      	bne.n	8003260 <vTaskStartScheduler+0x68>
 800325a:	f003 fbc3 	bl	80069e4 <SEGGER_SYSVIEW_OnIdle>
 800325e:	e004      	b.n	800326a <vTaskStartScheduler+0x72>
 8003260:	4b14      	ldr	r3, [pc, #80]	@ (80032b4 <vTaskStartScheduler+0xbc>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f003 fc1b 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 800326a:	f001 f91b 	bl	80044a4 <xPortStartScheduler>
 800326e:	e00f      	b.n	8003290 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003276:	d10b      	bne.n	8003290 <vTaskStartScheduler+0x98>
        __asm volatile
 8003278:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800327c:	f383 8811 	msr	BASEPRI, r3
 8003280:	f3bf 8f6f 	isb	sy
 8003284:	f3bf 8f4f 	dsb	sy
 8003288:	607b      	str	r3, [r7, #4]
    }
 800328a:	bf00      	nop
 800328c:	bf00      	nop
 800328e:	e7fd      	b.n	800328c <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <vTaskStartScheduler+0xc0>)
 8003292:	681b      	ldr	r3, [r3, #0]
}
 8003294:	bf00      	nop
 8003296:	3710      	adds	r7, #16
 8003298:	46bd      	mov	sp, r7
 800329a:	bd80      	pop	{r7, pc}
 800329c:	20000250 	.word	0x20000250
 80032a0:	08007850 	.word	0x08007850
 80032a4:	08003bd1 	.word	0x08003bd1
 80032a8:	2000024c 	.word	0x2000024c
 80032ac:	20000238 	.word	0x20000238
 80032b0:	20000230 	.word	0x20000230
 80032b4:	20000154 	.word	0x20000154
 80032b8:	2000000c 	.word	0x2000000c

080032bc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80032bc:	b480      	push	{r7}
 80032be:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80032c0:	4b04      	ldr	r3, [pc, #16]	@ (80032d4 <vTaskSuspendAll+0x18>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	3301      	adds	r3, #1
 80032c6:	4a03      	ldr	r2, [pc, #12]	@ (80032d4 <vTaskSuspendAll+0x18>)
 80032c8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80032ca:	bf00      	nop
 80032cc:	46bd      	mov	sp, r7
 80032ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d2:	4770      	bx	lr
 80032d4:	20000254 	.word	0x20000254

080032d8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b088      	sub	sp, #32
 80032dc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80032e2:	2300      	movs	r3, #0
 80032e4:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80032e6:	4b73      	ldr	r3, [pc, #460]	@ (80034b4 <xTaskResumeAll+0x1dc>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d10b      	bne.n	8003306 <xTaskResumeAll+0x2e>
        __asm volatile
 80032ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	607b      	str	r3, [r7, #4]
    }
 8003300:	bf00      	nop
 8003302:	bf00      	nop
 8003304:	e7fd      	b.n	8003302 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8003306:	f001 f9f1 	bl	80046ec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 800330a:	4b6a      	ldr	r3, [pc, #424]	@ (80034b4 <xTaskResumeAll+0x1dc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	3b01      	subs	r3, #1
 8003310:	4a68      	ldr	r2, [pc, #416]	@ (80034b4 <xTaskResumeAll+0x1dc>)
 8003312:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003314:	4b67      	ldr	r3, [pc, #412]	@ (80034b4 <xTaskResumeAll+0x1dc>)
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	f040 80c4 	bne.w	80034a6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800331e:	4b66      	ldr	r3, [pc, #408]	@ (80034b8 <xTaskResumeAll+0x1e0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 80bf 	beq.w	80034a6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003328:	e08e      	b.n	8003448 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800332a:	4b64      	ldr	r3, [pc, #400]	@ (80034bc <xTaskResumeAll+0x1e4>)
 800332c:	68db      	ldr	r3, [r3, #12]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003336:	613b      	str	r3, [r7, #16]
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	69db      	ldr	r3, [r3, #28]
 800333c:	69fa      	ldr	r2, [r7, #28]
 800333e:	6a12      	ldr	r2, [r2, #32]
 8003340:	609a      	str	r2, [r3, #8]
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	6a1b      	ldr	r3, [r3, #32]
 8003346:	69fa      	ldr	r2, [r7, #28]
 8003348:	69d2      	ldr	r2, [r2, #28]
 800334a:	605a      	str	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	685a      	ldr	r2, [r3, #4]
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3318      	adds	r3, #24
 8003354:	429a      	cmp	r2, r3
 8003356:	d103      	bne.n	8003360 <xTaskResumeAll+0x88>
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	6a1a      	ldr	r2, [r3, #32]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	605a      	str	r2, [r3, #4]
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	2200      	movs	r2, #0
 8003364:	629a      	str	r2, [r3, #40]	@ 0x28
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003370:	69fb      	ldr	r3, [r7, #28]
 8003372:	695b      	ldr	r3, [r3, #20]
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	69fb      	ldr	r3, [r7, #28]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	69fa      	ldr	r2, [r7, #28]
 800337c:	68d2      	ldr	r2, [r2, #12]
 800337e:	609a      	str	r2, [r3, #8]
 8003380:	69fb      	ldr	r3, [r7, #28]
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	69fa      	ldr	r2, [r7, #28]
 8003386:	6892      	ldr	r2, [r2, #8]
 8003388:	605a      	str	r2, [r3, #4]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	685a      	ldr	r2, [r3, #4]
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	3304      	adds	r3, #4
 8003392:	429a      	cmp	r2, r3
 8003394:	d103      	bne.n	800339e <xTaskResumeAll+0xc6>
 8003396:	69fb      	ldr	r3, [r7, #28]
 8003398:	68da      	ldr	r2, [r3, #12]
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	605a      	str	r2, [r3, #4]
 800339e:	69fb      	ldr	r3, [r7, #28]
 80033a0:	2200      	movs	r2, #0
 80033a2:	615a      	str	r2, [r3, #20]
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80033ae:	69fb      	ldr	r3, [r7, #28]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f003 fbb7 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStartReady>
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ba:	2201      	movs	r2, #1
 80033bc:	409a      	lsls	r2, r3
 80033be:	4b40      	ldr	r3, [pc, #256]	@ (80034c0 <xTaskResumeAll+0x1e8>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	4a3e      	ldr	r2, [pc, #248]	@ (80034c0 <xTaskResumeAll+0x1e8>)
 80033c6:	6013      	str	r3, [r2, #0]
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033cc:	493d      	ldr	r1, [pc, #244]	@ (80034c4 <xTaskResumeAll+0x1ec>)
 80033ce:	4613      	mov	r3, r2
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	4413      	add	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	440b      	add	r3, r1
 80033d8:	3304      	adds	r3, #4
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	60bb      	str	r3, [r7, #8]
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	68ba      	ldr	r2, [r7, #8]
 80033e2:	609a      	str	r2, [r3, #8]
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	689a      	ldr	r2, [r3, #8]
 80033e8:	69fb      	ldr	r3, [r7, #28]
 80033ea:	60da      	str	r2, [r3, #12]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	69fa      	ldr	r2, [r7, #28]
 80033f2:	3204      	adds	r2, #4
 80033f4:	605a      	str	r2, [r3, #4]
 80033f6:	69fb      	ldr	r3, [r7, #28]
 80033f8:	1d1a      	adds	r2, r3, #4
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	609a      	str	r2, [r3, #8]
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003402:	4613      	mov	r3, r2
 8003404:	009b      	lsls	r3, r3, #2
 8003406:	4413      	add	r3, r2
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	4a2e      	ldr	r2, [pc, #184]	@ (80034c4 <xTaskResumeAll+0x1ec>)
 800340c:	441a      	add	r2, r3
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	615a      	str	r2, [r3, #20]
 8003412:	69fb      	ldr	r3, [r7, #28]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	492b      	ldr	r1, [pc, #172]	@ (80034c4 <xTaskResumeAll+0x1ec>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	1c59      	adds	r1, r3, #1
 8003426:	4827      	ldr	r0, [pc, #156]	@ (80034c4 <xTaskResumeAll+0x1ec>)
 8003428:	4613      	mov	r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	4413      	add	r3, r2
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	4403      	add	r3, r0
 8003432:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003434:	69fb      	ldr	r3, [r7, #28]
 8003436:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003438:	4b23      	ldr	r3, [pc, #140]	@ (80034c8 <xTaskResumeAll+0x1f0>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800343e:	429a      	cmp	r2, r3
 8003440:	d302      	bcc.n	8003448 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8003442:	4b22      	ldr	r3, [pc, #136]	@ (80034cc <xTaskResumeAll+0x1f4>)
 8003444:	2201      	movs	r2, #1
 8003446:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003448:	4b1c      	ldr	r3, [pc, #112]	@ (80034bc <xTaskResumeAll+0x1e4>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2b00      	cmp	r3, #0
 800344e:	f47f af6c 	bne.w	800332a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8003452:	69fb      	ldr	r3, [r7, #28]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d001      	beq.n	800345c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003458:	f000 fc50 	bl	8003cfc <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800345c:	4b1c      	ldr	r3, [pc, #112]	@ (80034d0 <xTaskResumeAll+0x1f8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8003462:	697b      	ldr	r3, [r7, #20]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d010      	beq.n	800348a <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003468:	f000 f858 	bl	800351c <xTaskIncrementTick>
 800346c:	4603      	mov	r3, r0
 800346e:	2b00      	cmp	r3, #0
 8003470:	d002      	beq.n	8003478 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8003472:	4b16      	ldr	r3, [pc, #88]	@ (80034cc <xTaskResumeAll+0x1f4>)
 8003474:	2201      	movs	r2, #1
 8003476:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	3b01      	subs	r3, #1
 800347c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	2b00      	cmp	r3, #0
 8003482:	d1f1      	bne.n	8003468 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8003484:	4b12      	ldr	r3, [pc, #72]	@ (80034d0 <xTaskResumeAll+0x1f8>)
 8003486:	2200      	movs	r2, #0
 8003488:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <xTaskResumeAll+0x1f4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d009      	beq.n	80034a6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8003496:	4b0f      	ldr	r3, [pc, #60]	@ (80034d4 <xTaskResumeAll+0x1fc>)
 8003498:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	f3bf 8f4f 	dsb	sy
 80034a2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80034a6:	f001 f953 	bl	8004750 <vPortExitCritical>

    return xAlreadyYielded;
 80034aa:	69bb      	ldr	r3, [r7, #24]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3720      	adds	r7, #32
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000254 	.word	0x20000254
 80034b8:	2000022c 	.word	0x2000022c
 80034bc:	200001ec 	.word	0x200001ec
 80034c0:	20000234 	.word	0x20000234
 80034c4:	20000158 	.word	0x20000158
 80034c8:	20000154 	.word	0x20000154
 80034cc:	20000240 	.word	0x20000240
 80034d0:	2000023c 	.word	0x2000023c
 80034d4:	e000ed04 	.word	0xe000ed04

080034d8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80034de:	4b05      	ldr	r3, [pc, #20]	@ (80034f4 <xTaskGetTickCount+0x1c>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80034e4:	687b      	ldr	r3, [r7, #4]
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	370c      	adds	r7, #12
 80034ea:	46bd      	mov	sp, r7
 80034ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f0:	4770      	bx	lr
 80034f2:	bf00      	nop
 80034f4:	20000230 	.word	0x20000230

080034f8 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80034fe:	f001 f9e5 	bl	80048cc <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8003506:	4b04      	ldr	r3, [pc, #16]	@ (8003518 <xTaskGetTickCountFromISR+0x20>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800350c:	683b      	ldr	r3, [r7, #0]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3708      	adds	r7, #8
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	20000230 	.word	0x20000230

0800351c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b08a      	sub	sp, #40	@ 0x28
 8003520:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003526:	4b80      	ldr	r3, [pc, #512]	@ (8003728 <xTaskIncrementTick+0x20c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	2b00      	cmp	r3, #0
 800352c:	f040 80f1 	bne.w	8003712 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003530:	4b7e      	ldr	r3, [pc, #504]	@ (800372c <xTaskIncrementTick+0x210>)
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	3301      	adds	r3, #1
 8003536:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003538:	4a7c      	ldr	r2, [pc, #496]	@ (800372c <xTaskIncrementTick+0x210>)
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d121      	bne.n	8003588 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003544:	4b7a      	ldr	r3, [pc, #488]	@ (8003730 <xTaskIncrementTick+0x214>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00b      	beq.n	8003566 <xTaskIncrementTick+0x4a>
        __asm volatile
 800354e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003552:	f383 8811 	msr	BASEPRI, r3
 8003556:	f3bf 8f6f 	isb	sy
 800355a:	f3bf 8f4f 	dsb	sy
 800355e:	607b      	str	r3, [r7, #4]
    }
 8003560:	bf00      	nop
 8003562:	bf00      	nop
 8003564:	e7fd      	b.n	8003562 <xTaskIncrementTick+0x46>
 8003566:	4b72      	ldr	r3, [pc, #456]	@ (8003730 <xTaskIncrementTick+0x214>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61fb      	str	r3, [r7, #28]
 800356c:	4b71      	ldr	r3, [pc, #452]	@ (8003734 <xTaskIncrementTick+0x218>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a6f      	ldr	r2, [pc, #444]	@ (8003730 <xTaskIncrementTick+0x214>)
 8003572:	6013      	str	r3, [r2, #0]
 8003574:	4a6f      	ldr	r2, [pc, #444]	@ (8003734 <xTaskIncrementTick+0x218>)
 8003576:	69fb      	ldr	r3, [r7, #28]
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6f      	ldr	r3, [pc, #444]	@ (8003738 <xTaskIncrementTick+0x21c>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3301      	adds	r3, #1
 8003580:	4a6d      	ldr	r2, [pc, #436]	@ (8003738 <xTaskIncrementTick+0x21c>)
 8003582:	6013      	str	r3, [r2, #0]
 8003584:	f000 fbba 	bl	8003cfc <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003588:	4b6c      	ldr	r3, [pc, #432]	@ (800373c <xTaskIncrementTick+0x220>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	6a3a      	ldr	r2, [r7, #32]
 800358e:	429a      	cmp	r2, r3
 8003590:	f0c0 80aa 	bcc.w	80036e8 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003594:	4b66      	ldr	r3, [pc, #408]	@ (8003730 <xTaskIncrementTick+0x214>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d104      	bne.n	80035a8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800359e:	4b67      	ldr	r3, [pc, #412]	@ (800373c <xTaskIncrementTick+0x220>)
 80035a0:	f04f 32ff 	mov.w	r2, #4294967295
 80035a4:	601a      	str	r2, [r3, #0]
                    break;
 80035a6:	e09f      	b.n	80036e8 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035a8:	4b61      	ldr	r3, [pc, #388]	@ (8003730 <xTaskIncrementTick+0x214>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80035b8:	6a3a      	ldr	r2, [r7, #32]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	429a      	cmp	r2, r3
 80035be:	d203      	bcs.n	80035c8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80035c0:	4a5e      	ldr	r2, [pc, #376]	@ (800373c <xTaskIncrementTick+0x220>)
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80035c6:	e08f      	b.n	80036e8 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	695b      	ldr	r3, [r3, #20]
 80035cc:	613b      	str	r3, [r7, #16]
 80035ce:	69bb      	ldr	r3, [r7, #24]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	68d2      	ldr	r2, [r2, #12]
 80035d6:	609a      	str	r2, [r3, #8]
 80035d8:	69bb      	ldr	r3, [r7, #24]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	69ba      	ldr	r2, [r7, #24]
 80035de:	6892      	ldr	r2, [r2, #8]
 80035e0:	605a      	str	r2, [r3, #4]
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	685a      	ldr	r2, [r3, #4]
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	3304      	adds	r3, #4
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d103      	bne.n	80035f6 <xTaskIncrementTick+0xda>
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	605a      	str	r2, [r3, #4]
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	2200      	movs	r2, #0
 80035fa:	615a      	str	r2, [r3, #20]
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	1e5a      	subs	r2, r3, #1
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003606:	69bb      	ldr	r3, [r7, #24]
 8003608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800360a:	2b00      	cmp	r3, #0
 800360c:	d01e      	beq.n	800364c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800360e:	69bb      	ldr	r3, [r7, #24]
 8003610:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003612:	60fb      	str	r3, [r7, #12]
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	69db      	ldr	r3, [r3, #28]
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	6a12      	ldr	r2, [r2, #32]
 800361c:	609a      	str	r2, [r3, #8]
 800361e:	69bb      	ldr	r3, [r7, #24]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	69ba      	ldr	r2, [r7, #24]
 8003624:	69d2      	ldr	r2, [r2, #28]
 8003626:	605a      	str	r2, [r3, #4]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	685a      	ldr	r2, [r3, #4]
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	3318      	adds	r3, #24
 8003630:	429a      	cmp	r2, r3
 8003632:	d103      	bne.n	800363c <xTaskIncrementTick+0x120>
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	6a1a      	ldr	r2, [r3, #32]
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	605a      	str	r2, [r3, #4]
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2200      	movs	r2, #0
 8003640:	629a      	str	r2, [r3, #40]	@ 0x28
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	1e5a      	subs	r2, r3, #1
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800364c:	69bb      	ldr	r3, [r7, #24]
 800364e:	4618      	mov	r0, r3
 8003650:	f003 fa68 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003658:	2201      	movs	r2, #1
 800365a:	409a      	lsls	r2, r3
 800365c:	4b38      	ldr	r3, [pc, #224]	@ (8003740 <xTaskIncrementTick+0x224>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4313      	orrs	r3, r2
 8003662:	4a37      	ldr	r2, [pc, #220]	@ (8003740 <xTaskIncrementTick+0x224>)
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	69bb      	ldr	r3, [r7, #24]
 8003668:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800366a:	4936      	ldr	r1, [pc, #216]	@ (8003744 <xTaskIncrementTick+0x228>)
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	440b      	add	r3, r1
 8003676:	3304      	adds	r3, #4
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	60bb      	str	r3, [r7, #8]
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	68ba      	ldr	r2, [r7, #8]
 8003680:	609a      	str	r2, [r3, #8]
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	689a      	ldr	r2, [r3, #8]
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	60da      	str	r2, [r3, #12]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	689b      	ldr	r3, [r3, #8]
 800368e:	69ba      	ldr	r2, [r7, #24]
 8003690:	3204      	adds	r2, #4
 8003692:	605a      	str	r2, [r3, #4]
 8003694:	69bb      	ldr	r3, [r7, #24]
 8003696:	1d1a      	adds	r2, r3, #4
 8003698:	68bb      	ldr	r3, [r7, #8]
 800369a:	609a      	str	r2, [r3, #8]
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a26      	ldr	r2, [pc, #152]	@ (8003744 <xTaskIncrementTick+0x228>)
 80036aa:	441a      	add	r2, r3
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	615a      	str	r2, [r3, #20]
 80036b0:	69bb      	ldr	r3, [r7, #24]
 80036b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036b4:	4923      	ldr	r1, [pc, #140]	@ (8003744 <xTaskIncrementTick+0x228>)
 80036b6:	4613      	mov	r3, r2
 80036b8:	009b      	lsls	r3, r3, #2
 80036ba:	4413      	add	r3, r2
 80036bc:	009b      	lsls	r3, r3, #2
 80036be:	440b      	add	r3, r1
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	1c59      	adds	r1, r3, #1
 80036c4:	481f      	ldr	r0, [pc, #124]	@ (8003744 <xTaskIncrementTick+0x228>)
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	4403      	add	r3, r0
 80036d0:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036d6:	4b1c      	ldr	r3, [pc, #112]	@ (8003748 <xTaskIncrementTick+0x22c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036dc:	429a      	cmp	r2, r3
 80036de:	f67f af59 	bls.w	8003594 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 80036e2:	2301      	movs	r3, #1
 80036e4:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80036e6:	e755      	b.n	8003594 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80036e8:	4b17      	ldr	r3, [pc, #92]	@ (8003748 <xTaskIncrementTick+0x22c>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80036ee:	4915      	ldr	r1, [pc, #84]	@ (8003744 <xTaskIncrementTick+0x228>)
 80036f0:	4613      	mov	r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d901      	bls.n	8003704 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003700:	2301      	movs	r3, #1
 8003702:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003704:	4b11      	ldr	r3, [pc, #68]	@ (800374c <xTaskIncrementTick+0x230>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d007      	beq.n	800371c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800370c:	2301      	movs	r3, #1
 800370e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003710:	e004      	b.n	800371c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8003712:	4b0f      	ldr	r3, [pc, #60]	@ (8003750 <xTaskIncrementTick+0x234>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	3301      	adds	r3, #1
 8003718:	4a0d      	ldr	r2, [pc, #52]	@ (8003750 <xTaskIncrementTick+0x234>)
 800371a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800371c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800371e:	4618      	mov	r0, r3
 8003720:	3728      	adds	r7, #40	@ 0x28
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}
 8003726:	bf00      	nop
 8003728:	20000254 	.word	0x20000254
 800372c:	20000230 	.word	0x20000230
 8003730:	200001e4 	.word	0x200001e4
 8003734:	200001e8 	.word	0x200001e8
 8003738:	20000244 	.word	0x20000244
 800373c:	2000024c 	.word	0x2000024c
 8003740:	20000234 	.word	0x20000234
 8003744:	20000158 	.word	0x20000158
 8003748:	20000154 	.word	0x20000154
 800374c:	20000240 	.word	0x20000240
 8003750:	2000023c 	.word	0x2000023c

08003754 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800375a:	4b2d      	ldr	r3, [pc, #180]	@ (8003810 <vTaskSwitchContext+0xbc>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8003762:	4b2c      	ldr	r3, [pc, #176]	@ (8003814 <vTaskSwitchContext+0xc0>)
 8003764:	2201      	movs	r2, #1
 8003766:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003768:	e04e      	b.n	8003808 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800376a:	4b2a      	ldr	r3, [pc, #168]	@ (8003814 <vTaskSwitchContext+0xc0>)
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003770:	4b29      	ldr	r3, [pc, #164]	@ (8003818 <vTaskSwitchContext+0xc4>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	fab3 f383 	clz	r3, r3
 800377c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800377e:	7afb      	ldrb	r3, [r7, #11]
 8003780:	f1c3 031f 	rsb	r3, r3, #31
 8003784:	617b      	str	r3, [r7, #20]
 8003786:	4925      	ldr	r1, [pc, #148]	@ (800381c <vTaskSwitchContext+0xc8>)
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d10b      	bne.n	80037b2 <vTaskSwitchContext+0x5e>
        __asm volatile
 800379a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800379e:	f383 8811 	msr	BASEPRI, r3
 80037a2:	f3bf 8f6f 	isb	sy
 80037a6:	f3bf 8f4f 	dsb	sy
 80037aa:	607b      	str	r3, [r7, #4]
    }
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	e7fd      	b.n	80037ae <vTaskSwitchContext+0x5a>
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4613      	mov	r3, r2
 80037b6:	009b      	lsls	r3, r3, #2
 80037b8:	4413      	add	r3, r2
 80037ba:	009b      	lsls	r3, r3, #2
 80037bc:	4a17      	ldr	r2, [pc, #92]	@ (800381c <vTaskSwitchContext+0xc8>)
 80037be:	4413      	add	r3, r2
 80037c0:	613b      	str	r3, [r7, #16]
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	685a      	ldr	r2, [r3, #4]
 80037c8:	693b      	ldr	r3, [r7, #16]
 80037ca:	605a      	str	r2, [r3, #4]
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	685a      	ldr	r2, [r3, #4]
 80037d0:	693b      	ldr	r3, [r7, #16]
 80037d2:	3308      	adds	r3, #8
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d104      	bne.n	80037e2 <vTaskSwitchContext+0x8e>
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	685b      	ldr	r3, [r3, #4]
 80037dc:	685a      	ldr	r2, [r3, #4]
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	685b      	ldr	r3, [r3, #4]
 80037e6:	68db      	ldr	r3, [r3, #12]
 80037e8:	4a0d      	ldr	r2, [pc, #52]	@ (8003820 <vTaskSwitchContext+0xcc>)
 80037ea:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80037ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003820 <vTaskSwitchContext+0xcc>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003824 <vTaskSwitchContext+0xd0>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d102      	bne.n	80037fe <vTaskSwitchContext+0xaa>
 80037f8:	f003 f8f4 	bl	80069e4 <SEGGER_SYSVIEW_OnIdle>
}
 80037fc:	e004      	b.n	8003808 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80037fe:	4b08      	ldr	r3, [pc, #32]	@ (8003820 <vTaskSwitchContext+0xcc>)
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4618      	mov	r0, r3
 8003804:	f003 f94c 	bl	8006aa0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003808:	bf00      	nop
 800380a:	3718      	adds	r7, #24
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}
 8003810:	20000254 	.word	0x20000254
 8003814:	20000240 	.word	0x20000240
 8003818:	20000234 	.word	0x20000234
 800381c:	20000158 	.word	0x20000158
 8003820:	20000154 	.word	0x20000154
 8003824:	20000250 	.word	0x20000250

08003828 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b084      	sub	sp, #16
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d10b      	bne.n	8003850 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003838:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800383c:	f383 8811 	msr	BASEPRI, r3
 8003840:	f3bf 8f6f 	isb	sy
 8003844:	f3bf 8f4f 	dsb	sy
 8003848:	60fb      	str	r3, [r7, #12]
    }
 800384a:	bf00      	nop
 800384c:	bf00      	nop
 800384e:	e7fd      	b.n	800384c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003850:	4b07      	ldr	r3, [pc, #28]	@ (8003870 <vTaskPlaceOnEventList+0x48>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	3318      	adds	r3, #24
 8003856:	4619      	mov	r1, r3
 8003858:	6878      	ldr	r0, [r7, #4]
 800385a:	f7fe ffa8 	bl	80027ae <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800385e:	2101      	movs	r1, #1
 8003860:	6838      	ldr	r0, [r7, #0]
 8003862:	f000 fa85 	bl	8003d70 <prvAddCurrentTaskToDelayedList>
}
 8003866:	bf00      	nop
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	20000154 	.word	0x20000154

08003874 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003874:	b580      	push	{r7, lr}
 8003876:	b086      	sub	sp, #24
 8003878:	af00      	add	r7, sp, #0
 800387a:	60f8      	str	r0, [r7, #12]
 800387c:	60b9      	str	r1, [r7, #8]
 800387e:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10b      	bne.n	800389e <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800388a:	f383 8811 	msr	BASEPRI, r3
 800388e:	f3bf 8f6f 	isb	sy
 8003892:	f3bf 8f4f 	dsb	sy
 8003896:	613b      	str	r3, [r7, #16]
    }
 8003898:	bf00      	nop
 800389a:	bf00      	nop
 800389c:	e7fd      	b.n	800389a <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	685b      	ldr	r3, [r3, #4]
 80038a2:	617b      	str	r3, [r7, #20]
 80038a4:	4b17      	ldr	r3, [pc, #92]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x90>)
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	697a      	ldr	r2, [r7, #20]
 80038aa:	61da      	str	r2, [r3, #28]
 80038ac:	4b15      	ldr	r3, [pc, #84]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x90>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	697a      	ldr	r2, [r7, #20]
 80038b2:	6892      	ldr	r2, [r2, #8]
 80038b4:	621a      	str	r2, [r3, #32]
 80038b6:	4b13      	ldr	r3, [pc, #76]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x90>)
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	3218      	adds	r2, #24
 80038c0:	605a      	str	r2, [r3, #4]
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x90>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f103 0218 	add.w	r2, r3, #24
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	609a      	str	r2, [r3, #8]
 80038ce:	4b0d      	ldr	r3, [pc, #52]	@ (8003904 <vTaskPlaceOnEventListRestricted+0x90>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68fa      	ldr	r2, [r7, #12]
 80038d4:	629a      	str	r2, [r3, #40]	@ 0x28
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80038e6:	f04f 33ff 	mov.w	r3, #4294967295
 80038ea:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80038ec:	2024      	movs	r0, #36	@ 0x24
 80038ee:	f002 fb79 	bl	8005fe4 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	68b8      	ldr	r0, [r7, #8]
 80038f6:	f000 fa3b 	bl	8003d70 <prvAddCurrentTaskToDelayedList>
    }
 80038fa:	bf00      	nop
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000154 	.word	0x20000154

08003908 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003918:	6a3b      	ldr	r3, [r7, #32]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d10b      	bne.n	8003936 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800391e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003922:	f383 8811 	msr	BASEPRI, r3
 8003926:	f3bf 8f6f 	isb	sy
 800392a:	f3bf 8f4f 	dsb	sy
 800392e:	60fb      	str	r3, [r7, #12]
    }
 8003930:	bf00      	nop
 8003932:	bf00      	nop
 8003934:	e7fd      	b.n	8003932 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	69db      	ldr	r3, [r3, #28]
 8003940:	6a3a      	ldr	r2, [r7, #32]
 8003942:	6a12      	ldr	r2, [r2, #32]
 8003944:	609a      	str	r2, [r3, #8]
 8003946:	6a3b      	ldr	r3, [r7, #32]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	6a3a      	ldr	r2, [r7, #32]
 800394c:	69d2      	ldr	r2, [r2, #28]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	69fb      	ldr	r3, [r7, #28]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	6a3b      	ldr	r3, [r7, #32]
 8003956:	3318      	adds	r3, #24
 8003958:	429a      	cmp	r2, r3
 800395a:	d103      	bne.n	8003964 <xTaskRemoveFromEventList+0x5c>
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	6a1a      	ldr	r2, [r3, #32]
 8003960:	69fb      	ldr	r3, [r7, #28]
 8003962:	605a      	str	r2, [r3, #4]
 8003964:	6a3b      	ldr	r3, [r7, #32]
 8003966:	2200      	movs	r2, #0
 8003968:	629a      	str	r2, [r3, #40]	@ 0x28
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	1e5a      	subs	r2, r3, #1
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003974:	4b4b      	ldr	r3, [pc, #300]	@ (8003aa4 <xTaskRemoveFromEventList+0x19c>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2b00      	cmp	r3, #0
 800397a:	d162      	bne.n	8003a42 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 800397c:	6a3b      	ldr	r3, [r7, #32]
 800397e:	695b      	ldr	r3, [r3, #20]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	6a3b      	ldr	r3, [r7, #32]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	6a3a      	ldr	r2, [r7, #32]
 8003988:	68d2      	ldr	r2, [r2, #12]
 800398a:	609a      	str	r2, [r3, #8]
 800398c:	6a3b      	ldr	r3, [r7, #32]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	6a3a      	ldr	r2, [r7, #32]
 8003992:	6892      	ldr	r2, [r2, #8]
 8003994:	605a      	str	r2, [r3, #4]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	685a      	ldr	r2, [r3, #4]
 800399a:	6a3b      	ldr	r3, [r7, #32]
 800399c:	3304      	adds	r3, #4
 800399e:	429a      	cmp	r2, r3
 80039a0:	d103      	bne.n	80039aa <xTaskRemoveFromEventList+0xa2>
 80039a2:	6a3b      	ldr	r3, [r7, #32]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	6a3b      	ldr	r3, [r7, #32]
 80039ac:	2200      	movs	r2, #0
 80039ae:	615a      	str	r2, [r3, #20]
 80039b0:	697b      	ldr	r3, [r7, #20]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	1e5a      	subs	r2, r3, #1
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	4618      	mov	r0, r3
 80039be:	f003 f8b1 	bl	8006b24 <SEGGER_SYSVIEW_OnTaskStartReady>
 80039c2:	6a3b      	ldr	r3, [r7, #32]
 80039c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039c6:	2201      	movs	r2, #1
 80039c8:	409a      	lsls	r2, r3
 80039ca:	4b37      	ldr	r3, [pc, #220]	@ (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	4a35      	ldr	r2, [pc, #212]	@ (8003aa8 <xTaskRemoveFromEventList+0x1a0>)
 80039d2:	6013      	str	r3, [r2, #0]
 80039d4:	6a3b      	ldr	r3, [r7, #32]
 80039d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039d8:	4934      	ldr	r1, [pc, #208]	@ (8003aac <xTaskRemoveFromEventList+0x1a4>)
 80039da:	4613      	mov	r3, r2
 80039dc:	009b      	lsls	r3, r3, #2
 80039de:	4413      	add	r3, r2
 80039e0:	009b      	lsls	r3, r3, #2
 80039e2:	440b      	add	r3, r1
 80039e4:	3304      	adds	r3, #4
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	613b      	str	r3, [r7, #16]
 80039ea:	6a3b      	ldr	r3, [r7, #32]
 80039ec:	693a      	ldr	r2, [r7, #16]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	693b      	ldr	r3, [r7, #16]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	6a3b      	ldr	r3, [r7, #32]
 80039f6:	60da      	str	r2, [r3, #12]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	6a3a      	ldr	r2, [r7, #32]
 80039fe:	3204      	adds	r2, #4
 8003a00:	605a      	str	r2, [r3, #4]
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	1d1a      	adds	r2, r3, #4
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	609a      	str	r2, [r3, #8]
 8003a0a:	6a3b      	ldr	r3, [r7, #32]
 8003a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a0e:	4613      	mov	r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4413      	add	r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	4a25      	ldr	r2, [pc, #148]	@ (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a18:	441a      	add	r2, r3
 8003a1a:	6a3b      	ldr	r3, [r7, #32]
 8003a1c:	615a      	str	r2, [r3, #20]
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a22:	4922      	ldr	r1, [pc, #136]	@ (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a24:	4613      	mov	r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4413      	add	r3, r2
 8003a2a:	009b      	lsls	r3, r3, #2
 8003a2c:	440b      	add	r3, r1
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	1c59      	adds	r1, r3, #1
 8003a32:	481e      	ldr	r0, [pc, #120]	@ (8003aac <xTaskRemoveFromEventList+0x1a4>)
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4403      	add	r3, r0
 8003a3e:	6019      	str	r1, [r3, #0]
 8003a40:	e01b      	b.n	8003a7a <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003a42:	4b1b      	ldr	r3, [pc, #108]	@ (8003ab0 <xTaskRemoveFromEventList+0x1a8>)
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	61bb      	str	r3, [r7, #24]
 8003a48:	6a3b      	ldr	r3, [r7, #32]
 8003a4a:	69ba      	ldr	r2, [r7, #24]
 8003a4c:	61da      	str	r2, [r3, #28]
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	689a      	ldr	r2, [r3, #8]
 8003a52:	6a3b      	ldr	r3, [r7, #32]
 8003a54:	621a      	str	r2, [r3, #32]
 8003a56:	69bb      	ldr	r3, [r7, #24]
 8003a58:	689b      	ldr	r3, [r3, #8]
 8003a5a:	6a3a      	ldr	r2, [r7, #32]
 8003a5c:	3218      	adds	r2, #24
 8003a5e:	605a      	str	r2, [r3, #4]
 8003a60:	6a3b      	ldr	r3, [r7, #32]
 8003a62:	f103 0218 	add.w	r2, r3, #24
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	609a      	str	r2, [r3, #8]
 8003a6a:	6a3b      	ldr	r3, [r7, #32]
 8003a6c:	4a10      	ldr	r2, [pc, #64]	@ (8003ab0 <xTaskRemoveFromEventList+0x1a8>)
 8003a6e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003a70:	4b0f      	ldr	r3, [pc, #60]	@ (8003ab0 <xTaskRemoveFromEventList+0x1a8>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	3301      	adds	r3, #1
 8003a76:	4a0e      	ldr	r2, [pc, #56]	@ (8003ab0 <xTaskRemoveFromEventList+0x1a8>)
 8003a78:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a7a:	6a3b      	ldr	r3, [r7, #32]
 8003a7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ab4 <xTaskRemoveFromEventList+0x1ac>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d905      	bls.n	8003a94 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003a8c:	4b0a      	ldr	r3, [pc, #40]	@ (8003ab8 <xTaskRemoveFromEventList+0x1b0>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
 8003a92:	e001      	b.n	8003a98 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003a94:	2300      	movs	r3, #0
 8003a96:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	3728      	adds	r7, #40	@ 0x28
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	20000254 	.word	0x20000254
 8003aa8:	20000234 	.word	0x20000234
 8003aac:	20000158 	.word	0x20000158
 8003ab0:	200001ec 	.word	0x200001ec
 8003ab4:	20000154 	.word	0x20000154
 8003ab8:	20000240 	.word	0x20000240

08003abc <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <vTaskInternalSetTimeOutState+0x24>)
 8003ac6:	681a      	ldr	r2, [r3, #0]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003acc:	4b05      	ldr	r3, [pc, #20]	@ (8003ae4 <vTaskInternalSetTimeOutState+0x28>)
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	605a      	str	r2, [r3, #4]
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr
 8003ae0:	20000244 	.word	0x20000244
 8003ae4:	20000230 	.word	0x20000230

08003ae8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b088      	sub	sp, #32
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d10b      	bne.n	8003b10 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003af8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003afc:	f383 8811 	msr	BASEPRI, r3
 8003b00:	f3bf 8f6f 	isb	sy
 8003b04:	f3bf 8f4f 	dsb	sy
 8003b08:	613b      	str	r3, [r7, #16]
    }
 8003b0a:	bf00      	nop
 8003b0c:	bf00      	nop
 8003b0e:	e7fd      	b.n	8003b0c <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003b16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b1a:	f383 8811 	msr	BASEPRI, r3
 8003b1e:	f3bf 8f6f 	isb	sy
 8003b22:	f3bf 8f4f 	dsb	sy
 8003b26:	60fb      	str	r3, [r7, #12]
    }
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	e7fd      	b.n	8003b2a <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003b2e:	f000 fddd 	bl	80046ec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8003b32:	4b1f      	ldr	r3, [pc, #124]	@ (8003bb0 <xTaskCheckForTimeOut+0xc8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	69ba      	ldr	r2, [r7, #24]
 8003b3e:	1ad3      	subs	r3, r2, r3
 8003b40:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d102      	bne.n	8003b52 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	61fb      	str	r3, [r7, #28]
 8003b50:	e026      	b.n	8003ba0 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	4b17      	ldr	r3, [pc, #92]	@ (8003bb4 <xTaskCheckForTimeOut+0xcc>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	429a      	cmp	r2, r3
 8003b5c:	d00a      	beq.n	8003b74 <xTaskCheckForTimeOut+0x8c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	d305      	bcc.n	8003b74 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]
 8003b72:	e015      	b.n	8003ba0 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	697a      	ldr	r2, [r7, #20]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d20b      	bcs.n	8003b96 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	1ad2      	subs	r2, r2, r3
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff96 	bl	8003abc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003b90:	2300      	movs	r3, #0
 8003b92:	61fb      	str	r3, [r7, #28]
 8003b94:	e004      	b.n	8003ba0 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003b9c:	2301      	movs	r3, #1
 8003b9e:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003ba0:	f000 fdd6 	bl	8004750 <vPortExitCritical>

    return xReturn;
 8003ba4:	69fb      	ldr	r3, [r7, #28]
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3720      	adds	r7, #32
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000230 	.word	0x20000230
 8003bb4:	20000244 	.word	0x20000244

08003bb8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <vTaskMissedYield+0x14>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	20000240 	.word	0x20000240

08003bd0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003bd8:	f000 f852 	bl	8003c80 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003bdc:	4b06      	ldr	r3, [pc, #24]	@ (8003bf8 <prvIdleTask+0x28>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d9f9      	bls.n	8003bd8 <prvIdleTask+0x8>
            {
                taskYIELD();
 8003be4:	4b05      	ldr	r3, [pc, #20]	@ (8003bfc <prvIdleTask+0x2c>)
 8003be6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bea:	601a      	str	r2, [r3, #0]
 8003bec:	f3bf 8f4f 	dsb	sy
 8003bf0:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003bf4:	e7f0      	b.n	8003bd8 <prvIdleTask+0x8>
 8003bf6:	bf00      	nop
 8003bf8:	20000158 	.word	0x20000158
 8003bfc:	e000ed04 	.word	0xe000ed04

08003c00 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b082      	sub	sp, #8
 8003c04:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c06:	2300      	movs	r3, #0
 8003c08:	607b      	str	r3, [r7, #4]
 8003c0a:	e00c      	b.n	8003c26 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003c0c:	687a      	ldr	r2, [r7, #4]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	4a12      	ldr	r2, [pc, #72]	@ (8003c60 <prvInitialiseTaskLists+0x60>)
 8003c18:	4413      	add	r3, r2
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fe fd9a 	bl	8002754 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	3301      	adds	r3, #1
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d9ef      	bls.n	8003c0c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003c2c:	480d      	ldr	r0, [pc, #52]	@ (8003c64 <prvInitialiseTaskLists+0x64>)
 8003c2e:	f7fe fd91 	bl	8002754 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003c32:	480d      	ldr	r0, [pc, #52]	@ (8003c68 <prvInitialiseTaskLists+0x68>)
 8003c34:	f7fe fd8e 	bl	8002754 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003c38:	480c      	ldr	r0, [pc, #48]	@ (8003c6c <prvInitialiseTaskLists+0x6c>)
 8003c3a:	f7fe fd8b 	bl	8002754 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003c3e:	480c      	ldr	r0, [pc, #48]	@ (8003c70 <prvInitialiseTaskLists+0x70>)
 8003c40:	f7fe fd88 	bl	8002754 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003c44:	480b      	ldr	r0, [pc, #44]	@ (8003c74 <prvInitialiseTaskLists+0x74>)
 8003c46:	f7fe fd85 	bl	8002754 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8003c78 <prvInitialiseTaskLists+0x78>)
 8003c4c:	4a05      	ldr	r2, [pc, #20]	@ (8003c64 <prvInitialiseTaskLists+0x64>)
 8003c4e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003c50:	4b0a      	ldr	r3, [pc, #40]	@ (8003c7c <prvInitialiseTaskLists+0x7c>)
 8003c52:	4a05      	ldr	r2, [pc, #20]	@ (8003c68 <prvInitialiseTaskLists+0x68>)
 8003c54:	601a      	str	r2, [r3, #0]
}
 8003c56:	bf00      	nop
 8003c58:	3708      	adds	r7, #8
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	bd80      	pop	{r7, pc}
 8003c5e:	bf00      	nop
 8003c60:	20000158 	.word	0x20000158
 8003c64:	200001bc 	.word	0x200001bc
 8003c68:	200001d0 	.word	0x200001d0
 8003c6c:	200001ec 	.word	0x200001ec
 8003c70:	20000200 	.word	0x20000200
 8003c74:	20000218 	.word	0x20000218
 8003c78:	200001e4 	.word	0x200001e4
 8003c7c:	200001e8 	.word	0x200001e8

08003c80 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003c86:	e019      	b.n	8003cbc <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003c88:	f000 fd30 	bl	80046ec <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c8c:	4b10      	ldr	r3, [pc, #64]	@ (8003cd0 <prvCheckTasksWaitingTermination+0x50>)
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	68db      	ldr	r3, [r3, #12]
 8003c92:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	3304      	adds	r3, #4
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f7fe fdc1 	bl	8002820 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003cd4 <prvCheckTasksWaitingTermination+0x54>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	3b01      	subs	r3, #1
 8003ca4:	4a0b      	ldr	r2, [pc, #44]	@ (8003cd4 <prvCheckTasksWaitingTermination+0x54>)
 8003ca6:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003ca8:	4b0b      	ldr	r3, [pc, #44]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x58>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	3b01      	subs	r3, #1
 8003cae:	4a0a      	ldr	r2, [pc, #40]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x58>)
 8003cb0:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8003cb2:	f000 fd4d 	bl	8004750 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f810 	bl	8003cdc <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003cbc:	4b06      	ldr	r3, [pc, #24]	@ (8003cd8 <prvCheckTasksWaitingTermination+0x58>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d1e1      	bne.n	8003c88 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3708      	adds	r7, #8
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}
 8003cce:	bf00      	nop
 8003cd0:	20000200 	.word	0x20000200
 8003cd4:	2000022c 	.word	0x2000022c
 8003cd8:	20000214 	.word	0x20000214

08003cdc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ce8:	4618      	mov	r0, r3
 8003cea:	f000 feed 	bl	8004ac8 <vPortFree>
            vPortFree( pxTCB );
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 feea 	bl	8004ac8 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8003cf4:	bf00      	nop
 8003cf6:	3708      	adds	r7, #8
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d00:	4b0a      	ldr	r3, [pc, #40]	@ (8003d2c <prvResetNextTaskUnblockTime+0x30>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d104      	bne.n	8003d14 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003d0a:	4b09      	ldr	r3, [pc, #36]	@ (8003d30 <prvResetNextTaskUnblockTime+0x34>)
 8003d0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003d10:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8003d12:	e005      	b.n	8003d20 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d14:	4b05      	ldr	r3, [pc, #20]	@ (8003d2c <prvResetNextTaskUnblockTime+0x30>)
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	68db      	ldr	r3, [r3, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	4a04      	ldr	r2, [pc, #16]	@ (8003d30 <prvResetNextTaskUnblockTime+0x34>)
 8003d1e:	6013      	str	r3, [r2, #0]
}
 8003d20:	bf00      	nop
 8003d22:	46bd      	mov	sp, r7
 8003d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d28:	4770      	bx	lr
 8003d2a:	bf00      	nop
 8003d2c:	200001e4 	.word	0x200001e4
 8003d30:	2000024c 	.word	0x2000024c

08003d34 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003d34:	b480      	push	{r7}
 8003d36:	b083      	sub	sp, #12
 8003d38:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <xTaskGetSchedulerState+0x34>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d102      	bne.n	8003d48 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 8003d42:	2301      	movs	r3, #1
 8003d44:	607b      	str	r3, [r7, #4]
 8003d46:	e008      	b.n	8003d5a <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d48:	4b08      	ldr	r3, [pc, #32]	@ (8003d6c <xTaskGetSchedulerState+0x38>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d102      	bne.n	8003d56 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003d50:	2302      	movs	r3, #2
 8003d52:	607b      	str	r3, [r7, #4]
 8003d54:	e001      	b.n	8003d5a <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003d56:	2300      	movs	r3, #0
 8003d58:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003d5a:	687b      	ldr	r3, [r7, #4]
    }
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	370c      	adds	r7, #12
 8003d60:	46bd      	mov	sp, r7
 8003d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d66:	4770      	bx	lr
 8003d68:	20000238 	.word	0x20000238
 8003d6c:	20000254 	.word	0x20000254

08003d70 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b086      	sub	sp, #24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003d80:	4b35      	ldr	r3, [pc, #212]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	3304      	adds	r3, #4
 8003d86:	4618      	mov	r0, r3
 8003d88:	f7fe fd4a 	bl	8002820 <uxListRemove>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d10b      	bne.n	8003daa <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d92:	4b31      	ldr	r3, [pc, #196]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d98:	2201      	movs	r2, #1
 8003d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d9e:	43da      	mvns	r2, r3
 8003da0:	4b2e      	ldr	r3, [pc, #184]	@ (8003e5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4013      	ands	r3, r2
 8003da6:	4a2d      	ldr	r2, [pc, #180]	@ (8003e5c <prvAddCurrentTaskToDelayedList+0xec>)
 8003da8:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d124      	bne.n	8003dfc <prvAddCurrentTaskToDelayedList+0x8c>
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d021      	beq.n	8003dfc <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003db8:	4b29      	ldr	r3, [pc, #164]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	613b      	str	r3, [r7, #16]
 8003dbe:	4b26      	ldr	r3, [pc, #152]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	609a      	str	r2, [r3, #8]
 8003dc6:	4b24      	ldr	r3, [pc, #144]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	6892      	ldr	r2, [r2, #8]
 8003dce:	60da      	str	r2, [r3, #12]
 8003dd0:	4b21      	ldr	r3, [pc, #132]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	3204      	adds	r2, #4
 8003dda:	605a      	str	r2, [r3, #4]
 8003ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	1d1a      	adds	r2, r3, #4
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	609a      	str	r2, [r3, #8]
 8003de6:	4b1c      	ldr	r3, [pc, #112]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a1d      	ldr	r2, [pc, #116]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003dec:	615a      	str	r2, [r3, #20]
 8003dee:	4b1c      	ldr	r3, [pc, #112]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	3301      	adds	r3, #1
 8003df4:	4a1a      	ldr	r2, [pc, #104]	@ (8003e60 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003df6:	6013      	str	r3, [r2, #0]
 8003df8:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003dfa:	e026      	b.n	8003e4a <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003dfc:	697a      	ldr	r2, [r7, #20]
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	4413      	add	r3, r2
 8003e02:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003e04:	4b14      	ldr	r3, [pc, #80]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	68fa      	ldr	r2, [r7, #12]
 8003e0a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003e0c:	68fa      	ldr	r2, [r7, #12]
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d209      	bcs.n	8003e28 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e14:	4b13      	ldr	r3, [pc, #76]	@ (8003e64 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003e16:	681a      	ldr	r2, [r3, #0]
 8003e18:	4b0f      	ldr	r3, [pc, #60]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7fe fcc4 	bl	80027ae <vListInsert>
}
 8003e26:	e010      	b.n	8003e4a <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e28:	4b0f      	ldr	r3, [pc, #60]	@ (8003e68 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003e58 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4619      	mov	r1, r3
 8003e34:	4610      	mov	r0, r2
 8003e36:	f7fe fcba 	bl	80027ae <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003e3a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d202      	bcs.n	8003e4a <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003e44:	4a09      	ldr	r2, [pc, #36]	@ (8003e6c <prvAddCurrentTaskToDelayedList+0xfc>)
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	6013      	str	r3, [r2, #0]
}
 8003e4a:	bf00      	nop
 8003e4c:	3718      	adds	r7, #24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	bd80      	pop	{r7, pc}
 8003e52:	bf00      	nop
 8003e54:	20000230 	.word	0x20000230
 8003e58:	20000154 	.word	0x20000154
 8003e5c:	20000234 	.word	0x20000234
 8003e60:	20000218 	.word	0x20000218
 8003e64:	200001e8 	.word	0x200001e8
 8003e68:	200001e4 	.word	0x200001e4
 8003e6c:	2000024c 	.word	0x2000024c

08003e70 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003e76:	2300      	movs	r3, #0
 8003e78:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003e7a:	f000 fa4f 	bl	800431c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003e7e:	4b12      	ldr	r3, [pc, #72]	@ (8003ec8 <xTimerCreateTimerTask+0x58>)
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00b      	beq.n	8003e9e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003e86:	4b11      	ldr	r3, [pc, #68]	@ (8003ecc <xTimerCreateTimerTask+0x5c>)
 8003e88:	9301      	str	r3, [sp, #4]
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	9300      	str	r3, [sp, #0]
 8003e8e:	2300      	movs	r3, #0
 8003e90:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e94:	490e      	ldr	r1, [pc, #56]	@ (8003ed0 <xTimerCreateTimerTask+0x60>)
 8003e96:	480f      	ldr	r0, [pc, #60]	@ (8003ed4 <xTimerCreateTimerTask+0x64>)
 8003e98:	f7ff f824 	bl	8002ee4 <xTaskCreate>
 8003e9c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d10b      	bne.n	8003ebc <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ea8:	f383 8811 	msr	BASEPRI, r3
 8003eac:	f3bf 8f6f 	isb	sy
 8003eb0:	f3bf 8f4f 	dsb	sy
 8003eb4:	603b      	str	r3, [r7, #0]
    }
 8003eb6:	bf00      	nop
 8003eb8:	bf00      	nop
 8003eba:	e7fd      	b.n	8003eb8 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003ebc:	687b      	ldr	r3, [r7, #4]
    }
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3708      	adds	r7, #8
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
 8003ec6:	bf00      	nop
 8003ec8:	20000288 	.word	0x20000288
 8003ecc:	2000028c 	.word	0x2000028c
 8003ed0:	08007858 	.word	0x08007858
 8003ed4:	08003f7d 	.word	0x08003f7d

08003ed8 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b084      	sub	sp, #16
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	60f8      	str	r0, [r7, #12]
 8003ee0:	60b9      	str	r1, [r7, #8]
 8003ee2:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ee4:	e008      	b.n	8003ef8 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	699b      	ldr	r3, [r3, #24]
 8003eea:	68ba      	ldr	r2, [r7, #8]
 8003eec:	4413      	add	r3, r2
 8003eee:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	68f8      	ldr	r0, [r7, #12]
 8003ef6:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	699a      	ldr	r2, [r3, #24]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	18d1      	adds	r1, r2, r3
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	687a      	ldr	r2, [r7, #4]
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f8df 	bl	80040c8 <prvInsertTimerInActiveList>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d1ea      	bne.n	8003ee6 <prvReloadTimer+0xe>
        }
    }
 8003f10:	bf00      	nop
 8003f12:	bf00      	nop
 8003f14:	3710      	adds	r7, #16
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
	...

08003f1c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
 8003f24:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f26:	4b14      	ldr	r3, [pc, #80]	@ (8003f78 <prvProcessExpiredTimer+0x5c>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	3304      	adds	r3, #4
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fe fc73 	bl	8002820 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f40:	f003 0304 	and.w	r3, r3, #4
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d005      	beq.n	8003f54 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003f48:	683a      	ldr	r2, [r7, #0]
 8003f4a:	6879      	ldr	r1, [r7, #4]
 8003f4c:	68f8      	ldr	r0, [r7, #12]
 8003f4e:	f7ff ffc3 	bl	8003ed8 <prvReloadTimer>
 8003f52:	e008      	b.n	8003f66 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003f5a:	f023 0301 	bic.w	r3, r3, #1
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a1b      	ldr	r3, [r3, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	4798      	blx	r3
    }
 8003f6e:	bf00      	nop
 8003f70:	3710      	adds	r7, #16
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	20000280 	.word	0x20000280

08003f7c <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f84:	f107 0308 	add.w	r3, r7, #8
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f000 f859 	bl	8004040 <prvGetNextExpireTime>
 8003f8e:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4619      	mov	r1, r3
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f805 	bl	8003fa4 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f9a:	f000 f8d7 	bl	800414c <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f9e:	bf00      	nop
 8003fa0:	e7f0      	b.n	8003f84 <prvTimerTask+0x8>
	...

08003fa4 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b084      	sub	sp, #16
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003fae:	f7ff f985 	bl	80032bc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003fb2:	f107 0308 	add.w	r3, r7, #8
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f000 f866 	bl	8004088 <prvSampleTimeNow>
 8003fbc:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003fbe:	68bb      	ldr	r3, [r7, #8]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d130      	bne.n	8004026 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d10a      	bne.n	8003fe0 <prvProcessTimerOrBlockTask+0x3c>
 8003fca:	687a      	ldr	r2, [r7, #4]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d806      	bhi.n	8003fe0 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003fd2:	f7ff f981 	bl	80032d8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003fd6:	68f9      	ldr	r1, [r7, #12]
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f7ff ff9f 	bl	8003f1c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003fde:	e024      	b.n	800402a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d008      	beq.n	8003ff8 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003fe6:	4b13      	ldr	r3, [pc, #76]	@ (8004034 <prvProcessTimerOrBlockTask+0x90>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <prvProcessTimerOrBlockTask+0x50>
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e000      	b.n	8003ff6 <prvProcessTimerOrBlockTask+0x52>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003ff8:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <prvProcessTimerOrBlockTask+0x94>)
 8003ffa:	6818      	ldr	r0, [r3, #0]
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	4619      	mov	r1, r3
 8004006:	f7fe ff39 	bl	8002e7c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 800400a:	f7ff f965 	bl	80032d8 <xTaskResumeAll>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d10a      	bne.n	800402a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8004014:	4b09      	ldr	r3, [pc, #36]	@ (800403c <prvProcessTimerOrBlockTask+0x98>)
 8004016:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800401a:	601a      	str	r2, [r3, #0]
 800401c:	f3bf 8f4f 	dsb	sy
 8004020:	f3bf 8f6f 	isb	sy
    }
 8004024:	e001      	b.n	800402a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8004026:	f7ff f957 	bl	80032d8 <xTaskResumeAll>
    }
 800402a:	bf00      	nop
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000284 	.word	0x20000284
 8004038:	20000288 	.word	0x20000288
 800403c:	e000ed04 	.word	0xe000ed04

08004040 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8004040:	b480      	push	{r7}
 8004042:	b085      	sub	sp, #20
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004048:	4b0e      	ldr	r3, [pc, #56]	@ (8004084 <prvGetNextExpireTime+0x44>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d101      	bne.n	8004056 <prvGetNextExpireTime+0x16>
 8004052:	2201      	movs	r2, #1
 8004054:	e000      	b.n	8004058 <prvGetNextExpireTime+0x18>
 8004056:	2200      	movs	r2, #0
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004064:	4b07      	ldr	r3, [pc, #28]	@ (8004084 <prvGetNextExpireTime+0x44>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	60fb      	str	r3, [r7, #12]
 800406e:	e001      	b.n	8004074 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8004070:	2300      	movs	r3, #0
 8004072:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8004074:	68fb      	ldr	r3, [r7, #12]
    }
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	20000280 	.word	0x20000280

08004088 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8004088:	b580      	push	{r7, lr}
 800408a:	b084      	sub	sp, #16
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004090:	f7ff fa22 	bl	80034d8 <xTaskGetTickCount>
 8004094:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004096:	4b0b      	ldr	r3, [pc, #44]	@ (80040c4 <prvSampleTimeNow+0x3c>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	429a      	cmp	r2, r3
 800409e:	d205      	bcs.n	80040ac <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80040a0:	f000 f916 	bl	80042d0 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]
 80040aa:	e002      	b.n	80040b2 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2200      	movs	r2, #0
 80040b0:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80040b2:	4a04      	ldr	r2, [pc, #16]	@ (80040c4 <prvSampleTimeNow+0x3c>)
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80040b8:	68fb      	ldr	r3, [r7, #12]
    }
 80040ba:	4618      	mov	r0, r3
 80040bc:	3710      	adds	r7, #16
 80040be:	46bd      	mov	sp, r7
 80040c0:	bd80      	pop	{r7, pc}
 80040c2:	bf00      	nop
 80040c4:	20000290 	.word	0x20000290

080040c8 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
 80040d4:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80040d6:	2300      	movs	r3, #0
 80040d8:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	68ba      	ldr	r2, [r7, #8]
 80040de:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	429a      	cmp	r2, r3
 80040ec:	d812      	bhi.n	8004114 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	1ad2      	subs	r2, r2, r3
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	699b      	ldr	r3, [r3, #24]
 80040f8:	429a      	cmp	r2, r3
 80040fa:	d302      	bcc.n	8004102 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80040fc:	2301      	movs	r3, #1
 80040fe:	617b      	str	r3, [r7, #20]
 8004100:	e01b      	b.n	800413a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004102:	4b10      	ldr	r3, [pc, #64]	@ (8004144 <prvInsertTimerInActiveList+0x7c>)
 8004104:	681a      	ldr	r2, [r3, #0]
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	3304      	adds	r3, #4
 800410a:	4619      	mov	r1, r3
 800410c:	4610      	mov	r0, r2
 800410e:	f7fe fb4e 	bl	80027ae <vListInsert>
 8004112:	e012      	b.n	800413a <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004114:	687a      	ldr	r2, [r7, #4]
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	429a      	cmp	r2, r3
 800411a:	d206      	bcs.n	800412a <prvInsertTimerInActiveList+0x62>
 800411c:	68ba      	ldr	r2, [r7, #8]
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	429a      	cmp	r2, r3
 8004122:	d302      	bcc.n	800412a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004124:	2301      	movs	r3, #1
 8004126:	617b      	str	r3, [r7, #20]
 8004128:	e007      	b.n	800413a <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800412a:	4b07      	ldr	r3, [pc, #28]	@ (8004148 <prvInsertTimerInActiveList+0x80>)
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3304      	adds	r3, #4
 8004132:	4619      	mov	r1, r3
 8004134:	4610      	mov	r0, r2
 8004136:	f7fe fb3a 	bl	80027ae <vListInsert>
            }
        }

        return xProcessTimerNow;
 800413a:	697b      	ldr	r3, [r7, #20]
    }
 800413c:	4618      	mov	r0, r3
 800413e:	3718      	adds	r7, #24
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000284 	.word	0x20000284
 8004148:	20000280 	.word	0x20000280

0800414c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 800414c:	b580      	push	{r7, lr}
 800414e:	b088      	sub	sp, #32
 8004150:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004152:	e0a9      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004154:	68bb      	ldr	r3, [r7, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	f2c0 80a6 	blt.w	80042a8 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004160:	69fb      	ldr	r3, [r7, #28]
 8004162:	695b      	ldr	r3, [r3, #20]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d004      	beq.n	8004172 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004168:	69fb      	ldr	r3, [r7, #28]
 800416a:	3304      	adds	r3, #4
 800416c:	4618      	mov	r0, r3
 800416e:	f7fe fb57 	bl	8002820 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004172:	1d3b      	adds	r3, r7, #4
 8004174:	4618      	mov	r0, r3
 8004176:	f7ff ff87 	bl	8004088 <prvSampleTimeNow>
 800417a:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	3b01      	subs	r3, #1
 8004180:	2b08      	cmp	r3, #8
 8004182:	f200 808e 	bhi.w	80042a2 <prvProcessReceivedCommands+0x156>
 8004186:	a201      	add	r2, pc, #4	@ (adr r2, 800418c <prvProcessReceivedCommands+0x40>)
 8004188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418c:	080041b1 	.word	0x080041b1
 8004190:	080041b1 	.word	0x080041b1
 8004194:	08004219 	.word	0x08004219
 8004198:	0800422d 	.word	0x0800422d
 800419c:	08004279 	.word	0x08004279
 80041a0:	080041b1 	.word	0x080041b1
 80041a4:	080041b1 	.word	0x080041b1
 80041a8:	08004219 	.word	0x08004219
 80041ac:	0800422d 	.word	0x0800422d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	b2da      	uxtb	r2, r3
 80041bc:	69fb      	ldr	r3, [r7, #28]
 80041be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	699b      	ldr	r3, [r3, #24]
 80041c8:	18d1      	adds	r1, r2, r3
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	69f8      	ldr	r0, [r7, #28]
 80041d0:	f7ff ff7a 	bl	80040c8 <prvInsertTimerInActiveList>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d065      	beq.n	80042a6 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041e0:	f003 0304 	and.w	r3, r3, #4
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d009      	beq.n	80041fc <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 80041e8:	68fa      	ldr	r2, [r7, #12]
 80041ea:	69fb      	ldr	r3, [r7, #28]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	4413      	add	r3, r2
 80041f0:	69ba      	ldr	r2, [r7, #24]
 80041f2:	4619      	mov	r1, r3
 80041f4:	69f8      	ldr	r0, [r7, #28]
 80041f6:	f7ff fe6f 	bl	8003ed8 <prvReloadTimer>
 80041fa:	e008      	b.n	800420e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041fc:	69fb      	ldr	r3, [r7, #28]
 80041fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004202:	f023 0301 	bic.w	r3, r3, #1
 8004206:	b2da      	uxtb	r2, r3
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800420e:	69fb      	ldr	r3, [r7, #28]
 8004210:	6a1b      	ldr	r3, [r3, #32]
 8004212:	69f8      	ldr	r0, [r7, #28]
 8004214:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004216:	e046      	b.n	80042a6 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800421e:	f023 0301 	bic.w	r3, r3, #1
 8004222:	b2da      	uxtb	r2, r3
 8004224:	69fb      	ldr	r3, [r7, #28]
 8004226:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800422a:	e03d      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800422c:	69fb      	ldr	r3, [r7, #28]
 800422e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004232:	f043 0301 	orr.w	r3, r3, #1
 8004236:	b2da      	uxtb	r2, r3
 8004238:	69fb      	ldr	r3, [r7, #28]
 800423a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	69fb      	ldr	r3, [r7, #28]
 8004242:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004244:	69fb      	ldr	r3, [r7, #28]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10b      	bne.n	8004264 <prvProcessReceivedCommands+0x118>
        __asm volatile
 800424c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004250:	f383 8811 	msr	BASEPRI, r3
 8004254:	f3bf 8f6f 	isb	sy
 8004258:	f3bf 8f4f 	dsb	sy
 800425c:	617b      	str	r3, [r7, #20]
    }
 800425e:	bf00      	nop
 8004260:	bf00      	nop
 8004262:	e7fd      	b.n	8004260 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	699a      	ldr	r2, [r3, #24]
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	18d1      	adds	r1, r2, r3
 800426c:	69bb      	ldr	r3, [r7, #24]
 800426e:	69ba      	ldr	r2, [r7, #24]
 8004270:	69f8      	ldr	r0, [r7, #28]
 8004272:	f7ff ff29 	bl	80040c8 <prvInsertTimerInActiveList>
                        break;
 8004276:	e017      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800427e:	f003 0302 	and.w	r3, r3, #2
 8004282:	2b00      	cmp	r3, #0
 8004284:	d103      	bne.n	800428e <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8004286:	69f8      	ldr	r0, [r7, #28]
 8004288:	f000 fc1e 	bl	8004ac8 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 800428c:	e00c      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004294:	f023 0301 	bic.w	r3, r3, #1
 8004298:	b2da      	uxtb	r2, r3
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 80042a0:	e002      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <prvProcessReceivedCommands+0x15c>
                        break;
 80042a6:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042a8:	4b08      	ldr	r3, [pc, #32]	@ (80042cc <prvProcessReceivedCommands+0x180>)
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f107 0108 	add.w	r1, r7, #8
 80042b0:	2200      	movs	r2, #0
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fe fbe8 	bl	8002a88 <xQueueReceive>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	f47f af4a 	bne.w	8004154 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 80042c0:	bf00      	nop
 80042c2:	bf00      	nop
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	bf00      	nop
 80042cc:	20000288 	.word	0x20000288

080042d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042d6:	e009      	b.n	80042ec <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80042d8:	4b0e      	ldr	r3, [pc, #56]	@ (8004314 <prvSwitchTimerLists+0x44>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 80042e2:	f04f 31ff 	mov.w	r1, #4294967295
 80042e6:	6838      	ldr	r0, [r7, #0]
 80042e8:	f7ff fe18 	bl	8003f1c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80042ec:	4b09      	ldr	r3, [pc, #36]	@ (8004314 <prvSwitchTimerLists+0x44>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1f0      	bne.n	80042d8 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 80042f6:	4b07      	ldr	r3, [pc, #28]	@ (8004314 <prvSwitchTimerLists+0x44>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 80042fc:	4b06      	ldr	r3, [pc, #24]	@ (8004318 <prvSwitchTimerLists+0x48>)
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4a04      	ldr	r2, [pc, #16]	@ (8004314 <prvSwitchTimerLists+0x44>)
 8004302:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004304:	4a04      	ldr	r2, [pc, #16]	@ (8004318 <prvSwitchTimerLists+0x48>)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6013      	str	r3, [r2, #0]
    }
 800430a:	bf00      	nop
 800430c:	3708      	adds	r7, #8
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000280 	.word	0x20000280
 8004318:	20000284 	.word	0x20000284

0800431c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800431c:	b580      	push	{r7, lr}
 800431e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004320:	f000 f9e4 	bl	80046ec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004324:	4b12      	ldr	r3, [pc, #72]	@ (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d11d      	bne.n	8004368 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800432c:	4811      	ldr	r0, [pc, #68]	@ (8004374 <prvCheckForValidListAndQueue+0x58>)
 800432e:	f7fe fa11 	bl	8002754 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8004332:	4811      	ldr	r0, [pc, #68]	@ (8004378 <prvCheckForValidListAndQueue+0x5c>)
 8004334:	f7fe fa0e 	bl	8002754 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8004338:	4b10      	ldr	r3, [pc, #64]	@ (800437c <prvCheckForValidListAndQueue+0x60>)
 800433a:	4a0e      	ldr	r2, [pc, #56]	@ (8004374 <prvCheckForValidListAndQueue+0x58>)
 800433c:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 800433e:	4b10      	ldr	r3, [pc, #64]	@ (8004380 <prvCheckForValidListAndQueue+0x64>)
 8004340:	4a0d      	ldr	r2, [pc, #52]	@ (8004378 <prvCheckForValidListAndQueue+0x5c>)
 8004342:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8004344:	2200      	movs	r2, #0
 8004346:	210c      	movs	r1, #12
 8004348:	200a      	movs	r0, #10
 800434a:	f7fe fb25 	bl	8002998 <xQueueGenericCreate>
 800434e:	4603      	mov	r3, r0
 8004350:	4a07      	ldr	r2, [pc, #28]	@ (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004352:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8004354:	4b06      	ldr	r3, [pc, #24]	@ (8004370 <prvCheckForValidListAndQueue+0x54>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d005      	beq.n	8004368 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800435c:	4b04      	ldr	r3, [pc, #16]	@ (8004370 <prvCheckForValidListAndQueue+0x54>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4908      	ldr	r1, [pc, #32]	@ (8004384 <prvCheckForValidListAndQueue+0x68>)
 8004362:	4618      	mov	r0, r3
 8004364:	f7fe fd32 	bl	8002dcc <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004368:	f000 f9f2 	bl	8004750 <vPortExitCritical>
    }
 800436c:	bf00      	nop
 800436e:	bd80      	pop	{r7, pc}
 8004370:	20000288 	.word	0x20000288
 8004374:	20000258 	.word	0x20000258
 8004378:	2000026c 	.word	0x2000026c
 800437c:	20000280 	.word	0x20000280
 8004380:	20000284 	.word	0x20000284
 8004384:	08007860 	.word	0x08007860

08004388 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8004388:	b480      	push	{r7}
 800438a:	b085      	sub	sp, #20
 800438c:	af00      	add	r7, sp, #0
 800438e:	60f8      	str	r0, [r7, #12]
 8004390:	60b9      	str	r1, [r7, #8]
 8004392:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3b04      	subs	r3, #4
 8004398:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80043a0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	3b04      	subs	r3, #4
 80043a6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	f023 0201 	bic.w	r2, r3, #1
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	3b04      	subs	r3, #4
 80043b6:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80043b8:	4a0c      	ldr	r2, [pc, #48]	@ (80043ec <pxPortInitialiseStack+0x64>)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	3b14      	subs	r3, #20
 80043c2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	3b04      	subs	r3, #4
 80043ce:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	f06f 0202 	mvn.w	r2, #2
 80043d6:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	3b20      	subs	r3, #32
 80043dc:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 80043de:	68fb      	ldr	r3, [r7, #12]
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	3714      	adds	r7, #20
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr
 80043ec:	080043f1 	.word	0x080043f1

080043f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 80043f6:	2300      	movs	r3, #0
 80043f8:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 80043fa:	4b13      	ldr	r3, [pc, #76]	@ (8004448 <prvTaskExitError+0x58>)
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004402:	d00b      	beq.n	800441c <prvTaskExitError+0x2c>
        __asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	60fb      	str	r3, [r7, #12]
    }
 8004416:	bf00      	nop
 8004418:	bf00      	nop
 800441a:	e7fd      	b.n	8004418 <prvTaskExitError+0x28>
        __asm volatile
 800441c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004420:	f383 8811 	msr	BASEPRI, r3
 8004424:	f3bf 8f6f 	isb	sy
 8004428:	f3bf 8f4f 	dsb	sy
 800442c:	60bb      	str	r3, [r7, #8]
    }
 800442e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004430:	bf00      	nop
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0fc      	beq.n	8004432 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004438:	bf00      	nop
 800443a:	bf00      	nop
 800443c:	3714      	adds	r7, #20
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
 8004446:	bf00      	nop
 8004448:	20000010 	.word	0x20000010
 800444c:	00000000 	.word	0x00000000

08004450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8004450:	4b07      	ldr	r3, [pc, #28]	@ (8004470 <pxCurrentTCBConst2>)
 8004452:	6819      	ldr	r1, [r3, #0]
 8004454:	6808      	ldr	r0, [r1, #0]
 8004456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800445a:	f380 8809 	msr	PSP, r0
 800445e:	f3bf 8f6f 	isb	sy
 8004462:	f04f 0000 	mov.w	r0, #0
 8004466:	f380 8811 	msr	BASEPRI, r0
 800446a:	4770      	bx	lr
 800446c:	f3af 8000 	nop.w

08004470 <pxCurrentTCBConst2>:
 8004470:	20000154 	.word	0x20000154
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8004474:	bf00      	nop
 8004476:	bf00      	nop

08004478 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8004478:	4808      	ldr	r0, [pc, #32]	@ (800449c <prvPortStartFirstTask+0x24>)
 800447a:	6800      	ldr	r0, [r0, #0]
 800447c:	6800      	ldr	r0, [r0, #0]
 800447e:	f380 8808 	msr	MSP, r0
 8004482:	f04f 0000 	mov.w	r0, #0
 8004486:	f380 8814 	msr	CONTROL, r0
 800448a:	b662      	cpsie	i
 800448c:	b661      	cpsie	f
 800448e:	f3bf 8f4f 	dsb	sy
 8004492:	f3bf 8f6f 	isb	sy
 8004496:	df00      	svc	0
 8004498:	bf00      	nop
 800449a:	0000      	.short	0x0000
 800449c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 80044a0:	bf00      	nop
 80044a2:	bf00      	nop

080044a4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80044aa:	4b47      	ldr	r3, [pc, #284]	@ (80045c8 <xPortStartScheduler+0x124>)
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a47      	ldr	r2, [pc, #284]	@ (80045cc <xPortStartScheduler+0x128>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d10b      	bne.n	80044cc <xPortStartScheduler+0x28>
        __asm volatile
 80044b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044b8:	f383 8811 	msr	BASEPRI, r3
 80044bc:	f3bf 8f6f 	isb	sy
 80044c0:	f3bf 8f4f 	dsb	sy
 80044c4:	613b      	str	r3, [r7, #16]
    }
 80044c6:	bf00      	nop
 80044c8:	bf00      	nop
 80044ca:	e7fd      	b.n	80044c8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80044cc:	4b3e      	ldr	r3, [pc, #248]	@ (80045c8 <xPortStartScheduler+0x124>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	4a3f      	ldr	r2, [pc, #252]	@ (80045d0 <xPortStartScheduler+0x12c>)
 80044d2:	4293      	cmp	r3, r2
 80044d4:	d10b      	bne.n	80044ee <xPortStartScheduler+0x4a>
        __asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
    }
 80044e8:	bf00      	nop
 80044ea:	bf00      	nop
 80044ec:	e7fd      	b.n	80044ea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80044ee:	4b39      	ldr	r3, [pc, #228]	@ (80045d4 <xPortStartScheduler+0x130>)
 80044f0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	781b      	ldrb	r3, [r3, #0]
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	22ff      	movs	r2, #255	@ 0xff
 80044fe:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	781b      	ldrb	r3, [r3, #0]
 8004504:	b2db      	uxtb	r3, r3
 8004506:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004508:	78fb      	ldrb	r3, [r7, #3]
 800450a:	b2db      	uxtb	r3, r3
 800450c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004510:	b2da      	uxtb	r2, r3
 8004512:	4b31      	ldr	r3, [pc, #196]	@ (80045d8 <xPortStartScheduler+0x134>)
 8004514:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004516:	4b31      	ldr	r3, [pc, #196]	@ (80045dc <xPortStartScheduler+0x138>)
 8004518:	2207      	movs	r2, #7
 800451a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800451c:	e009      	b.n	8004532 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800451e:	4b2f      	ldr	r3, [pc, #188]	@ (80045dc <xPortStartScheduler+0x138>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3b01      	subs	r3, #1
 8004524:	4a2d      	ldr	r2, [pc, #180]	@ (80045dc <xPortStartScheduler+0x138>)
 8004526:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004528:	78fb      	ldrb	r3, [r7, #3]
 800452a:	b2db      	uxtb	r3, r3
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	b2db      	uxtb	r3, r3
 8004530:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004532:	78fb      	ldrb	r3, [r7, #3]
 8004534:	b2db      	uxtb	r3, r3
 8004536:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800453a:	2b80      	cmp	r3, #128	@ 0x80
 800453c:	d0ef      	beq.n	800451e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800453e:	4b27      	ldr	r3, [pc, #156]	@ (80045dc <xPortStartScheduler+0x138>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f1c3 0307 	rsb	r3, r3, #7
 8004546:	2b04      	cmp	r3, #4
 8004548:	d00b      	beq.n	8004562 <xPortStartScheduler+0xbe>
        __asm volatile
 800454a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800454e:	f383 8811 	msr	BASEPRI, r3
 8004552:	f3bf 8f6f 	isb	sy
 8004556:	f3bf 8f4f 	dsb	sy
 800455a:	60bb      	str	r3, [r7, #8]
    }
 800455c:	bf00      	nop
 800455e:	bf00      	nop
 8004560:	e7fd      	b.n	800455e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004562:	4b1e      	ldr	r3, [pc, #120]	@ (80045dc <xPortStartScheduler+0x138>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	021b      	lsls	r3, r3, #8
 8004568:	4a1c      	ldr	r2, [pc, #112]	@ (80045dc <xPortStartScheduler+0x138>)
 800456a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800456c:	4b1b      	ldr	r3, [pc, #108]	@ (80045dc <xPortStartScheduler+0x138>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004574:	4a19      	ldr	r2, [pc, #100]	@ (80045dc <xPortStartScheduler+0x138>)
 8004576:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	b2da      	uxtb	r2, r3
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004580:	4b17      	ldr	r3, [pc, #92]	@ (80045e0 <xPortStartScheduler+0x13c>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	4a16      	ldr	r2, [pc, #88]	@ (80045e0 <xPortStartScheduler+0x13c>)
 8004586:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800458a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 800458c:	4b14      	ldr	r3, [pc, #80]	@ (80045e0 <xPortStartScheduler+0x13c>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <xPortStartScheduler+0x13c>)
 8004592:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004596:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004598:	f000 f968 	bl	800486c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800459c:	4b11      	ldr	r3, [pc, #68]	@ (80045e4 <xPortStartScheduler+0x140>)
 800459e:	2200      	movs	r2, #0
 80045a0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80045a2:	f000 f987 	bl	80048b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80045a6:	4b10      	ldr	r3, [pc, #64]	@ (80045e8 <xPortStartScheduler+0x144>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	4a0f      	ldr	r2, [pc, #60]	@ (80045e8 <xPortStartScheduler+0x144>)
 80045ac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80045b0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80045b2:	f7ff ff61 	bl	8004478 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 80045b6:	f7ff f8cd 	bl	8003754 <vTaskSwitchContext>
    prvTaskExitError();
 80045ba:	f7ff ff19 	bl	80043f0 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 80045be:	2300      	movs	r3, #0
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3718      	adds	r7, #24
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bd80      	pop	{r7, pc}
 80045c8:	e000ed00 	.word	0xe000ed00
 80045cc:	410fc271 	.word	0x410fc271
 80045d0:	410fc270 	.word	0x410fc270
 80045d4:	e000e400 	.word	0xe000e400
 80045d8:	20000294 	.word	0x20000294
 80045dc:	20000298 	.word	0x20000298
 80045e0:	e000ed20 	.word	0xe000ed20
 80045e4:	20000010 	.word	0x20000010
 80045e8:	e000ef34 	.word	0xe000ef34

080045ec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80045f2:	4b38      	ldr	r3, [pc, #224]	@ (80046d4 <vInitPrioGroupValue+0xe8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <vInitPrioGroupValue+0xec>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d10b      	bne.n	8004614 <vInitPrioGroupValue+0x28>
        __asm volatile
 80045fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004600:	f383 8811 	msr	BASEPRI, r3
 8004604:	f3bf 8f6f 	isb	sy
 8004608:	f3bf 8f4f 	dsb	sy
 800460c:	613b      	str	r3, [r7, #16]
    }
 800460e:	bf00      	nop
 8004610:	bf00      	nop
 8004612:	e7fd      	b.n	8004610 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004614:	4b2f      	ldr	r3, [pc, #188]	@ (80046d4 <vInitPrioGroupValue+0xe8>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a30      	ldr	r2, [pc, #192]	@ (80046dc <vInitPrioGroupValue+0xf0>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d10b      	bne.n	8004636 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800461e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	60fb      	str	r3, [r7, #12]
    }
 8004630:	bf00      	nop
 8004632:	bf00      	nop
 8004634:	e7fd      	b.n	8004632 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004636:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <vInitPrioGroupValue+0xf4>)
 8004638:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	b2db      	uxtb	r3, r3
 8004640:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	22ff      	movs	r2, #255	@ 0xff
 8004646:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	781b      	ldrb	r3, [r3, #0]
 800464c:	b2db      	uxtb	r3, r3
 800464e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004650:	78fb      	ldrb	r3, [r7, #3]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004658:	b2da      	uxtb	r2, r3
 800465a:	4b22      	ldr	r3, [pc, #136]	@ (80046e4 <vInitPrioGroupValue+0xf8>)
 800465c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800465e:	4b22      	ldr	r3, [pc, #136]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 8004660:	2207      	movs	r2, #7
 8004662:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004664:	e009      	b.n	800467a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8004666:	4b20      	ldr	r3, [pc, #128]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	3b01      	subs	r3, #1
 800466c:	4a1e      	ldr	r2, [pc, #120]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 800466e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004670:	78fb      	ldrb	r3, [r7, #3]
 8004672:	b2db      	uxtb	r3, r3
 8004674:	005b      	lsls	r3, r3, #1
 8004676:	b2db      	uxtb	r3, r3
 8004678:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800467a:	78fb      	ldrb	r3, [r7, #3]
 800467c:	b2db      	uxtb	r3, r3
 800467e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004682:	2b80      	cmp	r3, #128	@ 0x80
 8004684:	d0ef      	beq.n	8004666 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004686:	4b18      	ldr	r3, [pc, #96]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f1c3 0307 	rsb	r3, r3, #7
 800468e:	2b04      	cmp	r3, #4
 8004690:	d00b      	beq.n	80046aa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	60bb      	str	r3, [r7, #8]
    }
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80046aa:	4b0f      	ldr	r3, [pc, #60]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	021b      	lsls	r3, r3, #8
 80046b0:	4a0d      	ldr	r2, [pc, #52]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 80046b2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80046b4:	4b0c      	ldr	r3, [pc, #48]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80046bc:	4a0a      	ldr	r2, [pc, #40]	@ (80046e8 <vInitPrioGroupValue+0xfc>)
 80046be:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	b2da      	uxtb	r2, r3
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 80046c8:	bf00      	nop
 80046ca:	371c      	adds	r7, #28
 80046cc:	46bd      	mov	sp, r7
 80046ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d2:	4770      	bx	lr
 80046d4:	e000ed00 	.word	0xe000ed00
 80046d8:	410fc271 	.word	0x410fc271
 80046dc:	410fc270 	.word	0x410fc270
 80046e0:	e000e400 	.word	0xe000e400
 80046e4:	20000294 	.word	0x20000294
 80046e8:	20000298 	.word	0x20000298

080046ec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80046ec:	b480      	push	{r7}
 80046ee:	b083      	sub	sp, #12
 80046f0:	af00      	add	r7, sp, #0
        __asm volatile
 80046f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046f6:	f383 8811 	msr	BASEPRI, r3
 80046fa:	f3bf 8f6f 	isb	sy
 80046fe:	f3bf 8f4f 	dsb	sy
 8004702:	607b      	str	r3, [r7, #4]
    }
 8004704:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004706:	4b10      	ldr	r3, [pc, #64]	@ (8004748 <vPortEnterCritical+0x5c>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	3301      	adds	r3, #1
 800470c:	4a0e      	ldr	r2, [pc, #56]	@ (8004748 <vPortEnterCritical+0x5c>)
 800470e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004710:	4b0d      	ldr	r3, [pc, #52]	@ (8004748 <vPortEnterCritical+0x5c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d110      	bne.n	800473a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004718:	4b0c      	ldr	r3, [pc, #48]	@ (800474c <vPortEnterCritical+0x60>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <vPortEnterCritical+0x4e>
        __asm volatile
 8004722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004726:	f383 8811 	msr	BASEPRI, r3
 800472a:	f3bf 8f6f 	isb	sy
 800472e:	f3bf 8f4f 	dsb	sy
 8004732:	603b      	str	r3, [r7, #0]
    }
 8004734:	bf00      	nop
 8004736:	bf00      	nop
 8004738:	e7fd      	b.n	8004736 <vPortEnterCritical+0x4a>
    }
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
 8004746:	bf00      	nop
 8004748:	20000010 	.word	0x20000010
 800474c:	e000ed04 	.word	0xe000ed04

08004750 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004756:	4b12      	ldr	r3, [pc, #72]	@ (80047a0 <vPortExitCritical+0x50>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10b      	bne.n	8004776 <vPortExitCritical+0x26>
        __asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	607b      	str	r3, [r7, #4]
    }
 8004770:	bf00      	nop
 8004772:	bf00      	nop
 8004774:	e7fd      	b.n	8004772 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004776:	4b0a      	ldr	r3, [pc, #40]	@ (80047a0 <vPortExitCritical+0x50>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	3b01      	subs	r3, #1
 800477c:	4a08      	ldr	r2, [pc, #32]	@ (80047a0 <vPortExitCritical+0x50>)
 800477e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004780:	4b07      	ldr	r3, [pc, #28]	@ (80047a0 <vPortExitCritical+0x50>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d105      	bne.n	8004794 <vPortExitCritical+0x44>
 8004788:	2300      	movs	r3, #0
 800478a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004792:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004794:	bf00      	nop
 8004796:	370c      	adds	r7, #12
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	20000010 	.word	0x20000010
	...

080047b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80047b0:	f3ef 8009 	mrs	r0, PSP
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	4b15      	ldr	r3, [pc, #84]	@ (8004810 <pxCurrentTCBConst>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	f01e 0f10 	tst.w	lr, #16
 80047c0:	bf08      	it	eq
 80047c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80047c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047ca:	6010      	str	r0, [r2, #0]
 80047cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80047d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80047d4:	f380 8811 	msr	BASEPRI, r0
 80047d8:	f3bf 8f4f 	dsb	sy
 80047dc:	f3bf 8f6f 	isb	sy
 80047e0:	f7fe ffb8 	bl	8003754 <vTaskSwitchContext>
 80047e4:	f04f 0000 	mov.w	r0, #0
 80047e8:	f380 8811 	msr	BASEPRI, r0
 80047ec:	bc09      	pop	{r0, r3}
 80047ee:	6819      	ldr	r1, [r3, #0]
 80047f0:	6808      	ldr	r0, [r1, #0]
 80047f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047f6:	f01e 0f10 	tst.w	lr, #16
 80047fa:	bf08      	it	eq
 80047fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004800:	f380 8809 	msr	PSP, r0
 8004804:	f3bf 8f6f 	isb	sy
 8004808:	4770      	bx	lr
 800480a:	bf00      	nop
 800480c:	f3af 8000 	nop.w

08004810 <pxCurrentTCBConst>:
 8004810:	20000154 	.word	0x20000154
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004814:	bf00      	nop
 8004816:	bf00      	nop

08004818 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004818:	b580      	push	{r7, lr}
 800481a:	b082      	sub	sp, #8
 800481c:	af00      	add	r7, sp, #0
        __asm volatile
 800481e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	607b      	str	r3, [r7, #4]
    }
 8004830:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004832:	f002 f85d 	bl	80068f0 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004836:	f7fe fe71 	bl	800351c <xTaskIncrementTick>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d006      	beq.n	800484e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004840:	f002 f8b4 	bl	80069ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004844:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <SysTick_Handler+0x50>)
 8004846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800484a:	601a      	str	r2, [r3, #0]
 800484c:	e001      	b.n	8004852 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800484e:	f002 f891 	bl	8006974 <SEGGER_SYSVIEW_RecordExitISR>
 8004852:	2300      	movs	r3, #0
 8004854:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	f383 8811 	msr	BASEPRI, r3
    }
 800485c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	e000ed04 	.word	0xe000ed04

0800486c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004870:	4b0b      	ldr	r3, [pc, #44]	@ (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004872:	2200      	movs	r2, #0
 8004874:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004876:	4b0b      	ldr	r3, [pc, #44]	@ (80048a4 <vPortSetupTimerInterrupt+0x38>)
 8004878:	2200      	movs	r2, #0
 800487a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800487c:	4b0a      	ldr	r3, [pc, #40]	@ (80048a8 <vPortSetupTimerInterrupt+0x3c>)
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4a0a      	ldr	r2, [pc, #40]	@ (80048ac <vPortSetupTimerInterrupt+0x40>)
 8004882:	fba2 2303 	umull	r2, r3, r2, r3
 8004886:	099b      	lsrs	r3, r3, #6
 8004888:	4a09      	ldr	r2, [pc, #36]	@ (80048b0 <vPortSetupTimerInterrupt+0x44>)
 800488a:	3b01      	subs	r3, #1
 800488c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800488e:	4b04      	ldr	r3, [pc, #16]	@ (80048a0 <vPortSetupTimerInterrupt+0x34>)
 8004890:	2207      	movs	r2, #7
 8004892:	601a      	str	r2, [r3, #0]
}
 8004894:	bf00      	nop
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	e000e010 	.word	0xe000e010
 80048a4:	e000e018 	.word	0xe000e018
 80048a8:	20000000 	.word	0x20000000
 80048ac:	10624dd3 	.word	0x10624dd3
 80048b0:	e000e014 	.word	0xe000e014

080048b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80048b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80048c4 <vPortEnableVFP+0x10>
 80048b8:	6801      	ldr	r1, [r0, #0]
 80048ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80048be:	6001      	str	r1, [r0, #0]
 80048c0:	4770      	bx	lr
 80048c2:	0000      	.short	0x0000
 80048c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop

080048cc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80048d2:	f3ef 8305 	mrs	r3, IPSR
 80048d6:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2b0f      	cmp	r3, #15
 80048dc:	d915      	bls.n	800490a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80048de:	4a18      	ldr	r2, [pc, #96]	@ (8004940 <vPortValidateInterruptPriority+0x74>)
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80048e8:	4b16      	ldr	r3, [pc, #88]	@ (8004944 <vPortValidateInterruptPriority+0x78>)
 80048ea:	781b      	ldrb	r3, [r3, #0]
 80048ec:	7afa      	ldrb	r2, [r7, #11]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d20b      	bcs.n	800490a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 80048f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048f6:	f383 8811 	msr	BASEPRI, r3
 80048fa:	f3bf 8f6f 	isb	sy
 80048fe:	f3bf 8f4f 	dsb	sy
 8004902:	607b      	str	r3, [r7, #4]
    }
 8004904:	bf00      	nop
 8004906:	bf00      	nop
 8004908:	e7fd      	b.n	8004906 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800490a:	4b0f      	ldr	r3, [pc, #60]	@ (8004948 <vPortValidateInterruptPriority+0x7c>)
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004912:	4b0e      	ldr	r3, [pc, #56]	@ (800494c <vPortValidateInterruptPriority+0x80>)
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	429a      	cmp	r2, r3
 8004918:	d90b      	bls.n	8004932 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800491a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800491e:	f383 8811 	msr	BASEPRI, r3
 8004922:	f3bf 8f6f 	isb	sy
 8004926:	f3bf 8f4f 	dsb	sy
 800492a:	603b      	str	r3, [r7, #0]
    }
 800492c:	bf00      	nop
 800492e:	bf00      	nop
 8004930:	e7fd      	b.n	800492e <vPortValidateInterruptPriority+0x62>
    }
 8004932:	bf00      	nop
 8004934:	3714      	adds	r7, #20
 8004936:	46bd      	mov	sp, r7
 8004938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493c:	4770      	bx	lr
 800493e:	bf00      	nop
 8004940:	e000e3f0 	.word	0xe000e3f0
 8004944:	20000294 	.word	0x20000294
 8004948:	e000ed0c 	.word	0xe000ed0c
 800494c:	20000298 	.word	0x20000298

08004950 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b08a      	sub	sp, #40	@ 0x28
 8004954:	af00      	add	r7, sp, #0
 8004956:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8004958:	2300      	movs	r3, #0
 800495a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 800495c:	f7fe fcae 	bl	80032bc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8004960:	4b54      	ldr	r3, [pc, #336]	@ (8004ab4 <pvPortMalloc+0x164>)
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d101      	bne.n	800496c <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8004968:	f000 f90c 	bl	8004b84 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d012      	beq.n	8004998 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8004972:	2208      	movs	r2, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	f003 0307 	and.w	r3, r3, #7
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	3308      	adds	r3, #8
 800497e:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	43db      	mvns	r3, r3
 8004984:	687a      	ldr	r2, [r7, #4]
 8004986:	429a      	cmp	r2, r3
 8004988:	d804      	bhi.n	8004994 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	69bb      	ldr	r3, [r7, #24]
 800498e:	4413      	add	r3, r2
 8004990:	607b      	str	r3, [r7, #4]
 8004992:	e001      	b.n	8004998 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004994:	2300      	movs	r3, #0
 8004996:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	db71      	blt.n	8004a82 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d06e      	beq.n	8004a82 <pvPortMalloc+0x132>
 80049a4:	4b44      	ldr	r3, [pc, #272]	@ (8004ab8 <pvPortMalloc+0x168>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d869      	bhi.n	8004a82 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80049ae:	4b43      	ldr	r3, [pc, #268]	@ (8004abc <pvPortMalloc+0x16c>)
 80049b0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 80049b2:	4b42      	ldr	r3, [pc, #264]	@ (8004abc <pvPortMalloc+0x16c>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049b8:	e004      	b.n	80049c4 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 80049ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049bc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 80049be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	687a      	ldr	r2, [r7, #4]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d903      	bls.n	80049d6 <pvPortMalloc+0x86>
 80049ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d1f1      	bne.n	80049ba <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80049d6:	4b37      	ldr	r3, [pc, #220]	@ (8004ab4 <pvPortMalloc+0x164>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049dc:	429a      	cmp	r2, r3
 80049de:	d050      	beq.n	8004a82 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80049e0:	6a3b      	ldr	r3, [r7, #32]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2208      	movs	r2, #8
 80049e6:	4413      	add	r3, r2
 80049e8:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80049f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049f4:	685a      	ldr	r2, [r3, #4]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	1ad2      	subs	r2, r2, r3
 80049fa:	2308      	movs	r3, #8
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d920      	bls.n	8004a44 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	4413      	add	r3, r2
 8004a08:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0307 	and.w	r3, r3, #7
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d00b      	beq.n	8004a2c <pvPortMalloc+0xdc>
        __asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	613b      	str	r3, [r7, #16]
    }
 8004a26:	bf00      	nop
 8004a28:	bf00      	nop
 8004a2a:	e7fd      	b.n	8004a28 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a2e:	685a      	ldr	r2, [r3, #4]
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	1ad2      	subs	r2, r2, r3
 8004a34:	697b      	ldr	r3, [r7, #20]
 8004a36:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a3e:	6978      	ldr	r0, [r7, #20]
 8004a40:	f000 f8fc 	bl	8004c3c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a44:	4b1c      	ldr	r3, [pc, #112]	@ (8004ab8 <pvPortMalloc+0x168>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	1ad3      	subs	r3, r2, r3
 8004a4e:	4a1a      	ldr	r2, [pc, #104]	@ (8004ab8 <pvPortMalloc+0x168>)
 8004a50:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a52:	4b19      	ldr	r3, [pc, #100]	@ (8004ab8 <pvPortMalloc+0x168>)
 8004a54:	681a      	ldr	r2, [r3, #0]
 8004a56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <pvPortMalloc+0x170>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d203      	bcs.n	8004a66 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a5e:	4b16      	ldr	r3, [pc, #88]	@ (8004ab8 <pvPortMalloc+0x168>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a17      	ldr	r2, [pc, #92]	@ (8004ac0 <pvPortMalloc+0x170>)
 8004a64:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8004a66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a70:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8004a78:	4b12      	ldr	r3, [pc, #72]	@ (8004ac4 <pvPortMalloc+0x174>)
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	4a11      	ldr	r2, [pc, #68]	@ (8004ac4 <pvPortMalloc+0x174>)
 8004a80:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8004a82:	f7fe fc29 	bl	80032d8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	f003 0307 	and.w	r3, r3, #7
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d00b      	beq.n	8004aa8 <pvPortMalloc+0x158>
        __asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60fb      	str	r3, [r7, #12]
    }
 8004aa2:	bf00      	nop
 8004aa4:	bf00      	nop
 8004aa6:	e7fd      	b.n	8004aa4 <pvPortMalloc+0x154>
    return pvReturn;
 8004aa8:	69fb      	ldr	r3, [r7, #28]
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3728      	adds	r7, #40	@ 0x28
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
 8004ab2:	bf00      	nop
 8004ab4:	2004b2a4 	.word	0x2004b2a4
 8004ab8:	2004b2a8 	.word	0x2004b2a8
 8004abc:	2004b29c 	.word	0x2004b29c
 8004ac0:	2004b2ac 	.word	0x2004b2ac
 8004ac4:	2004b2b0 	.word	0x2004b2b0

08004ac8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b086      	sub	sp, #24
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d04b      	beq.n	8004b72 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004ada:	2308      	movs	r3, #8
 8004adc:	425b      	negs	r3, r3
 8004ade:	697a      	ldr	r2, [r7, #20]
 8004ae0:	4413      	add	r3, r2
 8004ae2:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004ae8:	693b      	ldr	r3, [r7, #16]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	db0b      	blt.n	8004b08 <vPortFree+0x40>
        __asm volatile
 8004af0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004af4:	f383 8811 	msr	BASEPRI, r3
 8004af8:	f3bf 8f6f 	isb	sy
 8004afc:	f3bf 8f4f 	dsb	sy
 8004b00:	60fb      	str	r3, [r7, #12]
    }
 8004b02:	bf00      	nop
 8004b04:	bf00      	nop
 8004b06:	e7fd      	b.n	8004b04 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00b      	beq.n	8004b28 <vPortFree+0x60>
        __asm volatile
 8004b10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b14:	f383 8811 	msr	BASEPRI, r3
 8004b18:	f3bf 8f6f 	isb	sy
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	60bb      	str	r3, [r7, #8]
    }
 8004b22:	bf00      	nop
 8004b24:	bf00      	nop
 8004b26:	e7fd      	b.n	8004b24 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	0fdb      	lsrs	r3, r3, #31
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	b2db      	uxtb	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d01c      	beq.n	8004b72 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d118      	bne.n	8004b72 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004b40:	693b      	ldr	r3, [r7, #16]
 8004b42:	685b      	ldr	r3, [r3, #4]
 8004b44:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004b4c:	f7fe fbb6 	bl	80032bc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	4b09      	ldr	r3, [pc, #36]	@ (8004b7c <vPortFree+0xb4>)
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4413      	add	r3, r2
 8004b5a:	4a08      	ldr	r2, [pc, #32]	@ (8004b7c <vPortFree+0xb4>)
 8004b5c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b5e:	6938      	ldr	r0, [r7, #16]
 8004b60:	f000 f86c 	bl	8004c3c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004b64:	4b06      	ldr	r3, [pc, #24]	@ (8004b80 <vPortFree+0xb8>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	3301      	adds	r3, #1
 8004b6a:	4a05      	ldr	r2, [pc, #20]	@ (8004b80 <vPortFree+0xb8>)
 8004b6c:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004b6e:	f7fe fbb3 	bl	80032d8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	2004b2a8 	.word	0x2004b2a8
 8004b80:	2004b2b4 	.word	0x2004b2b4

08004b84 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004b84:	b480      	push	{r7}
 8004b86:	b085      	sub	sp, #20
 8004b88:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b8a:	f44f 2396 	mov.w	r3, #307200	@ 0x4b000
 8004b8e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b90:	4b25      	ldr	r3, [pc, #148]	@ (8004c28 <prvHeapInit+0xa4>)
 8004b92:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	f003 0307 	and.w	r3, r3, #7
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d00c      	beq.n	8004bb8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	3307      	adds	r3, #7
 8004ba2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004bac:	68ba      	ldr	r2, [r7, #8]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	1ad3      	subs	r3, r2, r3
 8004bb2:	4a1d      	ldr	r2, [pc, #116]	@ (8004c28 <prvHeapInit+0xa4>)
 8004bb4:	4413      	add	r3, r2
 8004bb6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bbc:	4a1b      	ldr	r2, [pc, #108]	@ (8004c2c <prvHeapInit+0xa8>)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8004c2c <prvHeapInit+0xa8>)
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68ba      	ldr	r2, [r7, #8]
 8004bcc:	4413      	add	r3, r2
 8004bce:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004bd0:	2208      	movs	r2, #8
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	1a9b      	subs	r3, r3, r2
 8004bd6:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	f023 0307 	bic.w	r3, r3, #7
 8004bde:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	4a13      	ldr	r2, [pc, #76]	@ (8004c30 <prvHeapInit+0xac>)
 8004be4:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004be6:	4b12      	ldr	r3, [pc, #72]	@ (8004c30 <prvHeapInit+0xac>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	2200      	movs	r2, #0
 8004bec:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004bee:	4b10      	ldr	r3, [pc, #64]	@ (8004c30 <prvHeapInit+0xac>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004bfa:	683b      	ldr	r3, [r7, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	1ad2      	subs	r2, r2, r3
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c04:	4b0a      	ldr	r3, [pc, #40]	@ (8004c30 <prvHeapInit+0xac>)
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	4a08      	ldr	r2, [pc, #32]	@ (8004c34 <prvHeapInit+0xb0>)
 8004c12:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	4a07      	ldr	r2, [pc, #28]	@ (8004c38 <prvHeapInit+0xb4>)
 8004c1a:	6013      	str	r3, [r2, #0]
}
 8004c1c:	bf00      	nop
 8004c1e:	3714      	adds	r7, #20
 8004c20:	46bd      	mov	sp, r7
 8004c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c26:	4770      	bx	lr
 8004c28:	2000029c 	.word	0x2000029c
 8004c2c:	2004b29c 	.word	0x2004b29c
 8004c30:	2004b2a4 	.word	0x2004b2a4
 8004c34:	2004b2ac 	.word	0x2004b2ac
 8004c38:	2004b2a8 	.word	0x2004b2a8

08004c3c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b085      	sub	sp, #20
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c44:	4b28      	ldr	r3, [pc, #160]	@ (8004ce8 <prvInsertBlockIntoFreeList+0xac>)
 8004c46:	60fb      	str	r3, [r7, #12]
 8004c48:	e002      	b.n	8004c50 <prvInsertBlockIntoFreeList+0x14>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	60fb      	str	r3, [r7, #12]
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d8f7      	bhi.n	8004c4a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	68ba      	ldr	r2, [r7, #8]
 8004c64:	4413      	add	r3, r2
 8004c66:	687a      	ldr	r2, [r7, #4]
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d108      	bne.n	8004c7e <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	685b      	ldr	r3, [r3, #4]
 8004c74:	441a      	add	r2, r3
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	68ba      	ldr	r2, [r7, #8]
 8004c88:	441a      	add	r2, r3
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d118      	bne.n	8004cc4 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b15      	ldr	r3, [pc, #84]	@ (8004cec <prvInsertBlockIntoFreeList+0xb0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	429a      	cmp	r2, r3
 8004c9c:	d00d      	beq.n	8004cba <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685a      	ldr	r2, [r3, #4]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	685b      	ldr	r3, [r3, #4]
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	e008      	b.n	8004ccc <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cba:	4b0c      	ldr	r3, [pc, #48]	@ (8004cec <prvInsertBlockIntoFreeList+0xb0>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e003      	b.n	8004ccc <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681a      	ldr	r2, [r3, #0]
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004ccc:	68fa      	ldr	r2, [r7, #12]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	429a      	cmp	r2, r3
 8004cd2:	d002      	beq.n	8004cda <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004cda:	bf00      	nop
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce4:	4770      	bx	lr
 8004ce6:	bf00      	nop
 8004ce8:	2004b29c 	.word	0x2004b29c
 8004cec:	2004b2a4 	.word	0x2004b2a4

08004cf0 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004cf4:	4803      	ldr	r0, [pc, #12]	@ (8004d04 <_cbSendSystemDesc+0x14>)
 8004cf6:	f001 fda5 	bl	8006844 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004cfa:	4803      	ldr	r0, [pc, #12]	@ (8004d08 <_cbSendSystemDesc+0x18>)
 8004cfc:	f001 fda2 	bl	8006844 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004d00:	bf00      	nop
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	08007868 	.word	0x08007868
 8004d08:	080078a4 	.word	0x080078a4

08004d0c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004d10:	4b06      	ldr	r3, [pc, #24]	@ (8004d2c <SEGGER_SYSVIEW_Conf+0x20>)
 8004d12:	6818      	ldr	r0, [r3, #0]
 8004d14:	4b05      	ldr	r3, [pc, #20]	@ (8004d2c <SEGGER_SYSVIEW_Conf+0x20>)
 8004d16:	6819      	ldr	r1, [r3, #0]
 8004d18:	4b05      	ldr	r3, [pc, #20]	@ (8004d30 <SEGGER_SYSVIEW_Conf+0x24>)
 8004d1a:	4a06      	ldr	r2, [pc, #24]	@ (8004d34 <SEGGER_SYSVIEW_Conf+0x28>)
 8004d1c:	f001 f90e 	bl	8005f3c <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004d20:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004d24:	f001 f94e 	bl	8005fc4 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004d28:	bf00      	nop
 8004d2a:	bd80      	pop	{r7, pc}
 8004d2c:	20000000 	.word	0x20000000
 8004d30:	08004cf1 	.word	0x08004cf1
 8004d34:	08007944 	.word	0x08007944

08004d38 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004d38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d3a:	b085      	sub	sp, #20
 8004d3c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004d3e:	2300      	movs	r3, #0
 8004d40:	607b      	str	r3, [r7, #4]
 8004d42:	e033      	b.n	8004dac <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004d44:	491e      	ldr	r1, [pc, #120]	@ (8004dc0 <_cbSendTaskList+0x88>)
 8004d46:	687a      	ldr	r2, [r7, #4]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	009b      	lsls	r3, r3, #2
 8004d4c:	4413      	add	r3, r2
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	440b      	add	r3, r1
 8004d52:	6818      	ldr	r0, [r3, #0]
 8004d54:	491a      	ldr	r1, [pc, #104]	@ (8004dc0 <_cbSendTaskList+0x88>)
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	3304      	adds	r3, #4
 8004d64:	6819      	ldr	r1, [r3, #0]
 8004d66:	4c16      	ldr	r4, [pc, #88]	@ (8004dc0 <_cbSendTaskList+0x88>)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4423      	add	r3, r4
 8004d74:	3308      	adds	r3, #8
 8004d76:	681c      	ldr	r4, [r3, #0]
 8004d78:	4d11      	ldr	r5, [pc, #68]	@ (8004dc0 <_cbSendTaskList+0x88>)
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	4613      	mov	r3, r2
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	009b      	lsls	r3, r3, #2
 8004d84:	442b      	add	r3, r5
 8004d86:	330c      	adds	r3, #12
 8004d88:	681d      	ldr	r5, [r3, #0]
 8004d8a:	4e0d      	ldr	r6, [pc, #52]	@ (8004dc0 <_cbSendTaskList+0x88>)
 8004d8c:	687a      	ldr	r2, [r7, #4]
 8004d8e:	4613      	mov	r3, r2
 8004d90:	009b      	lsls	r3, r3, #2
 8004d92:	4413      	add	r3, r2
 8004d94:	009b      	lsls	r3, r3, #2
 8004d96:	4433      	add	r3, r6
 8004d98:	3310      	adds	r3, #16
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	9300      	str	r3, [sp, #0]
 8004d9e:	462b      	mov	r3, r5
 8004da0:	4622      	mov	r2, r4
 8004da2:	f000 f8bd 	bl	8004f20 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	3301      	adds	r3, #1
 8004daa:	607b      	str	r3, [r7, #4]
 8004dac:	4b05      	ldr	r3, [pc, #20]	@ (8004dc4 <_cbSendTaskList+0x8c>)
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	429a      	cmp	r2, r3
 8004db4:	d3c6      	bcc.n	8004d44 <_cbSendTaskList+0xc>
  }
}
 8004db6:	bf00      	nop
 8004db8:	bf00      	nop
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004dc0:	2004b2b8 	.word	0x2004b2b8
 8004dc4:	2004b358 	.word	0x2004b358

08004dc8 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dcc:	b082      	sub	sp, #8
 8004dce:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004dd0:	f7fe fb92 	bl	80034f8 <xTaskGetTickCountFromISR>
 8004dd4:	4603      	mov	r3, r0
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	469a      	mov	sl, r3
 8004dda:	4693      	mov	fp, r2
 8004ddc:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004de0:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004de4:	4602      	mov	r2, r0
 8004de6:	460b      	mov	r3, r1
 8004de8:	f04f 0a00 	mov.w	sl, #0
 8004dec:	f04f 0b00 	mov.w	fp, #0
 8004df0:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004df4:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004df8:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004dfc:	4652      	mov	r2, sl
 8004dfe:	465b      	mov	r3, fp
 8004e00:	1a14      	subs	r4, r2, r0
 8004e02:	eb63 0501 	sbc.w	r5, r3, r1
 8004e06:	f04f 0200 	mov.w	r2, #0
 8004e0a:	f04f 0300 	mov.w	r3, #0
 8004e0e:	00ab      	lsls	r3, r5, #2
 8004e10:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e14:	00a2      	lsls	r2, r4, #2
 8004e16:	4614      	mov	r4, r2
 8004e18:	461d      	mov	r5, r3
 8004e1a:	eb14 0800 	adds.w	r8, r4, r0
 8004e1e:	eb45 0901 	adc.w	r9, r5, r1
 8004e22:	f04f 0200 	mov.w	r2, #0
 8004e26:	f04f 0300 	mov.w	r3, #0
 8004e2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e36:	4690      	mov	r8, r2
 8004e38:	4699      	mov	r9, r3
 8004e3a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004e3e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e42:	4610      	mov	r0, r2
 8004e44:	4619      	mov	r1, r3
 8004e46:	3708      	adds	r7, #8
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004e50 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b086      	sub	sp, #24
 8004e54:	af02      	add	r7, sp, #8
 8004e56:	60f8      	str	r0, [r7, #12]
 8004e58:	60b9      	str	r1, [r7, #8]
 8004e5a:	607a      	str	r2, [r7, #4]
 8004e5c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004e5e:	2205      	movs	r2, #5
 8004e60:	492b      	ldr	r1, [pc, #172]	@ (8004f10 <SYSVIEW_AddTask+0xc0>)
 8004e62:	68b8      	ldr	r0, [r7, #8]
 8004e64:	f002 f830 	bl	8006ec8 <memcmp>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d04b      	beq.n	8004f06 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004e6e:	4b29      	ldr	r3, [pc, #164]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b07      	cmp	r3, #7
 8004e74:	d903      	bls.n	8004e7e <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004e76:	4828      	ldr	r0, [pc, #160]	@ (8004f18 <SYSVIEW_AddTask+0xc8>)
 8004e78:	f001 ff96 	bl	8006da8 <SEGGER_SYSVIEW_Warn>
    return;
 8004e7c:	e044      	b.n	8004f08 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004e7e:	4b25      	ldr	r3, [pc, #148]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4926      	ldr	r1, [pc, #152]	@ (8004f1c <SYSVIEW_AddTask+0xcc>)
 8004e84:	4613      	mov	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	4413      	add	r3, r2
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	440b      	add	r3, r1
 8004e8e:	68fa      	ldr	r2, [r7, #12]
 8004e90:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e92:	4b20      	ldr	r3, [pc, #128]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	4921      	ldr	r1, [pc, #132]	@ (8004f1c <SYSVIEW_AddTask+0xcc>)
 8004e98:	4613      	mov	r3, r2
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	4413      	add	r3, r2
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	440b      	add	r3, r1
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004ea8:	4b1a      	ldr	r3, [pc, #104]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004eaa:	681a      	ldr	r2, [r3, #0]
 8004eac:	491b      	ldr	r1, [pc, #108]	@ (8004f1c <SYSVIEW_AddTask+0xcc>)
 8004eae:	4613      	mov	r3, r2
 8004eb0:	009b      	lsls	r3, r3, #2
 8004eb2:	4413      	add	r3, r2
 8004eb4:	009b      	lsls	r3, r3, #2
 8004eb6:	440b      	add	r3, r1
 8004eb8:	3308      	adds	r3, #8
 8004eba:	687a      	ldr	r2, [r7, #4]
 8004ebc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004ebe:	4b15      	ldr	r3, [pc, #84]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	4916      	ldr	r1, [pc, #88]	@ (8004f1c <SYSVIEW_AddTask+0xcc>)
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	4413      	add	r3, r2
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	440b      	add	r3, r1
 8004ece:	330c      	adds	r3, #12
 8004ed0:	683a      	ldr	r2, [r7, #0]
 8004ed2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004ed4:	4b0f      	ldr	r3, [pc, #60]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004ed6:	681a      	ldr	r2, [r3, #0]
 8004ed8:	4910      	ldr	r1, [pc, #64]	@ (8004f1c <SYSVIEW_AddTask+0xcc>)
 8004eda:	4613      	mov	r3, r2
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	440b      	add	r3, r1
 8004ee4:	3310      	adds	r3, #16
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004eea:	4b0a      	ldr	r3, [pc, #40]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	3301      	adds	r3, #1
 8004ef0:	4a08      	ldr	r2, [pc, #32]	@ (8004f14 <SYSVIEW_AddTask+0xc4>)
 8004ef2:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004ef4:	69bb      	ldr	r3, [r7, #24]
 8004ef6:	9300      	str	r3, [sp, #0]
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	68b9      	ldr	r1, [r7, #8]
 8004efe:	68f8      	ldr	r0, [r7, #12]
 8004f00:	f000 f80e 	bl	8004f20 <SYSVIEW_SendTaskInfo>
 8004f04:	e000      	b.n	8004f08 <SYSVIEW_AddTask+0xb8>
    return;
 8004f06:	bf00      	nop

}
 8004f08:	3710      	adds	r7, #16
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	080078b4 	.word	0x080078b4
 8004f14:	2004b358 	.word	0x2004b358
 8004f18:	080078bc 	.word	0x080078bc
 8004f1c:	2004b2b8 	.word	0x2004b2b8

08004f20 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b08a      	sub	sp, #40	@ 0x28
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	60f8      	str	r0, [r7, #12]
 8004f28:	60b9      	str	r1, [r7, #8]
 8004f2a:	607a      	str	r2, [r7, #4]
 8004f2c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	2214      	movs	r2, #20
 8004f34:	2100      	movs	r1, #0
 8004f36:	4618      	mov	r0, r3
 8004f38:	f001 ffd6 	bl	8006ee8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f4e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8004f50:	f107 0314 	add.w	r3, r7, #20
 8004f54:	4618      	mov	r0, r3
 8004f56:	f001 fb7d 	bl	8006654 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004f5a:	bf00      	nop
 8004f5c:	3728      	adds	r7, #40	@ 0x28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bd80      	pop	{r7, pc}
	...

08004f64 <USART2_IRQHandler>:
*  Notes
*    (1) This is a high-prio interrupt so it may NOT use embOS functions
*        However, this also means that embOS will never disable this interrupt
*/
void USART2_IRQHandler(void);
void USART2_IRQHandler(void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
  int UsartStatus;
  uint8_t v;
  int r;

  UsartStatus = USART_SR;                              // Examine status register
 8004f6a:	4b1e      	ldr	r3, [pc, #120]	@ (8004fe4 <USART2_IRQHandler+0x80>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	60fb      	str	r3, [r7, #12]
  if (UsartStatus & (1 << USART_RXNE)) {               // Data received?
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f003 0320 	and.w	r3, r3, #32
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <USART2_IRQHandler+0x3a>
    v = USART_DR;                                      // Read data
 8004f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe8 <USART2_IRQHandler+0x84>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	71fb      	strb	r3, [r7, #7]
    if ((UsartStatus & USART_RX_ERROR_FLAGS) == 0) {   // Only process data if no error occurred
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f003 030b 	and.w	r3, r3, #11
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d108      	bne.n	8004f9e <USART2_IRQHandler+0x3a>
      (void)v;                                         // Avoid warning in BTL
      if (_cbOnRx) {
 8004f8c:	4b17      	ldr	r3, [pc, #92]	@ (8004fec <USART2_IRQHandler+0x88>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d004      	beq.n	8004f9e <USART2_IRQHandler+0x3a>
        _cbOnRx(v);
 8004f94:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <USART2_IRQHandler+0x88>)
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	79fa      	ldrb	r2, [r7, #7]
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4798      	blx	r3
      }
    }
  }
  if (UsartStatus & (1 << USART_TXE)) {                // Tx (data register) empty? => Send next character Note: Shift register may still hold a character that has not been sent yet.
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d01a      	beq.n	8004fde <USART2_IRQHandler+0x7a>
    //
    // Under special circumstances, (old) BTL of Flasher does not wait until a complete string has been sent via UART,
    // so there might be an TxE interrupt pending *before* the FW had a chance to set the callbacks accordingly which would result in a NULL-pointer call...
    // Therefore, we need to check if the function pointer is valid.
    //
    if (_cbOnTx == NULL) {  // No callback set? => Nothing to do...
 8004fa8:	4b11      	ldr	r3, [pc, #68]	@ (8004ff0 <USART2_IRQHandler+0x8c>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d015      	beq.n	8004fdc <USART2_IRQHandler+0x78>
      return;
    }
    r = _cbOnTx(&v);
 8004fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8004ff0 <USART2_IRQHandler+0x8c>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	1dfa      	adds	r2, r7, #7
 8004fb6:	4610      	mov	r0, r2
 8004fb8:	4798      	blx	r3
 8004fba:	60b8      	str	r0, [r7, #8]
    if (r == 0) {                          // No more characters to send ?
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d106      	bne.n	8004fd0 <USART2_IRQHandler+0x6c>
      USART_CR1 &= ~(1UL << USART_TXEIE);  // Disable further tx interrupts
 8004fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8004ff4 <USART2_IRQHandler+0x90>)
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	4a0b      	ldr	r2, [pc, #44]	@ (8004ff4 <USART2_IRQHandler+0x90>)
 8004fc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fcc:	6013      	str	r3, [r2, #0]
 8004fce:	e006      	b.n	8004fde <USART2_IRQHandler+0x7a>
    } else {
      USART_SR;      // Makes sure that "transmission complete" flag in USART_SR is reset to 0 as soon as we write USART_DR. If USART_SR is not read before, writing USART_DR does not clear "transmission complete". See STM32F4 USART documentation for more detailed description.
 8004fd0:	4b04      	ldr	r3, [pc, #16]	@ (8004fe4 <USART2_IRQHandler+0x80>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
      USART_DR = v;  // Start transmission by writing to data register
 8004fd4:	79fa      	ldrb	r2, [r7, #7]
 8004fd6:	4b04      	ldr	r3, [pc, #16]	@ (8004fe8 <USART2_IRQHandler+0x84>)
 8004fd8:	601a      	str	r2, [r3, #0]
 8004fda:	e000      	b.n	8004fde <USART2_IRQHandler+0x7a>
      return;
 8004fdc:	bf00      	nop
    }
  }
}
 8004fde:	3710      	adds	r7, #16
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40004404 	.word	0x40004404
 8004fec:	2004b35c 	.word	0x2004b35c
 8004ff0:	2004b360 	.word	0x2004b360
 8004ff4:	4000440c 	.word	0x4000440c

08004ff8 <HIF_UART_EnableTXEInterrupt>:

/*********************************************************************
*
*       HIF_UART_EnableTXEInterrupt()
*/
void HIF_UART_EnableTXEInterrupt(void) {
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
  USART_CR1 |= (1 << USART_TXEIE);  // enable Tx empty interrupt => Triggered as soon as data register content has been copied to shift register
 8004ffc:	4b05      	ldr	r3, [pc, #20]	@ (8005014 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a04      	ldr	r2, [pc, #16]	@ (8005014 <HIF_UART_EnableTXEInterrupt+0x1c>)
 8005002:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005006:	6013      	str	r3, [r2, #0]
}
 8005008:	bf00      	nop
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr
 8005012:	bf00      	nop
 8005014:	4000440c 	.word	0x4000440c

08005018 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800501e:	4b24      	ldr	r3, [pc, #144]	@ (80050b0 <_DoInit+0x98>)
 8005020:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	2203      	movs	r2, #3
 8005026:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	2203      	movs	r2, #3
 800502c:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a20      	ldr	r2, [pc, #128]	@ (80050b4 <_DoInit+0x9c>)
 8005032:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a20      	ldr	r2, [pc, #128]	@ (80050b8 <_DoInit+0xa0>)
 8005038:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005040:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2200      	movs	r2, #0
 8005046:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2200      	movs	r2, #0
 8005052:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <_DoInit+0x9c>)
 8005058:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a17      	ldr	r2, [pc, #92]	@ (80050bc <_DoInit+0xa4>)
 800505e:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2210      	movs	r2, #16
 8005064:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3307      	adds	r3, #7
 800507c:	4a10      	ldr	r2, [pc, #64]	@ (80050c0 <_DoInit+0xa8>)
 800507e:	6810      	ldr	r0, [r2, #0]
 8005080:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005082:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	4a0e      	ldr	r2, [pc, #56]	@ (80050c4 <_DoInit+0xac>)
 800508a:	6810      	ldr	r0, [r2, #0]
 800508c:	6018      	str	r0, [r3, #0]
 800508e:	8891      	ldrh	r1, [r2, #4]
 8005090:	7992      	ldrb	r2, [r2, #6]
 8005092:	8099      	strh	r1, [r3, #4]
 8005094:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8005096:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050a0:	f3bf 8f5f 	dmb	sy
}
 80050a4:	bf00      	nop
 80050a6:	370c      	adds	r7, #12
 80050a8:	46bd      	mov	sp, r7
 80050aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ae:	4770      	bx	lr
 80050b0:	2004b364 	.word	0x2004b364
 80050b4:	0800790c 	.word	0x0800790c
 80050b8:	2004b40c 	.word	0x2004b40c
 80050bc:	2004b80c 	.word	0x2004b80c
 80050c0:	08007918 	.word	0x08007918
 80050c4:	0800791c 	.word	0x0800791c

080050c8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b08c      	sub	sp, #48	@ 0x30
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 80050d4:	4b3e      	ldr	r3, [pc, #248]	@ (80051d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050d6:	623b      	str	r3, [r7, #32]
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	b2db      	uxtb	r3, r3
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d101      	bne.n	80050e6 <SEGGER_RTT_ReadNoLock+0x1e>
 80050e2:	f7ff ff99 	bl	8005018 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80050e6:	68fa      	ldr	r2, [r7, #12]
 80050e8:	4613      	mov	r3, r2
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	4413      	add	r3, r2
 80050ee:	00db      	lsls	r3, r3, #3
 80050f0:	3360      	adds	r3, #96	@ 0x60
 80050f2:	4a37      	ldr	r2, [pc, #220]	@ (80051d0 <SEGGER_RTT_ReadNoLock+0x108>)
 80050f4:	4413      	add	r3, r2
 80050f6:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	691b      	ldr	r3, [r3, #16]
 8005100:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005102:	69fb      	ldr	r3, [r7, #28]
 8005104:	68db      	ldr	r3, [r3, #12]
 8005106:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8005108:	2300      	movs	r3, #0
 800510a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800510c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800510e:	69bb      	ldr	r3, [r7, #24]
 8005110:	429a      	cmp	r2, r3
 8005112:	d92b      	bls.n	800516c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511a:	1ad3      	subs	r3, r2, r3
 800511c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	4293      	cmp	r3, r2
 8005124:	bf28      	it	cs
 8005126:	4613      	movcs	r3, r2
 8005128:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	685a      	ldr	r2, [r3, #4]
 800512e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005130:	4413      	add	r3, r2
 8005132:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005134:	697a      	ldr	r2, [r7, #20]
 8005136:	6939      	ldr	r1, [r7, #16]
 8005138:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800513a:	f001 ff03 	bl	8006f44 <memcpy>
    NumBytesRead += NumBytesRem;
 800513e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005140:	697b      	ldr	r3, [r7, #20]
 8005142:	4413      	add	r3, r2
 8005144:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8005146:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	4413      	add	r3, r2
 800514c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800514e:	687a      	ldr	r2, [r7, #4]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8005156:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	4413      	add	r3, r2
 800515c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005164:	429a      	cmp	r2, r3
 8005166:	d101      	bne.n	800516c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8005168:	2300      	movs	r3, #0
 800516a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800516c:	69ba      	ldr	r2, [r7, #24]
 800516e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005170:	1ad3      	subs	r3, r2, r3
 8005172:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005174:	697a      	ldr	r2, [r7, #20]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	4293      	cmp	r3, r2
 800517a:	bf28      	it	cs
 800517c:	4613      	movcs	r3, r2
 800517e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8005180:	697b      	ldr	r3, [r7, #20]
 8005182:	2b00      	cmp	r3, #0
 8005184:	d019      	beq.n	80051ba <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800518c:	4413      	add	r3, r2
 800518e:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	6939      	ldr	r1, [r7, #16]
 8005194:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005196:	f001 fed5 	bl	8006f44 <memcpy>
    NumBytesRead += NumBytesRem;
 800519a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519c:	697b      	ldr	r3, [r7, #20]
 800519e:	4413      	add	r3, r2
 80051a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80051a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	4413      	add	r3, r2
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	1ad3      	subs	r3, r2, r3
 80051b0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	4413      	add	r3, r2
 80051b8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051c4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	3730      	adds	r7, #48	@ 0x30
 80051cc:	46bd      	mov	sp, r7
 80051ce:	bd80      	pop	{r7, pc}
 80051d0:	2004b364 	.word	0x2004b364

080051d4 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	607a      	str	r2, [r7, #4]
 80051e0:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80051e2:	4b3d      	ldr	r3, [pc, #244]	@ (80052d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 80051e4:	61bb      	str	r3, [r7, #24]
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d101      	bne.n	80051f4 <SEGGER_RTT_AllocUpBuffer+0x20>
 80051f0:	f7ff ff12 	bl	8005018 <_DoInit>
  SEGGER_RTT_LOCK();
 80051f4:	f3ef 8311 	mrs	r3, BASEPRI
 80051f8:	f04f 0120 	mov.w	r1, #32
 80051fc:	f381 8811 	msr	BASEPRI, r1
 8005200:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005202:	4b35      	ldr	r3, [pc, #212]	@ (80052d8 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005204:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8005206:	2300      	movs	r3, #0
 8005208:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800520a:	6939      	ldr	r1, [r7, #16]
 800520c:	69fb      	ldr	r3, [r7, #28]
 800520e:	1c5a      	adds	r2, r3, #1
 8005210:	4613      	mov	r3, r2
 8005212:	005b      	lsls	r3, r3, #1
 8005214:	4413      	add	r3, r2
 8005216:	00db      	lsls	r3, r3, #3
 8005218:	440b      	add	r3, r1
 800521a:	3304      	adds	r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d008      	beq.n	8005234 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	3301      	adds	r3, #1
 8005226:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	691b      	ldr	r3, [r3, #16]
 800522c:	69fa      	ldr	r2, [r7, #28]
 800522e:	429a      	cmp	r2, r3
 8005230:	dbeb      	blt.n	800520a <SEGGER_RTT_AllocUpBuffer+0x36>
 8005232:	e000      	b.n	8005236 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005234:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	429a      	cmp	r2, r3
 800523e:	da3f      	bge.n	80052c0 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005240:	6939      	ldr	r1, [r7, #16]
 8005242:	69fb      	ldr	r3, [r7, #28]
 8005244:	1c5a      	adds	r2, r3, #1
 8005246:	4613      	mov	r3, r2
 8005248:	005b      	lsls	r3, r3, #1
 800524a:	4413      	add	r3, r2
 800524c:	00db      	lsls	r3, r3, #3
 800524e:	440b      	add	r3, r1
 8005250:	68fa      	ldr	r2, [r7, #12]
 8005252:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005254:	6939      	ldr	r1, [r7, #16]
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	4613      	mov	r3, r2
 800525c:	005b      	lsls	r3, r3, #1
 800525e:	4413      	add	r3, r2
 8005260:	00db      	lsls	r3, r3, #3
 8005262:	440b      	add	r3, r1
 8005264:	3304      	adds	r3, #4
 8005266:	68ba      	ldr	r2, [r7, #8]
 8005268:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800526a:	6939      	ldr	r1, [r7, #16]
 800526c:	69fa      	ldr	r2, [r7, #28]
 800526e:	4613      	mov	r3, r2
 8005270:	005b      	lsls	r3, r3, #1
 8005272:	4413      	add	r3, r2
 8005274:	00db      	lsls	r3, r3, #3
 8005276:	440b      	add	r3, r1
 8005278:	3320      	adds	r3, #32
 800527a:	687a      	ldr	r2, [r7, #4]
 800527c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800527e:	6939      	ldr	r1, [r7, #16]
 8005280:	69fa      	ldr	r2, [r7, #28]
 8005282:	4613      	mov	r3, r2
 8005284:	005b      	lsls	r3, r3, #1
 8005286:	4413      	add	r3, r2
 8005288:	00db      	lsls	r3, r3, #3
 800528a:	440b      	add	r3, r1
 800528c:	3328      	adds	r3, #40	@ 0x28
 800528e:	2200      	movs	r2, #0
 8005290:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8005292:	6939      	ldr	r1, [r7, #16]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	4613      	mov	r3, r2
 8005298:	005b      	lsls	r3, r3, #1
 800529a:	4413      	add	r3, r2
 800529c:	00db      	lsls	r3, r3, #3
 800529e:	440b      	add	r3, r1
 80052a0:	3324      	adds	r3, #36	@ 0x24
 80052a2:	2200      	movs	r2, #0
 80052a4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052a6:	6939      	ldr	r1, [r7, #16]
 80052a8:	69fa      	ldr	r2, [r7, #28]
 80052aa:	4613      	mov	r3, r2
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	4413      	add	r3, r2
 80052b0:	00db      	lsls	r3, r3, #3
 80052b2:	440b      	add	r3, r1
 80052b4:	332c      	adds	r3, #44	@ 0x2c
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052ba:	f3bf 8f5f 	dmb	sy
 80052be:	e002      	b.n	80052c6 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052c0:	f04f 33ff 	mov.w	r3, #4294967295
 80052c4:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 80052cc:	69fb      	ldr	r3, [r7, #28]
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3720      	adds	r7, #32
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	2004b364 	.word	0x2004b364

080052dc <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b088      	sub	sp, #32
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	60f8      	str	r0, [r7, #12]
 80052e4:	60b9      	str	r1, [r7, #8]
 80052e6:	607a      	str	r2, [r7, #4]
 80052e8:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 80052ea:	4b33      	ldr	r3, [pc, #204]	@ (80053b8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	69bb      	ldr	r3, [r7, #24]
 80052f0:	781b      	ldrb	r3, [r3, #0]
 80052f2:	b2db      	uxtb	r3, r3
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d101      	bne.n	80052fc <SEGGER_RTT_ConfigDownBuffer+0x20>
 80052f8:	f7ff fe8e 	bl	8005018 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 80052fc:	4b2e      	ldr	r3, [pc, #184]	@ (80053b8 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 80052fe:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	695b      	ldr	r3, [r3, #20]
 8005304:	461a      	mov	r2, r3
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4293      	cmp	r3, r2
 800530a:	d24d      	bcs.n	80053a8 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 800530c:	f3ef 8311 	mrs	r3, BASEPRI
 8005310:	f04f 0120 	mov.w	r1, #32
 8005314:	f381 8811 	msr	BASEPRI, r1
 8005318:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d031      	beq.n	8005384 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005320:	6979      	ldr	r1, [r7, #20]
 8005322:	68fa      	ldr	r2, [r7, #12]
 8005324:	4613      	mov	r3, r2
 8005326:	005b      	lsls	r3, r3, #1
 8005328:	4413      	add	r3, r2
 800532a:	00db      	lsls	r3, r3, #3
 800532c:	440b      	add	r3, r1
 800532e:	3360      	adds	r3, #96	@ 0x60
 8005330:	68ba      	ldr	r2, [r7, #8]
 8005332:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005334:	6979      	ldr	r1, [r7, #20]
 8005336:	68fa      	ldr	r2, [r7, #12]
 8005338:	4613      	mov	r3, r2
 800533a:	005b      	lsls	r3, r3, #1
 800533c:	4413      	add	r3, r2
 800533e:	00db      	lsls	r3, r3, #3
 8005340:	440b      	add	r3, r1
 8005342:	3364      	adds	r3, #100	@ 0x64
 8005344:	687a      	ldr	r2, [r7, #4]
 8005346:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	4613      	mov	r3, r2
 800534e:	005b      	lsls	r3, r3, #1
 8005350:	4413      	add	r3, r2
 8005352:	00db      	lsls	r3, r3, #3
 8005354:	440b      	add	r3, r1
 8005356:	3368      	adds	r3, #104	@ 0x68
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 800535c:	6979      	ldr	r1, [r7, #20]
 800535e:	68fa      	ldr	r2, [r7, #12]
 8005360:	4613      	mov	r3, r2
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	4413      	add	r3, r2
 8005366:	00db      	lsls	r3, r3, #3
 8005368:	440b      	add	r3, r1
 800536a:	3370      	adds	r3, #112	@ 0x70
 800536c:	2200      	movs	r2, #0
 800536e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8005370:	6979      	ldr	r1, [r7, #20]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	4613      	mov	r3, r2
 8005376:	005b      	lsls	r3, r3, #1
 8005378:	4413      	add	r3, r2
 800537a:	00db      	lsls	r3, r3, #3
 800537c:	440b      	add	r3, r1
 800537e:	336c      	adds	r3, #108	@ 0x6c
 8005380:	2200      	movs	r2, #0
 8005382:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8005384:	6979      	ldr	r1, [r7, #20]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	4613      	mov	r3, r2
 800538a:	005b      	lsls	r3, r3, #1
 800538c:	4413      	add	r3, r2
 800538e:	00db      	lsls	r3, r3, #3
 8005390:	440b      	add	r3, r1
 8005392:	3374      	adds	r3, #116	@ 0x74
 8005394:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005396:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8005398:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	e002      	b.n	80053ae <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80053a8:	f04f 33ff 	mov.w	r3, #4294967295
 80053ac:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80053ae:	69fb      	ldr	r3, [r7, #28]
}
 80053b0:	4618      	mov	r0, r3
 80053b2:	3720      	adds	r7, #32
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	2004b364 	.word	0x2004b364

080053bc <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	60f8      	str	r0, [r7, #12]
 80053c4:	60b9      	str	r1, [r7, #8]
 80053c6:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80053c8:	2300      	movs	r3, #0
 80053ca:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053cc:	e002      	b.n	80053d4 <_EncodeStr+0x18>
    Len++;
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	3301      	adds	r3, #1
 80053d2:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	781b      	ldrb	r3, [r3, #0]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d1f6      	bne.n	80053ce <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 80053e0:	693a      	ldr	r2, [r7, #16]
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	429a      	cmp	r2, r3
 80053e6:	d901      	bls.n	80053ec <_EncodeStr+0x30>
    Len = Limit;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 80053ec:	693b      	ldr	r3, [r7, #16]
 80053ee:	2bfe      	cmp	r3, #254	@ 0xfe
 80053f0:	d806      	bhi.n	8005400 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	60fa      	str	r2, [r7, #12]
 80053f8:	693a      	ldr	r2, [r7, #16]
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]
 80053fe:	e011      	b.n	8005424 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	60fa      	str	r2, [r7, #12]
 8005406:	22ff      	movs	r2, #255	@ 0xff
 8005408:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	60fa      	str	r2, [r7, #12]
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	b2d2      	uxtb	r2, r2
 8005414:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	0a19      	lsrs	r1, r3, #8
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	1c5a      	adds	r2, r3, #1
 800541e:	60fa      	str	r2, [r7, #12]
 8005420:	b2ca      	uxtb	r2, r1
 8005422:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005424:	2300      	movs	r3, #0
 8005426:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005428:	e00a      	b.n	8005440 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800542a:	68ba      	ldr	r2, [r7, #8]
 800542c:	1c53      	adds	r3, r2, #1
 800542e:	60bb      	str	r3, [r7, #8]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	60f9      	str	r1, [r7, #12]
 8005436:	7812      	ldrb	r2, [r2, #0]
 8005438:	701a      	strb	r2, [r3, #0]
    n++;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	3301      	adds	r3, #1
 800543e:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005440:	697a      	ldr	r2, [r7, #20]
 8005442:	693b      	ldr	r3, [r7, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d3f0      	bcc.n	800542a <_EncodeStr+0x6e>
  }
  return pPayload;
 8005448:	68fb      	ldr	r3, [r7, #12]
}
 800544a:	4618      	mov	r0, r3
 800544c:	371c      	adds	r7, #28
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	3304      	adds	r3, #4
}
 8005462:	4618      	mov	r0, r3
 8005464:	370c      	adds	r7, #12
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
	...

08005470 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005476:	4b35      	ldr	r3, [pc, #212]	@ (800554c <_HandleIncomingPacket+0xdc>)
 8005478:	7e1b      	ldrb	r3, [r3, #24]
 800547a:	4618      	mov	r0, r3
 800547c:	1cfb      	adds	r3, r7, #3
 800547e:	2201      	movs	r2, #1
 8005480:	4619      	mov	r1, r3
 8005482:	f7ff fe21 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
 8005486:	4603      	mov	r3, r0
 8005488:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	dd59      	ble.n	8005544 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	2b80      	cmp	r3, #128	@ 0x80
 8005494:	d032      	beq.n	80054fc <_HandleIncomingPacket+0x8c>
 8005496:	2b80      	cmp	r3, #128	@ 0x80
 8005498:	dc42      	bgt.n	8005520 <_HandleIncomingPacket+0xb0>
 800549a:	2b07      	cmp	r3, #7
 800549c:	dc16      	bgt.n	80054cc <_HandleIncomingPacket+0x5c>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	dd3e      	ble.n	8005520 <_HandleIncomingPacket+0xb0>
 80054a2:	3b01      	subs	r3, #1
 80054a4:	2b06      	cmp	r3, #6
 80054a6:	d83b      	bhi.n	8005520 <_HandleIncomingPacket+0xb0>
 80054a8:	a201      	add	r2, pc, #4	@ (adr r2, 80054b0 <_HandleIncomingPacket+0x40>)
 80054aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ae:	bf00      	nop
 80054b0:	080054d3 	.word	0x080054d3
 80054b4:	080054d9 	.word	0x080054d9
 80054b8:	080054df 	.word	0x080054df
 80054bc:	080054e5 	.word	0x080054e5
 80054c0:	080054eb 	.word	0x080054eb
 80054c4:	080054f1 	.word	0x080054f1
 80054c8:	080054f7 	.word	0x080054f7
 80054cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80054ce:	d034      	beq.n	800553a <_HandleIncomingPacket+0xca>
 80054d0:	e026      	b.n	8005520 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 80054d2:	f000 ff43 	bl	800635c <SEGGER_SYSVIEW_Start>
      break;
 80054d6:	e035      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 80054d8:	f000 fffc 	bl	80064d4 <SEGGER_SYSVIEW_Stop>
      break;
 80054dc:	e032      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 80054de:	f001 f9d5 	bl	800688c <SEGGER_SYSVIEW_RecordSystime>
      break;
 80054e2:	e02f      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 80054e4:	f001 f99a 	bl	800681c <SEGGER_SYSVIEW_SendTaskList>
      break;
 80054e8:	e02c      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 80054ea:	f001 f819 	bl	8006520 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 80054ee:	e029      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 80054f0:	f001 fc08 	bl	8006d04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 80054f4:	e026      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 80054f6:	f001 fbe7 	bl	8006cc8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 80054fa:	e023      	b.n	8005544 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054fc:	4b13      	ldr	r3, [pc, #76]	@ (800554c <_HandleIncomingPacket+0xdc>)
 80054fe:	7e1b      	ldrb	r3, [r3, #24]
 8005500:	4618      	mov	r0, r3
 8005502:	1cfb      	adds	r3, r7, #3
 8005504:	2201      	movs	r2, #1
 8005506:	4619      	mov	r1, r3
 8005508:	f7ff fdde 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
 800550c:	4603      	mov	r3, r0
 800550e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	dd13      	ble.n	800553e <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8005516:	78fb      	ldrb	r3, [r7, #3]
 8005518:	4618      	mov	r0, r3
 800551a:	f001 fb55 	bl	8006bc8 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800551e:	e00e      	b.n	800553e <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005520:	78fb      	ldrb	r3, [r7, #3]
 8005522:	b25b      	sxtb	r3, r3
 8005524:	2b00      	cmp	r3, #0
 8005526:	da0c      	bge.n	8005542 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005528:	4b08      	ldr	r3, [pc, #32]	@ (800554c <_HandleIncomingPacket+0xdc>)
 800552a:	7e1b      	ldrb	r3, [r3, #24]
 800552c:	4618      	mov	r0, r3
 800552e:	1cfb      	adds	r3, r7, #3
 8005530:	2201      	movs	r2, #1
 8005532:	4619      	mov	r1, r3
 8005534:	f7ff fdc8 	bl	80050c8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8005538:	e003      	b.n	8005542 <_HandleIncomingPacket+0xd2>
      break;
 800553a:	bf00      	nop
 800553c:	e002      	b.n	8005544 <_HandleIncomingPacket+0xd4>
      break;
 800553e:	bf00      	nop
 8005540:	e000      	b.n	8005544 <_HandleIncomingPacket+0xd4>
      break;
 8005542:	bf00      	nop
    }
  }
}
 8005544:	bf00      	nop
 8005546:	3708      	adds	r7, #8
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	2004c824 	.word	0x2004c824

08005550 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005550:	b580      	push	{r7, lr}
 8005552:	b08c      	sub	sp, #48	@ 0x30
 8005554:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8005556:	2301      	movs	r3, #1
 8005558:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800555a:	1d3b      	adds	r3, r7, #4
 800555c:	3301      	adds	r3, #1
 800555e:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005560:	69fb      	ldr	r3, [r7, #28]
 8005562:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005564:	4b32      	ldr	r3, [pc, #200]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 8005566:	695b      	ldr	r3, [r3, #20]
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800556a:	e00b      	b.n	8005584 <_TrySendOverflowPacket+0x34>
 800556c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800556e:	b2da      	uxtb	r2, r3
 8005570:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005572:	1c59      	adds	r1, r3, #1
 8005574:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005576:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800557a:	b2d2      	uxtb	r2, r2
 800557c:	701a      	strb	r2, [r3, #0]
 800557e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005580:	09db      	lsrs	r3, r3, #7
 8005582:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005586:	2b7f      	cmp	r3, #127	@ 0x7f
 8005588:	d8f0      	bhi.n	800556c <_TrySendOverflowPacket+0x1c>
 800558a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005590:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]
 8005596:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005598:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800559a:	4b26      	ldr	r3, [pc, #152]	@ (8005634 <_TrySendOverflowPacket+0xe4>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055a0:	4b23      	ldr	r3, [pc, #140]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 80055a2:	68db      	ldr	r3, [r3, #12]
 80055a4:	69ba      	ldr	r2, [r7, #24]
 80055a6:	1ad3      	subs	r3, r2, r3
 80055a8:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055aa:	69fb      	ldr	r3, [r7, #28]
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	623b      	str	r3, [r7, #32]
 80055b2:	e00b      	b.n	80055cc <_TrySendOverflowPacket+0x7c>
 80055b4:	6a3b      	ldr	r3, [r7, #32]
 80055b6:	b2da      	uxtb	r2, r3
 80055b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ba:	1c59      	adds	r1, r3, #1
 80055bc:	6279      	str	r1, [r7, #36]	@ 0x24
 80055be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055c2:	b2d2      	uxtb	r2, r2
 80055c4:	701a      	strb	r2, [r3, #0]
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	09db      	lsrs	r3, r3, #7
 80055ca:	623b      	str	r3, [r7, #32]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80055d0:	d8f0      	bhi.n	80055b4 <_TrySendOverflowPacket+0x64>
 80055d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	627a      	str	r2, [r7, #36]	@ 0x24
 80055d8:	6a3a      	ldr	r2, [r7, #32]
 80055da:	b2d2      	uxtb	r2, r2
 80055dc:	701a      	strb	r2, [r3, #0]
 80055de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e0:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 80055e2:	4b13      	ldr	r3, [pc, #76]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	4618      	mov	r0, r3
 80055e8:	1d3b      	adds	r3, r7, #4
 80055ea:	69fa      	ldr	r2, [r7, #28]
 80055ec:	1ad3      	subs	r3, r2, r3
 80055ee:	461a      	mov	r2, r3
 80055f0:	1d3b      	adds	r3, r7, #4
 80055f2:	4619      	mov	r1, r3
 80055f4:	f7fa fe14 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80055f8:	4603      	mov	r3, r0
 80055fa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
 80055fc:	f7ff fcfc 	bl	8004ff8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005600:	693b      	ldr	r3, [r7, #16]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d009      	beq.n	800561a <_TrySendOverflowPacket+0xca>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005606:	4a0a      	ldr	r2, [pc, #40]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 8005608:	69bb      	ldr	r3, [r7, #24]
 800560a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800560c:	4b08      	ldr	r3, [pc, #32]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 800560e:	781b      	ldrb	r3, [r3, #0]
 8005610:	3b01      	subs	r3, #1
 8005612:	b2da      	uxtb	r2, r3
 8005614:	4b06      	ldr	r3, [pc, #24]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 8005616:	701a      	strb	r2, [r3, #0]
 8005618:	e004      	b.n	8005624 <_TrySendOverflowPacket+0xd4>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800561a:	4b05      	ldr	r3, [pc, #20]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	3301      	adds	r3, #1
 8005620:	4a03      	ldr	r2, [pc, #12]	@ (8005630 <_TrySendOverflowPacket+0xe0>)
 8005622:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005624:	693b      	ldr	r3, [r7, #16]
}
 8005626:	4618      	mov	r0, r3
 8005628:	3730      	adds	r7, #48	@ 0x30
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
 800562e:	bf00      	nop
 8005630:	2004c824 	.word	0x2004c824
 8005634:	e0001004 	.word	0xe0001004

08005638 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005638:	b580      	push	{r7, lr}
 800563a:	b08a      	sub	sp, #40	@ 0x28
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005644:	4b6d      	ldr	r3, [pc, #436]	@ (80057fc <_SendPacket+0x1c4>)
 8005646:	781b      	ldrb	r3, [r3, #0]
 8005648:	2b01      	cmp	r3, #1
 800564a:	d010      	beq.n	800566e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800564c:	4b6b      	ldr	r3, [pc, #428]	@ (80057fc <_SendPacket+0x1c4>)
 800564e:	781b      	ldrb	r3, [r3, #0]
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 80a5 	beq.w	80057a0 <_SendPacket+0x168>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005656:	4b69      	ldr	r3, [pc, #420]	@ (80057fc <_SendPacket+0x1c4>)
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	2b02      	cmp	r3, #2
 800565c:	d109      	bne.n	8005672 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800565e:	f7ff ff77 	bl	8005550 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005662:	4b66      	ldr	r3, [pc, #408]	@ (80057fc <_SendPacket+0x1c4>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	2b01      	cmp	r3, #1
 8005668:	f040 809c 	bne.w	80057a4 <_SendPacket+0x16c>
      goto SendDone;
    }
  }
Send:
 800566c:	e001      	b.n	8005672 <_SendPacket+0x3a>
    goto Send;
 800566e:	bf00      	nop
 8005670:	e000      	b.n	8005674 <_SendPacket+0x3c>
Send:
 8005672:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2b1f      	cmp	r3, #31
 8005678:	d809      	bhi.n	800568e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800567a:	4b60      	ldr	r3, [pc, #384]	@ (80057fc <_SendPacket+0x1c4>)
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	fa22 f303 	lsr.w	r3, r2, r3
 8005684:	f003 0301 	and.w	r3, r3, #1
 8005688:	2b00      	cmp	r3, #0
 800568a:	f040 808d 	bne.w	80057a8 <_SendPacket+0x170>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2b17      	cmp	r3, #23
 8005692:	d807      	bhi.n	80056a4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	3b01      	subs	r3, #1
 8005698:	60fb      	str	r3, [r7, #12]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	b2da      	uxtb	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	701a      	strb	r2, [r3, #0]
 80056a2:	e03d      	b.n	8005720 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	1ad3      	subs	r3, r2, r3
 80056aa:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80056ac:	69fb      	ldr	r3, [r7, #28]
 80056ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80056b0:	d912      	bls.n	80056d8 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80056b2:	69fb      	ldr	r3, [r7, #28]
 80056b4:	09da      	lsrs	r2, r3, #7
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3b01      	subs	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
 80056bc:	b2d2      	uxtb	r2, r2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80056c2:	69fb      	ldr	r3, [r7, #28]
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	68fa      	ldr	r2, [r7, #12]
 80056c8:	3a01      	subs	r2, #1
 80056ca:	60fa      	str	r2, [r7, #12]
 80056cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	701a      	strb	r2, [r3, #0]
 80056d6:	e006      	b.n	80056e6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	3b01      	subs	r3, #1
 80056dc:	60fb      	str	r3, [r7, #12]
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80056ea:	d912      	bls.n	8005712 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	09da      	lsrs	r2, r3, #7
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	3b01      	subs	r3, #1
 80056f4:	60fb      	str	r3, [r7, #12]
 80056f6:	b2d2      	uxtb	r2, r2
 80056f8:	68fb      	ldr	r3, [r7, #12]
 80056fa:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	b2db      	uxtb	r3, r3
 8005700:	68fa      	ldr	r2, [r7, #12]
 8005702:	3a01      	subs	r2, #1
 8005704:	60fa      	str	r2, [r7, #12]
 8005706:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800570a:	b2da      	uxtb	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e006      	b.n	8005720 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3b01      	subs	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	b2da      	uxtb	r2, r3
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005720:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <_SendPacket+0x1c8>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005726:	4b35      	ldr	r3, [pc, #212]	@ (80057fc <_SendPacket+0x1c4>)
 8005728:	68db      	ldr	r3, [r3, #12]
 800572a:	69ba      	ldr	r2, [r7, #24]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	627b      	str	r3, [r7, #36]	@ 0x24
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	623b      	str	r3, [r7, #32]
 8005738:	e00b      	b.n	8005752 <_SendPacket+0x11a>
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	b2da      	uxtb	r2, r3
 800573e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005740:	1c59      	adds	r1, r3, #1
 8005742:	6279      	str	r1, [r7, #36]	@ 0x24
 8005744:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005748:	b2d2      	uxtb	r2, r2
 800574a:	701a      	strb	r2, [r3, #0]
 800574c:	6a3b      	ldr	r3, [r7, #32]
 800574e:	09db      	lsrs	r3, r3, #7
 8005750:	623b      	str	r3, [r7, #32]
 8005752:	6a3b      	ldr	r3, [r7, #32]
 8005754:	2b7f      	cmp	r3, #127	@ 0x7f
 8005756:	d8f0      	bhi.n	800573a <_SendPacket+0x102>
 8005758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800575a:	1c5a      	adds	r2, r3, #1
 800575c:	627a      	str	r2, [r7, #36]	@ 0x24
 800575e:	6a3a      	ldr	r2, [r7, #32]
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005768:	4b24      	ldr	r3, [pc, #144]	@ (80057fc <_SendPacket+0x1c4>)
 800576a:	785b      	ldrb	r3, [r3, #1]
 800576c:	4618      	mov	r0, r3
 800576e:	68ba      	ldr	r2, [r7, #8]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	461a      	mov	r2, r3
 8005776:	68f9      	ldr	r1, [r7, #12]
 8005778:	f7fa fd52 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800577c:	4603      	mov	r3, r0
 800577e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
 8005780:	f7ff fc3a 	bl	8004ff8 <HIF_UART_EnableTXEInterrupt>
  if (Status) {
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d003      	beq.n	8005792 <_SendPacket+0x15a>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800578a:	4a1c      	ldr	r2, [pc, #112]	@ (80057fc <_SendPacket+0x1c4>)
 800578c:	69bb      	ldr	r3, [r7, #24]
 800578e:	60d3      	str	r3, [r2, #12]
 8005790:	e00b      	b.n	80057aa <_SendPacket+0x172>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005792:	4b1a      	ldr	r3, [pc, #104]	@ (80057fc <_SendPacket+0x1c4>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	3301      	adds	r3, #1
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b18      	ldr	r3, [pc, #96]	@ (80057fc <_SendPacket+0x1c4>)
 800579c:	701a      	strb	r2, [r3, #0]
 800579e:	e004      	b.n	80057aa <_SendPacket+0x172>
    goto SendDone;
 80057a0:	bf00      	nop
 80057a2:	e002      	b.n	80057aa <_SendPacket+0x172>
      goto SendDone;
 80057a4:	bf00      	nop
 80057a6:	e000      	b.n	80057aa <_SendPacket+0x172>
      goto SendDone;
 80057a8:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057aa:	4b14      	ldr	r3, [pc, #80]	@ (80057fc <_SendPacket+0x1c4>)
 80057ac:	7e1b      	ldrb	r3, [r3, #24]
 80057ae:	4619      	mov	r1, r3
 80057b0:	4a14      	ldr	r2, [pc, #80]	@ (8005804 <_SendPacket+0x1cc>)
 80057b2:	460b      	mov	r3, r1
 80057b4:	005b      	lsls	r3, r3, #1
 80057b6:	440b      	add	r3, r1
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	4413      	add	r3, r2
 80057bc:	336c      	adds	r3, #108	@ 0x6c
 80057be:	681a      	ldr	r2, [r3, #0]
 80057c0:	4b0e      	ldr	r3, [pc, #56]	@ (80057fc <_SendPacket+0x1c4>)
 80057c2:	7e1b      	ldrb	r3, [r3, #24]
 80057c4:	4618      	mov	r0, r3
 80057c6:	490f      	ldr	r1, [pc, #60]	@ (8005804 <_SendPacket+0x1cc>)
 80057c8:	4603      	mov	r3, r0
 80057ca:	005b      	lsls	r3, r3, #1
 80057cc:	4403      	add	r3, r0
 80057ce:	00db      	lsls	r3, r3, #3
 80057d0:	440b      	add	r3, r1
 80057d2:	3370      	adds	r3, #112	@ 0x70
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	429a      	cmp	r2, r3
 80057d8:	d00b      	beq.n	80057f2 <_SendPacket+0x1ba>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 80057da:	4b08      	ldr	r3, [pc, #32]	@ (80057fc <_SendPacket+0x1c4>)
 80057dc:	789b      	ldrb	r3, [r3, #2]
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d107      	bne.n	80057f2 <_SendPacket+0x1ba>
      _SYSVIEW_Globals.RecursionCnt = 1;
 80057e2:	4b06      	ldr	r3, [pc, #24]	@ (80057fc <_SendPacket+0x1c4>)
 80057e4:	2201      	movs	r2, #1
 80057e6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 80057e8:	f7ff fe42 	bl	8005470 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 80057ec:	4b03      	ldr	r3, [pc, #12]	@ (80057fc <_SendPacket+0x1c4>)
 80057ee:	2200      	movs	r2, #0
 80057f0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 80057f2:	bf00      	nop
 80057f4:	3728      	adds	r7, #40	@ 0x28
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	2004c824 	.word	0x2004c824
 8005800:	e0001004 	.word	0xe0001004
 8005804:	2004b364 	.word	0x2004b364

08005808 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005808:	b580      	push	{r7, lr}
 800580a:	b08a      	sub	sp, #40	@ 0x28
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	460b      	mov	r3, r1
 8005812:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	691b      	ldr	r3, [r3, #16]
 8005818:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800581a:	697b      	ldr	r3, [r7, #20]
 800581c:	3301      	adds	r3, #1
 800581e:	2b80      	cmp	r3, #128	@ 0x80
 8005820:	d80a      	bhi.n	8005838 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	1c59      	adds	r1, r3, #1
 8005828:	687a      	ldr	r2, [r7, #4]
 800582a:	6051      	str	r1, [r2, #4]
 800582c:	78fa      	ldrb	r2, [r7, #3]
 800582e:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	1c5a      	adds	r2, r3, #1
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	691b      	ldr	r3, [r3, #16]
 800583c:	2b80      	cmp	r3, #128	@ 0x80
 800583e:	d15a      	bne.n	80058f6 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691a      	ldr	r2, [r3, #16]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	627b      	str	r3, [r7, #36]	@ 0x24
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	e00b      	b.n	800587a <_StoreChar+0x72>
 8005862:	6a3b      	ldr	r3, [r7, #32]
 8005864:	b2da      	uxtb	r2, r3
 8005866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005868:	1c59      	adds	r1, r3, #1
 800586a:	6279      	str	r1, [r7, #36]	@ 0x24
 800586c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005870:	b2d2      	uxtb	r2, r2
 8005872:	701a      	strb	r2, [r3, #0]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	09db      	lsrs	r3, r3, #7
 8005878:	623b      	str	r3, [r7, #32]
 800587a:	6a3b      	ldr	r3, [r7, #32]
 800587c:	2b7f      	cmp	r3, #127	@ 0x7f
 800587e:	d8f0      	bhi.n	8005862 <_StoreChar+0x5a>
 8005880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005882:	1c5a      	adds	r2, r3, #1
 8005884:	627a      	str	r2, [r7, #36]	@ 0x24
 8005886:	6a3a      	ldr	r2, [r7, #32]
 8005888:	b2d2      	uxtb	r2, r2
 800588a:	701a      	strb	r2, [r3, #0]
 800588c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588e:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	61fb      	str	r3, [r7, #28]
 8005894:	2300      	movs	r3, #0
 8005896:	61bb      	str	r3, [r7, #24]
 8005898:	e00b      	b.n	80058b2 <_StoreChar+0xaa>
 800589a:	69bb      	ldr	r3, [r7, #24]
 800589c:	b2da      	uxtb	r2, r3
 800589e:	69fb      	ldr	r3, [r7, #28]
 80058a0:	1c59      	adds	r1, r3, #1
 80058a2:	61f9      	str	r1, [r7, #28]
 80058a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	09db      	lsrs	r3, r3, #7
 80058b0:	61bb      	str	r3, [r7, #24]
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058b6:	d8f0      	bhi.n	800589a <_StoreChar+0x92>
 80058b8:	69fb      	ldr	r3, [r7, #28]
 80058ba:	1c5a      	adds	r2, r3, #1
 80058bc:	61fa      	str	r2, [r7, #28]
 80058be:	69ba      	ldr	r2, [r7, #24]
 80058c0:	b2d2      	uxtb	r2, r2
 80058c2:	701a      	strb	r2, [r3, #0]
 80058c4:	69fb      	ldr	r3, [r7, #28]
 80058c6:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	221a      	movs	r2, #26
 80058ce:	6939      	ldr	r1, [r7, #16]
 80058d0:	4618      	mov	r0, r3
 80058d2:	f7ff feb1 	bl	8005638 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7ff fdbb 	bl	8005456 <_PreparePacket>
 80058e0:	4602      	mov	r2, r0
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	689b      	ldr	r3, [r3, #8]
 80058ea:	1c5a      	adds	r2, r3, #1
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2200      	movs	r2, #0
 80058f4:	611a      	str	r2, [r3, #16]
  }
}
 80058f6:	bf00      	nop
 80058f8:	3728      	adds	r7, #40	@ 0x28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005900:	b580      	push	{r7, lr}
 8005902:	b08a      	sub	sp, #40	@ 0x28
 8005904:	af00      	add	r7, sp, #0
 8005906:	60f8      	str	r0, [r7, #12]
 8005908:	60b9      	str	r1, [r7, #8]
 800590a:	607a      	str	r2, [r7, #4]
 800590c:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 8005912:	2301      	movs	r3, #1
 8005914:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005916:	2301      	movs	r3, #1
 8005918:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800591a:	e007      	b.n	800592c <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 800591c:	6a3a      	ldr	r2, [r7, #32]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	fbb2 f3f3 	udiv	r3, r2, r3
 8005924:	623b      	str	r3, [r7, #32]
    Width++;
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	3301      	adds	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 800592c:	6a3a      	ldr	r2, [r7, #32]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	429a      	cmp	r2, r3
 8005932:	d2f3      	bcs.n	800591c <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005934:	683a      	ldr	r2, [r7, #0]
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	429a      	cmp	r2, r3
 800593a:	d901      	bls.n	8005940 <_PrintUnsigned+0x40>
    Width = NumDigits;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 8005940:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005942:	f003 0301 	and.w	r3, r3, #1
 8005946:	2b00      	cmp	r3, #0
 8005948:	d000      	beq.n	800594c <_PrintUnsigned+0x4c>
 800594a:	e01f      	b.n	800598c <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 800594c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800594e:	2b00      	cmp	r3, #0
 8005950:	d01c      	beq.n	800598c <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 8005952:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005954:	f003 0302 	and.w	r3, r3, #2
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <_PrintUnsigned+0x68>
 800595c:	683b      	ldr	r3, [r7, #0]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d102      	bne.n	8005968 <_PrintUnsigned+0x68>
        c = '0';
 8005962:	2330      	movs	r3, #48	@ 0x30
 8005964:	76fb      	strb	r3, [r7, #27]
 8005966:	e001      	b.n	800596c <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005968:	2320      	movs	r3, #32
 800596a:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800596c:	e007      	b.n	800597e <_PrintUnsigned+0x7e>
        FieldWidth--;
 800596e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005970:	3b01      	subs	r3, #1
 8005972:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005974:	7efb      	ldrb	r3, [r7, #27]
 8005976:	4619      	mov	r1, r3
 8005978:	68f8      	ldr	r0, [r7, #12]
 800597a:	f7ff ff45 	bl	8005808 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800597e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005980:	2b00      	cmp	r3, #0
 8005982:	d003      	beq.n	800598c <_PrintUnsigned+0x8c>
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005988:	429a      	cmp	r2, r3
 800598a:	d3f0      	bcc.n	800596e <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d903      	bls.n	800599a <_PrintUnsigned+0x9a>
      NumDigits--;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	3b01      	subs	r3, #1
 8005996:	603b      	str	r3, [r7, #0]
 8005998:	e009      	b.n	80059ae <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800599a:	68ba      	ldr	r2, [r7, #8]
 800599c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599e:	fbb2 f3f3 	udiv	r3, r2, r3
 80059a2:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059a4:	697a      	ldr	r2, [r7, #20]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	429a      	cmp	r2, r3
 80059aa:	d200      	bcs.n	80059ae <_PrintUnsigned+0xae>
        break;
 80059ac:	e005      	b.n	80059ba <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80059ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	fb02 f303 	mul.w	r3, r2, r3
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059b8:	e7e8      	b.n	800598c <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059be:	fbb2 f3f3 	udiv	r3, r2, r3
 80059c2:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059c8:	fb02 f303 	mul.w	r3, r2, r3
 80059cc:	68ba      	ldr	r2, [r7, #8]
 80059ce:	1ad3      	subs	r3, r2, r3
 80059d0:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059d2:	4a15      	ldr	r2, [pc, #84]	@ (8005a28 <_PrintUnsigned+0x128>)
 80059d4:	697b      	ldr	r3, [r7, #20]
 80059d6:	4413      	add	r3, r2
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	4619      	mov	r1, r3
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f7ff ff13 	bl	8005808 <_StoreChar>
    Digit /= Base;
 80059e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ea:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 80059ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d1e3      	bne.n	80059ba <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 80059f2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059f4:	f003 0301 	and.w	r3, r3, #1
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d011      	beq.n	8005a20 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 80059fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d00e      	beq.n	8005a20 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a02:	e006      	b.n	8005a12 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a06:	3b01      	subs	r3, #1
 8005a08:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a0a:	2120      	movs	r1, #32
 8005a0c:	68f8      	ldr	r0, [r7, #12]
 8005a0e:	f7ff fefb 	bl	8005808 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d003      	beq.n	8005a20 <_PrintUnsigned+0x120>
 8005a18:	69fa      	ldr	r2, [r7, #28]
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d3f1      	bcc.n	8005a04 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005a20:	bf00      	nop
 8005a22:	3728      	adds	r7, #40	@ 0x28
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	08007958 	.word	0x08007958

08005a2c <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b088      	sub	sp, #32
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	607a      	str	r2, [r7, #4]
 8005a38:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a3a:	68bb      	ldr	r3, [r7, #8]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfb8      	it	lt
 8005a40:	425b      	neglt	r3, r3
 8005a42:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a44:	2301      	movs	r3, #1
 8005a46:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a48:	e007      	b.n	8005a5a <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	693a      	ldr	r2, [r7, #16]
 8005a4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a52:	613b      	str	r3, [r7, #16]
    Width++;
 8005a54:	697b      	ldr	r3, [r7, #20]
 8005a56:	3301      	adds	r3, #1
 8005a58:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	daf3      	bge.n	8005a4a <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a62:	683a      	ldr	r2, [r7, #0]
 8005a64:	697b      	ldr	r3, [r7, #20]
 8005a66:	429a      	cmp	r2, r3
 8005a68:	d901      	bls.n	8005a6e <_PrintInt+0x42>
    Width = NumDigits;
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d00a      	beq.n	8005a8a <_PrintInt+0x5e>
 8005a74:	68bb      	ldr	r3, [r7, #8]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	db04      	blt.n	8005a84 <_PrintInt+0x58>
 8005a7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d002      	beq.n	8005a8a <_PrintInt+0x5e>
    FieldWidth--;
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	f003 0302 	and.w	r3, r3, #2
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d002      	beq.n	8005a9a <_PrintInt+0x6e>
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d016      	beq.n	8005ac8 <_PrintInt+0x9c>
 8005a9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d111      	bne.n	8005ac8 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005aa4:	6a3b      	ldr	r3, [r7, #32]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aaa:	e006      	b.n	8005aba <_PrintInt+0x8e>
        FieldWidth--;
 8005aac:	6a3b      	ldr	r3, [r7, #32]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005ab2:	2120      	movs	r1, #32
 8005ab4:	68f8      	ldr	r0, [r7, #12]
 8005ab6:	f7ff fea7 	bl	8005808 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005aba:	6a3b      	ldr	r3, [r7, #32]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d003      	beq.n	8005ac8 <_PrintInt+0x9c>
 8005ac0:	697a      	ldr	r2, [r7, #20]
 8005ac2:	6a3b      	ldr	r3, [r7, #32]
 8005ac4:	429a      	cmp	r2, r3
 8005ac6:	d3f1      	bcc.n	8005aac <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	da07      	bge.n	8005ade <_PrintInt+0xb2>
    v = -v;
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	425b      	negs	r3, r3
 8005ad2:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005ad4:	212d      	movs	r1, #45	@ 0x2d
 8005ad6:	68f8      	ldr	r0, [r7, #12]
 8005ad8:	f7ff fe96 	bl	8005808 <_StoreChar>
 8005adc:	e008      	b.n	8005af0 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	f003 0304 	and.w	r3, r3, #4
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005ae8:	212b      	movs	r1, #43	@ 0x2b
 8005aea:	68f8      	ldr	r0, [r7, #12]
 8005aec:	f7ff fe8c 	bl	8005808 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005af0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005af2:	f003 0302 	and.w	r3, r3, #2
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d019      	beq.n	8005b2e <_PrintInt+0x102>
 8005afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005afc:	f003 0301 	and.w	r3, r3, #1
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d114      	bne.n	8005b2e <_PrintInt+0x102>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d111      	bne.n	8005b2e <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b0a:	6a3b      	ldr	r3, [r7, #32]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d00e      	beq.n	8005b2e <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b10:	e006      	b.n	8005b20 <_PrintInt+0xf4>
        FieldWidth--;
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	3b01      	subs	r3, #1
 8005b16:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b18:	2130      	movs	r1, #48	@ 0x30
 8005b1a:	68f8      	ldr	r0, [r7, #12]
 8005b1c:	f7ff fe74 	bl	8005808 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b20:	6a3b      	ldr	r3, [r7, #32]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <_PrintInt+0x102>
 8005b26:	697a      	ldr	r2, [r7, #20]
 8005b28:	6a3b      	ldr	r3, [r7, #32]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d3f1      	bcc.n	8005b12 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b2e:	68b9      	ldr	r1, [r7, #8]
 8005b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b32:	9301      	str	r3, [sp, #4]
 8005b34:	6a3b      	ldr	r3, [r7, #32]
 8005b36:	9300      	str	r3, [sp, #0]
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	68f8      	ldr	r0, [r7, #12]
 8005b3e:	f7ff fedf 	bl	8005900 <_PrintUnsigned>
}
 8005b42:	bf00      	nop
 8005b44:	3718      	adds	r7, #24
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b098      	sub	sp, #96	@ 0x60
 8005b50:	af02      	add	r7, sp, #8
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b58:	f3ef 8311 	mrs	r3, BASEPRI
 8005b5c:	f04f 0120 	mov.w	r1, #32
 8005b60:	f381 8811 	msr	BASEPRI, r1
 8005b64:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b66:	48b7      	ldr	r0, [pc, #732]	@ (8005e44 <_VPrintTarget+0x2f8>)
 8005b68:	f7ff fc75 	bl	8005456 <_PreparePacket>
 8005b6c:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b6e:	4bb5      	ldr	r3, [pc, #724]	@ (8005e44 <_VPrintTarget+0x2f8>)
 8005b70:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b72:	2300      	movs	r3, #0
 8005b74:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005b76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b78:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	3301      	adds	r3, #1
 8005b7e:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	781b      	ldrb	r3, [r3, #0]
 8005b88:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	3301      	adds	r3, #1
 8005b90:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005b92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	f000 8183 	beq.w	8005ea2 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005b9c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ba0:	2b25      	cmp	r3, #37	@ 0x25
 8005ba2:	f040 8170 	bne.w	8005e86 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005baa:	2301      	movs	r3, #1
 8005bac:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005bb6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bba:	3b23      	subs	r3, #35	@ 0x23
 8005bbc:	2b0d      	cmp	r3, #13
 8005bbe:	d83f      	bhi.n	8005c40 <_VPrintTarget+0xf4>
 8005bc0:	a201      	add	r2, pc, #4	@ (adr r2, 8005bc8 <_VPrintTarget+0x7c>)
 8005bc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bc6:	bf00      	nop
 8005bc8:	08005c31 	.word	0x08005c31
 8005bcc:	08005c41 	.word	0x08005c41
 8005bd0:	08005c41 	.word	0x08005c41
 8005bd4:	08005c41 	.word	0x08005c41
 8005bd8:	08005c41 	.word	0x08005c41
 8005bdc:	08005c41 	.word	0x08005c41
 8005be0:	08005c41 	.word	0x08005c41
 8005be4:	08005c41 	.word	0x08005c41
 8005be8:	08005c21 	.word	0x08005c21
 8005bec:	08005c41 	.word	0x08005c41
 8005bf0:	08005c01 	.word	0x08005c01
 8005bf4:	08005c41 	.word	0x08005c41
 8005bf8:	08005c41 	.word	0x08005c41
 8005bfc:	08005c11 	.word	0x08005c11
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c00:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c02:	f043 0301 	orr.w	r3, r3, #1
 8005c06:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	e01a      	b.n	8005c46 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c12:	f043 0302 	orr.w	r3, r3, #2
 8005c16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3301      	adds	r3, #1
 8005c1c:	60fb      	str	r3, [r7, #12]
 8005c1e:	e012      	b.n	8005c46 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c22:	f043 0304 	orr.w	r3, r3, #4
 8005c26:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	60fb      	str	r3, [r7, #12]
 8005c2e:	e00a      	b.n	8005c46 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c30:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c32:	f043 0308 	orr.w	r3, r3, #8
 8005c36:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e002      	b.n	8005c46 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c40:	2300      	movs	r3, #0
 8005c42:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c44:	bf00      	nop
        }
      } while (v);
 8005c46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d1b0      	bne.n	8005bae <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	781b      	ldrb	r3, [r3, #0]
 8005c54:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005c58:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c5c:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c5e:	d912      	bls.n	8005c86 <_VPrintTarget+0x13a>
 8005c60:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c64:	2b39      	cmp	r3, #57	@ 0x39
 8005c66:	d80e      	bhi.n	8005c86 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	3301      	adds	r3, #1
 8005c6c:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c6e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c70:	4613      	mov	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4413      	add	r3, r2
 8005c76:	005b      	lsls	r3, r3, #1
 8005c78:	461a      	mov	r2, r3
 8005c7a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c7e:	4413      	add	r3, r2
 8005c80:	3b30      	subs	r3, #48	@ 0x30
 8005c82:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005c84:	e7e4      	b.n	8005c50 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005c86:	2300      	movs	r3, #0
 8005c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	781b      	ldrb	r3, [r3, #0]
 8005c8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005c92:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c96:	2b2e      	cmp	r3, #46	@ 0x2e
 8005c98:	d11d      	bne.n	8005cd6 <_VPrintTarget+0x18a>
        sFormat++;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cac:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cae:	d912      	bls.n	8005cd6 <_VPrintTarget+0x18a>
 8005cb0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cb4:	2b39      	cmp	r3, #57	@ 0x39
 8005cb6:	d80e      	bhi.n	8005cd6 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	3301      	adds	r3, #1
 8005cbc:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005cbe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cc0:	4613      	mov	r3, r2
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	4413      	add	r3, r2
 8005cc6:	005b      	lsls	r3, r3, #1
 8005cc8:	461a      	mov	r2, r3
 8005cca:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cce:	4413      	add	r3, r2
 8005cd0:	3b30      	subs	r3, #48	@ 0x30
 8005cd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005cd4:	e7e4      	b.n	8005ca0 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	781b      	ldrb	r3, [r3, #0]
 8005cda:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005cde:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce2:	2b6c      	cmp	r3, #108	@ 0x6c
 8005ce4:	d003      	beq.n	8005cee <_VPrintTarget+0x1a2>
 8005ce6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cea:	2b68      	cmp	r3, #104	@ 0x68
 8005cec:	d107      	bne.n	8005cfe <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	781b      	ldrb	r3, [r3, #0]
 8005cf2:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005cfc:	e7ef      	b.n	8005cde <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005cfe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d02:	2b25      	cmp	r3, #37	@ 0x25
 8005d04:	f000 80b3 	beq.w	8005e6e <_VPrintTarget+0x322>
 8005d08:	2b25      	cmp	r3, #37	@ 0x25
 8005d0a:	f2c0 80b7 	blt.w	8005e7c <_VPrintTarget+0x330>
 8005d0e:	2b78      	cmp	r3, #120	@ 0x78
 8005d10:	f300 80b4 	bgt.w	8005e7c <_VPrintTarget+0x330>
 8005d14:	2b58      	cmp	r3, #88	@ 0x58
 8005d16:	f2c0 80b1 	blt.w	8005e7c <_VPrintTarget+0x330>
 8005d1a:	3b58      	subs	r3, #88	@ 0x58
 8005d1c:	2b20      	cmp	r3, #32
 8005d1e:	f200 80ad 	bhi.w	8005e7c <_VPrintTarget+0x330>
 8005d22:	a201      	add	r2, pc, #4	@ (adr r2, 8005d28 <_VPrintTarget+0x1dc>)
 8005d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d28:	08005e1f 	.word	0x08005e1f
 8005d2c:	08005e7d 	.word	0x08005e7d
 8005d30:	08005e7d 	.word	0x08005e7d
 8005d34:	08005e7d 	.word	0x08005e7d
 8005d38:	08005e7d 	.word	0x08005e7d
 8005d3c:	08005e7d 	.word	0x08005e7d
 8005d40:	08005e7d 	.word	0x08005e7d
 8005d44:	08005e7d 	.word	0x08005e7d
 8005d48:	08005e7d 	.word	0x08005e7d
 8005d4c:	08005e7d 	.word	0x08005e7d
 8005d50:	08005e7d 	.word	0x08005e7d
 8005d54:	08005dad 	.word	0x08005dad
 8005d58:	08005dd3 	.word	0x08005dd3
 8005d5c:	08005e7d 	.word	0x08005e7d
 8005d60:	08005e7d 	.word	0x08005e7d
 8005d64:	08005e7d 	.word	0x08005e7d
 8005d68:	08005e7d 	.word	0x08005e7d
 8005d6c:	08005e7d 	.word	0x08005e7d
 8005d70:	08005e7d 	.word	0x08005e7d
 8005d74:	08005e7d 	.word	0x08005e7d
 8005d78:	08005e7d 	.word	0x08005e7d
 8005d7c:	08005e7d 	.word	0x08005e7d
 8005d80:	08005e7d 	.word	0x08005e7d
 8005d84:	08005e7d 	.word	0x08005e7d
 8005d88:	08005e49 	.word	0x08005e49
 8005d8c:	08005e7d 	.word	0x08005e7d
 8005d90:	08005e7d 	.word	0x08005e7d
 8005d94:	08005e7d 	.word	0x08005e7d
 8005d98:	08005e7d 	.word	0x08005e7d
 8005d9c:	08005df9 	.word	0x08005df9
 8005da0:	08005e7d 	.word	0x08005e7d
 8005da4:	08005e7d 	.word	0x08005e7d
 8005da8:	08005e1f 	.word	0x08005e1f
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	1d19      	adds	r1, r3, #4
 8005db2:	687a      	ldr	r2, [r7, #4]
 8005db4:	6011      	str	r1, [r2, #0]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dbc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005dc0:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005dc4:	f107 0314 	add.w	r3, r7, #20
 8005dc8:	4611      	mov	r1, r2
 8005dca:	4618      	mov	r0, r3
 8005dcc:	f7ff fd1c 	bl	8005808 <_StoreChar>
        break;
 8005dd0:	e055      	b.n	8005e7e <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	1d19      	adds	r1, r3, #4
 8005dd8:	687a      	ldr	r2, [r7, #4]
 8005dda:	6011      	str	r1, [r2, #0]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005de0:	f107 0014 	add.w	r0, r7, #20
 8005de4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005de6:	9301      	str	r3, [sp, #4]
 8005de8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005dea:	9300      	str	r3, [sp, #0]
 8005dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005dee:	220a      	movs	r2, #10
 8005df0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005df2:	f7ff fe1b 	bl	8005a2c <_PrintInt>
        break;
 8005df6:	e042      	b.n	8005e7e <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	1d19      	adds	r1, r3, #4
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	6011      	str	r1, [r2, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e06:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e08:	f107 0014 	add.w	r0, r7, #20
 8005e0c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e0e:	9301      	str	r3, [sp, #4]
 8005e10:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e12:	9300      	str	r3, [sp, #0]
 8005e14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e16:	220a      	movs	r2, #10
 8005e18:	f7ff fd72 	bl	8005900 <_PrintUnsigned>
        break;
 8005e1c:	e02f      	b.n	8005e7e <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	1d19      	adds	r1, r3, #4
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	6011      	str	r1, [r2, #0]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e2c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e2e:	f107 0014 	add.w	r0, r7, #20
 8005e32:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e34:	9301      	str	r3, [sp, #4]
 8005e36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e38:	9300      	str	r3, [sp, #0]
 8005e3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e3c:	2210      	movs	r2, #16
 8005e3e:	f7ff fd5f 	bl	8005900 <_PrintUnsigned>
        break;
 8005e42:	e01c      	b.n	8005e7e <_VPrintTarget+0x332>
 8005e44:	2004c854 	.word	0x2004c854
      case 'p':
        v = va_arg(*pParamList, int);
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	1d19      	adds	r1, r3, #4
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	6011      	str	r1, [r2, #0]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e56:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e58:	f107 0014 	add.w	r0, r7, #20
 8005e5c:	2300      	movs	r3, #0
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	2308      	movs	r3, #8
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	2308      	movs	r3, #8
 8005e66:	2210      	movs	r2, #16
 8005e68:	f7ff fd4a 	bl	8005900 <_PrintUnsigned>
        break;
 8005e6c:	e007      	b.n	8005e7e <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e6e:	f107 0314 	add.w	r3, r7, #20
 8005e72:	2125      	movs	r1, #37	@ 0x25
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff fcc7 	bl	8005808 <_StoreChar>
        break;
 8005e7a:	e000      	b.n	8005e7e <_VPrintTarget+0x332>
      default:
        break;
 8005e7c:	bf00      	nop
      }
      sFormat++;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	3301      	adds	r3, #1
 8005e82:	60fb      	str	r3, [r7, #12]
 8005e84:	e007      	b.n	8005e96 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005e86:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005e8a:	f107 0314 	add.w	r3, r7, #20
 8005e8e:	4611      	mov	r1, r2
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fcb9 	bl	8005808 <_StoreChar>
    }
  } while (*sFormat);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	781b      	ldrb	r3, [r3, #0]
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	f47f ae72 	bne.w	8005b84 <_VPrintTarget+0x38>
 8005ea0:	e000      	b.n	8005ea4 <_VPrintTarget+0x358>
      break;
 8005ea2:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d041      	beq.n	8005f2e <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eac:	69fb      	ldr	r3, [r7, #28]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	643b      	str	r3, [r7, #64]	@ 0x40
 8005eb6:	6a3b      	ldr	r3, [r7, #32]
 8005eb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005eba:	e00b      	b.n	8005ed4 <_VPrintTarget+0x388>
 8005ebc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ebe:	b2da      	uxtb	r2, r3
 8005ec0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ec2:	1c59      	adds	r1, r3, #1
 8005ec4:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ec6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005eca:	b2d2      	uxtb	r2, r2
 8005ecc:	701a      	strb	r2, [r3, #0]
 8005ece:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed0:	09db      	lsrs	r3, r3, #7
 8005ed2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ed4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005ed6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ed8:	d8f0      	bhi.n	8005ebc <_VPrintTarget+0x370>
 8005eda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005edc:	1c5a      	adds	r2, r3, #1
 8005ede:	643a      	str	r2, [r7, #64]	@ 0x40
 8005ee0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005ee2:	b2d2      	uxtb	r2, r2
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ee8:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005eea:	69bb      	ldr	r3, [r7, #24]
 8005eec:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005eee:	2300      	movs	r3, #0
 8005ef0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef2:	e00b      	b.n	8005f0c <_VPrintTarget+0x3c0>
 8005ef4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ef6:	b2da      	uxtb	r2, r3
 8005ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005efa:	1c59      	adds	r1, r3, #1
 8005efc:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005efe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f02:	b2d2      	uxtb	r2, r2
 8005f04:	701a      	strb	r2, [r3, #0]
 8005f06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f08:	09db      	lsrs	r3, r3, #7
 8005f0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f10:	d8f0      	bhi.n	8005ef4 <_VPrintTarget+0x3a8>
 8005f12:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f14:	1c5a      	adds	r2, r3, #1
 8005f16:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f18:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f1a:	b2d2      	uxtb	r2, r2
 8005f1c:	701a      	strb	r2, [r3, #0]
 8005f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f20:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f22:	69fb      	ldr	r3, [r7, #28]
 8005f24:	69b9      	ldr	r1, [r7, #24]
 8005f26:	221a      	movs	r2, #26
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7ff fb85 	bl	8005638 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f30:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f34:	bf00      	nop
 8005f36:	3758      	adds	r7, #88	@ 0x58
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f3c:	b580      	push	{r7, lr}
 8005f3e:	b086      	sub	sp, #24
 8005f40:	af02      	add	r7, sp, #8
 8005f42:	60f8      	str	r0, [r7, #12]
 8005f44:	60b9      	str	r1, [r7, #8]
 8005f46:	607a      	str	r2, [r7, #4]
 8005f48:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f50:	4917      	ldr	r1, [pc, #92]	@ (8005fb0 <SEGGER_SYSVIEW_Init+0x74>)
 8005f52:	4818      	ldr	r0, [pc, #96]	@ (8005fb4 <SEGGER_SYSVIEW_Init+0x78>)
 8005f54:	f7ff f93e 	bl	80051d4 <SEGGER_RTT_AllocUpBuffer>
 8005f58:	4603      	mov	r3, r0
 8005f5a:	b2da      	uxtb	r2, r3
 8005f5c:	4b16      	ldr	r3, [pc, #88]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f5e:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f60:	4b15      	ldr	r3, [pc, #84]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f62:	785a      	ldrb	r2, [r3, #1]
 8005f64:	4b14      	ldr	r3, [pc, #80]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f66:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f68:	4b13      	ldr	r3, [pc, #76]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f6a:	7e1b      	ldrb	r3, [r3, #24]
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	2308      	movs	r3, #8
 8005f74:	4a11      	ldr	r2, [pc, #68]	@ (8005fbc <SEGGER_SYSVIEW_Init+0x80>)
 8005f76:	490f      	ldr	r1, [pc, #60]	@ (8005fb4 <SEGGER_SYSVIEW_Init+0x78>)
 8005f78:	f7ff f9b0 	bl	80052dc <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005f7c:	4b0e      	ldr	r3, [pc, #56]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f7e:	2200      	movs	r2, #0
 8005f80:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005f82:	4b0f      	ldr	r3, [pc, #60]	@ (8005fc0 <SEGGER_SYSVIEW_Init+0x84>)
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4a0c      	ldr	r2, [pc, #48]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f88:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005f8a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005f90:	4a09      	ldr	r2, [pc, #36]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005f96:	4a08      	ldr	r2, [pc, #32]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f98:	68bb      	ldr	r3, [r7, #8]
 8005f9a:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005f9c:	4a06      	ldr	r2, [pc, #24]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fa2:	4b05      	ldr	r3, [pc, #20]	@ (8005fb8 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fa8:	bf00      	nop
 8005faa:	3710      	adds	r7, #16
 8005fac:	46bd      	mov	sp, r7
 8005fae:	bd80      	pop	{r7, pc}
 8005fb0:	2004b81c 	.word	0x2004b81c
 8005fb4:	08007924 	.word	0x08007924
 8005fb8:	2004c824 	.word	0x2004c824
 8005fbc:	2004c81c 	.word	0x2004c81c
 8005fc0:	e0001004 	.word	0xe0001004

08005fc4 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005fc4:	b480      	push	{r7}
 8005fc6:	b083      	sub	sp, #12
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005fcc:	4a04      	ldr	r2, [pc, #16]	@ (8005fe0 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6113      	str	r3, [r2, #16]
}
 8005fd2:	bf00      	nop
 8005fd4:	370c      	adds	r7, #12
 8005fd6:	46bd      	mov	sp, r7
 8005fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fdc:	4770      	bx	lr
 8005fde:	bf00      	nop
 8005fe0:	2004c824 	.word	0x2004c824

08005fe4 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005fec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ff0:	f04f 0120 	mov.w	r1, #32
 8005ff4:	f381 8811 	msr	BASEPRI, r1
 8005ff8:	60fb      	str	r3, [r7, #12]
 8005ffa:	4808      	ldr	r0, [pc, #32]	@ (800601c <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005ffc:	f7ff fa2b 	bl	8005456 <_PreparePacket>
 8006000:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8006002:	687a      	ldr	r2, [r7, #4]
 8006004:	68b9      	ldr	r1, [r7, #8]
 8006006:	68b8      	ldr	r0, [r7, #8]
 8006008:	f7ff fb16 	bl	8005638 <_SendPacket>
  RECORD_END();
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	f383 8811 	msr	BASEPRI, r3
}
 8006012:	bf00      	nop
 8006014:	3710      	adds	r7, #16
 8006016:	46bd      	mov	sp, r7
 8006018:	bd80      	pop	{r7, pc}
 800601a:	bf00      	nop
 800601c:	2004c854 	.word	0x2004c854

08006020 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8006020:	b580      	push	{r7, lr}
 8006022:	b088      	sub	sp, #32
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
 8006028:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800602a:	f3ef 8311 	mrs	r3, BASEPRI
 800602e:	f04f 0120 	mov.w	r1, #32
 8006032:	f381 8811 	msr	BASEPRI, r1
 8006036:	617b      	str	r3, [r7, #20]
 8006038:	4816      	ldr	r0, [pc, #88]	@ (8006094 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800603a:	f7ff fa0c 	bl	8005456 <_PreparePacket>
 800603e:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006040:	693b      	ldr	r3, [r7, #16]
 8006042:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	61fb      	str	r3, [r7, #28]
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	61bb      	str	r3, [r7, #24]
 800604c:	e00b      	b.n	8006066 <SEGGER_SYSVIEW_RecordU32+0x46>
 800604e:	69bb      	ldr	r3, [r7, #24]
 8006050:	b2da      	uxtb	r2, r3
 8006052:	69fb      	ldr	r3, [r7, #28]
 8006054:	1c59      	adds	r1, r3, #1
 8006056:	61f9      	str	r1, [r7, #28]
 8006058:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800605c:	b2d2      	uxtb	r2, r2
 800605e:	701a      	strb	r2, [r3, #0]
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	09db      	lsrs	r3, r3, #7
 8006064:	61bb      	str	r3, [r7, #24]
 8006066:	69bb      	ldr	r3, [r7, #24]
 8006068:	2b7f      	cmp	r3, #127	@ 0x7f
 800606a:	d8f0      	bhi.n	800604e <SEGGER_SYSVIEW_RecordU32+0x2e>
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	1c5a      	adds	r2, r3, #1
 8006070:	61fa      	str	r2, [r7, #28]
 8006072:	69ba      	ldr	r2, [r7, #24]
 8006074:	b2d2      	uxtb	r2, r2
 8006076:	701a      	strb	r2, [r3, #0]
 8006078:	69fb      	ldr	r3, [r7, #28]
 800607a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	68f9      	ldr	r1, [r7, #12]
 8006080:	6938      	ldr	r0, [r7, #16]
 8006082:	f7ff fad9 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	f383 8811 	msr	BASEPRI, r3
}
 800608c:	bf00      	nop
 800608e:	3720      	adds	r7, #32
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}
 8006094:	2004c854 	.word	0x2004c854

08006098 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8006098:	b580      	push	{r7, lr}
 800609a:	b08c      	sub	sp, #48	@ 0x30
 800609c:	af00      	add	r7, sp, #0
 800609e:	60f8      	str	r0, [r7, #12]
 80060a0:	60b9      	str	r1, [r7, #8]
 80060a2:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060a4:	f3ef 8311 	mrs	r3, BASEPRI
 80060a8:	f04f 0120 	mov.w	r1, #32
 80060ac:	f381 8811 	msr	BASEPRI, r1
 80060b0:	61fb      	str	r3, [r7, #28]
 80060b2:	4825      	ldr	r0, [pc, #148]	@ (8006148 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060b4:	f7ff f9cf 	bl	8005456 <_PreparePacket>
 80060b8:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060be:	697b      	ldr	r3, [r7, #20]
 80060c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060c6:	e00b      	b.n	80060e0 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ca:	b2da      	uxtb	r2, r3
 80060cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060ce:	1c59      	adds	r1, r3, #1
 80060d0:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80060d6:	b2d2      	uxtb	r2, r2
 80060d8:	701a      	strb	r2, [r3, #0]
 80060da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060dc:	09db      	lsrs	r3, r3, #7
 80060de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80060e4:	d8f0      	bhi.n	80060c8 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 80060e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060e8:	1c5a      	adds	r2, r3, #1
 80060ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80060ec:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80060ee:	b2d2      	uxtb	r2, r2
 80060f0:	701a      	strb	r2, [r3, #0]
 80060f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060f4:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80060f6:	697b      	ldr	r3, [r7, #20]
 80060f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	623b      	str	r3, [r7, #32]
 80060fe:	e00b      	b.n	8006118 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8006100:	6a3b      	ldr	r3, [r7, #32]
 8006102:	b2da      	uxtb	r2, r3
 8006104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006106:	1c59      	adds	r1, r3, #1
 8006108:	6279      	str	r1, [r7, #36]	@ 0x24
 800610a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800610e:	b2d2      	uxtb	r2, r2
 8006110:	701a      	strb	r2, [r3, #0]
 8006112:	6a3b      	ldr	r3, [r7, #32]
 8006114:	09db      	lsrs	r3, r3, #7
 8006116:	623b      	str	r3, [r7, #32]
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	2b7f      	cmp	r3, #127	@ 0x7f
 800611c:	d8f0      	bhi.n	8006100 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800611e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006120:	1c5a      	adds	r2, r3, #1
 8006122:	627a      	str	r2, [r7, #36]	@ 0x24
 8006124:	6a3a      	ldr	r2, [r7, #32]
 8006126:	b2d2      	uxtb	r2, r2
 8006128:	701a      	strb	r2, [r3, #0]
 800612a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800612c:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800612e:	68fa      	ldr	r2, [r7, #12]
 8006130:	6979      	ldr	r1, [r7, #20]
 8006132:	69b8      	ldr	r0, [r7, #24]
 8006134:	f7ff fa80 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006138:	69fb      	ldr	r3, [r7, #28]
 800613a:	f383 8811 	msr	BASEPRI, r3
}
 800613e:	bf00      	nop
 8006140:	3730      	adds	r7, #48	@ 0x30
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	2004c854 	.word	0x2004c854

0800614c <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 800614c:	b580      	push	{r7, lr}
 800614e:	b08e      	sub	sp, #56	@ 0x38
 8006150:	af00      	add	r7, sp, #0
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
 8006158:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 800615a:	f3ef 8311 	mrs	r3, BASEPRI
 800615e:	f04f 0120 	mov.w	r1, #32
 8006162:	f381 8811 	msr	BASEPRI, r1
 8006166:	61fb      	str	r3, [r7, #28]
 8006168:	4832      	ldr	r0, [pc, #200]	@ (8006234 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 800616a:	f7ff f974 	bl	8005456 <_PreparePacket>
 800616e:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	637b      	str	r3, [r7, #52]	@ 0x34
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	633b      	str	r3, [r7, #48]	@ 0x30
 800617c:	e00b      	b.n	8006196 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 800617e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006180:	b2da      	uxtb	r2, r3
 8006182:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006184:	1c59      	adds	r1, r3, #1
 8006186:	6379      	str	r1, [r7, #52]	@ 0x34
 8006188:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800618c:	b2d2      	uxtb	r2, r2
 800618e:	701a      	strb	r2, [r3, #0]
 8006190:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006192:	09db      	lsrs	r3, r3, #7
 8006194:	633b      	str	r3, [r7, #48]	@ 0x30
 8006196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006198:	2b7f      	cmp	r3, #127	@ 0x7f
 800619a:	d8f0      	bhi.n	800617e <SEGGER_SYSVIEW_RecordU32x3+0x32>
 800619c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	637a      	str	r2, [r7, #52]	@ 0x34
 80061a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061a4:	b2d2      	uxtb	r2, r2
 80061a6:	701a      	strb	r2, [r3, #0]
 80061a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061aa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061b4:	e00b      	b.n	80061ce <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061b8:	b2da      	uxtb	r2, r3
 80061ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061bc:	1c59      	adds	r1, r3, #1
 80061be:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061c0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c4:	b2d2      	uxtb	r2, r2
 80061c6:	701a      	strb	r2, [r3, #0]
 80061c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ca:	09db      	lsrs	r3, r3, #7
 80061cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d2:	d8f0      	bhi.n	80061b6 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 80061d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061d6:	1c5a      	adds	r2, r3, #1
 80061d8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80061da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80061dc:	b2d2      	uxtb	r2, r2
 80061de:	701a      	strb	r2, [r3, #0]
 80061e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80061e8:	683b      	ldr	r3, [r7, #0]
 80061ea:	623b      	str	r3, [r7, #32]
 80061ec:	e00b      	b.n	8006206 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 80061ee:	6a3b      	ldr	r3, [r7, #32]
 80061f0:	b2da      	uxtb	r2, r3
 80061f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061f4:	1c59      	adds	r1, r3, #1
 80061f6:	6279      	str	r1, [r7, #36]	@ 0x24
 80061f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061fc:	b2d2      	uxtb	r2, r2
 80061fe:	701a      	strb	r2, [r3, #0]
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	09db      	lsrs	r3, r3, #7
 8006204:	623b      	str	r3, [r7, #32]
 8006206:	6a3b      	ldr	r3, [r7, #32]
 8006208:	2b7f      	cmp	r3, #127	@ 0x7f
 800620a:	d8f0      	bhi.n	80061ee <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 800620c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800620e:	1c5a      	adds	r2, r3, #1
 8006210:	627a      	str	r2, [r7, #36]	@ 0x24
 8006212:	6a3a      	ldr	r2, [r7, #32]
 8006214:	b2d2      	uxtb	r2, r2
 8006216:	701a      	strb	r2, [r3, #0]
 8006218:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800621c:	68fa      	ldr	r2, [r7, #12]
 800621e:	6979      	ldr	r1, [r7, #20]
 8006220:	69b8      	ldr	r0, [r7, #24]
 8006222:	f7ff fa09 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	f383 8811 	msr	BASEPRI, r3
}
 800622c:	bf00      	nop
 800622e:	3738      	adds	r7, #56	@ 0x38
 8006230:	46bd      	mov	sp, r7
 8006232:	bd80      	pop	{r7, pc}
 8006234:	2004c854 	.word	0x2004c854

08006238 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b090      	sub	sp, #64	@ 0x40
 800623c:	af00      	add	r7, sp, #0
 800623e:	60f8      	str	r0, [r7, #12]
 8006240:	60b9      	str	r1, [r7, #8]
 8006242:	607a      	str	r2, [r7, #4]
 8006244:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006246:	f3ef 8311 	mrs	r3, BASEPRI
 800624a:	f04f 0120 	mov.w	r1, #32
 800624e:	f381 8811 	msr	BASEPRI, r1
 8006252:	61fb      	str	r3, [r7, #28]
 8006254:	4840      	ldr	r0, [pc, #256]	@ (8006358 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006256:	f7ff f8fe 	bl	8005456 <_PreparePacket>
 800625a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800625c:	69bb      	ldr	r3, [r7, #24]
 800625e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8006260:	697b      	ldr	r3, [r7, #20]
 8006262:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006268:	e00b      	b.n	8006282 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 800626a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800626c:	b2da      	uxtb	r2, r3
 800626e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006270:	1c59      	adds	r1, r3, #1
 8006272:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006274:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006278:	b2d2      	uxtb	r2, r2
 800627a:	701a      	strb	r2, [r3, #0]
 800627c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800627e:	09db      	lsrs	r3, r3, #7
 8006280:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006282:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006284:	2b7f      	cmp	r3, #127	@ 0x7f
 8006286:	d8f0      	bhi.n	800626a <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8006288:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800628a:	1c5a      	adds	r2, r3, #1
 800628c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800628e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006290:	b2d2      	uxtb	r2, r2
 8006292:	701a      	strb	r2, [r3, #0]
 8006294:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006296:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006298:	697b      	ldr	r3, [r7, #20]
 800629a:	637b      	str	r3, [r7, #52]	@ 0x34
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	633b      	str	r3, [r7, #48]	@ 0x30
 80062a0:	e00b      	b.n	80062ba <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062a4:	b2da      	uxtb	r2, r3
 80062a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062a8:	1c59      	adds	r1, r3, #1
 80062aa:	6379      	str	r1, [r7, #52]	@ 0x34
 80062ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062b0:	b2d2      	uxtb	r2, r2
 80062b2:	701a      	strb	r2, [r3, #0]
 80062b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062b6:	09db      	lsrs	r3, r3, #7
 80062b8:	633b      	str	r3, [r7, #48]	@ 0x30
 80062ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062be:	d8f0      	bhi.n	80062a2 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062c2:	1c5a      	adds	r2, r3, #1
 80062c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80062c6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062c8:	b2d2      	uxtb	r2, r2
 80062ca:	701a      	strb	r2, [r3, #0]
 80062cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ce:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062d8:	e00b      	b.n	80062f2 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 80062da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062dc:	b2da      	uxtb	r2, r3
 80062de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062e0:	1c59      	adds	r1, r3, #1
 80062e2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80062e4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062e8:	b2d2      	uxtb	r2, r2
 80062ea:	701a      	strb	r2, [r3, #0]
 80062ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ee:	09db      	lsrs	r3, r3, #7
 80062f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80062f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80062f6:	d8f0      	bhi.n	80062da <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 80062f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062fa:	1c5a      	adds	r2, r3, #1
 80062fc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80062fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006300:	b2d2      	uxtb	r2, r2
 8006302:	701a      	strb	r2, [r3, #0]
 8006304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006306:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006308:	697b      	ldr	r3, [r7, #20]
 800630a:	627b      	str	r3, [r7, #36]	@ 0x24
 800630c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800630e:	623b      	str	r3, [r7, #32]
 8006310:	e00b      	b.n	800632a <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8006312:	6a3b      	ldr	r3, [r7, #32]
 8006314:	b2da      	uxtb	r2, r3
 8006316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006318:	1c59      	adds	r1, r3, #1
 800631a:	6279      	str	r1, [r7, #36]	@ 0x24
 800631c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006320:	b2d2      	uxtb	r2, r2
 8006322:	701a      	strb	r2, [r3, #0]
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	09db      	lsrs	r3, r3, #7
 8006328:	623b      	str	r3, [r7, #32]
 800632a:	6a3b      	ldr	r3, [r7, #32]
 800632c:	2b7f      	cmp	r3, #127	@ 0x7f
 800632e:	d8f0      	bhi.n	8006312 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8006330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006332:	1c5a      	adds	r2, r3, #1
 8006334:	627a      	str	r2, [r7, #36]	@ 0x24
 8006336:	6a3a      	ldr	r2, [r7, #32]
 8006338:	b2d2      	uxtb	r2, r2
 800633a:	701a      	strb	r2, [r3, #0]
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	6979      	ldr	r1, [r7, #20]
 8006344:	69b8      	ldr	r0, [r7, #24]
 8006346:	f7ff f977 	bl	8005638 <_SendPacket>
  RECORD_END();
 800634a:	69fb      	ldr	r3, [r7, #28]
 800634c:	f383 8811 	msr	BASEPRI, r3
}
 8006350:	bf00      	nop
 8006352:	3740      	adds	r7, #64	@ 0x40
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}
 8006358:	2004c854 	.word	0x2004c854

0800635c <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800635c:	b580      	push	{r7, lr}
 800635e:	b08c      	sub	sp, #48	@ 0x30
 8006360:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8006362:	4b59      	ldr	r3, [pc, #356]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006364:	2201      	movs	r2, #1
 8006366:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8006368:	f3ef 8311 	mrs	r3, BASEPRI
 800636c:	f04f 0120 	mov.w	r1, #32
 8006370:	f381 8811 	msr	BASEPRI, r1
 8006374:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8006376:	4b54      	ldr	r3, [pc, #336]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006378:	785b      	ldrb	r3, [r3, #1]
 800637a:	220a      	movs	r2, #10
 800637c:	4953      	ldr	r1, [pc, #332]	@ (80064cc <SEGGER_SYSVIEW_Start+0x170>)
 800637e:	4618      	mov	r0, r3
 8006380:	f7f9 ff4e 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
 800638a:	f7fe fe35 	bl	8004ff8 <HIF_UART_EnableTXEInterrupt>
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800638e:	200a      	movs	r0, #10
 8006390:	f7ff fe28 	bl	8005fe4 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006394:	f3ef 8311 	mrs	r3, BASEPRI
 8006398:	f04f 0120 	mov.w	r1, #32
 800639c:	f381 8811 	msr	BASEPRI, r1
 80063a0:	60bb      	str	r3, [r7, #8]
 80063a2:	484b      	ldr	r0, [pc, #300]	@ (80064d0 <SEGGER_SYSVIEW_Start+0x174>)
 80063a4:	f7ff f857 	bl	8005456 <_PreparePacket>
 80063a8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80063ae:	683b      	ldr	r3, [r7, #0]
 80063b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063b2:	4b45      	ldr	r3, [pc, #276]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_Start+0x76>
 80063ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80063c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80063d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_Start+0x5e>
 80063d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80063de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80063e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80063e8:	683b      	ldr	r3, [r7, #0]
 80063ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80063ec:	4b36      	ldr	r3, [pc, #216]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	623b      	str	r3, [r7, #32]
 80063f2:	e00b      	b.n	800640c <SEGGER_SYSVIEW_Start+0xb0>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	b2da      	uxtb	r2, r3
 80063f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80063fa:	1c59      	adds	r1, r3, #1
 80063fc:	6279      	str	r1, [r7, #36]	@ 0x24
 80063fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006402:	b2d2      	uxtb	r2, r2
 8006404:	701a      	strb	r2, [r3, #0]
 8006406:	6a3b      	ldr	r3, [r7, #32]
 8006408:	09db      	lsrs	r3, r3, #7
 800640a:	623b      	str	r3, [r7, #32]
 800640c:	6a3b      	ldr	r3, [r7, #32]
 800640e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006410:	d8f0      	bhi.n	80063f4 <SEGGER_SYSVIEW_Start+0x98>
 8006412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006414:	1c5a      	adds	r2, r3, #1
 8006416:	627a      	str	r2, [r7, #36]	@ 0x24
 8006418:	6a3a      	ldr	r2, [r7, #32]
 800641a:	b2d2      	uxtb	r2, r2
 800641c:	701a      	strb	r2, [r3, #0]
 800641e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006420:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	61fb      	str	r3, [r7, #28]
 8006426:	4b28      	ldr	r3, [pc, #160]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	61bb      	str	r3, [r7, #24]
 800642c:	e00b      	b.n	8006446 <SEGGER_SYSVIEW_Start+0xea>
 800642e:	69bb      	ldr	r3, [r7, #24]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	69fb      	ldr	r3, [r7, #28]
 8006434:	1c59      	adds	r1, r3, #1
 8006436:	61f9      	str	r1, [r7, #28]
 8006438:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800643c:	b2d2      	uxtb	r2, r2
 800643e:	701a      	strb	r2, [r3, #0]
 8006440:	69bb      	ldr	r3, [r7, #24]
 8006442:	09db      	lsrs	r3, r3, #7
 8006444:	61bb      	str	r3, [r7, #24]
 8006446:	69bb      	ldr	r3, [r7, #24]
 8006448:	2b7f      	cmp	r3, #127	@ 0x7f
 800644a:	d8f0      	bhi.n	800642e <SEGGER_SYSVIEW_Start+0xd2>
 800644c:	69fb      	ldr	r3, [r7, #28]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	61fa      	str	r2, [r7, #28]
 8006452:	69ba      	ldr	r2, [r7, #24]
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	701a      	strb	r2, [r3, #0]
 8006458:	69fb      	ldr	r3, [r7, #28]
 800645a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800645c:	683b      	ldr	r3, [r7, #0]
 800645e:	617b      	str	r3, [r7, #20]
 8006460:	2300      	movs	r3, #0
 8006462:	613b      	str	r3, [r7, #16]
 8006464:	e00b      	b.n	800647e <SEGGER_SYSVIEW_Start+0x122>
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	b2da      	uxtb	r2, r3
 800646a:	697b      	ldr	r3, [r7, #20]
 800646c:	1c59      	adds	r1, r3, #1
 800646e:	6179      	str	r1, [r7, #20]
 8006470:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006474:	b2d2      	uxtb	r2, r2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	693b      	ldr	r3, [r7, #16]
 800647a:	09db      	lsrs	r3, r3, #7
 800647c:	613b      	str	r3, [r7, #16]
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b7f      	cmp	r3, #127	@ 0x7f
 8006482:	d8f0      	bhi.n	8006466 <SEGGER_SYSVIEW_Start+0x10a>
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	1c5a      	adds	r2, r3, #1
 8006488:	617a      	str	r2, [r7, #20]
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	b2d2      	uxtb	r2, r2
 800648e:	701a      	strb	r2, [r3, #0]
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006494:	2218      	movs	r2, #24
 8006496:	6839      	ldr	r1, [r7, #0]
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f7ff f8cd 	bl	8005638 <_SendPacket>
      RECORD_END();
 800649e:	68bb      	ldr	r3, [r7, #8]
 80064a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 80064a4:	4b08      	ldr	r3, [pc, #32]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80064a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d002      	beq.n	80064b2 <SEGGER_SYSVIEW_Start+0x156>
      _SYSVIEW_Globals.pfSendSysDesc();
 80064ac:	4b06      	ldr	r3, [pc, #24]	@ (80064c8 <SEGGER_SYSVIEW_Start+0x16c>)
 80064ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 80064b2:	f000 f9eb 	bl	800688c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 80064b6:	f000 f9b1 	bl	800681c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 80064ba:	f000 fc23 	bl	8006d04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 80064be:	bf00      	nop
 80064c0:	3730      	adds	r7, #48	@ 0x30
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
 80064c6:	bf00      	nop
 80064c8:	2004c824 	.word	0x2004c824
 80064cc:	0800794c 	.word	0x0800794c
 80064d0:	2004c854 	.word	0x2004c854

080064d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b082      	sub	sp, #8
 80064d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80064da:	f3ef 8311 	mrs	r3, BASEPRI
 80064de:	f04f 0120 	mov.w	r1, #32
 80064e2:	f381 8811 	msr	BASEPRI, r1
 80064e6:	607b      	str	r3, [r7, #4]
 80064e8:	480b      	ldr	r0, [pc, #44]	@ (8006518 <SEGGER_SYSVIEW_Stop+0x44>)
 80064ea:	f7fe ffb4 	bl	8005456 <_PreparePacket>
 80064ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 80064f0:	4b0a      	ldr	r3, [pc, #40]	@ (800651c <SEGGER_SYSVIEW_Stop+0x48>)
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d007      	beq.n	8006508 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 80064f8:	220b      	movs	r2, #11
 80064fa:	6839      	ldr	r1, [r7, #0]
 80064fc:	6838      	ldr	r0, [r7, #0]
 80064fe:	f7ff f89b 	bl	8005638 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006502:	4b06      	ldr	r3, [pc, #24]	@ (800651c <SEGGER_SYSVIEW_Stop+0x48>)
 8006504:	2200      	movs	r2, #0
 8006506:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f383 8811 	msr	BASEPRI, r3
}
 800650e:	bf00      	nop
 8006510:	3708      	adds	r7, #8
 8006512:	46bd      	mov	sp, r7
 8006514:	bd80      	pop	{r7, pc}
 8006516:	bf00      	nop
 8006518:	2004c854 	.word	0x2004c854
 800651c:	2004c824 	.word	0x2004c824

08006520 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8006520:	b580      	push	{r7, lr}
 8006522:	b08c      	sub	sp, #48	@ 0x30
 8006524:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006526:	f3ef 8311 	mrs	r3, BASEPRI
 800652a:	f04f 0120 	mov.w	r1, #32
 800652e:	f381 8811 	msr	BASEPRI, r1
 8006532:	60fb      	str	r3, [r7, #12]
 8006534:	4845      	ldr	r0, [pc, #276]	@ (800664c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8006536:	f7fe ff8e 	bl	8005456 <_PreparePacket>
 800653a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006544:	4b42      	ldr	r3, [pc, #264]	@ (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006546:	685b      	ldr	r3, [r3, #4]
 8006548:	62bb      	str	r3, [r7, #40]	@ 0x28
 800654a:	e00b      	b.n	8006564 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800654c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006552:	1c59      	adds	r1, r3, #1
 8006554:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006556:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800655a:	b2d2      	uxtb	r2, r2
 800655c:	701a      	strb	r2, [r3, #0]
 800655e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006560:	09db      	lsrs	r3, r3, #7
 8006562:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006564:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006566:	2b7f      	cmp	r3, #127	@ 0x7f
 8006568:	d8f0      	bhi.n	800654c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800656a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656c:	1c5a      	adds	r2, r3, #1
 800656e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006570:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006572:	b2d2      	uxtb	r2, r2
 8006574:	701a      	strb	r2, [r3, #0]
 8006576:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006578:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	627b      	str	r3, [r7, #36]	@ 0x24
 800657e:	4b34      	ldr	r3, [pc, #208]	@ (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006580:	689b      	ldr	r3, [r3, #8]
 8006582:	623b      	str	r3, [r7, #32]
 8006584:	e00b      	b.n	800659e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	b2da      	uxtb	r2, r3
 800658a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800658c:	1c59      	adds	r1, r3, #1
 800658e:	6279      	str	r1, [r7, #36]	@ 0x24
 8006590:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006594:	b2d2      	uxtb	r2, r2
 8006596:	701a      	strb	r2, [r3, #0]
 8006598:	6a3b      	ldr	r3, [r7, #32]
 800659a:	09db      	lsrs	r3, r3, #7
 800659c:	623b      	str	r3, [r7, #32]
 800659e:	6a3b      	ldr	r3, [r7, #32]
 80065a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80065a2:	d8f0      	bhi.n	8006586 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	1c5a      	adds	r2, r3, #1
 80065a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80065aa:	6a3a      	ldr	r2, [r7, #32]
 80065ac:	b2d2      	uxtb	r2, r2
 80065ae:	701a      	strb	r2, [r3, #0]
 80065b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	61fb      	str	r3, [r7, #28]
 80065b8:	4b25      	ldr	r3, [pc, #148]	@ (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	61bb      	str	r3, [r7, #24]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 80065c0:	69bb      	ldr	r3, [r7, #24]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	61f9      	str	r1, [r7, #28]
 80065ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	61bb      	str	r3, [r7, #24]
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	2b7f      	cmp	r3, #127	@ 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	61fa      	str	r2, [r7, #28]
 80065e4:	69ba      	ldr	r2, [r7, #24]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	2300      	movs	r3, #0
 80065f4:	613b      	str	r3, [r7, #16]
 80065f6:	e00b      	b.n	8006610 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	b2da      	uxtb	r2, r3
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	1c59      	adds	r1, r3, #1
 8006600:	6179      	str	r1, [r7, #20]
 8006602:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006606:	b2d2      	uxtb	r2, r2
 8006608:	701a      	strb	r2, [r3, #0]
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	09db      	lsrs	r3, r3, #7
 800660e:	613b      	str	r3, [r7, #16]
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	2b7f      	cmp	r3, #127	@ 0x7f
 8006614:	d8f0      	bhi.n	80065f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	1c5a      	adds	r2, r3, #1
 800661a:	617a      	str	r2, [r7, #20]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	b2d2      	uxtb	r2, r2
 8006620:	701a      	strb	r2, [r3, #0]
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006626:	2218      	movs	r2, #24
 8006628:	6879      	ldr	r1, [r7, #4]
 800662a:	68b8      	ldr	r0, [r7, #8]
 800662c:	f7ff f804 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006636:	4b06      	ldr	r3, [pc, #24]	@ (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800663a:	2b00      	cmp	r3, #0
 800663c:	d002      	beq.n	8006644 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800663e:	4b04      	ldr	r3, [pc, #16]	@ (8006650 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006640:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006642:	4798      	blx	r3
  }
}
 8006644:	bf00      	nop
 8006646:	3730      	adds	r7, #48	@ 0x30
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	2004c854 	.word	0x2004c854
 8006650:	2004c824 	.word	0x2004c824

08006654 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8006654:	b580      	push	{r7, lr}
 8006656:	b092      	sub	sp, #72	@ 0x48
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800665c:	f3ef 8311 	mrs	r3, BASEPRI
 8006660:	f04f 0120 	mov.w	r1, #32
 8006664:	f381 8811 	msr	BASEPRI, r1
 8006668:	617b      	str	r3, [r7, #20]
 800666a:	486a      	ldr	r0, [pc, #424]	@ (8006814 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800666c:	f7fe fef3 	bl	8005456 <_PreparePacket>
 8006670:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	647b      	str	r3, [r7, #68]	@ 0x44
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681a      	ldr	r2, [r3, #0]
 800667e:	4b66      	ldr	r3, [pc, #408]	@ (8006818 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	1ad3      	subs	r3, r2, r3
 8006684:	643b      	str	r3, [r7, #64]	@ 0x40
 8006686:	e00b      	b.n	80066a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8006688:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800668a:	b2da      	uxtb	r2, r3
 800668c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800668e:	1c59      	adds	r1, r3, #1
 8006690:	6479      	str	r1, [r7, #68]	@ 0x44
 8006692:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006696:	b2d2      	uxtb	r2, r2
 8006698:	701a      	strb	r2, [r3, #0]
 800669a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800669c:	09db      	lsrs	r3, r3, #7
 800669e:	643b      	str	r3, [r7, #64]	@ 0x40
 80066a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80066a4:	d8f0      	bhi.n	8006688 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 80066a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066a8:	1c5a      	adds	r2, r3, #1
 80066aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80066ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066ae:	b2d2      	uxtb	r2, r2
 80066b0:	701a      	strb	r2, [r3, #0]
 80066b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80066b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	689b      	ldr	r3, [r3, #8]
 80066be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066c0:	e00b      	b.n	80066da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 80066c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066c4:	b2da      	uxtb	r2, r3
 80066c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066c8:	1c59      	adds	r1, r3, #1
 80066ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80066cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066d0:	b2d2      	uxtb	r2, r2
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066d6:	09db      	lsrs	r3, r3, #7
 80066d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80066da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066dc:	2b7f      	cmp	r3, #127	@ 0x7f
 80066de:	d8f0      	bhi.n	80066c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 80066e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e2:	1c5a      	adds	r2, r3, #1
 80066e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80066e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80066e8:	b2d2      	uxtb	r2, r2
 80066ea:	701a      	strb	r2, [r3, #0]
 80066ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	2220      	movs	r2, #32
 80066f6:	4619      	mov	r1, r3
 80066f8:	68f8      	ldr	r0, [r7, #12]
 80066fa:	f7fe fe5f 	bl	80053bc <_EncodeStr>
 80066fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006700:	2209      	movs	r2, #9
 8006702:	68f9      	ldr	r1, [r7, #12]
 8006704:	6938      	ldr	r0, [r7, #16]
 8006706:	f7fe ff97 	bl	8005638 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800670a:	693b      	ldr	r3, [r7, #16]
 800670c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	637b      	str	r3, [r7, #52]	@ 0x34
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b40      	ldr	r3, [pc, #256]	@ (8006818 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	1ad3      	subs	r3, r2, r3
 800671c:	633b      	str	r3, [r7, #48]	@ 0x30
 800671e:	e00b      	b.n	8006738 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8006720:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006722:	b2da      	uxtb	r2, r3
 8006724:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006726:	1c59      	adds	r1, r3, #1
 8006728:	6379      	str	r1, [r7, #52]	@ 0x34
 800672a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800672e:	b2d2      	uxtb	r2, r2
 8006730:	701a      	strb	r2, [r3, #0]
 8006732:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006734:	09db      	lsrs	r3, r3, #7
 8006736:	633b      	str	r3, [r7, #48]	@ 0x30
 8006738:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800673a:	2b7f      	cmp	r3, #127	@ 0x7f
 800673c:	d8f0      	bhi.n	8006720 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800673e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	637a      	str	r2, [r7, #52]	@ 0x34
 8006744:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006746:	b2d2      	uxtb	r2, r2
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800674c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006758:	e00b      	b.n	8006772 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800675a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675c:	b2da      	uxtb	r2, r3
 800675e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006760:	1c59      	adds	r1, r3, #1
 8006762:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006764:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800676e:	09db      	lsrs	r3, r3, #7
 8006770:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006774:	2b7f      	cmp	r3, #127	@ 0x7f
 8006776:	d8f0      	bhi.n	800675a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800677a:	1c5a      	adds	r2, r3, #1
 800677c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800677e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006780:	b2d2      	uxtb	r2, r2
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006786:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	627b      	str	r3, [r7, #36]	@ 0x24
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	623b      	str	r3, [r7, #32]
 8006792:	e00b      	b.n	80067ac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006794:	6a3b      	ldr	r3, [r7, #32]
 8006796:	b2da      	uxtb	r2, r3
 8006798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800679a:	1c59      	adds	r1, r3, #1
 800679c:	6279      	str	r1, [r7, #36]	@ 0x24
 800679e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	6a3b      	ldr	r3, [r7, #32]
 80067a8:	09db      	lsrs	r3, r3, #7
 80067aa:	623b      	str	r3, [r7, #32]
 80067ac:	6a3b      	ldr	r3, [r7, #32]
 80067ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80067b0:	d8f0      	bhi.n	8006794 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 80067b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b4:	1c5a      	adds	r2, r3, #1
 80067b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80067b8:	6a3a      	ldr	r2, [r7, #32]
 80067ba:	b2d2      	uxtb	r2, r2
 80067bc:	701a      	strb	r2, [r3, #0]
 80067be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	61fb      	str	r3, [r7, #28]
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
 80067ca:	e00b      	b.n	80067e4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 80067cc:	69bb      	ldr	r3, [r7, #24]
 80067ce:	b2da      	uxtb	r2, r3
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	1c59      	adds	r1, r3, #1
 80067d4:	61f9      	str	r1, [r7, #28]
 80067d6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	701a      	strb	r2, [r3, #0]
 80067de:	69bb      	ldr	r3, [r7, #24]
 80067e0:	09db      	lsrs	r3, r3, #7
 80067e2:	61bb      	str	r3, [r7, #24]
 80067e4:	69bb      	ldr	r3, [r7, #24]
 80067e6:	2b7f      	cmp	r3, #127	@ 0x7f
 80067e8:	d8f0      	bhi.n	80067cc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	1c5a      	adds	r2, r3, #1
 80067ee:	61fa      	str	r2, [r7, #28]
 80067f0:	69ba      	ldr	r2, [r7, #24]
 80067f2:	b2d2      	uxtb	r2, r2
 80067f4:	701a      	strb	r2, [r3, #0]
 80067f6:	69fb      	ldr	r3, [r7, #28]
 80067f8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 80067fa:	2215      	movs	r2, #21
 80067fc:	68f9      	ldr	r1, [r7, #12]
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f7fe ff1a 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	f383 8811 	msr	BASEPRI, r3
}
 800680a:	bf00      	nop
 800680c:	3748      	adds	r7, #72	@ 0x48
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	2004c854 	.word	0x2004c854
 8006818:	2004c824 	.word	0x2004c824

0800681c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800681c:	b580      	push	{r7, lr}
 800681e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 8006820:	4b07      	ldr	r3, [pc, #28]	@ (8006840 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d008      	beq.n	800683a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 8006828:	4b05      	ldr	r3, [pc, #20]	@ (8006840 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800682a:	6a1b      	ldr	r3, [r3, #32]
 800682c:	685b      	ldr	r3, [r3, #4]
 800682e:	2b00      	cmp	r3, #0
 8006830:	d003      	beq.n	800683a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 8006832:	4b03      	ldr	r3, [pc, #12]	@ (8006840 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 8006834:	6a1b      	ldr	r3, [r3, #32]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	4798      	blx	r3
  }
}
 800683a:	bf00      	nop
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	2004c824 	.word	0x2004c824

08006844 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 8006844:	b580      	push	{r7, lr}
 8006846:	b086      	sub	sp, #24
 8006848:	af00      	add	r7, sp, #0
 800684a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800684c:	f3ef 8311 	mrs	r3, BASEPRI
 8006850:	f04f 0120 	mov.w	r1, #32
 8006854:	f381 8811 	msr	BASEPRI, r1
 8006858:	617b      	str	r3, [r7, #20]
 800685a:	480b      	ldr	r0, [pc, #44]	@ (8006888 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800685c:	f7fe fdfb 	bl	8005456 <_PreparePacket>
 8006860:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006862:	2280      	movs	r2, #128	@ 0x80
 8006864:	6879      	ldr	r1, [r7, #4]
 8006866:	6938      	ldr	r0, [r7, #16]
 8006868:	f7fe fda8 	bl	80053bc <_EncodeStr>
 800686c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800686e:	220e      	movs	r2, #14
 8006870:	68f9      	ldr	r1, [r7, #12]
 8006872:	6938      	ldr	r0, [r7, #16]
 8006874:	f7fe fee0 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	f383 8811 	msr	BASEPRI, r3
}
 800687e:	bf00      	nop
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	2004c854 	.word	0x2004c854

0800688c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800688c:	b590      	push	{r4, r7, lr}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006892:	4b15      	ldr	r3, [pc, #84]	@ (80068e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006894:	6a1b      	ldr	r3, [r3, #32]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d01a      	beq.n	80068d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800689a:	4b13      	ldr	r3, [pc, #76]	@ (80068e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800689c:	6a1b      	ldr	r3, [r3, #32]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80068a4:	4b10      	ldr	r3, [pc, #64]	@ (80068e8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80068a6:	6a1b      	ldr	r3, [r3, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	4798      	blx	r3
 80068ac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068b0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 80068b2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068b6:	f04f 0200 	mov.w	r2, #0
 80068ba:	f04f 0300 	mov.w	r3, #0
 80068be:	000a      	movs	r2, r1
 80068c0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 80068c2:	4613      	mov	r3, r2
 80068c4:	461a      	mov	r2, r3
 80068c6:	4621      	mov	r1, r4
 80068c8:	200d      	movs	r0, #13
 80068ca:	f7ff fbe5 	bl	8006098 <SEGGER_SYSVIEW_RecordU32x2>
 80068ce:	e006      	b.n	80068de <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 80068d0:	4b06      	ldr	r3, [pc, #24]	@ (80068ec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4619      	mov	r1, r3
 80068d6:	200c      	movs	r0, #12
 80068d8:	f7ff fba2 	bl	8006020 <SEGGER_SYSVIEW_RecordU32>
  }
}
 80068dc:	bf00      	nop
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd90      	pop	{r4, r7, pc}
 80068e6:	bf00      	nop
 80068e8:	2004c824 	.word	0x2004c824
 80068ec:	e0001004 	.word	0xe0001004

080068f0 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b086      	sub	sp, #24
 80068f4:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80068f6:	f3ef 8311 	mrs	r3, BASEPRI
 80068fa:	f04f 0120 	mov.w	r1, #32
 80068fe:	f381 8811 	msr	BASEPRI, r1
 8006902:	60fb      	str	r3, [r7, #12]
 8006904:	4819      	ldr	r0, [pc, #100]	@ (800696c <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006906:	f7fe fda6 	bl	8005456 <_PreparePacket>
 800690a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006910:	4b17      	ldr	r3, [pc, #92]	@ (8006970 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006918:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	613b      	str	r3, [r7, #16]
 8006922:	e00b      	b.n	800693c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006924:	693b      	ldr	r3, [r7, #16]
 8006926:	b2da      	uxtb	r2, r3
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	1c59      	adds	r1, r3, #1
 800692c:	6179      	str	r1, [r7, #20]
 800692e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006932:	b2d2      	uxtb	r2, r2
 8006934:	701a      	strb	r2, [r3, #0]
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	09db      	lsrs	r3, r3, #7
 800693a:	613b      	str	r3, [r7, #16]
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006940:	d8f0      	bhi.n	8006924 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	1c5a      	adds	r2, r3, #1
 8006946:	617a      	str	r2, [r7, #20]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	b2d2      	uxtb	r2, r2
 800694c:	701a      	strb	r2, [r3, #0]
 800694e:	697b      	ldr	r3, [r7, #20]
 8006950:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006952:	2202      	movs	r2, #2
 8006954:	6879      	ldr	r1, [r7, #4]
 8006956:	68b8      	ldr	r0, [r7, #8]
 8006958:	f7fe fe6e 	bl	8005638 <_SendPacket>
  RECORD_END();
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f383 8811 	msr	BASEPRI, r3
}
 8006962:	bf00      	nop
 8006964:	3718      	adds	r7, #24
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}
 800696a:	bf00      	nop
 800696c:	2004c854 	.word	0x2004c854
 8006970:	e000ed04 	.word	0xe000ed04

08006974 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006974:	b580      	push	{r7, lr}
 8006976:	b082      	sub	sp, #8
 8006978:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800697a:	f3ef 8311 	mrs	r3, BASEPRI
 800697e:	f04f 0120 	mov.w	r1, #32
 8006982:	f381 8811 	msr	BASEPRI, r1
 8006986:	607b      	str	r3, [r7, #4]
 8006988:	4807      	ldr	r0, [pc, #28]	@ (80069a8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800698a:	f7fe fd64 	bl	8005456 <_PreparePacket>
 800698e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006990:	2203      	movs	r2, #3
 8006992:	6839      	ldr	r1, [r7, #0]
 8006994:	6838      	ldr	r0, [r7, #0]
 8006996:	f7fe fe4f 	bl	8005638 <_SendPacket>
  RECORD_END();
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	f383 8811 	msr	BASEPRI, r3
}
 80069a0:	bf00      	nop
 80069a2:	3708      	adds	r7, #8
 80069a4:	46bd      	mov	sp, r7
 80069a6:	bd80      	pop	{r7, pc}
 80069a8:	2004c854 	.word	0x2004c854

080069ac <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80069ac:	b580      	push	{r7, lr}
 80069ae:	b082      	sub	sp, #8
 80069b0:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069b2:	f3ef 8311 	mrs	r3, BASEPRI
 80069b6:	f04f 0120 	mov.w	r1, #32
 80069ba:	f381 8811 	msr	BASEPRI, r1
 80069be:	607b      	str	r3, [r7, #4]
 80069c0:	4807      	ldr	r0, [pc, #28]	@ (80069e0 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 80069c2:	f7fe fd48 	bl	8005456 <_PreparePacket>
 80069c6:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 80069c8:	2212      	movs	r2, #18
 80069ca:	6839      	ldr	r1, [r7, #0]
 80069cc:	6838      	ldr	r0, [r7, #0]
 80069ce:	f7fe fe33 	bl	8005638 <_SendPacket>
  RECORD_END();
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f383 8811 	msr	BASEPRI, r3
}
 80069d8:	bf00      	nop
 80069da:	3708      	adds	r7, #8
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	2004c854 	.word	0x2004c854

080069e4 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b082      	sub	sp, #8
 80069e8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80069ea:	f3ef 8311 	mrs	r3, BASEPRI
 80069ee:	f04f 0120 	mov.w	r1, #32
 80069f2:	f381 8811 	msr	BASEPRI, r1
 80069f6:	607b      	str	r3, [r7, #4]
 80069f8:	4807      	ldr	r0, [pc, #28]	@ (8006a18 <SEGGER_SYSVIEW_OnIdle+0x34>)
 80069fa:	f7fe fd2c 	bl	8005456 <_PreparePacket>
 80069fe:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006a00:	2211      	movs	r2, #17
 8006a02:	6839      	ldr	r1, [r7, #0]
 8006a04:	6838      	ldr	r0, [r7, #0]
 8006a06:	f7fe fe17 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	f383 8811 	msr	BASEPRI, r3
}
 8006a10:	bf00      	nop
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}
 8006a18:	2004c854 	.word	0x2004c854

08006a1c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006a1c:	b580      	push	{r7, lr}
 8006a1e:	b088      	sub	sp, #32
 8006a20:	af00      	add	r7, sp, #0
 8006a22:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a24:	f3ef 8311 	mrs	r3, BASEPRI
 8006a28:	f04f 0120 	mov.w	r1, #32
 8006a2c:	f381 8811 	msr	BASEPRI, r1
 8006a30:	617b      	str	r3, [r7, #20]
 8006a32:	4819      	ldr	r0, [pc, #100]	@ (8006a98 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006a34:	f7fe fd0f 	bl	8005456 <_PreparePacket>
 8006a38:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006a3e:	4b17      	ldr	r3, [pc, #92]	@ (8006a9c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006a40:	691b      	ldr	r3, [r3, #16]
 8006a42:	687a      	ldr	r2, [r7, #4]
 8006a44:	1ad3      	subs	r3, r2, r3
 8006a46:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	61fb      	str	r3, [r7, #28]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	61bb      	str	r3, [r7, #24]
 8006a50:	e00b      	b.n	8006a6a <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006a52:	69bb      	ldr	r3, [r7, #24]
 8006a54:	b2da      	uxtb	r2, r3
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	1c59      	adds	r1, r3, #1
 8006a5a:	61f9      	str	r1, [r7, #28]
 8006a5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006a60:	b2d2      	uxtb	r2, r2
 8006a62:	701a      	strb	r2, [r3, #0]
 8006a64:	69bb      	ldr	r3, [r7, #24]
 8006a66:	09db      	lsrs	r3, r3, #7
 8006a68:	61bb      	str	r3, [r7, #24]
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8006a6e:	d8f0      	bhi.n	8006a52 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	1c5a      	adds	r2, r3, #1
 8006a74:	61fa      	str	r2, [r7, #28]
 8006a76:	69ba      	ldr	r2, [r7, #24]
 8006a78:	b2d2      	uxtb	r2, r2
 8006a7a:	701a      	strb	r2, [r3, #0]
 8006a7c:	69fb      	ldr	r3, [r7, #28]
 8006a7e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006a80:	2208      	movs	r2, #8
 8006a82:	68f9      	ldr	r1, [r7, #12]
 8006a84:	6938      	ldr	r0, [r7, #16]
 8006a86:	f7fe fdd7 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006a8a:	697b      	ldr	r3, [r7, #20]
 8006a8c:	f383 8811 	msr	BASEPRI, r3
}
 8006a90:	bf00      	nop
 8006a92:	3720      	adds	r7, #32
 8006a94:	46bd      	mov	sp, r7
 8006a96:	bd80      	pop	{r7, pc}
 8006a98:	2004c854 	.word	0x2004c854
 8006a9c:	2004c824 	.word	0x2004c824

08006aa0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b088      	sub	sp, #32
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006aa8:	f3ef 8311 	mrs	r3, BASEPRI
 8006aac:	f04f 0120 	mov.w	r1, #32
 8006ab0:	f381 8811 	msr	BASEPRI, r1
 8006ab4:	617b      	str	r3, [r7, #20]
 8006ab6:	4819      	ldr	r0, [pc, #100]	@ (8006b1c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006ab8:	f7fe fccd 	bl	8005456 <_PreparePacket>
 8006abc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006ac2:	4b17      	ldr	r3, [pc, #92]	@ (8006b20 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006ac4:	691b      	ldr	r3, [r3, #16]
 8006ac6:	687a      	ldr	r2, [r7, #4]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	61fb      	str	r3, [r7, #28]
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	e00b      	b.n	8006aee <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	b2da      	uxtb	r2, r3
 8006ada:	69fb      	ldr	r3, [r7, #28]
 8006adc:	1c59      	adds	r1, r3, #1
 8006ade:	61f9      	str	r1, [r7, #28]
 8006ae0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ae4:	b2d2      	uxtb	r2, r2
 8006ae6:	701a      	strb	r2, [r3, #0]
 8006ae8:	69bb      	ldr	r3, [r7, #24]
 8006aea:	09db      	lsrs	r3, r3, #7
 8006aec:	61bb      	str	r3, [r7, #24]
 8006aee:	69bb      	ldr	r3, [r7, #24]
 8006af0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006af2:	d8f0      	bhi.n	8006ad6 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006af4:	69fb      	ldr	r3, [r7, #28]
 8006af6:	1c5a      	adds	r2, r3, #1
 8006af8:	61fa      	str	r2, [r7, #28]
 8006afa:	69ba      	ldr	r2, [r7, #24]
 8006afc:	b2d2      	uxtb	r2, r2
 8006afe:	701a      	strb	r2, [r3, #0]
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006b04:	2204      	movs	r2, #4
 8006b06:	68f9      	ldr	r1, [r7, #12]
 8006b08:	6938      	ldr	r0, [r7, #16]
 8006b0a:	f7fe fd95 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006b0e:	697b      	ldr	r3, [r7, #20]
 8006b10:	f383 8811 	msr	BASEPRI, r3
}
 8006b14:	bf00      	nop
 8006b16:	3720      	adds	r7, #32
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}
 8006b1c:	2004c854 	.word	0x2004c854
 8006b20:	2004c824 	.word	0x2004c824

08006b24 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b088      	sub	sp, #32
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006b2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006b30:	f04f 0120 	mov.w	r1, #32
 8006b34:	f381 8811 	msr	BASEPRI, r1
 8006b38:	617b      	str	r3, [r7, #20]
 8006b3a:	4819      	ldr	r0, [pc, #100]	@ (8006ba0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006b3c:	f7fe fc8b 	bl	8005456 <_PreparePacket>
 8006b40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006b42:	693b      	ldr	r3, [r7, #16]
 8006b44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006b46:	4b17      	ldr	r3, [pc, #92]	@ (8006ba4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	61bb      	str	r3, [r7, #24]
 8006b58:	e00b      	b.n	8006b72 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006b5a:	69bb      	ldr	r3, [r7, #24]
 8006b5c:	b2da      	uxtb	r2, r3
 8006b5e:	69fb      	ldr	r3, [r7, #28]
 8006b60:	1c59      	adds	r1, r3, #1
 8006b62:	61f9      	str	r1, [r7, #28]
 8006b64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006b68:	b2d2      	uxtb	r2, r2
 8006b6a:	701a      	strb	r2, [r3, #0]
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	09db      	lsrs	r3, r3, #7
 8006b70:	61bb      	str	r3, [r7, #24]
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b76:	d8f0      	bhi.n	8006b5a <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006b78:	69fb      	ldr	r3, [r7, #28]
 8006b7a:	1c5a      	adds	r2, r3, #1
 8006b7c:	61fa      	str	r2, [r7, #28]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	b2d2      	uxtb	r2, r2
 8006b82:	701a      	strb	r2, [r3, #0]
 8006b84:	69fb      	ldr	r3, [r7, #28]
 8006b86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006b88:	2206      	movs	r2, #6
 8006b8a:	68f9      	ldr	r1, [r7, #12]
 8006b8c:	6938      	ldr	r0, [r7, #16]
 8006b8e:	f7fe fd53 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006b92:	697b      	ldr	r3, [r7, #20]
 8006b94:	f383 8811 	msr	BASEPRI, r3
}
 8006b98:	bf00      	nop
 8006b9a:	3720      	adds	r7, #32
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	2004c854 	.word	0x2004c854
 8006ba4:	2004c824 	.word	0x2004c824

08006ba8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006ba8:	b480      	push	{r7}
 8006baa:	b083      	sub	sp, #12
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006bb0:	4b04      	ldr	r3, [pc, #16]	@ (8006bc4 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006bb2:	691b      	ldr	r3, [r3, #16]
 8006bb4:	687a      	ldr	r2, [r7, #4]
 8006bb6:	1ad3      	subs	r3, r2, r3
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	370c      	adds	r7, #12
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	2004c824 	.word	0x2004c824

08006bc8 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08c      	sub	sp, #48	@ 0x30
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8006cc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d06d      	beq.n	8006cb6 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006bda:	4b39      	ldr	r3, [pc, #228]	@ (8006cc0 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006be0:	2300      	movs	r3, #0
 8006be2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006be4:	e008      	b.n	8006bf8 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006be6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d007      	beq.n	8006c02 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	3301      	adds	r3, #1
 8006bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006bf8:	79fb      	ldrb	r3, [r7, #7]
 8006bfa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006bfc:	429a      	cmp	r2, r3
 8006bfe:	d3f2      	bcc.n	8006be6 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006c00:	e000      	b.n	8006c04 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006c02:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d055      	beq.n	8006cb6 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006c0e:	f04f 0120 	mov.w	r1, #32
 8006c12:	f381 8811 	msr	BASEPRI, r1
 8006c16:	617b      	str	r3, [r7, #20]
 8006c18:	482a      	ldr	r0, [pc, #168]	@ (8006cc4 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006c1a:	f7fe fc1c 	bl	8005456 <_PreparePacket>
 8006c1e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006c20:	693b      	ldr	r3, [r7, #16]
 8006c22:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	627b      	str	r3, [r7, #36]	@ 0x24
 8006c28:	79fb      	ldrb	r3, [r7, #7]
 8006c2a:	623b      	str	r3, [r7, #32]
 8006c2c:	e00b      	b.n	8006c46 <SEGGER_SYSVIEW_SendModule+0x7e>
 8006c2e:	6a3b      	ldr	r3, [r7, #32]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c34:	1c59      	adds	r1, r3, #1
 8006c36:	6279      	str	r1, [r7, #36]	@ 0x24
 8006c38:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c3c:	b2d2      	uxtb	r2, r2
 8006c3e:	701a      	strb	r2, [r3, #0]
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	09db      	lsrs	r3, r3, #7
 8006c44:	623b      	str	r3, [r7, #32]
 8006c46:	6a3b      	ldr	r3, [r7, #32]
 8006c48:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c4a:	d8f0      	bhi.n	8006c2e <SEGGER_SYSVIEW_SendModule+0x66>
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	1c5a      	adds	r2, r3, #1
 8006c50:	627a      	str	r2, [r7, #36]	@ 0x24
 8006c52:	6a3a      	ldr	r2, [r7, #32]
 8006c54:	b2d2      	uxtb	r2, r2
 8006c56:	701a      	strb	r2, [r3, #0]
 8006c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c5a:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	61fb      	str	r3, [r7, #28]
 8006c60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	61bb      	str	r3, [r7, #24]
 8006c66:	e00b      	b.n	8006c80 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	b2da      	uxtb	r2, r3
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	1c59      	adds	r1, r3, #1
 8006c70:	61f9      	str	r1, [r7, #28]
 8006c72:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c76:	b2d2      	uxtb	r2, r2
 8006c78:	701a      	strb	r2, [r3, #0]
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	09db      	lsrs	r3, r3, #7
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c84:	d8f0      	bhi.n	8006c68 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	1c5a      	adds	r2, r3, #1
 8006c8a:	61fa      	str	r2, [r7, #28]
 8006c8c:	69ba      	ldr	r2, [r7, #24]
 8006c8e:	b2d2      	uxtb	r2, r2
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	69fb      	ldr	r3, [r7, #28]
 8006c94:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006c96:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	2280      	movs	r2, #128	@ 0x80
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	68f8      	ldr	r0, [r7, #12]
 8006ca0:	f7fe fb8c 	bl	80053bc <_EncodeStr>
 8006ca4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006ca6:	2216      	movs	r2, #22
 8006ca8:	68f9      	ldr	r1, [r7, #12]
 8006caa:	6938      	ldr	r0, [r7, #16]
 8006cac:	f7fe fcc4 	bl	8005638 <_SendPacket>
      RECORD_END();
 8006cb0:	697b      	ldr	r3, [r7, #20]
 8006cb2:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006cb6:	bf00      	nop
 8006cb8:	3730      	adds	r7, #48	@ 0x30
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2004c84c 	.word	0x2004c84c
 8006cc4:	2004c854 	.word	0x2004c854

08006cc8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006cce:	4b0c      	ldr	r3, [pc, #48]	@ (8006d00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d00f      	beq.n	8006cf6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006cd6:	4b0a      	ldr	r3, [pc, #40]	@ (8006d00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	68db      	ldr	r3, [r3, #12]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d002      	beq.n	8006cea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	68db      	ldr	r3, [r3, #12]
 8006ce8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	691b      	ldr	r3, [r3, #16]
 8006cee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d1f2      	bne.n	8006cdc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006cf6:	bf00      	nop
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2004c84c 	.word	0x2004c84c

08006d04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006d0a:	f3ef 8311 	mrs	r3, BASEPRI
 8006d0e:	f04f 0120 	mov.w	r1, #32
 8006d12:	f381 8811 	msr	BASEPRI, r1
 8006d16:	60fb      	str	r3, [r7, #12]
 8006d18:	4817      	ldr	r0, [pc, #92]	@ (8006d78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006d1a:	f7fe fb9c 	bl	8005456 <_PreparePacket>
 8006d1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	617b      	str	r3, [r7, #20]
 8006d28:	4b14      	ldr	r3, [pc, #80]	@ (8006d7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006d2a:	781b      	ldrb	r3, [r3, #0]
 8006d2c:	613b      	str	r3, [r7, #16]
 8006d2e:	e00b      	b.n	8006d48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006d30:	693b      	ldr	r3, [r7, #16]
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	1c59      	adds	r1, r3, #1
 8006d38:	6179      	str	r1, [r7, #20]
 8006d3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006d3e:	b2d2      	uxtb	r2, r2
 8006d40:	701a      	strb	r2, [r3, #0]
 8006d42:	693b      	ldr	r3, [r7, #16]
 8006d44:	09db      	lsrs	r3, r3, #7
 8006d46:	613b      	str	r3, [r7, #16]
 8006d48:	693b      	ldr	r3, [r7, #16]
 8006d4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006d4c:	d8f0      	bhi.n	8006d30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	1c5a      	adds	r2, r3, #1
 8006d52:	617a      	str	r2, [r7, #20]
 8006d54:	693a      	ldr	r2, [r7, #16]
 8006d56:	b2d2      	uxtb	r2, r2
 8006d58:	701a      	strb	r2, [r3, #0]
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006d5e:	221b      	movs	r2, #27
 8006d60:	6879      	ldr	r1, [r7, #4]
 8006d62:	68b8      	ldr	r0, [r7, #8]
 8006d64:	f7fe fc68 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	f383 8811 	msr	BASEPRI, r3
}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	2004c854 	.word	0x2004c854
 8006d7c:	2004c850 	.word	0x2004c850

08006d80 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006d80:	b40f      	push	{r0, r1, r2, r3}
 8006d82:	b580      	push	{r7, lr}
 8006d84:	b082      	sub	sp, #8
 8006d86:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006d88:	f107 0314 	add.w	r3, r7, #20
 8006d8c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	461a      	mov	r2, r3
 8006d92:	2100      	movs	r1, #0
 8006d94:	6938      	ldr	r0, [r7, #16]
 8006d96:	f7fe fed9 	bl	8005b4c <_VPrintTarget>
  va_end(ParamList);
}
 8006d9a:	bf00      	nop
 8006d9c:	3708      	adds	r7, #8
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006da4:	b004      	add	sp, #16
 8006da6:	4770      	bx	lr

08006da8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b08a      	sub	sp, #40	@ 0x28
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006db0:	f3ef 8311 	mrs	r3, BASEPRI
 8006db4:	f04f 0120 	mov.w	r1, #32
 8006db8:	f381 8811 	msr	BASEPRI, r1
 8006dbc:	617b      	str	r3, [r7, #20]
 8006dbe:	4827      	ldr	r0, [pc, #156]	@ (8006e5c <SEGGER_SYSVIEW_Warn+0xb4>)
 8006dc0:	f7fe fb49 	bl	8005456 <_PreparePacket>
 8006dc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006dc6:	2280      	movs	r2, #128	@ 0x80
 8006dc8:	6879      	ldr	r1, [r7, #4]
 8006dca:	6938      	ldr	r0, [r7, #16]
 8006dcc:	f7fe faf6 	bl	80053bc <_EncodeStr>
 8006dd0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	623b      	str	r3, [r7, #32]
 8006dda:	e00b      	b.n	8006df4 <SEGGER_SYSVIEW_Warn+0x4c>
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	b2da      	uxtb	r2, r3
 8006de0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006de2:	1c59      	adds	r1, r3, #1
 8006de4:	6279      	str	r1, [r7, #36]	@ 0x24
 8006de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dea:	b2d2      	uxtb	r2, r2
 8006dec:	701a      	strb	r2, [r3, #0]
 8006dee:	6a3b      	ldr	r3, [r7, #32]
 8006df0:	09db      	lsrs	r3, r3, #7
 8006df2:	623b      	str	r3, [r7, #32]
 8006df4:	6a3b      	ldr	r3, [r7, #32]
 8006df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8006df8:	d8f0      	bhi.n	8006ddc <SEGGER_SYSVIEW_Warn+0x34>
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfc:	1c5a      	adds	r2, r3, #1
 8006dfe:	627a      	str	r2, [r7, #36]	@ 0x24
 8006e00:	6a3a      	ldr	r2, [r7, #32]
 8006e02:	b2d2      	uxtb	r2, r2
 8006e04:	701a      	strb	r2, [r3, #0]
 8006e06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e08:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	61fb      	str	r3, [r7, #28]
 8006e0e:	2300      	movs	r3, #0
 8006e10:	61bb      	str	r3, [r7, #24]
 8006e12:	e00b      	b.n	8006e2c <SEGGER_SYSVIEW_Warn+0x84>
 8006e14:	69bb      	ldr	r3, [r7, #24]
 8006e16:	b2da      	uxtb	r2, r3
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	1c59      	adds	r1, r3, #1
 8006e1c:	61f9      	str	r1, [r7, #28]
 8006e1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006e22:	b2d2      	uxtb	r2, r2
 8006e24:	701a      	strb	r2, [r3, #0]
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	09db      	lsrs	r3, r3, #7
 8006e2a:	61bb      	str	r3, [r7, #24]
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e30:	d8f0      	bhi.n	8006e14 <SEGGER_SYSVIEW_Warn+0x6c>
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	1c5a      	adds	r2, r3, #1
 8006e36:	61fa      	str	r2, [r7, #28]
 8006e38:	69ba      	ldr	r2, [r7, #24]
 8006e3a:	b2d2      	uxtb	r2, r2
 8006e3c:	701a      	strb	r2, [r3, #0]
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006e42:	221a      	movs	r2, #26
 8006e44:	68f9      	ldr	r1, [r7, #12]
 8006e46:	6938      	ldr	r0, [r7, #16]
 8006e48:	f7fe fbf6 	bl	8005638 <_SendPacket>
  RECORD_END();
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f383 8811 	msr	BASEPRI, r3
}
 8006e52:	bf00      	nop
 8006e54:	3728      	adds	r7, #40	@ 0x28
 8006e56:	46bd      	mov	sp, r7
 8006e58:	bd80      	pop	{r7, pc}
 8006e5a:	bf00      	nop
 8006e5c:	2004c854 	.word	0x2004c854

08006e60 <sniprintf>:
 8006e60:	b40c      	push	{r2, r3}
 8006e62:	b530      	push	{r4, r5, lr}
 8006e64:	4b17      	ldr	r3, [pc, #92]	@ (8006ec4 <sniprintf+0x64>)
 8006e66:	1e0c      	subs	r4, r1, #0
 8006e68:	681d      	ldr	r5, [r3, #0]
 8006e6a:	b09d      	sub	sp, #116	@ 0x74
 8006e6c:	da08      	bge.n	8006e80 <sniprintf+0x20>
 8006e6e:	238b      	movs	r3, #139	@ 0x8b
 8006e70:	602b      	str	r3, [r5, #0]
 8006e72:	f04f 30ff 	mov.w	r0, #4294967295
 8006e76:	b01d      	add	sp, #116	@ 0x74
 8006e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e7c:	b002      	add	sp, #8
 8006e7e:	4770      	bx	lr
 8006e80:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006e84:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006e88:	bf14      	ite	ne
 8006e8a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006e8e:	4623      	moveq	r3, r4
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	9307      	str	r3, [sp, #28]
 8006e94:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006e98:	9002      	str	r0, [sp, #8]
 8006e9a:	9006      	str	r0, [sp, #24]
 8006e9c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006ea0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006ea2:	ab21      	add	r3, sp, #132	@ 0x84
 8006ea4:	a902      	add	r1, sp, #8
 8006ea6:	4628      	mov	r0, r5
 8006ea8:	9301      	str	r3, [sp, #4]
 8006eaa:	f000 f9ad 	bl	8007208 <_svfiprintf_r>
 8006eae:	1c43      	adds	r3, r0, #1
 8006eb0:	bfbc      	itt	lt
 8006eb2:	238b      	movlt	r3, #139	@ 0x8b
 8006eb4:	602b      	strlt	r3, [r5, #0]
 8006eb6:	2c00      	cmp	r4, #0
 8006eb8:	d0dd      	beq.n	8006e76 <sniprintf+0x16>
 8006eba:	9b02      	ldr	r3, [sp, #8]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	701a      	strb	r2, [r3, #0]
 8006ec0:	e7d9      	b.n	8006e76 <sniprintf+0x16>
 8006ec2:	bf00      	nop
 8006ec4:	20000014 	.word	0x20000014

08006ec8 <memcmp>:
 8006ec8:	b510      	push	{r4, lr}
 8006eca:	3901      	subs	r1, #1
 8006ecc:	4402      	add	r2, r0
 8006ece:	4290      	cmp	r0, r2
 8006ed0:	d101      	bne.n	8006ed6 <memcmp+0xe>
 8006ed2:	2000      	movs	r0, #0
 8006ed4:	e005      	b.n	8006ee2 <memcmp+0x1a>
 8006ed6:	7803      	ldrb	r3, [r0, #0]
 8006ed8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006edc:	42a3      	cmp	r3, r4
 8006ede:	d001      	beq.n	8006ee4 <memcmp+0x1c>
 8006ee0:	1b18      	subs	r0, r3, r4
 8006ee2:	bd10      	pop	{r4, pc}
 8006ee4:	3001      	adds	r0, #1
 8006ee6:	e7f2      	b.n	8006ece <memcmp+0x6>

08006ee8 <memset>:
 8006ee8:	4402      	add	r2, r0
 8006eea:	4603      	mov	r3, r0
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d100      	bne.n	8006ef2 <memset+0xa>
 8006ef0:	4770      	bx	lr
 8006ef2:	f803 1b01 	strb.w	r1, [r3], #1
 8006ef6:	e7f9      	b.n	8006eec <memset+0x4>

08006ef8 <__libc_init_array>:
 8006ef8:	b570      	push	{r4, r5, r6, lr}
 8006efa:	4d0d      	ldr	r5, [pc, #52]	@ (8006f30 <__libc_init_array+0x38>)
 8006efc:	4c0d      	ldr	r4, [pc, #52]	@ (8006f34 <__libc_init_array+0x3c>)
 8006efe:	1b64      	subs	r4, r4, r5
 8006f00:	10a4      	asrs	r4, r4, #2
 8006f02:	2600      	movs	r6, #0
 8006f04:	42a6      	cmp	r6, r4
 8006f06:	d109      	bne.n	8006f1c <__libc_init_array+0x24>
 8006f08:	4d0b      	ldr	r5, [pc, #44]	@ (8006f38 <__libc_init_array+0x40>)
 8006f0a:	4c0c      	ldr	r4, [pc, #48]	@ (8006f3c <__libc_init_array+0x44>)
 8006f0c:	f000 fc74 	bl	80077f8 <_init>
 8006f10:	1b64      	subs	r4, r4, r5
 8006f12:	10a4      	asrs	r4, r4, #2
 8006f14:	2600      	movs	r6, #0
 8006f16:	42a6      	cmp	r6, r4
 8006f18:	d105      	bne.n	8006f26 <__libc_init_array+0x2e>
 8006f1a:	bd70      	pop	{r4, r5, r6, pc}
 8006f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f20:	4798      	blx	r3
 8006f22:	3601      	adds	r6, #1
 8006f24:	e7ee      	b.n	8006f04 <__libc_init_array+0xc>
 8006f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f2a:	4798      	blx	r3
 8006f2c:	3601      	adds	r6, #1
 8006f2e:	e7f2      	b.n	8006f16 <__libc_init_array+0x1e>
 8006f30:	080079a4 	.word	0x080079a4
 8006f34:	080079a4 	.word	0x080079a4
 8006f38:	080079a4 	.word	0x080079a4
 8006f3c:	080079a8 	.word	0x080079a8

08006f40 <__retarget_lock_acquire_recursive>:
 8006f40:	4770      	bx	lr

08006f42 <__retarget_lock_release_recursive>:
 8006f42:	4770      	bx	lr

08006f44 <memcpy>:
 8006f44:	440a      	add	r2, r1
 8006f46:	4291      	cmp	r1, r2
 8006f48:	f100 33ff 	add.w	r3, r0, #4294967295
 8006f4c:	d100      	bne.n	8006f50 <memcpy+0xc>
 8006f4e:	4770      	bx	lr
 8006f50:	b510      	push	{r4, lr}
 8006f52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006f56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006f5a:	4291      	cmp	r1, r2
 8006f5c:	d1f9      	bne.n	8006f52 <memcpy+0xe>
 8006f5e:	bd10      	pop	{r4, pc}

08006f60 <_free_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4605      	mov	r5, r0
 8006f64:	2900      	cmp	r1, #0
 8006f66:	d041      	beq.n	8006fec <_free_r+0x8c>
 8006f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f6c:	1f0c      	subs	r4, r1, #4
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	bfb8      	it	lt
 8006f72:	18e4      	addlt	r4, r4, r3
 8006f74:	f000 f8e0 	bl	8007138 <__malloc_lock>
 8006f78:	4a1d      	ldr	r2, [pc, #116]	@ (8006ff0 <_free_r+0x90>)
 8006f7a:	6813      	ldr	r3, [r2, #0]
 8006f7c:	b933      	cbnz	r3, 8006f8c <_free_r+0x2c>
 8006f7e:	6063      	str	r3, [r4, #4]
 8006f80:	6014      	str	r4, [r2, #0]
 8006f82:	4628      	mov	r0, r5
 8006f84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006f88:	f000 b8dc 	b.w	8007144 <__malloc_unlock>
 8006f8c:	42a3      	cmp	r3, r4
 8006f8e:	d908      	bls.n	8006fa2 <_free_r+0x42>
 8006f90:	6820      	ldr	r0, [r4, #0]
 8006f92:	1821      	adds	r1, r4, r0
 8006f94:	428b      	cmp	r3, r1
 8006f96:	bf01      	itttt	eq
 8006f98:	6819      	ldreq	r1, [r3, #0]
 8006f9a:	685b      	ldreq	r3, [r3, #4]
 8006f9c:	1809      	addeq	r1, r1, r0
 8006f9e:	6021      	streq	r1, [r4, #0]
 8006fa0:	e7ed      	b.n	8006f7e <_free_r+0x1e>
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	b10b      	cbz	r3, 8006fac <_free_r+0x4c>
 8006fa8:	42a3      	cmp	r3, r4
 8006faa:	d9fa      	bls.n	8006fa2 <_free_r+0x42>
 8006fac:	6811      	ldr	r1, [r2, #0]
 8006fae:	1850      	adds	r0, r2, r1
 8006fb0:	42a0      	cmp	r0, r4
 8006fb2:	d10b      	bne.n	8006fcc <_free_r+0x6c>
 8006fb4:	6820      	ldr	r0, [r4, #0]
 8006fb6:	4401      	add	r1, r0
 8006fb8:	1850      	adds	r0, r2, r1
 8006fba:	4283      	cmp	r3, r0
 8006fbc:	6011      	str	r1, [r2, #0]
 8006fbe:	d1e0      	bne.n	8006f82 <_free_r+0x22>
 8006fc0:	6818      	ldr	r0, [r3, #0]
 8006fc2:	685b      	ldr	r3, [r3, #4]
 8006fc4:	6053      	str	r3, [r2, #4]
 8006fc6:	4408      	add	r0, r1
 8006fc8:	6010      	str	r0, [r2, #0]
 8006fca:	e7da      	b.n	8006f82 <_free_r+0x22>
 8006fcc:	d902      	bls.n	8006fd4 <_free_r+0x74>
 8006fce:	230c      	movs	r3, #12
 8006fd0:	602b      	str	r3, [r5, #0]
 8006fd2:	e7d6      	b.n	8006f82 <_free_r+0x22>
 8006fd4:	6820      	ldr	r0, [r4, #0]
 8006fd6:	1821      	adds	r1, r4, r0
 8006fd8:	428b      	cmp	r3, r1
 8006fda:	bf04      	itt	eq
 8006fdc:	6819      	ldreq	r1, [r3, #0]
 8006fde:	685b      	ldreq	r3, [r3, #4]
 8006fe0:	6063      	str	r3, [r4, #4]
 8006fe2:	bf04      	itt	eq
 8006fe4:	1809      	addeq	r1, r1, r0
 8006fe6:	6021      	streq	r1, [r4, #0]
 8006fe8:	6054      	str	r4, [r2, #4]
 8006fea:	e7ca      	b.n	8006f82 <_free_r+0x22>
 8006fec:	bd38      	pop	{r3, r4, r5, pc}
 8006fee:	bf00      	nop
 8006ff0:	2004ca7c 	.word	0x2004ca7c

08006ff4 <sbrk_aligned>:
 8006ff4:	b570      	push	{r4, r5, r6, lr}
 8006ff6:	4e0f      	ldr	r6, [pc, #60]	@ (8007034 <sbrk_aligned+0x40>)
 8006ff8:	460c      	mov	r4, r1
 8006ffa:	6831      	ldr	r1, [r6, #0]
 8006ffc:	4605      	mov	r5, r0
 8006ffe:	b911      	cbnz	r1, 8007006 <sbrk_aligned+0x12>
 8007000:	f000 fba6 	bl	8007750 <_sbrk_r>
 8007004:	6030      	str	r0, [r6, #0]
 8007006:	4621      	mov	r1, r4
 8007008:	4628      	mov	r0, r5
 800700a:	f000 fba1 	bl	8007750 <_sbrk_r>
 800700e:	1c43      	adds	r3, r0, #1
 8007010:	d103      	bne.n	800701a <sbrk_aligned+0x26>
 8007012:	f04f 34ff 	mov.w	r4, #4294967295
 8007016:	4620      	mov	r0, r4
 8007018:	bd70      	pop	{r4, r5, r6, pc}
 800701a:	1cc4      	adds	r4, r0, #3
 800701c:	f024 0403 	bic.w	r4, r4, #3
 8007020:	42a0      	cmp	r0, r4
 8007022:	d0f8      	beq.n	8007016 <sbrk_aligned+0x22>
 8007024:	1a21      	subs	r1, r4, r0
 8007026:	4628      	mov	r0, r5
 8007028:	f000 fb92 	bl	8007750 <_sbrk_r>
 800702c:	3001      	adds	r0, #1
 800702e:	d1f2      	bne.n	8007016 <sbrk_aligned+0x22>
 8007030:	e7ef      	b.n	8007012 <sbrk_aligned+0x1e>
 8007032:	bf00      	nop
 8007034:	2004ca78 	.word	0x2004ca78

08007038 <_malloc_r>:
 8007038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800703c:	1ccd      	adds	r5, r1, #3
 800703e:	f025 0503 	bic.w	r5, r5, #3
 8007042:	3508      	adds	r5, #8
 8007044:	2d0c      	cmp	r5, #12
 8007046:	bf38      	it	cc
 8007048:	250c      	movcc	r5, #12
 800704a:	2d00      	cmp	r5, #0
 800704c:	4606      	mov	r6, r0
 800704e:	db01      	blt.n	8007054 <_malloc_r+0x1c>
 8007050:	42a9      	cmp	r1, r5
 8007052:	d904      	bls.n	800705e <_malloc_r+0x26>
 8007054:	230c      	movs	r3, #12
 8007056:	6033      	str	r3, [r6, #0]
 8007058:	2000      	movs	r0, #0
 800705a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800705e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007134 <_malloc_r+0xfc>
 8007062:	f000 f869 	bl	8007138 <__malloc_lock>
 8007066:	f8d8 3000 	ldr.w	r3, [r8]
 800706a:	461c      	mov	r4, r3
 800706c:	bb44      	cbnz	r4, 80070c0 <_malloc_r+0x88>
 800706e:	4629      	mov	r1, r5
 8007070:	4630      	mov	r0, r6
 8007072:	f7ff ffbf 	bl	8006ff4 <sbrk_aligned>
 8007076:	1c43      	adds	r3, r0, #1
 8007078:	4604      	mov	r4, r0
 800707a:	d158      	bne.n	800712e <_malloc_r+0xf6>
 800707c:	f8d8 4000 	ldr.w	r4, [r8]
 8007080:	4627      	mov	r7, r4
 8007082:	2f00      	cmp	r7, #0
 8007084:	d143      	bne.n	800710e <_malloc_r+0xd6>
 8007086:	2c00      	cmp	r4, #0
 8007088:	d04b      	beq.n	8007122 <_malloc_r+0xea>
 800708a:	6823      	ldr	r3, [r4, #0]
 800708c:	4639      	mov	r1, r7
 800708e:	4630      	mov	r0, r6
 8007090:	eb04 0903 	add.w	r9, r4, r3
 8007094:	f000 fb5c 	bl	8007750 <_sbrk_r>
 8007098:	4581      	cmp	r9, r0
 800709a:	d142      	bne.n	8007122 <_malloc_r+0xea>
 800709c:	6821      	ldr	r1, [r4, #0]
 800709e:	1a6d      	subs	r5, r5, r1
 80070a0:	4629      	mov	r1, r5
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffa6 	bl	8006ff4 <sbrk_aligned>
 80070a8:	3001      	adds	r0, #1
 80070aa:	d03a      	beq.n	8007122 <_malloc_r+0xea>
 80070ac:	6823      	ldr	r3, [r4, #0]
 80070ae:	442b      	add	r3, r5
 80070b0:	6023      	str	r3, [r4, #0]
 80070b2:	f8d8 3000 	ldr.w	r3, [r8]
 80070b6:	685a      	ldr	r2, [r3, #4]
 80070b8:	bb62      	cbnz	r2, 8007114 <_malloc_r+0xdc>
 80070ba:	f8c8 7000 	str.w	r7, [r8]
 80070be:	e00f      	b.n	80070e0 <_malloc_r+0xa8>
 80070c0:	6822      	ldr	r2, [r4, #0]
 80070c2:	1b52      	subs	r2, r2, r5
 80070c4:	d420      	bmi.n	8007108 <_malloc_r+0xd0>
 80070c6:	2a0b      	cmp	r2, #11
 80070c8:	d917      	bls.n	80070fa <_malloc_r+0xc2>
 80070ca:	1961      	adds	r1, r4, r5
 80070cc:	42a3      	cmp	r3, r4
 80070ce:	6025      	str	r5, [r4, #0]
 80070d0:	bf18      	it	ne
 80070d2:	6059      	strne	r1, [r3, #4]
 80070d4:	6863      	ldr	r3, [r4, #4]
 80070d6:	bf08      	it	eq
 80070d8:	f8c8 1000 	streq.w	r1, [r8]
 80070dc:	5162      	str	r2, [r4, r5]
 80070de:	604b      	str	r3, [r1, #4]
 80070e0:	4630      	mov	r0, r6
 80070e2:	f000 f82f 	bl	8007144 <__malloc_unlock>
 80070e6:	f104 000b 	add.w	r0, r4, #11
 80070ea:	1d23      	adds	r3, r4, #4
 80070ec:	f020 0007 	bic.w	r0, r0, #7
 80070f0:	1ac2      	subs	r2, r0, r3
 80070f2:	bf1c      	itt	ne
 80070f4:	1a1b      	subne	r3, r3, r0
 80070f6:	50a3      	strne	r3, [r4, r2]
 80070f8:	e7af      	b.n	800705a <_malloc_r+0x22>
 80070fa:	6862      	ldr	r2, [r4, #4]
 80070fc:	42a3      	cmp	r3, r4
 80070fe:	bf0c      	ite	eq
 8007100:	f8c8 2000 	streq.w	r2, [r8]
 8007104:	605a      	strne	r2, [r3, #4]
 8007106:	e7eb      	b.n	80070e0 <_malloc_r+0xa8>
 8007108:	4623      	mov	r3, r4
 800710a:	6864      	ldr	r4, [r4, #4]
 800710c:	e7ae      	b.n	800706c <_malloc_r+0x34>
 800710e:	463c      	mov	r4, r7
 8007110:	687f      	ldr	r7, [r7, #4]
 8007112:	e7b6      	b.n	8007082 <_malloc_r+0x4a>
 8007114:	461a      	mov	r2, r3
 8007116:	685b      	ldr	r3, [r3, #4]
 8007118:	42a3      	cmp	r3, r4
 800711a:	d1fb      	bne.n	8007114 <_malloc_r+0xdc>
 800711c:	2300      	movs	r3, #0
 800711e:	6053      	str	r3, [r2, #4]
 8007120:	e7de      	b.n	80070e0 <_malloc_r+0xa8>
 8007122:	230c      	movs	r3, #12
 8007124:	6033      	str	r3, [r6, #0]
 8007126:	4630      	mov	r0, r6
 8007128:	f000 f80c 	bl	8007144 <__malloc_unlock>
 800712c:	e794      	b.n	8007058 <_malloc_r+0x20>
 800712e:	6005      	str	r5, [r0, #0]
 8007130:	e7d6      	b.n	80070e0 <_malloc_r+0xa8>
 8007132:	bf00      	nop
 8007134:	2004ca7c 	.word	0x2004ca7c

08007138 <__malloc_lock>:
 8007138:	4801      	ldr	r0, [pc, #4]	@ (8007140 <__malloc_lock+0x8>)
 800713a:	f7ff bf01 	b.w	8006f40 <__retarget_lock_acquire_recursive>
 800713e:	bf00      	nop
 8007140:	2004ca74 	.word	0x2004ca74

08007144 <__malloc_unlock>:
 8007144:	4801      	ldr	r0, [pc, #4]	@ (800714c <__malloc_unlock+0x8>)
 8007146:	f7ff befc 	b.w	8006f42 <__retarget_lock_release_recursive>
 800714a:	bf00      	nop
 800714c:	2004ca74 	.word	0x2004ca74

08007150 <__ssputs_r>:
 8007150:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007154:	688e      	ldr	r6, [r1, #8]
 8007156:	461f      	mov	r7, r3
 8007158:	42be      	cmp	r6, r7
 800715a:	680b      	ldr	r3, [r1, #0]
 800715c:	4682      	mov	sl, r0
 800715e:	460c      	mov	r4, r1
 8007160:	4690      	mov	r8, r2
 8007162:	d82d      	bhi.n	80071c0 <__ssputs_r+0x70>
 8007164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007168:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800716c:	d026      	beq.n	80071bc <__ssputs_r+0x6c>
 800716e:	6965      	ldr	r5, [r4, #20]
 8007170:	6909      	ldr	r1, [r1, #16]
 8007172:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007176:	eba3 0901 	sub.w	r9, r3, r1
 800717a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800717e:	1c7b      	adds	r3, r7, #1
 8007180:	444b      	add	r3, r9
 8007182:	106d      	asrs	r5, r5, #1
 8007184:	429d      	cmp	r5, r3
 8007186:	bf38      	it	cc
 8007188:	461d      	movcc	r5, r3
 800718a:	0553      	lsls	r3, r2, #21
 800718c:	d527      	bpl.n	80071de <__ssputs_r+0x8e>
 800718e:	4629      	mov	r1, r5
 8007190:	f7ff ff52 	bl	8007038 <_malloc_r>
 8007194:	4606      	mov	r6, r0
 8007196:	b360      	cbz	r0, 80071f2 <__ssputs_r+0xa2>
 8007198:	6921      	ldr	r1, [r4, #16]
 800719a:	464a      	mov	r2, r9
 800719c:	f7ff fed2 	bl	8006f44 <memcpy>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80071a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	6126      	str	r6, [r4, #16]
 80071ae:	6165      	str	r5, [r4, #20]
 80071b0:	444e      	add	r6, r9
 80071b2:	eba5 0509 	sub.w	r5, r5, r9
 80071b6:	6026      	str	r6, [r4, #0]
 80071b8:	60a5      	str	r5, [r4, #8]
 80071ba:	463e      	mov	r6, r7
 80071bc:	42be      	cmp	r6, r7
 80071be:	d900      	bls.n	80071c2 <__ssputs_r+0x72>
 80071c0:	463e      	mov	r6, r7
 80071c2:	6820      	ldr	r0, [r4, #0]
 80071c4:	4632      	mov	r2, r6
 80071c6:	4641      	mov	r1, r8
 80071c8:	f000 faa8 	bl	800771c <memmove>
 80071cc:	68a3      	ldr	r3, [r4, #8]
 80071ce:	1b9b      	subs	r3, r3, r6
 80071d0:	60a3      	str	r3, [r4, #8]
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	4433      	add	r3, r6
 80071d6:	6023      	str	r3, [r4, #0]
 80071d8:	2000      	movs	r0, #0
 80071da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071de:	462a      	mov	r2, r5
 80071e0:	f000 fac6 	bl	8007770 <_realloc_r>
 80071e4:	4606      	mov	r6, r0
 80071e6:	2800      	cmp	r0, #0
 80071e8:	d1e0      	bne.n	80071ac <__ssputs_r+0x5c>
 80071ea:	6921      	ldr	r1, [r4, #16]
 80071ec:	4650      	mov	r0, sl
 80071ee:	f7ff feb7 	bl	8006f60 <_free_r>
 80071f2:	230c      	movs	r3, #12
 80071f4:	f8ca 3000 	str.w	r3, [sl]
 80071f8:	89a3      	ldrh	r3, [r4, #12]
 80071fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80071fe:	81a3      	strh	r3, [r4, #12]
 8007200:	f04f 30ff 	mov.w	r0, #4294967295
 8007204:	e7e9      	b.n	80071da <__ssputs_r+0x8a>
	...

08007208 <_svfiprintf_r>:
 8007208:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800720c:	4698      	mov	r8, r3
 800720e:	898b      	ldrh	r3, [r1, #12]
 8007210:	061b      	lsls	r3, r3, #24
 8007212:	b09d      	sub	sp, #116	@ 0x74
 8007214:	4607      	mov	r7, r0
 8007216:	460d      	mov	r5, r1
 8007218:	4614      	mov	r4, r2
 800721a:	d510      	bpl.n	800723e <_svfiprintf_r+0x36>
 800721c:	690b      	ldr	r3, [r1, #16]
 800721e:	b973      	cbnz	r3, 800723e <_svfiprintf_r+0x36>
 8007220:	2140      	movs	r1, #64	@ 0x40
 8007222:	f7ff ff09 	bl	8007038 <_malloc_r>
 8007226:	6028      	str	r0, [r5, #0]
 8007228:	6128      	str	r0, [r5, #16]
 800722a:	b930      	cbnz	r0, 800723a <_svfiprintf_r+0x32>
 800722c:	230c      	movs	r3, #12
 800722e:	603b      	str	r3, [r7, #0]
 8007230:	f04f 30ff 	mov.w	r0, #4294967295
 8007234:	b01d      	add	sp, #116	@ 0x74
 8007236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800723a:	2340      	movs	r3, #64	@ 0x40
 800723c:	616b      	str	r3, [r5, #20]
 800723e:	2300      	movs	r3, #0
 8007240:	9309      	str	r3, [sp, #36]	@ 0x24
 8007242:	2320      	movs	r3, #32
 8007244:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007248:	f8cd 800c 	str.w	r8, [sp, #12]
 800724c:	2330      	movs	r3, #48	@ 0x30
 800724e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80073ec <_svfiprintf_r+0x1e4>
 8007252:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007256:	f04f 0901 	mov.w	r9, #1
 800725a:	4623      	mov	r3, r4
 800725c:	469a      	mov	sl, r3
 800725e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007262:	b10a      	cbz	r2, 8007268 <_svfiprintf_r+0x60>
 8007264:	2a25      	cmp	r2, #37	@ 0x25
 8007266:	d1f9      	bne.n	800725c <_svfiprintf_r+0x54>
 8007268:	ebba 0b04 	subs.w	fp, sl, r4
 800726c:	d00b      	beq.n	8007286 <_svfiprintf_r+0x7e>
 800726e:	465b      	mov	r3, fp
 8007270:	4622      	mov	r2, r4
 8007272:	4629      	mov	r1, r5
 8007274:	4638      	mov	r0, r7
 8007276:	f7ff ff6b 	bl	8007150 <__ssputs_r>
 800727a:	3001      	adds	r0, #1
 800727c:	f000 80a7 	beq.w	80073ce <_svfiprintf_r+0x1c6>
 8007280:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007282:	445a      	add	r2, fp
 8007284:	9209      	str	r2, [sp, #36]	@ 0x24
 8007286:	f89a 3000 	ldrb.w	r3, [sl]
 800728a:	2b00      	cmp	r3, #0
 800728c:	f000 809f 	beq.w	80073ce <_svfiprintf_r+0x1c6>
 8007290:	2300      	movs	r3, #0
 8007292:	f04f 32ff 	mov.w	r2, #4294967295
 8007296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800729a:	f10a 0a01 	add.w	sl, sl, #1
 800729e:	9304      	str	r3, [sp, #16]
 80072a0:	9307      	str	r3, [sp, #28]
 80072a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80072a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80072a8:	4654      	mov	r4, sl
 80072aa:	2205      	movs	r2, #5
 80072ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072b0:	484e      	ldr	r0, [pc, #312]	@ (80073ec <_svfiprintf_r+0x1e4>)
 80072b2:	f7f9 f805 	bl	80002c0 <memchr>
 80072b6:	9a04      	ldr	r2, [sp, #16]
 80072b8:	b9d8      	cbnz	r0, 80072f2 <_svfiprintf_r+0xea>
 80072ba:	06d0      	lsls	r0, r2, #27
 80072bc:	bf44      	itt	mi
 80072be:	2320      	movmi	r3, #32
 80072c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072c4:	0711      	lsls	r1, r2, #28
 80072c6:	bf44      	itt	mi
 80072c8:	232b      	movmi	r3, #43	@ 0x2b
 80072ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80072ce:	f89a 3000 	ldrb.w	r3, [sl]
 80072d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80072d4:	d015      	beq.n	8007302 <_svfiprintf_r+0xfa>
 80072d6:	9a07      	ldr	r2, [sp, #28]
 80072d8:	4654      	mov	r4, sl
 80072da:	2000      	movs	r0, #0
 80072dc:	f04f 0c0a 	mov.w	ip, #10
 80072e0:	4621      	mov	r1, r4
 80072e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072e6:	3b30      	subs	r3, #48	@ 0x30
 80072e8:	2b09      	cmp	r3, #9
 80072ea:	d94b      	bls.n	8007384 <_svfiprintf_r+0x17c>
 80072ec:	b1b0      	cbz	r0, 800731c <_svfiprintf_r+0x114>
 80072ee:	9207      	str	r2, [sp, #28]
 80072f0:	e014      	b.n	800731c <_svfiprintf_r+0x114>
 80072f2:	eba0 0308 	sub.w	r3, r0, r8
 80072f6:	fa09 f303 	lsl.w	r3, r9, r3
 80072fa:	4313      	orrs	r3, r2
 80072fc:	9304      	str	r3, [sp, #16]
 80072fe:	46a2      	mov	sl, r4
 8007300:	e7d2      	b.n	80072a8 <_svfiprintf_r+0xa0>
 8007302:	9b03      	ldr	r3, [sp, #12]
 8007304:	1d19      	adds	r1, r3, #4
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	9103      	str	r1, [sp, #12]
 800730a:	2b00      	cmp	r3, #0
 800730c:	bfbb      	ittet	lt
 800730e:	425b      	neglt	r3, r3
 8007310:	f042 0202 	orrlt.w	r2, r2, #2
 8007314:	9307      	strge	r3, [sp, #28]
 8007316:	9307      	strlt	r3, [sp, #28]
 8007318:	bfb8      	it	lt
 800731a:	9204      	strlt	r2, [sp, #16]
 800731c:	7823      	ldrb	r3, [r4, #0]
 800731e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007320:	d10a      	bne.n	8007338 <_svfiprintf_r+0x130>
 8007322:	7863      	ldrb	r3, [r4, #1]
 8007324:	2b2a      	cmp	r3, #42	@ 0x2a
 8007326:	d132      	bne.n	800738e <_svfiprintf_r+0x186>
 8007328:	9b03      	ldr	r3, [sp, #12]
 800732a:	1d1a      	adds	r2, r3, #4
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	9203      	str	r2, [sp, #12]
 8007330:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007334:	3402      	adds	r4, #2
 8007336:	9305      	str	r3, [sp, #20]
 8007338:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80073fc <_svfiprintf_r+0x1f4>
 800733c:	7821      	ldrb	r1, [r4, #0]
 800733e:	2203      	movs	r2, #3
 8007340:	4650      	mov	r0, sl
 8007342:	f7f8 ffbd 	bl	80002c0 <memchr>
 8007346:	b138      	cbz	r0, 8007358 <_svfiprintf_r+0x150>
 8007348:	9b04      	ldr	r3, [sp, #16]
 800734a:	eba0 000a 	sub.w	r0, r0, sl
 800734e:	2240      	movs	r2, #64	@ 0x40
 8007350:	4082      	lsls	r2, r0
 8007352:	4313      	orrs	r3, r2
 8007354:	3401      	adds	r4, #1
 8007356:	9304      	str	r3, [sp, #16]
 8007358:	f814 1b01 	ldrb.w	r1, [r4], #1
 800735c:	4824      	ldr	r0, [pc, #144]	@ (80073f0 <_svfiprintf_r+0x1e8>)
 800735e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007362:	2206      	movs	r2, #6
 8007364:	f7f8 ffac 	bl	80002c0 <memchr>
 8007368:	2800      	cmp	r0, #0
 800736a:	d036      	beq.n	80073da <_svfiprintf_r+0x1d2>
 800736c:	4b21      	ldr	r3, [pc, #132]	@ (80073f4 <_svfiprintf_r+0x1ec>)
 800736e:	bb1b      	cbnz	r3, 80073b8 <_svfiprintf_r+0x1b0>
 8007370:	9b03      	ldr	r3, [sp, #12]
 8007372:	3307      	adds	r3, #7
 8007374:	f023 0307 	bic.w	r3, r3, #7
 8007378:	3308      	adds	r3, #8
 800737a:	9303      	str	r3, [sp, #12]
 800737c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737e:	4433      	add	r3, r6
 8007380:	9309      	str	r3, [sp, #36]	@ 0x24
 8007382:	e76a      	b.n	800725a <_svfiprintf_r+0x52>
 8007384:	fb0c 3202 	mla	r2, ip, r2, r3
 8007388:	460c      	mov	r4, r1
 800738a:	2001      	movs	r0, #1
 800738c:	e7a8      	b.n	80072e0 <_svfiprintf_r+0xd8>
 800738e:	2300      	movs	r3, #0
 8007390:	3401      	adds	r4, #1
 8007392:	9305      	str	r3, [sp, #20]
 8007394:	4619      	mov	r1, r3
 8007396:	f04f 0c0a 	mov.w	ip, #10
 800739a:	4620      	mov	r0, r4
 800739c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80073a0:	3a30      	subs	r2, #48	@ 0x30
 80073a2:	2a09      	cmp	r2, #9
 80073a4:	d903      	bls.n	80073ae <_svfiprintf_r+0x1a6>
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d0c6      	beq.n	8007338 <_svfiprintf_r+0x130>
 80073aa:	9105      	str	r1, [sp, #20]
 80073ac:	e7c4      	b.n	8007338 <_svfiprintf_r+0x130>
 80073ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80073b2:	4604      	mov	r4, r0
 80073b4:	2301      	movs	r3, #1
 80073b6:	e7f0      	b.n	800739a <_svfiprintf_r+0x192>
 80073b8:	ab03      	add	r3, sp, #12
 80073ba:	9300      	str	r3, [sp, #0]
 80073bc:	462a      	mov	r2, r5
 80073be:	4b0e      	ldr	r3, [pc, #56]	@ (80073f8 <_svfiprintf_r+0x1f0>)
 80073c0:	a904      	add	r1, sp, #16
 80073c2:	4638      	mov	r0, r7
 80073c4:	f3af 8000 	nop.w
 80073c8:	1c42      	adds	r2, r0, #1
 80073ca:	4606      	mov	r6, r0
 80073cc:	d1d6      	bne.n	800737c <_svfiprintf_r+0x174>
 80073ce:	89ab      	ldrh	r3, [r5, #12]
 80073d0:	065b      	lsls	r3, r3, #25
 80073d2:	f53f af2d 	bmi.w	8007230 <_svfiprintf_r+0x28>
 80073d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80073d8:	e72c      	b.n	8007234 <_svfiprintf_r+0x2c>
 80073da:	ab03      	add	r3, sp, #12
 80073dc:	9300      	str	r3, [sp, #0]
 80073de:	462a      	mov	r2, r5
 80073e0:	4b05      	ldr	r3, [pc, #20]	@ (80073f8 <_svfiprintf_r+0x1f0>)
 80073e2:	a904      	add	r1, sp, #16
 80073e4:	4638      	mov	r0, r7
 80073e6:	f000 f879 	bl	80074dc <_printf_i>
 80073ea:	e7ed      	b.n	80073c8 <_svfiprintf_r+0x1c0>
 80073ec:	08007968 	.word	0x08007968
 80073f0:	08007972 	.word	0x08007972
 80073f4:	00000000 	.word	0x00000000
 80073f8:	08007151 	.word	0x08007151
 80073fc:	0800796e 	.word	0x0800796e

08007400 <_printf_common>:
 8007400:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007404:	4616      	mov	r6, r2
 8007406:	4698      	mov	r8, r3
 8007408:	688a      	ldr	r2, [r1, #8]
 800740a:	690b      	ldr	r3, [r1, #16]
 800740c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007410:	4293      	cmp	r3, r2
 8007412:	bfb8      	it	lt
 8007414:	4613      	movlt	r3, r2
 8007416:	6033      	str	r3, [r6, #0]
 8007418:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800741c:	4607      	mov	r7, r0
 800741e:	460c      	mov	r4, r1
 8007420:	b10a      	cbz	r2, 8007426 <_printf_common+0x26>
 8007422:	3301      	adds	r3, #1
 8007424:	6033      	str	r3, [r6, #0]
 8007426:	6823      	ldr	r3, [r4, #0]
 8007428:	0699      	lsls	r1, r3, #26
 800742a:	bf42      	ittt	mi
 800742c:	6833      	ldrmi	r3, [r6, #0]
 800742e:	3302      	addmi	r3, #2
 8007430:	6033      	strmi	r3, [r6, #0]
 8007432:	6825      	ldr	r5, [r4, #0]
 8007434:	f015 0506 	ands.w	r5, r5, #6
 8007438:	d106      	bne.n	8007448 <_printf_common+0x48>
 800743a:	f104 0a19 	add.w	sl, r4, #25
 800743e:	68e3      	ldr	r3, [r4, #12]
 8007440:	6832      	ldr	r2, [r6, #0]
 8007442:	1a9b      	subs	r3, r3, r2
 8007444:	42ab      	cmp	r3, r5
 8007446:	dc26      	bgt.n	8007496 <_printf_common+0x96>
 8007448:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800744c:	6822      	ldr	r2, [r4, #0]
 800744e:	3b00      	subs	r3, #0
 8007450:	bf18      	it	ne
 8007452:	2301      	movne	r3, #1
 8007454:	0692      	lsls	r2, r2, #26
 8007456:	d42b      	bmi.n	80074b0 <_printf_common+0xb0>
 8007458:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800745c:	4641      	mov	r1, r8
 800745e:	4638      	mov	r0, r7
 8007460:	47c8      	blx	r9
 8007462:	3001      	adds	r0, #1
 8007464:	d01e      	beq.n	80074a4 <_printf_common+0xa4>
 8007466:	6823      	ldr	r3, [r4, #0]
 8007468:	6922      	ldr	r2, [r4, #16]
 800746a:	f003 0306 	and.w	r3, r3, #6
 800746e:	2b04      	cmp	r3, #4
 8007470:	bf02      	ittt	eq
 8007472:	68e5      	ldreq	r5, [r4, #12]
 8007474:	6833      	ldreq	r3, [r6, #0]
 8007476:	1aed      	subeq	r5, r5, r3
 8007478:	68a3      	ldr	r3, [r4, #8]
 800747a:	bf0c      	ite	eq
 800747c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007480:	2500      	movne	r5, #0
 8007482:	4293      	cmp	r3, r2
 8007484:	bfc4      	itt	gt
 8007486:	1a9b      	subgt	r3, r3, r2
 8007488:	18ed      	addgt	r5, r5, r3
 800748a:	2600      	movs	r6, #0
 800748c:	341a      	adds	r4, #26
 800748e:	42b5      	cmp	r5, r6
 8007490:	d11a      	bne.n	80074c8 <_printf_common+0xc8>
 8007492:	2000      	movs	r0, #0
 8007494:	e008      	b.n	80074a8 <_printf_common+0xa8>
 8007496:	2301      	movs	r3, #1
 8007498:	4652      	mov	r2, sl
 800749a:	4641      	mov	r1, r8
 800749c:	4638      	mov	r0, r7
 800749e:	47c8      	blx	r9
 80074a0:	3001      	adds	r0, #1
 80074a2:	d103      	bne.n	80074ac <_printf_common+0xac>
 80074a4:	f04f 30ff 	mov.w	r0, #4294967295
 80074a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074ac:	3501      	adds	r5, #1
 80074ae:	e7c6      	b.n	800743e <_printf_common+0x3e>
 80074b0:	18e1      	adds	r1, r4, r3
 80074b2:	1c5a      	adds	r2, r3, #1
 80074b4:	2030      	movs	r0, #48	@ 0x30
 80074b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80074ba:	4422      	add	r2, r4
 80074bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80074c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80074c4:	3302      	adds	r3, #2
 80074c6:	e7c7      	b.n	8007458 <_printf_common+0x58>
 80074c8:	2301      	movs	r3, #1
 80074ca:	4622      	mov	r2, r4
 80074cc:	4641      	mov	r1, r8
 80074ce:	4638      	mov	r0, r7
 80074d0:	47c8      	blx	r9
 80074d2:	3001      	adds	r0, #1
 80074d4:	d0e6      	beq.n	80074a4 <_printf_common+0xa4>
 80074d6:	3601      	adds	r6, #1
 80074d8:	e7d9      	b.n	800748e <_printf_common+0x8e>
	...

080074dc <_printf_i>:
 80074dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074e0:	7e0f      	ldrb	r7, [r1, #24]
 80074e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80074e4:	2f78      	cmp	r7, #120	@ 0x78
 80074e6:	4691      	mov	r9, r2
 80074e8:	4680      	mov	r8, r0
 80074ea:	460c      	mov	r4, r1
 80074ec:	469a      	mov	sl, r3
 80074ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80074f2:	d807      	bhi.n	8007504 <_printf_i+0x28>
 80074f4:	2f62      	cmp	r7, #98	@ 0x62
 80074f6:	d80a      	bhi.n	800750e <_printf_i+0x32>
 80074f8:	2f00      	cmp	r7, #0
 80074fa:	f000 80d2 	beq.w	80076a2 <_printf_i+0x1c6>
 80074fe:	2f58      	cmp	r7, #88	@ 0x58
 8007500:	f000 80b9 	beq.w	8007676 <_printf_i+0x19a>
 8007504:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007508:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800750c:	e03a      	b.n	8007584 <_printf_i+0xa8>
 800750e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007512:	2b15      	cmp	r3, #21
 8007514:	d8f6      	bhi.n	8007504 <_printf_i+0x28>
 8007516:	a101      	add	r1, pc, #4	@ (adr r1, 800751c <_printf_i+0x40>)
 8007518:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800751c:	08007575 	.word	0x08007575
 8007520:	08007589 	.word	0x08007589
 8007524:	08007505 	.word	0x08007505
 8007528:	08007505 	.word	0x08007505
 800752c:	08007505 	.word	0x08007505
 8007530:	08007505 	.word	0x08007505
 8007534:	08007589 	.word	0x08007589
 8007538:	08007505 	.word	0x08007505
 800753c:	08007505 	.word	0x08007505
 8007540:	08007505 	.word	0x08007505
 8007544:	08007505 	.word	0x08007505
 8007548:	08007689 	.word	0x08007689
 800754c:	080075b3 	.word	0x080075b3
 8007550:	08007643 	.word	0x08007643
 8007554:	08007505 	.word	0x08007505
 8007558:	08007505 	.word	0x08007505
 800755c:	080076ab 	.word	0x080076ab
 8007560:	08007505 	.word	0x08007505
 8007564:	080075b3 	.word	0x080075b3
 8007568:	08007505 	.word	0x08007505
 800756c:	08007505 	.word	0x08007505
 8007570:	0800764b 	.word	0x0800764b
 8007574:	6833      	ldr	r3, [r6, #0]
 8007576:	1d1a      	adds	r2, r3, #4
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	6032      	str	r2, [r6, #0]
 800757c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007580:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007584:	2301      	movs	r3, #1
 8007586:	e09d      	b.n	80076c4 <_printf_i+0x1e8>
 8007588:	6833      	ldr	r3, [r6, #0]
 800758a:	6820      	ldr	r0, [r4, #0]
 800758c:	1d19      	adds	r1, r3, #4
 800758e:	6031      	str	r1, [r6, #0]
 8007590:	0606      	lsls	r6, r0, #24
 8007592:	d501      	bpl.n	8007598 <_printf_i+0xbc>
 8007594:	681d      	ldr	r5, [r3, #0]
 8007596:	e003      	b.n	80075a0 <_printf_i+0xc4>
 8007598:	0645      	lsls	r5, r0, #25
 800759a:	d5fb      	bpl.n	8007594 <_printf_i+0xb8>
 800759c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80075a0:	2d00      	cmp	r5, #0
 80075a2:	da03      	bge.n	80075ac <_printf_i+0xd0>
 80075a4:	232d      	movs	r3, #45	@ 0x2d
 80075a6:	426d      	negs	r5, r5
 80075a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80075ac:	4859      	ldr	r0, [pc, #356]	@ (8007714 <_printf_i+0x238>)
 80075ae:	230a      	movs	r3, #10
 80075b0:	e011      	b.n	80075d6 <_printf_i+0xfa>
 80075b2:	6821      	ldr	r1, [r4, #0]
 80075b4:	6833      	ldr	r3, [r6, #0]
 80075b6:	0608      	lsls	r0, r1, #24
 80075b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80075bc:	d402      	bmi.n	80075c4 <_printf_i+0xe8>
 80075be:	0649      	lsls	r1, r1, #25
 80075c0:	bf48      	it	mi
 80075c2:	b2ad      	uxthmi	r5, r5
 80075c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80075c6:	4853      	ldr	r0, [pc, #332]	@ (8007714 <_printf_i+0x238>)
 80075c8:	6033      	str	r3, [r6, #0]
 80075ca:	bf14      	ite	ne
 80075cc:	230a      	movne	r3, #10
 80075ce:	2308      	moveq	r3, #8
 80075d0:	2100      	movs	r1, #0
 80075d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80075d6:	6866      	ldr	r6, [r4, #4]
 80075d8:	60a6      	str	r6, [r4, #8]
 80075da:	2e00      	cmp	r6, #0
 80075dc:	bfa2      	ittt	ge
 80075de:	6821      	ldrge	r1, [r4, #0]
 80075e0:	f021 0104 	bicge.w	r1, r1, #4
 80075e4:	6021      	strge	r1, [r4, #0]
 80075e6:	b90d      	cbnz	r5, 80075ec <_printf_i+0x110>
 80075e8:	2e00      	cmp	r6, #0
 80075ea:	d04b      	beq.n	8007684 <_printf_i+0x1a8>
 80075ec:	4616      	mov	r6, r2
 80075ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80075f2:	fb03 5711 	mls	r7, r3, r1, r5
 80075f6:	5dc7      	ldrb	r7, [r0, r7]
 80075f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075fc:	462f      	mov	r7, r5
 80075fe:	42bb      	cmp	r3, r7
 8007600:	460d      	mov	r5, r1
 8007602:	d9f4      	bls.n	80075ee <_printf_i+0x112>
 8007604:	2b08      	cmp	r3, #8
 8007606:	d10b      	bne.n	8007620 <_printf_i+0x144>
 8007608:	6823      	ldr	r3, [r4, #0]
 800760a:	07df      	lsls	r7, r3, #31
 800760c:	d508      	bpl.n	8007620 <_printf_i+0x144>
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	6861      	ldr	r1, [r4, #4]
 8007612:	4299      	cmp	r1, r3
 8007614:	bfde      	ittt	le
 8007616:	2330      	movle	r3, #48	@ 0x30
 8007618:	f806 3c01 	strble.w	r3, [r6, #-1]
 800761c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007620:	1b92      	subs	r2, r2, r6
 8007622:	6122      	str	r2, [r4, #16]
 8007624:	f8cd a000 	str.w	sl, [sp]
 8007628:	464b      	mov	r3, r9
 800762a:	aa03      	add	r2, sp, #12
 800762c:	4621      	mov	r1, r4
 800762e:	4640      	mov	r0, r8
 8007630:	f7ff fee6 	bl	8007400 <_printf_common>
 8007634:	3001      	adds	r0, #1
 8007636:	d14a      	bne.n	80076ce <_printf_i+0x1f2>
 8007638:	f04f 30ff 	mov.w	r0, #4294967295
 800763c:	b004      	add	sp, #16
 800763e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007642:	6823      	ldr	r3, [r4, #0]
 8007644:	f043 0320 	orr.w	r3, r3, #32
 8007648:	6023      	str	r3, [r4, #0]
 800764a:	4833      	ldr	r0, [pc, #204]	@ (8007718 <_printf_i+0x23c>)
 800764c:	2778      	movs	r7, #120	@ 0x78
 800764e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007652:	6823      	ldr	r3, [r4, #0]
 8007654:	6831      	ldr	r1, [r6, #0]
 8007656:	061f      	lsls	r7, r3, #24
 8007658:	f851 5b04 	ldr.w	r5, [r1], #4
 800765c:	d402      	bmi.n	8007664 <_printf_i+0x188>
 800765e:	065f      	lsls	r7, r3, #25
 8007660:	bf48      	it	mi
 8007662:	b2ad      	uxthmi	r5, r5
 8007664:	6031      	str	r1, [r6, #0]
 8007666:	07d9      	lsls	r1, r3, #31
 8007668:	bf44      	itt	mi
 800766a:	f043 0320 	orrmi.w	r3, r3, #32
 800766e:	6023      	strmi	r3, [r4, #0]
 8007670:	b11d      	cbz	r5, 800767a <_printf_i+0x19e>
 8007672:	2310      	movs	r3, #16
 8007674:	e7ac      	b.n	80075d0 <_printf_i+0xf4>
 8007676:	4827      	ldr	r0, [pc, #156]	@ (8007714 <_printf_i+0x238>)
 8007678:	e7e9      	b.n	800764e <_printf_i+0x172>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	f023 0320 	bic.w	r3, r3, #32
 8007680:	6023      	str	r3, [r4, #0]
 8007682:	e7f6      	b.n	8007672 <_printf_i+0x196>
 8007684:	4616      	mov	r6, r2
 8007686:	e7bd      	b.n	8007604 <_printf_i+0x128>
 8007688:	6833      	ldr	r3, [r6, #0]
 800768a:	6825      	ldr	r5, [r4, #0]
 800768c:	6961      	ldr	r1, [r4, #20]
 800768e:	1d18      	adds	r0, r3, #4
 8007690:	6030      	str	r0, [r6, #0]
 8007692:	062e      	lsls	r6, r5, #24
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	d501      	bpl.n	800769c <_printf_i+0x1c0>
 8007698:	6019      	str	r1, [r3, #0]
 800769a:	e002      	b.n	80076a2 <_printf_i+0x1c6>
 800769c:	0668      	lsls	r0, r5, #25
 800769e:	d5fb      	bpl.n	8007698 <_printf_i+0x1bc>
 80076a0:	8019      	strh	r1, [r3, #0]
 80076a2:	2300      	movs	r3, #0
 80076a4:	6123      	str	r3, [r4, #16]
 80076a6:	4616      	mov	r6, r2
 80076a8:	e7bc      	b.n	8007624 <_printf_i+0x148>
 80076aa:	6833      	ldr	r3, [r6, #0]
 80076ac:	1d1a      	adds	r2, r3, #4
 80076ae:	6032      	str	r2, [r6, #0]
 80076b0:	681e      	ldr	r6, [r3, #0]
 80076b2:	6862      	ldr	r2, [r4, #4]
 80076b4:	2100      	movs	r1, #0
 80076b6:	4630      	mov	r0, r6
 80076b8:	f7f8 fe02 	bl	80002c0 <memchr>
 80076bc:	b108      	cbz	r0, 80076c2 <_printf_i+0x1e6>
 80076be:	1b80      	subs	r0, r0, r6
 80076c0:	6060      	str	r0, [r4, #4]
 80076c2:	6863      	ldr	r3, [r4, #4]
 80076c4:	6123      	str	r3, [r4, #16]
 80076c6:	2300      	movs	r3, #0
 80076c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80076cc:	e7aa      	b.n	8007624 <_printf_i+0x148>
 80076ce:	6923      	ldr	r3, [r4, #16]
 80076d0:	4632      	mov	r2, r6
 80076d2:	4649      	mov	r1, r9
 80076d4:	4640      	mov	r0, r8
 80076d6:	47d0      	blx	sl
 80076d8:	3001      	adds	r0, #1
 80076da:	d0ad      	beq.n	8007638 <_printf_i+0x15c>
 80076dc:	6823      	ldr	r3, [r4, #0]
 80076de:	079b      	lsls	r3, r3, #30
 80076e0:	d413      	bmi.n	800770a <_printf_i+0x22e>
 80076e2:	68e0      	ldr	r0, [r4, #12]
 80076e4:	9b03      	ldr	r3, [sp, #12]
 80076e6:	4298      	cmp	r0, r3
 80076e8:	bfb8      	it	lt
 80076ea:	4618      	movlt	r0, r3
 80076ec:	e7a6      	b.n	800763c <_printf_i+0x160>
 80076ee:	2301      	movs	r3, #1
 80076f0:	4632      	mov	r2, r6
 80076f2:	4649      	mov	r1, r9
 80076f4:	4640      	mov	r0, r8
 80076f6:	47d0      	blx	sl
 80076f8:	3001      	adds	r0, #1
 80076fa:	d09d      	beq.n	8007638 <_printf_i+0x15c>
 80076fc:	3501      	adds	r5, #1
 80076fe:	68e3      	ldr	r3, [r4, #12]
 8007700:	9903      	ldr	r1, [sp, #12]
 8007702:	1a5b      	subs	r3, r3, r1
 8007704:	42ab      	cmp	r3, r5
 8007706:	dcf2      	bgt.n	80076ee <_printf_i+0x212>
 8007708:	e7eb      	b.n	80076e2 <_printf_i+0x206>
 800770a:	2500      	movs	r5, #0
 800770c:	f104 0619 	add.w	r6, r4, #25
 8007710:	e7f5      	b.n	80076fe <_printf_i+0x222>
 8007712:	bf00      	nop
 8007714:	08007979 	.word	0x08007979
 8007718:	0800798a 	.word	0x0800798a

0800771c <memmove>:
 800771c:	4288      	cmp	r0, r1
 800771e:	b510      	push	{r4, lr}
 8007720:	eb01 0402 	add.w	r4, r1, r2
 8007724:	d902      	bls.n	800772c <memmove+0x10>
 8007726:	4284      	cmp	r4, r0
 8007728:	4623      	mov	r3, r4
 800772a:	d807      	bhi.n	800773c <memmove+0x20>
 800772c:	1e43      	subs	r3, r0, #1
 800772e:	42a1      	cmp	r1, r4
 8007730:	d008      	beq.n	8007744 <memmove+0x28>
 8007732:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007736:	f803 2f01 	strb.w	r2, [r3, #1]!
 800773a:	e7f8      	b.n	800772e <memmove+0x12>
 800773c:	4402      	add	r2, r0
 800773e:	4601      	mov	r1, r0
 8007740:	428a      	cmp	r2, r1
 8007742:	d100      	bne.n	8007746 <memmove+0x2a>
 8007744:	bd10      	pop	{r4, pc}
 8007746:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800774a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800774e:	e7f7      	b.n	8007740 <memmove+0x24>

08007750 <_sbrk_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	@ (800776c <_sbrk_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f000 f83e 	bl	80077dc <_sbrk>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_sbrk_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_sbrk_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	2004ca70 	.word	0x2004ca70

08007770 <_realloc_r>:
 8007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007774:	4680      	mov	r8, r0
 8007776:	4615      	mov	r5, r2
 8007778:	460c      	mov	r4, r1
 800777a:	b921      	cbnz	r1, 8007786 <_realloc_r+0x16>
 800777c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007780:	4611      	mov	r1, r2
 8007782:	f7ff bc59 	b.w	8007038 <_malloc_r>
 8007786:	b92a      	cbnz	r2, 8007794 <_realloc_r+0x24>
 8007788:	f7ff fbea 	bl	8006f60 <_free_r>
 800778c:	2400      	movs	r4, #0
 800778e:	4620      	mov	r0, r4
 8007790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007794:	f000 f81a 	bl	80077cc <_malloc_usable_size_r>
 8007798:	4285      	cmp	r5, r0
 800779a:	4606      	mov	r6, r0
 800779c:	d802      	bhi.n	80077a4 <_realloc_r+0x34>
 800779e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80077a2:	d8f4      	bhi.n	800778e <_realloc_r+0x1e>
 80077a4:	4629      	mov	r1, r5
 80077a6:	4640      	mov	r0, r8
 80077a8:	f7ff fc46 	bl	8007038 <_malloc_r>
 80077ac:	4607      	mov	r7, r0
 80077ae:	2800      	cmp	r0, #0
 80077b0:	d0ec      	beq.n	800778c <_realloc_r+0x1c>
 80077b2:	42b5      	cmp	r5, r6
 80077b4:	462a      	mov	r2, r5
 80077b6:	4621      	mov	r1, r4
 80077b8:	bf28      	it	cs
 80077ba:	4632      	movcs	r2, r6
 80077bc:	f7ff fbc2 	bl	8006f44 <memcpy>
 80077c0:	4621      	mov	r1, r4
 80077c2:	4640      	mov	r0, r8
 80077c4:	f7ff fbcc 	bl	8006f60 <_free_r>
 80077c8:	463c      	mov	r4, r7
 80077ca:	e7e0      	b.n	800778e <_realloc_r+0x1e>

080077cc <_malloc_usable_size_r>:
 80077cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077d0:	1f18      	subs	r0, r3, #4
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	bfbc      	itt	lt
 80077d6:	580b      	ldrlt	r3, [r1, r0]
 80077d8:	18c0      	addlt	r0, r0, r3
 80077da:	4770      	bx	lr

080077dc <_sbrk>:
 80077dc:	4a04      	ldr	r2, [pc, #16]	@ (80077f0 <_sbrk+0x14>)
 80077de:	6811      	ldr	r1, [r2, #0]
 80077e0:	4603      	mov	r3, r0
 80077e2:	b909      	cbnz	r1, 80077e8 <_sbrk+0xc>
 80077e4:	4903      	ldr	r1, [pc, #12]	@ (80077f4 <_sbrk+0x18>)
 80077e6:	6011      	str	r1, [r2, #0]
 80077e8:	6810      	ldr	r0, [r2, #0]
 80077ea:	4403      	add	r3, r0
 80077ec:	6013      	str	r3, [r2, #0]
 80077ee:	4770      	bx	lr
 80077f0:	2004ca80 	.word	0x2004ca80
 80077f4:	2004ca88 	.word	0x2004ca88

080077f8 <_init>:
 80077f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fa:	bf00      	nop
 80077fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fe:	bc08      	pop	{r3}
 8007800:	469e      	mov	lr, r3
 8007802:	4770      	bx	lr

08007804 <_fini>:
 8007804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007806:	bf00      	nop
 8007808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780a:	bc08      	pop	{r3}
 800780c:	469e      	mov	lr, r3
 800780e:	4770      	bx	lr

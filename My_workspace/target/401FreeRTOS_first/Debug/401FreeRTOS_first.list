
401FreeRTOS_first.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006ec0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  080070a0  080070a0  000080a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800722c  0800722c  00009064  2**0
                  CONTENTS
  4 .ARM          00000008  0800722c  0800722c  0000822c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007234  08007234  00009064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007234  08007234  00008234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007238  08007238  00008238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  0800723c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c9d0  20000064  080072a0  00009064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004ca34  080072a0  00009a34  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014414  00000000  00000000  00009094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000030c1  00000000  00000000  0001d4a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001358  00000000  00000000  00020570  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee0  00000000  00000000  000218c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023a94  00000000  00000000  000227a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016f5a  00000000  00000000  0004623c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dad1b  00000000  00000000  0005d196  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00137eb1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000055f0  00000000  00000000  00137ef4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  0013d4e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000064 	.word	0x20000064
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007088 	.word	0x08007088

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000068 	.word	0x20000068
 800021c:	08007088 	.word	0x08007088

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2004b314 	.word	0x2004b314
	...

080002c0 <memchr>:
 80002c0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002c4:	2a10      	cmp	r2, #16
 80002c6:	db2b      	blt.n	8000320 <memchr+0x60>
 80002c8:	f010 0f07 	tst.w	r0, #7
 80002cc:	d008      	beq.n	80002e0 <memchr+0x20>
 80002ce:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d2:	3a01      	subs	r2, #1
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d02d      	beq.n	8000334 <memchr+0x74>
 80002d8:	f010 0f07 	tst.w	r0, #7
 80002dc:	b342      	cbz	r2, 8000330 <memchr+0x70>
 80002de:	d1f6      	bne.n	80002ce <memchr+0xe>
 80002e0:	b4f0      	push	{r4, r5, r6, r7}
 80002e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002ea:	f022 0407 	bic.w	r4, r2, #7
 80002ee:	f07f 0700 	mvns.w	r7, #0
 80002f2:	2300      	movs	r3, #0
 80002f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002f8:	3c08      	subs	r4, #8
 80002fa:	ea85 0501 	eor.w	r5, r5, r1
 80002fe:	ea86 0601 	eor.w	r6, r6, r1
 8000302:	fa85 f547 	uadd8	r5, r5, r7
 8000306:	faa3 f587 	sel	r5, r3, r7
 800030a:	fa86 f647 	uadd8	r6, r6, r7
 800030e:	faa5 f687 	sel	r6, r5, r7
 8000312:	b98e      	cbnz	r6, 8000338 <memchr+0x78>
 8000314:	d1ee      	bne.n	80002f4 <memchr+0x34>
 8000316:	bcf0      	pop	{r4, r5, r6, r7}
 8000318:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800031c:	f002 0207 	and.w	r2, r2, #7
 8000320:	b132      	cbz	r2, 8000330 <memchr+0x70>
 8000322:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000326:	3a01      	subs	r2, #1
 8000328:	ea83 0301 	eor.w	r3, r3, r1
 800032c:	b113      	cbz	r3, 8000334 <memchr+0x74>
 800032e:	d1f8      	bne.n	8000322 <memchr+0x62>
 8000330:	2000      	movs	r0, #0
 8000332:	4770      	bx	lr
 8000334:	3801      	subs	r0, #1
 8000336:	4770      	bx	lr
 8000338:	2d00      	cmp	r5, #0
 800033a:	bf06      	itte	eq
 800033c:	4635      	moveq	r5, r6
 800033e:	3803      	subeq	r0, #3
 8000340:	3807      	subne	r0, #7
 8000342:	f015 0f01 	tst.w	r5, #1
 8000346:	d107      	bne.n	8000358 <memchr+0x98>
 8000348:	3001      	adds	r0, #1
 800034a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800034e:	bf02      	ittt	eq
 8000350:	3001      	addeq	r0, #1
 8000352:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000356:	3001      	addeq	r0, #1
 8000358:	bcf0      	pop	{r4, r5, r6, r7}
 800035a:	3801      	subs	r0, #1
 800035c:	4770      	bx	lr
 800035e:	bf00      	nop

08000360 <__aeabi_uldivmod>:
 8000360:	b953      	cbnz	r3, 8000378 <__aeabi_uldivmod+0x18>
 8000362:	b94a      	cbnz	r2, 8000378 <__aeabi_uldivmod+0x18>
 8000364:	2900      	cmp	r1, #0
 8000366:	bf08      	it	eq
 8000368:	2800      	cmpeq	r0, #0
 800036a:	bf1c      	itt	ne
 800036c:	f04f 31ff 	movne.w	r1, #4294967295
 8000370:	f04f 30ff 	movne.w	r0, #4294967295
 8000374:	f000 b96a 	b.w	800064c <__aeabi_idiv0>
 8000378:	f1ad 0c08 	sub.w	ip, sp, #8
 800037c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000380:	f000 f806 	bl	8000390 <__udivmoddi4>
 8000384:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000388:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800038c:	b004      	add	sp, #16
 800038e:	4770      	bx	lr

08000390 <__udivmoddi4>:
 8000390:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000394:	9d08      	ldr	r5, [sp, #32]
 8000396:	460c      	mov	r4, r1
 8000398:	2b00      	cmp	r3, #0
 800039a:	d14e      	bne.n	800043a <__udivmoddi4+0xaa>
 800039c:	4694      	mov	ip, r2
 800039e:	458c      	cmp	ip, r1
 80003a0:	4686      	mov	lr, r0
 80003a2:	fab2 f282 	clz	r2, r2
 80003a6:	d962      	bls.n	800046e <__udivmoddi4+0xde>
 80003a8:	b14a      	cbz	r2, 80003be <__udivmoddi4+0x2e>
 80003aa:	f1c2 0320 	rsb	r3, r2, #32
 80003ae:	4091      	lsls	r1, r2
 80003b0:	fa20 f303 	lsr.w	r3, r0, r3
 80003b4:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b8:	4319      	orrs	r1, r3
 80003ba:	fa00 fe02 	lsl.w	lr, r0, r2
 80003be:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003c2:	fa1f f68c 	uxth.w	r6, ip
 80003c6:	fbb1 f4f7 	udiv	r4, r1, r7
 80003ca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ce:	fb07 1114 	mls	r1, r7, r4, r1
 80003d2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003d6:	fb04 f106 	mul.w	r1, r4, r6
 80003da:	4299      	cmp	r1, r3
 80003dc:	d90a      	bls.n	80003f4 <__udivmoddi4+0x64>
 80003de:	eb1c 0303 	adds.w	r3, ip, r3
 80003e2:	f104 30ff 	add.w	r0, r4, #4294967295
 80003e6:	f080 8112 	bcs.w	800060e <__udivmoddi4+0x27e>
 80003ea:	4299      	cmp	r1, r3
 80003ec:	f240 810f 	bls.w	800060e <__udivmoddi4+0x27e>
 80003f0:	3c02      	subs	r4, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a59      	subs	r1, r3, r1
 80003f6:	fa1f f38e 	uxth.w	r3, lr
 80003fa:	fbb1 f0f7 	udiv	r0, r1, r7
 80003fe:	fb07 1110 	mls	r1, r7, r0, r1
 8000402:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000406:	fb00 f606 	mul.w	r6, r0, r6
 800040a:	429e      	cmp	r6, r3
 800040c:	d90a      	bls.n	8000424 <__udivmoddi4+0x94>
 800040e:	eb1c 0303 	adds.w	r3, ip, r3
 8000412:	f100 31ff 	add.w	r1, r0, #4294967295
 8000416:	f080 80fc 	bcs.w	8000612 <__udivmoddi4+0x282>
 800041a:	429e      	cmp	r6, r3
 800041c:	f240 80f9 	bls.w	8000612 <__udivmoddi4+0x282>
 8000420:	4463      	add	r3, ip
 8000422:	3802      	subs	r0, #2
 8000424:	1b9b      	subs	r3, r3, r6
 8000426:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800042a:	2100      	movs	r1, #0
 800042c:	b11d      	cbz	r5, 8000436 <__udivmoddi4+0xa6>
 800042e:	40d3      	lsrs	r3, r2
 8000430:	2200      	movs	r2, #0
 8000432:	e9c5 3200 	strd	r3, r2, [r5]
 8000436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800043a:	428b      	cmp	r3, r1
 800043c:	d905      	bls.n	800044a <__udivmoddi4+0xba>
 800043e:	b10d      	cbz	r5, 8000444 <__udivmoddi4+0xb4>
 8000440:	e9c5 0100 	strd	r0, r1, [r5]
 8000444:	2100      	movs	r1, #0
 8000446:	4608      	mov	r0, r1
 8000448:	e7f5      	b.n	8000436 <__udivmoddi4+0xa6>
 800044a:	fab3 f183 	clz	r1, r3
 800044e:	2900      	cmp	r1, #0
 8000450:	d146      	bne.n	80004e0 <__udivmoddi4+0x150>
 8000452:	42a3      	cmp	r3, r4
 8000454:	d302      	bcc.n	800045c <__udivmoddi4+0xcc>
 8000456:	4290      	cmp	r0, r2
 8000458:	f0c0 80f0 	bcc.w	800063c <__udivmoddi4+0x2ac>
 800045c:	1a86      	subs	r6, r0, r2
 800045e:	eb64 0303 	sbc.w	r3, r4, r3
 8000462:	2001      	movs	r0, #1
 8000464:	2d00      	cmp	r5, #0
 8000466:	d0e6      	beq.n	8000436 <__udivmoddi4+0xa6>
 8000468:	e9c5 6300 	strd	r6, r3, [r5]
 800046c:	e7e3      	b.n	8000436 <__udivmoddi4+0xa6>
 800046e:	2a00      	cmp	r2, #0
 8000470:	f040 8090 	bne.w	8000594 <__udivmoddi4+0x204>
 8000474:	eba1 040c 	sub.w	r4, r1, ip
 8000478:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800047c:	fa1f f78c 	uxth.w	r7, ip
 8000480:	2101      	movs	r1, #1
 8000482:	fbb4 f6f8 	udiv	r6, r4, r8
 8000486:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800048a:	fb08 4416 	mls	r4, r8, r6, r4
 800048e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000492:	fb07 f006 	mul.w	r0, r7, r6
 8000496:	4298      	cmp	r0, r3
 8000498:	d908      	bls.n	80004ac <__udivmoddi4+0x11c>
 800049a:	eb1c 0303 	adds.w	r3, ip, r3
 800049e:	f106 34ff 	add.w	r4, r6, #4294967295
 80004a2:	d202      	bcs.n	80004aa <__udivmoddi4+0x11a>
 80004a4:	4298      	cmp	r0, r3
 80004a6:	f200 80cd 	bhi.w	8000644 <__udivmoddi4+0x2b4>
 80004aa:	4626      	mov	r6, r4
 80004ac:	1a1c      	subs	r4, r3, r0
 80004ae:	fa1f f38e 	uxth.w	r3, lr
 80004b2:	fbb4 f0f8 	udiv	r0, r4, r8
 80004b6:	fb08 4410 	mls	r4, r8, r0, r4
 80004ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004be:	fb00 f707 	mul.w	r7, r0, r7
 80004c2:	429f      	cmp	r7, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x148>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 34ff 	add.w	r4, r0, #4294967295
 80004ce:	d202      	bcs.n	80004d6 <__udivmoddi4+0x146>
 80004d0:	429f      	cmp	r7, r3
 80004d2:	f200 80b0 	bhi.w	8000636 <__udivmoddi4+0x2a6>
 80004d6:	4620      	mov	r0, r4
 80004d8:	1bdb      	subs	r3, r3, r7
 80004da:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80004de:	e7a5      	b.n	800042c <__udivmoddi4+0x9c>
 80004e0:	f1c1 0620 	rsb	r6, r1, #32
 80004e4:	408b      	lsls	r3, r1
 80004e6:	fa22 f706 	lsr.w	r7, r2, r6
 80004ea:	431f      	orrs	r7, r3
 80004ec:	fa20 fc06 	lsr.w	ip, r0, r6
 80004f0:	fa04 f301 	lsl.w	r3, r4, r1
 80004f4:	ea43 030c 	orr.w	r3, r3, ip
 80004f8:	40f4      	lsrs	r4, r6
 80004fa:	fa00 f801 	lsl.w	r8, r0, r1
 80004fe:	0c38      	lsrs	r0, r7, #16
 8000500:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000504:	fbb4 fef0 	udiv	lr, r4, r0
 8000508:	fa1f fc87 	uxth.w	ip, r7
 800050c:	fb00 441e 	mls	r4, r0, lr, r4
 8000510:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000514:	fb0e f90c 	mul.w	r9, lr, ip
 8000518:	45a1      	cmp	r9, r4
 800051a:	fa02 f201 	lsl.w	r2, r2, r1
 800051e:	d90a      	bls.n	8000536 <__udivmoddi4+0x1a6>
 8000520:	193c      	adds	r4, r7, r4
 8000522:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000526:	f080 8084 	bcs.w	8000632 <__udivmoddi4+0x2a2>
 800052a:	45a1      	cmp	r9, r4
 800052c:	f240 8081 	bls.w	8000632 <__udivmoddi4+0x2a2>
 8000530:	f1ae 0e02 	sub.w	lr, lr, #2
 8000534:	443c      	add	r4, r7
 8000536:	eba4 0409 	sub.w	r4, r4, r9
 800053a:	fa1f f983 	uxth.w	r9, r3
 800053e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000542:	fb00 4413 	mls	r4, r0, r3, r4
 8000546:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800054a:	fb03 fc0c 	mul.w	ip, r3, ip
 800054e:	45a4      	cmp	ip, r4
 8000550:	d907      	bls.n	8000562 <__udivmoddi4+0x1d2>
 8000552:	193c      	adds	r4, r7, r4
 8000554:	f103 30ff 	add.w	r0, r3, #4294967295
 8000558:	d267      	bcs.n	800062a <__udivmoddi4+0x29a>
 800055a:	45a4      	cmp	ip, r4
 800055c:	d965      	bls.n	800062a <__udivmoddi4+0x29a>
 800055e:	3b02      	subs	r3, #2
 8000560:	443c      	add	r4, r7
 8000562:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000566:	fba0 9302 	umull	r9, r3, r0, r2
 800056a:	eba4 040c 	sub.w	r4, r4, ip
 800056e:	429c      	cmp	r4, r3
 8000570:	46ce      	mov	lr, r9
 8000572:	469c      	mov	ip, r3
 8000574:	d351      	bcc.n	800061a <__udivmoddi4+0x28a>
 8000576:	d04e      	beq.n	8000616 <__udivmoddi4+0x286>
 8000578:	b155      	cbz	r5, 8000590 <__udivmoddi4+0x200>
 800057a:	ebb8 030e 	subs.w	r3, r8, lr
 800057e:	eb64 040c 	sbc.w	r4, r4, ip
 8000582:	fa04 f606 	lsl.w	r6, r4, r6
 8000586:	40cb      	lsrs	r3, r1
 8000588:	431e      	orrs	r6, r3
 800058a:	40cc      	lsrs	r4, r1
 800058c:	e9c5 6400 	strd	r6, r4, [r5]
 8000590:	2100      	movs	r1, #0
 8000592:	e750      	b.n	8000436 <__udivmoddi4+0xa6>
 8000594:	f1c2 0320 	rsb	r3, r2, #32
 8000598:	fa20 f103 	lsr.w	r1, r0, r3
 800059c:	fa0c fc02 	lsl.w	ip, ip, r2
 80005a0:	fa24 f303 	lsr.w	r3, r4, r3
 80005a4:	4094      	lsls	r4, r2
 80005a6:	430c      	orrs	r4, r1
 80005a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005ac:	fa00 fe02 	lsl.w	lr, r0, r2
 80005b0:	fa1f f78c 	uxth.w	r7, ip
 80005b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80005b8:	fb08 3110 	mls	r1, r8, r0, r3
 80005bc:	0c23      	lsrs	r3, r4, #16
 80005be:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005c2:	fb00 f107 	mul.w	r1, r0, r7
 80005c6:	4299      	cmp	r1, r3
 80005c8:	d908      	bls.n	80005dc <__udivmoddi4+0x24c>
 80005ca:	eb1c 0303 	adds.w	r3, ip, r3
 80005ce:	f100 36ff 	add.w	r6, r0, #4294967295
 80005d2:	d22c      	bcs.n	800062e <__udivmoddi4+0x29e>
 80005d4:	4299      	cmp	r1, r3
 80005d6:	d92a      	bls.n	800062e <__udivmoddi4+0x29e>
 80005d8:	3802      	subs	r0, #2
 80005da:	4463      	add	r3, ip
 80005dc:	1a5b      	subs	r3, r3, r1
 80005de:	b2a4      	uxth	r4, r4
 80005e0:	fbb3 f1f8 	udiv	r1, r3, r8
 80005e4:	fb08 3311 	mls	r3, r8, r1, r3
 80005e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80005ec:	fb01 f307 	mul.w	r3, r1, r7
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d908      	bls.n	8000606 <__udivmoddi4+0x276>
 80005f4:	eb1c 0404 	adds.w	r4, ip, r4
 80005f8:	f101 36ff 	add.w	r6, r1, #4294967295
 80005fc:	d213      	bcs.n	8000626 <__udivmoddi4+0x296>
 80005fe:	42a3      	cmp	r3, r4
 8000600:	d911      	bls.n	8000626 <__udivmoddi4+0x296>
 8000602:	3902      	subs	r1, #2
 8000604:	4464      	add	r4, ip
 8000606:	1ae4      	subs	r4, r4, r3
 8000608:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800060c:	e739      	b.n	8000482 <__udivmoddi4+0xf2>
 800060e:	4604      	mov	r4, r0
 8000610:	e6f0      	b.n	80003f4 <__udivmoddi4+0x64>
 8000612:	4608      	mov	r0, r1
 8000614:	e706      	b.n	8000424 <__udivmoddi4+0x94>
 8000616:	45c8      	cmp	r8, r9
 8000618:	d2ae      	bcs.n	8000578 <__udivmoddi4+0x1e8>
 800061a:	ebb9 0e02 	subs.w	lr, r9, r2
 800061e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000622:	3801      	subs	r0, #1
 8000624:	e7a8      	b.n	8000578 <__udivmoddi4+0x1e8>
 8000626:	4631      	mov	r1, r6
 8000628:	e7ed      	b.n	8000606 <__udivmoddi4+0x276>
 800062a:	4603      	mov	r3, r0
 800062c:	e799      	b.n	8000562 <__udivmoddi4+0x1d2>
 800062e:	4630      	mov	r0, r6
 8000630:	e7d4      	b.n	80005dc <__udivmoddi4+0x24c>
 8000632:	46d6      	mov	lr, sl
 8000634:	e77f      	b.n	8000536 <__udivmoddi4+0x1a6>
 8000636:	4463      	add	r3, ip
 8000638:	3802      	subs	r0, #2
 800063a:	e74d      	b.n	80004d8 <__udivmoddi4+0x148>
 800063c:	4606      	mov	r6, r0
 800063e:	4623      	mov	r3, r4
 8000640:	4608      	mov	r0, r1
 8000642:	e70f      	b.n	8000464 <__udivmoddi4+0xd4>
 8000644:	3e02      	subs	r6, #2
 8000646:	4463      	add	r3, ip
 8000648:	e730      	b.n	80004ac <__udivmoddi4+0x11c>
 800064a:	bf00      	nop

0800064c <__aeabi_idiv0>:
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 faeb 	bl	8000c30 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f853 	bl	8000704 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f8bd 	bl	80007dc <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  //Enable the CYCCNT counter
  DWT_CTRL |= (1<<0);
 8000662:	4b21      	ldr	r3, [pc, #132]	@ (80006e8 <main+0x98>)
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a20      	ldr	r2, [pc, #128]	@ (80006e8 <main+0x98>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6013      	str	r3, [r2, #0]

  //SEGGER_UART_init(500000);

  SEGGER_SYSVIEW_Conf();
 800066e:	f003 fff5 	bl	800465c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 8000672:	f005 fabd 	bl	8005bf0 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(task1_handler, "Task-1", 200, "Hello world from Task-1", 2, &task1_handle);
 8000676:	f107 0308 	add.w	r3, r7, #8
 800067a:	9301      	str	r3, [sp, #4]
 800067c:	2302      	movs	r3, #2
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	4b1a      	ldr	r3, [pc, #104]	@ (80006ec <main+0x9c>)
 8000682:	22c8      	movs	r2, #200	@ 0xc8
 8000684:	491a      	ldr	r1, [pc, #104]	@ (80006f0 <main+0xa0>)
 8000686:	481b      	ldr	r0, [pc, #108]	@ (80006f4 <main+0xa4>)
 8000688:	f002 f8d0 	bl	800282c <xTaskCreate>
 800068c:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 800068e:	697b      	ldr	r3, [r7, #20]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d00b      	beq.n	80006ac <main+0x5c>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000694:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000698:	f383 8811 	msr	BASEPRI, r3
 800069c:	f3bf 8f6f 	isb	sy
 80006a0:	f3bf 8f4f 	dsb	sy
 80006a4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	e7fd      	b.n	80006a8 <main+0x58>

  status = xTaskCreate(task2_handler, "Task-2", 200, "Hello world from Task-2", 2, &task2_handle);
 80006ac:	1d3b      	adds	r3, r7, #4
 80006ae:	9301      	str	r3, [sp, #4]
 80006b0:	2302      	movs	r3, #2
 80006b2:	9300      	str	r3, [sp, #0]
 80006b4:	4b10      	ldr	r3, [pc, #64]	@ (80006f8 <main+0xa8>)
 80006b6:	22c8      	movs	r2, #200	@ 0xc8
 80006b8:	4910      	ldr	r1, [pc, #64]	@ (80006fc <main+0xac>)
 80006ba:	4811      	ldr	r0, [pc, #68]	@ (8000700 <main+0xb0>)
 80006bc:	f002 f8b6 	bl	800282c <xTaskCreate>
 80006c0:	6178      	str	r0, [r7, #20]

  configASSERT(status == pdPASS);
 80006c2:	697b      	ldr	r3, [r7, #20]
 80006c4:	2b01      	cmp	r3, #1
 80006c6:	d00b      	beq.n	80006e0 <main+0x90>
        __asm volatile
 80006c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80006cc:	f383 8811 	msr	BASEPRI, r3
 80006d0:	f3bf 8f6f 	isb	sy
 80006d4:	f3bf 8f4f 	dsb	sy
 80006d8:	60fb      	str	r3, [r7, #12]
    }
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	e7fd      	b.n	80006dc <main+0x8c>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 80006e0:	f002 fa2e 	bl	8002b40 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <main+0x94>
 80006e8:	e0001000 	.word	0xe0001000
 80006ec:	080070a0 	.word	0x080070a0
 80006f0:	080070b8 	.word	0x080070b8
 80006f4:	08000985 	.word	0x08000985
 80006f8:	080070c0 	.word	0x080070c0
 80006fc:	080070d8 	.word	0x080070d8
 8000700:	080009bd 	.word	0x080009bd

08000704 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b094      	sub	sp, #80	@ 0x50
 8000708:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	2234      	movs	r2, #52	@ 0x34
 8000710:	2100      	movs	r1, #0
 8000712:	4618      	mov	r0, r3
 8000714:	f006 f830 	bl	8006778 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000718:	f107 0308 	add.w	r3, r7, #8
 800071c:	2200      	movs	r2, #0
 800071e:	601a      	str	r2, [r3, #0]
 8000720:	605a      	str	r2, [r3, #4]
 8000722:	609a      	str	r2, [r3, #8]
 8000724:	60da      	str	r2, [r3, #12]
 8000726:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b29      	ldr	r3, [pc, #164]	@ (80007d4 <SystemClock_Config+0xd0>)
 800072e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000730:	4a28      	ldr	r2, [pc, #160]	@ (80007d4 <SystemClock_Config+0xd0>)
 8000732:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000736:	6413      	str	r3, [r2, #64]	@ 0x40
 8000738:	4b26      	ldr	r3, [pc, #152]	@ (80007d4 <SystemClock_Config+0xd0>)
 800073a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800073c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000744:	2300      	movs	r3, #0
 8000746:	603b      	str	r3, [r7, #0]
 8000748:	4b23      	ldr	r3, [pc, #140]	@ (80007d8 <SystemClock_Config+0xd4>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	4a22      	ldr	r2, [pc, #136]	@ (80007d8 <SystemClock_Config+0xd4>)
 800074e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000752:	6013      	str	r3, [r2, #0]
 8000754:	4b20      	ldr	r3, [pc, #128]	@ (80007d8 <SystemClock_Config+0xd4>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800075c:	603b      	str	r3, [r7, #0]
 800075e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000760:	2302      	movs	r3, #2
 8000762:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000764:	2301      	movs	r3, #1
 8000766:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000768:	2310      	movs	r3, #16
 800076a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800076c:	2302      	movs	r3, #2
 800076e:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000770:	2300      	movs	r3, #0
 8000772:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000774:	2308      	movs	r3, #8
 8000776:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000778:	2364      	movs	r3, #100	@ 0x64
 800077a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000780:	2302      	movs	r3, #2
 8000782:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000784:	2302      	movs	r3, #2
 8000786:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000788:	f107 031c 	add.w	r3, r7, #28
 800078c:	4618      	mov	r0, r3
 800078e:	f000 ff5f 	bl	8001650 <HAL_RCC_OscConfig>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000798:	f000 f93e 	bl	8000a18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800079c:	230f      	movs	r3, #15
 800079e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80007ae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80007b4:	f107 0308 	add.w	r3, r7, #8
 80007b8:	2103      	movs	r1, #3
 80007ba:	4618      	mov	r0, r3
 80007bc:	f000 fd0a 	bl	80011d4 <HAL_RCC_ClockConfig>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80007c6:	f000 f927 	bl	8000a18 <Error_Handler>
  }
}
 80007ca:	bf00      	nop
 80007cc:	3750      	adds	r7, #80	@ 0x50
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40007000 	.word	0x40007000

080007dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b08c      	sub	sp, #48	@ 0x30
 80007e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007e2:	f107 031c 	add.w	r3, r7, #28
 80007e6:	2200      	movs	r2, #0
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	605a      	str	r2, [r3, #4]
 80007ec:	609a      	str	r2, [r3, #8]
 80007ee:	60da      	str	r2, [r3, #12]
 80007f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
 80007f6:	4b5d      	ldr	r3, [pc, #372]	@ (800096c <MX_GPIO_Init+0x190>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a5c      	ldr	r2, [pc, #368]	@ (800096c <MX_GPIO_Init+0x190>)
 80007fc:	f043 0304 	orr.w	r3, r3, #4
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b5a      	ldr	r3, [pc, #360]	@ (800096c <MX_GPIO_Init+0x190>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0304 	and.w	r3, r3, #4
 800080a:	61bb      	str	r3, [r7, #24]
 800080c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
 8000812:	4b56      	ldr	r3, [pc, #344]	@ (800096c <MX_GPIO_Init+0x190>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a55      	ldr	r2, [pc, #340]	@ (800096c <MX_GPIO_Init+0x190>)
 8000818:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b53      	ldr	r3, [pc, #332]	@ (800096c <MX_GPIO_Init+0x190>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000826:	617b      	str	r3, [r7, #20]
 8000828:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	613b      	str	r3, [r7, #16]
 800082e:	4b4f      	ldr	r3, [pc, #316]	@ (800096c <MX_GPIO_Init+0x190>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a4e      	ldr	r2, [pc, #312]	@ (800096c <MX_GPIO_Init+0x190>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b4c      	ldr	r3, [pc, #304]	@ (800096c <MX_GPIO_Init+0x190>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	60fb      	str	r3, [r7, #12]
 800084a:	4b48      	ldr	r3, [pc, #288]	@ (800096c <MX_GPIO_Init+0x190>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a47      	ldr	r2, [pc, #284]	@ (800096c <MX_GPIO_Init+0x190>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b45      	ldr	r3, [pc, #276]	@ (800096c <MX_GPIO_Init+0x190>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	4b41      	ldr	r3, [pc, #260]	@ (800096c <MX_GPIO_Init+0x190>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	4a40      	ldr	r2, [pc, #256]	@ (800096c <MX_GPIO_Init+0x190>)
 800086c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000870:	6313      	str	r3, [r2, #48]	@ 0x30
 8000872:	4b3e      	ldr	r3, [pc, #248]	@ (800096c <MX_GPIO_Init+0x190>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000876:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800087a:	60bb      	str	r3, [r7, #8]
 800087c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
 8000882:	4b3a      	ldr	r3, [pc, #232]	@ (800096c <MX_GPIO_Init+0x190>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	4a39      	ldr	r2, [pc, #228]	@ (800096c <MX_GPIO_Init+0x190>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	@ 0x30
 800088e:	4b37      	ldr	r3, [pc, #220]	@ (800096c <MX_GPIO_Init+0x190>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	607b      	str	r3, [r7, #4]
 8000898:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800089a:	2200      	movs	r2, #0
 800089c:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008a0:	4833      	ldr	r0, [pc, #204]	@ (8000970 <MX_GPIO_Init+0x194>)
 80008a2:	f000 fc7d 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008a6:	2200      	movs	r2, #0
 80008a8:	2140      	movs	r1, #64	@ 0x40
 80008aa:	4832      	ldr	r0, [pc, #200]	@ (8000974 <MX_GPIO_Init+0x198>)
 80008ac:	f000 fc78 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008b0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008bc:	2300      	movs	r3, #0
 80008be:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008c0:	f107 031c 	add.w	r3, r7, #28
 80008c4:	4619      	mov	r1, r3
 80008c6:	482c      	ldr	r0, [pc, #176]	@ (8000978 <MX_GPIO_Init+0x19c>)
 80008c8:	f000 fad6 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008cc:	f244 0381 	movw	r3, #16513	@ 0x4081
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d2:	2301      	movs	r3, #1
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008da:	2300      	movs	r3, #0
 80008dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4619      	mov	r1, r3
 80008e4:	4822      	ldr	r0, [pc, #136]	@ (8000970 <MX_GPIO_Init+0x194>)
 80008e6:	f000 fac7 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80008ea:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80008ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80008fc:	2307      	movs	r3, #7
 80008fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	481d      	ldr	r0, [pc, #116]	@ (800097c <MX_GPIO_Init+0x1a0>)
 8000908:	f000 fab6 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 800090c:	2340      	movs	r3, #64	@ 0x40
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000910:	2301      	movs	r3, #1
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800091c:	f107 031c 	add.w	r3, r7, #28
 8000920:	4619      	mov	r1, r3
 8000922:	4814      	ldr	r0, [pc, #80]	@ (8000974 <MX_GPIO_Init+0x198>)
 8000924:	f000 faa8 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000928:	2380      	movs	r3, #128	@ 0x80
 800092a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800092c:	2300      	movs	r3, #0
 800092e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000930:	2300      	movs	r3, #0
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000934:	f107 031c 	add.w	r3, r7, #28
 8000938:	4619      	mov	r1, r3
 800093a:	480e      	ldr	r0, [pc, #56]	@ (8000974 <MX_GPIO_Init+0x198>)
 800093c:	f000 fa9c 	bl	8000e78 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000940:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000944:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000946:	2302      	movs	r3, #2
 8000948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094e:	2303      	movs	r3, #3
 8000950:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000952:	230a      	movs	r3, #10
 8000954:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000956:	f107 031c 	add.w	r3, r7, #28
 800095a:	4619      	mov	r1, r3
 800095c:	4808      	ldr	r0, [pc, #32]	@ (8000980 <MX_GPIO_Init+0x1a4>)
 800095e:	f000 fa8b 	bl	8000e78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000962:	bf00      	nop
 8000964:	3730      	adds	r7, #48	@ 0x30
 8000966:	46bd      	mov	sp, r7
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023800 	.word	0x40023800
 8000970:	40020400 	.word	0x40020400
 8000974:	40021800 	.word	0x40021800
 8000978:	40020800 	.word	0x40020800
 800097c:	40020c00 	.word	0x40020c00
 8000980:	40020000 	.word	0x40020000

08000984 <task1_handler>:

/* USER CODE BEGIN 4 */

static void task1_handler(void* parameters){
 8000984:	b580      	push	{r7, lr}
 8000986:	b09c      	sub	sp, #112	@ 0x70
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	char msg[100];
	while(1){
		//printf("%s\n", (char*)parameters);
		snprintf(msg,100,(char*)parameters);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	687a      	ldr	r2, [r7, #4]
 8000992:	2164      	movs	r1, #100	@ 0x64
 8000994:	4618      	mov	r0, r3
 8000996:	f005 feab 	bl	80066f0 <sniprintf>
		SEGGER_SYSVIEW_PrintfTarget(msg);
 800099a:	f107 030c 	add.w	r3, r7, #12
 800099e:	4618      	mov	r0, r3
 80009a0:	f005 fe36 	bl	8006610 <SEGGER_SYSVIEW_PrintfTarget>
		taskYIELD();
 80009a4:	4b04      	ldr	r3, [pc, #16]	@ (80009b8 <task1_handler+0x34>)
 80009a6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009aa:	601a      	str	r2, [r3, #0]
 80009ac:	f3bf 8f4f 	dsb	sy
 80009b0:	f3bf 8f6f 	isb	sy
		snprintf(msg,100,(char*)parameters);
 80009b4:	bf00      	nop
 80009b6:	e7e9      	b.n	800098c <task1_handler+0x8>
 80009b8:	e000ed04 	.word	0xe000ed04

080009bc <task2_handler>:
	}
}

static void task2_handler(void* parameters){
 80009bc:	b580      	push	{r7, lr}
 80009be:	b09c      	sub	sp, #112	@ 0x70
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
	char msg[100];
		while(1){
			//printf("%s\n", (char*)parameters);
			snprintf(msg,100,(char*)parameters);
 80009c4:	f107 030c 	add.w	r3, r7, #12
 80009c8:	687a      	ldr	r2, [r7, #4]
 80009ca:	2164      	movs	r1, #100	@ 0x64
 80009cc:	4618      	mov	r0, r3
 80009ce:	f005 fe8f 	bl	80066f0 <sniprintf>
			SEGGER_SYSVIEW_PrintfTarget(msg);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fe1a 	bl	8006610 <SEGGER_SYSVIEW_PrintfTarget>
			taskYIELD();
 80009dc:	4b04      	ldr	r3, [pc, #16]	@ (80009f0 <task2_handler+0x34>)
 80009de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80009e2:	601a      	str	r2, [r3, #0]
 80009e4:	f3bf 8f4f 	dsb	sy
 80009e8:	f3bf 8f6f 	isb	sy
			snprintf(msg,100,(char*)parameters);
 80009ec:	bf00      	nop
 80009ee:	e7e9      	b.n	80009c4 <task2_handler+0x8>
 80009f0:	e000ed04 	.word	0xe000ed04

080009f4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b082      	sub	sp, #8
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a04      	ldr	r2, [pc, #16]	@ (8000a14 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d101      	bne.n	8000a0a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a06:	f000 f935 	bl	8000c74 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40001000 	.word	0x40001000

08000a18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a1c:	b672      	cpsid	i
}
 8000a1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <Error_Handler+0x8>

08000a24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	607b      	str	r3, [r7, #4]
 8000a2e:	4b10      	ldr	r3, [pc, #64]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a32:	4a0f      	ldr	r2, [pc, #60]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a38:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a3a:	4b0d      	ldr	r3, [pc, #52]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a42:	607b      	str	r3, [r7, #4]
 8000a44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a46:	2300      	movs	r3, #0
 8000a48:	603b      	str	r3, [r7, #0]
 8000a4a:	4b09      	ldr	r3, [pc, #36]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a4e:	4a08      	ldr	r2, [pc, #32]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a54:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a56:	4b06      	ldr	r3, [pc, #24]	@ (8000a70 <HAL_MspInit+0x4c>)
 8000a58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a5e:	603b      	str	r3, [r7, #0]
 8000a60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000a62:	f003 fa6b 	bl	8003f3c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000a66:	bf00      	nop
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	40023800 	.word	0x40023800

08000a74 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b08e      	sub	sp, #56	@ 0x38
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000a80:	2300      	movs	r3, #0
 8000a82:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b33      	ldr	r3, [pc, #204]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	4a32      	ldr	r2, [pc, #200]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a8e:	f043 0310 	orr.w	r3, r3, #16
 8000a92:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a94:	4b30      	ldr	r3, [pc, #192]	@ (8000b58 <HAL_InitTick+0xe4>)
 8000a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a98:	f003 0310 	and.w	r3, r3, #16
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000aa0:	f107 0210 	add.w	r2, r7, #16
 8000aa4:	f107 0314 	add.w	r3, r7, #20
 8000aa8:	4611      	mov	r1, r2
 8000aaa:	4618      	mov	r0, r3
 8000aac:	f000 fd9e 	bl	80015ec <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ab0:	6a3b      	ldr	r3, [r7, #32]
 8000ab2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d103      	bne.n	8000ac2 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000aba:	f000 fd83 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8000abe:	6378      	str	r0, [r7, #52]	@ 0x34
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000ac2:	f000 fd7f 	bl	80015c4 <HAL_RCC_GetPCLK1Freq>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	005b      	lsls	r3, r3, #1
 8000aca:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ace:	4a23      	ldr	r2, [pc, #140]	@ (8000b5c <HAL_InitTick+0xe8>)
 8000ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8000ad4:	0c9b      	lsrs	r3, r3, #18
 8000ad6:	3b01      	subs	r3, #1
 8000ad8:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <HAL_InitTick+0xec>)
 8000adc:	4a21      	ldr	r2, [pc, #132]	@ (8000b64 <HAL_InitTick+0xf0>)
 8000ade:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ae0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <HAL_InitTick+0xec>)
 8000ae2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000ae6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ae8:	4a1d      	ldr	r2, [pc, #116]	@ (8000b60 <HAL_InitTick+0xec>)
 8000aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000aec:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <HAL_InitTick+0xec>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <HAL_InitTick+0xec>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b00:	4817      	ldr	r0, [pc, #92]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b02:	f001 f829 	bl	8001b58 <HAL_TIM_Base_Init>
 8000b06:	4603      	mov	r3, r0
 8000b08:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b0c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d11b      	bne.n	8000b4c <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b14:	4812      	ldr	r0, [pc, #72]	@ (8000b60 <HAL_InitTick+0xec>)
 8000b16:	f001 f879 	bl	8001c0c <HAL_TIM_Base_Start_IT>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000b20:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d111      	bne.n	8000b4c <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b28:	2036      	movs	r0, #54	@ 0x36
 8000b2a:	f000 f997 	bl	8000e5c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	2b0f      	cmp	r3, #15
 8000b32:	d808      	bhi.n	8000b46 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b34:	2200      	movs	r2, #0
 8000b36:	6879      	ldr	r1, [r7, #4]
 8000b38:	2036      	movs	r0, #54	@ 0x36
 8000b3a:	f000 f973 	bl	8000e24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b68 <HAL_InitTick+0xf4>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	e002      	b.n	8000b4c <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000b46:	2301      	movs	r3, #1
 8000b48:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b4c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000b50:	4618      	mov	r0, r3
 8000b52:	3738      	adds	r7, #56	@ 0x38
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	431bde83 	.word	0x431bde83
 8000b60:	20000080 	.word	0x20000080
 8000b64:	40001000 	.word	0x40001000
 8000b68:	20000004 	.word	0x20000004

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ba8:	4802      	ldr	r0, [pc, #8]	@ (8000bb4 <TIM6_DAC_IRQHandler+0x10>)
 8000baa:	f001 f89f 	bl	8001cec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	20000080 	.word	0x20000080

08000bb8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bbc:	4b06      	ldr	r3, [pc, #24]	@ (8000bd8 <SystemInit+0x20>)
 8000bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bc2:	4a05      	ldr	r2, [pc, #20]	@ (8000bd8 <SystemInit+0x20>)
 8000bc4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bc8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bcc:	bf00      	nop
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000ed00 	.word	0xe000ed00

08000bdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000bdc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c14 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000be0:	f7ff ffea 	bl	8000bb8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000be4:	480c      	ldr	r0, [pc, #48]	@ (8000c18 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000be6:	490d      	ldr	r1, [pc, #52]	@ (8000c1c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000be8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c20 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bec:	e002      	b.n	8000bf4 <LoopCopyDataInit>

08000bee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bf2:	3304      	adds	r3, #4

08000bf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bf8:	d3f9      	bcc.n	8000bee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8000c24 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000bfc:	4c0a      	ldr	r4, [pc, #40]	@ (8000c28 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000bfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c00:	e001      	b.n	8000c06 <LoopFillZerobss>

08000c02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c04:	3204      	adds	r2, #4

08000c06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c08:	d3fb      	bcc.n	8000c02 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c0a:	f005 fdbd 	bl	8006788 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c0e:	f7ff fd1f 	bl	8000650 <main>
  bx  lr    
 8000c12:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000c14:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000c18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c1c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000c20:	0800723c 	.word	0x0800723c
  ldr r2, =_sbss
 8000c24:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000c28:	2004ca34 	.word	0x2004ca34

08000c2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c2c:	e7fe      	b.n	8000c2c <ADC_IRQHandler>
	...

08000c30 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c34:	4b0e      	ldr	r3, [pc, #56]	@ (8000c70 <HAL_Init+0x40>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a0d      	ldr	r2, [pc, #52]	@ (8000c70 <HAL_Init+0x40>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c3e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c40:	4b0b      	ldr	r3, [pc, #44]	@ (8000c70 <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0a      	ldr	r2, [pc, #40]	@ (8000c70 <HAL_Init+0x40>)
 8000c46:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c4c:	4b08      	ldr	r3, [pc, #32]	@ (8000c70 <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a07      	ldr	r2, [pc, #28]	@ (8000c70 <HAL_Init+0x40>)
 8000c52:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c58:	2003      	movs	r0, #3
 8000c5a:	f000 f8d8 	bl	8000e0e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c5e:	200f      	movs	r0, #15
 8000c60:	f7ff ff08 	bl	8000a74 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c64:	f7ff fede 	bl	8000a24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c68:	2300      	movs	r3, #0
}
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	40023c00 	.word	0x40023c00

08000c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c78:	4b06      	ldr	r3, [pc, #24]	@ (8000c94 <HAL_IncTick+0x20>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	461a      	mov	r2, r3
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	4413      	add	r3, r2
 8000c84:	4a04      	ldr	r2, [pc, #16]	@ (8000c98 <HAL_IncTick+0x24>)
 8000c86:	6013      	str	r3, [r2, #0]
}
 8000c88:	bf00      	nop
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop
 8000c94:	20000008 	.word	0x20000008
 8000c98:	200000c8 	.word	0x200000c8

08000c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <HAL_GetTick+0x14>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
}
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	200000c8 	.word	0x200000c8

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cdc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ce0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce6:	4a04      	ldr	r2, [pc, #16]	@ (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce8:	68bb      	ldr	r3, [r7, #8]
 8000cea:	60d3      	str	r3, [r2, #12]
}
 8000cec:	bf00      	nop
 8000cee:	3714      	adds	r7, #20
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	@ (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	@ (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	@ (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	@ (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	@ 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	@ 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b082      	sub	sp, #8
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e16:	6878      	ldr	r0, [r7, #4]
 8000e18:	f7ff ff4c 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e1c:	bf00      	nop
 8000e1e:	3708      	adds	r7, #8
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b086      	sub	sp, #24
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	60b9      	str	r1, [r7, #8]
 8000e2e:	607a      	str	r2, [r7, #4]
 8000e30:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e32:	2300      	movs	r3, #0
 8000e34:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e36:	f7ff ff61 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e3a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e3c:	687a      	ldr	r2, [r7, #4]
 8000e3e:	68b9      	ldr	r1, [r7, #8]
 8000e40:	6978      	ldr	r0, [r7, #20]
 8000e42:	f7ff ffb1 	bl	8000da8 <NVIC_EncodePriority>
 8000e46:	4602      	mov	r2, r0
 8000e48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e4c:	4611      	mov	r1, r2
 8000e4e:	4618      	mov	r0, r3
 8000e50:	f7ff ff80 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e54:	bf00      	nop
 8000e56:	3718      	adds	r7, #24
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}

08000e5c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b082      	sub	sp, #8
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	4603      	mov	r3, r0
 8000e64:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f7ff ff54 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000e70:	bf00      	nop
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}

08000e78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b089      	sub	sp, #36	@ 0x24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e82:	2300      	movs	r3, #0
 8000e84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	61fb      	str	r3, [r7, #28]
 8000e92:	e165      	b.n	8001160 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e94:	2201      	movs	r2, #1
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ea8:	693a      	ldr	r2, [r7, #16]
 8000eaa:	697b      	ldr	r3, [r7, #20]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	f040 8154 	bne.w	800115a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d005      	beq.n	8000eca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000ec6:	2b02      	cmp	r3, #2
 8000ec8:	d130      	bne.n	8000f2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	689b      	ldr	r3, [r3, #8]
 8000ece:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ed0:	69fb      	ldr	r3, [r7, #28]
 8000ed2:	005b      	lsls	r3, r3, #1
 8000ed4:	2203      	movs	r2, #3
 8000ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eda:	43db      	mvns	r3, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4013      	ands	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	68da      	ldr	r2, [r3, #12]
 8000ee6:	69fb      	ldr	r3, [r7, #28]
 8000ee8:	005b      	lsls	r3, r3, #1
 8000eea:	fa02 f303 	lsl.w	r3, r2, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4313      	orrs	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f00:	2201      	movs	r2, #1
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	43db      	mvns	r3, r3
 8000f0a:	69ba      	ldr	r2, [r7, #24]
 8000f0c:	4013      	ands	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	685b      	ldr	r3, [r3, #4]
 8000f14:	091b      	lsrs	r3, r3, #4
 8000f16:	f003 0201 	and.w	r2, r3, #1
 8000f1a:	69fb      	ldr	r3, [r7, #28]
 8000f1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f20:	69ba      	ldr	r2, [r7, #24]
 8000f22:	4313      	orrs	r3, r2
 8000f24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f003 0303 	and.w	r3, r3, #3
 8000f34:	2b03      	cmp	r3, #3
 8000f36:	d017      	beq.n	8000f68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	005b      	lsls	r3, r3, #1
 8000f42:	2203      	movs	r2, #3
 8000f44:	fa02 f303 	lsl.w	r3, r2, r3
 8000f48:	43db      	mvns	r3, r3
 8000f4a:	69ba      	ldr	r2, [r7, #24]
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	69fb      	ldr	r3, [r7, #28]
 8000f56:	005b      	lsls	r3, r3, #1
 8000f58:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5c:	69ba      	ldr	r2, [r7, #24]
 8000f5e:	4313      	orrs	r3, r2
 8000f60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	685b      	ldr	r3, [r3, #4]
 8000f6c:	f003 0303 	and.w	r3, r3, #3
 8000f70:	2b02      	cmp	r3, #2
 8000f72:	d123      	bne.n	8000fbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	08da      	lsrs	r2, r3, #3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3208      	adds	r2, #8
 8000f7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	f003 0307 	and.w	r3, r3, #7
 8000f88:	009b      	lsls	r3, r3, #2
 8000f8a:	220f      	movs	r2, #15
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43db      	mvns	r3, r3
 8000f92:	69ba      	ldr	r2, [r7, #24]
 8000f94:	4013      	ands	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f98:	683b      	ldr	r3, [r7, #0]
 8000f9a:	691a      	ldr	r2, [r3, #16]
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	f003 0307 	and.w	r3, r3, #7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	08da      	lsrs	r2, r3, #3
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	3208      	adds	r2, #8
 8000fb6:	69b9      	ldr	r1, [r7, #24]
 8000fb8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	005b      	lsls	r3, r3, #1
 8000fc6:	2203      	movs	r2, #3
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f003 0203 	and.w	r2, r3, #3
 8000fdc:	69fb      	ldr	r3, [r7, #28]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	4313      	orrs	r3, r2
 8000fe8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	f000 80ae 	beq.w	800115a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b5d      	ldr	r3, [pc, #372]	@ (8001178 <HAL_GPIO_Init+0x300>)
 8001004:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001006:	4a5c      	ldr	r2, [pc, #368]	@ (8001178 <HAL_GPIO_Init+0x300>)
 8001008:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800100c:	6453      	str	r3, [r2, #68]	@ 0x44
 800100e:	4b5a      	ldr	r3, [pc, #360]	@ (8001178 <HAL_GPIO_Init+0x300>)
 8001010:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001012:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800101a:	4a58      	ldr	r2, [pc, #352]	@ (800117c <HAL_GPIO_Init+0x304>)
 800101c:	69fb      	ldr	r3, [r7, #28]
 800101e:	089b      	lsrs	r3, r3, #2
 8001020:	3302      	adds	r3, #2
 8001022:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001026:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001028:	69fb      	ldr	r3, [r7, #28]
 800102a:	f003 0303 	and.w	r3, r3, #3
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	220f      	movs	r2, #15
 8001032:	fa02 f303 	lsl.w	r3, r2, r3
 8001036:	43db      	mvns	r3, r3
 8001038:	69ba      	ldr	r2, [r7, #24]
 800103a:	4013      	ands	r3, r2
 800103c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4a4f      	ldr	r2, [pc, #316]	@ (8001180 <HAL_GPIO_Init+0x308>)
 8001042:	4293      	cmp	r3, r2
 8001044:	d025      	beq.n	8001092 <HAL_GPIO_Init+0x21a>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a4e      	ldr	r2, [pc, #312]	@ (8001184 <HAL_GPIO_Init+0x30c>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d01f      	beq.n	800108e <HAL_GPIO_Init+0x216>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a4d      	ldr	r2, [pc, #308]	@ (8001188 <HAL_GPIO_Init+0x310>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d019      	beq.n	800108a <HAL_GPIO_Init+0x212>
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4a4c      	ldr	r2, [pc, #304]	@ (800118c <HAL_GPIO_Init+0x314>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d013      	beq.n	8001086 <HAL_GPIO_Init+0x20e>
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	4a4b      	ldr	r2, [pc, #300]	@ (8001190 <HAL_GPIO_Init+0x318>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d00d      	beq.n	8001082 <HAL_GPIO_Init+0x20a>
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4a4a      	ldr	r2, [pc, #296]	@ (8001194 <HAL_GPIO_Init+0x31c>)
 800106a:	4293      	cmp	r3, r2
 800106c:	d007      	beq.n	800107e <HAL_GPIO_Init+0x206>
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	4a49      	ldr	r2, [pc, #292]	@ (8001198 <HAL_GPIO_Init+0x320>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d101      	bne.n	800107a <HAL_GPIO_Init+0x202>
 8001076:	2306      	movs	r3, #6
 8001078:	e00c      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800107a:	2307      	movs	r3, #7
 800107c:	e00a      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800107e:	2305      	movs	r3, #5
 8001080:	e008      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001082:	2304      	movs	r3, #4
 8001084:	e006      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001086:	2303      	movs	r3, #3
 8001088:	e004      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800108a:	2302      	movs	r3, #2
 800108c:	e002      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 800108e:	2301      	movs	r3, #1
 8001090:	e000      	b.n	8001094 <HAL_GPIO_Init+0x21c>
 8001092:	2300      	movs	r3, #0
 8001094:	69fa      	ldr	r2, [r7, #28]
 8001096:	f002 0203 	and.w	r2, r2, #3
 800109a:	0092      	lsls	r2, r2, #2
 800109c:	4093      	lsls	r3, r2
 800109e:	69ba      	ldr	r2, [r7, #24]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80010a4:	4935      	ldr	r1, [pc, #212]	@ (800117c <HAL_GPIO_Init+0x304>)
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010b2:	4b3a      	ldr	r3, [pc, #232]	@ (800119c <HAL_GPIO_Init+0x324>)
 80010b4:	689b      	ldr	r3, [r3, #8]
 80010b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b8:	693b      	ldr	r3, [r7, #16]
 80010ba:	43db      	mvns	r3, r3
 80010bc:	69ba      	ldr	r2, [r7, #24]
 80010be:	4013      	ands	r3, r2
 80010c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d003      	beq.n	80010d6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	4313      	orrs	r3, r2
 80010d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010d6:	4a31      	ldr	r2, [pc, #196]	@ (800119c <HAL_GPIO_Init+0x324>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010dc:	4b2f      	ldr	r3, [pc, #188]	@ (800119c <HAL_GPIO_Init+0x324>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	43db      	mvns	r3, r3
 80010e6:	69ba      	ldr	r2, [r7, #24]
 80010e8:	4013      	ands	r3, r2
 80010ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d003      	beq.n	8001100 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80010f8:	69ba      	ldr	r2, [r7, #24]
 80010fa:	693b      	ldr	r3, [r7, #16]
 80010fc:	4313      	orrs	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001100:	4a26      	ldr	r2, [pc, #152]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001102:	69bb      	ldr	r3, [r7, #24]
 8001104:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001106:	4b25      	ldr	r3, [pc, #148]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001108:	685b      	ldr	r3, [r3, #4]
 800110a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800110c:	693b      	ldr	r3, [r7, #16]
 800110e:	43db      	mvns	r3, r3
 8001110:	69ba      	ldr	r2, [r7, #24]
 8001112:	4013      	ands	r3, r2
 8001114:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001122:	69ba      	ldr	r2, [r7, #24]
 8001124:	693b      	ldr	r3, [r7, #16]
 8001126:	4313      	orrs	r3, r2
 8001128:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800112a:	4a1c      	ldr	r2, [pc, #112]	@ (800119c <HAL_GPIO_Init+0x324>)
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001130:	4b1a      	ldr	r3, [pc, #104]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	43db      	mvns	r3, r3
 800113a:	69ba      	ldr	r2, [r7, #24]
 800113c:	4013      	ands	r3, r2
 800113e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	685b      	ldr	r3, [r3, #4]
 8001144:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001148:	2b00      	cmp	r3, #0
 800114a:	d003      	beq.n	8001154 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	693b      	ldr	r3, [r7, #16]
 8001150:	4313      	orrs	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001154:	4a11      	ldr	r2, [pc, #68]	@ (800119c <HAL_GPIO_Init+0x324>)
 8001156:	69bb      	ldr	r3, [r7, #24]
 8001158:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	3301      	adds	r3, #1
 800115e:	61fb      	str	r3, [r7, #28]
 8001160:	69fb      	ldr	r3, [r7, #28]
 8001162:	2b0f      	cmp	r3, #15
 8001164:	f67f ae96 	bls.w	8000e94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	3724      	adds	r7, #36	@ 0x24
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop
 8001178:	40023800 	.word	0x40023800
 800117c:	40013800 	.word	0x40013800
 8001180:	40020000 	.word	0x40020000
 8001184:	40020400 	.word	0x40020400
 8001188:	40020800 	.word	0x40020800
 800118c:	40020c00 	.word	0x40020c00
 8001190:	40021000 	.word	0x40021000
 8001194:	40021400 	.word	0x40021400
 8001198:	40021800 	.word	0x40021800
 800119c:	40013c00 	.word	0x40013c00

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80011b0:	787b      	ldrb	r3, [r7, #1]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011b6:	887a      	ldrh	r2, [r7, #2]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80011bc:	e003      	b.n	80011c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80011be:	887b      	ldrh	r3, [r7, #2]
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	619a      	str	r2, [r3, #24]
}
 80011c6:	bf00      	nop
 80011c8:	370c      	adds	r7, #12
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
	...

080011d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b084      	sub	sp, #16
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0cc      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80011e8:	4b68      	ldr	r3, [pc, #416]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0307 	and.w	r3, r3, #7
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	429a      	cmp	r2, r3
 80011f4:	d90c      	bls.n	8001210 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011f6:	4b65      	ldr	r3, [pc, #404]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80011f8:	683a      	ldr	r2, [r7, #0]
 80011fa:	b2d2      	uxtb	r2, r2
 80011fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011fe:	4b63      	ldr	r3, [pc, #396]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	683a      	ldr	r2, [r7, #0]
 8001208:	429a      	cmp	r2, r3
 800120a:	d001      	beq.n	8001210 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800120c:	2301      	movs	r3, #1
 800120e:	e0b8      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f003 0302 	and.w	r3, r3, #2
 8001218:	2b00      	cmp	r3, #0
 800121a:	d020      	beq.n	800125e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f003 0304 	and.w	r3, r3, #4
 8001224:	2b00      	cmp	r3, #0
 8001226:	d005      	beq.n	8001234 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001228:	4b59      	ldr	r3, [pc, #356]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122a:	689b      	ldr	r3, [r3, #8]
 800122c:	4a58      	ldr	r2, [pc, #352]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800122e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001232:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f003 0308 	and.w	r3, r3, #8
 800123c:	2b00      	cmp	r3, #0
 800123e:	d005      	beq.n	800124c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001240:	4b53      	ldr	r3, [pc, #332]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001242:	689b      	ldr	r3, [r3, #8]
 8001244:	4a52      	ldr	r2, [pc, #328]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001246:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800124a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800124c:	4b50      	ldr	r3, [pc, #320]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	494d      	ldr	r1, [pc, #308]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800125a:	4313      	orrs	r3, r2
 800125c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d044      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d107      	bne.n	8001282 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001272:	4b47      	ldr	r3, [pc, #284]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800127a:	2b00      	cmp	r3, #0
 800127c:	d119      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e07f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	2b02      	cmp	r3, #2
 8001288:	d003      	beq.n	8001292 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800128e:	2b03      	cmp	r3, #3
 8001290:	d107      	bne.n	80012a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001292:	4b3f      	ldr	r3, [pc, #252]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800129a:	2b00      	cmp	r3, #0
 800129c:	d109      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800129e:	2301      	movs	r3, #1
 80012a0:	e06f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80012a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d101      	bne.n	80012b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80012ae:	2301      	movs	r3, #1
 80012b0:	e067      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80012b2:	4b37      	ldr	r3, [pc, #220]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012b4:	689b      	ldr	r3, [r3, #8]
 80012b6:	f023 0203 	bic.w	r2, r3, #3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	4934      	ldr	r1, [pc, #208]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012c0:	4313      	orrs	r3, r2
 80012c2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80012c4:	f7ff fcea 	bl	8000c9c <HAL_GetTick>
 80012c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ca:	e00a      	b.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012cc:	f7ff fce6 	bl	8000c9c <HAL_GetTick>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	1ad3      	subs	r3, r2, r3
 80012d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012da:	4293      	cmp	r3, r2
 80012dc:	d901      	bls.n	80012e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012de:	2303      	movs	r3, #3
 80012e0:	e04f      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	f003 020c 	and.w	r2, r3, #12
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d1eb      	bne.n	80012cc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80012f4:	4b25      	ldr	r3, [pc, #148]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0307 	and.w	r3, r3, #7
 80012fc:	683a      	ldr	r2, [r7, #0]
 80012fe:	429a      	cmp	r2, r3
 8001300:	d20c      	bcs.n	800131c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001302:	4b22      	ldr	r3, [pc, #136]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 8001304:	683a      	ldr	r2, [r7, #0]
 8001306:	b2d2      	uxtb	r2, r2
 8001308:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800130a:	4b20      	ldr	r3, [pc, #128]	@ (800138c <HAL_RCC_ClockConfig+0x1b8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0307 	and.w	r3, r3, #7
 8001312:	683a      	ldr	r2, [r7, #0]
 8001314:	429a      	cmp	r2, r3
 8001316:	d001      	beq.n	800131c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001318:	2301      	movs	r3, #1
 800131a:	e032      	b.n	8001382 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f003 0304 	and.w	r3, r3, #4
 8001324:	2b00      	cmp	r3, #0
 8001326:	d008      	beq.n	800133a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001328:	4b19      	ldr	r3, [pc, #100]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4916      	ldr	r1, [pc, #88]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001336:	4313      	orrs	r3, r2
 8001338:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	2b00      	cmp	r3, #0
 8001344:	d009      	beq.n	800135a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001346:	4b12      	ldr	r3, [pc, #72]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	691b      	ldr	r3, [r3, #16]
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	490e      	ldr	r1, [pc, #56]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001356:	4313      	orrs	r3, r2
 8001358:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800135a:	f000 f821 	bl	80013a0 <HAL_RCC_GetSysClockFreq>
 800135e:	4602      	mov	r2, r0
 8001360:	4b0b      	ldr	r3, [pc, #44]	@ (8001390 <HAL_RCC_ClockConfig+0x1bc>)
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	091b      	lsrs	r3, r3, #4
 8001366:	f003 030f 	and.w	r3, r3, #15
 800136a:	490a      	ldr	r1, [pc, #40]	@ (8001394 <HAL_RCC_ClockConfig+0x1c0>)
 800136c:	5ccb      	ldrb	r3, [r1, r3]
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a09      	ldr	r2, [pc, #36]	@ (8001398 <HAL_RCC_ClockConfig+0x1c4>)
 8001374:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <HAL_RCC_ClockConfig+0x1c8>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb7a 	bl	8000a74 <HAL_InitTick>

  return HAL_OK;
 8001380:	2300      	movs	r3, #0
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
 800138a:	bf00      	nop
 800138c:	40023c00 	.word	0x40023c00
 8001390:	40023800 	.word	0x40023800
 8001394:	080071bc 	.word	0x080071bc
 8001398:	20000000 	.word	0x20000000
 800139c:	20000004 	.word	0x20000004

080013a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013a4:	b094      	sub	sp, #80	@ 0x50
 80013a6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80013a8:	2300      	movs	r3, #0
 80013aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80013ac:	2300      	movs	r3, #0
 80013ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80013b0:	2300      	movs	r3, #0
 80013b2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80013b4:	2300      	movs	r3, #0
 80013b6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013b8:	4b79      	ldr	r3, [pc, #484]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80013ba:	689b      	ldr	r3, [r3, #8]
 80013bc:	f003 030c 	and.w	r3, r3, #12
 80013c0:	2b08      	cmp	r3, #8
 80013c2:	d00d      	beq.n	80013e0 <HAL_RCC_GetSysClockFreq+0x40>
 80013c4:	2b08      	cmp	r3, #8
 80013c6:	f200 80e1 	bhi.w	800158c <HAL_RCC_GetSysClockFreq+0x1ec>
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <HAL_RCC_GetSysClockFreq+0x34>
 80013ce:	2b04      	cmp	r3, #4
 80013d0:	d003      	beq.n	80013da <HAL_RCC_GetSysClockFreq+0x3a>
 80013d2:	e0db      	b.n	800158c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013d4:	4b73      	ldr	r3, [pc, #460]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80013d6:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 80013d8:	e0db      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013da:	4b73      	ldr	r3, [pc, #460]	@ (80015a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80013dc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80013de:	e0d8      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013e0:	4b6f      	ldr	r3, [pc, #444]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013ea:	4b6d      	ldr	r3, [pc, #436]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d063      	beq.n	80014be <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013f6:	4b6a      	ldr	r3, [pc, #424]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	099b      	lsrs	r3, r3, #6
 80013fc:	2200      	movs	r2, #0
 80013fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001400:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001402:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001404:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
 800140a:	2300      	movs	r3, #0
 800140c:	637b      	str	r3, [r7, #52]	@ 0x34
 800140e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001412:	4622      	mov	r2, r4
 8001414:	462b      	mov	r3, r5
 8001416:	f04f 0000 	mov.w	r0, #0
 800141a:	f04f 0100 	mov.w	r1, #0
 800141e:	0159      	lsls	r1, r3, #5
 8001420:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001424:	0150      	lsls	r0, r2, #5
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4621      	mov	r1, r4
 800142c:	1a51      	subs	r1, r2, r1
 800142e:	6139      	str	r1, [r7, #16]
 8001430:	4629      	mov	r1, r5
 8001432:	eb63 0301 	sbc.w	r3, r3, r1
 8001436:	617b      	str	r3, [r7, #20]
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001444:	4659      	mov	r1, fp
 8001446:	018b      	lsls	r3, r1, #6
 8001448:	4651      	mov	r1, sl
 800144a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800144e:	4651      	mov	r1, sl
 8001450:	018a      	lsls	r2, r1, #6
 8001452:	4651      	mov	r1, sl
 8001454:	ebb2 0801 	subs.w	r8, r2, r1
 8001458:	4659      	mov	r1, fp
 800145a:	eb63 0901 	sbc.w	r9, r3, r1
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800146a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800146e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001472:	4690      	mov	r8, r2
 8001474:	4699      	mov	r9, r3
 8001476:	4623      	mov	r3, r4
 8001478:	eb18 0303 	adds.w	r3, r8, r3
 800147c:	60bb      	str	r3, [r7, #8]
 800147e:	462b      	mov	r3, r5
 8001480:	eb49 0303 	adc.w	r3, r9, r3
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	f04f 0200 	mov.w	r2, #0
 800148a:	f04f 0300 	mov.w	r3, #0
 800148e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001492:	4629      	mov	r1, r5
 8001494:	024b      	lsls	r3, r1, #9
 8001496:	4621      	mov	r1, r4
 8001498:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800149c:	4621      	mov	r1, r4
 800149e:	024a      	lsls	r2, r1, #9
 80014a0:	4610      	mov	r0, r2
 80014a2:	4619      	mov	r1, r3
 80014a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80014a6:	2200      	movs	r2, #0
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80014aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80014ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80014b0:	f7fe ff56 	bl	8000360 <__aeabi_uldivmod>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4613      	mov	r3, r2
 80014ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80014bc:	e058      	b.n	8001570 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80014be:	4b38      	ldr	r3, [pc, #224]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80014c0:	685b      	ldr	r3, [r3, #4]
 80014c2:	099b      	lsrs	r3, r3, #6
 80014c4:	2200      	movs	r2, #0
 80014c6:	4618      	mov	r0, r3
 80014c8:	4611      	mov	r1, r2
 80014ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014ce:	623b      	str	r3, [r7, #32]
 80014d0:	2300      	movs	r3, #0
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014d8:	4642      	mov	r2, r8
 80014da:	464b      	mov	r3, r9
 80014dc:	f04f 0000 	mov.w	r0, #0
 80014e0:	f04f 0100 	mov.w	r1, #0
 80014e4:	0159      	lsls	r1, r3, #5
 80014e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014ea:	0150      	lsls	r0, r2, #5
 80014ec:	4602      	mov	r2, r0
 80014ee:	460b      	mov	r3, r1
 80014f0:	4641      	mov	r1, r8
 80014f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80014f6:	4649      	mov	r1, r9
 80014f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80014fc:	f04f 0200 	mov.w	r2, #0
 8001500:	f04f 0300 	mov.w	r3, #0
 8001504:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001508:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800150c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001510:	ebb2 040a 	subs.w	r4, r2, sl
 8001514:	eb63 050b 	sbc.w	r5, r3, fp
 8001518:	f04f 0200 	mov.w	r2, #0
 800151c:	f04f 0300 	mov.w	r3, #0
 8001520:	00eb      	lsls	r3, r5, #3
 8001522:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001526:	00e2      	lsls	r2, r4, #3
 8001528:	4614      	mov	r4, r2
 800152a:	461d      	mov	r5, r3
 800152c:	4643      	mov	r3, r8
 800152e:	18e3      	adds	r3, r4, r3
 8001530:	603b      	str	r3, [r7, #0]
 8001532:	464b      	mov	r3, r9
 8001534:	eb45 0303 	adc.w	r3, r5, r3
 8001538:	607b      	str	r3, [r7, #4]
 800153a:	f04f 0200 	mov.w	r2, #0
 800153e:	f04f 0300 	mov.w	r3, #0
 8001542:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001546:	4629      	mov	r1, r5
 8001548:	028b      	lsls	r3, r1, #10
 800154a:	4621      	mov	r1, r4
 800154c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001550:	4621      	mov	r1, r4
 8001552:	028a      	lsls	r2, r1, #10
 8001554:	4610      	mov	r0, r2
 8001556:	4619      	mov	r1, r3
 8001558:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800155a:	2200      	movs	r2, #0
 800155c:	61bb      	str	r3, [r7, #24]
 800155e:	61fa      	str	r2, [r7, #28]
 8001560:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001564:	f7fe fefc 	bl	8000360 <__aeabi_uldivmod>
 8001568:	4602      	mov	r2, r0
 800156a:	460b      	mov	r3, r1
 800156c:	4613      	mov	r3, r2
 800156e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001570:	4b0b      	ldr	r3, [pc, #44]	@ (80015a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	0c1b      	lsrs	r3, r3, #16
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	3301      	adds	r3, #1
 800157c:	005b      	lsls	r3, r3, #1
 800157e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 8001580:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001582:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001584:	fbb2 f3f3 	udiv	r3, r2, r3
 8001588:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800158a:	e002      	b.n	8001592 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800158c:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800158e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001590:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001592:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001594:	4618      	mov	r0, r3
 8001596:	3750      	adds	r7, #80	@ 0x50
 8001598:	46bd      	mov	sp, r7
 800159a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800
 80015a4:	00f42400 	.word	0x00f42400
 80015a8:	007a1200 	.word	0x007a1200

080015ac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80015b0:	4b03      	ldr	r3, [pc, #12]	@ (80015c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80015b2:	681b      	ldr	r3, [r3, #0]
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	20000000 	.word	0x20000000

080015c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80015c8:	f7ff fff0 	bl	80015ac <HAL_RCC_GetHCLKFreq>
 80015cc:	4602      	mov	r2, r0
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	0a9b      	lsrs	r3, r3, #10
 80015d4:	f003 0307 	and.w	r3, r3, #7
 80015d8:	4903      	ldr	r1, [pc, #12]	@ (80015e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015da:	5ccb      	ldrb	r3, [r1, r3]
 80015dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	40023800 	.word	0x40023800
 80015e8:	080071cc 	.word	0x080071cc

080015ec <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	220f      	movs	r2, #15
 80015fa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015fc:	4b12      	ldr	r3, [pc, #72]	@ (8001648 <HAL_RCC_GetClockConfig+0x5c>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f003 0203 	and.w	r2, r3, #3
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001608:	4b0f      	ldr	r3, [pc, #60]	@ (8001648 <HAL_RCC_GetClockConfig+0x5c>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001614:	4b0c      	ldr	r3, [pc, #48]	@ (8001648 <HAL_RCC_GetClockConfig+0x5c>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001620:	4b09      	ldr	r3, [pc, #36]	@ (8001648 <HAL_RCC_GetClockConfig+0x5c>)
 8001622:	689b      	ldr	r3, [r3, #8]
 8001624:	08db      	lsrs	r3, r3, #3
 8001626:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800162e:	4b07      	ldr	r3, [pc, #28]	@ (800164c <HAL_RCC_GetClockConfig+0x60>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0207 	and.w	r2, r3, #7
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	601a      	str	r2, [r3, #0]
}
 800163a:	bf00      	nop
 800163c:	370c      	adds	r7, #12
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	40023800 	.word	0x40023800
 800164c:	40023c00 	.word	0x40023c00

08001650 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b086      	sub	sp, #24
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d101      	bne.n	8001662 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165e:	2301      	movs	r3, #1
 8001660:	e273      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 0301 	and.w	r3, r3, #1
 800166a:	2b00      	cmp	r3, #0
 800166c:	d075      	beq.n	800175a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800166e:	4b88      	ldr	r3, [pc, #544]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 030c 	and.w	r3, r3, #12
 8001676:	2b04      	cmp	r3, #4
 8001678:	d00c      	beq.n	8001694 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800167a:	4b85      	ldr	r3, [pc, #532]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001682:	2b08      	cmp	r3, #8
 8001684:	d112      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001686:	4b82      	ldr	r3, [pc, #520]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800168e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001692:	d10b      	bne.n	80016ac <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001694:	4b7e      	ldr	r3, [pc, #504]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800169c:	2b00      	cmp	r3, #0
 800169e:	d05b      	beq.n	8001758 <HAL_RCC_OscConfig+0x108>
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d157      	bne.n	8001758 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e24e      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	685b      	ldr	r3, [r3, #4]
 80016b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80016b4:	d106      	bne.n	80016c4 <HAL_RCC_OscConfig+0x74>
 80016b6:	4b76      	ldr	r3, [pc, #472]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a75      	ldr	r2, [pc, #468]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016bc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	e01d      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016cc:	d10c      	bne.n	80016e8 <HAL_RCC_OscConfig+0x98>
 80016ce:	4b70      	ldr	r3, [pc, #448]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a6f      	ldr	r2, [pc, #444]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	4b6d      	ldr	r3, [pc, #436]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a6c      	ldr	r2, [pc, #432]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e4:	6013      	str	r3, [r2, #0]
 80016e6:	e00b      	b.n	8001700 <HAL_RCC_OscConfig+0xb0>
 80016e8:	4b69      	ldr	r3, [pc, #420]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a68      	ldr	r2, [pc, #416]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016f2:	6013      	str	r3, [r2, #0]
 80016f4:	4b66      	ldr	r3, [pc, #408]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a65      	ldr	r2, [pc, #404]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80016fa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685b      	ldr	r3, [r3, #4]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d013      	beq.n	8001730 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fac8 	bl	8000c9c <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fac4 	bl	8000c9c <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e213      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001722:	4b5b      	ldr	r3, [pc, #364]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d0f0      	beq.n	8001710 <HAL_RCC_OscConfig+0xc0>
 800172e:	e014      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001730:	f7ff fab4 	bl	8000c9c <HAL_GetTick>
 8001734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001736:	e008      	b.n	800174a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001738:	f7ff fab0 	bl	8000c9c <HAL_GetTick>
 800173c:	4602      	mov	r2, r0
 800173e:	693b      	ldr	r3, [r7, #16]
 8001740:	1ad3      	subs	r3, r2, r3
 8001742:	2b64      	cmp	r3, #100	@ 0x64
 8001744:	d901      	bls.n	800174a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001746:	2303      	movs	r3, #3
 8001748:	e1ff      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174a:	4b51      	ldr	r3, [pc, #324]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001752:	2b00      	cmp	r3, #0
 8001754:	d1f0      	bne.n	8001738 <HAL_RCC_OscConfig+0xe8>
 8001756:	e000      	b.n	800175a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0302 	and.w	r3, r3, #2
 8001762:	2b00      	cmp	r3, #0
 8001764:	d063      	beq.n	800182e <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001766:	4b4a      	ldr	r3, [pc, #296]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001768:	689b      	ldr	r3, [r3, #8]
 800176a:	f003 030c 	and.w	r3, r3, #12
 800176e:	2b00      	cmp	r3, #0
 8001770:	d00b      	beq.n	800178a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001772:	4b47      	ldr	r3, [pc, #284]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001774:	689b      	ldr	r3, [r3, #8]
 8001776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800177a:	2b08      	cmp	r3, #8
 800177c:	d11c      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800177e:	4b44      	ldr	r3, [pc, #272]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d116      	bne.n	80017b8 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178a:	4b41      	ldr	r3, [pc, #260]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d005      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b01      	cmp	r3, #1
 800179c:	d001      	beq.n	80017a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e1d3      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a2:	4b3b      	ldr	r3, [pc, #236]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	691b      	ldr	r3, [r3, #16]
 80017ae:	00db      	lsls	r3, r3, #3
 80017b0:	4937      	ldr	r1, [pc, #220]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017b2:	4313      	orrs	r3, r2
 80017b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017b6:	e03a      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	68db      	ldr	r3, [r3, #12]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d020      	beq.n	8001802 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017c0:	4b34      	ldr	r3, [pc, #208]	@ (8001894 <HAL_RCC_OscConfig+0x244>)
 80017c2:	2201      	movs	r2, #1
 80017c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017c6:	f7ff fa69 	bl	8000c9c <HAL_GetTick>
 80017ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017cc:	e008      	b.n	80017e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017ce:	f7ff fa65 	bl	8000c9c <HAL_GetTick>
 80017d2:	4602      	mov	r2, r0
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	2b02      	cmp	r3, #2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e1b4      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017e0:	4b2b      	ldr	r3, [pc, #172]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0302 	and.w	r3, r3, #2
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d0f0      	beq.n	80017ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ec:	4b28      	ldr	r3, [pc, #160]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	691b      	ldr	r3, [r3, #16]
 80017f8:	00db      	lsls	r3, r3, #3
 80017fa:	4925      	ldr	r1, [pc, #148]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 80017fc:	4313      	orrs	r3, r2
 80017fe:	600b      	str	r3, [r1, #0]
 8001800:	e015      	b.n	800182e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001802:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_OscConfig+0x244>)
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff fa48 	bl	8000c9c <HAL_GetTick>
 800180c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff fa44 	bl	8000c9c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e193      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001822:	4b1b      	ldr	r3, [pc, #108]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	f003 0302 	and.w	r3, r3, #2
 800182a:	2b00      	cmp	r3, #0
 800182c:	d1f0      	bne.n	8001810 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0308 	and.w	r3, r3, #8
 8001836:	2b00      	cmp	r3, #0
 8001838:	d036      	beq.n	80018a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	695b      	ldr	r3, [r3, #20]
 800183e:	2b00      	cmp	r3, #0
 8001840:	d016      	beq.n	8001870 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001842:	4b15      	ldr	r3, [pc, #84]	@ (8001898 <HAL_RCC_OscConfig+0x248>)
 8001844:	2201      	movs	r2, #1
 8001846:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001848:	f7ff fa28 	bl	8000c9c <HAL_GetTick>
 800184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800184e:	e008      	b.n	8001862 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001850:	f7ff fa24 	bl	8000c9c <HAL_GetTick>
 8001854:	4602      	mov	r2, r0
 8001856:	693b      	ldr	r3, [r7, #16]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b02      	cmp	r3, #2
 800185c:	d901      	bls.n	8001862 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800185e:	2303      	movs	r3, #3
 8001860:	e173      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001862:	4b0b      	ldr	r3, [pc, #44]	@ (8001890 <HAL_RCC_OscConfig+0x240>)
 8001864:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d0f0      	beq.n	8001850 <HAL_RCC_OscConfig+0x200>
 800186e:	e01b      	b.n	80018a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001870:	4b09      	ldr	r3, [pc, #36]	@ (8001898 <HAL_RCC_OscConfig+0x248>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001876:	f7ff fa11 	bl	8000c9c <HAL_GetTick>
 800187a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800187c:	e00e      	b.n	800189c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800187e:	f7ff fa0d 	bl	8000c9c <HAL_GetTick>
 8001882:	4602      	mov	r2, r0
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	1ad3      	subs	r3, r2, r3
 8001888:	2b02      	cmp	r3, #2
 800188a:	d907      	bls.n	800189c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800188c:	2303      	movs	r3, #3
 800188e:	e15c      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
 8001890:	40023800 	.word	0x40023800
 8001894:	42470000 	.word	0x42470000
 8001898:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800189c:	4b8a      	ldr	r3, [pc, #552]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800189e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d1ea      	bne.n	800187e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0304 	and.w	r3, r3, #4
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	f000 8097 	beq.w	80019e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018b6:	2300      	movs	r3, #0
 80018b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ba:	4b83      	ldr	r3, [pc, #524]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d10f      	bne.n	80018e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60bb      	str	r3, [r7, #8]
 80018ca:	4b7f      	ldr	r3, [pc, #508]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ce:	4a7e      	ldr	r2, [pc, #504]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80018d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d6:	4b7c      	ldr	r3, [pc, #496]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018de:	60bb      	str	r3, [r7, #8]
 80018e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018e2:	2301      	movs	r3, #1
 80018e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018e6:	4b79      	ldr	r3, [pc, #484]	@ (8001acc <HAL_RCC_OscConfig+0x47c>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d118      	bne.n	8001924 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018f2:	4b76      	ldr	r3, [pc, #472]	@ (8001acc <HAL_RCC_OscConfig+0x47c>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a75      	ldr	r2, [pc, #468]	@ (8001acc <HAL_RCC_OscConfig+0x47c>)
 80018f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018fe:	f7ff f9cd 	bl	8000c9c <HAL_GetTick>
 8001902:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001904:	e008      	b.n	8001918 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001906:	f7ff f9c9 	bl	8000c9c <HAL_GetTick>
 800190a:	4602      	mov	r2, r0
 800190c:	693b      	ldr	r3, [r7, #16]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	2b02      	cmp	r3, #2
 8001912:	d901      	bls.n	8001918 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001914:	2303      	movs	r3, #3
 8001916:	e118      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001918:	4b6c      	ldr	r3, [pc, #432]	@ (8001acc <HAL_RCC_OscConfig+0x47c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001920:	2b00      	cmp	r3, #0
 8001922:	d0f0      	beq.n	8001906 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	2b01      	cmp	r3, #1
 800192a:	d106      	bne.n	800193a <HAL_RCC_OscConfig+0x2ea>
 800192c:	4b66      	ldr	r3, [pc, #408]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800192e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001930:	4a65      	ldr	r2, [pc, #404]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001932:	f043 0301 	orr.w	r3, r3, #1
 8001936:	6713      	str	r3, [r2, #112]	@ 0x70
 8001938:	e01c      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	689b      	ldr	r3, [r3, #8]
 800193e:	2b05      	cmp	r3, #5
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x30c>
 8001942:	4b61      	ldr	r3, [pc, #388]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001944:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001946:	4a60      	ldr	r2, [pc, #384]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001948:	f043 0304 	orr.w	r3, r3, #4
 800194c:	6713      	str	r3, [r2, #112]	@ 0x70
 800194e:	4b5e      	ldr	r3, [pc, #376]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001950:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001952:	4a5d      	ldr	r2, [pc, #372]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001954:	f043 0301 	orr.w	r3, r3, #1
 8001958:	6713      	str	r3, [r2, #112]	@ 0x70
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0x324>
 800195c:	4b5a      	ldr	r3, [pc, #360]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001960:	4a59      	ldr	r2, [pc, #356]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001962:	f023 0301 	bic.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	@ 0x70
 8001968:	4b57      	ldr	r3, [pc, #348]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800196a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800196c:	4a56      	ldr	r2, [pc, #344]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800196e:	f023 0304 	bic.w	r3, r3, #4
 8001972:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	689b      	ldr	r3, [r3, #8]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d015      	beq.n	80019a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff f98e 	bl	8000c9c <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001982:	e00a      	b.n	800199a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001984:	f7ff f98a 	bl	8000c9c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e0d7      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800199a:	4b4b      	ldr	r3, [pc, #300]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d0ee      	beq.n	8001984 <HAL_RCC_OscConfig+0x334>
 80019a6:	e014      	b.n	80019d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a8:	f7ff f978 	bl	8000c9c <HAL_GetTick>
 80019ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019ae:	e00a      	b.n	80019c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b0:	f7ff f974 	bl	8000c9c <HAL_GetTick>
 80019b4:	4602      	mov	r2, r0
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	1ad3      	subs	r3, r2, r3
 80019ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80019be:	4293      	cmp	r3, r2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e0c1      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019c6:	4b40      	ldr	r3, [pc, #256]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80019c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1ee      	bne.n	80019b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80019d2:	7dfb      	ldrb	r3, [r7, #23]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d105      	bne.n	80019e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019d8:	4b3b      	ldr	r3, [pc, #236]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019dc:	4a3a      	ldr	r2, [pc, #232]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80019de:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 80ad 	beq.w	8001b48 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019ee:	4b36      	ldr	r3, [pc, #216]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f003 030c 	and.w	r3, r3, #12
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d060      	beq.n	8001abc <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d145      	bne.n	8001a8e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a02:	4b33      	ldr	r3, [pc, #204]	@ (8001ad0 <HAL_RCC_OscConfig+0x480>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a08:	f7ff f948 	bl	8000c9c <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a10:	f7ff f944 	bl	8000c9c <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e093      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a22:	4b29      	ldr	r3, [pc, #164]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f0      	bne.n	8001a10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	69da      	ldr	r2, [r3, #28]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6a1b      	ldr	r3, [r3, #32]
 8001a36:	431a      	orrs	r2, r3
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a3c:	019b      	lsls	r3, r3, #6
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a44:	085b      	lsrs	r3, r3, #1
 8001a46:	3b01      	subs	r3, #1
 8001a48:	041b      	lsls	r3, r3, #16
 8001a4a:	431a      	orrs	r2, r3
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a50:	061b      	lsls	r3, r3, #24
 8001a52:	431a      	orrs	r2, r3
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a58:	071b      	lsls	r3, r3, #28
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a60:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad0 <HAL_RCC_OscConfig+0x480>)
 8001a62:	2201      	movs	r2, #1
 8001a64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a66:	f7ff f919 	bl	8000c9c <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f915 	bl	8000c9c <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e064      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a80:	4b11      	ldr	r3, [pc, #68]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d0f0      	beq.n	8001a6e <HAL_RCC_OscConfig+0x41e>
 8001a8c:	e05c      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a8e:	4b10      	ldr	r3, [pc, #64]	@ (8001ad0 <HAL_RCC_OscConfig+0x480>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a94:	f7ff f902 	bl	8000c9c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f8fe 	bl	8000c9c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e04d      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <HAL_RCC_OscConfig+0x478>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x44c>
 8001aba:	e045      	b.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	699b      	ldr	r3, [r3, #24]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d107      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	e040      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40007000 	.word	0x40007000
 8001ad0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ad4:	4b1f      	ldr	r3, [pc, #124]	@ (8001b54 <HAL_RCC_OscConfig+0x504>)
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d030      	beq.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d129      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d122      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001afe:	68fa      	ldr	r2, [r7, #12]
 8001b00:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001b04:	4013      	ands	r3, r2
 8001b06:	687a      	ldr	r2, [r7, #4]
 8001b08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001b0a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b0c:	4293      	cmp	r3, r2
 8001b0e:	d119      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b1a:	085b      	lsrs	r3, r3, #1
 8001b1c:	3b01      	subs	r3, #1
 8001b1e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d10f      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b2e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d107      	bne.n	8001b44 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b3e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3718      	adds	r7, #24
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	40023800 	.word	0x40023800

08001b58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b082      	sub	sp, #8
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e041      	b.n	8001bee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d106      	bne.n	8001b84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b7e:	6878      	ldr	r0, [r7, #4]
 8001b80:	f000 f839 	bl	8001bf6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2202      	movs	r2, #2
 8001b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	3304      	adds	r3, #4
 8001b94:	4619      	mov	r1, r3
 8001b96:	4610      	mov	r0, r2
 8001b98:	f000 f9c0 	bl	8001f1c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}

08001bf6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bf6:	b480      	push	{r7}
 8001bf8:	b083      	sub	sp, #12
 8001bfa:	af00      	add	r7, sp, #0
 8001bfc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bfe:	bf00      	nop
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr
	...

08001c0c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b085      	sub	sp, #20
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d001      	beq.n	8001c24 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e04e      	b.n	8001cc2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	68da      	ldr	r2, [r3, #12]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f042 0201 	orr.w	r2, r2, #1
 8001c3a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a23      	ldr	r2, [pc, #140]	@ (8001cd0 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d022      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c4e:	d01d      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a1f      	ldr	r2, [pc, #124]	@ (8001cd4 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d018      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a1e      	ldr	r2, [pc, #120]	@ (8001cd8 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d013      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a1c      	ldr	r2, [pc, #112]	@ (8001cdc <HAL_TIM_Base_Start_IT+0xd0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d00e      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4a1b      	ldr	r2, [pc, #108]	@ (8001ce0 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d009      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4a19      	ldr	r2, [pc, #100]	@ (8001ce4 <HAL_TIM_Base_Start_IT+0xd8>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d004      	beq.n	8001c8c <HAL_TIM_Base_Start_IT+0x80>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4a18      	ldr	r2, [pc, #96]	@ (8001ce8 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c88:	4293      	cmp	r3, r2
 8001c8a:	d111      	bne.n	8001cb0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	689b      	ldr	r3, [r3, #8]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d010      	beq.n	8001cc0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	f042 0201 	orr.w	r2, r2, #1
 8001cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cae:	e007      	b.n	8001cc0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cc0:	2300      	movs	r3, #0
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
 8001cce:	bf00      	nop
 8001cd0:	40010000 	.word	0x40010000
 8001cd4:	40000400 	.word	0x40000400
 8001cd8:	40000800 	.word	0x40000800
 8001cdc:	40000c00 	.word	0x40000c00
 8001ce0:	40010400 	.word	0x40010400
 8001ce4:	40014000 	.word	0x40014000
 8001ce8:	40001800 	.word	0x40001800

08001cec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	68db      	ldr	r3, [r3, #12]
 8001cfa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	691b      	ldr	r3, [r3, #16]
 8001d02:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001d04:	68bb      	ldr	r3, [r7, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d020      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	f003 0302 	and.w	r3, r3, #2
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d01b      	beq.n	8001d50 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f06f 0202 	mvn.w	r2, #2
 8001d20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	699b      	ldr	r3, [r3, #24]
 8001d2e:	f003 0303 	and.w	r3, r3, #3
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d003      	beq.n	8001d3e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 f8d2 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d3c:	e005      	b.n	8001d4a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 f8c4 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d44:	6878      	ldr	r0, [r7, #4]
 8001d46:	f000 f8d5 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	f003 0304 	and.w	r3, r3, #4
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d020      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	f003 0304 	and.w	r3, r3, #4
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d01b      	beq.n	8001d9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f06f 0204 	mvn.w	r2, #4
 8001d6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2202      	movs	r2, #2
 8001d72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	699b      	ldr	r3, [r3, #24]
 8001d7a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d003      	beq.n	8001d8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d82:	6878      	ldr	r0, [r7, #4]
 8001d84:	f000 f8ac 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001d88:	e005      	b.n	8001d96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d8a:	6878      	ldr	r0, [r7, #4]
 8001d8c:	f000 f89e 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f000 f8af 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	2200      	movs	r2, #0
 8001d9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d9c:	68bb      	ldr	r3, [r7, #8]
 8001d9e:	f003 0308 	and.w	r3, r3, #8
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d020      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d01b      	beq.n	8001de8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f06f 0208 	mvn.w	r2, #8
 8001db8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2204      	movs	r2, #4
 8001dbe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	f003 0303 	and.w	r3, r3, #3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d003      	beq.n	8001dd6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f886 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001dd4:	e005      	b.n	8001de2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f000 f878 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f889 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	2200      	movs	r2, #0
 8001de6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	f003 0310 	and.w	r3, r3, #16
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d020      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	f003 0310 	and.w	r3, r3, #16
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d01b      	beq.n	8001e34 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f06f 0210 	mvn.w	r2, #16
 8001e04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2208      	movs	r2, #8
 8001e0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	69db      	ldr	r3, [r3, #28]
 8001e12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f000 f860 	bl	8001ee0 <HAL_TIM_IC_CaptureCallback>
 8001e20:	e005      	b.n	8001e2e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f852 	bl	8001ecc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f000 f863 	bl	8001ef4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e34:	68bb      	ldr	r3, [r7, #8]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00c      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	f003 0301 	and.w	r3, r3, #1
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d007      	beq.n	8001e58 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f06f 0201 	mvn.w	r2, #1
 8001e50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fdce 	bl	80009f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d00c      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d007      	beq.n	8001e7c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e76:	6878      	ldr	r0, [r7, #4]
 8001e78:	f000 f906 	bl	8002088 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d00c      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d007      	beq.n	8001ea0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f000 f834 	bl	8001f08 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	f003 0320 	and.w	r3, r3, #32
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001eaa:	68fb      	ldr	r3, [r7, #12]
 8001eac:	f003 0320 	and.w	r3, r3, #32
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d007      	beq.n	8001ec4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f06f 0220 	mvn.w	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 f8d8 	bl	8002074 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3710      	adds	r7, #16
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}

08001ecc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b083      	sub	sp, #12
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001efc:	bf00      	nop
 8001efe:	370c      	adds	r7, #12
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f10:	bf00      	nop
 8001f12:	370c      	adds	r7, #12
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a46      	ldr	r2, [pc, #280]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d013      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f3a:	d00f      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	4a43      	ldr	r2, [pc, #268]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d00b      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	4a42      	ldr	r2, [pc, #264]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d007      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	4a41      	ldr	r2, [pc, #260]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f50:	4293      	cmp	r3, r2
 8001f52:	d003      	beq.n	8001f5c <TIM_Base_SetConfig+0x40>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4a40      	ldr	r2, [pc, #256]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d108      	bne.n	8001f6e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f62:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	68fa      	ldr	r2, [r7, #12]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a35      	ldr	r2, [pc, #212]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d02b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f7c:	d027      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a32      	ldr	r2, [pc, #200]	@ (800204c <TIM_Base_SetConfig+0x130>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d023      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a31      	ldr	r2, [pc, #196]	@ (8002050 <TIM_Base_SetConfig+0x134>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d01f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a30      	ldr	r2, [pc, #192]	@ (8002054 <TIM_Base_SetConfig+0x138>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d01b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2f      	ldr	r2, [pc, #188]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d017      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a2e      	ldr	r2, [pc, #184]	@ (800205c <TIM_Base_SetConfig+0x140>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d013      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	4a2d      	ldr	r2, [pc, #180]	@ (8002060 <TIM_Base_SetConfig+0x144>)
 8001faa:	4293      	cmp	r3, r2
 8001fac:	d00f      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a2c      	ldr	r2, [pc, #176]	@ (8002064 <TIM_Base_SetConfig+0x148>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d00b      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	@ (8002068 <TIM_Base_SetConfig+0x14c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d007      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <TIM_Base_SetConfig+0x150>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d003      	beq.n	8001fce <TIM_Base_SetConfig+0xb2>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a29      	ldr	r2, [pc, #164]	@ (8002070 <TIM_Base_SetConfig+0x154>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d108      	bne.n	8001fe0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	68db      	ldr	r3, [r3, #12]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	695b      	ldr	r3, [r3, #20]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	68fa      	ldr	r2, [r7, #12]
 8001ff2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001ff4:	683b      	ldr	r3, [r7, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	4a10      	ldr	r2, [pc, #64]	@ (8002048 <TIM_Base_SetConfig+0x12c>)
 8002008:	4293      	cmp	r3, r2
 800200a:	d003      	beq.n	8002014 <TIM_Base_SetConfig+0xf8>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	4a12      	ldr	r2, [pc, #72]	@ (8002058 <TIM_Base_SetConfig+0x13c>)
 8002010:	4293      	cmp	r3, r2
 8002012:	d103      	bne.n	800201c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	691a      	ldr	r2, [r3, #16]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	2b01      	cmp	r3, #1
 800202c:	d105      	bne.n	800203a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	f023 0201 	bic.w	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	611a      	str	r2, [r3, #16]
  }
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40010400 	.word	0x40010400
 800205c:	40014000 	.word	0x40014000
 8002060:	40014400 	.word	0x40014400
 8002064:	40014800 	.word	0x40014800
 8002068:	40001800 	.word	0x40001800
 800206c:	40001c00 	.word	0x40001c00
 8002070:	40002000 	.word	0x40002000

08002074 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800207c:	bf00      	nop
 800207e:	370c      	adds	r7, #12
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr

08002088 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002088:	b480      	push	{r7}
 800208a:	b083      	sub	sp, #12
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002090:	bf00      	nop
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f103 0208 	add.w	r2, r3, #8
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f103 0208 	add.w	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	f103 0208 	add.w	r2, r3, #8
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020d0:	bf00      	nop
 80020d2:	370c      	adds	r7, #12
 80020d4:	46bd      	mov	sp, r7
 80020d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020da:	4770      	bx	lr

080020dc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020ea:	bf00      	nop
 80020ec:	370c      	adds	r7, #12
 80020ee:	46bd      	mov	sp, r7
 80020f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f4:	4770      	bx	lr

080020f6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020f6:	b480      	push	{r7}
 80020f8:	b085      	sub	sp, #20
 80020fa:	af00      	add	r7, sp, #0
 80020fc:	6078      	str	r0, [r7, #4]
 80020fe:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800210c:	d103      	bne.n	8002116 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	691b      	ldr	r3, [r3, #16]
 8002112:	60fb      	str	r3, [r7, #12]
 8002114:	e00c      	b.n	8002130 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3308      	adds	r3, #8
 800211a:	60fb      	str	r3, [r7, #12]
 800211c:	e002      	b.n	8002124 <vListInsert+0x2e>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	429a      	cmp	r2, r3
 800212e:	d2f6      	bcs.n	800211e <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	685a      	ldr	r2, [r3, #4]
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	683a      	ldr	r2, [r7, #0]
 800213e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	68fa      	ldr	r2, [r7, #12]
 8002144:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	1c5a      	adds	r2, r3, #1
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	601a      	str	r2, [r3, #0]
}
 800215c:	bf00      	nop
 800215e:	3714      	adds	r7, #20
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	691b      	ldr	r3, [r3, #16]
 8002174:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6892      	ldr	r2, [r2, #8]
 800217e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	689b      	ldr	r3, [r3, #8]
 8002184:	687a      	ldr	r2, [r7, #4]
 8002186:	6852      	ldr	r2, [r2, #4]
 8002188:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	685b      	ldr	r3, [r3, #4]
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	429a      	cmp	r2, r3
 8002192:	d103      	bne.n	800219c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	689a      	ldr	r2, [r3, #8]
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	1e5a      	subs	r2, r3, #1
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3714      	adds	r7, #20
 80021b4:	46bd      	mov	sp, r7
 80021b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ba:	4770      	bx	lr

080021bc <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
 80021c4:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80021c6:	2301      	movs	r3, #1
 80021c8:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d10b      	bne.n	80021ec <xQueueGenericReset+0x30>
        __asm volatile
 80021d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021d8:	f383 8811 	msr	BASEPRI, r3
 80021dc:	f3bf 8f6f 	isb	sy
 80021e0:	f3bf 8f4f 	dsb	sy
 80021e4:	60fb      	str	r3, [r7, #12]
    }
 80021e6:	bf00      	nop
 80021e8:	bf00      	nop
 80021ea:	e7fd      	b.n	80021e8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d05d      	beq.n	80022ae <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d059      	beq.n	80022ae <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002202:	2100      	movs	r1, #0
 8002204:	fba3 2302 	umull	r2, r3, r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d000      	beq.n	800220e <xQueueGenericReset+0x52>
 800220c:	2101      	movs	r1, #1
 800220e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002210:	2b00      	cmp	r3, #0
 8002212:	d14c      	bne.n	80022ae <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8002214:	f001 ff12 	bl	800403c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002220:	6939      	ldr	r1, [r7, #16]
 8002222:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002224:	fb01 f303 	mul.w	r3, r1, r3
 8002228:	441a      	add	r2, r3
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	2200      	movs	r2, #0
 8002232:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	681a      	ldr	r2, [r3, #0]
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	3b01      	subs	r3, #1
 8002246:	6939      	ldr	r1, [r7, #16]
 8002248:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	441a      	add	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	22ff      	movs	r2, #255	@ 0xff
 8002258:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	22ff      	movs	r2, #255	@ 0xff
 8002260:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d114      	bne.n	8002294 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	691b      	ldr	r3, [r3, #16]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d01a      	beq.n	80022a8 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	3310      	adds	r3, #16
 8002276:	4618      	mov	r0, r3
 8002278:	f000 ffea 	bl	8003250 <xTaskRemoveFromEventList>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d012      	beq.n	80022a8 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002282:	4b16      	ldr	r3, [pc, #88]	@ (80022dc <xQueueGenericReset+0x120>)
 8002284:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002288:	601a      	str	r2, [r3, #0]
 800228a:	f3bf 8f4f 	dsb	sy
 800228e:	f3bf 8f6f 	isb	sy
 8002292:	e009      	b.n	80022a8 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	3310      	adds	r3, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff feff 	bl	800209c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	3324      	adds	r3, #36	@ 0x24
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff fefa 	bl	800209c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80022a8:	f001 fefa 	bl	80040a0 <vPortExitCritical>
 80022ac:	e001      	b.n	80022b2 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d10b      	bne.n	80022d0 <xQueueGenericReset+0x114>
        __asm volatile
 80022b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80022bc:	f383 8811 	msr	BASEPRI, r3
 80022c0:	f3bf 8f6f 	isb	sy
 80022c4:	f3bf 8f4f 	dsb	sy
 80022c8:	60bb      	str	r3, [r7, #8]
    }
 80022ca:	bf00      	nop
 80022cc:	bf00      	nop
 80022ce:	e7fd      	b.n	80022cc <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022d0:	697b      	ldr	r3, [r7, #20]
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	3718      	adds	r7, #24
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	e000ed04 	.word	0xe000ed04

080022e0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b08a      	sub	sp, #40	@ 0x28
 80022e4:	af02      	add	r7, sp, #8
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	4613      	mov	r3, r2
 80022ec:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022ee:	2300      	movs	r3, #0
 80022f0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d02e      	beq.n	8002356 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022f8:	2100      	movs	r1, #0
 80022fa:	68ba      	ldr	r2, [r7, #8]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	fba3 2302 	umull	r2, r3, r3, r2
 8002302:	2b00      	cmp	r3, #0
 8002304:	d000      	beq.n	8002308 <xQueueGenericCreate+0x28>
 8002306:	2101      	movs	r1, #1
 8002308:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800230a:	2b00      	cmp	r3, #0
 800230c:	d123      	bne.n	8002356 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	68ba      	ldr	r2, [r7, #8]
 8002312:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002316:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800231a:	d81c      	bhi.n	8002356 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	68ba      	ldr	r2, [r7, #8]
 8002320:	fb02 f303 	mul.w	r3, r2, r3
 8002324:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	3350      	adds	r3, #80	@ 0x50
 800232a:	4618      	mov	r0, r3
 800232c:	f001 ffb8 	bl	80042a0 <pvPortMalloc>
 8002330:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002332:	69fb      	ldr	r3, [r7, #28]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d01d      	beq.n	8002374 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	3350      	adds	r3, #80	@ 0x50
 8002340:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002342:	79fa      	ldrb	r2, [r7, #7]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	9300      	str	r3, [sp, #0]
 8002348:	4613      	mov	r3, r2
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	68b9      	ldr	r1, [r7, #8]
 800234e:	68f8      	ldr	r0, [r7, #12]
 8002350:	f000 f815 	bl	800237e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002354:	e00e      	b.n	8002374 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d10b      	bne.n	8002374 <xQueueGenericCreate+0x94>
        __asm volatile
 800235c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002360:	f383 8811 	msr	BASEPRI, r3
 8002364:	f3bf 8f6f 	isb	sy
 8002368:	f3bf 8f4f 	dsb	sy
 800236c:	613b      	str	r3, [r7, #16]
    }
 800236e:	bf00      	nop
 8002370:	bf00      	nop
 8002372:	e7fd      	b.n	8002370 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8002374:	69fb      	ldr	r3, [r7, #28]
    }
 8002376:	4618      	mov	r0, r3
 8002378:	3720      	adds	r7, #32
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800237e:	b580      	push	{r7, lr}
 8002380:	b084      	sub	sp, #16
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d103      	bne.n	800239a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	601a      	str	r2, [r3, #0]
 8002398:	e002      	b.n	80023a0 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800239a:	69bb      	ldr	r3, [r7, #24]
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	68fa      	ldr	r2, [r7, #12]
 80023a4:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80023a6:	69bb      	ldr	r3, [r7, #24]
 80023a8:	68ba      	ldr	r2, [r7, #8]
 80023aa:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80023ac:	2101      	movs	r1, #1
 80023ae:	69b8      	ldr	r0, [r7, #24]
 80023b0:	f7ff ff04 	bl	80021bc <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80023b4:	69bb      	ldr	r3, [r7, #24]
 80023b6:	78fa      	ldrb	r2, [r7, #3]
 80023b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 80023bc:	78fb      	ldrb	r3, [r7, #3]
 80023be:	68ba      	ldr	r2, [r7, #8]
 80023c0:	68f9      	ldr	r1, [r7, #12]
 80023c2:	2073      	movs	r0, #115	@ 0x73
 80023c4:	f003 fb0c 	bl	80059e0 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023c8:	bf00      	nop
 80023ca:	3710      	adds	r7, #16
 80023cc:	46bd      	mov	sp, r7
 80023ce:	bd80      	pop	{r7, pc}

080023d0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023d0:	b590      	push	{r4, r7, lr}
 80023d2:	b08f      	sub	sp, #60	@ 0x3c
 80023d4:	af02      	add	r7, sp, #8
 80023d6:	60f8      	str	r0, [r7, #12]
 80023d8:	60b9      	str	r1, [r7, #8]
 80023da:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023dc:	2300      	movs	r3, #0
 80023de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d10b      	bne.n	8002402 <xQueueReceive+0x32>
        __asm volatile
 80023ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023ee:	f383 8811 	msr	BASEPRI, r3
 80023f2:	f3bf 8f6f 	isb	sy
 80023f6:	f3bf 8f4f 	dsb	sy
 80023fa:	623b      	str	r3, [r7, #32]
    }
 80023fc:	bf00      	nop
 80023fe:	bf00      	nop
 8002400:	e7fd      	b.n	80023fe <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002402:	68bb      	ldr	r3, [r7, #8]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d103      	bne.n	8002410 <xQueueReceive+0x40>
 8002408:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800240a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240c:	2b00      	cmp	r3, #0
 800240e:	d101      	bne.n	8002414 <xQueueReceive+0x44>
 8002410:	2301      	movs	r3, #1
 8002412:	e000      	b.n	8002416 <xQueueReceive+0x46>
 8002414:	2300      	movs	r3, #0
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10b      	bne.n	8002432 <xQueueReceive+0x62>
        __asm volatile
 800241a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800241e:	f383 8811 	msr	BASEPRI, r3
 8002422:	f3bf 8f6f 	isb	sy
 8002426:	f3bf 8f4f 	dsb	sy
 800242a:	61fb      	str	r3, [r7, #28]
    }
 800242c:	bf00      	nop
 800242e:	bf00      	nop
 8002430:	e7fd      	b.n	800242e <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002432:	f001 f923 	bl	800367c <xTaskGetSchedulerState>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <xQueueReceive+0x72>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d101      	bne.n	8002446 <xQueueReceive+0x76>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <xQueueReceive+0x78>
 8002446:	2300      	movs	r3, #0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d10b      	bne.n	8002464 <xQueueReceive+0x94>
        __asm volatile
 800244c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002450:	f383 8811 	msr	BASEPRI, r3
 8002454:	f3bf 8f6f 	isb	sy
 8002458:	f3bf 8f4f 	dsb	sy
 800245c:	61bb      	str	r3, [r7, #24]
    }
 800245e:	bf00      	nop
 8002460:	bf00      	nop
 8002462:	e7fd      	b.n	8002460 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002464:	f001 fdea 	bl	800403c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800246a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246c:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800246e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002470:	2b00      	cmp	r3, #0
 8002472:	d02f      	beq.n	80024d4 <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002474:	68b9      	ldr	r1, [r7, #8]
 8002476:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002478:	f000 f8be 	bl	80025f8 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	4618      	mov	r0, r3
 8002480:	f003 ffda 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 8002484:	4604      	mov	r4, r0
 8002486:	2000      	movs	r0, #0
 8002488:	f003 ffd6 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 800248c:	4602      	mov	r2, r0
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2101      	movs	r1, #1
 8002492:	9100      	str	r1, [sp, #0]
 8002494:	4621      	mov	r1, r4
 8002496:	205c      	movs	r0, #92	@ 0x5c
 8002498:	f003 fb18 	bl	8005acc <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800249c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800249e:	1e5a      	subs	r2, r3, #1
 80024a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a2:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d00f      	beq.n	80024cc <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ae:	3310      	adds	r3, #16
 80024b0:	4618      	mov	r0, r3
 80024b2:	f000 fecd 	bl	8003250 <xTaskRemoveFromEventList>
 80024b6:	4603      	mov	r3, r0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d007      	beq.n	80024cc <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80024bc:	4b4d      	ldr	r3, [pc, #308]	@ (80025f4 <xQueueReceive+0x224>)
 80024be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80024c2:	601a      	str	r2, [r3, #0]
 80024c4:	f3bf 8f4f 	dsb	sy
 80024c8:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024cc:	f001 fde8 	bl	80040a0 <vPortExitCritical>
                return pdPASS;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e08a      	b.n	80025ea <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024da:	f001 fde1 	bl	80040a0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024e0:	4618      	mov	r0, r3
 80024e2:	f003 ffa9 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 80024e6:	4604      	mov	r4, r0
 80024e8:	2000      	movs	r0, #0
 80024ea:	f003 ffa5 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 80024ee:	4602      	mov	r2, r0
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2101      	movs	r1, #1
 80024f4:	9100      	str	r1, [sp, #0]
 80024f6:	4621      	mov	r1, r4
 80024f8:	205c      	movs	r0, #92	@ 0x5c
 80024fa:	f003 fae7 	bl	8005acc <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024fe:	2300      	movs	r3, #0
 8002500:	e073      	b.n	80025ea <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002502:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002504:	2b00      	cmp	r3, #0
 8002506:	d106      	bne.n	8002516 <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002508:	f107 0310 	add.w	r3, r7, #16
 800250c:	4618      	mov	r0, r3
 800250e:	f000 ff79 	bl	8003404 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002512:	2301      	movs	r3, #1
 8002514:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002516:	f001 fdc3 	bl	80040a0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800251a:	f000 fb73 	bl	8002c04 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800251e:	f001 fd8d 	bl	800403c <vPortEnterCritical>
 8002522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002524:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002528:	b25b      	sxtb	r3, r3
 800252a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800252e:	d103      	bne.n	8002538 <xQueueReceive+0x168>
 8002530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002532:	2200      	movs	r2, #0
 8002534:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800253a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800253e:	b25b      	sxtb	r3, r3
 8002540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002544:	d103      	bne.n	800254e <xQueueReceive+0x17e>
 8002546:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002548:	2200      	movs	r2, #0
 800254a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800254e:	f001 fda7 	bl	80040a0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002552:	1d3a      	adds	r2, r7, #4
 8002554:	f107 0310 	add.w	r3, r7, #16
 8002558:	4611      	mov	r1, r2
 800255a:	4618      	mov	r0, r3
 800255c:	f000 ff68 	bl	8003430 <xTaskCheckForTimeOut>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d124      	bne.n	80025b0 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002566:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002568:	f000 f8be 	bl	80026e8 <prvIsQueueEmpty>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d018      	beq.n	80025a4 <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002574:	3324      	adds	r3, #36	@ 0x24
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	4611      	mov	r1, r2
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fdf8 	bl	8003170 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002580:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002582:	f000 f85f 	bl	8002644 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002586:	f000 fb4b 	bl	8002c20 <xTaskResumeAll>
 800258a:	4603      	mov	r3, r0
 800258c:	2b00      	cmp	r3, #0
 800258e:	f47f af69 	bne.w	8002464 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 8002592:	4b18      	ldr	r3, [pc, #96]	@ (80025f4 <xQueueReceive+0x224>)
 8002594:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002598:	601a      	str	r2, [r3, #0]
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	f3bf 8f6f 	isb	sy
 80025a2:	e75f      	b.n	8002464 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 80025a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025a6:	f000 f84d 	bl	8002644 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80025aa:	f000 fb39 	bl	8002c20 <xTaskResumeAll>
 80025ae:	e759      	b.n	8002464 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 80025b0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025b2:	f000 f847 	bl	8002644 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80025b6:	f000 fb33 	bl	8002c20 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025bc:	f000 f894 	bl	80026e8 <prvIsQueueEmpty>
 80025c0:	4603      	mov	r3, r0
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f43f af4e 	beq.w	8002464 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025ca:	4618      	mov	r0, r3
 80025cc:	f003 ff34 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 80025d0:	4604      	mov	r4, r0
 80025d2:	2000      	movs	r0, #0
 80025d4:	f003 ff30 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 80025d8:	4602      	mov	r2, r0
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	2101      	movs	r1, #1
 80025de:	9100      	str	r1, [sp, #0]
 80025e0:	4621      	mov	r1, r4
 80025e2:	205c      	movs	r0, #92	@ 0x5c
 80025e4:	f003 fa72 	bl	8005acc <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025e8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3734      	adds	r7, #52	@ 0x34
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd90      	pop	{r4, r7, pc}
 80025f2:	bf00      	nop
 80025f4:	e000ed04 	.word	0xe000ed04

080025f8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025f8:	b580      	push	{r7, lr}
 80025fa:	b082      	sub	sp, #8
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
 8002600:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002606:	2b00      	cmp	r3, #0
 8002608:	d018      	beq.n	800263c <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68da      	ldr	r2, [r3, #12]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002612:	441a      	add	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	68da      	ldr	r2, [r3, #12]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	689b      	ldr	r3, [r3, #8]
 8002620:	429a      	cmp	r2, r3
 8002622:	d303      	bcc.n	800262c <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	68d9      	ldr	r1, [r3, #12]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002634:	461a      	mov	r2, r3
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f004 f8cc 	bl	80067d4 <memcpy>
    }
}
 800263c:	bf00      	nop
 800263e:	3708      	adds	r7, #8
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}

08002644 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b084      	sub	sp, #16
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 800264c:	f001 fcf6 	bl	800403c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002656:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002658:	e011      	b.n	800267e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800265e:	2b00      	cmp	r3, #0
 8002660:	d012      	beq.n	8002688 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	3324      	adds	r3, #36	@ 0x24
 8002666:	4618      	mov	r0, r3
 8002668:	f000 fdf2 	bl	8003250 <xTaskRemoveFromEventList>
 800266c:	4603      	mov	r3, r0
 800266e:	2b00      	cmp	r3, #0
 8002670:	d001      	beq.n	8002676 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8002672:	f000 ff45 	bl	8003500 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8002676:	7bfb      	ldrb	r3, [r7, #15]
 8002678:	3b01      	subs	r3, #1
 800267a:	b2db      	uxtb	r3, r3
 800267c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800267e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002682:	2b00      	cmp	r3, #0
 8002684:	dce9      	bgt.n	800265a <prvUnlockQueue+0x16>
 8002686:	e000      	b.n	800268a <prvUnlockQueue+0x46>
                    break;
 8002688:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8002692:	f001 fd05 	bl	80040a0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8002696:	f001 fcd1 	bl	800403c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80026a0:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a2:	e011      	b.n	80026c8 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	691b      	ldr	r3, [r3, #16]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d012      	beq.n	80026d2 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3310      	adds	r3, #16
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fdcd 	bl	8003250 <xTaskRemoveFromEventList>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80026bc:	f000 ff20 	bl	8003500 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80026c0:	7bbb      	ldrb	r3, [r7, #14]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	dce9      	bgt.n	80026a4 <prvUnlockQueue+0x60>
 80026d0:	e000      	b.n	80026d4 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026d2:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	22ff      	movs	r2, #255	@ 0xff
 80026d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026dc:	f001 fce0 	bl	80040a0 <vPortExitCritical>
}
 80026e0:	bf00      	nop
 80026e2:	3710      	adds	r7, #16
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}

080026e8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026f0:	f001 fca4 	bl	800403c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d102      	bne.n	8002702 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026fc:	2301      	movs	r3, #1
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	e001      	b.n	8002706 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002706:	f001 fccb 	bl	80040a0 <vPortExitCritical>

    return xReturn;
 800270a:	68fb      	ldr	r3, [r7, #12]
}
 800270c:	4618      	mov	r0, r3
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}

08002714 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002714:	b580      	push	{r7, lr}
 8002716:	b086      	sub	sp, #24
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800271e:	2300      	movs	r3, #0
 8002720:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10b      	bne.n	8002740 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	60fb      	str	r3, [r7, #12]
    }
 800273a:	bf00      	nop
 800273c:	bf00      	nop
 800273e:	e7fd      	b.n	800273c <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d024      	beq.n	8002790 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e01e      	b.n	800278a <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800274c:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <vQueueAddToRegistry+0xac>)
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	00db      	lsls	r3, r3, #3
 8002752:	4413      	add	r3, r2
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	687a      	ldr	r2, [r7, #4]
 8002758:	429a      	cmp	r2, r3
 800275a:	d105      	bne.n	8002768 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	00db      	lsls	r3, r3, #3
 8002760:	4a17      	ldr	r2, [pc, #92]	@ (80027c0 <vQueueAddToRegistry+0xac>)
 8002762:	4413      	add	r3, r2
 8002764:	613b      	str	r3, [r7, #16]
                    break;
 8002766:	e013      	b.n	8002790 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d10a      	bne.n	8002784 <vQueueAddToRegistry+0x70>
 800276e:	4a14      	ldr	r2, [pc, #80]	@ (80027c0 <vQueueAddToRegistry+0xac>)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d104      	bne.n	8002784 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4a10      	ldr	r2, [pc, #64]	@ (80027c0 <vQueueAddToRegistry+0xac>)
 8002780:	4413      	add	r3, r2
 8002782:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	3301      	adds	r3, #1
 8002788:	617b      	str	r3, [r7, #20]
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	2b07      	cmp	r3, #7
 800278e:	d9dd      	bls.n	800274c <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d00f      	beq.n	80027b6 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	683a      	ldr	r2, [r7, #0]
 800279a:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f003 fe47 	bl	8006438 <SEGGER_SYSVIEW_ShrinkId>
 80027aa:	4601      	mov	r1, r0
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	461a      	mov	r2, r3
 80027b0:	2071      	movs	r0, #113	@ 0x71
 80027b2:	f003 f8bb 	bl	800592c <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 80027b6:	bf00      	nop
 80027b8:	3718      	adds	r7, #24
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	200000cc 	.word	0x200000cc

080027c4 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b086      	sub	sp, #24
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	60f8      	str	r0, [r7, #12]
 80027cc:	60b9      	str	r1, [r7, #8]
 80027ce:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027d4:	f001 fc32 	bl	800403c <vPortEnterCritical>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027de:	b25b      	sxtb	r3, r3
 80027e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e4:	d103      	bne.n	80027ee <vQueueWaitForMessageRestricted+0x2a>
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	2200      	movs	r2, #0
 80027ea:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027ee:	697b      	ldr	r3, [r7, #20]
 80027f0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027f4:	b25b      	sxtb	r3, r3
 80027f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027fa:	d103      	bne.n	8002804 <vQueueWaitForMessageRestricted+0x40>
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	2200      	movs	r2, #0
 8002800:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002804:	f001 fc4c 	bl	80040a0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800280c:	2b00      	cmp	r3, #0
 800280e:	d106      	bne.n	800281e <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	3324      	adds	r3, #36	@ 0x24
 8002814:	687a      	ldr	r2, [r7, #4]
 8002816:	68b9      	ldr	r1, [r7, #8]
 8002818:	4618      	mov	r0, r3
 800281a:	f000 fccf 	bl	80031bc <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800281e:	6978      	ldr	r0, [r7, #20]
 8002820:	f7ff ff10 	bl	8002644 <prvUnlockQueue>
    }
 8002824:	bf00      	nop
 8002826:	3718      	adds	r7, #24
 8002828:	46bd      	mov	sp, r7
 800282a:	bd80      	pop	{r7, pc}

0800282c <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800282c:	b580      	push	{r7, lr}
 800282e:	b08c      	sub	sp, #48	@ 0x30
 8002830:	af04      	add	r7, sp, #16
 8002832:	60f8      	str	r0, [r7, #12]
 8002834:	60b9      	str	r1, [r7, #8]
 8002836:	603b      	str	r3, [r7, #0]
 8002838:	4613      	mov	r3, r2
 800283a:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800283c:	88fb      	ldrh	r3, [r7, #6]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4618      	mov	r0, r3
 8002842:	f001 fd2d 	bl	80042a0 <pvPortMalloc>
 8002846:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d013      	beq.n	8002876 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800284e:	2058      	movs	r0, #88	@ 0x58
 8002850:	f001 fd26 	bl	80042a0 <pvPortMalloc>
 8002854:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 8002856:	69fb      	ldr	r3, [r7, #28]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d008      	beq.n	800286e <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800285c:	2258      	movs	r2, #88	@ 0x58
 800285e:	2100      	movs	r1, #0
 8002860:	69f8      	ldr	r0, [r7, #28]
 8002862:	f003 ff89 	bl	8006778 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	631a      	str	r2, [r3, #48]	@ 0x30
 800286c:	e005      	b.n	800287a <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800286e:	6978      	ldr	r0, [r7, #20]
 8002870:	f001 fdd2 	bl	8004418 <vPortFree>
 8002874:	e001      	b.n	800287a <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002880:	88fa      	ldrh	r2, [r7, #6]
 8002882:	2300      	movs	r3, #0
 8002884:	9303      	str	r3, [sp, #12]
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	9302      	str	r3, [sp, #8]
 800288a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800288c:	9301      	str	r3, [sp, #4]
 800288e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002890:	9300      	str	r3, [sp, #0]
 8002892:	683b      	ldr	r3, [r7, #0]
 8002894:	68b9      	ldr	r1, [r7, #8]
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f000 f80e 	bl	80028b8 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 800289c:	69f8      	ldr	r0, [r7, #28]
 800289e:	f000 f89b 	bl	80029d8 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80028a2:	2301      	movs	r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
 80028a6:	e002      	b.n	80028ae <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80028a8:	f04f 33ff 	mov.w	r3, #4294967295
 80028ac:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80028ae:	69bb      	ldr	r3, [r7, #24]
    }
 80028b0:	4618      	mov	r0, r3
 80028b2:	3720      	adds	r7, #32
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b088      	sub	sp, #32
 80028bc:	af00      	add	r7, sp, #0
 80028be:	60f8      	str	r0, [r7, #12]
 80028c0:	60b9      	str	r1, [r7, #8]
 80028c2:	607a      	str	r2, [r7, #4]
 80028c4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80028c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028c8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	461a      	mov	r2, r3
 80028d0:	21a5      	movs	r1, #165	@ 0xa5
 80028d2:	f003 ff51 	bl	8006778 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028e0:	3b01      	subs	r3, #1
 80028e2:	009b      	lsls	r3, r3, #2
 80028e4:	4413      	add	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028e8:	69bb      	ldr	r3, [r7, #24]
 80028ea:	f023 0307 	bic.w	r3, r3, #7
 80028ee:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <prvInitialiseNewTask+0x5a>
        __asm volatile
 80028fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028fe:	f383 8811 	msr	BASEPRI, r3
 8002902:	f3bf 8f6f 	isb	sy
 8002906:	f3bf 8f4f 	dsb	sy
 800290a:	617b      	str	r3, [r7, #20]
    }
 800290c:	bf00      	nop
 800290e:	bf00      	nop
 8002910:	e7fd      	b.n	800290e <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d01e      	beq.n	8002956 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002918:	2300      	movs	r3, #0
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	e012      	b.n	8002944 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800291e:	68ba      	ldr	r2, [r7, #8]
 8002920:	69fb      	ldr	r3, [r7, #28]
 8002922:	4413      	add	r3, r2
 8002924:	7819      	ldrb	r1, [r3, #0]
 8002926:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	4413      	add	r3, r2
 800292c:	3334      	adds	r3, #52	@ 0x34
 800292e:	460a      	mov	r2, r1
 8002930:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002932:	68ba      	ldr	r2, [r7, #8]
 8002934:	69fb      	ldr	r3, [r7, #28]
 8002936:	4413      	add	r3, r2
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d006      	beq.n	800294c <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	3301      	adds	r3, #1
 8002942:	61fb      	str	r3, [r7, #28]
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	2b09      	cmp	r3, #9
 8002948:	d9e9      	bls.n	800291e <prvInitialiseNewTask+0x66>
 800294a:	e000      	b.n	800294e <prvInitialiseNewTask+0x96>
            {
                break;
 800294c:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800294e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002950:	2200      	movs	r2, #0
 8002952:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002958:	2b04      	cmp	r3, #4
 800295a:	d90b      	bls.n	8002974 <prvInitialiseNewTask+0xbc>
        __asm volatile
 800295c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002960:	f383 8811 	msr	BASEPRI, r3
 8002964:	f3bf 8f6f 	isb	sy
 8002968:	f3bf 8f4f 	dsb	sy
 800296c:	613b      	str	r3, [r7, #16]
    }
 800296e:	bf00      	nop
 8002970:	bf00      	nop
 8002972:	e7fd      	b.n	8002970 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002976:	2b04      	cmp	r3, #4
 8002978:	d901      	bls.n	800297e <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800297a:	2304      	movs	r3, #4
 800297c:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800297e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002982:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002984:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002986:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002988:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800298a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800298c:	3304      	adds	r3, #4
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff fba4 	bl	80020dc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002996:	3318      	adds	r3, #24
 8002998:	4618      	mov	r0, r3
 800299a:	f7ff fb9f 	bl	80020dc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800299e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80029a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029a6:	f1c3 0205 	rsb	r2, r3, #5
 80029aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029ac:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80029ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029b2:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80029b4:	683a      	ldr	r2, [r7, #0]
 80029b6:	68f9      	ldr	r1, [r7, #12]
 80029b8:	69b8      	ldr	r0, [r7, #24]
 80029ba:	f001 f989 	bl	8003cd0 <pxPortInitialiseStack>
 80029be:	4602      	mov	r2, r0
 80029c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80029c2:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80029c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d002      	beq.n	80029d0 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029cc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029ce:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029d0:	bf00      	nop
 80029d2:	3720      	adds	r7, #32
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}

080029d8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029d8:	b5b0      	push	{r4, r5, r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af02      	add	r7, sp, #8
 80029de:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029e0:	f001 fb2c 	bl	800403c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029e4:	4b4f      	ldr	r3, [pc, #316]	@ (8002b24 <prvAddNewTaskToReadyList+0x14c>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	3301      	adds	r3, #1
 80029ea:	4a4e      	ldr	r2, [pc, #312]	@ (8002b24 <prvAddNewTaskToReadyList+0x14c>)
 80029ec:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029ee:	4b4e      	ldr	r3, [pc, #312]	@ (8002b28 <prvAddNewTaskToReadyList+0x150>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d109      	bne.n	8002a0a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029f6:	4a4c      	ldr	r2, [pc, #304]	@ (8002b28 <prvAddNewTaskToReadyList+0x150>)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029fc:	4b49      	ldr	r3, [pc, #292]	@ (8002b24 <prvAddNewTaskToReadyList+0x14c>)
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d110      	bne.n	8002a26 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002a04:	f000 fda0 	bl	8003548 <prvInitialiseTaskLists>
 8002a08:	e00d      	b.n	8002a26 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002a0a:	4b48      	ldr	r3, [pc, #288]	@ (8002b2c <prvAddNewTaskToReadyList+0x154>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d109      	bne.n	8002a26 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002a12:	4b45      	ldr	r3, [pc, #276]	@ (8002b28 <prvAddNewTaskToReadyList+0x150>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d802      	bhi.n	8002a26 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002a20:	4a41      	ldr	r2, [pc, #260]	@ (8002b28 <prvAddNewTaskToReadyList+0x150>)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002a26:	4b42      	ldr	r3, [pc, #264]	@ (8002b30 <prvAddNewTaskToReadyList+0x158>)
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	4a40      	ldr	r2, [pc, #256]	@ (8002b30 <prvAddNewTaskToReadyList+0x158>)
 8002a2e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a30:	4b3f      	ldr	r3, [pc, #252]	@ (8002b30 <prvAddNewTaskToReadyList+0x158>)
 8002a32:	681a      	ldr	r2, [r3, #0]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d016      	beq.n	8002a6c <prvAddNewTaskToReadyList+0x94>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	f003 fc33 	bl	80062ac <SEGGER_SYSVIEW_OnTaskCreate>
 8002a46:	6878      	ldr	r0, [r7, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	461d      	mov	r5, r3
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461c      	mov	r4, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	1ae3      	subs	r3, r4, r3
 8002a64:	9300      	str	r3, [sp, #0]
 8002a66:	462b      	mov	r3, r5
 8002a68:	f001 fe9a 	bl	80047a0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f003 fca0 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a78:	2201      	movs	r2, #1
 8002a7a:	409a      	lsls	r2, r3
 8002a7c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b34 <prvAddNewTaskToReadyList+0x15c>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4313      	orrs	r3, r2
 8002a82:	4a2c      	ldr	r2, [pc, #176]	@ (8002b34 <prvAddNewTaskToReadyList+0x15c>)
 8002a84:	6013      	str	r3, [r2, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a8a:	492b      	ldr	r1, [pc, #172]	@ (8002b38 <prvAddNewTaskToReadyList+0x160>)
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	3304      	adds	r3, #4
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	609a      	str	r2, [r3, #8]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	689a      	ldr	r2, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	60da      	str	r2, [r3, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	687a      	ldr	r2, [r7, #4]
 8002ab0:	3204      	adds	r2, #4
 8002ab2:	605a      	str	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	1d1a      	adds	r2, r3, #4
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	4413      	add	r3, r2
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	4a1b      	ldr	r2, [pc, #108]	@ (8002b38 <prvAddNewTaskToReadyList+0x160>)
 8002aca:	441a      	add	r2, r3
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	615a      	str	r2, [r3, #20]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ad4:	4918      	ldr	r1, [pc, #96]	@ (8002b38 <prvAddNewTaskToReadyList+0x160>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	1c59      	adds	r1, r3, #1
 8002ae4:	4814      	ldr	r0, [pc, #80]	@ (8002b38 <prvAddNewTaskToReadyList+0x160>)
 8002ae6:	4613      	mov	r3, r2
 8002ae8:	009b      	lsls	r3, r3, #2
 8002aea:	4413      	add	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4403      	add	r3, r0
 8002af0:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002af2:	f001 fad5 	bl	80040a0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002af6:	4b0d      	ldr	r3, [pc, #52]	@ (8002b2c <prvAddNewTaskToReadyList+0x154>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d00e      	beq.n	8002b1c <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002afe:	4b0a      	ldr	r3, [pc, #40]	@ (8002b28 <prvAddNewTaskToReadyList+0x150>)
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d207      	bcs.n	8002b1c <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002b0c:	4b0b      	ldr	r3, [pc, #44]	@ (8002b3c <prvAddNewTaskToReadyList+0x164>)
 8002b0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b12:	601a      	str	r2, [r3, #0]
 8002b14:	f3bf 8f4f 	dsb	sy
 8002b18:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b1c:	bf00      	nop
 8002b1e:	3710      	adds	r7, #16
 8002b20:	46bd      	mov	sp, r7
 8002b22:	bdb0      	pop	{r4, r5, r7, pc}
 8002b24:	200001e4 	.word	0x200001e4
 8002b28:	2000010c 	.word	0x2000010c
 8002b2c:	200001f0 	.word	0x200001f0
 8002b30:	20000200 	.word	0x20000200
 8002b34:	200001ec 	.word	0x200001ec
 8002b38:	20000110 	.word	0x20000110
 8002b3c:	e000ed04 	.word	0xe000ed04

08002b40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b086      	sub	sp, #24
 8002b44:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b46:	4b27      	ldr	r3, [pc, #156]	@ (8002be4 <vTaskStartScheduler+0xa4>)
 8002b48:	9301      	str	r3, [sp, #4]
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	9300      	str	r3, [sp, #0]
 8002b4e:	2300      	movs	r3, #0
 8002b50:	2282      	movs	r2, #130	@ 0x82
 8002b52:	4925      	ldr	r1, [pc, #148]	@ (8002be8 <vTaskStartScheduler+0xa8>)
 8002b54:	4825      	ldr	r0, [pc, #148]	@ (8002bec <vTaskStartScheduler+0xac>)
 8002b56:	f7ff fe69 	bl	800282c <xTaskCreate>
 8002b5a:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d102      	bne.n	8002b68 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002b62:	f000 fe29 	bl	80037b8 <xTimerCreateTimerTask>
 8002b66:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2b01      	cmp	r3, #1
 8002b6c:	d124      	bne.n	8002bb8 <vTaskStartScheduler+0x78>
        __asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	60bb      	str	r3, [r7, #8]
    }
 8002b80:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b82:	4b1b      	ldr	r3, [pc, #108]	@ (8002bf0 <vTaskStartScheduler+0xb0>)
 8002b84:	f04f 32ff 	mov.w	r2, #4294967295
 8002b88:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b8a:	4b1a      	ldr	r3, [pc, #104]	@ (8002bf4 <vTaskStartScheduler+0xb4>)
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b90:	4b19      	ldr	r3, [pc, #100]	@ (8002bf8 <vTaskStartScheduler+0xb8>)
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b96:	4b19      	ldr	r3, [pc, #100]	@ (8002bfc <vTaskStartScheduler+0xbc>)
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b12      	ldr	r3, [pc, #72]	@ (8002be4 <vTaskStartScheduler+0xa4>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	d102      	bne.n	8002ba8 <vTaskStartScheduler+0x68>
 8002ba2:	f003 fb67 	bl	8006274 <SEGGER_SYSVIEW_OnIdle>
 8002ba6:	e004      	b.n	8002bb2 <vTaskStartScheduler+0x72>
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <vTaskStartScheduler+0xbc>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4618      	mov	r0, r3
 8002bae:	f003 fbbf 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002bb2:	f001 f91f 	bl	8003df4 <xPortStartScheduler>
 8002bb6:	e00f      	b.n	8002bd8 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bbe:	d10b      	bne.n	8002bd8 <vTaskStartScheduler+0x98>
        __asm volatile
 8002bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002bc4:	f383 8811 	msr	BASEPRI, r3
 8002bc8:	f3bf 8f6f 	isb	sy
 8002bcc:	f3bf 8f4f 	dsb	sy
 8002bd0:	607b      	str	r3, [r7, #4]
    }
 8002bd2:	bf00      	nop
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <vTaskStartScheduler+0xc0>)
 8002bda:	681b      	ldr	r3, [r3, #0]
}
 8002bdc:	bf00      	nop
 8002bde:	3710      	adds	r7, #16
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	20000208 	.word	0x20000208
 8002be8:	080070e0 	.word	0x080070e0
 8002bec:	08003519 	.word	0x08003519
 8002bf0:	20000204 	.word	0x20000204
 8002bf4:	200001f0 	.word	0x200001f0
 8002bf8:	200001e8 	.word	0x200001e8
 8002bfc:	2000010c 	.word	0x2000010c
 8002c00:	2000000c 	.word	0x2000000c

08002c04 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002c08:	4b04      	ldr	r3, [pc, #16]	@ (8002c1c <vTaskSuspendAll+0x18>)
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	3301      	adds	r3, #1
 8002c0e:	4a03      	ldr	r2, [pc, #12]	@ (8002c1c <vTaskSuspendAll+0x18>)
 8002c10:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002c12:	bf00      	nop
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr
 8002c1c:	2000020c 	.word	0x2000020c

08002c20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b088      	sub	sp, #32
 8002c24:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002c26:	2300      	movs	r3, #0
 8002c28:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c2e:	4b73      	ldr	r3, [pc, #460]	@ (8002dfc <xTaskResumeAll+0x1dc>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d10b      	bne.n	8002c4e <xTaskResumeAll+0x2e>
        __asm volatile
 8002c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c3a:	f383 8811 	msr	BASEPRI, r3
 8002c3e:	f3bf 8f6f 	isb	sy
 8002c42:	f3bf 8f4f 	dsb	sy
 8002c46:	607b      	str	r3, [r7, #4]
    }
 8002c48:	bf00      	nop
 8002c4a:	bf00      	nop
 8002c4c:	e7fd      	b.n	8002c4a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c4e:	f001 f9f5 	bl	800403c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c52:	4b6a      	ldr	r3, [pc, #424]	@ (8002dfc <xTaskResumeAll+0x1dc>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	3b01      	subs	r3, #1
 8002c58:	4a68      	ldr	r2, [pc, #416]	@ (8002dfc <xTaskResumeAll+0x1dc>)
 8002c5a:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c5c:	4b67      	ldr	r3, [pc, #412]	@ (8002dfc <xTaskResumeAll+0x1dc>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 80c4 	bne.w	8002dee <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c66:	4b66      	ldr	r3, [pc, #408]	@ (8002e00 <xTaskResumeAll+0x1e0>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	f000 80bf 	beq.w	8002dee <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c70:	e08e      	b.n	8002d90 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c72:	4b64      	ldr	r3, [pc, #400]	@ (8002e04 <xTaskResumeAll+0x1e4>)
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	69db      	ldr	r3, [r3, #28]
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	6a12      	ldr	r2, [r2, #32]
 8002c88:	609a      	str	r2, [r3, #8]
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	69d2      	ldr	r2, [r2, #28]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	685a      	ldr	r2, [r3, #4]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	3318      	adds	r3, #24
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d103      	bne.n	8002ca8 <xTaskResumeAll+0x88>
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	6a1a      	ldr	r2, [r3, #32]
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	605a      	str	r2, [r3, #4]
 8002ca8:	69fb      	ldr	r3, [r7, #28]
 8002caa:	2200      	movs	r2, #0
 8002cac:	629a      	str	r2, [r3, #40]	@ 0x28
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	1e5a      	subs	r2, r3, #1
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	695b      	ldr	r3, [r3, #20]
 8002cbc:	60fb      	str	r3, [r7, #12]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	689b      	ldr	r3, [r3, #8]
 8002cc2:	69fa      	ldr	r2, [r7, #28]
 8002cc4:	68d2      	ldr	r2, [r2, #12]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	69fa      	ldr	r2, [r7, #28]
 8002cce:	6892      	ldr	r2, [r2, #8]
 8002cd0:	605a      	str	r2, [r3, #4]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	429a      	cmp	r2, r3
 8002cdc:	d103      	bne.n	8002ce6 <xTaskResumeAll+0xc6>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	68da      	ldr	r2, [r3, #12]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	605a      	str	r2, [r3, #4]
 8002ce6:	69fb      	ldr	r3, [r7, #28]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	615a      	str	r2, [r3, #20]
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	1e5a      	subs	r2, r3, #1
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cf6:	69fb      	ldr	r3, [r7, #28]
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f003 fb5b 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d02:	2201      	movs	r2, #1
 8002d04:	409a      	lsls	r2, r3
 8002d06:	4b40      	ldr	r3, [pc, #256]	@ (8002e08 <xTaskResumeAll+0x1e8>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	4a3e      	ldr	r2, [pc, #248]	@ (8002e08 <xTaskResumeAll+0x1e8>)
 8002d0e:	6013      	str	r3, [r2, #0]
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d14:	493d      	ldr	r1, [pc, #244]	@ (8002e0c <xTaskResumeAll+0x1ec>)
 8002d16:	4613      	mov	r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	4413      	add	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	3304      	adds	r3, #4
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60bb      	str	r3, [r7, #8]
 8002d26:	69fb      	ldr	r3, [r7, #28]
 8002d28:	68ba      	ldr	r2, [r7, #8]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	689a      	ldr	r2, [r3, #8]
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	60da      	str	r2, [r3, #12]
 8002d34:	68bb      	ldr	r3, [r7, #8]
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	69fa      	ldr	r2, [r7, #28]
 8002d3a:	3204      	adds	r2, #4
 8002d3c:	605a      	str	r2, [r3, #4]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	1d1a      	adds	r2, r3, #4
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	609a      	str	r2, [r3, #8]
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	4a2e      	ldr	r2, [pc, #184]	@ (8002e0c <xTaskResumeAll+0x1ec>)
 8002d54:	441a      	add	r2, r3
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	615a      	str	r2, [r3, #20]
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d5e:	492b      	ldr	r1, [pc, #172]	@ (8002e0c <xTaskResumeAll+0x1ec>)
 8002d60:	4613      	mov	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4413      	add	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	1c59      	adds	r1, r3, #1
 8002d6e:	4827      	ldr	r0, [pc, #156]	@ (8002e0c <xTaskResumeAll+0x1ec>)
 8002d70:	4613      	mov	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	4413      	add	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4403      	add	r3, r0
 8002d7a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d80:	4b23      	ldr	r3, [pc, #140]	@ (8002e10 <xTaskResumeAll+0x1f0>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d86:	429a      	cmp	r2, r3
 8002d88:	d302      	bcc.n	8002d90 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002d8a:	4b22      	ldr	r3, [pc, #136]	@ (8002e14 <xTaskResumeAll+0x1f4>)
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d90:	4b1c      	ldr	r3, [pc, #112]	@ (8002e04 <xTaskResumeAll+0x1e4>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f47f af6c 	bne.w	8002c72 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d9a:	69fb      	ldr	r3, [r7, #28]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002da0:	f000 fc50 	bl	8003644 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002da4:	4b1c      	ldr	r3, [pc, #112]	@ (8002e18 <xTaskResumeAll+0x1f8>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d010      	beq.n	8002dd2 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002db0:	f000 f858 	bl	8002e64 <xTaskIncrementTick>
 8002db4:	4603      	mov	r3, r0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d002      	beq.n	8002dc0 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002dba:	4b16      	ldr	r3, [pc, #88]	@ (8002e14 <xTaskResumeAll+0x1f4>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	3b01      	subs	r3, #1
 8002dc4:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1f1      	bne.n	8002db0 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002dcc:	4b12      	ldr	r3, [pc, #72]	@ (8002e18 <xTaskResumeAll+0x1f8>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002dd2:	4b10      	ldr	r3, [pc, #64]	@ (8002e14 <xTaskResumeAll+0x1f4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d009      	beq.n	8002dee <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002dde:	4b0f      	ldr	r3, [pc, #60]	@ (8002e1c <xTaskResumeAll+0x1fc>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002dee:	f001 f957 	bl	80040a0 <vPortExitCritical>

    return xAlreadyYielded;
 8002df2:	69bb      	ldr	r3, [r7, #24]
}
 8002df4:	4618      	mov	r0, r3
 8002df6:	3720      	adds	r7, #32
 8002df8:	46bd      	mov	sp, r7
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	2000020c 	.word	0x2000020c
 8002e00:	200001e4 	.word	0x200001e4
 8002e04:	200001a4 	.word	0x200001a4
 8002e08:	200001ec 	.word	0x200001ec
 8002e0c:	20000110 	.word	0x20000110
 8002e10:	2000010c 	.word	0x2000010c
 8002e14:	200001f8 	.word	0x200001f8
 8002e18:	200001f4 	.word	0x200001f4
 8002e1c:	e000ed04 	.word	0xe000ed04

08002e20 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002e20:	b480      	push	{r7}
 8002e22:	b083      	sub	sp, #12
 8002e24:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002e26:	4b05      	ldr	r3, [pc, #20]	@ (8002e3c <xTaskGetTickCount+0x1c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e2c:	687b      	ldr	r3, [r7, #4]
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	370c      	adds	r7, #12
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	200001e8 	.word	0x200001e8

08002e40 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b082      	sub	sp, #8
 8002e44:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002e46:	f001 f9e9 	bl	800421c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8002e4e:	4b04      	ldr	r3, [pc, #16]	@ (8002e60 <xTaskGetTickCountFromISR+0x20>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8002e54:	683b      	ldr	r3, [r7, #0]
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3708      	adds	r7, #8
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bd80      	pop	{r7, pc}
 8002e5e:	bf00      	nop
 8002e60:	200001e8 	.word	0x200001e8

08002e64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b08a      	sub	sp, #40	@ 0x28
 8002e68:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e6e:	4b80      	ldr	r3, [pc, #512]	@ (8003070 <xTaskIncrementTick+0x20c>)
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	f040 80f1 	bne.w	800305a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e78:	4b7e      	ldr	r3, [pc, #504]	@ (8003074 <xTaskIncrementTick+0x210>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e80:	4a7c      	ldr	r2, [pc, #496]	@ (8003074 <xTaskIncrementTick+0x210>)
 8002e82:	6a3b      	ldr	r3, [r7, #32]
 8002e84:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e86:	6a3b      	ldr	r3, [r7, #32]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d121      	bne.n	8002ed0 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e8c:	4b7a      	ldr	r3, [pc, #488]	@ (8003078 <xTaskIncrementTick+0x214>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d00b      	beq.n	8002eae <xTaskIncrementTick+0x4a>
        __asm volatile
 8002e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e9a:	f383 8811 	msr	BASEPRI, r3
 8002e9e:	f3bf 8f6f 	isb	sy
 8002ea2:	f3bf 8f4f 	dsb	sy
 8002ea6:	607b      	str	r3, [r7, #4]
    }
 8002ea8:	bf00      	nop
 8002eaa:	bf00      	nop
 8002eac:	e7fd      	b.n	8002eaa <xTaskIncrementTick+0x46>
 8002eae:	4b72      	ldr	r3, [pc, #456]	@ (8003078 <xTaskIncrementTick+0x214>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	61fb      	str	r3, [r7, #28]
 8002eb4:	4b71      	ldr	r3, [pc, #452]	@ (800307c <xTaskIncrementTick+0x218>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a6f      	ldr	r2, [pc, #444]	@ (8003078 <xTaskIncrementTick+0x214>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	4a6f      	ldr	r2, [pc, #444]	@ (800307c <xTaskIncrementTick+0x218>)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	6013      	str	r3, [r2, #0]
 8002ec2:	4b6f      	ldr	r3, [pc, #444]	@ (8003080 <xTaskIncrementTick+0x21c>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	3301      	adds	r3, #1
 8002ec8:	4a6d      	ldr	r2, [pc, #436]	@ (8003080 <xTaskIncrementTick+0x21c>)
 8002eca:	6013      	str	r3, [r2, #0]
 8002ecc:	f000 fbba 	bl	8003644 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002ed0:	4b6c      	ldr	r3, [pc, #432]	@ (8003084 <xTaskIncrementTick+0x220>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	6a3a      	ldr	r2, [r7, #32]
 8002ed6:	429a      	cmp	r2, r3
 8002ed8:	f0c0 80aa 	bcc.w	8003030 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002edc:	4b66      	ldr	r3, [pc, #408]	@ (8003078 <xTaskIncrementTick+0x214>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d104      	bne.n	8002ef0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002ee6:	4b67      	ldr	r3, [pc, #412]	@ (8003084 <xTaskIncrementTick+0x220>)
 8002ee8:	f04f 32ff 	mov.w	r2, #4294967295
 8002eec:	601a      	str	r2, [r3, #0]
                    break;
 8002eee:	e09f      	b.n	8003030 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ef0:	4b61      	ldr	r3, [pc, #388]	@ (8003078 <xTaskIncrementTick+0x214>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002f00:	6a3a      	ldr	r2, [r7, #32]
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d203      	bcs.n	8002f10 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002f08:	4a5e      	ldr	r2, [pc, #376]	@ (8003084 <xTaskIncrementTick+0x220>)
 8002f0a:	697b      	ldr	r3, [r7, #20]
 8002f0c:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002f0e:	e08f      	b.n	8003030 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	613b      	str	r3, [r7, #16]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	69ba      	ldr	r2, [r7, #24]
 8002f1c:	68d2      	ldr	r2, [r2, #12]
 8002f1e:	609a      	str	r2, [r3, #8]
 8002f20:	69bb      	ldr	r3, [r7, #24]
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	69ba      	ldr	r2, [r7, #24]
 8002f26:	6892      	ldr	r2, [r2, #8]
 8002f28:	605a      	str	r2, [r3, #4]
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3304      	adds	r3, #4
 8002f32:	429a      	cmp	r2, r3
 8002f34:	d103      	bne.n	8002f3e <xTaskIncrementTick+0xda>
 8002f36:	69bb      	ldr	r3, [r7, #24]
 8002f38:	68da      	ldr	r2, [r3, #12]
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	605a      	str	r2, [r3, #4]
 8002f3e:	69bb      	ldr	r3, [r7, #24]
 8002f40:	2200      	movs	r2, #0
 8002f42:	615a      	str	r2, [r3, #20]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	1e5a      	subs	r2, r3, #1
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f4e:	69bb      	ldr	r3, [r7, #24]
 8002f50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d01e      	beq.n	8002f94 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f56:	69bb      	ldr	r3, [r7, #24]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5a:	60fb      	str	r3, [r7, #12]
 8002f5c:	69bb      	ldr	r3, [r7, #24]
 8002f5e:	69db      	ldr	r3, [r3, #28]
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	6a12      	ldr	r2, [r2, #32]
 8002f64:	609a      	str	r2, [r3, #8]
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	6a1b      	ldr	r3, [r3, #32]
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	69d2      	ldr	r2, [r2, #28]
 8002f6e:	605a      	str	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	3318      	adds	r3, #24
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d103      	bne.n	8002f84 <xTaskIncrementTick+0x120>
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	6a1a      	ldr	r2, [r3, #32]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	605a      	str	r2, [r3, #4]
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	2200      	movs	r2, #0
 8002f88:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	1e5a      	subs	r2, r3, #1
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	4618      	mov	r0, r3
 8002f98:	f003 fa0c 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f9c:	69bb      	ldr	r3, [r7, #24]
 8002f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	4b38      	ldr	r3, [pc, #224]	@ (8003088 <xTaskIncrementTick+0x224>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	4a37      	ldr	r2, [pc, #220]	@ (8003088 <xTaskIncrementTick+0x224>)
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb2:	4936      	ldr	r1, [pc, #216]	@ (800308c <xTaskIncrementTick+0x228>)
 8002fb4:	4613      	mov	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	4413      	add	r3, r2
 8002fba:	009b      	lsls	r3, r3, #2
 8002fbc:	440b      	add	r3, r1
 8002fbe:	3304      	adds	r3, #4
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	60bb      	str	r3, [r7, #8]
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	68ba      	ldr	r2, [r7, #8]
 8002fc8:	609a      	str	r2, [r3, #8]
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60da      	str	r2, [r3, #12]
 8002fd2:	68bb      	ldr	r3, [r7, #8]
 8002fd4:	689b      	ldr	r3, [r3, #8]
 8002fd6:	69ba      	ldr	r2, [r7, #24]
 8002fd8:	3204      	adds	r2, #4
 8002fda:	605a      	str	r2, [r3, #4]
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	609a      	str	r2, [r3, #8]
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fe8:	4613      	mov	r3, r2
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	4413      	add	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4a26      	ldr	r2, [pc, #152]	@ (800308c <xTaskIncrementTick+0x228>)
 8002ff2:	441a      	add	r2, r3
 8002ff4:	69bb      	ldr	r3, [r7, #24]
 8002ff6:	615a      	str	r2, [r3, #20]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffc:	4923      	ldr	r1, [pc, #140]	@ (800308c <xTaskIncrementTick+0x228>)
 8002ffe:	4613      	mov	r3, r2
 8003000:	009b      	lsls	r3, r3, #2
 8003002:	4413      	add	r3, r2
 8003004:	009b      	lsls	r3, r3, #2
 8003006:	440b      	add	r3, r1
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	1c59      	adds	r1, r3, #1
 800300c:	481f      	ldr	r0, [pc, #124]	@ (800308c <xTaskIncrementTick+0x228>)
 800300e:	4613      	mov	r3, r2
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	4403      	add	r3, r0
 8003018:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800301e:	4b1c      	ldr	r3, [pc, #112]	@ (8003090 <xTaskIncrementTick+0x22c>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003024:	429a      	cmp	r2, r3
 8003026:	f67f af59 	bls.w	8002edc <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 800302a:	2301      	movs	r3, #1
 800302c:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800302e:	e755      	b.n	8002edc <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003030:	4b17      	ldr	r3, [pc, #92]	@ (8003090 <xTaskIncrementTick+0x22c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003036:	4915      	ldr	r1, [pc, #84]	@ (800308c <xTaskIncrementTick+0x228>)
 8003038:	4613      	mov	r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	4413      	add	r3, r2
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	440b      	add	r3, r1
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d901      	bls.n	800304c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8003048:	2301      	movs	r3, #1
 800304a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 800304c:	4b11      	ldr	r3, [pc, #68]	@ (8003094 <xTaskIncrementTick+0x230>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d007      	beq.n	8003064 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003054:	2301      	movs	r3, #1
 8003056:	627b      	str	r3, [r7, #36]	@ 0x24
 8003058:	e004      	b.n	8003064 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800305a:	4b0f      	ldr	r3, [pc, #60]	@ (8003098 <xTaskIncrementTick+0x234>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	4a0d      	ldr	r2, [pc, #52]	@ (8003098 <xTaskIncrementTick+0x234>)
 8003062:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003064:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003066:	4618      	mov	r0, r3
 8003068:	3728      	adds	r7, #40	@ 0x28
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
 800306e:	bf00      	nop
 8003070:	2000020c 	.word	0x2000020c
 8003074:	200001e8 	.word	0x200001e8
 8003078:	2000019c 	.word	0x2000019c
 800307c:	200001a0 	.word	0x200001a0
 8003080:	200001fc 	.word	0x200001fc
 8003084:	20000204 	.word	0x20000204
 8003088:	200001ec 	.word	0x200001ec
 800308c:	20000110 	.word	0x20000110
 8003090:	2000010c 	.word	0x2000010c
 8003094:	200001f8 	.word	0x200001f8
 8003098:	200001f4 	.word	0x200001f4

0800309c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b086      	sub	sp, #24
 80030a0:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80030a2:	4b2d      	ldr	r3, [pc, #180]	@ (8003158 <vTaskSwitchContext+0xbc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80030aa:	4b2c      	ldr	r3, [pc, #176]	@ (800315c <vTaskSwitchContext+0xc0>)
 80030ac:	2201      	movs	r2, #1
 80030ae:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80030b0:	e04e      	b.n	8003150 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80030b2:	4b2a      	ldr	r3, [pc, #168]	@ (800315c <vTaskSwitchContext+0xc0>)
 80030b4:	2200      	movs	r2, #0
 80030b6:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030b8:	4b29      	ldr	r3, [pc, #164]	@ (8003160 <vTaskSwitchContext+0xc4>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80030c6:	7afb      	ldrb	r3, [r7, #11]
 80030c8:	f1c3 031f 	rsb	r3, r3, #31
 80030cc:	617b      	str	r3, [r7, #20]
 80030ce:	4925      	ldr	r1, [pc, #148]	@ (8003164 <vTaskSwitchContext+0xc8>)
 80030d0:	697a      	ldr	r2, [r7, #20]
 80030d2:	4613      	mov	r3, r2
 80030d4:	009b      	lsls	r3, r3, #2
 80030d6:	4413      	add	r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d10b      	bne.n	80030fa <vTaskSwitchContext+0x5e>
        __asm volatile
 80030e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030e6:	f383 8811 	msr	BASEPRI, r3
 80030ea:	f3bf 8f6f 	isb	sy
 80030ee:	f3bf 8f4f 	dsb	sy
 80030f2:	607b      	str	r3, [r7, #4]
    }
 80030f4:	bf00      	nop
 80030f6:	bf00      	nop
 80030f8:	e7fd      	b.n	80030f6 <vTaskSwitchContext+0x5a>
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4613      	mov	r3, r2
 80030fe:	009b      	lsls	r3, r3, #2
 8003100:	4413      	add	r3, r2
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	4a17      	ldr	r2, [pc, #92]	@ (8003164 <vTaskSwitchContext+0xc8>)
 8003106:	4413      	add	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	685a      	ldr	r2, [r3, #4]
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	605a      	str	r2, [r3, #4]
 8003114:	693b      	ldr	r3, [r7, #16]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	693b      	ldr	r3, [r7, #16]
 800311a:	3308      	adds	r3, #8
 800311c:	429a      	cmp	r2, r3
 800311e:	d104      	bne.n	800312a <vTaskSwitchContext+0x8e>
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	605a      	str	r2, [r3, #4]
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	4a0d      	ldr	r2, [pc, #52]	@ (8003168 <vTaskSwitchContext+0xcc>)
 8003132:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003134:	4b0c      	ldr	r3, [pc, #48]	@ (8003168 <vTaskSwitchContext+0xcc>)
 8003136:	681a      	ldr	r2, [r3, #0]
 8003138:	4b0c      	ldr	r3, [pc, #48]	@ (800316c <vTaskSwitchContext+0xd0>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	429a      	cmp	r2, r3
 800313e:	d102      	bne.n	8003146 <vTaskSwitchContext+0xaa>
 8003140:	f003 f898 	bl	8006274 <SEGGER_SYSVIEW_OnIdle>
}
 8003144:	e004      	b.n	8003150 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003146:	4b08      	ldr	r3, [pc, #32]	@ (8003168 <vTaskSwitchContext+0xcc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f003 f8f0 	bl	8006330 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003150:	bf00      	nop
 8003152:	3718      	adds	r7, #24
 8003154:	46bd      	mov	sp, r7
 8003156:	bd80      	pop	{r7, pc}
 8003158:	2000020c 	.word	0x2000020c
 800315c:	200001f8 	.word	0x200001f8
 8003160:	200001ec 	.word	0x200001ec
 8003164:	20000110 	.word	0x20000110
 8003168:	2000010c 	.word	0x2000010c
 800316c:	20000208 	.word	0x20000208

08003170 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
 8003178:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d10b      	bne.n	8003198 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003180:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003184:	f383 8811 	msr	BASEPRI, r3
 8003188:	f3bf 8f6f 	isb	sy
 800318c:	f3bf 8f4f 	dsb	sy
 8003190:	60fb      	str	r3, [r7, #12]
    }
 8003192:	bf00      	nop
 8003194:	bf00      	nop
 8003196:	e7fd      	b.n	8003194 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003198:	4b07      	ldr	r3, [pc, #28]	@ (80031b8 <vTaskPlaceOnEventList+0x48>)
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	3318      	adds	r3, #24
 800319e:	4619      	mov	r1, r3
 80031a0:	6878      	ldr	r0, [r7, #4]
 80031a2:	f7fe ffa8 	bl	80020f6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80031a6:	2101      	movs	r1, #1
 80031a8:	6838      	ldr	r0, [r7, #0]
 80031aa:	f000 fa85 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
}
 80031ae:	bf00      	nop
 80031b0:	3710      	adds	r7, #16
 80031b2:	46bd      	mov	sp, r7
 80031b4:	bd80      	pop	{r7, pc}
 80031b6:	bf00      	nop
 80031b8:	2000010c 	.word	0x2000010c

080031bc <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	60f8      	str	r0, [r7, #12]
 80031c4:	60b9      	str	r1, [r7, #8]
 80031c6:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d10b      	bne.n	80031e6 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 80031ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031d2:	f383 8811 	msr	BASEPRI, r3
 80031d6:	f3bf 8f6f 	isb	sy
 80031da:	f3bf 8f4f 	dsb	sy
 80031de:	613b      	str	r3, [r7, #16]
    }
 80031e0:	bf00      	nop
 80031e2:	bf00      	nop
 80031e4:	e7fd      	b.n	80031e2 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	617b      	str	r3, [r7, #20]
 80031ec:	4b17      	ldr	r3, [pc, #92]	@ (800324c <vTaskPlaceOnEventListRestricted+0x90>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	61da      	str	r2, [r3, #28]
 80031f4:	4b15      	ldr	r3, [pc, #84]	@ (800324c <vTaskPlaceOnEventListRestricted+0x90>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	697a      	ldr	r2, [r7, #20]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	621a      	str	r2, [r3, #32]
 80031fe:	4b13      	ldr	r3, [pc, #76]	@ (800324c <vTaskPlaceOnEventListRestricted+0x90>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	3218      	adds	r2, #24
 8003208:	605a      	str	r2, [r3, #4]
 800320a:	4b10      	ldr	r3, [pc, #64]	@ (800324c <vTaskPlaceOnEventListRestricted+0x90>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f103 0218 	add.w	r2, r3, #24
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	609a      	str	r2, [r3, #8]
 8003216:	4b0d      	ldr	r3, [pc, #52]	@ (800324c <vTaskPlaceOnEventListRestricted+0x90>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	68fa      	ldr	r2, [r7, #12]
 800321c:	629a      	str	r2, [r3, #40]	@ 0x28
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d002      	beq.n	8003234 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800322e:	f04f 33ff 	mov.w	r3, #4294967295
 8003232:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003234:	2024      	movs	r0, #36	@ 0x24
 8003236:	f002 fb1f 	bl	8005878 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800323a:	6879      	ldr	r1, [r7, #4]
 800323c:	68b8      	ldr	r0, [r7, #8]
 800323e:	f000 fa3b 	bl	80036b8 <prvAddCurrentTaskToDelayedList>
    }
 8003242:	bf00      	nop
 8003244:	3718      	adds	r7, #24
 8003246:	46bd      	mov	sp, r7
 8003248:	bd80      	pop	{r7, pc}
 800324a:	bf00      	nop
 800324c:	2000010c 	.word	0x2000010c

08003250 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b08a      	sub	sp, #40	@ 0x28
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	68db      	ldr	r3, [r3, #12]
 800325e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10b      	bne.n	800327e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8003266:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800326a:	f383 8811 	msr	BASEPRI, r3
 800326e:	f3bf 8f6f 	isb	sy
 8003272:	f3bf 8f4f 	dsb	sy
 8003276:	60fb      	str	r3, [r7, #12]
    }
 8003278:	bf00      	nop
 800327a:	bf00      	nop
 800327c:	e7fd      	b.n	800327a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003282:	61fb      	str	r3, [r7, #28]
 8003284:	6a3b      	ldr	r3, [r7, #32]
 8003286:	69db      	ldr	r3, [r3, #28]
 8003288:	6a3a      	ldr	r2, [r7, #32]
 800328a:	6a12      	ldr	r2, [r2, #32]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	6a3b      	ldr	r3, [r7, #32]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	6a3a      	ldr	r2, [r7, #32]
 8003294:	69d2      	ldr	r2, [r2, #28]
 8003296:	605a      	str	r2, [r3, #4]
 8003298:	69fb      	ldr	r3, [r7, #28]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	6a3b      	ldr	r3, [r7, #32]
 800329e:	3318      	adds	r3, #24
 80032a0:	429a      	cmp	r2, r3
 80032a2:	d103      	bne.n	80032ac <xTaskRemoveFromEventList+0x5c>
 80032a4:	6a3b      	ldr	r3, [r7, #32]
 80032a6:	6a1a      	ldr	r2, [r3, #32]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	605a      	str	r2, [r3, #4]
 80032ac:	6a3b      	ldr	r3, [r7, #32]
 80032ae:	2200      	movs	r2, #0
 80032b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	1e5a      	subs	r2, r3, #1
 80032b8:	69fb      	ldr	r3, [r7, #28]
 80032ba:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80032bc:	4b4b      	ldr	r3, [pc, #300]	@ (80033ec <xTaskRemoveFromEventList+0x19c>)
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d162      	bne.n	800338a <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	695b      	ldr	r3, [r3, #20]
 80032c8:	617b      	str	r3, [r7, #20]
 80032ca:	6a3b      	ldr	r3, [r7, #32]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	6a3a      	ldr	r2, [r7, #32]
 80032d0:	68d2      	ldr	r2, [r2, #12]
 80032d2:	609a      	str	r2, [r3, #8]
 80032d4:	6a3b      	ldr	r3, [r7, #32]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	6a3a      	ldr	r2, [r7, #32]
 80032da:	6892      	ldr	r2, [r2, #8]
 80032dc:	605a      	str	r2, [r3, #4]
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	6a3b      	ldr	r3, [r7, #32]
 80032e4:	3304      	adds	r3, #4
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d103      	bne.n	80032f2 <xTaskRemoveFromEventList+0xa2>
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	68da      	ldr	r2, [r3, #12]
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	605a      	str	r2, [r3, #4]
 80032f2:	6a3b      	ldr	r3, [r7, #32]
 80032f4:	2200      	movs	r2, #0
 80032f6:	615a      	str	r2, [r3, #20]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	1e5a      	subs	r2, r3, #1
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003302:	6a3b      	ldr	r3, [r7, #32]
 8003304:	4618      	mov	r0, r3
 8003306:	f003 f855 	bl	80063b4 <SEGGER_SYSVIEW_OnTaskStartReady>
 800330a:	6a3b      	ldr	r3, [r7, #32]
 800330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330e:	2201      	movs	r2, #1
 8003310:	409a      	lsls	r2, r3
 8003312:	4b37      	ldr	r3, [pc, #220]	@ (80033f0 <xTaskRemoveFromEventList+0x1a0>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4313      	orrs	r3, r2
 8003318:	4a35      	ldr	r2, [pc, #212]	@ (80033f0 <xTaskRemoveFromEventList+0x1a0>)
 800331a:	6013      	str	r3, [r2, #0]
 800331c:	6a3b      	ldr	r3, [r7, #32]
 800331e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003320:	4934      	ldr	r1, [pc, #208]	@ (80033f4 <xTaskRemoveFromEventList+0x1a4>)
 8003322:	4613      	mov	r3, r2
 8003324:	009b      	lsls	r3, r3, #2
 8003326:	4413      	add	r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	3304      	adds	r3, #4
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	613b      	str	r3, [r7, #16]
 8003332:	6a3b      	ldr	r3, [r7, #32]
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	609a      	str	r2, [r3, #8]
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	689a      	ldr	r2, [r3, #8]
 800333c:	6a3b      	ldr	r3, [r7, #32]
 800333e:	60da      	str	r2, [r3, #12]
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	3204      	adds	r2, #4
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	1d1a      	adds	r2, r3, #4
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	609a      	str	r2, [r3, #8]
 8003352:	6a3b      	ldr	r3, [r7, #32]
 8003354:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003356:	4613      	mov	r3, r2
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	4a25      	ldr	r2, [pc, #148]	@ (80033f4 <xTaskRemoveFromEventList+0x1a4>)
 8003360:	441a      	add	r2, r3
 8003362:	6a3b      	ldr	r3, [r7, #32]
 8003364:	615a      	str	r2, [r3, #20]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800336a:	4922      	ldr	r1, [pc, #136]	@ (80033f4 <xTaskRemoveFromEventList+0x1a4>)
 800336c:	4613      	mov	r3, r2
 800336e:	009b      	lsls	r3, r3, #2
 8003370:	4413      	add	r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	1c59      	adds	r1, r3, #1
 800337a:	481e      	ldr	r0, [pc, #120]	@ (80033f4 <xTaskRemoveFromEventList+0x1a4>)
 800337c:	4613      	mov	r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4403      	add	r3, r0
 8003386:	6019      	str	r1, [r3, #0]
 8003388:	e01b      	b.n	80033c2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800338a:	4b1b      	ldr	r3, [pc, #108]	@ (80033f8 <xTaskRemoveFromEventList+0x1a8>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	61bb      	str	r3, [r7, #24]
 8003390:	6a3b      	ldr	r3, [r7, #32]
 8003392:	69ba      	ldr	r2, [r7, #24]
 8003394:	61da      	str	r2, [r3, #28]
 8003396:	69bb      	ldr	r3, [r7, #24]
 8003398:	689a      	ldr	r2, [r3, #8]
 800339a:	6a3b      	ldr	r3, [r7, #32]
 800339c:	621a      	str	r2, [r3, #32]
 800339e:	69bb      	ldr	r3, [r7, #24]
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	6a3a      	ldr	r2, [r7, #32]
 80033a4:	3218      	adds	r2, #24
 80033a6:	605a      	str	r2, [r3, #4]
 80033a8:	6a3b      	ldr	r3, [r7, #32]
 80033aa:	f103 0218 	add.w	r2, r3, #24
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	609a      	str	r2, [r3, #8]
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	4a10      	ldr	r2, [pc, #64]	@ (80033f8 <xTaskRemoveFromEventList+0x1a8>)
 80033b6:	629a      	str	r2, [r3, #40]	@ 0x28
 80033b8:	4b0f      	ldr	r3, [pc, #60]	@ (80033f8 <xTaskRemoveFromEventList+0x1a8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	3301      	adds	r3, #1
 80033be:	4a0e      	ldr	r2, [pc, #56]	@ (80033f8 <xTaskRemoveFromEventList+0x1a8>)
 80033c0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80033c2:	6a3b      	ldr	r3, [r7, #32]
 80033c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033c6:	4b0d      	ldr	r3, [pc, #52]	@ (80033fc <xTaskRemoveFromEventList+0x1ac>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d905      	bls.n	80033dc <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80033d0:	2301      	movs	r3, #1
 80033d2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80033d4:	4b0a      	ldr	r3, [pc, #40]	@ (8003400 <xTaskRemoveFromEventList+0x1b0>)
 80033d6:	2201      	movs	r2, #1
 80033d8:	601a      	str	r2, [r3, #0]
 80033da:	e001      	b.n	80033e0 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80033dc:	2300      	movs	r3, #0
 80033de:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 80033e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3728      	adds	r7, #40	@ 0x28
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000020c 	.word	0x2000020c
 80033f0:	200001ec 	.word	0x200001ec
 80033f4:	20000110 	.word	0x20000110
 80033f8:	200001a4 	.word	0x200001a4
 80033fc:	2000010c 	.word	0x2000010c
 8003400:	200001f8 	.word	0x200001f8

08003404 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800340c:	4b06      	ldr	r3, [pc, #24]	@ (8003428 <vTaskInternalSetTimeOutState+0x24>)
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003414:	4b05      	ldr	r3, [pc, #20]	@ (800342c <vTaskInternalSetTimeOutState+0x28>)
 8003416:	681a      	ldr	r2, [r3, #0]
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	605a      	str	r2, [r3, #4]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	200001fc 	.word	0x200001fc
 800342c:	200001e8 	.word	0x200001e8

08003430 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b088      	sub	sp, #32
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
 8003438:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d10b      	bne.n	8003458 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8003440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003444:	f383 8811 	msr	BASEPRI, r3
 8003448:	f3bf 8f6f 	isb	sy
 800344c:	f3bf 8f4f 	dsb	sy
 8003450:	613b      	str	r3, [r7, #16]
    }
 8003452:	bf00      	nop
 8003454:	bf00      	nop
 8003456:	e7fd      	b.n	8003454 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10b      	bne.n	8003476 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800345e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003462:	f383 8811 	msr	BASEPRI, r3
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	f3bf 8f4f 	dsb	sy
 800346e:	60fb      	str	r3, [r7, #12]
    }
 8003470:	bf00      	nop
 8003472:	bf00      	nop
 8003474:	e7fd      	b.n	8003472 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8003476:	f000 fde1 	bl	800403c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800347a:	4b1f      	ldr	r3, [pc, #124]	@ (80034f8 <xTaskCheckForTimeOut+0xc8>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	69ba      	ldr	r2, [r7, #24]
 8003486:	1ad3      	subs	r3, r2, r3
 8003488:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003492:	d102      	bne.n	800349a <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003494:	2300      	movs	r3, #0
 8003496:	61fb      	str	r3, [r7, #28]
 8003498:	e026      	b.n	80034e8 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	4b17      	ldr	r3, [pc, #92]	@ (80034fc <xTaskCheckForTimeOut+0xcc>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	429a      	cmp	r2, r3
 80034a4:	d00a      	beq.n	80034bc <xTaskCheckForTimeOut+0x8c>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	685b      	ldr	r3, [r3, #4]
 80034aa:	69ba      	ldr	r2, [r7, #24]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d305      	bcc.n	80034bc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	2200      	movs	r2, #0
 80034b8:	601a      	str	r2, [r3, #0]
 80034ba:	e015      	b.n	80034e8 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	697a      	ldr	r2, [r7, #20]
 80034c2:	429a      	cmp	r2, r3
 80034c4:	d20b      	bcs.n	80034de <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	1ad2      	subs	r2, r2, r3
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f7ff ff96 	bl	8003404 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	61fb      	str	r3, [r7, #28]
 80034dc:	e004      	b.n	80034e8 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80034e4:	2301      	movs	r3, #1
 80034e6:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 80034e8:	f000 fdda 	bl	80040a0 <vPortExitCritical>

    return xReturn;
 80034ec:	69fb      	ldr	r3, [r7, #28]
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	3720      	adds	r7, #32
 80034f2:	46bd      	mov	sp, r7
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	bf00      	nop
 80034f8:	200001e8 	.word	0x200001e8
 80034fc:	200001fc 	.word	0x200001fc

08003500 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003504:	4b03      	ldr	r3, [pc, #12]	@ (8003514 <vTaskMissedYield+0x14>)
 8003506:	2201      	movs	r2, #1
 8003508:	601a      	str	r2, [r3, #0]
}
 800350a:	bf00      	nop
 800350c:	46bd      	mov	sp, r7
 800350e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003512:	4770      	bx	lr
 8003514:	200001f8 	.word	0x200001f8

08003518 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8003520:	f000 f852 	bl	80035c8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003524:	4b06      	ldr	r3, [pc, #24]	@ (8003540 <prvIdleTask+0x28>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	2b01      	cmp	r3, #1
 800352a:	d9f9      	bls.n	8003520 <prvIdleTask+0x8>
            {
                taskYIELD();
 800352c:	4b05      	ldr	r3, [pc, #20]	@ (8003544 <prvIdleTask+0x2c>)
 800352e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	f3bf 8f4f 	dsb	sy
 8003538:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800353c:	e7f0      	b.n	8003520 <prvIdleTask+0x8>
 800353e:	bf00      	nop
 8003540:	20000110 	.word	0x20000110
 8003544:	e000ed04 	.word	0xe000ed04

08003548 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800354e:	2300      	movs	r3, #0
 8003550:	607b      	str	r3, [r7, #4]
 8003552:	e00c      	b.n	800356e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003554:	687a      	ldr	r2, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	4413      	add	r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	4a12      	ldr	r2, [pc, #72]	@ (80035a8 <prvInitialiseTaskLists+0x60>)
 8003560:	4413      	add	r3, r2
 8003562:	4618      	mov	r0, r3
 8003564:	f7fe fd9a 	bl	800209c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	3301      	adds	r3, #1
 800356c:	607b      	str	r3, [r7, #4]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b04      	cmp	r3, #4
 8003572:	d9ef      	bls.n	8003554 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003574:	480d      	ldr	r0, [pc, #52]	@ (80035ac <prvInitialiseTaskLists+0x64>)
 8003576:	f7fe fd91 	bl	800209c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800357a:	480d      	ldr	r0, [pc, #52]	@ (80035b0 <prvInitialiseTaskLists+0x68>)
 800357c:	f7fe fd8e 	bl	800209c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003580:	480c      	ldr	r0, [pc, #48]	@ (80035b4 <prvInitialiseTaskLists+0x6c>)
 8003582:	f7fe fd8b 	bl	800209c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8003586:	480c      	ldr	r0, [pc, #48]	@ (80035b8 <prvInitialiseTaskLists+0x70>)
 8003588:	f7fe fd88 	bl	800209c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800358c:	480b      	ldr	r0, [pc, #44]	@ (80035bc <prvInitialiseTaskLists+0x74>)
 800358e:	f7fe fd85 	bl	800209c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003592:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <prvInitialiseTaskLists+0x78>)
 8003594:	4a05      	ldr	r2, [pc, #20]	@ (80035ac <prvInitialiseTaskLists+0x64>)
 8003596:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003598:	4b0a      	ldr	r3, [pc, #40]	@ (80035c4 <prvInitialiseTaskLists+0x7c>)
 800359a:	4a05      	ldr	r2, [pc, #20]	@ (80035b0 <prvInitialiseTaskLists+0x68>)
 800359c:	601a      	str	r2, [r3, #0]
}
 800359e:	bf00      	nop
 80035a0:	3708      	adds	r7, #8
 80035a2:	46bd      	mov	sp, r7
 80035a4:	bd80      	pop	{r7, pc}
 80035a6:	bf00      	nop
 80035a8:	20000110 	.word	0x20000110
 80035ac:	20000174 	.word	0x20000174
 80035b0:	20000188 	.word	0x20000188
 80035b4:	200001a4 	.word	0x200001a4
 80035b8:	200001b8 	.word	0x200001b8
 80035bc:	200001d0 	.word	0x200001d0
 80035c0:	2000019c 	.word	0x2000019c
 80035c4:	200001a0 	.word	0x200001a0

080035c8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035ce:	e019      	b.n	8003604 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80035d0:	f000 fd34 	bl	800403c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80035d4:	4b10      	ldr	r3, [pc, #64]	@ (8003618 <prvCheckTasksWaitingTermination+0x50>)
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	3304      	adds	r3, #4
 80035e0:	4618      	mov	r0, r3
 80035e2:	f7fe fdc1 	bl	8002168 <uxListRemove>
                --uxCurrentNumberOfTasks;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	@ (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	3b01      	subs	r3, #1
 80035ec:	4a0b      	ldr	r2, [pc, #44]	@ (800361c <prvCheckTasksWaitingTermination+0x54>)
 80035ee:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80035f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3b01      	subs	r3, #1
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 80035f8:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035fa:	f000 fd51 	bl	80040a0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f000 f810 	bl	8003624 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003604:	4b06      	ldr	r3, [pc, #24]	@ (8003620 <prvCheckTasksWaitingTermination+0x58>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1e1      	bne.n	80035d0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800360c:	bf00      	nop
 800360e:	bf00      	nop
 8003610:	3708      	adds	r7, #8
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	200001b8 	.word	0x200001b8
 800361c:	200001e4 	.word	0x200001e4
 8003620:	200001cc 	.word	0x200001cc

08003624 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003624:	b580      	push	{r7, lr}
 8003626:	b082      	sub	sp, #8
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fef1 	bl	8004418 <vPortFree>
            vPortFree( pxTCB );
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f000 feee 	bl	8004418 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003648:	4b0a      	ldr	r3, [pc, #40]	@ (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d104      	bne.n	800365c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003652:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003654:	f04f 32ff 	mov.w	r2, #4294967295
 8003658:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800365a:	e005      	b.n	8003668 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800365c:	4b05      	ldr	r3, [pc, #20]	@ (8003674 <prvResetNextTaskUnblockTime+0x30>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	68db      	ldr	r3, [r3, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a04      	ldr	r2, [pc, #16]	@ (8003678 <prvResetNextTaskUnblockTime+0x34>)
 8003666:	6013      	str	r3, [r2, #0]
}
 8003668:	bf00      	nop
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr
 8003672:	bf00      	nop
 8003674:	2000019c 	.word	0x2000019c
 8003678:	20000204 	.word	0x20000204

0800367c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003682:	4b0b      	ldr	r3, [pc, #44]	@ (80036b0 <xTaskGetSchedulerState+0x34>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800368a:	2301      	movs	r3, #1
 800368c:	607b      	str	r3, [r7, #4]
 800368e:	e008      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003690:	4b08      	ldr	r3, [pc, #32]	@ (80036b4 <xTaskGetSchedulerState+0x38>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d102      	bne.n	800369e <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 8003698:	2302      	movs	r3, #2
 800369a:	607b      	str	r3, [r7, #4]
 800369c:	e001      	b.n	80036a2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 800369e:	2300      	movs	r3, #0
 80036a0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80036a2:	687b      	ldr	r3, [r7, #4]
    }
 80036a4:	4618      	mov	r0, r3
 80036a6:	370c      	adds	r7, #12
 80036a8:	46bd      	mov	sp, r7
 80036aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ae:	4770      	bx	lr
 80036b0:	200001f0 	.word	0x200001f0
 80036b4:	2000020c 	.word	0x2000020c

080036b8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	6078      	str	r0, [r7, #4]
 80036c0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80036c2:	4b36      	ldr	r3, [pc, #216]	@ (800379c <prvAddCurrentTaskToDelayedList+0xe4>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80036c8:	4b35      	ldr	r3, [pc, #212]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	3304      	adds	r3, #4
 80036ce:	4618      	mov	r0, r3
 80036d0:	f7fe fd4a 	bl	8002168 <uxListRemove>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10b      	bne.n	80036f2 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80036da:	4b31      	ldr	r3, [pc, #196]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036e0:	2201      	movs	r2, #1
 80036e2:	fa02 f303 	lsl.w	r3, r2, r3
 80036e6:	43da      	mvns	r2, r3
 80036e8:	4b2e      	ldr	r3, [pc, #184]	@ (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4013      	ands	r3, r2
 80036ee:	4a2d      	ldr	r2, [pc, #180]	@ (80037a4 <prvAddCurrentTaskToDelayedList+0xec>)
 80036f0:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036f8:	d124      	bne.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d021      	beq.n	8003744 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003700:	4b29      	ldr	r3, [pc, #164]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	613b      	str	r3, [r7, #16]
 8003706:	4b26      	ldr	r3, [pc, #152]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	693a      	ldr	r2, [r7, #16]
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	4b24      	ldr	r3, [pc, #144]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	693a      	ldr	r2, [r7, #16]
 8003714:	6892      	ldr	r2, [r2, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	4b21      	ldr	r3, [pc, #132]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	3204      	adds	r2, #4
 8003722:	605a      	str	r2, [r3, #4]
 8003724:	4b1e      	ldr	r3, [pc, #120]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1d1a      	adds	r2, r3, #4
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	609a      	str	r2, [r3, #8]
 800372e:	4b1c      	ldr	r3, [pc, #112]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a1d      	ldr	r2, [pc, #116]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003734:	615a      	str	r2, [r3, #20]
 8003736:	4b1c      	ldr	r3, [pc, #112]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	3301      	adds	r3, #1
 800373c:	4a1a      	ldr	r2, [pc, #104]	@ (80037a8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800373e:	6013      	str	r3, [r2, #0]
 8003740:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003742:	e026      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003744:	697a      	ldr	r2, [r7, #20]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	4413      	add	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800374c:	4b14      	ldr	r3, [pc, #80]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	429a      	cmp	r2, r3
 800375a:	d209      	bcs.n	8003770 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800375c:	4b13      	ldr	r3, [pc, #76]	@ (80037ac <prvAddCurrentTaskToDelayedList+0xf4>)
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	4b0f      	ldr	r3, [pc, #60]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	3304      	adds	r3, #4
 8003766:	4619      	mov	r1, r3
 8003768:	4610      	mov	r0, r2
 800376a:	f7fe fcc4 	bl	80020f6 <vListInsert>
}
 800376e:	e010      	b.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003770:	4b0f      	ldr	r3, [pc, #60]	@ (80037b0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	4b0a      	ldr	r3, [pc, #40]	@ (80037a0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	3304      	adds	r3, #4
 800377a:	4619      	mov	r1, r3
 800377c:	4610      	mov	r0, r2
 800377e:	f7fe fcba 	bl	80020f6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003782:	4b0c      	ldr	r3, [pc, #48]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	429a      	cmp	r2, r3
 800378a:	d202      	bcs.n	8003792 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 800378c:	4a09      	ldr	r2, [pc, #36]	@ (80037b4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	6013      	str	r3, [r2, #0]
}
 8003792:	bf00      	nop
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	200001e8 	.word	0x200001e8
 80037a0:	2000010c 	.word	0x2000010c
 80037a4:	200001ec 	.word	0x200001ec
 80037a8:	200001d0 	.word	0x200001d0
 80037ac:	200001a0 	.word	0x200001a0
 80037b0:	2000019c 	.word	0x2000019c
 80037b4:	20000204 	.word	0x20000204

080037b8 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 80037be:	2300      	movs	r3, #0
 80037c0:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 80037c2:	f000 fa4f 	bl	8003c64 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 80037c6:	4b12      	ldr	r3, [pc, #72]	@ (8003810 <xTimerCreateTimerTask+0x58>)
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00b      	beq.n	80037e6 <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 80037ce:	4b11      	ldr	r3, [pc, #68]	@ (8003814 <xTimerCreateTimerTask+0x5c>)
 80037d0:	9301      	str	r3, [sp, #4]
 80037d2:	2302      	movs	r3, #2
 80037d4:	9300      	str	r3, [sp, #0]
 80037d6:	2300      	movs	r3, #0
 80037d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80037dc:	490e      	ldr	r1, [pc, #56]	@ (8003818 <xTimerCreateTimerTask+0x60>)
 80037de:	480f      	ldr	r0, [pc, #60]	@ (800381c <xTimerCreateTimerTask+0x64>)
 80037e0:	f7ff f824 	bl	800282c <xTaskCreate>
 80037e4:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d10b      	bne.n	8003804 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80037ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037f0:	f383 8811 	msr	BASEPRI, r3
 80037f4:	f3bf 8f6f 	isb	sy
 80037f8:	f3bf 8f4f 	dsb	sy
 80037fc:	603b      	str	r3, [r7, #0]
    }
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	e7fd      	b.n	8003800 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003804:	687b      	ldr	r3, [r7, #4]
    }
 8003806:	4618      	mov	r0, r3
 8003808:	3708      	adds	r7, #8
 800380a:	46bd      	mov	sp, r7
 800380c:	bd80      	pop	{r7, pc}
 800380e:	bf00      	nop
 8003810:	20000240 	.word	0x20000240
 8003814:	20000244 	.word	0x20000244
 8003818:	080070e8 	.word	0x080070e8
 800381c:	080038c5 	.word	0x080038c5

08003820 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0
 8003826:	60f8      	str	r0, [r7, #12]
 8003828:	60b9      	str	r1, [r7, #8]
 800382a:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 800382c:	e008      	b.n	8003840 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	68ba      	ldr	r2, [r7, #8]
 8003834:	4413      	add	r3, r2
 8003836:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	68f8      	ldr	r0, [r7, #12]
 800383e:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	699a      	ldr	r2, [r3, #24]
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	18d1      	adds	r1, r2, r3
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	68f8      	ldr	r0, [r7, #12]
 800384e:	f000 f8df 	bl	8003a10 <prvInsertTimerInActiveList>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d1ea      	bne.n	800382e <prvReloadTimer+0xe>
        }
    }
 8003858:	bf00      	nop
 800385a:	bf00      	nop
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
	...

08003864 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003864:	b580      	push	{r7, lr}
 8003866:	b084      	sub	sp, #16
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800386e:	4b14      	ldr	r3, [pc, #80]	@ (80038c0 <prvProcessExpiredTimer+0x5c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	68db      	ldr	r3, [r3, #12]
 8003874:	68db      	ldr	r3, [r3, #12]
 8003876:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	3304      	adds	r3, #4
 800387c:	4618      	mov	r0, r3
 800387e:	f7fe fc73 	bl	8002168 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003890:	683a      	ldr	r2, [r7, #0]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	68f8      	ldr	r0, [r7, #12]
 8003896:	f7ff ffc3 	bl	8003820 <prvReloadTimer>
 800389a:	e008      	b.n	80038ae <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80038a2:	f023 0301 	bic.w	r3, r3, #1
 80038a6:	b2da      	uxtb	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	68f8      	ldr	r0, [r7, #12]
 80038b4:	4798      	blx	r3
    }
 80038b6:	bf00      	nop
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000238 	.word	0x20000238

080038c4 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b084      	sub	sp, #16
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038cc:	f107 0308 	add.w	r3, r7, #8
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f859 	bl	8003988 <prvGetNextExpireTime>
 80038d6:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4619      	mov	r1, r3
 80038dc:	68f8      	ldr	r0, [r7, #12]
 80038de:	f000 f805 	bl	80038ec <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 80038e2:	f000 f8d7 	bl	8003a94 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80038e6:	bf00      	nop
 80038e8:	e7f0      	b.n	80038cc <prvTimerTask+0x8>
	...

080038ec <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
 80038f4:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038f6:	f7ff f985 	bl	8002c04 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038fa:	f107 0308 	add.w	r3, r7, #8
 80038fe:	4618      	mov	r0, r3
 8003900:	f000 f866 	bl	80039d0 <prvSampleTimeNow>
 8003904:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d130      	bne.n	800396e <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d10a      	bne.n	8003928 <prvProcessTimerOrBlockTask+0x3c>
 8003912:	687a      	ldr	r2, [r7, #4]
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	429a      	cmp	r2, r3
 8003918:	d806      	bhi.n	8003928 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 800391a:	f7ff f981 	bl	8002c20 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800391e:	68f9      	ldr	r1, [r7, #12]
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff9f 	bl	8003864 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003926:	e024      	b.n	8003972 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d008      	beq.n	8003940 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800392e:	4b13      	ldr	r3, [pc, #76]	@ (800397c <prvProcessTimerOrBlockTask+0x90>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d101      	bne.n	800393c <prvProcessTimerOrBlockTask+0x50>
 8003938:	2301      	movs	r3, #1
 800393a:	e000      	b.n	800393e <prvProcessTimerOrBlockTask+0x52>
 800393c:	2300      	movs	r3, #0
 800393e:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003940:	4b0f      	ldr	r3, [pc, #60]	@ (8003980 <prvProcessTimerOrBlockTask+0x94>)
 8003942:	6818      	ldr	r0, [r3, #0]
 8003944:	687a      	ldr	r2, [r7, #4]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	683a      	ldr	r2, [r7, #0]
 800394c:	4619      	mov	r1, r3
 800394e:	f7fe ff39 	bl	80027c4 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003952:	f7ff f965 	bl	8002c20 <xTaskResumeAll>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d10a      	bne.n	8003972 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 800395c:	4b09      	ldr	r3, [pc, #36]	@ (8003984 <prvProcessTimerOrBlockTask+0x98>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	f3bf 8f6f 	isb	sy
    }
 800396c:	e001      	b.n	8003972 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 800396e:	f7ff f957 	bl	8002c20 <xTaskResumeAll>
    }
 8003972:	bf00      	nop
 8003974:	3710      	adds	r7, #16
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	2000023c 	.word	0x2000023c
 8003980:	20000240 	.word	0x20000240
 8003984:	e000ed04 	.word	0xe000ed04

08003988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003988:	b480      	push	{r7}
 800398a:	b085      	sub	sp, #20
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003990:	4b0e      	ldr	r3, [pc, #56]	@ (80039cc <prvGetNextExpireTime+0x44>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <prvGetNextExpireTime+0x16>
 800399a:	2201      	movs	r2, #1
 800399c:	e000      	b.n	80039a0 <prvGetNextExpireTime+0x18>
 800399e:	2200      	movs	r2, #0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d105      	bne.n	80039b8 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80039ac:	4b07      	ldr	r3, [pc, #28]	@ (80039cc <prvGetNextExpireTime+0x44>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	68db      	ldr	r3, [r3, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60fb      	str	r3, [r7, #12]
 80039b6:	e001      	b.n	80039bc <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 80039b8:	2300      	movs	r3, #0
 80039ba:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 80039bc:	68fb      	ldr	r3, [r7, #12]
    }
 80039be:	4618      	mov	r0, r3
 80039c0:	3714      	adds	r7, #20
 80039c2:	46bd      	mov	sp, r7
 80039c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c8:	4770      	bx	lr
 80039ca:	bf00      	nop
 80039cc:	20000238 	.word	0x20000238

080039d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b084      	sub	sp, #16
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 80039d8:	f7ff fa22 	bl	8002e20 <xTaskGetTickCount>
 80039dc:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 80039de:	4b0b      	ldr	r3, [pc, #44]	@ (8003a0c <prvSampleTimeNow+0x3c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	68fa      	ldr	r2, [r7, #12]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d205      	bcs.n	80039f4 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 80039e8:	f000 f916 	bl	8003c18 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	601a      	str	r2, [r3, #0]
 80039f2:	e002      	b.n	80039fa <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039fa:	4a04      	ldr	r2, [pc, #16]	@ (8003a0c <prvSampleTimeNow+0x3c>)
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8003a00:	68fb      	ldr	r3, [r7, #12]
    }
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000248 	.word	0x20000248

08003a10 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8003a10:	b580      	push	{r7, lr}
 8003a12:	b086      	sub	sp, #24
 8003a14:	af00      	add	r7, sp, #0
 8003a16:	60f8      	str	r0, [r7, #12]
 8003a18:	60b9      	str	r1, [r7, #8]
 8003a1a:	607a      	str	r2, [r7, #4]
 8003a1c:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	68ba      	ldr	r2, [r7, #8]
 8003a26:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	68fa      	ldr	r2, [r7, #12]
 8003a2c:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8003a2e:	68ba      	ldr	r2, [r7, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	429a      	cmp	r2, r3
 8003a34:	d812      	bhi.n	8003a5c <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a36:	687a      	ldr	r2, [r7, #4]
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	1ad2      	subs	r2, r2, r3
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	699b      	ldr	r3, [r3, #24]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d302      	bcc.n	8003a4a <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 8003a44:	2301      	movs	r3, #1
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e01b      	b.n	8003a82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003a4a:	4b10      	ldr	r3, [pc, #64]	@ (8003a8c <prvInsertTimerInActiveList+0x7c>)
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f7fe fb4e 	bl	80020f6 <vListInsert>
 8003a5a:	e012      	b.n	8003a82 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d206      	bcs.n	8003a72 <prvInsertTimerInActiveList+0x62>
 8003a64:	68ba      	ldr	r2, [r7, #8]
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d302      	bcc.n	8003a72 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	617b      	str	r3, [r7, #20]
 8003a70:	e007      	b.n	8003a82 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a72:	4b07      	ldr	r3, [pc, #28]	@ (8003a90 <prvInsertTimerInActiveList+0x80>)
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	3304      	adds	r3, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4610      	mov	r0, r2
 8003a7e:	f7fe fb3a 	bl	80020f6 <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a82:	697b      	ldr	r3, [r7, #20]
    }
 8003a84:	4618      	mov	r0, r3
 8003a86:	3718      	adds	r7, #24
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	2000023c 	.word	0x2000023c
 8003a90:	20000238 	.word	0x20000238

08003a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a9a:	e0a9      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a9c:	68bb      	ldr	r3, [r7, #8]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	f2c0 80a6 	blt.w	8003bf0 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	695b      	ldr	r3, [r3, #20]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3304      	adds	r3, #4
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fe fb57 	bl	8002168 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003aba:	1d3b      	adds	r3, r7, #4
 8003abc:	4618      	mov	r0, r3
 8003abe:	f7ff ff87 	bl	80039d0 <prvSampleTimeNow>
 8003ac2:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	3b01      	subs	r3, #1
 8003ac8:	2b08      	cmp	r3, #8
 8003aca:	f200 808e 	bhi.w	8003bea <prvProcessReceivedCommands+0x156>
 8003ace:	a201      	add	r2, pc, #4	@ (adr r2, 8003ad4 <prvProcessReceivedCommands+0x40>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003af9 	.word	0x08003af9
 8003ad8:	08003af9 	.word	0x08003af9
 8003adc:	08003b61 	.word	0x08003b61
 8003ae0:	08003b75 	.word	0x08003b75
 8003ae4:	08003bc1 	.word	0x08003bc1
 8003ae8:	08003af9 	.word	0x08003af9
 8003aec:	08003af9 	.word	0x08003af9
 8003af0:	08003b61 	.word	0x08003b61
 8003af4:	08003b75 	.word	0x08003b75
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003afe:	f043 0301 	orr.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	69fb      	ldr	r3, [r7, #28]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	18d1      	adds	r1, r2, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	69ba      	ldr	r2, [r7, #24]
 8003b16:	69f8      	ldr	r0, [r7, #28]
 8003b18:	f7ff ff7a 	bl	8003a10 <prvInsertTimerInActiveList>
 8003b1c:	4603      	mov	r3, r0
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d065      	beq.n	8003bee <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003b22:	69fb      	ldr	r3, [r7, #28]
 8003b24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d009      	beq.n	8003b44 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003b30:	68fa      	ldr	r2, [r7, #12]
 8003b32:	69fb      	ldr	r3, [r7, #28]
 8003b34:	699b      	ldr	r3, [r3, #24]
 8003b36:	4413      	add	r3, r2
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4619      	mov	r1, r3
 8003b3c:	69f8      	ldr	r0, [r7, #28]
 8003b3e:	f7ff fe6f 	bl	8003820 <prvReloadTimer>
 8003b42:	e008      	b.n	8003b56 <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b44:	69fb      	ldr	r3, [r7, #28]
 8003b46:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b4a:	f023 0301 	bic.w	r3, r3, #1
 8003b4e:	b2da      	uxtb	r2, r3
 8003b50:	69fb      	ldr	r3, [r7, #28]
 8003b52:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b56:	69fb      	ldr	r3, [r7, #28]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	69f8      	ldr	r0, [r7, #28]
 8003b5c:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b5e:	e046      	b.n	8003bee <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b66:	f023 0301 	bic.w	r3, r3, #1
 8003b6a:	b2da      	uxtb	r2, r3
 8003b6c:	69fb      	ldr	r3, [r7, #28]
 8003b6e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b72:	e03d      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b7a:	f043 0301 	orr.w	r3, r3, #1
 8003b7e:	b2da      	uxtb	r2, r3
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b86:	68fa      	ldr	r2, [r7, #12]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b8c:	69fb      	ldr	r3, [r7, #28]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d10b      	bne.n	8003bac <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b98:	f383 8811 	msr	BASEPRI, r3
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	f3bf 8f4f 	dsb	sy
 8003ba4:	617b      	str	r3, [r7, #20]
    }
 8003ba6:	bf00      	nop
 8003ba8:	bf00      	nop
 8003baa:	e7fd      	b.n	8003ba8 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	699a      	ldr	r2, [r3, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
 8003bb2:	18d1      	adds	r1, r2, r3
 8003bb4:	69bb      	ldr	r3, [r7, #24]
 8003bb6:	69ba      	ldr	r2, [r7, #24]
 8003bb8:	69f8      	ldr	r0, [r7, #28]
 8003bba:	f7ff ff29 	bl	8003a10 <prvInsertTimerInActiveList>
                        break;
 8003bbe:	e017      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bc6:	f003 0302 	and.w	r3, r3, #2
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003bce:	69f8      	ldr	r0, [r7, #28]
 8003bd0:	f000 fc22 	bl	8004418 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003bd4:	e00c      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003bdc:	f023 0301 	bic.w	r3, r3, #1
 8003be0:	b2da      	uxtb	r2, r3
 8003be2:	69fb      	ldr	r3, [r7, #28]
 8003be4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003be8:	e002      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003bea:	bf00      	nop
 8003bec:	e000      	b.n	8003bf0 <prvProcessReceivedCommands+0x15c>
                        break;
 8003bee:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bf0:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <prvProcessReceivedCommands+0x180>)
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f107 0108 	add.w	r1, r7, #8
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f7fe fbe8 	bl	80023d0 <xQueueReceive>
 8003c00:	4603      	mov	r3, r0
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	f47f af4a 	bne.w	8003a9c <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003c08:	bf00      	nop
 8003c0a:	bf00      	nop
 8003c0c:	3720      	adds	r7, #32
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	20000240 	.word	0x20000240

08003c18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c1e:	e009      	b.n	8003c34 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003c20:	4b0e      	ldr	r3, [pc, #56]	@ (8003c5c <prvSwitchTimerLists+0x44>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c2e:	6838      	ldr	r0, [r7, #0]
 8003c30:	f7ff fe18 	bl	8003864 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003c34:	4b09      	ldr	r3, [pc, #36]	@ (8003c5c <prvSwitchTimerLists+0x44>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003c3e:	4b07      	ldr	r3, [pc, #28]	@ (8003c5c <prvSwitchTimerLists+0x44>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003c44:	4b06      	ldr	r3, [pc, #24]	@ (8003c60 <prvSwitchTimerLists+0x48>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a04      	ldr	r2, [pc, #16]	@ (8003c5c <prvSwitchTimerLists+0x44>)
 8003c4a:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c4c:	4a04      	ldr	r2, [pc, #16]	@ (8003c60 <prvSwitchTimerLists+0x48>)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6013      	str	r3, [r2, #0]
    }
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000238 	.word	0x20000238
 8003c60:	2000023c 	.word	0x2000023c

08003c64 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c68:	f000 f9e8 	bl	800403c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c6c:	4b12      	ldr	r3, [pc, #72]	@ (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d11d      	bne.n	8003cb0 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c74:	4811      	ldr	r0, [pc, #68]	@ (8003cbc <prvCheckForValidListAndQueue+0x58>)
 8003c76:	f7fe fa11 	bl	800209c <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c7a:	4811      	ldr	r0, [pc, #68]	@ (8003cc0 <prvCheckForValidListAndQueue+0x5c>)
 8003c7c:	f7fe fa0e 	bl	800209c <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c80:	4b10      	ldr	r3, [pc, #64]	@ (8003cc4 <prvCheckForValidListAndQueue+0x60>)
 8003c82:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <prvCheckForValidListAndQueue+0x58>)
 8003c84:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c86:	4b10      	ldr	r3, [pc, #64]	@ (8003cc8 <prvCheckForValidListAndQueue+0x64>)
 8003c88:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <prvCheckForValidListAndQueue+0x5c>)
 8003c8a:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	210c      	movs	r1, #12
 8003c90:	200a      	movs	r0, #10
 8003c92:	f7fe fb25 	bl	80022e0 <xQueueGenericCreate>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4a07      	ldr	r2, [pc, #28]	@ (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c9a:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c9c:	4b06      	ldr	r3, [pc, #24]	@ (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d005      	beq.n	8003cb0 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003ca4:	4b04      	ldr	r3, [pc, #16]	@ (8003cb8 <prvCheckForValidListAndQueue+0x54>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4908      	ldr	r1, [pc, #32]	@ (8003ccc <prvCheckForValidListAndQueue+0x68>)
 8003caa:	4618      	mov	r0, r3
 8003cac:	f7fe fd32 	bl	8002714 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003cb0:	f000 f9f6 	bl	80040a0 <vPortExitCritical>
    }
 8003cb4:	bf00      	nop
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	20000240 	.word	0x20000240
 8003cbc:	20000210 	.word	0x20000210
 8003cc0:	20000224 	.word	0x20000224
 8003cc4:	20000238 	.word	0x20000238
 8003cc8:	2000023c 	.word	0x2000023c
 8003ccc:	080070f0 	.word	0x080070f0

08003cd0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	3b04      	subs	r3, #4
 8003ce0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003ce8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	3b04      	subs	r3, #4
 8003cee:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	f023 0201 	bic.w	r2, r3, #1
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	3b04      	subs	r3, #4
 8003cfe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003d00:	4a0c      	ldr	r2, [pc, #48]	@ (8003d34 <pxPortInitialiseStack+0x64>)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	3b14      	subs	r3, #20
 8003d0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	3b04      	subs	r3, #4
 8003d16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f06f 0202 	mvn.w	r2, #2
 8003d1e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	3b20      	subs	r3, #32
 8003d24:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003d26:	68fb      	ldr	r3, [r7, #12]
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3714      	adds	r7, #20
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d32:	4770      	bx	lr
 8003d34:	08003d39 	.word	0x08003d39

08003d38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003d38:	b480      	push	{r7}
 8003d3a:	b085      	sub	sp, #20
 8003d3c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003d42:	4b13      	ldr	r3, [pc, #76]	@ (8003d90 <prvTaskExitError+0x58>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d4a:	d00b      	beq.n	8003d64 <prvTaskExitError+0x2c>
        __asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	60fb      	str	r3, [r7, #12]
    }
 8003d5e:	bf00      	nop
 8003d60:	bf00      	nop
 8003d62:	e7fd      	b.n	8003d60 <prvTaskExitError+0x28>
        __asm volatile
 8003d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d68:	f383 8811 	msr	BASEPRI, r3
 8003d6c:	f3bf 8f6f 	isb	sy
 8003d70:	f3bf 8f4f 	dsb	sy
 8003d74:	60bb      	str	r3, [r7, #8]
    }
 8003d76:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d78:	bf00      	nop
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d0fc      	beq.n	8003d7a <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d80:	bf00      	nop
 8003d82:	bf00      	nop
 8003d84:	3714      	adds	r7, #20
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr
 8003d8e:	bf00      	nop
 8003d90:	20000010 	.word	0x20000010
	...

08003da0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003da0:	4b07      	ldr	r3, [pc, #28]	@ (8003dc0 <pxCurrentTCBConst2>)
 8003da2:	6819      	ldr	r1, [r3, #0]
 8003da4:	6808      	ldr	r0, [r1, #0]
 8003da6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003daa:	f380 8809 	msr	PSP, r0
 8003dae:	f3bf 8f6f 	isb	sy
 8003db2:	f04f 0000 	mov.w	r0, #0
 8003db6:	f380 8811 	msr	BASEPRI, r0
 8003dba:	4770      	bx	lr
 8003dbc:	f3af 8000 	nop.w

08003dc0 <pxCurrentTCBConst2>:
 8003dc0:	2000010c 	.word	0x2000010c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003dc4:	bf00      	nop
 8003dc6:	bf00      	nop

08003dc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003dc8:	4808      	ldr	r0, [pc, #32]	@ (8003dec <prvPortStartFirstTask+0x24>)
 8003dca:	6800      	ldr	r0, [r0, #0]
 8003dcc:	6800      	ldr	r0, [r0, #0]
 8003dce:	f380 8808 	msr	MSP, r0
 8003dd2:	f04f 0000 	mov.w	r0, #0
 8003dd6:	f380 8814 	msr	CONTROL, r0
 8003dda:	b662      	cpsie	i
 8003ddc:	b661      	cpsie	f
 8003dde:	f3bf 8f4f 	dsb	sy
 8003de2:	f3bf 8f6f 	isb	sy
 8003de6:	df00      	svc	0
 8003de8:	bf00      	nop
 8003dea:	0000      	.short	0x0000
 8003dec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003df0:	bf00      	nop
 8003df2:	bf00      	nop

08003df4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003df4:	b580      	push	{r7, lr}
 8003df6:	b086      	sub	sp, #24
 8003df8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003dfa:	4b47      	ldr	r3, [pc, #284]	@ (8003f18 <xPortStartScheduler+0x124>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	4a47      	ldr	r2, [pc, #284]	@ (8003f1c <xPortStartScheduler+0x128>)
 8003e00:	4293      	cmp	r3, r2
 8003e02:	d10b      	bne.n	8003e1c <xPortStartScheduler+0x28>
        __asm volatile
 8003e04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e08:	f383 8811 	msr	BASEPRI, r3
 8003e0c:	f3bf 8f6f 	isb	sy
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	613b      	str	r3, [r7, #16]
    }
 8003e16:	bf00      	nop
 8003e18:	bf00      	nop
 8003e1a:	e7fd      	b.n	8003e18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003e1c:	4b3e      	ldr	r3, [pc, #248]	@ (8003f18 <xPortStartScheduler+0x124>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	4a3f      	ldr	r2, [pc, #252]	@ (8003f20 <xPortStartScheduler+0x12c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d10b      	bne.n	8003e3e <xPortStartScheduler+0x4a>
        __asm volatile
 8003e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e2a:	f383 8811 	msr	BASEPRI, r3
 8003e2e:	f3bf 8f6f 	isb	sy
 8003e32:	f3bf 8f4f 	dsb	sy
 8003e36:	60fb      	str	r3, [r7, #12]
    }
 8003e38:	bf00      	nop
 8003e3a:	bf00      	nop
 8003e3c:	e7fd      	b.n	8003e3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003e3e:	4b39      	ldr	r3, [pc, #228]	@ (8003f24 <xPortStartScheduler+0x130>)
 8003e40:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	781b      	ldrb	r3, [r3, #0]
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003e4a:	697b      	ldr	r3, [r7, #20]
 8003e4c:	22ff      	movs	r2, #255	@ 0xff
 8003e4e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	781b      	ldrb	r3, [r3, #0]
 8003e54:	b2db      	uxtb	r3, r3
 8003e56:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e58:	78fb      	ldrb	r3, [r7, #3]
 8003e5a:	b2db      	uxtb	r3, r3
 8003e5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e60:	b2da      	uxtb	r2, r3
 8003e62:	4b31      	ldr	r3, [pc, #196]	@ (8003f28 <xPortStartScheduler+0x134>)
 8003e64:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e66:	4b31      	ldr	r3, [pc, #196]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003e68:	2207      	movs	r2, #7
 8003e6a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e6c:	e009      	b.n	8003e82 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003e6e:	4b2f      	ldr	r3, [pc, #188]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	4a2d      	ldr	r2, [pc, #180]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003e76:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e78:	78fb      	ldrb	r3, [r7, #3]
 8003e7a:	b2db      	uxtb	r3, r3
 8003e7c:	005b      	lsls	r3, r3, #1
 8003e7e:	b2db      	uxtb	r3, r3
 8003e80:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e82:	78fb      	ldrb	r3, [r7, #3]
 8003e84:	b2db      	uxtb	r3, r3
 8003e86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e8a:	2b80      	cmp	r3, #128	@ 0x80
 8003e8c:	d0ef      	beq.n	8003e6e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e8e:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f1c3 0307 	rsb	r3, r3, #7
 8003e96:	2b04      	cmp	r3, #4
 8003e98:	d00b      	beq.n	8003eb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8003e9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e9e:	f383 8811 	msr	BASEPRI, r3
 8003ea2:	f3bf 8f6f 	isb	sy
 8003ea6:	f3bf 8f4f 	dsb	sy
 8003eaa:	60bb      	str	r3, [r7, #8]
    }
 8003eac:	bf00      	nop
 8003eae:	bf00      	nop
 8003eb0:	e7fd      	b.n	8003eae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003eb2:	4b1e      	ldr	r3, [pc, #120]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	021b      	lsls	r3, r3, #8
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003eba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003ebc:	4b1b      	ldr	r3, [pc, #108]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003ec4:	4a19      	ldr	r2, [pc, #100]	@ (8003f2c <xPortStartScheduler+0x138>)
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	b2da      	uxtb	r2, r3
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003ed0:	4b17      	ldr	r3, [pc, #92]	@ (8003f30 <xPortStartScheduler+0x13c>)
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	4a16      	ldr	r2, [pc, #88]	@ (8003f30 <xPortStartScheduler+0x13c>)
 8003ed6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003eda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003edc:	4b14      	ldr	r3, [pc, #80]	@ (8003f30 <xPortStartScheduler+0x13c>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	4a13      	ldr	r2, [pc, #76]	@ (8003f30 <xPortStartScheduler+0x13c>)
 8003ee2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003ee6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003ee8:	f000 f968 	bl	80041bc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003eec:	4b11      	ldr	r3, [pc, #68]	@ (8003f34 <xPortStartScheduler+0x140>)
 8003eee:	2200      	movs	r2, #0
 8003ef0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ef2:	f000 f987 	bl	8004204 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ef6:	4b10      	ldr	r3, [pc, #64]	@ (8003f38 <xPortStartScheduler+0x144>)
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	4a0f      	ldr	r2, [pc, #60]	@ (8003f38 <xPortStartScheduler+0x144>)
 8003efc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003f00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003f02:	f7ff ff61 	bl	8003dc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003f06:	f7ff f8c9 	bl	800309c <vTaskSwitchContext>
    prvTaskExitError();
 8003f0a:	f7ff ff15 	bl	8003d38 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003f0e:	2300      	movs	r3, #0
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}
 8003f18:	e000ed00 	.word	0xe000ed00
 8003f1c:	410fc271 	.word	0x410fc271
 8003f20:	410fc270 	.word	0x410fc270
 8003f24:	e000e400 	.word	0xe000e400
 8003f28:	2000024c 	.word	0x2000024c
 8003f2c:	20000250 	.word	0x20000250
 8003f30:	e000ed20 	.word	0xe000ed20
 8003f34:	20000010 	.word	0x20000010
 8003f38:	e000ef34 	.word	0xe000ef34

08003f3c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b087      	sub	sp, #28
 8003f40:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003f42:	4b38      	ldr	r3, [pc, #224]	@ (8004024 <vInitPrioGroupValue+0xe8>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a38      	ldr	r2, [pc, #224]	@ (8004028 <vInitPrioGroupValue+0xec>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d10b      	bne.n	8003f64 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003f4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f50:	f383 8811 	msr	BASEPRI, r3
 8003f54:	f3bf 8f6f 	isb	sy
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	613b      	str	r3, [r7, #16]
    }
 8003f5e:	bf00      	nop
 8003f60:	bf00      	nop
 8003f62:	e7fd      	b.n	8003f60 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f64:	4b2f      	ldr	r3, [pc, #188]	@ (8004024 <vInitPrioGroupValue+0xe8>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a30      	ldr	r2, [pc, #192]	@ (800402c <vInitPrioGroupValue+0xf0>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10b      	bne.n	8003f86 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	60fb      	str	r3, [r7, #12]
    }
 8003f80:	bf00      	nop
 8003f82:	bf00      	nop
 8003f84:	e7fd      	b.n	8003f82 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f86:	4b2a      	ldr	r3, [pc, #168]	@ (8004030 <vInitPrioGroupValue+0xf4>)
 8003f88:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	b2db      	uxtb	r3, r3
 8003f90:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	22ff      	movs	r2, #255	@ 0xff
 8003f96:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	781b      	ldrb	r3, [r3, #0]
 8003f9c:	b2db      	uxtb	r3, r3
 8003f9e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	b2db      	uxtb	r3, r3
 8003fa4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003fa8:	b2da      	uxtb	r2, r3
 8003faa:	4b22      	ldr	r3, [pc, #136]	@ (8004034 <vInitPrioGroupValue+0xf8>)
 8003fac:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003fae:	4b22      	ldr	r3, [pc, #136]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8003fb0:	2207      	movs	r2, #7
 8003fb2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fb4:	e009      	b.n	8003fca <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003fb6:	4b20      	ldr	r3, [pc, #128]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	3b01      	subs	r3, #1
 8003fbc:	4a1e      	ldr	r2, [pc, #120]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8003fbe:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	b2db      	uxtb	r3, r3
 8003fc8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003fca:	78fb      	ldrb	r3, [r7, #3]
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fd2:	2b80      	cmp	r3, #128	@ 0x80
 8003fd4:	d0ef      	beq.n	8003fb6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003fd6:	4b18      	ldr	r3, [pc, #96]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f1c3 0307 	rsb	r3, r3, #7
 8003fde:	2b04      	cmp	r3, #4
 8003fe0:	d00b      	beq.n	8003ffa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003fe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe6:	f383 8811 	msr	BASEPRI, r3
 8003fea:	f3bf 8f6f 	isb	sy
 8003fee:	f3bf 8f4f 	dsb	sy
 8003ff2:	60bb      	str	r3, [r7, #8]
    }
 8003ff4:	bf00      	nop
 8003ff6:	bf00      	nop
 8003ff8:	e7fd      	b.n	8003ff6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003ffa:	4b0f      	ldr	r3, [pc, #60]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	4a0d      	ldr	r2, [pc, #52]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8004002:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004004:	4b0c      	ldr	r3, [pc, #48]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800400c:	4a0a      	ldr	r2, [pc, #40]	@ (8004038 <vInitPrioGroupValue+0xfc>)
 800400e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	b2da      	uxtb	r2, r3
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004018:	bf00      	nop
 800401a:	371c      	adds	r7, #28
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr
 8004024:	e000ed00 	.word	0xe000ed00
 8004028:	410fc271 	.word	0x410fc271
 800402c:	410fc270 	.word	0x410fc270
 8004030:	e000e400 	.word	0xe000e400
 8004034:	2000024c 	.word	0x2000024c
 8004038:	20000250 	.word	0x20000250

0800403c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800403c:	b480      	push	{r7}
 800403e:	b083      	sub	sp, #12
 8004040:	af00      	add	r7, sp, #0
        __asm volatile
 8004042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004046:	f383 8811 	msr	BASEPRI, r3
 800404a:	f3bf 8f6f 	isb	sy
 800404e:	f3bf 8f4f 	dsb	sy
 8004052:	607b      	str	r3, [r7, #4]
    }
 8004054:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004056:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <vPortEnterCritical+0x5c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	3301      	adds	r3, #1
 800405c:	4a0e      	ldr	r2, [pc, #56]	@ (8004098 <vPortEnterCritical+0x5c>)
 800405e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004060:	4b0d      	ldr	r3, [pc, #52]	@ (8004098 <vPortEnterCritical+0x5c>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d110      	bne.n	800408a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004068:	4b0c      	ldr	r3, [pc, #48]	@ (800409c <vPortEnterCritical+0x60>)
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	b2db      	uxtb	r3, r3
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00b      	beq.n	800408a <vPortEnterCritical+0x4e>
        __asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	603b      	str	r3, [r7, #0]
    }
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <vPortEnterCritical+0x4a>
    }
}
 800408a:	bf00      	nop
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	20000010 	.word	0x20000010
 800409c:	e000ed04 	.word	0xe000ed04

080040a0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80040a6:	4b12      	ldr	r3, [pc, #72]	@ (80040f0 <vPortExitCritical+0x50>)
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d10b      	bne.n	80040c6 <vPortExitCritical+0x26>
        __asm volatile
 80040ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040b2:	f383 8811 	msr	BASEPRI, r3
 80040b6:	f3bf 8f6f 	isb	sy
 80040ba:	f3bf 8f4f 	dsb	sy
 80040be:	607b      	str	r3, [r7, #4]
    }
 80040c0:	bf00      	nop
 80040c2:	bf00      	nop
 80040c4:	e7fd      	b.n	80040c2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80040c6:	4b0a      	ldr	r3, [pc, #40]	@ (80040f0 <vPortExitCritical+0x50>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	3b01      	subs	r3, #1
 80040cc:	4a08      	ldr	r2, [pc, #32]	@ (80040f0 <vPortExitCritical+0x50>)
 80040ce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80040d0:	4b07      	ldr	r3, [pc, #28]	@ (80040f0 <vPortExitCritical+0x50>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d105      	bne.n	80040e4 <vPortExitCritical+0x44>
 80040d8:	2300      	movs	r3, #0
 80040da:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 80040e2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80040e4:	bf00      	nop
 80040e6:	370c      	adds	r7, #12
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	20000010 	.word	0x20000010
	...

08004100 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004100:	f3ef 8009 	mrs	r0, PSP
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4b15      	ldr	r3, [pc, #84]	@ (8004160 <pxCurrentTCBConst>)
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	f01e 0f10 	tst.w	lr, #16
 8004110:	bf08      	it	eq
 8004112:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004116:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800411a:	6010      	str	r0, [r2, #0]
 800411c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004120:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004124:	f380 8811 	msr	BASEPRI, r0
 8004128:	f3bf 8f4f 	dsb	sy
 800412c:	f3bf 8f6f 	isb	sy
 8004130:	f7fe ffb4 	bl	800309c <vTaskSwitchContext>
 8004134:	f04f 0000 	mov.w	r0, #0
 8004138:	f380 8811 	msr	BASEPRI, r0
 800413c:	bc09      	pop	{r0, r3}
 800413e:	6819      	ldr	r1, [r3, #0]
 8004140:	6808      	ldr	r0, [r1, #0]
 8004142:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004146:	f01e 0f10 	tst.w	lr, #16
 800414a:	bf08      	it	eq
 800414c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004150:	f380 8809 	msr	PSP, r0
 8004154:	f3bf 8f6f 	isb	sy
 8004158:	4770      	bx	lr
 800415a:	bf00      	nop
 800415c:	f3af 8000 	nop.w

08004160 <pxCurrentTCBConst>:
 8004160:	2000010c 	.word	0x2000010c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004164:	bf00      	nop
 8004166:	bf00      	nop

08004168 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
        __asm volatile
 800416e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004172:	f383 8811 	msr	BASEPRI, r3
 8004176:	f3bf 8f6f 	isb	sy
 800417a:	f3bf 8f4f 	dsb	sy
 800417e:	607b      	str	r3, [r7, #4]
    }
 8004180:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004182:	f001 fffd 	bl	8006180 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004186:	f7fe fe6d 	bl	8002e64 <xTaskIncrementTick>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d006      	beq.n	800419e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004190:	f002 f854 	bl	800623c <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004194:	4b08      	ldr	r3, [pc, #32]	@ (80041b8 <SysTick_Handler+0x50>)
 8004196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800419a:	601a      	str	r2, [r3, #0]
 800419c:	e001      	b.n	80041a2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800419e:	f002 f831 	bl	8006204 <SEGGER_SYSVIEW_RecordExitISR>
 80041a2:	2300      	movs	r3, #0
 80041a4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	f383 8811 	msr	BASEPRI, r3
    }
 80041ac:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80041ae:	bf00      	nop
 80041b0:	3708      	adds	r7, #8
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	e000ed04 	.word	0xe000ed04

080041bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80041c0:	4b0b      	ldr	r3, [pc, #44]	@ (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041c2:	2200      	movs	r2, #0
 80041c4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80041c6:	4b0b      	ldr	r3, [pc, #44]	@ (80041f4 <vPortSetupTimerInterrupt+0x38>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80041cc:	4b0a      	ldr	r3, [pc, #40]	@ (80041f8 <vPortSetupTimerInterrupt+0x3c>)
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	4a0a      	ldr	r2, [pc, #40]	@ (80041fc <vPortSetupTimerInterrupt+0x40>)
 80041d2:	fba2 2303 	umull	r2, r3, r2, r3
 80041d6:	099b      	lsrs	r3, r3, #6
 80041d8:	4a09      	ldr	r2, [pc, #36]	@ (8004200 <vPortSetupTimerInterrupt+0x44>)
 80041da:	3b01      	subs	r3, #1
 80041dc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80041de:	4b04      	ldr	r3, [pc, #16]	@ (80041f0 <vPortSetupTimerInterrupt+0x34>)
 80041e0:	2207      	movs	r2, #7
 80041e2:	601a      	str	r2, [r3, #0]
}
 80041e4:	bf00      	nop
 80041e6:	46bd      	mov	sp, r7
 80041e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ec:	4770      	bx	lr
 80041ee:	bf00      	nop
 80041f0:	e000e010 	.word	0xe000e010
 80041f4:	e000e018 	.word	0xe000e018
 80041f8:	20000000 	.word	0x20000000
 80041fc:	10624dd3 	.word	0x10624dd3
 8004200:	e000e014 	.word	0xe000e014

08004204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004214 <vPortEnableVFP+0x10>
 8004208:	6801      	ldr	r1, [r0, #0]
 800420a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800420e:	6001      	str	r1, [r0, #0]
 8004210:	4770      	bx	lr
 8004212:	0000      	.short	0x0000
 8004214:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop

0800421c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800421c:	b480      	push	{r7}
 800421e:	b085      	sub	sp, #20
 8004220:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004222:	f3ef 8305 	mrs	r3, IPSR
 8004226:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2b0f      	cmp	r3, #15
 800422c:	d915      	bls.n	800425a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800422e:	4a18      	ldr	r2, [pc, #96]	@ (8004290 <vPortValidateInterruptPriority+0x74>)
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	4413      	add	r3, r2
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004238:	4b16      	ldr	r3, [pc, #88]	@ (8004294 <vPortValidateInterruptPriority+0x78>)
 800423a:	781b      	ldrb	r3, [r3, #0]
 800423c:	7afa      	ldrb	r2, [r7, #11]
 800423e:	429a      	cmp	r2, r3
 8004240:	d20b      	bcs.n	800425a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004242:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004246:	f383 8811 	msr	BASEPRI, r3
 800424a:	f3bf 8f6f 	isb	sy
 800424e:	f3bf 8f4f 	dsb	sy
 8004252:	607b      	str	r3, [r7, #4]
    }
 8004254:	bf00      	nop
 8004256:	bf00      	nop
 8004258:	e7fd      	b.n	8004256 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800425a:	4b0f      	ldr	r3, [pc, #60]	@ (8004298 <vPortValidateInterruptPriority+0x7c>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004262:	4b0e      	ldr	r3, [pc, #56]	@ (800429c <vPortValidateInterruptPriority+0x80>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	429a      	cmp	r2, r3
 8004268:	d90b      	bls.n	8004282 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	603b      	str	r3, [r7, #0]
    }
 800427c:	bf00      	nop
 800427e:	bf00      	nop
 8004280:	e7fd      	b.n	800427e <vPortValidateInterruptPriority+0x62>
    }
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	e000e3f0 	.word	0xe000e3f0
 8004294:	2000024c 	.word	0x2000024c
 8004298:	e000ed0c 	.word	0xe000ed0c
 800429c:	20000250 	.word	0x20000250

080042a0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b08a      	sub	sp, #40	@ 0x28
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80042a8:	2300      	movs	r3, #0
 80042aa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80042ac:	f7fe fcaa 	bl	8002c04 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80042b0:	4b54      	ldr	r3, [pc, #336]	@ (8004404 <pvPortMalloc+0x164>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80042b8:	f000 f90c 	bl	80044d4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d012      	beq.n	80042e8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80042c2:	2208      	movs	r2, #8
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f003 0307 	and.w	r3, r3, #7
 80042ca:	1ad3      	subs	r3, r2, r3
 80042cc:	3308      	adds	r3, #8
 80042ce:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	43db      	mvns	r3, r3
 80042d4:	687a      	ldr	r2, [r7, #4]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d804      	bhi.n	80042e4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	4413      	add	r3, r2
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	e001      	b.n	80042e8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 80042e4:	2300      	movs	r3, #0
 80042e6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	db71      	blt.n	80043d2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d06e      	beq.n	80043d2 <pvPortMalloc+0x132>
 80042f4:	4b44      	ldr	r3, [pc, #272]	@ (8004408 <pvPortMalloc+0x168>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	687a      	ldr	r2, [r7, #4]
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d869      	bhi.n	80043d2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80042fe:	4b43      	ldr	r3, [pc, #268]	@ (800440c <pvPortMalloc+0x16c>)
 8004300:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004302:	4b42      	ldr	r3, [pc, #264]	@ (800440c <pvPortMalloc+0x16c>)
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004308:	e004      	b.n	8004314 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800430a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800430c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800430e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004316:	685b      	ldr	r3, [r3, #4]
 8004318:	687a      	ldr	r2, [r7, #4]
 800431a:	429a      	cmp	r2, r3
 800431c:	d903      	bls.n	8004326 <pvPortMalloc+0x86>
 800431e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f1      	bne.n	800430a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004326:	4b37      	ldr	r3, [pc, #220]	@ (8004404 <pvPortMalloc+0x164>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432c:	429a      	cmp	r2, r3
 800432e:	d050      	beq.n	80043d2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004330:	6a3b      	ldr	r3, [r7, #32]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2208      	movs	r2, #8
 8004336:	4413      	add	r3, r2
 8004338:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	681a      	ldr	r2, [r3, #0]
 800433e:	6a3b      	ldr	r3, [r7, #32]
 8004340:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004344:	685a      	ldr	r2, [r3, #4]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	1ad2      	subs	r2, r2, r3
 800434a:	2308      	movs	r3, #8
 800434c:	005b      	lsls	r3, r3, #1
 800434e:	429a      	cmp	r2, r3
 8004350:	d920      	bls.n	8004394 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004352:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4413      	add	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f003 0307 	and.w	r3, r3, #7
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <pvPortMalloc+0xdc>
        __asm volatile
 8004364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004368:	f383 8811 	msr	BASEPRI, r3
 800436c:	f3bf 8f6f 	isb	sy
 8004370:	f3bf 8f4f 	dsb	sy
 8004374:	613b      	str	r3, [r7, #16]
    }
 8004376:	bf00      	nop
 8004378:	bf00      	nop
 800437a:	e7fd      	b.n	8004378 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800437c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800437e:	685a      	ldr	r2, [r3, #4]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	1ad2      	subs	r2, r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800438a:	687a      	ldr	r2, [r7, #4]
 800438c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800438e:	6978      	ldr	r0, [r7, #20]
 8004390:	f000 f8fc 	bl	800458c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004394:	4b1c      	ldr	r3, [pc, #112]	@ (8004408 <pvPortMalloc+0x168>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	4a1a      	ldr	r2, [pc, #104]	@ (8004408 <pvPortMalloc+0x168>)
 80043a0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80043a2:	4b19      	ldr	r3, [pc, #100]	@ (8004408 <pvPortMalloc+0x168>)
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b1a      	ldr	r3, [pc, #104]	@ (8004410 <pvPortMalloc+0x170>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	429a      	cmp	r2, r3
 80043ac:	d203      	bcs.n	80043b6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80043ae:	4b16      	ldr	r3, [pc, #88]	@ (8004408 <pvPortMalloc+0x168>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a17      	ldr	r2, [pc, #92]	@ (8004410 <pvPortMalloc+0x170>)
 80043b4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80043b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80043be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80043c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043c4:	2200      	movs	r2, #0
 80043c6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <pvPortMalloc+0x174>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	3301      	adds	r3, #1
 80043ce:	4a11      	ldr	r2, [pc, #68]	@ (8004414 <pvPortMalloc+0x174>)
 80043d0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80043d2:	f7fe fc25 	bl	8002c20 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	f003 0307 	and.w	r3, r3, #7
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d00b      	beq.n	80043f8 <pvPortMalloc+0x158>
        __asm volatile
 80043e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043e4:	f383 8811 	msr	BASEPRI, r3
 80043e8:	f3bf 8f6f 	isb	sy
 80043ec:	f3bf 8f4f 	dsb	sy
 80043f0:	60fb      	str	r3, [r7, #12]
    }
 80043f2:	bf00      	nop
 80043f4:	bf00      	nop
 80043f6:	e7fd      	b.n	80043f4 <pvPortMalloc+0x154>
    return pvReturn;
 80043f8:	69fb      	ldr	r3, [r7, #28]
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3728      	adds	r7, #40	@ 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	2004b25c 	.word	0x2004b25c
 8004408:	2004b260 	.word	0x2004b260
 800440c:	2004b254 	.word	0x2004b254
 8004410:	2004b264 	.word	0x2004b264
 8004414:	2004b268 	.word	0x2004b268

08004418 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004418:	b580      	push	{r7, lr}
 800441a:	b086      	sub	sp, #24
 800441c:	af00      	add	r7, sp, #0
 800441e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2b00      	cmp	r3, #0
 8004428:	d04b      	beq.n	80044c2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800442a:	2308      	movs	r3, #8
 800442c:	425b      	negs	r3, r3
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	4413      	add	r3, r2
 8004432:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	db0b      	blt.n	8004458 <vPortFree+0x40>
        __asm volatile
 8004440:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004444:	f383 8811 	msr	BASEPRI, r3
 8004448:	f3bf 8f6f 	isb	sy
 800444c:	f3bf 8f4f 	dsb	sy
 8004450:	60fb      	str	r3, [r7, #12]
    }
 8004452:	bf00      	nop
 8004454:	bf00      	nop
 8004456:	e7fd      	b.n	8004454 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d00b      	beq.n	8004478 <vPortFree+0x60>
        __asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	60bb      	str	r3, [r7, #8]
    }
 8004472:	bf00      	nop
 8004474:	bf00      	nop
 8004476:	e7fd      	b.n	8004474 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	0fdb      	lsrs	r3, r3, #31
 800447e:	f003 0301 	and.w	r3, r3, #1
 8004482:	b2db      	uxtb	r3, r3
 8004484:	2b00      	cmp	r3, #0
 8004486:	d01c      	beq.n	80044c2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d118      	bne.n	80044c2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004490:	693b      	ldr	r3, [r7, #16]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004498:	693b      	ldr	r3, [r7, #16]
 800449a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800449c:	f7fe fbb2 	bl	8002c04 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	685a      	ldr	r2, [r3, #4]
 80044a4:	4b09      	ldr	r3, [pc, #36]	@ (80044cc <vPortFree+0xb4>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4413      	add	r3, r2
 80044aa:	4a08      	ldr	r2, [pc, #32]	@ (80044cc <vPortFree+0xb4>)
 80044ac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ae:	6938      	ldr	r0, [r7, #16]
 80044b0:	f000 f86c 	bl	800458c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80044b4:	4b06      	ldr	r3, [pc, #24]	@ (80044d0 <vPortFree+0xb8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	3301      	adds	r3, #1
 80044ba:	4a05      	ldr	r2, [pc, #20]	@ (80044d0 <vPortFree+0xb8>)
 80044bc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80044be:	f7fe fbaf 	bl	8002c20 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80044c2:	bf00      	nop
 80044c4:	3718      	adds	r7, #24
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	2004b260 	.word	0x2004b260
 80044d0:	2004b26c 	.word	0x2004b26c

080044d4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 80044d4:	b480      	push	{r7}
 80044d6:	b085      	sub	sp, #20
 80044d8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80044da:	f44f 2396 	mov.w	r3, #307200	@ 0x4b000
 80044de:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044e0:	4b25      	ldr	r3, [pc, #148]	@ (8004578 <prvHeapInit+0xa4>)
 80044e2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0307 	and.w	r3, r3, #7
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00c      	beq.n	8004508 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	3307      	adds	r3, #7
 80044f2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 80044fc:	68ba      	ldr	r2, [r7, #8]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	4a1d      	ldr	r2, [pc, #116]	@ (8004578 <prvHeapInit+0xa4>)
 8004504:	4413      	add	r3, r2
 8004506:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800450c:	4a1b      	ldr	r2, [pc, #108]	@ (800457c <prvHeapInit+0xa8>)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004512:	4b1a      	ldr	r3, [pc, #104]	@ (800457c <prvHeapInit+0xa8>)
 8004514:	2200      	movs	r2, #0
 8004516:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	68ba      	ldr	r2, [r7, #8]
 800451c:	4413      	add	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004520:	2208      	movs	r2, #8
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	f023 0307 	bic.w	r3, r3, #7
 800452e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	4a13      	ldr	r2, [pc, #76]	@ (8004580 <prvHeapInit+0xac>)
 8004534:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004536:	4b12      	ldr	r3, [pc, #72]	@ (8004580 <prvHeapInit+0xac>)
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2200      	movs	r2, #0
 800453c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800453e:	4b10      	ldr	r3, [pc, #64]	@ (8004580 <prvHeapInit+0xac>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2200      	movs	r2, #0
 8004544:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	68fa      	ldr	r2, [r7, #12]
 800454e:	1ad2      	subs	r2, r2, r3
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004554:	4b0a      	ldr	r3, [pc, #40]	@ (8004580 <prvHeapInit+0xac>)
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	4a08      	ldr	r2, [pc, #32]	@ (8004584 <prvHeapInit+0xb0>)
 8004562:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	4a07      	ldr	r2, [pc, #28]	@ (8004588 <prvHeapInit+0xb4>)
 800456a:	6013      	str	r3, [r2, #0]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr
 8004578:	20000254 	.word	0x20000254
 800457c:	2004b254 	.word	0x2004b254
 8004580:	2004b25c 	.word	0x2004b25c
 8004584:	2004b264 	.word	0x2004b264
 8004588:	2004b260 	.word	0x2004b260

0800458c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800458c:	b480      	push	{r7}
 800458e:	b085      	sub	sp, #20
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004594:	4b28      	ldr	r3, [pc, #160]	@ (8004638 <prvInsertBlockIntoFreeList+0xac>)
 8004596:	60fb      	str	r3, [r7, #12]
 8004598:	e002      	b.n	80045a0 <prvInsertBlockIntoFreeList+0x14>
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	60fb      	str	r3, [r7, #12]
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d8f7      	bhi.n	800459a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	685b      	ldr	r3, [r3, #4]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	4413      	add	r3, r2
 80045b6:	687a      	ldr	r2, [r7, #4]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	d108      	bne.n	80045ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	685a      	ldr	r2, [r3, #4]
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	441a      	add	r2, r3
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	441a      	add	r2, r3
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	429a      	cmp	r2, r3
 80045e0:	d118      	bne.n	8004614 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	681a      	ldr	r2, [r3, #0]
 80045e6:	4b15      	ldr	r3, [pc, #84]	@ (800463c <prvInsertBlockIntoFreeList+0xb0>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d00d      	beq.n	800460a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	685a      	ldr	r2, [r3, #4]
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	441a      	add	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681a      	ldr	r2, [r3, #0]
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
 8004608:	e008      	b.n	800461c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800460a:	4b0c      	ldr	r3, [pc, #48]	@ (800463c <prvInsertBlockIntoFreeList+0xb0>)
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	e003      	b.n	800461c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	429a      	cmp	r2, r3
 8004622:	d002      	beq.n	800462a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	687a      	ldr	r2, [r7, #4]
 8004628:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800462a:	bf00      	nop
 800462c:	3714      	adds	r7, #20
 800462e:	46bd      	mov	sp, r7
 8004630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004634:	4770      	bx	lr
 8004636:	bf00      	nop
 8004638:	2004b254 	.word	0x2004b254
 800463c:	2004b25c 	.word	0x2004b25c

08004640 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004644:	4803      	ldr	r0, [pc, #12]	@ (8004654 <_cbSendSystemDesc+0x14>)
 8004646:	f001 fd45 	bl	80060d4 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800464a:	4803      	ldr	r0, [pc, #12]	@ (8004658 <_cbSendSystemDesc+0x18>)
 800464c:	f001 fd42 	bl	80060d4 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004650:	bf00      	nop
 8004652:	bd80      	pop	{r7, pc}
 8004654:	080070f8 	.word	0x080070f8
 8004658:	08007134 	.word	0x08007134

0800465c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800465c:	b580      	push	{r7, lr}
 800465e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004660:	4b06      	ldr	r3, [pc, #24]	@ (800467c <SEGGER_SYSVIEW_Conf+0x20>)
 8004662:	6818      	ldr	r0, [r3, #0]
 8004664:	4b05      	ldr	r3, [pc, #20]	@ (800467c <SEGGER_SYSVIEW_Conf+0x20>)
 8004666:	6819      	ldr	r1, [r3, #0]
 8004668:	4b05      	ldr	r3, [pc, #20]	@ (8004680 <SEGGER_SYSVIEW_Conf+0x24>)
 800466a:	4a06      	ldr	r2, [pc, #24]	@ (8004684 <SEGGER_SYSVIEW_Conf+0x28>)
 800466c:	f001 f8b0 	bl	80057d0 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004670:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004674:	f001 f8f0 	bl	8005858 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004678:	bf00      	nop
 800467a:	bd80      	pop	{r7, pc}
 800467c:	20000000 	.word	0x20000000
 8004680:	08004641 	.word	0x08004641
 8004684:	080071d4 	.word	0x080071d4

08004688 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800468a:	b085      	sub	sp, #20
 800468c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800468e:	2300      	movs	r3, #0
 8004690:	607b      	str	r3, [r7, #4]
 8004692:	e033      	b.n	80046fc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004694:	491e      	ldr	r1, [pc, #120]	@ (8004710 <_cbSendTaskList+0x88>)
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	4613      	mov	r3, r2
 800469a:	009b      	lsls	r3, r3, #2
 800469c:	4413      	add	r3, r2
 800469e:	009b      	lsls	r3, r3, #2
 80046a0:	440b      	add	r3, r1
 80046a2:	6818      	ldr	r0, [r3, #0]
 80046a4:	491a      	ldr	r1, [pc, #104]	@ (8004710 <_cbSendTaskList+0x88>)
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	4613      	mov	r3, r2
 80046aa:	009b      	lsls	r3, r3, #2
 80046ac:	4413      	add	r3, r2
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	3304      	adds	r3, #4
 80046b4:	6819      	ldr	r1, [r3, #0]
 80046b6:	4c16      	ldr	r4, [pc, #88]	@ (8004710 <_cbSendTaskList+0x88>)
 80046b8:	687a      	ldr	r2, [r7, #4]
 80046ba:	4613      	mov	r3, r2
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	4413      	add	r3, r2
 80046c0:	009b      	lsls	r3, r3, #2
 80046c2:	4423      	add	r3, r4
 80046c4:	3308      	adds	r3, #8
 80046c6:	681c      	ldr	r4, [r3, #0]
 80046c8:	4d11      	ldr	r5, [pc, #68]	@ (8004710 <_cbSendTaskList+0x88>)
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	4613      	mov	r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	4413      	add	r3, r2
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	442b      	add	r3, r5
 80046d6:	330c      	adds	r3, #12
 80046d8:	681d      	ldr	r5, [r3, #0]
 80046da:	4e0d      	ldr	r6, [pc, #52]	@ (8004710 <_cbSendTaskList+0x88>)
 80046dc:	687a      	ldr	r2, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	009b      	lsls	r3, r3, #2
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	4433      	add	r3, r6
 80046e8:	3310      	adds	r3, #16
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	9300      	str	r3, [sp, #0]
 80046ee:	462b      	mov	r3, r5
 80046f0:	4622      	mov	r2, r4
 80046f2:	f000 f8bd 	bl	8004870 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	3301      	adds	r3, #1
 80046fa:	607b      	str	r3, [r7, #4]
 80046fc:	4b05      	ldr	r3, [pc, #20]	@ (8004714 <_cbSendTaskList+0x8c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	429a      	cmp	r2, r3
 8004704:	d3c6      	bcc.n	8004694 <_cbSendTaskList+0xc>
  }
}
 8004706:	bf00      	nop
 8004708:	bf00      	nop
 800470a:	370c      	adds	r7, #12
 800470c:	46bd      	mov	sp, r7
 800470e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004710:	2004b270 	.word	0x2004b270
 8004714:	2004b310 	.word	0x2004b310

08004718 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004718:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800471c:	b082      	sub	sp, #8
 800471e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004720:	f7fe fb8e 	bl	8002e40 <xTaskGetTickCountFromISR>
 8004724:	4603      	mov	r3, r0
 8004726:	2200      	movs	r2, #0
 8004728:	469a      	mov	sl, r3
 800472a:	4693      	mov	fp, r2
 800472c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004730:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004734:	4602      	mov	r2, r0
 8004736:	460b      	mov	r3, r1
 8004738:	f04f 0a00 	mov.w	sl, #0
 800473c:	f04f 0b00 	mov.w	fp, #0
 8004740:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004744:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004748:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800474c:	4652      	mov	r2, sl
 800474e:	465b      	mov	r3, fp
 8004750:	1a14      	subs	r4, r2, r0
 8004752:	eb63 0501 	sbc.w	r5, r3, r1
 8004756:	f04f 0200 	mov.w	r2, #0
 800475a:	f04f 0300 	mov.w	r3, #0
 800475e:	00ab      	lsls	r3, r5, #2
 8004760:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004764:	00a2      	lsls	r2, r4, #2
 8004766:	4614      	mov	r4, r2
 8004768:	461d      	mov	r5, r3
 800476a:	eb14 0800 	adds.w	r8, r4, r0
 800476e:	eb45 0901 	adc.w	r9, r5, r1
 8004772:	f04f 0200 	mov.w	r2, #0
 8004776:	f04f 0300 	mov.w	r3, #0
 800477a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800477e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004782:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004786:	4690      	mov	r8, r2
 8004788:	4699      	mov	r9, r3
 800478a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800478e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004792:	4610      	mov	r0, r2
 8004794:	4619      	mov	r1, r3
 8004796:	3708      	adds	r7, #8
 8004798:	46bd      	mov	sp, r7
 800479a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080047a0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af02      	add	r7, sp, #8
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	607a      	str	r2, [r7, #4]
 80047ac:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80047ae:	2205      	movs	r2, #5
 80047b0:	492b      	ldr	r1, [pc, #172]	@ (8004860 <SYSVIEW_AddTask+0xc0>)
 80047b2:	68b8      	ldr	r0, [r7, #8]
 80047b4:	f001 ffd0 	bl	8006758 <memcmp>
 80047b8:	4603      	mov	r3, r0
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d04b      	beq.n	8004856 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80047be:	4b29      	ldr	r3, [pc, #164]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b07      	cmp	r3, #7
 80047c4:	d903      	bls.n	80047ce <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80047c6:	4828      	ldr	r0, [pc, #160]	@ (8004868 <SYSVIEW_AddTask+0xc8>)
 80047c8:	f001 ff36 	bl	8006638 <SEGGER_SYSVIEW_Warn>
    return;
 80047cc:	e044      	b.n	8004858 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80047ce:	4b25      	ldr	r3, [pc, #148]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 80047d0:	681a      	ldr	r2, [r3, #0]
 80047d2:	4926      	ldr	r1, [pc, #152]	@ (800486c <SYSVIEW_AddTask+0xcc>)
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	440b      	add	r3, r1
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80047e2:	4b20      	ldr	r3, [pc, #128]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 80047e4:	681a      	ldr	r2, [r3, #0]
 80047e6:	4921      	ldr	r1, [pc, #132]	@ (800486c <SYSVIEW_AddTask+0xcc>)
 80047e8:	4613      	mov	r3, r2
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	009b      	lsls	r3, r3, #2
 80047f0:	440b      	add	r3, r1
 80047f2:	3304      	adds	r3, #4
 80047f4:	68ba      	ldr	r2, [r7, #8]
 80047f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80047f8:	4b1a      	ldr	r3, [pc, #104]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	491b      	ldr	r1, [pc, #108]	@ (800486c <SYSVIEW_AddTask+0xcc>)
 80047fe:	4613      	mov	r3, r2
 8004800:	009b      	lsls	r3, r3, #2
 8004802:	4413      	add	r3, r2
 8004804:	009b      	lsls	r3, r3, #2
 8004806:	440b      	add	r3, r1
 8004808:	3308      	adds	r3, #8
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800480e:	4b15      	ldr	r3, [pc, #84]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	4916      	ldr	r1, [pc, #88]	@ (800486c <SYSVIEW_AddTask+0xcc>)
 8004814:	4613      	mov	r3, r2
 8004816:	009b      	lsls	r3, r3, #2
 8004818:	4413      	add	r3, r2
 800481a:	009b      	lsls	r3, r3, #2
 800481c:	440b      	add	r3, r1
 800481e:	330c      	adds	r3, #12
 8004820:	683a      	ldr	r2, [r7, #0]
 8004822:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004824:	4b0f      	ldr	r3, [pc, #60]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 8004826:	681a      	ldr	r2, [r3, #0]
 8004828:	4910      	ldr	r1, [pc, #64]	@ (800486c <SYSVIEW_AddTask+0xcc>)
 800482a:	4613      	mov	r3, r2
 800482c:	009b      	lsls	r3, r3, #2
 800482e:	4413      	add	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	440b      	add	r3, r1
 8004834:	3310      	adds	r3, #16
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800483a:	4b0a      	ldr	r3, [pc, #40]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	3301      	adds	r3, #1
 8004840:	4a08      	ldr	r2, [pc, #32]	@ (8004864 <SYSVIEW_AddTask+0xc4>)
 8004842:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	9300      	str	r3, [sp, #0]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	687a      	ldr	r2, [r7, #4]
 800484c:	68b9      	ldr	r1, [r7, #8]
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f000 f80e 	bl	8004870 <SYSVIEW_SendTaskInfo>
 8004854:	e000      	b.n	8004858 <SYSVIEW_AddTask+0xb8>
    return;
 8004856:	bf00      	nop

}
 8004858:	3710      	adds	r7, #16
 800485a:	46bd      	mov	sp, r7
 800485c:	bd80      	pop	{r7, pc}
 800485e:	bf00      	nop
 8004860:	08007144 	.word	0x08007144
 8004864:	2004b310 	.word	0x2004b310
 8004868:	0800714c 	.word	0x0800714c
 800486c:	2004b270 	.word	0x2004b270

08004870 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b08a      	sub	sp, #40	@ 0x28
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
 800487c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800487e:	f107 0314 	add.w	r3, r7, #20
 8004882:	2214      	movs	r2, #20
 8004884:	2100      	movs	r1, #0
 8004886:	4618      	mov	r0, r3
 8004888:	f001 ff76 	bl	8006778 <memset>
  TaskInfo.TaskID     = TaskID;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8004890:	68bb      	ldr	r3, [r7, #8]
 8004892:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004898:	683b      	ldr	r3, [r7, #0]
 800489a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800489c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800489e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80048a0:	f107 0314 	add.w	r3, r7, #20
 80048a4:	4618      	mov	r0, r3
 80048a6:	f001 fb1d 	bl	8005ee4 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80048aa:	bf00      	nop
 80048ac:	3728      	adds	r7, #40	@ 0x28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}
	...

080048b4 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 80048b4:	b480      	push	{r7}
 80048b6:	b083      	sub	sp, #12
 80048b8:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80048ba:	4b24      	ldr	r3, [pc, #144]	@ (800494c <_DoInit+0x98>)
 80048bc:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2203      	movs	r2, #3
 80048c2:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2203      	movs	r2, #3
 80048c8:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4a20      	ldr	r2, [pc, #128]	@ (8004950 <_DoInit+0x9c>)
 80048ce:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	4a20      	ldr	r2, [pc, #128]	@ (8004954 <_DoInit+0xa0>)
 80048d4:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80048dc:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	4a17      	ldr	r2, [pc, #92]	@ (8004950 <_DoInit+0x9c>)
 80048f4:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	4a17      	ldr	r2, [pc, #92]	@ (8004958 <_DoInit+0xa4>)
 80048fa:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2210      	movs	r2, #16
 8004900:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2200      	movs	r2, #0
 800490c:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3307      	adds	r3, #7
 8004918:	4a10      	ldr	r2, [pc, #64]	@ (800495c <_DoInit+0xa8>)
 800491a:	6810      	ldr	r0, [r2, #0]
 800491c:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800491e:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a0e      	ldr	r2, [pc, #56]	@ (8004960 <_DoInit+0xac>)
 8004926:	6810      	ldr	r0, [r2, #0]
 8004928:	6018      	str	r0, [r3, #0]
 800492a:	8891      	ldrh	r1, [r2, #4]
 800492c:	7992      	ldrb	r2, [r2, #6]
 800492e:	8099      	strh	r1, [r3, #4]
 8004930:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004932:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2220      	movs	r2, #32
 800493a:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 800493c:	f3bf 8f5f 	dmb	sy
}
 8004940:	bf00      	nop
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	2004b314 	.word	0x2004b314
 8004950:	0800719c 	.word	0x0800719c
 8004954:	2004b3bc 	.word	0x2004b3bc
 8004958:	2004b7bc 	.word	0x2004b7bc
 800495c:	080071a8 	.word	0x080071a8
 8004960:	080071ac 	.word	0x080071ac

08004964 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004964:	b580      	push	{r7, lr}
 8004966:	b08c      	sub	sp, #48	@ 0x30
 8004968:	af00      	add	r7, sp, #0
 800496a:	60f8      	str	r0, [r7, #12]
 800496c:	60b9      	str	r1, [r7, #8]
 800496e:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8004970:	4b3e      	ldr	r3, [pc, #248]	@ (8004a6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004972:	623b      	str	r3, [r7, #32]
 8004974:	6a3b      	ldr	r3, [r7, #32]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <SEGGER_RTT_ReadNoLock+0x1e>
 800497e:	f7ff ff99 	bl	80048b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004982:	68fa      	ldr	r2, [r7, #12]
 8004984:	4613      	mov	r3, r2
 8004986:	005b      	lsls	r3, r3, #1
 8004988:	4413      	add	r3, r2
 800498a:	00db      	lsls	r3, r3, #3
 800498c:	3360      	adds	r3, #96	@ 0x60
 800498e:	4a37      	ldr	r2, [pc, #220]	@ (8004a6c <SEGGER_RTT_ReadNoLock+0x108>)
 8004990:	4413      	add	r3, r2
 8004992:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004998:	69fb      	ldr	r3, [r7, #28]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800499e:	69fb      	ldr	r3, [r7, #28]
 80049a0:	68db      	ldr	r3, [r3, #12]
 80049a2:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 80049a4:	2300      	movs	r3, #0
 80049a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 80049a8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	429a      	cmp	r2, r3
 80049ae:	d92b      	bls.n	8004a08 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 80049b0:	69fb      	ldr	r3, [r7, #28]
 80049b2:	689a      	ldr	r2, [r3, #8]
 80049b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049b6:	1ad3      	subs	r3, r2, r3
 80049b8:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4293      	cmp	r3, r2
 80049c0:	bf28      	it	cs
 80049c2:	4613      	movcs	r3, r2
 80049c4:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80049c6:	69fb      	ldr	r3, [r7, #28]
 80049c8:	685a      	ldr	r2, [r3, #4]
 80049ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049cc:	4413      	add	r3, r2
 80049ce:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80049d0:	697a      	ldr	r2, [r7, #20]
 80049d2:	6939      	ldr	r1, [r7, #16]
 80049d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80049d6:	f001 fefd 	bl	80067d4 <memcpy>
    NumBytesRead += NumBytesRem;
 80049da:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049dc:	697b      	ldr	r3, [r7, #20]
 80049de:	4413      	add	r3, r2
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80049e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	4413      	add	r3, r2
 80049e8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80049f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80049f4:	697b      	ldr	r3, [r7, #20]
 80049f6:	4413      	add	r3, r2
 80049f8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a00:	429a      	cmp	r2, r3
 8004a02:	d101      	bne.n	8004a08 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004a10:	697a      	ldr	r2, [r7, #20]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4293      	cmp	r3, r2
 8004a16:	bf28      	it	cs
 8004a18:	4613      	movcs	r3, r2
 8004a1a:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d019      	beq.n	8004a56 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a28:	4413      	add	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8004a2c:	697a      	ldr	r2, [r7, #20]
 8004a2e:	6939      	ldr	r1, [r7, #16]
 8004a30:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004a32:	f001 fecf 	bl	80067d4 <memcpy>
    NumBytesRead += NumBytesRem;
 8004a36:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8004a3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	4413      	add	r3, r2
 8004a44:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	697b      	ldr	r3, [r7, #20]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8004a4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	4413      	add	r3, r2
 8004a54:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004a56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004a5c:	69fb      	ldr	r3, [r7, #28]
 8004a5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a60:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8004a62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3730      	adds	r7, #48	@ 0x30
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}
 8004a6c:	2004b314 	.word	0x2004b314

08004a70 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b088      	sub	sp, #32
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
 8004a7c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004a7e:	4b3d      	ldr	r3, [pc, #244]	@ (8004b74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004a80:	61bb      	str	r3, [r7, #24]
 8004a82:	69bb      	ldr	r3, [r7, #24]
 8004a84:	781b      	ldrb	r3, [r3, #0]
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d101      	bne.n	8004a90 <SEGGER_RTT_AllocUpBuffer+0x20>
 8004a8c:	f7ff ff12 	bl	80048b4 <_DoInit>
  SEGGER_RTT_LOCK();
 8004a90:	f3ef 8311 	mrs	r3, BASEPRI
 8004a94:	f04f 0120 	mov.w	r1, #32
 8004a98:	f381 8811 	msr	BASEPRI, r1
 8004a9c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004a9e:	4b35      	ldr	r3, [pc, #212]	@ (8004b74 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8004aa0:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8004aa6:	6939      	ldr	r1, [r7, #16]
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	1c5a      	adds	r2, r3, #1
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	00db      	lsls	r3, r3, #3
 8004ab4:	440b      	add	r3, r1
 8004ab6:	3304      	adds	r3, #4
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d008      	beq.n	8004ad0 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8004abe:	69fb      	ldr	r3, [r7, #28]
 8004ac0:	3301      	adds	r3, #1
 8004ac2:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	691b      	ldr	r3, [r3, #16]
 8004ac8:	69fa      	ldr	r2, [r7, #28]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	dbeb      	blt.n	8004aa6 <SEGGER_RTT_AllocUpBuffer+0x36>
 8004ace:	e000      	b.n	8004ad2 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8004ad0:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	691b      	ldr	r3, [r3, #16]
 8004ad6:	69fa      	ldr	r2, [r7, #28]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	da3f      	bge.n	8004b5c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8004adc:	6939      	ldr	r1, [r7, #16]
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	1c5a      	adds	r2, r3, #1
 8004ae2:	4613      	mov	r3, r2
 8004ae4:	005b      	lsls	r3, r3, #1
 8004ae6:	4413      	add	r3, r2
 8004ae8:	00db      	lsls	r3, r3, #3
 8004aea:	440b      	add	r3, r1
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8004af0:	6939      	ldr	r1, [r7, #16]
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	1c5a      	adds	r2, r3, #1
 8004af6:	4613      	mov	r3, r2
 8004af8:	005b      	lsls	r3, r3, #1
 8004afa:	4413      	add	r3, r2
 8004afc:	00db      	lsls	r3, r3, #3
 8004afe:	440b      	add	r3, r1
 8004b00:	3304      	adds	r3, #4
 8004b02:	68ba      	ldr	r2, [r7, #8]
 8004b04:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8004b06:	6939      	ldr	r1, [r7, #16]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	005b      	lsls	r3, r3, #1
 8004b0e:	4413      	add	r3, r2
 8004b10:	00db      	lsls	r3, r3, #3
 8004b12:	440b      	add	r3, r1
 8004b14:	3320      	adds	r3, #32
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8004b1a:	6939      	ldr	r1, [r7, #16]
 8004b1c:	69fa      	ldr	r2, [r7, #28]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	00db      	lsls	r3, r3, #3
 8004b26:	440b      	add	r3, r1
 8004b28:	3328      	adds	r3, #40	@ 0x28
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8004b2e:	6939      	ldr	r1, [r7, #16]
 8004b30:	69fa      	ldr	r2, [r7, #28]
 8004b32:	4613      	mov	r3, r2
 8004b34:	005b      	lsls	r3, r3, #1
 8004b36:	4413      	add	r3, r2
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	440b      	add	r3, r1
 8004b3c:	3324      	adds	r3, #36	@ 0x24
 8004b3e:	2200      	movs	r2, #0
 8004b40:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8004b42:	6939      	ldr	r1, [r7, #16]
 8004b44:	69fa      	ldr	r2, [r7, #28]
 8004b46:	4613      	mov	r3, r2
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	4413      	add	r3, r2
 8004b4c:	00db      	lsls	r3, r3, #3
 8004b4e:	440b      	add	r3, r1
 8004b50:	332c      	adds	r3, #44	@ 0x2c
 8004b52:	683a      	ldr	r2, [r7, #0]
 8004b54:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004b56:	f3bf 8f5f 	dmb	sy
 8004b5a:	e002      	b.n	8004b62 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8004b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8004b60:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8004b62:	697b      	ldr	r3, [r7, #20]
 8004b64:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8004b68:	69fb      	ldr	r3, [r7, #28]
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3720      	adds	r7, #32
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	2004b314 	.word	0x2004b314

08004b78 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b088      	sub	sp, #32
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	60b9      	str	r1, [r7, #8]
 8004b82:	607a      	str	r2, [r7, #4]
 8004b84:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8004b86:	4b33      	ldr	r3, [pc, #204]	@ (8004c54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004b88:	61bb      	str	r3, [r7, #24]
 8004b8a:	69bb      	ldr	r3, [r7, #24]
 8004b8c:	781b      	ldrb	r3, [r3, #0]
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d101      	bne.n	8004b98 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8004b94:	f7ff fe8e 	bl	80048b4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8004b98:	4b2e      	ldr	r3, [pc, #184]	@ (8004c54 <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8004b9a:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	695b      	ldr	r3, [r3, #20]
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4293      	cmp	r3, r2
 8004ba6:	d24d      	bcs.n	8004c44 <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8004ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8004bac:	f04f 0120 	mov.w	r1, #32
 8004bb0:	f381 8811 	msr	BASEPRI, r1
 8004bb4:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d031      	beq.n	8004c20 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8004bbc:	6979      	ldr	r1, [r7, #20]
 8004bbe:	68fa      	ldr	r2, [r7, #12]
 8004bc0:	4613      	mov	r3, r2
 8004bc2:	005b      	lsls	r3, r3, #1
 8004bc4:	4413      	add	r3, r2
 8004bc6:	00db      	lsls	r3, r3, #3
 8004bc8:	440b      	add	r3, r1
 8004bca:	3360      	adds	r3, #96	@ 0x60
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8004bd0:	6979      	ldr	r1, [r7, #20]
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	00db      	lsls	r3, r3, #3
 8004bdc:	440b      	add	r3, r1
 8004bde:	3364      	adds	r3, #100	@ 0x64
 8004be0:	687a      	ldr	r2, [r7, #4]
 8004be2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 8004be4:	6979      	ldr	r1, [r7, #20]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	4613      	mov	r3, r2
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	4413      	add	r3, r2
 8004bee:	00db      	lsls	r3, r3, #3
 8004bf0:	440b      	add	r3, r1
 8004bf2:	3368      	adds	r3, #104	@ 0x68
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8004bf8:	6979      	ldr	r1, [r7, #20]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	4613      	mov	r3, r2
 8004bfe:	005b      	lsls	r3, r3, #1
 8004c00:	4413      	add	r3, r2
 8004c02:	00db      	lsls	r3, r3, #3
 8004c04:	440b      	add	r3, r1
 8004c06:	3370      	adds	r3, #112	@ 0x70
 8004c08:	2200      	movs	r2, #0
 8004c0a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 8004c0c:	6979      	ldr	r1, [r7, #20]
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	4613      	mov	r3, r2
 8004c12:	005b      	lsls	r3, r3, #1
 8004c14:	4413      	add	r3, r2
 8004c16:	00db      	lsls	r3, r3, #3
 8004c18:	440b      	add	r3, r1
 8004c1a:	336c      	adds	r3, #108	@ 0x6c
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 8004c20:	6979      	ldr	r1, [r7, #20]
 8004c22:	68fa      	ldr	r2, [r7, #12]
 8004c24:	4613      	mov	r3, r2
 8004c26:	005b      	lsls	r3, r3, #1
 8004c28:	4413      	add	r3, r2
 8004c2a:	00db      	lsls	r3, r3, #3
 8004c2c:	440b      	add	r3, r1
 8004c2e:	3374      	adds	r3, #116	@ 0x74
 8004c30:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004c32:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8004c34:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8004c38:	693b      	ldr	r3, [r7, #16]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8004c3e:	2300      	movs	r3, #0
 8004c40:	61fb      	str	r3, [r7, #28]
 8004c42:	e002      	b.n	8004c4a <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295
 8004c48:	61fb      	str	r3, [r7, #28]
  }
  return r;
 8004c4a:	69fb      	ldr	r3, [r7, #28]
}
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	3720      	adds	r7, #32
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}
 8004c54:	2004b314 	.word	0x2004b314

08004c58 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8004c58:	b480      	push	{r7}
 8004c5a:	b087      	sub	sp, #28
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	60f8      	str	r0, [r7, #12]
 8004c60:	60b9      	str	r1, [r7, #8]
 8004c62:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004c64:	2300      	movs	r3, #0
 8004c66:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c68:	e002      	b.n	8004c70 <_EncodeStr+0x18>
    Len++;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	3301      	adds	r3, #1
 8004c6e:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	4413      	add	r3, r2
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1f6      	bne.n	8004c6a <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004c7c:	693a      	ldr	r2, [r7, #16]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	429a      	cmp	r2, r3
 8004c82:	d901      	bls.n	8004c88 <_EncodeStr+0x30>
    Len = Limit;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8004c88:	693b      	ldr	r3, [r7, #16]
 8004c8a:	2bfe      	cmp	r3, #254	@ 0xfe
 8004c8c:	d806      	bhi.n	8004c9c <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	60fa      	str	r2, [r7, #12]
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	b2d2      	uxtb	r2, r2
 8004c98:	701a      	strb	r2, [r3, #0]
 8004c9a:	e011      	b.n	8004cc0 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	1c5a      	adds	r2, r3, #1
 8004ca0:	60fa      	str	r2, [r7, #12]
 8004ca2:	22ff      	movs	r2, #255	@ 0xff
 8004ca4:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	1c5a      	adds	r2, r3, #1
 8004caa:	60fa      	str	r2, [r7, #12]
 8004cac:	693a      	ldr	r2, [r7, #16]
 8004cae:	b2d2      	uxtb	r2, r2
 8004cb0:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	0a19      	lsrs	r1, r3, #8
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	1c5a      	adds	r2, r3, #1
 8004cba:	60fa      	str	r2, [r7, #12]
 8004cbc:	b2ca      	uxtb	r2, r1
 8004cbe:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cc4:	e00a      	b.n	8004cdc <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	1c53      	adds	r3, r2, #1
 8004cca:	60bb      	str	r3, [r7, #8]
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	60f9      	str	r1, [r7, #12]
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
    n++;
 8004cd6:	697b      	ldr	r3, [r7, #20]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	693b      	ldr	r3, [r7, #16]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d3f0      	bcc.n	8004cc6 <_EncodeStr+0x6e>
  }
  return pPayload;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
}
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	371c      	adds	r7, #28
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr

08004cf2 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8004cf2:	b480      	push	{r7}
 8004cf4:	b083      	sub	sp, #12
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	3304      	adds	r3, #4
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	370c      	adds	r7, #12
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
	...

08004d0c <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d12:	4b35      	ldr	r3, [pc, #212]	@ (8004de8 <_HandleIncomingPacket+0xdc>)
 8004d14:	7e1b      	ldrb	r3, [r3, #24]
 8004d16:	4618      	mov	r0, r3
 8004d18:	1cfb      	adds	r3, r7, #3
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	f7ff fe21 	bl	8004964 <SEGGER_RTT_ReadNoLock>
 8004d22:	4603      	mov	r3, r0
 8004d24:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	dd59      	ble.n	8004de0 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004d2c:	78fb      	ldrb	r3, [r7, #3]
 8004d2e:	2b80      	cmp	r3, #128	@ 0x80
 8004d30:	d032      	beq.n	8004d98 <_HandleIncomingPacket+0x8c>
 8004d32:	2b80      	cmp	r3, #128	@ 0x80
 8004d34:	dc42      	bgt.n	8004dbc <_HandleIncomingPacket+0xb0>
 8004d36:	2b07      	cmp	r3, #7
 8004d38:	dc16      	bgt.n	8004d68 <_HandleIncomingPacket+0x5c>
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	dd3e      	ble.n	8004dbc <_HandleIncomingPacket+0xb0>
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	2b06      	cmp	r3, #6
 8004d42:	d83b      	bhi.n	8004dbc <_HandleIncomingPacket+0xb0>
 8004d44:	a201      	add	r2, pc, #4	@ (adr r2, 8004d4c <_HandleIncomingPacket+0x40>)
 8004d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d4a:	bf00      	nop
 8004d4c:	08004d6f 	.word	0x08004d6f
 8004d50:	08004d75 	.word	0x08004d75
 8004d54:	08004d7b 	.word	0x08004d7b
 8004d58:	08004d81 	.word	0x08004d81
 8004d5c:	08004d87 	.word	0x08004d87
 8004d60:	08004d8d 	.word	0x08004d8d
 8004d64:	08004d93 	.word	0x08004d93
 8004d68:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d6a:	d034      	beq.n	8004dd6 <_HandleIncomingPacket+0xca>
 8004d6c:	e026      	b.n	8004dbc <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004d6e:	f000 ff3f 	bl	8005bf0 <SEGGER_SYSVIEW_Start>
      break;
 8004d72:	e035      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004d74:	f000 fff6 	bl	8005d64 <SEGGER_SYSVIEW_Stop>
      break;
 8004d78:	e032      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8004d7a:	f001 f9cf 	bl	800611c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004d7e:	e02f      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004d80:	f001 f994 	bl	80060ac <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004d84:	e02c      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8004d86:	f001 f813 	bl	8005db0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8004d8a:	e029      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004d8c:	f001 fc02 	bl	8006594 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004d90:	e026      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004d92:	f001 fbe1 	bl	8006558 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8004d96:	e023      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004d98:	4b13      	ldr	r3, [pc, #76]	@ (8004de8 <_HandleIncomingPacket+0xdc>)
 8004d9a:	7e1b      	ldrb	r3, [r3, #24]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	1cfb      	adds	r3, r7, #3
 8004da0:	2201      	movs	r2, #1
 8004da2:	4619      	mov	r1, r3
 8004da4:	f7ff fdde 	bl	8004964 <SEGGER_RTT_ReadNoLock>
 8004da8:	4603      	mov	r3, r0
 8004daa:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	dd13      	ble.n	8004dda <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004db2:	78fb      	ldrb	r3, [r7, #3]
 8004db4:	4618      	mov	r0, r3
 8004db6:	f001 fb4f 	bl	8006458 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8004dba:	e00e      	b.n	8004dda <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8004dbc:	78fb      	ldrb	r3, [r7, #3]
 8004dbe:	b25b      	sxtb	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	da0c      	bge.n	8004dde <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8004dc4:	4b08      	ldr	r3, [pc, #32]	@ (8004de8 <_HandleIncomingPacket+0xdc>)
 8004dc6:	7e1b      	ldrb	r3, [r3, #24]
 8004dc8:	4618      	mov	r0, r3
 8004dca:	1cfb      	adds	r3, r7, #3
 8004dcc:	2201      	movs	r2, #1
 8004dce:	4619      	mov	r1, r3
 8004dd0:	f7ff fdc8 	bl	8004964 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8004dd4:	e003      	b.n	8004dde <_HandleIncomingPacket+0xd2>
      break;
 8004dd6:	bf00      	nop
 8004dd8:	e002      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
      break;
 8004dda:	bf00      	nop
 8004ddc:	e000      	b.n	8004de0 <_HandleIncomingPacket+0xd4>
      break;
 8004dde:	bf00      	nop
    }
  }
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	2004c7d4 	.word	0x2004c7d4

08004dec <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b08c      	sub	sp, #48	@ 0x30
 8004df0:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8004df2:	2301      	movs	r3, #1
 8004df4:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8004df6:	1d3b      	adds	r3, r7, #4
 8004df8:	3301      	adds	r3, #1
 8004dfa:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8004dfc:	69fb      	ldr	r3, [r7, #28]
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e00:	4b31      	ldr	r3, [pc, #196]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e06:	e00b      	b.n	8004e20 <_TrySendOverflowPacket+0x34>
 8004e08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e0a:	b2da      	uxtb	r2, r3
 8004e0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e0e:	1c59      	adds	r1, r3, #1
 8004e10:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e12:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e16:	b2d2      	uxtb	r2, r2
 8004e18:	701a      	strb	r2, [r3, #0]
 8004e1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e1c:	09db      	lsrs	r3, r3, #7
 8004e1e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e22:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e24:	d8f0      	bhi.n	8004e08 <_TrySendOverflowPacket+0x1c>
 8004e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e28:	1c5a      	adds	r2, r3, #1
 8004e2a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e2c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e2e:	b2d2      	uxtb	r2, r2
 8004e30:	701a      	strb	r2, [r3, #0]
 8004e32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e34:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004e36:	4b25      	ldr	r3, [pc, #148]	@ (8004ecc <_TrySendOverflowPacket+0xe0>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004e3c:	4b22      	ldr	r3, [pc, #136]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e4a:	697b      	ldr	r3, [r7, #20]
 8004e4c:	623b      	str	r3, [r7, #32]
 8004e4e:	e00b      	b.n	8004e68 <_TrySendOverflowPacket+0x7c>
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	b2da      	uxtb	r2, r3
 8004e54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e56:	1c59      	adds	r1, r3, #1
 8004e58:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	09db      	lsrs	r3, r3, #7
 8004e66:	623b      	str	r3, [r7, #32]
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e6c:	d8f0      	bhi.n	8004e50 <_TrySendOverflowPacket+0x64>
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	1c5a      	adds	r2, r3, #1
 8004e72:	627a      	str	r2, [r7, #36]	@ 0x24
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	b2d2      	uxtb	r2, r2
 8004e78:	701a      	strb	r2, [r3, #0]
 8004e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e7c:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004e7e:	4b12      	ldr	r3, [pc, #72]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004e80:	785b      	ldrb	r3, [r3, #1]
 8004e82:	4618      	mov	r0, r3
 8004e84:	1d3b      	adds	r3, r7, #4
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	1d3b      	adds	r3, r7, #4
 8004e8e:	4619      	mov	r1, r3
 8004e90:	f7fb f9c6 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004e94:	4603      	mov	r3, r0
 8004e96:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004e98:	693b      	ldr	r3, [r7, #16]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d009      	beq.n	8004eb2 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004e9e:	4a0a      	ldr	r2, [pc, #40]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004ea0:	69bb      	ldr	r3, [r7, #24]
 8004ea2:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004ea4:	4b08      	ldr	r3, [pc, #32]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	3b01      	subs	r3, #1
 8004eaa:	b2da      	uxtb	r2, r3
 8004eac:	4b06      	ldr	r3, [pc, #24]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004eae:	701a      	strb	r2, [r3, #0]
 8004eb0:	e004      	b.n	8004ebc <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004eb2:	4b05      	ldr	r3, [pc, #20]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004eb4:	695b      	ldr	r3, [r3, #20]
 8004eb6:	3301      	adds	r3, #1
 8004eb8:	4a03      	ldr	r2, [pc, #12]	@ (8004ec8 <_TrySendOverflowPacket+0xdc>)
 8004eba:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004ebc:	693b      	ldr	r3, [r7, #16]
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3730      	adds	r7, #48	@ 0x30
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	2004c7d4 	.word	0x2004c7d4
 8004ecc:	e0001004 	.word	0xe0001004

08004ed0 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b08a      	sub	sp, #40	@ 0x28
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	60f8      	str	r0, [r7, #12]
 8004ed8:	60b9      	str	r1, [r7, #8]
 8004eda:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004edc:	4b6c      	ldr	r3, [pc, #432]	@ (8005090 <_SendPacket+0x1c0>)
 8004ede:	781b      	ldrb	r3, [r3, #0]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d010      	beq.n	8004f06 <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8005090 <_SendPacket+0x1c0>)
 8004ee6:	781b      	ldrb	r3, [r3, #0]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80a3 	beq.w	8005034 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004eee:	4b68      	ldr	r3, [pc, #416]	@ (8005090 <_SendPacket+0x1c0>)
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	2b02      	cmp	r3, #2
 8004ef4:	d109      	bne.n	8004f0a <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ef6:	f7ff ff79 	bl	8004dec <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004efa:	4b65      	ldr	r3, [pc, #404]	@ (8005090 <_SendPacket+0x1c0>)
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	2b01      	cmp	r3, #1
 8004f00:	f040 809a 	bne.w	8005038 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004f04:	e001      	b.n	8004f0a <_SendPacket+0x3a>
    goto Send;
 8004f06:	bf00      	nop
 8004f08:	e000      	b.n	8004f0c <_SendPacket+0x3c>
Send:
 8004f0a:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2b1f      	cmp	r3, #31
 8004f10:	d809      	bhi.n	8004f26 <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004f12:	4b5f      	ldr	r3, [pc, #380]	@ (8005090 <_SendPacket+0x1c0>)
 8004f14:	69da      	ldr	r2, [r3, #28]
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	fa22 f303 	lsr.w	r3, r2, r3
 8004f1c:	f003 0301 	and.w	r3, r3, #1
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f040 808b 	bne.w	800503c <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2b17      	cmp	r3, #23
 8004f2a:	d807      	bhi.n	8004f3c <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	b2da      	uxtb	r2, r3
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	701a      	strb	r2, [r3, #0]
 8004f3a:	e03d      	b.n	8004fb8 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004f3c:	68ba      	ldr	r2, [r7, #8]
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	1ad3      	subs	r3, r2, r3
 8004f42:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f48:	d912      	bls.n	8004f70 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	09da      	lsrs	r2, r3, #7
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	60fb      	str	r3, [r7, #12]
 8004f54:	b2d2      	uxtb	r2, r2
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	3a01      	subs	r2, #1
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004f68:	b2da      	uxtb	r2, r3
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	701a      	strb	r2, [r3, #0]
 8004f6e:	e006      	b.n	8004f7e <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	3b01      	subs	r3, #1
 8004f74:	60fb      	str	r3, [r7, #12]
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f82:	d912      	bls.n	8004faa <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	09da      	lsrs	r2, r3, #7
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	3b01      	subs	r3, #1
 8004f8c:	60fb      	str	r3, [r7, #12]
 8004f8e:	b2d2      	uxtb	r2, r2
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	3a01      	subs	r2, #1
 8004f9c:	60fa      	str	r2, [r7, #12]
 8004f9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004fa2:	b2da      	uxtb	r2, r3
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	701a      	strb	r2, [r3, #0]
 8004fa8:	e006      	b.n	8004fb8 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	3b01      	subs	r3, #1
 8004fae:	60fb      	str	r3, [r7, #12]
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	b2da      	uxtb	r2, r3
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004fb8:	4b36      	ldr	r3, [pc, #216]	@ (8005094 <_SendPacket+0x1c4>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004fbe:	4b34      	ldr	r3, [pc, #208]	@ (8005090 <_SendPacket+0x1c0>)
 8004fc0:	68db      	ldr	r3, [r3, #12]
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004fc8:	68bb      	ldr	r3, [r7, #8]
 8004fca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	623b      	str	r3, [r7, #32]
 8004fd0:	e00b      	b.n	8004fea <_SendPacket+0x11a>
 8004fd2:	6a3b      	ldr	r3, [r7, #32]
 8004fd4:	b2da      	uxtb	r2, r3
 8004fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fd8:	1c59      	adds	r1, r3, #1
 8004fda:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fdc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fe0:	b2d2      	uxtb	r2, r2
 8004fe2:	701a      	strb	r2, [r3, #0]
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
 8004fe6:	09db      	lsrs	r3, r3, #7
 8004fe8:	623b      	str	r3, [r7, #32]
 8004fea:	6a3b      	ldr	r3, [r7, #32]
 8004fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fee:	d8f0      	bhi.n	8004fd2 <_SendPacket+0x102>
 8004ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff2:	1c5a      	adds	r2, r3, #1
 8004ff4:	627a      	str	r2, [r7, #36]	@ 0x24
 8004ff6:	6a3a      	ldr	r2, [r7, #32]
 8004ff8:	b2d2      	uxtb	r2, r2
 8004ffa:	701a      	strb	r2, [r3, #0]
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffe:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005000:	4b23      	ldr	r3, [pc, #140]	@ (8005090 <_SendPacket+0x1c0>)
 8005002:	785b      	ldrb	r3, [r3, #1]
 8005004:	4618      	mov	r0, r3
 8005006:	68ba      	ldr	r2, [r7, #8]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	1ad3      	subs	r3, r2, r3
 800500c:	461a      	mov	r2, r3
 800500e:	68f9      	ldr	r1, [r7, #12]
 8005010:	f7fb f906 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8005014:	4603      	mov	r3, r0
 8005016:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8005018:	693b      	ldr	r3, [r7, #16]
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800501e:	4a1c      	ldr	r2, [pc, #112]	@ (8005090 <_SendPacket+0x1c0>)
 8005020:	69bb      	ldr	r3, [r7, #24]
 8005022:	60d3      	str	r3, [r2, #12]
 8005024:	e00b      	b.n	800503e <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8005026:	4b1a      	ldr	r3, [pc, #104]	@ (8005090 <_SendPacket+0x1c0>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	3301      	adds	r3, #1
 800502c:	b2da      	uxtb	r2, r3
 800502e:	4b18      	ldr	r3, [pc, #96]	@ (8005090 <_SendPacket+0x1c0>)
 8005030:	701a      	strb	r2, [r3, #0]
 8005032:	e004      	b.n	800503e <_SendPacket+0x16e>
    goto SendDone;
 8005034:	bf00      	nop
 8005036:	e002      	b.n	800503e <_SendPacket+0x16e>
      goto SendDone;
 8005038:	bf00      	nop
 800503a:	e000      	b.n	800503e <_SendPacket+0x16e>
      goto SendDone;
 800503c:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800503e:	4b14      	ldr	r3, [pc, #80]	@ (8005090 <_SendPacket+0x1c0>)
 8005040:	7e1b      	ldrb	r3, [r3, #24]
 8005042:	4619      	mov	r1, r3
 8005044:	4a14      	ldr	r2, [pc, #80]	@ (8005098 <_SendPacket+0x1c8>)
 8005046:	460b      	mov	r3, r1
 8005048:	005b      	lsls	r3, r3, #1
 800504a:	440b      	add	r3, r1
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4413      	add	r3, r2
 8005050:	336c      	adds	r3, #108	@ 0x6c
 8005052:	681a      	ldr	r2, [r3, #0]
 8005054:	4b0e      	ldr	r3, [pc, #56]	@ (8005090 <_SendPacket+0x1c0>)
 8005056:	7e1b      	ldrb	r3, [r3, #24]
 8005058:	4618      	mov	r0, r3
 800505a:	490f      	ldr	r1, [pc, #60]	@ (8005098 <_SendPacket+0x1c8>)
 800505c:	4603      	mov	r3, r0
 800505e:	005b      	lsls	r3, r3, #1
 8005060:	4403      	add	r3, r0
 8005062:	00db      	lsls	r3, r3, #3
 8005064:	440b      	add	r3, r1
 8005066:	3370      	adds	r3, #112	@ 0x70
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	429a      	cmp	r2, r3
 800506c:	d00b      	beq.n	8005086 <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800506e:	4b08      	ldr	r3, [pc, #32]	@ (8005090 <_SendPacket+0x1c0>)
 8005070:	789b      	ldrb	r3, [r3, #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d107      	bne.n	8005086 <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8005076:	4b06      	ldr	r3, [pc, #24]	@ (8005090 <_SendPacket+0x1c0>)
 8005078:	2201      	movs	r2, #1
 800507a:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800507c:	f7ff fe46 	bl	8004d0c <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005080:	4b03      	ldr	r3, [pc, #12]	@ (8005090 <_SendPacket+0x1c0>)
 8005082:	2200      	movs	r2, #0
 8005084:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8005086:	bf00      	nop
 8005088:	3728      	adds	r7, #40	@ 0x28
 800508a:	46bd      	mov	sp, r7
 800508c:	bd80      	pop	{r7, pc}
 800508e:	bf00      	nop
 8005090:	2004c7d4 	.word	0x2004c7d4
 8005094:	e0001004 	.word	0xe0001004
 8005098:	2004b314 	.word	0x2004b314

0800509c <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 800509c:	b580      	push	{r7, lr}
 800509e:	b08a      	sub	sp, #40	@ 0x28
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	460b      	mov	r3, r1
 80050a6:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	3301      	adds	r3, #1
 80050b2:	2b80      	cmp	r3, #128	@ 0x80
 80050b4:	d80a      	bhi.n	80050cc <_StoreChar+0x30>
    *(p->pPayload++) = c;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	1c59      	adds	r1, r3, #1
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	6051      	str	r1, [r2, #4]
 80050c0:	78fa      	ldrb	r2, [r7, #3]
 80050c2:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	1c5a      	adds	r2, r3, #1
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	2b80      	cmp	r3, #128	@ 0x80
 80050d2:	d15a      	bne.n	800518a <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691a      	ldr	r2, [r3, #16]
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	b2d2      	uxtb	r2, r2
 80050de:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	68db      	ldr	r3, [r3, #12]
 80050ea:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 80050ec:	693b      	ldr	r3, [r7, #16]
 80050ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	623b      	str	r3, [r7, #32]
 80050f4:	e00b      	b.n	800510e <_StoreChar+0x72>
 80050f6:	6a3b      	ldr	r3, [r7, #32]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050fc:	1c59      	adds	r1, r3, #1
 80050fe:	6279      	str	r1, [r7, #36]	@ 0x24
 8005100:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005104:	b2d2      	uxtb	r2, r2
 8005106:	701a      	strb	r2, [r3, #0]
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	09db      	lsrs	r3, r3, #7
 800510c:	623b      	str	r3, [r7, #32]
 800510e:	6a3b      	ldr	r3, [r7, #32]
 8005110:	2b7f      	cmp	r3, #127	@ 0x7f
 8005112:	d8f0      	bhi.n	80050f6 <_StoreChar+0x5a>
 8005114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	627a      	str	r2, [r7, #36]	@ 0x24
 800511a:	6a3a      	ldr	r2, [r7, #32]
 800511c:	b2d2      	uxtb	r2, r2
 800511e:	701a      	strb	r2, [r3, #0]
 8005120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005122:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	2300      	movs	r3, #0
 800512a:	61bb      	str	r3, [r7, #24]
 800512c:	e00b      	b.n	8005146 <_StoreChar+0xaa>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	b2da      	uxtb	r2, r3
 8005132:	69fb      	ldr	r3, [r7, #28]
 8005134:	1c59      	adds	r1, r3, #1
 8005136:	61f9      	str	r1, [r7, #28]
 8005138:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800513c:	b2d2      	uxtb	r2, r2
 800513e:	701a      	strb	r2, [r3, #0]
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	09db      	lsrs	r3, r3, #7
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	2b7f      	cmp	r3, #127	@ 0x7f
 800514a:	d8f0      	bhi.n	800512e <_StoreChar+0x92>
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	1c5a      	adds	r2, r3, #1
 8005150:	61fa      	str	r2, [r7, #28]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	b2d2      	uxtb	r2, r2
 8005156:	701a      	strb	r2, [r3, #0]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	689b      	ldr	r3, [r3, #8]
 8005160:	221a      	movs	r2, #26
 8005162:	6939      	ldr	r1, [r7, #16]
 8005164:	4618      	mov	r0, r3
 8005166:	f7ff feb3 	bl	8004ed0 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4618      	mov	r0, r3
 8005170:	f7ff fdbf 	bl	8004cf2 <_PreparePacket>
 8005174:	4602      	mov	r2, r0
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	689b      	ldr	r3, [r3, #8]
 800517e:	1c5a      	adds	r2, r3, #1
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	611a      	str	r2, [r3, #16]
  }
}
 800518a:	bf00      	nop
 800518c:	3728      	adds	r7, #40	@ 0x28
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005194:	b580      	push	{r7, lr}
 8005196:	b08a      	sub	sp, #40	@ 0x28
 8005198:	af00      	add	r7, sp, #0
 800519a:	60f8      	str	r0, [r7, #12]
 800519c:	60b9      	str	r1, [r7, #8]
 800519e:	607a      	str	r2, [r7, #4]
 80051a0:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 80051a6:	2301      	movs	r3, #1
 80051a8:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 80051aa:	2301      	movs	r3, #1
 80051ac:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051ae:	e007      	b.n	80051c0 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 80051b0:	6a3a      	ldr	r2, [r7, #32]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80051b8:	623b      	str	r3, [r7, #32]
    Width++;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	3301      	adds	r3, #1
 80051be:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 80051c0:	6a3a      	ldr	r2, [r7, #32]
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	429a      	cmp	r2, r3
 80051c6:	d2f3      	bcs.n	80051b0 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 80051c8:	683a      	ldr	r2, [r7, #0]
 80051ca:	69fb      	ldr	r3, [r7, #28]
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d901      	bls.n	80051d4 <_PrintUnsigned+0x40>
    Width = NumDigits;
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 80051d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d000      	beq.n	80051e0 <_PrintUnsigned+0x4c>
 80051de:	e01f      	b.n	8005220 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d01c      	beq.n	8005220 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 80051e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051e8:	f003 0302 	and.w	r3, r3, #2
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d005      	beq.n	80051fc <_PrintUnsigned+0x68>
 80051f0:	683b      	ldr	r3, [r7, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d102      	bne.n	80051fc <_PrintUnsigned+0x68>
        c = '0';
 80051f6:	2330      	movs	r3, #48	@ 0x30
 80051f8:	76fb      	strb	r3, [r7, #27]
 80051fa:	e001      	b.n	8005200 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 80051fc:	2320      	movs	r3, #32
 80051fe:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005200:	e007      	b.n	8005212 <_PrintUnsigned+0x7e>
        FieldWidth--;
 8005202:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005204:	3b01      	subs	r3, #1
 8005206:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 8005208:	7efb      	ldrb	r3, [r7, #27]
 800520a:	4619      	mov	r1, r3
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f7ff ff45 	bl	800509c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005212:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005214:	2b00      	cmp	r3, #0
 8005216:	d003      	beq.n	8005220 <_PrintUnsigned+0x8c>
 8005218:	69fa      	ldr	r2, [r7, #28]
 800521a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800521c:	429a      	cmp	r2, r3
 800521e:	d3f0      	bcc.n	8005202 <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b01      	cmp	r3, #1
 8005224:	d903      	bls.n	800522e <_PrintUnsigned+0x9a>
      NumDigits--;
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	3b01      	subs	r3, #1
 800522a:	603b      	str	r3, [r7, #0]
 800522c:	e009      	b.n	8005242 <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 800522e:	68ba      	ldr	r2, [r7, #8]
 8005230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005232:	fbb2 f3f3 	udiv	r3, r2, r3
 8005236:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 8005238:	697a      	ldr	r2, [r7, #20]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	429a      	cmp	r2, r3
 800523e:	d200      	bcs.n	8005242 <_PrintUnsigned+0xae>
        break;
 8005240:	e005      	b.n	800524e <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 8005242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	fb02 f303 	mul.w	r3, r2, r3
 800524a:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 800524c:	e7e8      	b.n	8005220 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 800524e:	68ba      	ldr	r2, [r7, #8]
 8005250:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005252:	fbb2 f3f3 	udiv	r3, r2, r3
 8005256:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800525c:	fb02 f303 	mul.w	r3, r2, r3
 8005260:	68ba      	ldr	r2, [r7, #8]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 8005266:	4a15      	ldr	r2, [pc, #84]	@ (80052bc <_PrintUnsigned+0x128>)
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	4413      	add	r3, r2
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	4619      	mov	r1, r3
 8005270:	68f8      	ldr	r0, [r7, #12]
 8005272:	f7ff ff13 	bl	800509c <_StoreChar>
    Digit /= Base;
 8005276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	fbb2 f3f3 	udiv	r3, r2, r3
 800527e:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1e3      	bne.n	800524e <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005286:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005288:	f003 0301 	and.w	r3, r3, #1
 800528c:	2b00      	cmp	r3, #0
 800528e:	d011      	beq.n	80052b4 <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005292:	2b00      	cmp	r3, #0
 8005294:	d00e      	beq.n	80052b4 <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005296:	e006      	b.n	80052a6 <_PrintUnsigned+0x112>
        FieldWidth--;
 8005298:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800529a:	3b01      	subs	r3, #1
 800529c:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 800529e:	2120      	movs	r1, #32
 80052a0:	68f8      	ldr	r0, [r7, #12]
 80052a2:	f7ff fefb 	bl	800509c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80052a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d003      	beq.n	80052b4 <_PrintUnsigned+0x120>
 80052ac:	69fa      	ldr	r2, [r7, #28]
 80052ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052b0:	429a      	cmp	r2, r3
 80052b2:	d3f1      	bcc.n	8005298 <_PrintUnsigned+0x104>
      }
    }
  }
}
 80052b4:	bf00      	nop
 80052b6:	3728      	adds	r7, #40	@ 0x28
 80052b8:	46bd      	mov	sp, r7
 80052ba:	bd80      	pop	{r7, pc}
 80052bc:	080071e8 	.word	0x080071e8

080052c0 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b088      	sub	sp, #32
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	60b9      	str	r1, [r7, #8]
 80052ca:	607a      	str	r2, [r7, #4]
 80052cc:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	bfb8      	it	lt
 80052d4:	425b      	neglt	r3, r3
 80052d6:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 80052d8:	2301      	movs	r3, #1
 80052da:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80052dc:	e007      	b.n	80052ee <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	fb92 f3f3 	sdiv	r3, r2, r3
 80052e6:	613b      	str	r3, [r7, #16]
    Width++;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3301      	adds	r3, #1
 80052ec:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	693a      	ldr	r2, [r7, #16]
 80052f2:	429a      	cmp	r2, r3
 80052f4:	daf3      	bge.n	80052de <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 80052f6:	683a      	ldr	r2, [r7, #0]
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d901      	bls.n	8005302 <_PrintInt+0x42>
    Width = NumDigits;
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d00a      	beq.n	800531e <_PrintInt+0x5e>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	2b00      	cmp	r3, #0
 800530c:	db04      	blt.n	8005318 <_PrintInt+0x58>
 800530e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005310:	f003 0304 	and.w	r3, r3, #4
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <_PrintInt+0x5e>
    FieldWidth--;
 8005318:	6a3b      	ldr	r3, [r7, #32]
 800531a:	3b01      	subs	r3, #1
 800531c:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 800531e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005320:	f003 0302 	and.w	r3, r3, #2
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <_PrintInt+0x6e>
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d016      	beq.n	800535c <_PrintInt+0x9c>
 800532e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005330:	f003 0301 	and.w	r3, r3, #1
 8005334:	2b00      	cmp	r3, #0
 8005336:	d111      	bne.n	800535c <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005338:	6a3b      	ldr	r3, [r7, #32]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800533e:	e006      	b.n	800534e <_PrintInt+0x8e>
        FieldWidth--;
 8005340:	6a3b      	ldr	r3, [r7, #32]
 8005342:	3b01      	subs	r3, #1
 8005344:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005346:	2120      	movs	r1, #32
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f7ff fea7 	bl	800509c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 800534e:	6a3b      	ldr	r3, [r7, #32]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d003      	beq.n	800535c <_PrintInt+0x9c>
 8005354:	697a      	ldr	r2, [r7, #20]
 8005356:	6a3b      	ldr	r3, [r7, #32]
 8005358:	429a      	cmp	r2, r3
 800535a:	d3f1      	bcc.n	8005340 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 800535c:	68bb      	ldr	r3, [r7, #8]
 800535e:	2b00      	cmp	r3, #0
 8005360:	da07      	bge.n	8005372 <_PrintInt+0xb2>
    v = -v;
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	425b      	negs	r3, r3
 8005366:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005368:	212d      	movs	r1, #45	@ 0x2d
 800536a:	68f8      	ldr	r0, [r7, #12]
 800536c:	f7ff fe96 	bl	800509c <_StoreChar>
 8005370:	e008      	b.n	8005384 <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005372:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005374:	f003 0304 	and.w	r3, r3, #4
 8005378:	2b00      	cmp	r3, #0
 800537a:	d003      	beq.n	8005384 <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 800537c:	212b      	movs	r1, #43	@ 0x2b
 800537e:	68f8      	ldr	r0, [r7, #12]
 8005380:	f7ff fe8c 	bl	800509c <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005384:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	2b00      	cmp	r3, #0
 800538c:	d019      	beq.n	80053c2 <_PrintInt+0x102>
 800538e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005390:	f003 0301 	and.w	r3, r3, #1
 8005394:	2b00      	cmp	r3, #0
 8005396:	d114      	bne.n	80053c2 <_PrintInt+0x102>
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d111      	bne.n	80053c2 <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 800539e:	6a3b      	ldr	r3, [r7, #32]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d00e      	beq.n	80053c2 <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053a4:	e006      	b.n	80053b4 <_PrintInt+0xf4>
        FieldWidth--;
 80053a6:	6a3b      	ldr	r3, [r7, #32]
 80053a8:	3b01      	subs	r3, #1
 80053aa:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 80053ac:	2130      	movs	r1, #48	@ 0x30
 80053ae:	68f8      	ldr	r0, [r7, #12]
 80053b0:	f7ff fe74 	bl	800509c <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80053b4:	6a3b      	ldr	r3, [r7, #32]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d003      	beq.n	80053c2 <_PrintInt+0x102>
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d3f1      	bcc.n	80053a6 <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 80053c2:	68b9      	ldr	r1, [r7, #8]
 80053c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c6:	9301      	str	r3, [sp, #4]
 80053c8:	6a3b      	ldr	r3, [r7, #32]
 80053ca:	9300      	str	r3, [sp, #0]
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f7ff fedf 	bl	8005194 <_PrintUnsigned>
}
 80053d6:	bf00      	nop
 80053d8:	3718      	adds	r7, #24
 80053da:	46bd      	mov	sp, r7
 80053dc:	bd80      	pop	{r7, pc}
	...

080053e0 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b098      	sub	sp, #96	@ 0x60
 80053e4:	af02      	add	r7, sp, #8
 80053e6:	60f8      	str	r0, [r7, #12]
 80053e8:	60b9      	str	r1, [r7, #8]
 80053ea:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80053ec:	f3ef 8311 	mrs	r3, BASEPRI
 80053f0:	f04f 0120 	mov.w	r1, #32
 80053f4:	f381 8811 	msr	BASEPRI, r1
 80053f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80053fa:	48b7      	ldr	r0, [pc, #732]	@ (80056d8 <_VPrintTarget+0x2f8>)
 80053fc:	f7ff fc79 	bl	8004cf2 <_PreparePacket>
 8005400:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005402:	4bb5      	ldr	r3, [pc, #724]	@ (80056d8 <_VPrintTarget+0x2f8>)
 8005404:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005406:	2300      	movs	r3, #0
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 800540a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800540c:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	3301      	adds	r3, #1
 8005412:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005414:	68bb      	ldr	r3, [r7, #8]
 8005416:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	3301      	adds	r3, #1
 8005424:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005426:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800542a:	2b00      	cmp	r3, #0
 800542c:	f000 8183 	beq.w	8005736 <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005430:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005434:	2b25      	cmp	r3, #37	@ 0x25
 8005436:	f040 8170 	bne.w	800571a <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 800543a:	2300      	movs	r3, #0
 800543c:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 800543e:	2301      	movs	r3, #1
 8005440:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	781b      	ldrb	r3, [r3, #0]
 8005446:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 800544a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800544e:	3b23      	subs	r3, #35	@ 0x23
 8005450:	2b0d      	cmp	r3, #13
 8005452:	d83f      	bhi.n	80054d4 <_VPrintTarget+0xf4>
 8005454:	a201      	add	r2, pc, #4	@ (adr r2, 800545c <_VPrintTarget+0x7c>)
 8005456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800545a:	bf00      	nop
 800545c:	080054c5 	.word	0x080054c5
 8005460:	080054d5 	.word	0x080054d5
 8005464:	080054d5 	.word	0x080054d5
 8005468:	080054d5 	.word	0x080054d5
 800546c:	080054d5 	.word	0x080054d5
 8005470:	080054d5 	.word	0x080054d5
 8005474:	080054d5 	.word	0x080054d5
 8005478:	080054d5 	.word	0x080054d5
 800547c:	080054b5 	.word	0x080054b5
 8005480:	080054d5 	.word	0x080054d5
 8005484:	08005495 	.word	0x08005495
 8005488:	080054d5 	.word	0x080054d5
 800548c:	080054d5 	.word	0x080054d5
 8005490:	080054a5 	.word	0x080054a5
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005494:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005496:	f043 0301 	orr.w	r3, r3, #1
 800549a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	3301      	adds	r3, #1
 80054a0:	60fb      	str	r3, [r7, #12]
 80054a2:	e01a      	b.n	80054da <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 80054a4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054a6:	f043 0302 	orr.w	r3, r3, #2
 80054aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	3301      	adds	r3, #1
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	e012      	b.n	80054da <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 80054b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054b6:	f043 0304 	orr.w	r3, r3, #4
 80054ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	3301      	adds	r3, #1
 80054c0:	60fb      	str	r3, [r7, #12]
 80054c2:	e00a      	b.n	80054da <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 80054c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80054c6:	f043 0308 	orr.w	r3, r3, #8
 80054ca:	64bb      	str	r3, [r7, #72]	@ 0x48
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	3301      	adds	r3, #1
 80054d0:	60fb      	str	r3, [r7, #12]
 80054d2:	e002      	b.n	80054da <_VPrintTarget+0xfa>
        default:  v = 0; break;
 80054d4:	2300      	movs	r3, #0
 80054d6:	653b      	str	r3, [r7, #80]	@ 0x50
 80054d8:	bf00      	nop
        }
      } while (v);
 80054da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1b0      	bne.n	8005442 <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 80054e0:	2300      	movs	r3, #0
 80054e2:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	781b      	ldrb	r3, [r3, #0]
 80054e8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 80054ec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80054f2:	d912      	bls.n	800551a <_VPrintTarget+0x13a>
 80054f4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80054f8:	2b39      	cmp	r3, #57	@ 0x39
 80054fa:	d80e      	bhi.n	800551a <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	3301      	adds	r3, #1
 8005500:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005502:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005504:	4613      	mov	r3, r2
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	4413      	add	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	461a      	mov	r2, r3
 800550e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005512:	4413      	add	r3, r2
 8005514:	3b30      	subs	r3, #48	@ 0x30
 8005516:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005518:	e7e4      	b.n	80054e4 <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 800551a:	2300      	movs	r3, #0
 800551c:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005526:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800552a:	2b2e      	cmp	r3, #46	@ 0x2e
 800552c:	d11d      	bne.n	800556a <_VPrintTarget+0x18a>
        sFormat++;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	3301      	adds	r3, #1
 8005532:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 800553c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005540:	2b2f      	cmp	r3, #47	@ 0x2f
 8005542:	d912      	bls.n	800556a <_VPrintTarget+0x18a>
 8005544:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005548:	2b39      	cmp	r3, #57	@ 0x39
 800554a:	d80e      	bhi.n	800556a <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	3301      	adds	r3, #1
 8005550:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005552:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	005b      	lsls	r3, r3, #1
 800555c:	461a      	mov	r2, r3
 800555e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005562:	4413      	add	r3, r2
 8005564:	3b30      	subs	r3, #48	@ 0x30
 8005566:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005568:	e7e4      	b.n	8005534 <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005572:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005576:	2b6c      	cmp	r3, #108	@ 0x6c
 8005578:	d003      	beq.n	8005582 <_VPrintTarget+0x1a2>
 800557a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800557e:	2b68      	cmp	r3, #104	@ 0x68
 8005580:	d107      	bne.n	8005592 <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	781b      	ldrb	r3, [r3, #0]
 8005586:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	3301      	adds	r3, #1
 800558e:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005590:	e7ef      	b.n	8005572 <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005592:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005596:	2b25      	cmp	r3, #37	@ 0x25
 8005598:	f000 80b3 	beq.w	8005702 <_VPrintTarget+0x322>
 800559c:	2b25      	cmp	r3, #37	@ 0x25
 800559e:	f2c0 80b7 	blt.w	8005710 <_VPrintTarget+0x330>
 80055a2:	2b78      	cmp	r3, #120	@ 0x78
 80055a4:	f300 80b4 	bgt.w	8005710 <_VPrintTarget+0x330>
 80055a8:	2b58      	cmp	r3, #88	@ 0x58
 80055aa:	f2c0 80b1 	blt.w	8005710 <_VPrintTarget+0x330>
 80055ae:	3b58      	subs	r3, #88	@ 0x58
 80055b0:	2b20      	cmp	r3, #32
 80055b2:	f200 80ad 	bhi.w	8005710 <_VPrintTarget+0x330>
 80055b6:	a201      	add	r2, pc, #4	@ (adr r2, 80055bc <_VPrintTarget+0x1dc>)
 80055b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055bc:	080056b3 	.word	0x080056b3
 80055c0:	08005711 	.word	0x08005711
 80055c4:	08005711 	.word	0x08005711
 80055c8:	08005711 	.word	0x08005711
 80055cc:	08005711 	.word	0x08005711
 80055d0:	08005711 	.word	0x08005711
 80055d4:	08005711 	.word	0x08005711
 80055d8:	08005711 	.word	0x08005711
 80055dc:	08005711 	.word	0x08005711
 80055e0:	08005711 	.word	0x08005711
 80055e4:	08005711 	.word	0x08005711
 80055e8:	08005641 	.word	0x08005641
 80055ec:	08005667 	.word	0x08005667
 80055f0:	08005711 	.word	0x08005711
 80055f4:	08005711 	.word	0x08005711
 80055f8:	08005711 	.word	0x08005711
 80055fc:	08005711 	.word	0x08005711
 8005600:	08005711 	.word	0x08005711
 8005604:	08005711 	.word	0x08005711
 8005608:	08005711 	.word	0x08005711
 800560c:	08005711 	.word	0x08005711
 8005610:	08005711 	.word	0x08005711
 8005614:	08005711 	.word	0x08005711
 8005618:	08005711 	.word	0x08005711
 800561c:	080056dd 	.word	0x080056dd
 8005620:	08005711 	.word	0x08005711
 8005624:	08005711 	.word	0x08005711
 8005628:	08005711 	.word	0x08005711
 800562c:	08005711 	.word	0x08005711
 8005630:	0800568d 	.word	0x0800568d
 8005634:	08005711 	.word	0x08005711
 8005638:	08005711 	.word	0x08005711
 800563c:	080056b3 	.word	0x080056b3
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	1d19      	adds	r1, r3, #4
 8005646:	687a      	ldr	r2, [r7, #4]
 8005648:	6011      	str	r1, [r2, #0]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 800564e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005650:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005654:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	4611      	mov	r1, r2
 800565e:	4618      	mov	r0, r3
 8005660:	f7ff fd1c 	bl	800509c <_StoreChar>
        break;
 8005664:	e055      	b.n	8005712 <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	1d19      	adds	r1, r3, #4
 800566c:	687a      	ldr	r2, [r7, #4]
 800566e:	6011      	str	r1, [r2, #0]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005674:	f107 0014 	add.w	r0, r7, #20
 8005678:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800567a:	9301      	str	r3, [sp, #4]
 800567c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800567e:	9300      	str	r3, [sp, #0]
 8005680:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005682:	220a      	movs	r2, #10
 8005684:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005686:	f7ff fe1b 	bl	80052c0 <_PrintInt>
        break;
 800568a:	e042      	b.n	8005712 <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	1d19      	adds	r1, r3, #4
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	6011      	str	r1, [r2, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 800569a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800569c:	f107 0014 	add.w	r0, r7, #20
 80056a0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056a2:	9301      	str	r3, [sp, #4]
 80056a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056aa:	220a      	movs	r2, #10
 80056ac:	f7ff fd72 	bl	8005194 <_PrintUnsigned>
        break;
 80056b0:	e02f      	b.n	8005712 <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	1d19      	adds	r1, r3, #4
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	6011      	str	r1, [r2, #0]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 80056c0:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056c2:	f107 0014 	add.w	r0, r7, #20
 80056c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80056c8:	9301      	str	r3, [sp, #4]
 80056ca:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80056cc:	9300      	str	r3, [sp, #0]
 80056ce:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056d0:	2210      	movs	r2, #16
 80056d2:	f7ff fd5f 	bl	8005194 <_PrintUnsigned>
        break;
 80056d6:	e01c      	b.n	8005712 <_VPrintTarget+0x332>
 80056d8:	2004c804 	.word	0x2004c804
      case 'p':
        v = va_arg(*pParamList, int);
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	1d19      	adds	r1, r3, #4
 80056e2:	687a      	ldr	r2, [r7, #4]
 80056e4:	6011      	str	r1, [r2, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 80056ea:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80056ec:	f107 0014 	add.w	r0, r7, #20
 80056f0:	2300      	movs	r3, #0
 80056f2:	9301      	str	r3, [sp, #4]
 80056f4:	2308      	movs	r3, #8
 80056f6:	9300      	str	r3, [sp, #0]
 80056f8:	2308      	movs	r3, #8
 80056fa:	2210      	movs	r2, #16
 80056fc:	f7ff fd4a 	bl	8005194 <_PrintUnsigned>
        break;
 8005700:	e007      	b.n	8005712 <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005702:	f107 0314 	add.w	r3, r7, #20
 8005706:	2125      	movs	r1, #37	@ 0x25
 8005708:	4618      	mov	r0, r3
 800570a:	f7ff fcc7 	bl	800509c <_StoreChar>
        break;
 800570e:	e000      	b.n	8005712 <_VPrintTarget+0x332>
      default:
        break;
 8005710:	bf00      	nop
      }
      sFormat++;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	3301      	adds	r3, #1
 8005716:	60fb      	str	r3, [r7, #12]
 8005718:	e007      	b.n	800572a <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 800571a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 800571e:	f107 0314 	add.w	r3, r7, #20
 8005722:	4611      	mov	r1, r2
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fcb9 	bl	800509c <_StoreChar>
    }
  } while (*sFormat);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	781b      	ldrb	r3, [r3, #0]
 800572e:	2b00      	cmp	r3, #0
 8005730:	f47f ae72 	bne.w	8005418 <_VPrintTarget+0x38>
 8005734:	e000      	b.n	8005738 <_VPrintTarget+0x358>
      break;
 8005736:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800573a:	2b00      	cmp	r3, #0
 800573c:	d041      	beq.n	80057c2 <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 800573e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005740:	69fb      	ldr	r3, [r7, #28]
 8005742:	b2d2      	uxtb	r2, r2
 8005744:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005746:	69bb      	ldr	r3, [r7, #24]
 8005748:	643b      	str	r3, [r7, #64]	@ 0x40
 800574a:	6a3b      	ldr	r3, [r7, #32]
 800574c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800574e:	e00b      	b.n	8005768 <_VPrintTarget+0x388>
 8005750:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005752:	b2da      	uxtb	r2, r3
 8005754:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005756:	1c59      	adds	r1, r3, #1
 8005758:	6439      	str	r1, [r7, #64]	@ 0x40
 800575a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800575e:	b2d2      	uxtb	r2, r2
 8005760:	701a      	strb	r2, [r3, #0]
 8005762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005764:	09db      	lsrs	r3, r3, #7
 8005766:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005768:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800576a:	2b7f      	cmp	r3, #127	@ 0x7f
 800576c:	d8f0      	bhi.n	8005750 <_VPrintTarget+0x370>
 800576e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005770:	1c5a      	adds	r2, r3, #1
 8005772:	643a      	str	r2, [r7, #64]	@ 0x40
 8005774:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]
 800577a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800577c:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 800577e:	69bb      	ldr	r3, [r7, #24]
 8005780:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005782:	2300      	movs	r3, #0
 8005784:	637b      	str	r3, [r7, #52]	@ 0x34
 8005786:	e00b      	b.n	80057a0 <_VPrintTarget+0x3c0>
 8005788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800578a:	b2da      	uxtb	r2, r3
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	1c59      	adds	r1, r3, #1
 8005790:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005792:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005796:	b2d2      	uxtb	r2, r2
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800579c:	09db      	lsrs	r3, r3, #7
 800579e:	637b      	str	r3, [r7, #52]	@ 0x34
 80057a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057a2:	2b7f      	cmp	r3, #127	@ 0x7f
 80057a4:	d8f0      	bhi.n	8005788 <_VPrintTarget+0x3a8>
 80057a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	63ba      	str	r2, [r7, #56]	@ 0x38
 80057ac:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80057ae:	b2d2      	uxtb	r2, r2
 80057b0:	701a      	strb	r2, [r3, #0]
 80057b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b4:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	69b9      	ldr	r1, [r7, #24]
 80057ba:	221a      	movs	r2, #26
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fb87 	bl	8004ed0 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 80057c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057c4:	f383 8811 	msr	BASEPRI, r3
#endif
}
 80057c8:	bf00      	nop
 80057ca:	3758      	adds	r7, #88	@ 0x58
 80057cc:	46bd      	mov	sp, r7
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 80057d0:	b580      	push	{r7, lr}
 80057d2:	b086      	sub	sp, #24
 80057d4:	af02      	add	r7, sp, #8
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
 80057dc:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057de:	2300      	movs	r3, #0
 80057e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80057e4:	4917      	ldr	r1, [pc, #92]	@ (8005844 <SEGGER_SYSVIEW_Init+0x74>)
 80057e6:	4818      	ldr	r0, [pc, #96]	@ (8005848 <SEGGER_SYSVIEW_Init+0x78>)
 80057e8:	f7ff f942 	bl	8004a70 <SEGGER_RTT_AllocUpBuffer>
 80057ec:	4603      	mov	r3, r0
 80057ee:	b2da      	uxtb	r2, r3
 80057f0:	4b16      	ldr	r3, [pc, #88]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 80057f2:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 80057f4:	4b15      	ldr	r3, [pc, #84]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 80057f6:	785a      	ldrb	r2, [r3, #1]
 80057f8:	4b14      	ldr	r3, [pc, #80]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 80057fa:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 80057fc:	4b13      	ldr	r3, [pc, #76]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 80057fe:	7e1b      	ldrb	r3, [r3, #24]
 8005800:	4618      	mov	r0, r3
 8005802:	2300      	movs	r3, #0
 8005804:	9300      	str	r3, [sp, #0]
 8005806:	2308      	movs	r3, #8
 8005808:	4a11      	ldr	r2, [pc, #68]	@ (8005850 <SEGGER_SYSVIEW_Init+0x80>)
 800580a:	490f      	ldr	r1, [pc, #60]	@ (8005848 <SEGGER_SYSVIEW_Init+0x78>)
 800580c:	f7ff f9b4 	bl	8004b78 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005810:	4b0e      	ldr	r3, [pc, #56]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 8005812:	2200      	movs	r2, #0
 8005814:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005816:	4b0f      	ldr	r3, [pc, #60]	@ (8005854 <SEGGER_SYSVIEW_Init+0x84>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a0c      	ldr	r2, [pc, #48]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 800581c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800581e:	4a0b      	ldr	r2, [pc, #44]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005824:	4a09      	ldr	r2, [pc, #36]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800582a:	4a08      	ldr	r2, [pc, #32]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005830:	4a06      	ldr	r2, [pc, #24]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 8005832:	683b      	ldr	r3, [r7, #0]
 8005834:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005836:	4b05      	ldr	r3, [pc, #20]	@ (800584c <SEGGER_SYSVIEW_Init+0x7c>)
 8005838:	2200      	movs	r2, #0
 800583a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800583c:	bf00      	nop
 800583e:	3710      	adds	r7, #16
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	2004b7cc 	.word	0x2004b7cc
 8005848:	080071b4 	.word	0x080071b4
 800584c:	2004c7d4 	.word	0x2004c7d4
 8005850:	2004c7cc 	.word	0x2004c7cc
 8005854:	e0001004 	.word	0xe0001004

08005858 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005860:	4a04      	ldr	r2, [pc, #16]	@ (8005874 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6113      	str	r3, [r2, #16]
}
 8005866:	bf00      	nop
 8005868:	370c      	adds	r7, #12
 800586a:	46bd      	mov	sp, r7
 800586c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005870:	4770      	bx	lr
 8005872:	bf00      	nop
 8005874:	2004c7d4 	.word	0x2004c7d4

08005878 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8005878:	b580      	push	{r7, lr}
 800587a:	b084      	sub	sp, #16
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005880:	f3ef 8311 	mrs	r3, BASEPRI
 8005884:	f04f 0120 	mov.w	r1, #32
 8005888:	f381 8811 	msr	BASEPRI, r1
 800588c:	60fb      	str	r3, [r7, #12]
 800588e:	4808      	ldr	r0, [pc, #32]	@ (80058b0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8005890:	f7ff fa2f 	bl	8004cf2 <_PreparePacket>
 8005894:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	68b8      	ldr	r0, [r7, #8]
 800589c:	f7ff fb18 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f383 8811 	msr	BASEPRI, r3
}
 80058a6:	bf00      	nop
 80058a8:	3710      	adds	r7, #16
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}
 80058ae:	bf00      	nop
 80058b0:	2004c804 	.word	0x2004c804

080058b4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b088      	sub	sp, #32
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80058be:	f3ef 8311 	mrs	r3, BASEPRI
 80058c2:	f04f 0120 	mov.w	r1, #32
 80058c6:	f381 8811 	msr	BASEPRI, r1
 80058ca:	617b      	str	r3, [r7, #20]
 80058cc:	4816      	ldr	r0, [pc, #88]	@ (8005928 <SEGGER_SYSVIEW_RecordU32+0x74>)
 80058ce:	f7ff fa10 	bl	8004cf2 <_PreparePacket>
 80058d2:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80058d4:	693b      	ldr	r3, [r7, #16]
 80058d6:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	61fb      	str	r3, [r7, #28]
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	61bb      	str	r3, [r7, #24]
 80058e0:	e00b      	b.n	80058fa <SEGGER_SYSVIEW_RecordU32+0x46>
 80058e2:	69bb      	ldr	r3, [r7, #24]
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	69fb      	ldr	r3, [r7, #28]
 80058e8:	1c59      	adds	r1, r3, #1
 80058ea:	61f9      	str	r1, [r7, #28]
 80058ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058f0:	b2d2      	uxtb	r2, r2
 80058f2:	701a      	strb	r2, [r3, #0]
 80058f4:	69bb      	ldr	r3, [r7, #24]
 80058f6:	09db      	lsrs	r3, r3, #7
 80058f8:	61bb      	str	r3, [r7, #24]
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80058fe:	d8f0      	bhi.n	80058e2 <SEGGER_SYSVIEW_RecordU32+0x2e>
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	61fa      	str	r2, [r7, #28]
 8005906:	69ba      	ldr	r2, [r7, #24]
 8005908:	b2d2      	uxtb	r2, r2
 800590a:	701a      	strb	r2, [r3, #0]
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005910:	687a      	ldr	r2, [r7, #4]
 8005912:	68f9      	ldr	r1, [r7, #12]
 8005914:	6938      	ldr	r0, [r7, #16]
 8005916:	f7ff fadb 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f383 8811 	msr	BASEPRI, r3
}
 8005920:	bf00      	nop
 8005922:	3720      	adds	r7, #32
 8005924:	46bd      	mov	sp, r7
 8005926:	bd80      	pop	{r7, pc}
 8005928:	2004c804 	.word	0x2004c804

0800592c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b08c      	sub	sp, #48	@ 0x30
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005938:	f3ef 8311 	mrs	r3, BASEPRI
 800593c:	f04f 0120 	mov.w	r1, #32
 8005940:	f381 8811 	msr	BASEPRI, r1
 8005944:	61fb      	str	r3, [r7, #28]
 8005946:	4825      	ldr	r0, [pc, #148]	@ (80059dc <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8005948:	f7ff f9d3 	bl	8004cf2 <_PreparePacket>
 800594c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	62bb      	str	r3, [r7, #40]	@ 0x28
 800595a:	e00b      	b.n	8005974 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800595c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800595e:	b2da      	uxtb	r2, r3
 8005960:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005962:	1c59      	adds	r1, r3, #1
 8005964:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005966:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800596a:	b2d2      	uxtb	r2, r2
 800596c:	701a      	strb	r2, [r3, #0]
 800596e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005970:	09db      	lsrs	r3, r3, #7
 8005972:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005976:	2b7f      	cmp	r3, #127	@ 0x7f
 8005978:	d8f0      	bhi.n	800595c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800597a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800597c:	1c5a      	adds	r2, r3, #1
 800597e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005980:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005982:	b2d2      	uxtb	r2, r2
 8005984:	701a      	strb	r2, [r3, #0]
 8005986:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005988:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	623b      	str	r3, [r7, #32]
 8005992:	e00b      	b.n	80059ac <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	b2da      	uxtb	r2, r3
 8005998:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599a:	1c59      	adds	r1, r3, #1
 800599c:	6279      	str	r1, [r7, #36]	@ 0x24
 800599e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]
 80059a6:	6a3b      	ldr	r3, [r7, #32]
 80059a8:	09db      	lsrs	r3, r3, #7
 80059aa:	623b      	str	r3, [r7, #32]
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80059b0:	d8f0      	bhi.n	8005994 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 80059b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059b4:	1c5a      	adds	r2, r3, #1
 80059b6:	627a      	str	r2, [r7, #36]	@ 0x24
 80059b8:	6a3a      	ldr	r2, [r7, #32]
 80059ba:	b2d2      	uxtb	r2, r2
 80059bc:	701a      	strb	r2, [r3, #0]
 80059be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c0:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80059c2:	68fa      	ldr	r2, [r7, #12]
 80059c4:	6979      	ldr	r1, [r7, #20]
 80059c6:	69b8      	ldr	r0, [r7, #24]
 80059c8:	f7ff fa82 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	f383 8811 	msr	BASEPRI, r3
}
 80059d2:	bf00      	nop
 80059d4:	3730      	adds	r7, #48	@ 0x30
 80059d6:	46bd      	mov	sp, r7
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	bf00      	nop
 80059dc:	2004c804 	.word	0x2004c804

080059e0 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b08e      	sub	sp, #56	@ 0x38
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	60f8      	str	r0, [r7, #12]
 80059e8:	60b9      	str	r1, [r7, #8]
 80059ea:	607a      	str	r2, [r7, #4]
 80059ec:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 80059ee:	f3ef 8311 	mrs	r3, BASEPRI
 80059f2:	f04f 0120 	mov.w	r1, #32
 80059f6:	f381 8811 	msr	BASEPRI, r1
 80059fa:	61fb      	str	r3, [r7, #28]
 80059fc:	4832      	ldr	r0, [pc, #200]	@ (8005ac8 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 80059fe:	f7ff f978 	bl	8004cf2 <_PreparePacket>
 8005a02:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005a08:	697b      	ldr	r3, [r7, #20]
 8005a0a:	637b      	str	r3, [r7, #52]	@ 0x34
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a10:	e00b      	b.n	8005a2a <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8005a12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a14:	b2da      	uxtb	r2, r3
 8005a16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a18:	1c59      	adds	r1, r3, #1
 8005a1a:	6379      	str	r1, [r7, #52]	@ 0x34
 8005a1c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a20:	b2d2      	uxtb	r2, r2
 8005a22:	701a      	strb	r2, [r3, #0]
 8005a24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a26:	09db      	lsrs	r3, r3, #7
 8005a28:	633b      	str	r3, [r7, #48]	@ 0x30
 8005a2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a2e:	d8f0      	bhi.n	8005a12 <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8005a30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	637a      	str	r2, [r7, #52]	@ 0x34
 8005a36:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005a38:	b2d2      	uxtb	r2, r2
 8005a3a:	701a      	strb	r2, [r3, #0]
 8005a3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a3e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a48:	e00b      	b.n	8005a62 <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8005a4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a4c:	b2da      	uxtb	r2, r3
 8005a4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a50:	1c59      	adds	r1, r3, #1
 8005a52:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005a54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a58:	b2d2      	uxtb	r2, r2
 8005a5a:	701a      	strb	r2, [r3, #0]
 8005a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a5e:	09db      	lsrs	r3, r3, #7
 8005a60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005a62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a66:	d8f0      	bhi.n	8005a4a <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8005a68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005a6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005a70:	b2d2      	uxtb	r2, r2
 8005a72:	701a      	strb	r2, [r3, #0]
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	623b      	str	r3, [r7, #32]
 8005a80:	e00b      	b.n	8005a9a <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8005a82:	6a3b      	ldr	r3, [r7, #32]
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a88:	1c59      	adds	r1, r3, #1
 8005a8a:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a8c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a90:	b2d2      	uxtb	r2, r2
 8005a92:	701a      	strb	r2, [r3, #0]
 8005a94:	6a3b      	ldr	r3, [r7, #32]
 8005a96:	09db      	lsrs	r3, r3, #7
 8005a98:	623b      	str	r3, [r7, #32]
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a9e:	d8f0      	bhi.n	8005a82 <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8005aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa2:	1c5a      	adds	r2, r3, #1
 8005aa4:	627a      	str	r2, [r7, #36]	@ 0x24
 8005aa6:	6a3a      	ldr	r2, [r7, #32]
 8005aa8:	b2d2      	uxtb	r2, r2
 8005aaa:	701a      	strb	r2, [r3, #0]
 8005aac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aae:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005ab0:	68fa      	ldr	r2, [r7, #12]
 8005ab2:	6979      	ldr	r1, [r7, #20]
 8005ab4:	69b8      	ldr	r0, [r7, #24]
 8005ab6:	f7ff fa0b 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	f383 8811 	msr	BASEPRI, r3
}
 8005ac0:	bf00      	nop
 8005ac2:	3738      	adds	r7, #56	@ 0x38
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	bd80      	pop	{r7, pc}
 8005ac8:	2004c804 	.word	0x2004c804

08005acc <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b090      	sub	sp, #64	@ 0x40
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	60f8      	str	r0, [r7, #12]
 8005ad4:	60b9      	str	r1, [r7, #8]
 8005ad6:	607a      	str	r2, [r7, #4]
 8005ad8:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005ada:	f3ef 8311 	mrs	r3, BASEPRI
 8005ade:	f04f 0120 	mov.w	r1, #32
 8005ae2:	f381 8811 	msr	BASEPRI, r1
 8005ae6:	61fb      	str	r3, [r7, #28]
 8005ae8:	4840      	ldr	r0, [pc, #256]	@ (8005bec <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8005aea:	f7ff f902 	bl	8004cf2 <_PreparePacket>
 8005aee:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8005af0:	69bb      	ldr	r3, [r7, #24]
 8005af2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8005af4:	697b      	ldr	r3, [r7, #20]
 8005af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005afc:	e00b      	b.n	8005b16 <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8005afe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b00:	b2da      	uxtb	r2, r3
 8005b02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b04:	1c59      	adds	r1, r3, #1
 8005b06:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005b08:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b0c:	b2d2      	uxtb	r2, r2
 8005b0e:	701a      	strb	r2, [r3, #0]
 8005b10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b12:	09db      	lsrs	r3, r3, #7
 8005b14:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b18:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b1a:	d8f0      	bhi.n	8005afe <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8005b1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005b22:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005b24:	b2d2      	uxtb	r2, r2
 8005b26:	701a      	strb	r2, [r3, #0]
 8005b28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b2a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8005b2c:	697b      	ldr	r3, [r7, #20]
 8005b2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b34:	e00b      	b.n	8005b4e <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8005b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b3c:	1c59      	adds	r1, r3, #1
 8005b3e:	6379      	str	r1, [r7, #52]	@ 0x34
 8005b40:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b44:	b2d2      	uxtb	r2, r2
 8005b46:	701a      	strb	r2, [r3, #0]
 8005b48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b4a:	09db      	lsrs	r3, r3, #7
 8005b4c:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b50:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b52:	d8f0      	bhi.n	8005b36 <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	1c5a      	adds	r2, r3, #1
 8005b58:	637a      	str	r2, [r7, #52]	@ 0x34
 8005b5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b5c:	b2d2      	uxtb	r2, r2
 8005b5e:	701a      	strb	r2, [r3, #0]
 8005b60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b62:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b6c:	e00b      	b.n	8005b86 <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8005b6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b70:	b2da      	uxtb	r2, r3
 8005b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b74:	1c59      	adds	r1, r3, #1
 8005b76:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005b78:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005b7c:	b2d2      	uxtb	r2, r2
 8005b7e:	701a      	strb	r2, [r3, #0]
 8005b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b82:	09db      	lsrs	r3, r3, #7
 8005b84:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005b86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b88:	2b7f      	cmp	r3, #127	@ 0x7f
 8005b8a:	d8f0      	bhi.n	8005b6e <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8005b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b94:	b2d2      	uxtb	r2, r2
 8005b96:	701a      	strb	r2, [r3, #0]
 8005b98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b9a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005ba2:	623b      	str	r3, [r7, #32]
 8005ba4:	e00b      	b.n	8005bbe <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8005ba6:	6a3b      	ldr	r3, [r7, #32]
 8005ba8:	b2da      	uxtb	r2, r3
 8005baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bac:	1c59      	adds	r1, r3, #1
 8005bae:	6279      	str	r1, [r7, #36]	@ 0x24
 8005bb0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005bb4:	b2d2      	uxtb	r2, r2
 8005bb6:	701a      	strb	r2, [r3, #0]
 8005bb8:	6a3b      	ldr	r3, [r7, #32]
 8005bba:	09db      	lsrs	r3, r3, #7
 8005bbc:	623b      	str	r3, [r7, #32]
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	2b7f      	cmp	r3, #127	@ 0x7f
 8005bc2:	d8f0      	bhi.n	8005ba6 <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	627a      	str	r2, [r7, #36]	@ 0x24
 8005bca:	6a3a      	ldr	r2, [r7, #32]
 8005bcc:	b2d2      	uxtb	r2, r2
 8005bce:	701a      	strb	r2, [r3, #0]
 8005bd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd2:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8005bd4:	68fa      	ldr	r2, [r7, #12]
 8005bd6:	6979      	ldr	r1, [r7, #20]
 8005bd8:	69b8      	ldr	r0, [r7, #24]
 8005bda:	f7ff f979 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f383 8811 	msr	BASEPRI, r3
}
 8005be4:	bf00      	nop
 8005be6:	3740      	adds	r7, #64	@ 0x40
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}
 8005bec:	2004c804 	.word	0x2004c804

08005bf0 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b08c      	sub	sp, #48	@ 0x30
 8005bf4:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8005bf6:	4b58      	ldr	r3, [pc, #352]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005bfc:	f3ef 8311 	mrs	r3, BASEPRI
 8005c00:	f04f 0120 	mov.w	r1, #32
 8005c04:	f381 8811 	msr	BASEPRI, r1
 8005c08:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005c0a:	4b53      	ldr	r3, [pc, #332]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	220a      	movs	r2, #10
 8005c10:	4952      	ldr	r1, [pc, #328]	@ (8005d5c <SEGGER_SYSVIEW_Start+0x16c>)
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fb04 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005c1e:	200a      	movs	r0, #10
 8005c20:	f7ff fe2a 	bl	8005878 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005c24:	f3ef 8311 	mrs	r3, BASEPRI
 8005c28:	f04f 0120 	mov.w	r1, #32
 8005c2c:	f381 8811 	msr	BASEPRI, r1
 8005c30:	60bb      	str	r3, [r7, #8]
 8005c32:	484b      	ldr	r0, [pc, #300]	@ (8005d60 <SEGGER_SYSVIEW_Start+0x170>)
 8005c34:	f7ff f85d 	bl	8004cf2 <_PreparePacket>
 8005c38:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c42:	4b45      	ldr	r3, [pc, #276]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005c44:	685b      	ldr	r3, [r3, #4]
 8005c46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c48:	e00b      	b.n	8005c62 <SEGGER_SYSVIEW_Start+0x72>
 8005c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c4c:	b2da      	uxtb	r2, r3
 8005c4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c50:	1c59      	adds	r1, r3, #1
 8005c52:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005c54:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c58:	b2d2      	uxtb	r2, r2
 8005c5a:	701a      	strb	r2, [r3, #0]
 8005c5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c5e:	09db      	lsrs	r3, r3, #7
 8005c60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005c62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c64:	2b7f      	cmp	r3, #127	@ 0x7f
 8005c66:	d8f0      	bhi.n	8005c4a <SEGGER_SYSVIEW_Start+0x5a>
 8005c68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005c70:	b2d2      	uxtb	r2, r2
 8005c72:	701a      	strb	r2, [r3, #0]
 8005c74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c76:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c7c:	4b36      	ldr	r3, [pc, #216]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005c7e:	689b      	ldr	r3, [r3, #8]
 8005c80:	623b      	str	r3, [r7, #32]
 8005c82:	e00b      	b.n	8005c9c <SEGGER_SYSVIEW_Start+0xac>
 8005c84:	6a3b      	ldr	r3, [r7, #32]
 8005c86:	b2da      	uxtb	r2, r3
 8005c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c8a:	1c59      	adds	r1, r3, #1
 8005c8c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005c8e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005c92:	b2d2      	uxtb	r2, r2
 8005c94:	701a      	strb	r2, [r3, #0]
 8005c96:	6a3b      	ldr	r3, [r7, #32]
 8005c98:	09db      	lsrs	r3, r3, #7
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	6a3b      	ldr	r3, [r7, #32]
 8005c9e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ca0:	d8f0      	bhi.n	8005c84 <SEGGER_SYSVIEW_Start+0x94>
 8005ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ca4:	1c5a      	adds	r2, r3, #1
 8005ca6:	627a      	str	r2, [r7, #36]	@ 0x24
 8005ca8:	6a3a      	ldr	r2, [r7, #32]
 8005caa:	b2d2      	uxtb	r2, r2
 8005cac:	701a      	strb	r2, [r3, #0]
 8005cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cb0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	61fb      	str	r3, [r7, #28]
 8005cb6:	4b28      	ldr	r3, [pc, #160]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005cb8:	691b      	ldr	r3, [r3, #16]
 8005cba:	61bb      	str	r3, [r7, #24]
 8005cbc:	e00b      	b.n	8005cd6 <SEGGER_SYSVIEW_Start+0xe6>
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	b2da      	uxtb	r2, r3
 8005cc2:	69fb      	ldr	r3, [r7, #28]
 8005cc4:	1c59      	adds	r1, r3, #1
 8005cc6:	61f9      	str	r1, [r7, #28]
 8005cc8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ccc:	b2d2      	uxtb	r2, r2
 8005cce:	701a      	strb	r2, [r3, #0]
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	09db      	lsrs	r3, r3, #7
 8005cd4:	61bb      	str	r3, [r7, #24]
 8005cd6:	69bb      	ldr	r3, [r7, #24]
 8005cd8:	2b7f      	cmp	r3, #127	@ 0x7f
 8005cda:	d8f0      	bhi.n	8005cbe <SEGGER_SYSVIEW_Start+0xce>
 8005cdc:	69fb      	ldr	r3, [r7, #28]
 8005cde:	1c5a      	adds	r2, r3, #1
 8005ce0:	61fa      	str	r2, [r7, #28]
 8005ce2:	69ba      	ldr	r2, [r7, #24]
 8005ce4:	b2d2      	uxtb	r2, r2
 8005ce6:	701a      	strb	r2, [r3, #0]
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	617b      	str	r3, [r7, #20]
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	e00b      	b.n	8005d0e <SEGGER_SYSVIEW_Start+0x11e>
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	b2da      	uxtb	r2, r3
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1c59      	adds	r1, r3, #1
 8005cfe:	6179      	str	r1, [r7, #20]
 8005d00:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005d04:	b2d2      	uxtb	r2, r2
 8005d06:	701a      	strb	r2, [r3, #0]
 8005d08:	693b      	ldr	r3, [r7, #16]
 8005d0a:	09db      	lsrs	r3, r3, #7
 8005d0c:	613b      	str	r3, [r7, #16]
 8005d0e:	693b      	ldr	r3, [r7, #16]
 8005d10:	2b7f      	cmp	r3, #127	@ 0x7f
 8005d12:	d8f0      	bhi.n	8005cf6 <SEGGER_SYSVIEW_Start+0x106>
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	1c5a      	adds	r2, r3, #1
 8005d18:	617a      	str	r2, [r7, #20]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	b2d2      	uxtb	r2, r2
 8005d1e:	701a      	strb	r2, [r3, #0]
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005d24:	2218      	movs	r2, #24
 8005d26:	6839      	ldr	r1, [r7, #0]
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f7ff f8d1 	bl	8004ed0 <_SendPacket>
      RECORD_END();
 8005d2e:	68bb      	ldr	r3, [r7, #8]
 8005d30:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005d34:	4b08      	ldr	r3, [pc, #32]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <SEGGER_SYSVIEW_Start+0x168>)
 8005d3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d40:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8005d42:	f000 f9eb 	bl	800611c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 8005d46:	f000 f9b1 	bl	80060ac <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005d4a:	f000 fc23 	bl	8006594 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005d4e:	bf00      	nop
 8005d50:	3730      	adds	r7, #48	@ 0x30
 8005d52:	46bd      	mov	sp, r7
 8005d54:	bd80      	pop	{r7, pc}
 8005d56:	bf00      	nop
 8005d58:	2004c7d4 	.word	0x2004c7d4
 8005d5c:	080071dc 	.word	0x080071dc
 8005d60:	2004c804 	.word	0x2004c804

08005d64 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005d6a:	f3ef 8311 	mrs	r3, BASEPRI
 8005d6e:	f04f 0120 	mov.w	r1, #32
 8005d72:	f381 8811 	msr	BASEPRI, r1
 8005d76:	607b      	str	r3, [r7, #4]
 8005d78:	480b      	ldr	r0, [pc, #44]	@ (8005da8 <SEGGER_SYSVIEW_Stop+0x44>)
 8005d7a:	f7fe ffba 	bl	8004cf2 <_PreparePacket>
 8005d7e:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005d80:	4b0a      	ldr	r3, [pc, #40]	@ (8005dac <SEGGER_SYSVIEW_Stop+0x48>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d007      	beq.n	8005d98 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005d88:	220b      	movs	r2, #11
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6838      	ldr	r0, [r7, #0]
 8005d8e:	f7ff f89f 	bl	8004ed0 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8005d92:	4b06      	ldr	r3, [pc, #24]	@ (8005dac <SEGGER_SYSVIEW_Stop+0x48>)
 8005d94:	2200      	movs	r2, #0
 8005d96:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f383 8811 	msr	BASEPRI, r3
}
 8005d9e:	bf00      	nop
 8005da0:	3708      	adds	r7, #8
 8005da2:	46bd      	mov	sp, r7
 8005da4:	bd80      	pop	{r7, pc}
 8005da6:	bf00      	nop
 8005da8:	2004c804 	.word	0x2004c804
 8005dac:	2004c7d4 	.word	0x2004c7d4

08005db0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b08c      	sub	sp, #48	@ 0x30
 8005db4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8005db6:	f3ef 8311 	mrs	r3, BASEPRI
 8005dba:	f04f 0120 	mov.w	r1, #32
 8005dbe:	f381 8811 	msr	BASEPRI, r1
 8005dc2:	60fb      	str	r3, [r7, #12]
 8005dc4:	4845      	ldr	r0, [pc, #276]	@ (8005edc <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 8005dc6:	f7fe ff94 	bl	8004cf2 <_PreparePacket>
 8005dca:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8005dcc:	68bb      	ldr	r3, [r7, #8]
 8005dce:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005dd4:	4b42      	ldr	r3, [pc, #264]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005dd6:	685b      	ldr	r3, [r3, #4]
 8005dd8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005dda:	e00b      	b.n	8005df4 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 8005ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dde:	b2da      	uxtb	r2, r3
 8005de0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005de2:	1c59      	adds	r1, r3, #1
 8005de4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005de6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005dea:	b2d2      	uxtb	r2, r2
 8005dec:	701a      	strb	r2, [r3, #0]
 8005dee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df0:	09db      	lsrs	r3, r3, #7
 8005df2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005df8:	d8f0      	bhi.n	8005ddc <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dfc:	1c5a      	adds	r2, r3, #1
 8005dfe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005e00:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e02:	b2d2      	uxtb	r2, r2
 8005e04:	701a      	strb	r2, [r3, #0]
 8005e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e08:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e0e:	4b34      	ldr	r3, [pc, #208]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e10:	689b      	ldr	r3, [r3, #8]
 8005e12:	623b      	str	r3, [r7, #32]
 8005e14:	e00b      	b.n	8005e2e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 8005e16:	6a3b      	ldr	r3, [r7, #32]
 8005e18:	b2da      	uxtb	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e1c:	1c59      	adds	r1, r3, #1
 8005e1e:	6279      	str	r1, [r7, #36]	@ 0x24
 8005e20:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e24:	b2d2      	uxtb	r2, r2
 8005e26:	701a      	strb	r2, [r3, #0]
 8005e28:	6a3b      	ldr	r3, [r7, #32]
 8005e2a:	09db      	lsrs	r3, r3, #7
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e32:	d8f0      	bhi.n	8005e16 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8005e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e36:	1c5a      	adds	r2, r3, #1
 8005e38:	627a      	str	r2, [r7, #36]	@ 0x24
 8005e3a:	6a3a      	ldr	r2, [r7, #32]
 8005e3c:	b2d2      	uxtb	r2, r2
 8005e3e:	701a      	strb	r2, [r3, #0]
 8005e40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e42:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	61fb      	str	r3, [r7, #28]
 8005e48:	4b25      	ldr	r3, [pc, #148]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005e4a:	691b      	ldr	r3, [r3, #16]
 8005e4c:	61bb      	str	r3, [r7, #24]
 8005e4e:	e00b      	b.n	8005e68 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	b2da      	uxtb	r2, r3
 8005e54:	69fb      	ldr	r3, [r7, #28]
 8005e56:	1c59      	adds	r1, r3, #1
 8005e58:	61f9      	str	r1, [r7, #28]
 8005e5a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e5e:	b2d2      	uxtb	r2, r2
 8005e60:	701a      	strb	r2, [r3, #0]
 8005e62:	69bb      	ldr	r3, [r7, #24]
 8005e64:	09db      	lsrs	r3, r3, #7
 8005e66:	61bb      	str	r3, [r7, #24]
 8005e68:	69bb      	ldr	r3, [r7, #24]
 8005e6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005e6c:	d8f0      	bhi.n	8005e50 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	1c5a      	adds	r2, r3, #1
 8005e72:	61fa      	str	r2, [r7, #28]
 8005e74:	69ba      	ldr	r2, [r7, #24]
 8005e76:	b2d2      	uxtb	r2, r2
 8005e78:	701a      	strb	r2, [r3, #0]
 8005e7a:	69fb      	ldr	r3, [r7, #28]
 8005e7c:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	617b      	str	r3, [r7, #20]
 8005e82:	2300      	movs	r3, #0
 8005e84:	613b      	str	r3, [r7, #16]
 8005e86:	e00b      	b.n	8005ea0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	b2da      	uxtb	r2, r3
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	6179      	str	r1, [r7, #20]
 8005e92:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005e96:	b2d2      	uxtb	r2, r2
 8005e98:	701a      	strb	r2, [r3, #0]
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	09db      	lsrs	r3, r3, #7
 8005e9e:	613b      	str	r3, [r7, #16]
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ea4:	d8f0      	bhi.n	8005e88 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 8005ea6:	697b      	ldr	r3, [r7, #20]
 8005ea8:	1c5a      	adds	r2, r3, #1
 8005eaa:	617a      	str	r2, [r7, #20]
 8005eac:	693a      	ldr	r2, [r7, #16]
 8005eae:	b2d2      	uxtb	r2, r2
 8005eb0:	701a      	strb	r2, [r3, #0]
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8005eb6:	2218      	movs	r2, #24
 8005eb8:	6879      	ldr	r1, [r7, #4]
 8005eba:	68b8      	ldr	r0, [r7, #8]
 8005ebc:	f7ff f808 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 8005ec6:	4b06      	ldr	r3, [pc, #24]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 8005ece:	4b04      	ldr	r3, [pc, #16]	@ (8005ee0 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005ed0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed2:	4798      	blx	r3
  }
}
 8005ed4:	bf00      	nop
 8005ed6:	3730      	adds	r7, #48	@ 0x30
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	2004c804 	.word	0x2004c804
 8005ee0:	2004c7d4 	.word	0x2004c7d4

08005ee4 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b092      	sub	sp, #72	@ 0x48
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 8005eec:	f3ef 8311 	mrs	r3, BASEPRI
 8005ef0:	f04f 0120 	mov.w	r1, #32
 8005ef4:	f381 8811 	msr	BASEPRI, r1
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	486a      	ldr	r0, [pc, #424]	@ (80060a4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005efc:	f7fe fef9 	bl	8004cf2 <_PreparePacket>
 8005f00:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005f02:	693b      	ldr	r3, [r7, #16]
 8005f04:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	647b      	str	r3, [r7, #68]	@ 0x44
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	4b66      	ldr	r3, [pc, #408]	@ (80060a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005f10:	691b      	ldr	r3, [r3, #16]
 8005f12:	1ad3      	subs	r3, r2, r3
 8005f14:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f16:	e00b      	b.n	8005f30 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005f18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f1a:	b2da      	uxtb	r2, r3
 8005f1c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f1e:	1c59      	adds	r1, r3, #1
 8005f20:	6479      	str	r1, [r7, #68]	@ 0x44
 8005f22:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f26:	b2d2      	uxtb	r2, r2
 8005f28:	701a      	strb	r2, [r3, #0]
 8005f2a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f2c:	09db      	lsrs	r3, r3, #7
 8005f2e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005f30:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f32:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f34:	d8f0      	bhi.n	8005f18 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 8005f36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f38:	1c5a      	adds	r2, r3, #1
 8005f3a:	647a      	str	r2, [r7, #68]	@ 0x44
 8005f3c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005f3e:	b2d2      	uxtb	r2, r2
 8005f40:	701a      	strb	r2, [r3, #0]
 8005f42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005f44:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689b      	ldr	r3, [r3, #8]
 8005f4e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f50:	e00b      	b.n	8005f6a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8005f52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f58:	1c59      	adds	r1, r3, #1
 8005f5a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005f5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f60:	b2d2      	uxtb	r2, r2
 8005f62:	701a      	strb	r2, [r3, #0]
 8005f64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f66:	09db      	lsrs	r3, r3, #7
 8005f68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f6e:	d8f0      	bhi.n	8005f52 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005f70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005f76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f78:	b2d2      	uxtb	r2, r2
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f7e:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	685b      	ldr	r3, [r3, #4]
 8005f84:	2220      	movs	r2, #32
 8005f86:	4619      	mov	r1, r3
 8005f88:	68f8      	ldr	r0, [r7, #12]
 8005f8a:	f7fe fe65 	bl	8004c58 <_EncodeStr>
 8005f8e:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005f90:	2209      	movs	r2, #9
 8005f92:	68f9      	ldr	r1, [r7, #12]
 8005f94:	6938      	ldr	r0, [r7, #16]
 8005f96:	f7fe ff9b 	bl	8004ed0 <_SendPacket>
  //
  pPayload = pPayloadStart;
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	637b      	str	r3, [r7, #52]	@ 0x34
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b40      	ldr	r3, [pc, #256]	@ (80060a8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005fa8:	691b      	ldr	r3, [r3, #16]
 8005faa:	1ad3      	subs	r3, r2, r3
 8005fac:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fae:	e00b      	b.n	8005fc8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 8005fb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb2:	b2da      	uxtb	r2, r3
 8005fb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fb6:	1c59      	adds	r1, r3, #1
 8005fb8:	6379      	str	r1, [r7, #52]	@ 0x34
 8005fba:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005fbe:	b2d2      	uxtb	r2, r2
 8005fc0:	701a      	strb	r2, [r3, #0]
 8005fc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fc4:	09db      	lsrs	r3, r3, #7
 8005fc6:	633b      	str	r3, [r7, #48]	@ 0x30
 8005fc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fca:	2b7f      	cmp	r3, #127	@ 0x7f
 8005fcc:	d8f0      	bhi.n	8005fb0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 8005fce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fd0:	1c5a      	adds	r2, r3, #1
 8005fd2:	637a      	str	r2, [r7, #52]	@ 0x34
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd6:	b2d2      	uxtb	r2, r2
 8005fd8:	701a      	strb	r2, [r3, #0]
 8005fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fdc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005fe8:	e00b      	b.n	8006002 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 8005fea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fec:	b2da      	uxtb	r2, r3
 8005fee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ff0:	1c59      	adds	r1, r3, #1
 8005ff2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8005ff4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ff8:	b2d2      	uxtb	r2, r2
 8005ffa:	701a      	strb	r2, [r3, #0]
 8005ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ffe:	09db      	lsrs	r3, r3, #7
 8006000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006004:	2b7f      	cmp	r3, #127	@ 0x7f
 8006006:	d8f0      	bhi.n	8005fea <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8006008:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800600a:	1c5a      	adds	r2, r3, #1
 800600c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800600e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006010:	b2d2      	uxtb	r2, r2
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006016:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	627b      	str	r3, [r7, #36]	@ 0x24
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	691b      	ldr	r3, [r3, #16]
 8006020:	623b      	str	r3, [r7, #32]
 8006022:	e00b      	b.n	800603c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	b2da      	uxtb	r2, r3
 8006028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800602a:	1c59      	adds	r1, r3, #1
 800602c:	6279      	str	r1, [r7, #36]	@ 0x24
 800602e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006032:	b2d2      	uxtb	r2, r2
 8006034:	701a      	strb	r2, [r3, #0]
 8006036:	6a3b      	ldr	r3, [r7, #32]
 8006038:	09db      	lsrs	r3, r3, #7
 800603a:	623b      	str	r3, [r7, #32]
 800603c:	6a3b      	ldr	r3, [r7, #32]
 800603e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006040:	d8f0      	bhi.n	8006024 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006042:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006044:	1c5a      	adds	r2, r3, #1
 8006046:	627a      	str	r2, [r7, #36]	@ 0x24
 8006048:	6a3a      	ldr	r2, [r7, #32]
 800604a:	b2d2      	uxtb	r2, r2
 800604c:	701a      	strb	r2, [r3, #0]
 800604e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006050:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	61fb      	str	r3, [r7, #28]
 8006056:	2300      	movs	r3, #0
 8006058:	61bb      	str	r3, [r7, #24]
 800605a:	e00b      	b.n	8006074 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800605c:	69bb      	ldr	r3, [r7, #24]
 800605e:	b2da      	uxtb	r2, r3
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	1c59      	adds	r1, r3, #1
 8006064:	61f9      	str	r1, [r7, #28]
 8006066:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800606a:	b2d2      	uxtb	r2, r2
 800606c:	701a      	strb	r2, [r3, #0]
 800606e:	69bb      	ldr	r3, [r7, #24]
 8006070:	09db      	lsrs	r3, r3, #7
 8006072:	61bb      	str	r3, [r7, #24]
 8006074:	69bb      	ldr	r3, [r7, #24]
 8006076:	2b7f      	cmp	r3, #127	@ 0x7f
 8006078:	d8f0      	bhi.n	800605c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800607a:	69fb      	ldr	r3, [r7, #28]
 800607c:	1c5a      	adds	r2, r3, #1
 800607e:	61fa      	str	r2, [r7, #28]
 8006080:	69ba      	ldr	r2, [r7, #24]
 8006082:	b2d2      	uxtb	r2, r2
 8006084:	701a      	strb	r2, [r3, #0]
 8006086:	69fb      	ldr	r3, [r7, #28]
 8006088:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800608a:	2215      	movs	r2, #21
 800608c:	68f9      	ldr	r1, [r7, #12]
 800608e:	6938      	ldr	r0, [r7, #16]
 8006090:	f7fe ff1e 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	f383 8811 	msr	BASEPRI, r3
}
 800609a:	bf00      	nop
 800609c:	3748      	adds	r7, #72	@ 0x48
 800609e:	46bd      	mov	sp, r7
 80060a0:	bd80      	pop	{r7, pc}
 80060a2:	bf00      	nop
 80060a4:	2004c804 	.word	0x2004c804
 80060a8:	2004c7d4 	.word	0x2004c7d4

080060ac <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80060ac:	b580      	push	{r7, lr}
 80060ae:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80060b0:	4b07      	ldr	r3, [pc, #28]	@ (80060d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060b2:	6a1b      	ldr	r3, [r3, #32]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80060b8:	4b05      	ldr	r3, [pc, #20]	@ (80060d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060ba:	6a1b      	ldr	r3, [r3, #32]
 80060bc:	685b      	ldr	r3, [r3, #4]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d003      	beq.n	80060ca <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80060c2:	4b03      	ldr	r3, [pc, #12]	@ (80060d0 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4798      	blx	r3
  }
}
 80060ca:	bf00      	nop
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	2004c7d4 	.word	0x2004c7d4

080060d4 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060dc:	f3ef 8311 	mrs	r3, BASEPRI
 80060e0:	f04f 0120 	mov.w	r1, #32
 80060e4:	f381 8811 	msr	BASEPRI, r1
 80060e8:	617b      	str	r3, [r7, #20]
 80060ea:	480b      	ldr	r0, [pc, #44]	@ (8006118 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80060ec:	f7fe fe01 	bl	8004cf2 <_PreparePacket>
 80060f0:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80060f2:	2280      	movs	r2, #128	@ 0x80
 80060f4:	6879      	ldr	r1, [r7, #4]
 80060f6:	6938      	ldr	r0, [r7, #16]
 80060f8:	f7fe fdae 	bl	8004c58 <_EncodeStr>
 80060fc:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80060fe:	220e      	movs	r2, #14
 8006100:	68f9      	ldr	r1, [r7, #12]
 8006102:	6938      	ldr	r0, [r7, #16]
 8006104:	f7fe fee4 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	f383 8811 	msr	BASEPRI, r3
}
 800610e:	bf00      	nop
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}
 8006116:	bf00      	nop
 8006118:	2004c804 	.word	0x2004c804

0800611c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800611c:	b590      	push	{r4, r7, lr}
 800611e:	b083      	sub	sp, #12
 8006120:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006122:	4b15      	ldr	r3, [pc, #84]	@ (8006178 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	2b00      	cmp	r3, #0
 8006128:	d01a      	beq.n	8006160 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800612a:	4b13      	ldr	r3, [pc, #76]	@ (8006178 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d015      	beq.n	8006160 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006134:	4b10      	ldr	r3, [pc, #64]	@ (8006178 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006136:	6a1b      	ldr	r3, [r3, #32]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4798      	blx	r3
 800613c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006140:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006142:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006146:	f04f 0200 	mov.w	r2, #0
 800614a:	f04f 0300 	mov.w	r3, #0
 800614e:	000a      	movs	r2, r1
 8006150:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006152:	4613      	mov	r3, r2
 8006154:	461a      	mov	r2, r3
 8006156:	4621      	mov	r1, r4
 8006158:	200d      	movs	r0, #13
 800615a:	f7ff fbe7 	bl	800592c <SEGGER_SYSVIEW_RecordU32x2>
 800615e:	e006      	b.n	800616e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006160:	4b06      	ldr	r3, [pc, #24]	@ (800617c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	4619      	mov	r1, r3
 8006166:	200c      	movs	r0, #12
 8006168:	f7ff fba4 	bl	80058b4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800616c:	bf00      	nop
 800616e:	bf00      	nop
 8006170:	370c      	adds	r7, #12
 8006172:	46bd      	mov	sp, r7
 8006174:	bd90      	pop	{r4, r7, pc}
 8006176:	bf00      	nop
 8006178:	2004c7d4 	.word	0x2004c7d4
 800617c:	e0001004 	.word	0xe0001004

08006180 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006180:	b580      	push	{r7, lr}
 8006182:	b086      	sub	sp, #24
 8006184:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	f04f 0120 	mov.w	r1, #32
 800618e:	f381 8811 	msr	BASEPRI, r1
 8006192:	60fb      	str	r3, [r7, #12]
 8006194:	4819      	ldr	r0, [pc, #100]	@ (80061fc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006196:	f7fe fdac 	bl	8004cf2 <_PreparePacket>
 800619a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 80061a0:	4b17      	ldr	r3, [pc, #92]	@ (8006200 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061a8:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	617b      	str	r3, [r7, #20]
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	613b      	str	r3, [r7, #16]
 80061b2:	e00b      	b.n	80061cc <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	b2da      	uxtb	r2, r3
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1c59      	adds	r1, r3, #1
 80061bc:	6179      	str	r1, [r7, #20]
 80061be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061c2:	b2d2      	uxtb	r2, r2
 80061c4:	701a      	strb	r2, [r3, #0]
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	09db      	lsrs	r3, r3, #7
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b7f      	cmp	r3, #127	@ 0x7f
 80061d0:	d8f0      	bhi.n	80061b4 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 80061d2:	697b      	ldr	r3, [r7, #20]
 80061d4:	1c5a      	adds	r2, r3, #1
 80061d6:	617a      	str	r2, [r7, #20]
 80061d8:	693a      	ldr	r2, [r7, #16]
 80061da:	b2d2      	uxtb	r2, r2
 80061dc:	701a      	strb	r2, [r3, #0]
 80061de:	697b      	ldr	r3, [r7, #20]
 80061e0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80061e2:	2202      	movs	r2, #2
 80061e4:	6879      	ldr	r1, [r7, #4]
 80061e6:	68b8      	ldr	r0, [r7, #8]
 80061e8:	f7fe fe72 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	f383 8811 	msr	BASEPRI, r3
}
 80061f2:	bf00      	nop
 80061f4:	3718      	adds	r7, #24
 80061f6:	46bd      	mov	sp, r7
 80061f8:	bd80      	pop	{r7, pc}
 80061fa:	bf00      	nop
 80061fc:	2004c804 	.word	0x2004c804
 8006200:	e000ed04 	.word	0xe000ed04

08006204 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800620a:	f3ef 8311 	mrs	r3, BASEPRI
 800620e:	f04f 0120 	mov.w	r1, #32
 8006212:	f381 8811 	msr	BASEPRI, r1
 8006216:	607b      	str	r3, [r7, #4]
 8006218:	4807      	ldr	r0, [pc, #28]	@ (8006238 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 800621a:	f7fe fd6a 	bl	8004cf2 <_PreparePacket>
 800621e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006220:	2203      	movs	r2, #3
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6838      	ldr	r0, [r7, #0]
 8006226:	f7fe fe53 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f383 8811 	msr	BASEPRI, r3
}
 8006230:	bf00      	nop
 8006232:	3708      	adds	r7, #8
 8006234:	46bd      	mov	sp, r7
 8006236:	bd80      	pop	{r7, pc}
 8006238:	2004c804 	.word	0x2004c804

0800623c <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 800623c:	b580      	push	{r7, lr}
 800623e:	b082      	sub	sp, #8
 8006240:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006242:	f3ef 8311 	mrs	r3, BASEPRI
 8006246:	f04f 0120 	mov.w	r1, #32
 800624a:	f381 8811 	msr	BASEPRI, r1
 800624e:	607b      	str	r3, [r7, #4]
 8006250:	4807      	ldr	r0, [pc, #28]	@ (8006270 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006252:	f7fe fd4e 	bl	8004cf2 <_PreparePacket>
 8006256:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006258:	2212      	movs	r2, #18
 800625a:	6839      	ldr	r1, [r7, #0]
 800625c:	6838      	ldr	r0, [r7, #0]
 800625e:	f7fe fe37 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f383 8811 	msr	BASEPRI, r3
}
 8006268:	bf00      	nop
 800626a:	3708      	adds	r7, #8
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}
 8006270:	2004c804 	.word	0x2004c804

08006274 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006274:	b580      	push	{r7, lr}
 8006276:	b082      	sub	sp, #8
 8006278:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800627a:	f3ef 8311 	mrs	r3, BASEPRI
 800627e:	f04f 0120 	mov.w	r1, #32
 8006282:	f381 8811 	msr	BASEPRI, r1
 8006286:	607b      	str	r3, [r7, #4]
 8006288:	4807      	ldr	r0, [pc, #28]	@ (80062a8 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800628a:	f7fe fd32 	bl	8004cf2 <_PreparePacket>
 800628e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006290:	2211      	movs	r2, #17
 8006292:	6839      	ldr	r1, [r7, #0]
 8006294:	6838      	ldr	r0, [r7, #0]
 8006296:	f7fe fe1b 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f383 8811 	msr	BASEPRI, r3
}
 80062a0:	bf00      	nop
 80062a2:	3708      	adds	r7, #8
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	2004c804 	.word	0x2004c804

080062ac <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b088      	sub	sp, #32
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80062b4:	f3ef 8311 	mrs	r3, BASEPRI
 80062b8:	f04f 0120 	mov.w	r1, #32
 80062bc:	f381 8811 	msr	BASEPRI, r1
 80062c0:	617b      	str	r3, [r7, #20]
 80062c2:	4819      	ldr	r0, [pc, #100]	@ (8006328 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 80062c4:	f7fe fd15 	bl	8004cf2 <_PreparePacket>
 80062c8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80062ce:	4b17      	ldr	r3, [pc, #92]	@ (800632c <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 80062d0:	691b      	ldr	r3, [r3, #16]
 80062d2:	687a      	ldr	r2, [r7, #4]
 80062d4:	1ad3      	subs	r3, r2, r3
 80062d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	61fb      	str	r3, [r7, #28]
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	61bb      	str	r3, [r7, #24]
 80062e0:	e00b      	b.n	80062fa <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80062e2:	69bb      	ldr	r3, [r7, #24]
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	69fb      	ldr	r3, [r7, #28]
 80062e8:	1c59      	adds	r1, r3, #1
 80062ea:	61f9      	str	r1, [r7, #28]
 80062ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062f0:	b2d2      	uxtb	r2, r2
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	09db      	lsrs	r3, r3, #7
 80062f8:	61bb      	str	r3, [r7, #24]
 80062fa:	69bb      	ldr	r3, [r7, #24]
 80062fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80062fe:	d8f0      	bhi.n	80062e2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	1c5a      	adds	r2, r3, #1
 8006304:	61fa      	str	r2, [r7, #28]
 8006306:	69ba      	ldr	r2, [r7, #24]
 8006308:	b2d2      	uxtb	r2, r2
 800630a:	701a      	strb	r2, [r3, #0]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006310:	2208      	movs	r2, #8
 8006312:	68f9      	ldr	r1, [r7, #12]
 8006314:	6938      	ldr	r0, [r7, #16]
 8006316:	f7fe fddb 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	f383 8811 	msr	BASEPRI, r3
}
 8006320:	bf00      	nop
 8006322:	3720      	adds	r7, #32
 8006324:	46bd      	mov	sp, r7
 8006326:	bd80      	pop	{r7, pc}
 8006328:	2004c804 	.word	0x2004c804
 800632c:	2004c7d4 	.word	0x2004c7d4

08006330 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b088      	sub	sp, #32
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006338:	f3ef 8311 	mrs	r3, BASEPRI
 800633c:	f04f 0120 	mov.w	r1, #32
 8006340:	f381 8811 	msr	BASEPRI, r1
 8006344:	617b      	str	r3, [r7, #20]
 8006346:	4819      	ldr	r0, [pc, #100]	@ (80063ac <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006348:	f7fe fcd3 	bl	8004cf2 <_PreparePacket>
 800634c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006352:	4b17      	ldr	r3, [pc, #92]	@ (80063b0 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	1ad3      	subs	r3, r2, r3
 800635a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	61fb      	str	r3, [r7, #28]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	61bb      	str	r3, [r7, #24]
 8006364:	e00b      	b.n	800637e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	b2da      	uxtb	r2, r3
 800636a:	69fb      	ldr	r3, [r7, #28]
 800636c:	1c59      	adds	r1, r3, #1
 800636e:	61f9      	str	r1, [r7, #28]
 8006370:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006374:	b2d2      	uxtb	r2, r2
 8006376:	701a      	strb	r2, [r3, #0]
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	09db      	lsrs	r3, r3, #7
 800637c:	61bb      	str	r3, [r7, #24]
 800637e:	69bb      	ldr	r3, [r7, #24]
 8006380:	2b7f      	cmp	r3, #127	@ 0x7f
 8006382:	d8f0      	bhi.n	8006366 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006384:	69fb      	ldr	r3, [r7, #28]
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	61fa      	str	r2, [r7, #28]
 800638a:	69ba      	ldr	r2, [r7, #24]
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006394:	2204      	movs	r2, #4
 8006396:	68f9      	ldr	r1, [r7, #12]
 8006398:	6938      	ldr	r0, [r7, #16]
 800639a:	f7fe fd99 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	f383 8811 	msr	BASEPRI, r3
}
 80063a4:	bf00      	nop
 80063a6:	3720      	adds	r7, #32
 80063a8:	46bd      	mov	sp, r7
 80063aa:	bd80      	pop	{r7, pc}
 80063ac:	2004c804 	.word	0x2004c804
 80063b0:	2004c7d4 	.word	0x2004c7d4

080063b4 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b088      	sub	sp, #32
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80063bc:	f3ef 8311 	mrs	r3, BASEPRI
 80063c0:	f04f 0120 	mov.w	r1, #32
 80063c4:	f381 8811 	msr	BASEPRI, r1
 80063c8:	617b      	str	r3, [r7, #20]
 80063ca:	4819      	ldr	r0, [pc, #100]	@ (8006430 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 80063cc:	f7fe fc91 	bl	8004cf2 <_PreparePacket>
 80063d0:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 80063d6:	4b17      	ldr	r3, [pc, #92]	@ (8006434 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	1ad3      	subs	r3, r2, r3
 80063de:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	61bb      	str	r3, [r7, #24]
 80063e8:	e00b      	b.n	8006402 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80063ea:	69bb      	ldr	r3, [r7, #24]
 80063ec:	b2da      	uxtb	r2, r3
 80063ee:	69fb      	ldr	r3, [r7, #28]
 80063f0:	1c59      	adds	r1, r3, #1
 80063f2:	61f9      	str	r1, [r7, #28]
 80063f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063f8:	b2d2      	uxtb	r2, r2
 80063fa:	701a      	strb	r2, [r3, #0]
 80063fc:	69bb      	ldr	r3, [r7, #24]
 80063fe:	09db      	lsrs	r3, r3, #7
 8006400:	61bb      	str	r3, [r7, #24]
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b7f      	cmp	r3, #127	@ 0x7f
 8006406:	d8f0      	bhi.n	80063ea <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	1c5a      	adds	r2, r3, #1
 800640c:	61fa      	str	r2, [r7, #28]
 800640e:	69ba      	ldr	r2, [r7, #24]
 8006410:	b2d2      	uxtb	r2, r2
 8006412:	701a      	strb	r2, [r3, #0]
 8006414:	69fb      	ldr	r3, [r7, #28]
 8006416:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006418:	2206      	movs	r2, #6
 800641a:	68f9      	ldr	r1, [r7, #12]
 800641c:	6938      	ldr	r0, [r7, #16]
 800641e:	f7fe fd57 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f383 8811 	msr	BASEPRI, r3
}
 8006428:	bf00      	nop
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	2004c804 	.word	0x2004c804
 8006434:	2004c7d4 	.word	0x2004c7d4

08006438 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006440:	4b04      	ldr	r3, [pc, #16]	@ (8006454 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006442:	691b      	ldr	r3, [r3, #16]
 8006444:	687a      	ldr	r2, [r7, #4]
 8006446:	1ad3      	subs	r3, r2, r3
}
 8006448:	4618      	mov	r0, r3
 800644a:	370c      	adds	r7, #12
 800644c:	46bd      	mov	sp, r7
 800644e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006452:	4770      	bx	lr
 8006454:	2004c7d4 	.word	0x2004c7d4

08006458 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006458:	b580      	push	{r7, lr}
 800645a:	b08c      	sub	sp, #48	@ 0x30
 800645c:	af00      	add	r7, sp, #0
 800645e:	4603      	mov	r3, r0
 8006460:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006462:	4b3b      	ldr	r3, [pc, #236]	@ (8006550 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d06d      	beq.n	8006546 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800646a:	4b39      	ldr	r3, [pc, #228]	@ (8006550 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006470:	2300      	movs	r3, #0
 8006472:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006474:	e008      	b.n	8006488 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800647c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d007      	beq.n	8006492 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006484:	3301      	adds	r3, #1
 8006486:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800648c:	429a      	cmp	r2, r3
 800648e:	d3f2      	bcc.n	8006476 <SEGGER_SYSVIEW_SendModule+0x1e>
 8006490:	e000      	b.n	8006494 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006492:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006496:	2b00      	cmp	r3, #0
 8006498:	d055      	beq.n	8006546 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800649a:	f3ef 8311 	mrs	r3, BASEPRI
 800649e:	f04f 0120 	mov.w	r1, #32
 80064a2:	f381 8811 	msr	BASEPRI, r1
 80064a6:	617b      	str	r3, [r7, #20]
 80064a8:	482a      	ldr	r0, [pc, #168]	@ (8006554 <SEGGER_SYSVIEW_SendModule+0xfc>)
 80064aa:	f7fe fc22 	bl	8004cf2 <_PreparePacket>
 80064ae:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b8:	79fb      	ldrb	r3, [r7, #7]
 80064ba:	623b      	str	r3, [r7, #32]
 80064bc:	e00b      	b.n	80064d6 <SEGGER_SYSVIEW_SendModule+0x7e>
 80064be:	6a3b      	ldr	r3, [r7, #32]
 80064c0:	b2da      	uxtb	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c4:	1c59      	adds	r1, r3, #1
 80064c6:	6279      	str	r1, [r7, #36]	@ 0x24
 80064c8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064cc:	b2d2      	uxtb	r2, r2
 80064ce:	701a      	strb	r2, [r3, #0]
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	09db      	lsrs	r3, r3, #7
 80064d4:	623b      	str	r3, [r7, #32]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80064da:	d8f0      	bhi.n	80064be <SEGGER_SYSVIEW_SendModule+0x66>
 80064dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064de:	1c5a      	adds	r2, r3, #1
 80064e0:	627a      	str	r2, [r7, #36]	@ 0x24
 80064e2:	6a3a      	ldr	r2, [r7, #32]
 80064e4:	b2d2      	uxtb	r2, r2
 80064e6:	701a      	strb	r2, [r3, #0]
 80064e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ea:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	61fb      	str	r3, [r7, #28]
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	689b      	ldr	r3, [r3, #8]
 80064f4:	61bb      	str	r3, [r7, #24]
 80064f6:	e00b      	b.n	8006510 <SEGGER_SYSVIEW_SendModule+0xb8>
 80064f8:	69bb      	ldr	r3, [r7, #24]
 80064fa:	b2da      	uxtb	r2, r3
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1c59      	adds	r1, r3, #1
 8006500:	61f9      	str	r1, [r7, #28]
 8006502:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006506:	b2d2      	uxtb	r2, r2
 8006508:	701a      	strb	r2, [r3, #0]
 800650a:	69bb      	ldr	r3, [r7, #24]
 800650c:	09db      	lsrs	r3, r3, #7
 800650e:	61bb      	str	r3, [r7, #24]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	2b7f      	cmp	r3, #127	@ 0x7f
 8006514:	d8f0      	bhi.n	80064f8 <SEGGER_SYSVIEW_SendModule+0xa0>
 8006516:	69fb      	ldr	r3, [r7, #28]
 8006518:	1c5a      	adds	r2, r3, #1
 800651a:	61fa      	str	r2, [r7, #28]
 800651c:	69ba      	ldr	r2, [r7, #24]
 800651e:	b2d2      	uxtb	r2, r2
 8006520:	701a      	strb	r2, [r3, #0]
 8006522:	69fb      	ldr	r3, [r7, #28]
 8006524:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006526:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	2280      	movs	r2, #128	@ 0x80
 800652c:	4619      	mov	r1, r3
 800652e:	68f8      	ldr	r0, [r7, #12]
 8006530:	f7fe fb92 	bl	8004c58 <_EncodeStr>
 8006534:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006536:	2216      	movs	r2, #22
 8006538:	68f9      	ldr	r1, [r7, #12]
 800653a:	6938      	ldr	r0, [r7, #16]
 800653c:	f7fe fcc8 	bl	8004ed0 <_SendPacket>
      RECORD_END();
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006546:	bf00      	nop
 8006548:	3730      	adds	r7, #48	@ 0x30
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	2004c7fc 	.word	0x2004c7fc
 8006554:	2004c804 	.word	0x2004c804

08006558 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800655e:	4b0c      	ldr	r3, [pc, #48]	@ (8006590 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00f      	beq.n	8006586 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006566:	4b0a      	ldr	r3, [pc, #40]	@ (8006590 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d002      	beq.n	800657a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	691b      	ldr	r3, [r3, #16]
 800657e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d1f2      	bne.n	800656c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006586:	bf00      	nop
 8006588:	3708      	adds	r7, #8
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	2004c7fc 	.word	0x2004c7fc

08006594 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006594:	b580      	push	{r7, lr}
 8006596:	b086      	sub	sp, #24
 8006598:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800659a:	f3ef 8311 	mrs	r3, BASEPRI
 800659e:	f04f 0120 	mov.w	r1, #32
 80065a2:	f381 8811 	msr	BASEPRI, r1
 80065a6:	60fb      	str	r3, [r7, #12]
 80065a8:	4817      	ldr	r0, [pc, #92]	@ (8006608 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 80065aa:	f7fe fba2 	bl	8004cf2 <_PreparePacket>
 80065ae:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	617b      	str	r3, [r7, #20]
 80065b8:	4b14      	ldr	r3, [pc, #80]	@ (800660c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 80065ba:	781b      	ldrb	r3, [r3, #0]
 80065bc:	613b      	str	r3, [r7, #16]
 80065be:	e00b      	b.n	80065d8 <SEGGER_SYSVIEW_SendNumModules+0x44>
 80065c0:	693b      	ldr	r3, [r7, #16]
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	1c59      	adds	r1, r3, #1
 80065c8:	6179      	str	r1, [r7, #20]
 80065ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065ce:	b2d2      	uxtb	r2, r2
 80065d0:	701a      	strb	r2, [r3, #0]
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	09db      	lsrs	r3, r3, #7
 80065d6:	613b      	str	r3, [r7, #16]
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	2b7f      	cmp	r3, #127	@ 0x7f
 80065dc:	d8f0      	bhi.n	80065c0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	1c5a      	adds	r2, r3, #1
 80065e2:	617a      	str	r2, [r7, #20]
 80065e4:	693a      	ldr	r2, [r7, #16]
 80065e6:	b2d2      	uxtb	r2, r2
 80065e8:	701a      	strb	r2, [r3, #0]
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80065ee:	221b      	movs	r2, #27
 80065f0:	6879      	ldr	r1, [r7, #4]
 80065f2:	68b8      	ldr	r0, [r7, #8]
 80065f4:	f7fe fc6c 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	f383 8811 	msr	BASEPRI, r3
}
 80065fe:	bf00      	nop
 8006600:	3718      	adds	r7, #24
 8006602:	46bd      	mov	sp, r7
 8006604:	bd80      	pop	{r7, pc}
 8006606:	bf00      	nop
 8006608:	2004c804 	.word	0x2004c804
 800660c:	2004c800 	.word	0x2004c800

08006610 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006610:	b40f      	push	{r0, r1, r2, r3}
 8006612:	b580      	push	{r7, lr}
 8006614:	b082      	sub	sp, #8
 8006616:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800661e:	1d3b      	adds	r3, r7, #4
 8006620:	461a      	mov	r2, r3
 8006622:	2100      	movs	r1, #0
 8006624:	6938      	ldr	r0, [r7, #16]
 8006626:	f7fe fedb 	bl	80053e0 <_VPrintTarget>
  va_end(ParamList);
}
 800662a:	bf00      	nop
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006634:	b004      	add	sp, #16
 8006636:	4770      	bx	lr

08006638 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006638:	b580      	push	{r7, lr}
 800663a:	b08a      	sub	sp, #40	@ 0x28
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006640:	f3ef 8311 	mrs	r3, BASEPRI
 8006644:	f04f 0120 	mov.w	r1, #32
 8006648:	f381 8811 	msr	BASEPRI, r1
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	4827      	ldr	r0, [pc, #156]	@ (80066ec <SEGGER_SYSVIEW_Warn+0xb4>)
 8006650:	f7fe fb4f 	bl	8004cf2 <_PreparePacket>
 8006654:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006656:	2280      	movs	r2, #128	@ 0x80
 8006658:	6879      	ldr	r1, [r7, #4]
 800665a:	6938      	ldr	r0, [r7, #16]
 800665c:	f7fe fafc 	bl	8004c58 <_EncodeStr>
 8006660:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	627b      	str	r3, [r7, #36]	@ 0x24
 8006666:	2301      	movs	r3, #1
 8006668:	623b      	str	r3, [r7, #32]
 800666a:	e00b      	b.n	8006684 <SEGGER_SYSVIEW_Warn+0x4c>
 800666c:	6a3b      	ldr	r3, [r7, #32]
 800666e:	b2da      	uxtb	r2, r3
 8006670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006672:	1c59      	adds	r1, r3, #1
 8006674:	6279      	str	r1, [r7, #36]	@ 0x24
 8006676:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800667a:	b2d2      	uxtb	r2, r2
 800667c:	701a      	strb	r2, [r3, #0]
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	09db      	lsrs	r3, r3, #7
 8006682:	623b      	str	r3, [r7, #32]
 8006684:	6a3b      	ldr	r3, [r7, #32]
 8006686:	2b7f      	cmp	r3, #127	@ 0x7f
 8006688:	d8f0      	bhi.n	800666c <SEGGER_SYSVIEW_Warn+0x34>
 800668a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800668c:	1c5a      	adds	r2, r3, #1
 800668e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006690:	6a3a      	ldr	r2, [r7, #32]
 8006692:	b2d2      	uxtb	r2, r2
 8006694:	701a      	strb	r2, [r3, #0]
 8006696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006698:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	61fb      	str	r3, [r7, #28]
 800669e:	2300      	movs	r3, #0
 80066a0:	61bb      	str	r3, [r7, #24]
 80066a2:	e00b      	b.n	80066bc <SEGGER_SYSVIEW_Warn+0x84>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	b2da      	uxtb	r2, r3
 80066a8:	69fb      	ldr	r3, [r7, #28]
 80066aa:	1c59      	adds	r1, r3, #1
 80066ac:	61f9      	str	r1, [r7, #28]
 80066ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066b2:	b2d2      	uxtb	r2, r2
 80066b4:	701a      	strb	r2, [r3, #0]
 80066b6:	69bb      	ldr	r3, [r7, #24]
 80066b8:	09db      	lsrs	r3, r3, #7
 80066ba:	61bb      	str	r3, [r7, #24]
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b7f      	cmp	r3, #127	@ 0x7f
 80066c0:	d8f0      	bhi.n	80066a4 <SEGGER_SYSVIEW_Warn+0x6c>
 80066c2:	69fb      	ldr	r3, [r7, #28]
 80066c4:	1c5a      	adds	r2, r3, #1
 80066c6:	61fa      	str	r2, [r7, #28]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	b2d2      	uxtb	r2, r2
 80066cc:	701a      	strb	r2, [r3, #0]
 80066ce:	69fb      	ldr	r3, [r7, #28]
 80066d0:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80066d2:	221a      	movs	r2, #26
 80066d4:	68f9      	ldr	r1, [r7, #12]
 80066d6:	6938      	ldr	r0, [r7, #16]
 80066d8:	f7fe fbfa 	bl	8004ed0 <_SendPacket>
  RECORD_END();
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	f383 8811 	msr	BASEPRI, r3
}
 80066e2:	bf00      	nop
 80066e4:	3728      	adds	r7, #40	@ 0x28
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	2004c804 	.word	0x2004c804

080066f0 <sniprintf>:
 80066f0:	b40c      	push	{r2, r3}
 80066f2:	b530      	push	{r4, r5, lr}
 80066f4:	4b17      	ldr	r3, [pc, #92]	@ (8006754 <sniprintf+0x64>)
 80066f6:	1e0c      	subs	r4, r1, #0
 80066f8:	681d      	ldr	r5, [r3, #0]
 80066fa:	b09d      	sub	sp, #116	@ 0x74
 80066fc:	da08      	bge.n	8006710 <sniprintf+0x20>
 80066fe:	238b      	movs	r3, #139	@ 0x8b
 8006700:	602b      	str	r3, [r5, #0]
 8006702:	f04f 30ff 	mov.w	r0, #4294967295
 8006706:	b01d      	add	sp, #116	@ 0x74
 8006708:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800670c:	b002      	add	sp, #8
 800670e:	4770      	bx	lr
 8006710:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006714:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006718:	bf14      	ite	ne
 800671a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800671e:	4623      	moveq	r3, r4
 8006720:	9304      	str	r3, [sp, #16]
 8006722:	9307      	str	r3, [sp, #28]
 8006724:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006728:	9002      	str	r0, [sp, #8]
 800672a:	9006      	str	r0, [sp, #24]
 800672c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006730:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006732:	ab21      	add	r3, sp, #132	@ 0x84
 8006734:	a902      	add	r1, sp, #8
 8006736:	4628      	mov	r0, r5
 8006738:	9301      	str	r3, [sp, #4]
 800673a:	f000 f9ad 	bl	8006a98 <_svfiprintf_r>
 800673e:	1c43      	adds	r3, r0, #1
 8006740:	bfbc      	itt	lt
 8006742:	238b      	movlt	r3, #139	@ 0x8b
 8006744:	602b      	strlt	r3, [r5, #0]
 8006746:	2c00      	cmp	r4, #0
 8006748:	d0dd      	beq.n	8006706 <sniprintf+0x16>
 800674a:	9b02      	ldr	r3, [sp, #8]
 800674c:	2200      	movs	r2, #0
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	e7d9      	b.n	8006706 <sniprintf+0x16>
 8006752:	bf00      	nop
 8006754:	20000014 	.word	0x20000014

08006758 <memcmp>:
 8006758:	b510      	push	{r4, lr}
 800675a:	3901      	subs	r1, #1
 800675c:	4402      	add	r2, r0
 800675e:	4290      	cmp	r0, r2
 8006760:	d101      	bne.n	8006766 <memcmp+0xe>
 8006762:	2000      	movs	r0, #0
 8006764:	e005      	b.n	8006772 <memcmp+0x1a>
 8006766:	7803      	ldrb	r3, [r0, #0]
 8006768:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800676c:	42a3      	cmp	r3, r4
 800676e:	d001      	beq.n	8006774 <memcmp+0x1c>
 8006770:	1b18      	subs	r0, r3, r4
 8006772:	bd10      	pop	{r4, pc}
 8006774:	3001      	adds	r0, #1
 8006776:	e7f2      	b.n	800675e <memcmp+0x6>

08006778 <memset>:
 8006778:	4402      	add	r2, r0
 800677a:	4603      	mov	r3, r0
 800677c:	4293      	cmp	r3, r2
 800677e:	d100      	bne.n	8006782 <memset+0xa>
 8006780:	4770      	bx	lr
 8006782:	f803 1b01 	strb.w	r1, [r3], #1
 8006786:	e7f9      	b.n	800677c <memset+0x4>

08006788 <__libc_init_array>:
 8006788:	b570      	push	{r4, r5, r6, lr}
 800678a:	4d0d      	ldr	r5, [pc, #52]	@ (80067c0 <__libc_init_array+0x38>)
 800678c:	4c0d      	ldr	r4, [pc, #52]	@ (80067c4 <__libc_init_array+0x3c>)
 800678e:	1b64      	subs	r4, r4, r5
 8006790:	10a4      	asrs	r4, r4, #2
 8006792:	2600      	movs	r6, #0
 8006794:	42a6      	cmp	r6, r4
 8006796:	d109      	bne.n	80067ac <__libc_init_array+0x24>
 8006798:	4d0b      	ldr	r5, [pc, #44]	@ (80067c8 <__libc_init_array+0x40>)
 800679a:	4c0c      	ldr	r4, [pc, #48]	@ (80067cc <__libc_init_array+0x44>)
 800679c:	f000 fc74 	bl	8007088 <_init>
 80067a0:	1b64      	subs	r4, r4, r5
 80067a2:	10a4      	asrs	r4, r4, #2
 80067a4:	2600      	movs	r6, #0
 80067a6:	42a6      	cmp	r6, r4
 80067a8:	d105      	bne.n	80067b6 <__libc_init_array+0x2e>
 80067aa:	bd70      	pop	{r4, r5, r6, pc}
 80067ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80067b0:	4798      	blx	r3
 80067b2:	3601      	adds	r6, #1
 80067b4:	e7ee      	b.n	8006794 <__libc_init_array+0xc>
 80067b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ba:	4798      	blx	r3
 80067bc:	3601      	adds	r6, #1
 80067be:	e7f2      	b.n	80067a6 <__libc_init_array+0x1e>
 80067c0:	08007234 	.word	0x08007234
 80067c4:	08007234 	.word	0x08007234
 80067c8:	08007234 	.word	0x08007234
 80067cc:	08007238 	.word	0x08007238

080067d0 <__retarget_lock_acquire_recursive>:
 80067d0:	4770      	bx	lr

080067d2 <__retarget_lock_release_recursive>:
 80067d2:	4770      	bx	lr

080067d4 <memcpy>:
 80067d4:	440a      	add	r2, r1
 80067d6:	4291      	cmp	r1, r2
 80067d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80067dc:	d100      	bne.n	80067e0 <memcpy+0xc>
 80067de:	4770      	bx	lr
 80067e0:	b510      	push	{r4, lr}
 80067e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80067e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80067ea:	4291      	cmp	r1, r2
 80067ec:	d1f9      	bne.n	80067e2 <memcpy+0xe>
 80067ee:	bd10      	pop	{r4, pc}

080067f0 <_free_r>:
 80067f0:	b538      	push	{r3, r4, r5, lr}
 80067f2:	4605      	mov	r5, r0
 80067f4:	2900      	cmp	r1, #0
 80067f6:	d041      	beq.n	800687c <_free_r+0x8c>
 80067f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80067fc:	1f0c      	subs	r4, r1, #4
 80067fe:	2b00      	cmp	r3, #0
 8006800:	bfb8      	it	lt
 8006802:	18e4      	addlt	r4, r4, r3
 8006804:	f000 f8e0 	bl	80069c8 <__malloc_lock>
 8006808:	4a1d      	ldr	r2, [pc, #116]	@ (8006880 <_free_r+0x90>)
 800680a:	6813      	ldr	r3, [r2, #0]
 800680c:	b933      	cbnz	r3, 800681c <_free_r+0x2c>
 800680e:	6063      	str	r3, [r4, #4]
 8006810:	6014      	str	r4, [r2, #0]
 8006812:	4628      	mov	r0, r5
 8006814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006818:	f000 b8dc 	b.w	80069d4 <__malloc_unlock>
 800681c:	42a3      	cmp	r3, r4
 800681e:	d908      	bls.n	8006832 <_free_r+0x42>
 8006820:	6820      	ldr	r0, [r4, #0]
 8006822:	1821      	adds	r1, r4, r0
 8006824:	428b      	cmp	r3, r1
 8006826:	bf01      	itttt	eq
 8006828:	6819      	ldreq	r1, [r3, #0]
 800682a:	685b      	ldreq	r3, [r3, #4]
 800682c:	1809      	addeq	r1, r1, r0
 800682e:	6021      	streq	r1, [r4, #0]
 8006830:	e7ed      	b.n	800680e <_free_r+0x1e>
 8006832:	461a      	mov	r2, r3
 8006834:	685b      	ldr	r3, [r3, #4]
 8006836:	b10b      	cbz	r3, 800683c <_free_r+0x4c>
 8006838:	42a3      	cmp	r3, r4
 800683a:	d9fa      	bls.n	8006832 <_free_r+0x42>
 800683c:	6811      	ldr	r1, [r2, #0]
 800683e:	1850      	adds	r0, r2, r1
 8006840:	42a0      	cmp	r0, r4
 8006842:	d10b      	bne.n	800685c <_free_r+0x6c>
 8006844:	6820      	ldr	r0, [r4, #0]
 8006846:	4401      	add	r1, r0
 8006848:	1850      	adds	r0, r2, r1
 800684a:	4283      	cmp	r3, r0
 800684c:	6011      	str	r1, [r2, #0]
 800684e:	d1e0      	bne.n	8006812 <_free_r+0x22>
 8006850:	6818      	ldr	r0, [r3, #0]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	6053      	str	r3, [r2, #4]
 8006856:	4408      	add	r0, r1
 8006858:	6010      	str	r0, [r2, #0]
 800685a:	e7da      	b.n	8006812 <_free_r+0x22>
 800685c:	d902      	bls.n	8006864 <_free_r+0x74>
 800685e:	230c      	movs	r3, #12
 8006860:	602b      	str	r3, [r5, #0]
 8006862:	e7d6      	b.n	8006812 <_free_r+0x22>
 8006864:	6820      	ldr	r0, [r4, #0]
 8006866:	1821      	adds	r1, r4, r0
 8006868:	428b      	cmp	r3, r1
 800686a:	bf04      	itt	eq
 800686c:	6819      	ldreq	r1, [r3, #0]
 800686e:	685b      	ldreq	r3, [r3, #4]
 8006870:	6063      	str	r3, [r4, #4]
 8006872:	bf04      	itt	eq
 8006874:	1809      	addeq	r1, r1, r0
 8006876:	6021      	streq	r1, [r4, #0]
 8006878:	6054      	str	r4, [r2, #4]
 800687a:	e7ca      	b.n	8006812 <_free_r+0x22>
 800687c:	bd38      	pop	{r3, r4, r5, pc}
 800687e:	bf00      	nop
 8006880:	2004ca2c 	.word	0x2004ca2c

08006884 <sbrk_aligned>:
 8006884:	b570      	push	{r4, r5, r6, lr}
 8006886:	4e0f      	ldr	r6, [pc, #60]	@ (80068c4 <sbrk_aligned+0x40>)
 8006888:	460c      	mov	r4, r1
 800688a:	6831      	ldr	r1, [r6, #0]
 800688c:	4605      	mov	r5, r0
 800688e:	b911      	cbnz	r1, 8006896 <sbrk_aligned+0x12>
 8006890:	f000 fba6 	bl	8006fe0 <_sbrk_r>
 8006894:	6030      	str	r0, [r6, #0]
 8006896:	4621      	mov	r1, r4
 8006898:	4628      	mov	r0, r5
 800689a:	f000 fba1 	bl	8006fe0 <_sbrk_r>
 800689e:	1c43      	adds	r3, r0, #1
 80068a0:	d103      	bne.n	80068aa <sbrk_aligned+0x26>
 80068a2:	f04f 34ff 	mov.w	r4, #4294967295
 80068a6:	4620      	mov	r0, r4
 80068a8:	bd70      	pop	{r4, r5, r6, pc}
 80068aa:	1cc4      	adds	r4, r0, #3
 80068ac:	f024 0403 	bic.w	r4, r4, #3
 80068b0:	42a0      	cmp	r0, r4
 80068b2:	d0f8      	beq.n	80068a6 <sbrk_aligned+0x22>
 80068b4:	1a21      	subs	r1, r4, r0
 80068b6:	4628      	mov	r0, r5
 80068b8:	f000 fb92 	bl	8006fe0 <_sbrk_r>
 80068bc:	3001      	adds	r0, #1
 80068be:	d1f2      	bne.n	80068a6 <sbrk_aligned+0x22>
 80068c0:	e7ef      	b.n	80068a2 <sbrk_aligned+0x1e>
 80068c2:	bf00      	nop
 80068c4:	2004ca28 	.word	0x2004ca28

080068c8 <_malloc_r>:
 80068c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068cc:	1ccd      	adds	r5, r1, #3
 80068ce:	f025 0503 	bic.w	r5, r5, #3
 80068d2:	3508      	adds	r5, #8
 80068d4:	2d0c      	cmp	r5, #12
 80068d6:	bf38      	it	cc
 80068d8:	250c      	movcc	r5, #12
 80068da:	2d00      	cmp	r5, #0
 80068dc:	4606      	mov	r6, r0
 80068de:	db01      	blt.n	80068e4 <_malloc_r+0x1c>
 80068e0:	42a9      	cmp	r1, r5
 80068e2:	d904      	bls.n	80068ee <_malloc_r+0x26>
 80068e4:	230c      	movs	r3, #12
 80068e6:	6033      	str	r3, [r6, #0]
 80068e8:	2000      	movs	r0, #0
 80068ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80068ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80069c4 <_malloc_r+0xfc>
 80068f2:	f000 f869 	bl	80069c8 <__malloc_lock>
 80068f6:	f8d8 3000 	ldr.w	r3, [r8]
 80068fa:	461c      	mov	r4, r3
 80068fc:	bb44      	cbnz	r4, 8006950 <_malloc_r+0x88>
 80068fe:	4629      	mov	r1, r5
 8006900:	4630      	mov	r0, r6
 8006902:	f7ff ffbf 	bl	8006884 <sbrk_aligned>
 8006906:	1c43      	adds	r3, r0, #1
 8006908:	4604      	mov	r4, r0
 800690a:	d158      	bne.n	80069be <_malloc_r+0xf6>
 800690c:	f8d8 4000 	ldr.w	r4, [r8]
 8006910:	4627      	mov	r7, r4
 8006912:	2f00      	cmp	r7, #0
 8006914:	d143      	bne.n	800699e <_malloc_r+0xd6>
 8006916:	2c00      	cmp	r4, #0
 8006918:	d04b      	beq.n	80069b2 <_malloc_r+0xea>
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	4639      	mov	r1, r7
 800691e:	4630      	mov	r0, r6
 8006920:	eb04 0903 	add.w	r9, r4, r3
 8006924:	f000 fb5c 	bl	8006fe0 <_sbrk_r>
 8006928:	4581      	cmp	r9, r0
 800692a:	d142      	bne.n	80069b2 <_malloc_r+0xea>
 800692c:	6821      	ldr	r1, [r4, #0]
 800692e:	1a6d      	subs	r5, r5, r1
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f7ff ffa6 	bl	8006884 <sbrk_aligned>
 8006938:	3001      	adds	r0, #1
 800693a:	d03a      	beq.n	80069b2 <_malloc_r+0xea>
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	442b      	add	r3, r5
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	f8d8 3000 	ldr.w	r3, [r8]
 8006946:	685a      	ldr	r2, [r3, #4]
 8006948:	bb62      	cbnz	r2, 80069a4 <_malloc_r+0xdc>
 800694a:	f8c8 7000 	str.w	r7, [r8]
 800694e:	e00f      	b.n	8006970 <_malloc_r+0xa8>
 8006950:	6822      	ldr	r2, [r4, #0]
 8006952:	1b52      	subs	r2, r2, r5
 8006954:	d420      	bmi.n	8006998 <_malloc_r+0xd0>
 8006956:	2a0b      	cmp	r2, #11
 8006958:	d917      	bls.n	800698a <_malloc_r+0xc2>
 800695a:	1961      	adds	r1, r4, r5
 800695c:	42a3      	cmp	r3, r4
 800695e:	6025      	str	r5, [r4, #0]
 8006960:	bf18      	it	ne
 8006962:	6059      	strne	r1, [r3, #4]
 8006964:	6863      	ldr	r3, [r4, #4]
 8006966:	bf08      	it	eq
 8006968:	f8c8 1000 	streq.w	r1, [r8]
 800696c:	5162      	str	r2, [r4, r5]
 800696e:	604b      	str	r3, [r1, #4]
 8006970:	4630      	mov	r0, r6
 8006972:	f000 f82f 	bl	80069d4 <__malloc_unlock>
 8006976:	f104 000b 	add.w	r0, r4, #11
 800697a:	1d23      	adds	r3, r4, #4
 800697c:	f020 0007 	bic.w	r0, r0, #7
 8006980:	1ac2      	subs	r2, r0, r3
 8006982:	bf1c      	itt	ne
 8006984:	1a1b      	subne	r3, r3, r0
 8006986:	50a3      	strne	r3, [r4, r2]
 8006988:	e7af      	b.n	80068ea <_malloc_r+0x22>
 800698a:	6862      	ldr	r2, [r4, #4]
 800698c:	42a3      	cmp	r3, r4
 800698e:	bf0c      	ite	eq
 8006990:	f8c8 2000 	streq.w	r2, [r8]
 8006994:	605a      	strne	r2, [r3, #4]
 8006996:	e7eb      	b.n	8006970 <_malloc_r+0xa8>
 8006998:	4623      	mov	r3, r4
 800699a:	6864      	ldr	r4, [r4, #4]
 800699c:	e7ae      	b.n	80068fc <_malloc_r+0x34>
 800699e:	463c      	mov	r4, r7
 80069a0:	687f      	ldr	r7, [r7, #4]
 80069a2:	e7b6      	b.n	8006912 <_malloc_r+0x4a>
 80069a4:	461a      	mov	r2, r3
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	42a3      	cmp	r3, r4
 80069aa:	d1fb      	bne.n	80069a4 <_malloc_r+0xdc>
 80069ac:	2300      	movs	r3, #0
 80069ae:	6053      	str	r3, [r2, #4]
 80069b0:	e7de      	b.n	8006970 <_malloc_r+0xa8>
 80069b2:	230c      	movs	r3, #12
 80069b4:	6033      	str	r3, [r6, #0]
 80069b6:	4630      	mov	r0, r6
 80069b8:	f000 f80c 	bl	80069d4 <__malloc_unlock>
 80069bc:	e794      	b.n	80068e8 <_malloc_r+0x20>
 80069be:	6005      	str	r5, [r0, #0]
 80069c0:	e7d6      	b.n	8006970 <_malloc_r+0xa8>
 80069c2:	bf00      	nop
 80069c4:	2004ca2c 	.word	0x2004ca2c

080069c8 <__malloc_lock>:
 80069c8:	4801      	ldr	r0, [pc, #4]	@ (80069d0 <__malloc_lock+0x8>)
 80069ca:	f7ff bf01 	b.w	80067d0 <__retarget_lock_acquire_recursive>
 80069ce:	bf00      	nop
 80069d0:	2004ca24 	.word	0x2004ca24

080069d4 <__malloc_unlock>:
 80069d4:	4801      	ldr	r0, [pc, #4]	@ (80069dc <__malloc_unlock+0x8>)
 80069d6:	f7ff befc 	b.w	80067d2 <__retarget_lock_release_recursive>
 80069da:	bf00      	nop
 80069dc:	2004ca24 	.word	0x2004ca24

080069e0 <__ssputs_r>:
 80069e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80069e4:	688e      	ldr	r6, [r1, #8]
 80069e6:	461f      	mov	r7, r3
 80069e8:	42be      	cmp	r6, r7
 80069ea:	680b      	ldr	r3, [r1, #0]
 80069ec:	4682      	mov	sl, r0
 80069ee:	460c      	mov	r4, r1
 80069f0:	4690      	mov	r8, r2
 80069f2:	d82d      	bhi.n	8006a50 <__ssputs_r+0x70>
 80069f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80069f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80069fc:	d026      	beq.n	8006a4c <__ssputs_r+0x6c>
 80069fe:	6965      	ldr	r5, [r4, #20]
 8006a00:	6909      	ldr	r1, [r1, #16]
 8006a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006a06:	eba3 0901 	sub.w	r9, r3, r1
 8006a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006a0e:	1c7b      	adds	r3, r7, #1
 8006a10:	444b      	add	r3, r9
 8006a12:	106d      	asrs	r5, r5, #1
 8006a14:	429d      	cmp	r5, r3
 8006a16:	bf38      	it	cc
 8006a18:	461d      	movcc	r5, r3
 8006a1a:	0553      	lsls	r3, r2, #21
 8006a1c:	d527      	bpl.n	8006a6e <__ssputs_r+0x8e>
 8006a1e:	4629      	mov	r1, r5
 8006a20:	f7ff ff52 	bl	80068c8 <_malloc_r>
 8006a24:	4606      	mov	r6, r0
 8006a26:	b360      	cbz	r0, 8006a82 <__ssputs_r+0xa2>
 8006a28:	6921      	ldr	r1, [r4, #16]
 8006a2a:	464a      	mov	r2, r9
 8006a2c:	f7ff fed2 	bl	80067d4 <memcpy>
 8006a30:	89a3      	ldrh	r3, [r4, #12]
 8006a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a3a:	81a3      	strh	r3, [r4, #12]
 8006a3c:	6126      	str	r6, [r4, #16]
 8006a3e:	6165      	str	r5, [r4, #20]
 8006a40:	444e      	add	r6, r9
 8006a42:	eba5 0509 	sub.w	r5, r5, r9
 8006a46:	6026      	str	r6, [r4, #0]
 8006a48:	60a5      	str	r5, [r4, #8]
 8006a4a:	463e      	mov	r6, r7
 8006a4c:	42be      	cmp	r6, r7
 8006a4e:	d900      	bls.n	8006a52 <__ssputs_r+0x72>
 8006a50:	463e      	mov	r6, r7
 8006a52:	6820      	ldr	r0, [r4, #0]
 8006a54:	4632      	mov	r2, r6
 8006a56:	4641      	mov	r1, r8
 8006a58:	f000 faa8 	bl	8006fac <memmove>
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	1b9b      	subs	r3, r3, r6
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	6823      	ldr	r3, [r4, #0]
 8006a64:	4433      	add	r3, r6
 8006a66:	6023      	str	r3, [r4, #0]
 8006a68:	2000      	movs	r0, #0
 8006a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a6e:	462a      	mov	r2, r5
 8006a70:	f000 fac6 	bl	8007000 <_realloc_r>
 8006a74:	4606      	mov	r6, r0
 8006a76:	2800      	cmp	r0, #0
 8006a78:	d1e0      	bne.n	8006a3c <__ssputs_r+0x5c>
 8006a7a:	6921      	ldr	r1, [r4, #16]
 8006a7c:	4650      	mov	r0, sl
 8006a7e:	f7ff feb7 	bl	80067f0 <_free_r>
 8006a82:	230c      	movs	r3, #12
 8006a84:	f8ca 3000 	str.w	r3, [sl]
 8006a88:	89a3      	ldrh	r3, [r4, #12]
 8006a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a8e:	81a3      	strh	r3, [r4, #12]
 8006a90:	f04f 30ff 	mov.w	r0, #4294967295
 8006a94:	e7e9      	b.n	8006a6a <__ssputs_r+0x8a>
	...

08006a98 <_svfiprintf_r>:
 8006a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a9c:	4698      	mov	r8, r3
 8006a9e:	898b      	ldrh	r3, [r1, #12]
 8006aa0:	061b      	lsls	r3, r3, #24
 8006aa2:	b09d      	sub	sp, #116	@ 0x74
 8006aa4:	4607      	mov	r7, r0
 8006aa6:	460d      	mov	r5, r1
 8006aa8:	4614      	mov	r4, r2
 8006aaa:	d510      	bpl.n	8006ace <_svfiprintf_r+0x36>
 8006aac:	690b      	ldr	r3, [r1, #16]
 8006aae:	b973      	cbnz	r3, 8006ace <_svfiprintf_r+0x36>
 8006ab0:	2140      	movs	r1, #64	@ 0x40
 8006ab2:	f7ff ff09 	bl	80068c8 <_malloc_r>
 8006ab6:	6028      	str	r0, [r5, #0]
 8006ab8:	6128      	str	r0, [r5, #16]
 8006aba:	b930      	cbnz	r0, 8006aca <_svfiprintf_r+0x32>
 8006abc:	230c      	movs	r3, #12
 8006abe:	603b      	str	r3, [r7, #0]
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	b01d      	add	sp, #116	@ 0x74
 8006ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006aca:	2340      	movs	r3, #64	@ 0x40
 8006acc:	616b      	str	r3, [r5, #20]
 8006ace:	2300      	movs	r3, #0
 8006ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8006ad2:	2320      	movs	r3, #32
 8006ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8006adc:	2330      	movs	r3, #48	@ 0x30
 8006ade:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006c7c <_svfiprintf_r+0x1e4>
 8006ae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ae6:	f04f 0901 	mov.w	r9, #1
 8006aea:	4623      	mov	r3, r4
 8006aec:	469a      	mov	sl, r3
 8006aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006af2:	b10a      	cbz	r2, 8006af8 <_svfiprintf_r+0x60>
 8006af4:	2a25      	cmp	r2, #37	@ 0x25
 8006af6:	d1f9      	bne.n	8006aec <_svfiprintf_r+0x54>
 8006af8:	ebba 0b04 	subs.w	fp, sl, r4
 8006afc:	d00b      	beq.n	8006b16 <_svfiprintf_r+0x7e>
 8006afe:	465b      	mov	r3, fp
 8006b00:	4622      	mov	r2, r4
 8006b02:	4629      	mov	r1, r5
 8006b04:	4638      	mov	r0, r7
 8006b06:	f7ff ff6b 	bl	80069e0 <__ssputs_r>
 8006b0a:	3001      	adds	r0, #1
 8006b0c:	f000 80a7 	beq.w	8006c5e <_svfiprintf_r+0x1c6>
 8006b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006b12:	445a      	add	r2, fp
 8006b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006b16:	f89a 3000 	ldrb.w	r3, [sl]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 809f 	beq.w	8006c5e <_svfiprintf_r+0x1c6>
 8006b20:	2300      	movs	r3, #0
 8006b22:	f04f 32ff 	mov.w	r2, #4294967295
 8006b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006b2a:	f10a 0a01 	add.w	sl, sl, #1
 8006b2e:	9304      	str	r3, [sp, #16]
 8006b30:	9307      	str	r3, [sp, #28]
 8006b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8006b38:	4654      	mov	r4, sl
 8006b3a:	2205      	movs	r2, #5
 8006b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b40:	484e      	ldr	r0, [pc, #312]	@ (8006c7c <_svfiprintf_r+0x1e4>)
 8006b42:	f7f9 fbbd 	bl	80002c0 <memchr>
 8006b46:	9a04      	ldr	r2, [sp, #16]
 8006b48:	b9d8      	cbnz	r0, 8006b82 <_svfiprintf_r+0xea>
 8006b4a:	06d0      	lsls	r0, r2, #27
 8006b4c:	bf44      	itt	mi
 8006b4e:	2320      	movmi	r3, #32
 8006b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b54:	0711      	lsls	r1, r2, #28
 8006b56:	bf44      	itt	mi
 8006b58:	232b      	movmi	r3, #43	@ 0x2b
 8006b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8006b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8006b64:	d015      	beq.n	8006b92 <_svfiprintf_r+0xfa>
 8006b66:	9a07      	ldr	r2, [sp, #28]
 8006b68:	4654      	mov	r4, sl
 8006b6a:	2000      	movs	r0, #0
 8006b6c:	f04f 0c0a 	mov.w	ip, #10
 8006b70:	4621      	mov	r1, r4
 8006b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006b76:	3b30      	subs	r3, #48	@ 0x30
 8006b78:	2b09      	cmp	r3, #9
 8006b7a:	d94b      	bls.n	8006c14 <_svfiprintf_r+0x17c>
 8006b7c:	b1b0      	cbz	r0, 8006bac <_svfiprintf_r+0x114>
 8006b7e:	9207      	str	r2, [sp, #28]
 8006b80:	e014      	b.n	8006bac <_svfiprintf_r+0x114>
 8006b82:	eba0 0308 	sub.w	r3, r0, r8
 8006b86:	fa09 f303 	lsl.w	r3, r9, r3
 8006b8a:	4313      	orrs	r3, r2
 8006b8c:	9304      	str	r3, [sp, #16]
 8006b8e:	46a2      	mov	sl, r4
 8006b90:	e7d2      	b.n	8006b38 <_svfiprintf_r+0xa0>
 8006b92:	9b03      	ldr	r3, [sp, #12]
 8006b94:	1d19      	adds	r1, r3, #4
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	9103      	str	r1, [sp, #12]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	bfbb      	ittet	lt
 8006b9e:	425b      	neglt	r3, r3
 8006ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8006ba4:	9307      	strge	r3, [sp, #28]
 8006ba6:	9307      	strlt	r3, [sp, #28]
 8006ba8:	bfb8      	it	lt
 8006baa:	9204      	strlt	r2, [sp, #16]
 8006bac:	7823      	ldrb	r3, [r4, #0]
 8006bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8006bb0:	d10a      	bne.n	8006bc8 <_svfiprintf_r+0x130>
 8006bb2:	7863      	ldrb	r3, [r4, #1]
 8006bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bb6:	d132      	bne.n	8006c1e <_svfiprintf_r+0x186>
 8006bb8:	9b03      	ldr	r3, [sp, #12]
 8006bba:	1d1a      	adds	r2, r3, #4
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	9203      	str	r2, [sp, #12]
 8006bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006bc4:	3402      	adds	r4, #2
 8006bc6:	9305      	str	r3, [sp, #20]
 8006bc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006c8c <_svfiprintf_r+0x1f4>
 8006bcc:	7821      	ldrb	r1, [r4, #0]
 8006bce:	2203      	movs	r2, #3
 8006bd0:	4650      	mov	r0, sl
 8006bd2:	f7f9 fb75 	bl	80002c0 <memchr>
 8006bd6:	b138      	cbz	r0, 8006be8 <_svfiprintf_r+0x150>
 8006bd8:	9b04      	ldr	r3, [sp, #16]
 8006bda:	eba0 000a 	sub.w	r0, r0, sl
 8006bde:	2240      	movs	r2, #64	@ 0x40
 8006be0:	4082      	lsls	r2, r0
 8006be2:	4313      	orrs	r3, r2
 8006be4:	3401      	adds	r4, #1
 8006be6:	9304      	str	r3, [sp, #16]
 8006be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bec:	4824      	ldr	r0, [pc, #144]	@ (8006c80 <_svfiprintf_r+0x1e8>)
 8006bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006bf2:	2206      	movs	r2, #6
 8006bf4:	f7f9 fb64 	bl	80002c0 <memchr>
 8006bf8:	2800      	cmp	r0, #0
 8006bfa:	d036      	beq.n	8006c6a <_svfiprintf_r+0x1d2>
 8006bfc:	4b21      	ldr	r3, [pc, #132]	@ (8006c84 <_svfiprintf_r+0x1ec>)
 8006bfe:	bb1b      	cbnz	r3, 8006c48 <_svfiprintf_r+0x1b0>
 8006c00:	9b03      	ldr	r3, [sp, #12]
 8006c02:	3307      	adds	r3, #7
 8006c04:	f023 0307 	bic.w	r3, r3, #7
 8006c08:	3308      	adds	r3, #8
 8006c0a:	9303      	str	r3, [sp, #12]
 8006c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c0e:	4433      	add	r3, r6
 8006c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c12:	e76a      	b.n	8006aea <_svfiprintf_r+0x52>
 8006c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8006c18:	460c      	mov	r4, r1
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	e7a8      	b.n	8006b70 <_svfiprintf_r+0xd8>
 8006c1e:	2300      	movs	r3, #0
 8006c20:	3401      	adds	r4, #1
 8006c22:	9305      	str	r3, [sp, #20]
 8006c24:	4619      	mov	r1, r3
 8006c26:	f04f 0c0a 	mov.w	ip, #10
 8006c2a:	4620      	mov	r0, r4
 8006c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006c30:	3a30      	subs	r2, #48	@ 0x30
 8006c32:	2a09      	cmp	r2, #9
 8006c34:	d903      	bls.n	8006c3e <_svfiprintf_r+0x1a6>
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d0c6      	beq.n	8006bc8 <_svfiprintf_r+0x130>
 8006c3a:	9105      	str	r1, [sp, #20]
 8006c3c:	e7c4      	b.n	8006bc8 <_svfiprintf_r+0x130>
 8006c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006c42:	4604      	mov	r4, r0
 8006c44:	2301      	movs	r3, #1
 8006c46:	e7f0      	b.n	8006c2a <_svfiprintf_r+0x192>
 8006c48:	ab03      	add	r3, sp, #12
 8006c4a:	9300      	str	r3, [sp, #0]
 8006c4c:	462a      	mov	r2, r5
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c88 <_svfiprintf_r+0x1f0>)
 8006c50:	a904      	add	r1, sp, #16
 8006c52:	4638      	mov	r0, r7
 8006c54:	f3af 8000 	nop.w
 8006c58:	1c42      	adds	r2, r0, #1
 8006c5a:	4606      	mov	r6, r0
 8006c5c:	d1d6      	bne.n	8006c0c <_svfiprintf_r+0x174>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	065b      	lsls	r3, r3, #25
 8006c62:	f53f af2d 	bmi.w	8006ac0 <_svfiprintf_r+0x28>
 8006c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006c68:	e72c      	b.n	8006ac4 <_svfiprintf_r+0x2c>
 8006c6a:	ab03      	add	r3, sp, #12
 8006c6c:	9300      	str	r3, [sp, #0]
 8006c6e:	462a      	mov	r2, r5
 8006c70:	4b05      	ldr	r3, [pc, #20]	@ (8006c88 <_svfiprintf_r+0x1f0>)
 8006c72:	a904      	add	r1, sp, #16
 8006c74:	4638      	mov	r0, r7
 8006c76:	f000 f879 	bl	8006d6c <_printf_i>
 8006c7a:	e7ed      	b.n	8006c58 <_svfiprintf_r+0x1c0>
 8006c7c:	080071f8 	.word	0x080071f8
 8006c80:	08007202 	.word	0x08007202
 8006c84:	00000000 	.word	0x00000000
 8006c88:	080069e1 	.word	0x080069e1
 8006c8c:	080071fe 	.word	0x080071fe

08006c90 <_printf_common>:
 8006c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c94:	4616      	mov	r6, r2
 8006c96:	4698      	mov	r8, r3
 8006c98:	688a      	ldr	r2, [r1, #8]
 8006c9a:	690b      	ldr	r3, [r1, #16]
 8006c9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	bfb8      	it	lt
 8006ca4:	4613      	movlt	r3, r2
 8006ca6:	6033      	str	r3, [r6, #0]
 8006ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cac:	4607      	mov	r7, r0
 8006cae:	460c      	mov	r4, r1
 8006cb0:	b10a      	cbz	r2, 8006cb6 <_printf_common+0x26>
 8006cb2:	3301      	adds	r3, #1
 8006cb4:	6033      	str	r3, [r6, #0]
 8006cb6:	6823      	ldr	r3, [r4, #0]
 8006cb8:	0699      	lsls	r1, r3, #26
 8006cba:	bf42      	ittt	mi
 8006cbc:	6833      	ldrmi	r3, [r6, #0]
 8006cbe:	3302      	addmi	r3, #2
 8006cc0:	6033      	strmi	r3, [r6, #0]
 8006cc2:	6825      	ldr	r5, [r4, #0]
 8006cc4:	f015 0506 	ands.w	r5, r5, #6
 8006cc8:	d106      	bne.n	8006cd8 <_printf_common+0x48>
 8006cca:	f104 0a19 	add.w	sl, r4, #25
 8006cce:	68e3      	ldr	r3, [r4, #12]
 8006cd0:	6832      	ldr	r2, [r6, #0]
 8006cd2:	1a9b      	subs	r3, r3, r2
 8006cd4:	42ab      	cmp	r3, r5
 8006cd6:	dc26      	bgt.n	8006d26 <_printf_common+0x96>
 8006cd8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006cdc:	6822      	ldr	r2, [r4, #0]
 8006cde:	3b00      	subs	r3, #0
 8006ce0:	bf18      	it	ne
 8006ce2:	2301      	movne	r3, #1
 8006ce4:	0692      	lsls	r2, r2, #26
 8006ce6:	d42b      	bmi.n	8006d40 <_printf_common+0xb0>
 8006ce8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006cec:	4641      	mov	r1, r8
 8006cee:	4638      	mov	r0, r7
 8006cf0:	47c8      	blx	r9
 8006cf2:	3001      	adds	r0, #1
 8006cf4:	d01e      	beq.n	8006d34 <_printf_common+0xa4>
 8006cf6:	6823      	ldr	r3, [r4, #0]
 8006cf8:	6922      	ldr	r2, [r4, #16]
 8006cfa:	f003 0306 	and.w	r3, r3, #6
 8006cfe:	2b04      	cmp	r3, #4
 8006d00:	bf02      	ittt	eq
 8006d02:	68e5      	ldreq	r5, [r4, #12]
 8006d04:	6833      	ldreq	r3, [r6, #0]
 8006d06:	1aed      	subeq	r5, r5, r3
 8006d08:	68a3      	ldr	r3, [r4, #8]
 8006d0a:	bf0c      	ite	eq
 8006d0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d10:	2500      	movne	r5, #0
 8006d12:	4293      	cmp	r3, r2
 8006d14:	bfc4      	itt	gt
 8006d16:	1a9b      	subgt	r3, r3, r2
 8006d18:	18ed      	addgt	r5, r5, r3
 8006d1a:	2600      	movs	r6, #0
 8006d1c:	341a      	adds	r4, #26
 8006d1e:	42b5      	cmp	r5, r6
 8006d20:	d11a      	bne.n	8006d58 <_printf_common+0xc8>
 8006d22:	2000      	movs	r0, #0
 8006d24:	e008      	b.n	8006d38 <_printf_common+0xa8>
 8006d26:	2301      	movs	r3, #1
 8006d28:	4652      	mov	r2, sl
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	4638      	mov	r0, r7
 8006d2e:	47c8      	blx	r9
 8006d30:	3001      	adds	r0, #1
 8006d32:	d103      	bne.n	8006d3c <_printf_common+0xac>
 8006d34:	f04f 30ff 	mov.w	r0, #4294967295
 8006d38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3c:	3501      	adds	r5, #1
 8006d3e:	e7c6      	b.n	8006cce <_printf_common+0x3e>
 8006d40:	18e1      	adds	r1, r4, r3
 8006d42:	1c5a      	adds	r2, r3, #1
 8006d44:	2030      	movs	r0, #48	@ 0x30
 8006d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d4a:	4422      	add	r2, r4
 8006d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d54:	3302      	adds	r3, #2
 8006d56:	e7c7      	b.n	8006ce8 <_printf_common+0x58>
 8006d58:	2301      	movs	r3, #1
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	4641      	mov	r1, r8
 8006d5e:	4638      	mov	r0, r7
 8006d60:	47c8      	blx	r9
 8006d62:	3001      	adds	r0, #1
 8006d64:	d0e6      	beq.n	8006d34 <_printf_common+0xa4>
 8006d66:	3601      	adds	r6, #1
 8006d68:	e7d9      	b.n	8006d1e <_printf_common+0x8e>
	...

08006d6c <_printf_i>:
 8006d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d70:	7e0f      	ldrb	r7, [r1, #24]
 8006d72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006d74:	2f78      	cmp	r7, #120	@ 0x78
 8006d76:	4691      	mov	r9, r2
 8006d78:	4680      	mov	r8, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	469a      	mov	sl, r3
 8006d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006d82:	d807      	bhi.n	8006d94 <_printf_i+0x28>
 8006d84:	2f62      	cmp	r7, #98	@ 0x62
 8006d86:	d80a      	bhi.n	8006d9e <_printf_i+0x32>
 8006d88:	2f00      	cmp	r7, #0
 8006d8a:	f000 80d2 	beq.w	8006f32 <_printf_i+0x1c6>
 8006d8e:	2f58      	cmp	r7, #88	@ 0x58
 8006d90:	f000 80b9 	beq.w	8006f06 <_printf_i+0x19a>
 8006d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006d9c:	e03a      	b.n	8006e14 <_printf_i+0xa8>
 8006d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006da2:	2b15      	cmp	r3, #21
 8006da4:	d8f6      	bhi.n	8006d94 <_printf_i+0x28>
 8006da6:	a101      	add	r1, pc, #4	@ (adr r1, 8006dac <_printf_i+0x40>)
 8006da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006dac:	08006e05 	.word	0x08006e05
 8006db0:	08006e19 	.word	0x08006e19
 8006db4:	08006d95 	.word	0x08006d95
 8006db8:	08006d95 	.word	0x08006d95
 8006dbc:	08006d95 	.word	0x08006d95
 8006dc0:	08006d95 	.word	0x08006d95
 8006dc4:	08006e19 	.word	0x08006e19
 8006dc8:	08006d95 	.word	0x08006d95
 8006dcc:	08006d95 	.word	0x08006d95
 8006dd0:	08006d95 	.word	0x08006d95
 8006dd4:	08006d95 	.word	0x08006d95
 8006dd8:	08006f19 	.word	0x08006f19
 8006ddc:	08006e43 	.word	0x08006e43
 8006de0:	08006ed3 	.word	0x08006ed3
 8006de4:	08006d95 	.word	0x08006d95
 8006de8:	08006d95 	.word	0x08006d95
 8006dec:	08006f3b 	.word	0x08006f3b
 8006df0:	08006d95 	.word	0x08006d95
 8006df4:	08006e43 	.word	0x08006e43
 8006df8:	08006d95 	.word	0x08006d95
 8006dfc:	08006d95 	.word	0x08006d95
 8006e00:	08006edb 	.word	0x08006edb
 8006e04:	6833      	ldr	r3, [r6, #0]
 8006e06:	1d1a      	adds	r2, r3, #4
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6032      	str	r2, [r6, #0]
 8006e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e14:	2301      	movs	r3, #1
 8006e16:	e09d      	b.n	8006f54 <_printf_i+0x1e8>
 8006e18:	6833      	ldr	r3, [r6, #0]
 8006e1a:	6820      	ldr	r0, [r4, #0]
 8006e1c:	1d19      	adds	r1, r3, #4
 8006e1e:	6031      	str	r1, [r6, #0]
 8006e20:	0606      	lsls	r6, r0, #24
 8006e22:	d501      	bpl.n	8006e28 <_printf_i+0xbc>
 8006e24:	681d      	ldr	r5, [r3, #0]
 8006e26:	e003      	b.n	8006e30 <_printf_i+0xc4>
 8006e28:	0645      	lsls	r5, r0, #25
 8006e2a:	d5fb      	bpl.n	8006e24 <_printf_i+0xb8>
 8006e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e30:	2d00      	cmp	r5, #0
 8006e32:	da03      	bge.n	8006e3c <_printf_i+0xd0>
 8006e34:	232d      	movs	r3, #45	@ 0x2d
 8006e36:	426d      	negs	r5, r5
 8006e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e3c:	4859      	ldr	r0, [pc, #356]	@ (8006fa4 <_printf_i+0x238>)
 8006e3e:	230a      	movs	r3, #10
 8006e40:	e011      	b.n	8006e66 <_printf_i+0xfa>
 8006e42:	6821      	ldr	r1, [r4, #0]
 8006e44:	6833      	ldr	r3, [r6, #0]
 8006e46:	0608      	lsls	r0, r1, #24
 8006e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e4c:	d402      	bmi.n	8006e54 <_printf_i+0xe8>
 8006e4e:	0649      	lsls	r1, r1, #25
 8006e50:	bf48      	it	mi
 8006e52:	b2ad      	uxthmi	r5, r5
 8006e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e56:	4853      	ldr	r0, [pc, #332]	@ (8006fa4 <_printf_i+0x238>)
 8006e58:	6033      	str	r3, [r6, #0]
 8006e5a:	bf14      	ite	ne
 8006e5c:	230a      	movne	r3, #10
 8006e5e:	2308      	moveq	r3, #8
 8006e60:	2100      	movs	r1, #0
 8006e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e66:	6866      	ldr	r6, [r4, #4]
 8006e68:	60a6      	str	r6, [r4, #8]
 8006e6a:	2e00      	cmp	r6, #0
 8006e6c:	bfa2      	ittt	ge
 8006e6e:	6821      	ldrge	r1, [r4, #0]
 8006e70:	f021 0104 	bicge.w	r1, r1, #4
 8006e74:	6021      	strge	r1, [r4, #0]
 8006e76:	b90d      	cbnz	r5, 8006e7c <_printf_i+0x110>
 8006e78:	2e00      	cmp	r6, #0
 8006e7a:	d04b      	beq.n	8006f14 <_printf_i+0x1a8>
 8006e7c:	4616      	mov	r6, r2
 8006e7e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006e82:	fb03 5711 	mls	r7, r3, r1, r5
 8006e86:	5dc7      	ldrb	r7, [r0, r7]
 8006e88:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006e8c:	462f      	mov	r7, r5
 8006e8e:	42bb      	cmp	r3, r7
 8006e90:	460d      	mov	r5, r1
 8006e92:	d9f4      	bls.n	8006e7e <_printf_i+0x112>
 8006e94:	2b08      	cmp	r3, #8
 8006e96:	d10b      	bne.n	8006eb0 <_printf_i+0x144>
 8006e98:	6823      	ldr	r3, [r4, #0]
 8006e9a:	07df      	lsls	r7, r3, #31
 8006e9c:	d508      	bpl.n	8006eb0 <_printf_i+0x144>
 8006e9e:	6923      	ldr	r3, [r4, #16]
 8006ea0:	6861      	ldr	r1, [r4, #4]
 8006ea2:	4299      	cmp	r1, r3
 8006ea4:	bfde      	ittt	le
 8006ea6:	2330      	movle	r3, #48	@ 0x30
 8006ea8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006eac:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006eb0:	1b92      	subs	r2, r2, r6
 8006eb2:	6122      	str	r2, [r4, #16]
 8006eb4:	f8cd a000 	str.w	sl, [sp]
 8006eb8:	464b      	mov	r3, r9
 8006eba:	aa03      	add	r2, sp, #12
 8006ebc:	4621      	mov	r1, r4
 8006ebe:	4640      	mov	r0, r8
 8006ec0:	f7ff fee6 	bl	8006c90 <_printf_common>
 8006ec4:	3001      	adds	r0, #1
 8006ec6:	d14a      	bne.n	8006f5e <_printf_i+0x1f2>
 8006ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ecc:	b004      	add	sp, #16
 8006ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	f043 0320 	orr.w	r3, r3, #32
 8006ed8:	6023      	str	r3, [r4, #0]
 8006eda:	4833      	ldr	r0, [pc, #204]	@ (8006fa8 <_printf_i+0x23c>)
 8006edc:	2778      	movs	r7, #120	@ 0x78
 8006ede:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006ee2:	6823      	ldr	r3, [r4, #0]
 8006ee4:	6831      	ldr	r1, [r6, #0]
 8006ee6:	061f      	lsls	r7, r3, #24
 8006ee8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006eec:	d402      	bmi.n	8006ef4 <_printf_i+0x188>
 8006eee:	065f      	lsls	r7, r3, #25
 8006ef0:	bf48      	it	mi
 8006ef2:	b2ad      	uxthmi	r5, r5
 8006ef4:	6031      	str	r1, [r6, #0]
 8006ef6:	07d9      	lsls	r1, r3, #31
 8006ef8:	bf44      	itt	mi
 8006efa:	f043 0320 	orrmi.w	r3, r3, #32
 8006efe:	6023      	strmi	r3, [r4, #0]
 8006f00:	b11d      	cbz	r5, 8006f0a <_printf_i+0x19e>
 8006f02:	2310      	movs	r3, #16
 8006f04:	e7ac      	b.n	8006e60 <_printf_i+0xf4>
 8006f06:	4827      	ldr	r0, [pc, #156]	@ (8006fa4 <_printf_i+0x238>)
 8006f08:	e7e9      	b.n	8006ede <_printf_i+0x172>
 8006f0a:	6823      	ldr	r3, [r4, #0]
 8006f0c:	f023 0320 	bic.w	r3, r3, #32
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	e7f6      	b.n	8006f02 <_printf_i+0x196>
 8006f14:	4616      	mov	r6, r2
 8006f16:	e7bd      	b.n	8006e94 <_printf_i+0x128>
 8006f18:	6833      	ldr	r3, [r6, #0]
 8006f1a:	6825      	ldr	r5, [r4, #0]
 8006f1c:	6961      	ldr	r1, [r4, #20]
 8006f1e:	1d18      	adds	r0, r3, #4
 8006f20:	6030      	str	r0, [r6, #0]
 8006f22:	062e      	lsls	r6, r5, #24
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	d501      	bpl.n	8006f2c <_printf_i+0x1c0>
 8006f28:	6019      	str	r1, [r3, #0]
 8006f2a:	e002      	b.n	8006f32 <_printf_i+0x1c6>
 8006f2c:	0668      	lsls	r0, r5, #25
 8006f2e:	d5fb      	bpl.n	8006f28 <_printf_i+0x1bc>
 8006f30:	8019      	strh	r1, [r3, #0]
 8006f32:	2300      	movs	r3, #0
 8006f34:	6123      	str	r3, [r4, #16]
 8006f36:	4616      	mov	r6, r2
 8006f38:	e7bc      	b.n	8006eb4 <_printf_i+0x148>
 8006f3a:	6833      	ldr	r3, [r6, #0]
 8006f3c:	1d1a      	adds	r2, r3, #4
 8006f3e:	6032      	str	r2, [r6, #0]
 8006f40:	681e      	ldr	r6, [r3, #0]
 8006f42:	6862      	ldr	r2, [r4, #4]
 8006f44:	2100      	movs	r1, #0
 8006f46:	4630      	mov	r0, r6
 8006f48:	f7f9 f9ba 	bl	80002c0 <memchr>
 8006f4c:	b108      	cbz	r0, 8006f52 <_printf_i+0x1e6>
 8006f4e:	1b80      	subs	r0, r0, r6
 8006f50:	6060      	str	r0, [r4, #4]
 8006f52:	6863      	ldr	r3, [r4, #4]
 8006f54:	6123      	str	r3, [r4, #16]
 8006f56:	2300      	movs	r3, #0
 8006f58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f5c:	e7aa      	b.n	8006eb4 <_printf_i+0x148>
 8006f5e:	6923      	ldr	r3, [r4, #16]
 8006f60:	4632      	mov	r2, r6
 8006f62:	4649      	mov	r1, r9
 8006f64:	4640      	mov	r0, r8
 8006f66:	47d0      	blx	sl
 8006f68:	3001      	adds	r0, #1
 8006f6a:	d0ad      	beq.n	8006ec8 <_printf_i+0x15c>
 8006f6c:	6823      	ldr	r3, [r4, #0]
 8006f6e:	079b      	lsls	r3, r3, #30
 8006f70:	d413      	bmi.n	8006f9a <_printf_i+0x22e>
 8006f72:	68e0      	ldr	r0, [r4, #12]
 8006f74:	9b03      	ldr	r3, [sp, #12]
 8006f76:	4298      	cmp	r0, r3
 8006f78:	bfb8      	it	lt
 8006f7a:	4618      	movlt	r0, r3
 8006f7c:	e7a6      	b.n	8006ecc <_printf_i+0x160>
 8006f7e:	2301      	movs	r3, #1
 8006f80:	4632      	mov	r2, r6
 8006f82:	4649      	mov	r1, r9
 8006f84:	4640      	mov	r0, r8
 8006f86:	47d0      	blx	sl
 8006f88:	3001      	adds	r0, #1
 8006f8a:	d09d      	beq.n	8006ec8 <_printf_i+0x15c>
 8006f8c:	3501      	adds	r5, #1
 8006f8e:	68e3      	ldr	r3, [r4, #12]
 8006f90:	9903      	ldr	r1, [sp, #12]
 8006f92:	1a5b      	subs	r3, r3, r1
 8006f94:	42ab      	cmp	r3, r5
 8006f96:	dcf2      	bgt.n	8006f7e <_printf_i+0x212>
 8006f98:	e7eb      	b.n	8006f72 <_printf_i+0x206>
 8006f9a:	2500      	movs	r5, #0
 8006f9c:	f104 0619 	add.w	r6, r4, #25
 8006fa0:	e7f5      	b.n	8006f8e <_printf_i+0x222>
 8006fa2:	bf00      	nop
 8006fa4:	08007209 	.word	0x08007209
 8006fa8:	0800721a 	.word	0x0800721a

08006fac <memmove>:
 8006fac:	4288      	cmp	r0, r1
 8006fae:	b510      	push	{r4, lr}
 8006fb0:	eb01 0402 	add.w	r4, r1, r2
 8006fb4:	d902      	bls.n	8006fbc <memmove+0x10>
 8006fb6:	4284      	cmp	r4, r0
 8006fb8:	4623      	mov	r3, r4
 8006fba:	d807      	bhi.n	8006fcc <memmove+0x20>
 8006fbc:	1e43      	subs	r3, r0, #1
 8006fbe:	42a1      	cmp	r1, r4
 8006fc0:	d008      	beq.n	8006fd4 <memmove+0x28>
 8006fc2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006fc6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006fca:	e7f8      	b.n	8006fbe <memmove+0x12>
 8006fcc:	4402      	add	r2, r0
 8006fce:	4601      	mov	r1, r0
 8006fd0:	428a      	cmp	r2, r1
 8006fd2:	d100      	bne.n	8006fd6 <memmove+0x2a>
 8006fd4:	bd10      	pop	{r4, pc}
 8006fd6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006fde:	e7f7      	b.n	8006fd0 <memmove+0x24>

08006fe0 <_sbrk_r>:
 8006fe0:	b538      	push	{r3, r4, r5, lr}
 8006fe2:	4d06      	ldr	r5, [pc, #24]	@ (8006ffc <_sbrk_r+0x1c>)
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	4604      	mov	r4, r0
 8006fe8:	4608      	mov	r0, r1
 8006fea:	602b      	str	r3, [r5, #0]
 8006fec:	f000 f83e 	bl	800706c <_sbrk>
 8006ff0:	1c43      	adds	r3, r0, #1
 8006ff2:	d102      	bne.n	8006ffa <_sbrk_r+0x1a>
 8006ff4:	682b      	ldr	r3, [r5, #0]
 8006ff6:	b103      	cbz	r3, 8006ffa <_sbrk_r+0x1a>
 8006ff8:	6023      	str	r3, [r4, #0]
 8006ffa:	bd38      	pop	{r3, r4, r5, pc}
 8006ffc:	2004ca20 	.word	0x2004ca20

08007000 <_realloc_r>:
 8007000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007004:	4680      	mov	r8, r0
 8007006:	4615      	mov	r5, r2
 8007008:	460c      	mov	r4, r1
 800700a:	b921      	cbnz	r1, 8007016 <_realloc_r+0x16>
 800700c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007010:	4611      	mov	r1, r2
 8007012:	f7ff bc59 	b.w	80068c8 <_malloc_r>
 8007016:	b92a      	cbnz	r2, 8007024 <_realloc_r+0x24>
 8007018:	f7ff fbea 	bl	80067f0 <_free_r>
 800701c:	2400      	movs	r4, #0
 800701e:	4620      	mov	r0, r4
 8007020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007024:	f000 f81a 	bl	800705c <_malloc_usable_size_r>
 8007028:	4285      	cmp	r5, r0
 800702a:	4606      	mov	r6, r0
 800702c:	d802      	bhi.n	8007034 <_realloc_r+0x34>
 800702e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007032:	d8f4      	bhi.n	800701e <_realloc_r+0x1e>
 8007034:	4629      	mov	r1, r5
 8007036:	4640      	mov	r0, r8
 8007038:	f7ff fc46 	bl	80068c8 <_malloc_r>
 800703c:	4607      	mov	r7, r0
 800703e:	2800      	cmp	r0, #0
 8007040:	d0ec      	beq.n	800701c <_realloc_r+0x1c>
 8007042:	42b5      	cmp	r5, r6
 8007044:	462a      	mov	r2, r5
 8007046:	4621      	mov	r1, r4
 8007048:	bf28      	it	cs
 800704a:	4632      	movcs	r2, r6
 800704c:	f7ff fbc2 	bl	80067d4 <memcpy>
 8007050:	4621      	mov	r1, r4
 8007052:	4640      	mov	r0, r8
 8007054:	f7ff fbcc 	bl	80067f0 <_free_r>
 8007058:	463c      	mov	r4, r7
 800705a:	e7e0      	b.n	800701e <_realloc_r+0x1e>

0800705c <_malloc_usable_size_r>:
 800705c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007060:	1f18      	subs	r0, r3, #4
 8007062:	2b00      	cmp	r3, #0
 8007064:	bfbc      	itt	lt
 8007066:	580b      	ldrlt	r3, [r1, r0]
 8007068:	18c0      	addlt	r0, r0, r3
 800706a:	4770      	bx	lr

0800706c <_sbrk>:
 800706c:	4a04      	ldr	r2, [pc, #16]	@ (8007080 <_sbrk+0x14>)
 800706e:	6811      	ldr	r1, [r2, #0]
 8007070:	4603      	mov	r3, r0
 8007072:	b909      	cbnz	r1, 8007078 <_sbrk+0xc>
 8007074:	4903      	ldr	r1, [pc, #12]	@ (8007084 <_sbrk+0x18>)
 8007076:	6011      	str	r1, [r2, #0]
 8007078:	6810      	ldr	r0, [r2, #0]
 800707a:	4403      	add	r3, r0
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	4770      	bx	lr
 8007080:	2004ca30 	.word	0x2004ca30
 8007084:	2004ca38 	.word	0x2004ca38

08007088 <_init>:
 8007088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708a:	bf00      	nop
 800708c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708e:	bc08      	pop	{r3}
 8007090:	469e      	mov	lr, r3
 8007092:	4770      	bx	lr

08007094 <_fini>:
 8007094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007096:	bf00      	nop
 8007098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709a:	bc08      	pop	{r3}
 800709c:	469e      	mov	lr, r3
 800709e:	4770      	bx	lr

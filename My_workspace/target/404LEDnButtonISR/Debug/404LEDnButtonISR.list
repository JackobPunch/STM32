
404LEDnButtonISR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006eb0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c8  08007090  08007090  00008090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007258  08007258  00009014  2**0
                  CONTENTS
  4 .ARM          00000008  08007258  08007258  00008258  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007260  08007260  00009014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007260  08007260  00008260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007264  08007264  00008264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08007268  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004c89c  20000014  0800727c  00009014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004c8b0  0800727c  000098b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00009014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014878  00000000  00000000  00009044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003119  00000000  00000000  0001d8bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  000209d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000efe  00000000  00000000  00021d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023aa8  00000000  00000000  00022c56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b82  00000000  00000000  000466fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000db051  00000000  00000000  0005d280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001382d1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000517c  00000000  00000000  00138314  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000d3  00000000  00000000  0013d490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007078 	.word	0x08007078

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08007078 	.word	0x08007078

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2004b2dc 	.word	0x2004b2dc

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b96a 	b.w	80005a0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14e      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f0:	4694      	mov	ip, r2
 80002f2:	458c      	cmp	ip, r1
 80002f4:	4686      	mov	lr, r0
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	d962      	bls.n	80003c2 <__udivmoddi4+0xde>
 80002fc:	b14a      	cbz	r2, 8000312 <__udivmoddi4+0x2e>
 80002fe:	f1c2 0320 	rsb	r3, r2, #32
 8000302:	4091      	lsls	r1, r2
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	fa0c fc02 	lsl.w	ip, ip, r2
 800030c:	4319      	orrs	r1, r3
 800030e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f f68c 	uxth.w	r6, ip
 800031a:	fbb1 f4f7 	udiv	r4, r1, r7
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb07 1114 	mls	r1, r7, r4, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb04 f106 	mul.w	r1, r4, r6
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f104 30ff 	add.w	r0, r4, #4294967295
 800033a:	f080 8112 	bcs.w	8000562 <__udivmoddi4+0x27e>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 810f 	bls.w	8000562 <__udivmoddi4+0x27e>
 8000344:	3c02      	subs	r4, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000352:	fb07 1110 	mls	r1, r7, r0, r1
 8000356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035a:	fb00 f606 	mul.w	r6, r0, r6
 800035e:	429e      	cmp	r6, r3
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x94>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 31ff 	add.w	r1, r0, #4294967295
 800036a:	f080 80fc 	bcs.w	8000566 <__udivmoddi4+0x282>
 800036e:	429e      	cmp	r6, r3
 8000370:	f240 80f9 	bls.w	8000566 <__udivmoddi4+0x282>
 8000374:	4463      	add	r3, ip
 8000376:	3802      	subs	r0, #2
 8000378:	1b9b      	subs	r3, r3, r6
 800037a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037e:	2100      	movs	r1, #0
 8000380:	b11d      	cbz	r5, 800038a <__udivmoddi4+0xa6>
 8000382:	40d3      	lsrs	r3, r2
 8000384:	2200      	movs	r2, #0
 8000386:	e9c5 3200 	strd	r3, r2, [r5]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d905      	bls.n	800039e <__udivmoddi4+0xba>
 8000392:	b10d      	cbz	r5, 8000398 <__udivmoddi4+0xb4>
 8000394:	e9c5 0100 	strd	r0, r1, [r5]
 8000398:	2100      	movs	r1, #0
 800039a:	4608      	mov	r0, r1
 800039c:	e7f5      	b.n	800038a <__udivmoddi4+0xa6>
 800039e:	fab3 f183 	clz	r1, r3
 80003a2:	2900      	cmp	r1, #0
 80003a4:	d146      	bne.n	8000434 <__udivmoddi4+0x150>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xcc>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f0c0 80f0 	bcc.w	8000590 <__udivmoddi4+0x2ac>
 80003b0:	1a86      	subs	r6, r0, r2
 80003b2:	eb64 0303 	sbc.w	r3, r4, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d0e6      	beq.n	800038a <__udivmoddi4+0xa6>
 80003bc:	e9c5 6300 	strd	r6, r3, [r5]
 80003c0:	e7e3      	b.n	800038a <__udivmoddi4+0xa6>
 80003c2:	2a00      	cmp	r2, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x204>
 80003c8:	eba1 040c 	sub.w	r4, r1, ip
 80003cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	2101      	movs	r1, #1
 80003d6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb08 4416 	mls	r4, r8, r6, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb07 f006 	mul.w	r0, r7, r6
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x11c>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x11a>
 80003f8:	4298      	cmp	r0, r3
 80003fa:	f200 80cd 	bhi.w	8000598 <__udivmoddi4+0x2b4>
 80003fe:	4626      	mov	r6, r4
 8000400:	1a1c      	subs	r4, r3, r0
 8000402:	fa1f f38e 	uxth.w	r3, lr
 8000406:	fbb4 f0f8 	udiv	r0, r4, r8
 800040a:	fb08 4410 	mls	r4, r8, r0, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb00 f707 	mul.w	r7, r0, r7
 8000416:	429f      	cmp	r7, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x148>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x146>
 8000424:	429f      	cmp	r7, r3
 8000426:	f200 80b0 	bhi.w	800058a <__udivmoddi4+0x2a6>
 800042a:	4620      	mov	r0, r4
 800042c:	1bdb      	subs	r3, r3, r7
 800042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0x9c>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	431f      	orrs	r7, r3
 8000440:	fa20 fc06 	lsr.w	ip, r0, r6
 8000444:	fa04 f301 	lsl.w	r3, r4, r1
 8000448:	ea43 030c 	orr.w	r3, r3, ip
 800044c:	40f4      	lsrs	r4, r6
 800044e:	fa00 f801 	lsl.w	r8, r0, r1
 8000452:	0c38      	lsrs	r0, r7, #16
 8000454:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000458:	fbb4 fef0 	udiv	lr, r4, r0
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	fb00 441e 	mls	r4, r0, lr, r4
 8000464:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a1      	cmp	r9, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	d90a      	bls.n	800048a <__udivmoddi4+0x1a6>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047a:	f080 8084 	bcs.w	8000586 <__udivmoddi4+0x2a2>
 800047e:	45a1      	cmp	r9, r4
 8000480:	f240 8081 	bls.w	8000586 <__udivmoddi4+0x2a2>
 8000484:	f1ae 0e02 	sub.w	lr, lr, #2
 8000488:	443c      	add	r4, r7
 800048a:	eba4 0409 	sub.w	r4, r4, r9
 800048e:	fa1f f983 	uxth.w	r9, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1d2>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	d267      	bcs.n	800057e <__udivmoddi4+0x29a>
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d965      	bls.n	800057e <__udivmoddi4+0x29a>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ba:	fba0 9302 	umull	r9, r3, r0, r2
 80004be:	eba4 040c 	sub.w	r4, r4, ip
 80004c2:	429c      	cmp	r4, r3
 80004c4:	46ce      	mov	lr, r9
 80004c6:	469c      	mov	ip, r3
 80004c8:	d351      	bcc.n	800056e <__udivmoddi4+0x28a>
 80004ca:	d04e      	beq.n	800056a <__udivmoddi4+0x286>
 80004cc:	b155      	cbz	r5, 80004e4 <__udivmoddi4+0x200>
 80004ce:	ebb8 030e 	subs.w	r3, r8, lr
 80004d2:	eb64 040c 	sbc.w	r4, r4, ip
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	40cb      	lsrs	r3, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	e9c5 6400 	strd	r6, r4, [r5]
 80004e4:	2100      	movs	r1, #0
 80004e6:	e750      	b.n	800038a <__udivmoddi4+0xa6>
 80004e8:	f1c2 0320 	rsb	r3, r2, #32
 80004ec:	fa20 f103 	lsr.w	r1, r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa24 f303 	lsr.w	r3, r4, r3
 80004f8:	4094      	lsls	r4, r2
 80004fa:	430c      	orrs	r4, r1
 80004fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000500:	fa00 fe02 	lsl.w	lr, r0, r2
 8000504:	fa1f f78c 	uxth.w	r7, ip
 8000508:	fbb3 f0f8 	udiv	r0, r3, r8
 800050c:	fb08 3110 	mls	r1, r8, r0, r3
 8000510:	0c23      	lsrs	r3, r4, #16
 8000512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000516:	fb00 f107 	mul.w	r1, r0, r7
 800051a:	4299      	cmp	r1, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x24c>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 36ff 	add.w	r6, r0, #4294967295
 8000526:	d22c      	bcs.n	8000582 <__udivmoddi4+0x29e>
 8000528:	4299      	cmp	r1, r3
 800052a:	d92a      	bls.n	8000582 <__udivmoddi4+0x29e>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1a5b      	subs	r3, r3, r1
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb3 f1f8 	udiv	r1, r3, r8
 8000538:	fb08 3311 	mls	r3, r8, r1, r3
 800053c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000540:	fb01 f307 	mul.w	r3, r1, r7
 8000544:	42a3      	cmp	r3, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x276>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000550:	d213      	bcs.n	800057a <__udivmoddi4+0x296>
 8000552:	42a3      	cmp	r3, r4
 8000554:	d911      	bls.n	800057a <__udivmoddi4+0x296>
 8000556:	3902      	subs	r1, #2
 8000558:	4464      	add	r4, ip
 800055a:	1ae4      	subs	r4, r4, r3
 800055c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000560:	e739      	b.n	80003d6 <__udivmoddi4+0xf2>
 8000562:	4604      	mov	r4, r0
 8000564:	e6f0      	b.n	8000348 <__udivmoddi4+0x64>
 8000566:	4608      	mov	r0, r1
 8000568:	e706      	b.n	8000378 <__udivmoddi4+0x94>
 800056a:	45c8      	cmp	r8, r9
 800056c:	d2ae      	bcs.n	80004cc <__udivmoddi4+0x1e8>
 800056e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000572:	eb63 0c07 	sbc.w	ip, r3, r7
 8000576:	3801      	subs	r0, #1
 8000578:	e7a8      	b.n	80004cc <__udivmoddi4+0x1e8>
 800057a:	4631      	mov	r1, r6
 800057c:	e7ed      	b.n	800055a <__udivmoddi4+0x276>
 800057e:	4603      	mov	r3, r0
 8000580:	e799      	b.n	80004b6 <__udivmoddi4+0x1d2>
 8000582:	4630      	mov	r0, r6
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0x24c>
 8000586:	46d6      	mov	lr, sl
 8000588:	e77f      	b.n	800048a <__udivmoddi4+0x1a6>
 800058a:	4463      	add	r3, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e74d      	b.n	800042c <__udivmoddi4+0x148>
 8000590:	4606      	mov	r6, r0
 8000592:	4623      	mov	r3, r4
 8000594:	4608      	mov	r0, r1
 8000596:	e70f      	b.n	80003b8 <__udivmoddi4+0xd4>
 8000598:	3e02      	subs	r6, #2
 800059a:	4463      	add	r3, ip
 800059c:	e730      	b.n	8000400 <__udivmoddi4+0x11c>
 800059e:	bf00      	nop

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b086      	sub	sp, #24
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 fba7 	bl	8000cfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f883 	bl	80006b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8df 	bl	8000774 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 80005b6:	4b34      	ldr	r3, [pc, #208]	@ (8000688 <main+0xe4>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a33      	ldr	r2, [pc, #204]	@ (8000688 <main+0xe4>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]

  SEGGER_SYSVIEW_Conf();
 80005c2:	f004 fb5b 	bl	8004c7c <SEGGER_SYSVIEW_Conf>

  SEGGER_SYSVIEW_Start();
 80005c6:	f005 ff8d 	bl	80064e4 <SEGGER_SYSVIEW_Start>

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 3, &LED1_task_handle);
 80005ca:	4b30      	ldr	r3, [pc, #192]	@ (800068c <main+0xe8>)
 80005cc:	9301      	str	r3, [sp, #4]
 80005ce:	2303      	movs	r3, #3
 80005d0:	9300      	str	r3, [sp, #0]
 80005d2:	2300      	movs	r3, #0
 80005d4:	22c8      	movs	r2, #200	@ 0xc8
 80005d6:	492e      	ldr	r1, [pc, #184]	@ (8000690 <main+0xec>)
 80005d8:	482e      	ldr	r0, [pc, #184]	@ (8000694 <main+0xf0>)
 80005da:	f002 f9d5 	bl	8002988 <xTaskCreate>
 80005de:	4603      	mov	r3, r0
 80005e0:	4a2d      	ldr	r2, [pc, #180]	@ (8000698 <main+0xf4>)
 80005e2:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 80005e4:	4b2c      	ldr	r3, [pc, #176]	@ (8000698 <main+0xf4>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b01      	cmp	r3, #1
 80005ea:	d00b      	beq.n	8000604 <main+0x60>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005f0:	f383 8811 	msr	BASEPRI, r3
 80005f4:	f3bf 8f6f 	isb	sy
 80005f8:	f3bf 8f4f 	dsb	sy
 80005fc:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	e7fd      	b.n	8000600 <main+0x5c>

  next_task_handle = LED1_task_handle;
 8000604:	4b21      	ldr	r3, [pc, #132]	@ (800068c <main+0xe8>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a24      	ldr	r2, [pc, #144]	@ (800069c <main+0xf8>)
 800060a:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &LED2_task_handle);
 800060c:	4b24      	ldr	r3, [pc, #144]	@ (80006a0 <main+0xfc>)
 800060e:	9301      	str	r3, [sp, #4]
 8000610:	2302      	movs	r3, #2
 8000612:	9300      	str	r3, [sp, #0]
 8000614:	2300      	movs	r3, #0
 8000616:	22c8      	movs	r2, #200	@ 0xc8
 8000618:	4922      	ldr	r1, [pc, #136]	@ (80006a4 <main+0x100>)
 800061a:	4823      	ldr	r0, [pc, #140]	@ (80006a8 <main+0x104>)
 800061c:	f002 f9b4 	bl	8002988 <xTaskCreate>
 8000620:	4603      	mov	r3, r0
 8000622:	4a1d      	ldr	r2, [pc, #116]	@ (8000698 <main+0xf4>)
 8000624:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 8000626:	4b1c      	ldr	r3, [pc, #112]	@ (8000698 <main+0xf4>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d00b      	beq.n	8000646 <main+0xa2>
        __asm volatile
 800062e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8000632:	f383 8811 	msr	BASEPRI, r3
 8000636:	f3bf 8f6f 	isb	sy
 800063a:	f3bf 8f4f 	dsb	sy
 800063e:	60bb      	str	r3, [r7, #8]
    }
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	e7fd      	b.n	8000642 <main+0x9e>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 1, &LED3_task_handle);
 8000646:	4b19      	ldr	r3, [pc, #100]	@ (80006ac <main+0x108>)
 8000648:	9301      	str	r3, [sp, #4]
 800064a:	2301      	movs	r3, #1
 800064c:	9300      	str	r3, [sp, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	22c8      	movs	r2, #200	@ 0xc8
 8000652:	4917      	ldr	r1, [pc, #92]	@ (80006b0 <main+0x10c>)
 8000654:	4817      	ldr	r0, [pc, #92]	@ (80006b4 <main+0x110>)
 8000656:	f002 f997 	bl	8002988 <xTaskCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a0e      	ldr	r2, [pc, #56]	@ (8000698 <main+0xf4>)
 800065e:	6013      	str	r3, [r2, #0]

  configASSERT(status == pdPASS);
 8000660:	4b0d      	ldr	r3, [pc, #52]	@ (8000698 <main+0xf4>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	2b01      	cmp	r3, #1
 8000666:	d00b      	beq.n	8000680 <main+0xdc>
        __asm volatile
 8000668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800066c:	f383 8811 	msr	BASEPRI, r3
 8000670:	f3bf 8f6f 	isb	sy
 8000674:	f3bf 8f4f 	dsb	sy
 8000678:	607b      	str	r3, [r7, #4]
    }
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	e7fd      	b.n	800067c <main+0xd8>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000680:	f002 fbae 	bl	8002de0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000684:	bf00      	nop
 8000686:	e7fd      	b.n	8000684 <main+0xe0>
 8000688:	e0001000 	.word	0xe0001000
 800068c:	20000030 	.word	0x20000030
 8000690:	08007090 	.word	0x08007090
 8000694:	0800095d 	.word	0x0800095d
 8000698:	20000044 	.word	0x20000044
 800069c:	20000040 	.word	0x20000040
 80006a0:	20000034 	.word	0x20000034
 80006a4:	080070a0 	.word	0x080070a0
 80006a8:	080009c9 	.word	0x080009c9
 80006ac:	20000038 	.word	0x20000038
 80006b0:	080070b0 	.word	0x080070b0
 80006b4:	08000a35 	.word	0x08000a35

080006b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b094      	sub	sp, #80	@ 0x50
 80006bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006be:	f107 031c 	add.w	r3, r7, #28
 80006c2:	2234      	movs	r2, #52	@ 0x34
 80006c4:	2100      	movs	r1, #0
 80006c6:	4618      	mov	r0, r3
 80006c8:	f006 fc9c 	bl	8007004 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006cc:	f107 0308 	add.w	r3, r7, #8
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006dc:	2300      	movs	r3, #0
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	4b22      	ldr	r3, [pc, #136]	@ (800076c <SystemClock_Config+0xb4>)
 80006e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e4:	4a21      	ldr	r2, [pc, #132]	@ (800076c <SystemClock_Config+0xb4>)
 80006e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80006ec:	4b1f      	ldr	r3, [pc, #124]	@ (800076c <SystemClock_Config+0xb4>)
 80006ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f4:	607b      	str	r3, [r7, #4]
 80006f6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f8:	2300      	movs	r3, #0
 80006fa:	603b      	str	r3, [r7, #0]
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <SystemClock_Config+0xb8>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4a1b      	ldr	r2, [pc, #108]	@ (8000770 <SystemClock_Config+0xb8>)
 8000702:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000706:	6013      	str	r3, [r2, #0]
 8000708:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <SystemClock_Config+0xb8>)
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000710:	603b      	str	r3, [r7, #0]
 8000712:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	2301      	movs	r3, #1
 800071a:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071c:	2310      	movs	r3, #16
 800071e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000720:	2300      	movs	r3, #0
 8000722:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4618      	mov	r0, r3
 800072a:	f001 f835 	bl	8001798 <HAL_RCC_OscConfig>
 800072e:	4603      	mov	r3, r0
 8000730:	2b00      	cmp	r3, #0
 8000732:	d001      	beq.n	8000738 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000734:	f000 f9cc 	bl	8000ad0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000738:	230f      	movs	r3, #15
 800073a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800073c:	2300      	movs	r3, #0
 800073e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000740:	2300      	movs	r3, #0
 8000742:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000744:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000748:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800074e:	f107 0308 	add.w	r3, r7, #8
 8000752:	2100      	movs	r1, #0
 8000754:	4618      	mov	r0, r3
 8000756:	f000 fde1 	bl	800131c <HAL_RCC_ClockConfig>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000760:	f000 f9b6 	bl	8000ad0 <Error_Handler>
  }
}
 8000764:	bf00      	nop
 8000766:	3750      	adds	r7, #80	@ 0x50
 8000768:	46bd      	mov	sp, r7
 800076a:	bd80      	pop	{r7, pc}
 800076c:	40023800 	.word	0x40023800
 8000770:	40007000 	.word	0x40007000

08000774 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b08c      	sub	sp, #48	@ 0x30
 8000778:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
 8000788:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	61bb      	str	r3, [r7, #24]
 800078e:	4b61      	ldr	r3, [pc, #388]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000792:	4a60      	ldr	r2, [pc, #384]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6313      	str	r3, [r2, #48]	@ 0x30
 800079a:	4b5e      	ldr	r3, [pc, #376]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	61bb      	str	r3, [r7, #24]
 80007a4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	617b      	str	r3, [r7, #20]
 80007aa:	4b5a      	ldr	r3, [pc, #360]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ae:	4a59      	ldr	r2, [pc, #356]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80007b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007b6:	4b57      	ldr	r3, [pc, #348]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80007be:	617b      	str	r3, [r7, #20]
 80007c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	2300      	movs	r3, #0
 80007c4:	613b      	str	r3, [r7, #16]
 80007c6:	4b53      	ldr	r3, [pc, #332]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ca:	4a52      	ldr	r2, [pc, #328]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007cc:	f043 0302 	orr.w	r3, r3, #2
 80007d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007d2:	4b50      	ldr	r3, [pc, #320]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d6:	f003 0302 	and.w	r3, r3, #2
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	4b4c      	ldr	r3, [pc, #304]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4a4b      	ldr	r2, [pc, #300]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007e8:	f043 0308 	orr.w	r3, r3, #8
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4b49      	ldr	r3, [pc, #292]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0308 	and.w	r3, r3, #8
 80007f6:	60fb      	str	r3, [r7, #12]
 80007f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	4b45      	ldr	r3, [pc, #276]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4a44      	ldr	r2, [pc, #272]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000804:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4b42      	ldr	r3, [pc, #264]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	607b      	str	r3, [r7, #4]
 800081a:	4b3e      	ldr	r3, [pc, #248]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4a3d      	ldr	r2, [pc, #244]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000820:	f043 0301 	orr.w	r3, r3, #1
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4b3b      	ldr	r3, [pc, #236]	@ (8000914 <MX_GPIO_Init+0x1a0>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0301 	and.w	r3, r3, #1
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000838:	4837      	ldr	r0, [pc, #220]	@ (8000918 <MX_GPIO_Init+0x1a4>)
 800083a:	f000 fd17 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	2140      	movs	r1, #64	@ 0x40
 8000842:	4836      	ldr	r0, [pc, #216]	@ (800091c <MX_GPIO_Init+0x1a8>)
 8000844:	f000 fd12 	bl	800126c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000848:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800084c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800084e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000852:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 031c 	add.w	r3, r7, #28
 800085c:	4619      	mov	r1, r3
 800085e:	4830      	ldr	r0, [pc, #192]	@ (8000920 <MX_GPIO_Init+0x1ac>)
 8000860:	f000 fb70 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000864:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000868:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086a:	2301      	movs	r3, #1
 800086c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086e:	2300      	movs	r3, #0
 8000870:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000872:	2300      	movs	r3, #0
 8000874:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000876:	f107 031c 	add.w	r3, r7, #28
 800087a:	4619      	mov	r1, r3
 800087c:	4826      	ldr	r0, [pc, #152]	@ (8000918 <MX_GPIO_Init+0x1a4>)
 800087e:	f000 fb61 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000882:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000886:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000890:	2303      	movs	r3, #3
 8000892:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000894:	2307      	movs	r3, #7
 8000896:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000898:	f107 031c 	add.w	r3, r7, #28
 800089c:	4619      	mov	r1, r3
 800089e:	4821      	ldr	r0, [pc, #132]	@ (8000924 <MX_GPIO_Init+0x1b0>)
 80008a0:	f000 fb50 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008a4:	2340      	movs	r3, #64	@ 0x40
 80008a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a8:	2301      	movs	r3, #1
 80008aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ac:	2300      	movs	r3, #0
 80008ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008b0:	2300      	movs	r3, #0
 80008b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4818      	ldr	r0, [pc, #96]	@ (800091c <MX_GPIO_Init+0x1a8>)
 80008bc:	f000 fb42 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008c0:	2380      	movs	r3, #128	@ 0x80
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4812      	ldr	r0, [pc, #72]	@ (800091c <MX_GPIO_Init+0x1a8>)
 80008d4:	f000 fb36 	bl	8000f44 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008d8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e6:	2303      	movs	r3, #3
 80008e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ea:	230a      	movs	r3, #10
 80008ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ee:	f107 031c 	add.w	r3, r7, #28
 80008f2:	4619      	mov	r1, r3
 80008f4:	480c      	ldr	r0, [pc, #48]	@ (8000928 <MX_GPIO_Init+0x1b4>)
 80008f6:	f000 fb25 	bl	8000f44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2106      	movs	r1, #6
 80008fe:	2028      	movs	r0, #40	@ 0x28
 8000900:	f000 faf6 	bl	8000ef0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000904:	2028      	movs	r0, #40	@ 0x28
 8000906:	f000 fb0f 	bl	8000f28 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800090a:	bf00      	nop
 800090c:	3730      	adds	r7, #48	@ 0x30
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	40023800 	.word	0x40023800
 8000918:	40020400 	.word	0x40020400
 800091c:	40021800 	.word	0x40021800
 8000920:	40020800 	.word	0x40020800
 8000924:	40020c00 	.word	0x40020c00
 8000928:	40020000 	.word	0x40020000

0800092c <button_interrupt_handler>:

/* USER CODE BEGIN 4 */

void button_interrupt_handler(void){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af02      	add	r7, sp, #8

	traceISR_ENTER();
 8000932:	f006 f89f 	bl	8006a74 <SEGGER_SYSVIEW_RecordEnterISR>
	xTaskNotifyFromISR(next_task_handle, 0, eNoAction,NULL);
 8000936:	4b08      	ldr	r3, [pc, #32]	@ (8000958 <button_interrupt_handler+0x2c>)
 8000938:	6818      	ldr	r0, [r3, #0]
 800093a:	2300      	movs	r3, #0
 800093c:	9301      	str	r3, [sp, #4]
 800093e:	2300      	movs	r3, #0
 8000940:	9300      	str	r3, [sp, #0]
 8000942:	2300      	movs	r3, #0
 8000944:	2200      	movs	r2, #0
 8000946:	2100      	movs	r1, #0
 8000948:	f003 f858 	bl	80039fc <xTaskGenericNotifyFromISR>
	traceISR_EXIT();
 800094c:	f006 f8d4 	bl	8006af8 <SEGGER_SYSVIEW_RecordExitISR>

}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000040 	.word	0x20000040

0800095c <led_green_handler>:

static void led_green_handler(void* parameters){
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af02      	add	r7, sp, #8
 8000962:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 8000964:	4813      	ldr	r0, [pc, #76]	@ (80009b4 <led_green_handler+0x58>)
 8000966:	f006 facd 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 800096a:	2101      	movs	r1, #1
 800096c:	4812      	ldr	r0, [pc, #72]	@ (80009b8 <led_green_handler+0x5c>)
 800096e:	f000 fc96 	bl	800129e <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(1000));
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	9300      	str	r3, [sp, #0]
 8000978:	2300      	movs	r3, #0
 800097a:	2200      	movs	r2, #0
 800097c:	2100      	movs	r1, #0
 800097e:	2000      	movs	r0, #0
 8000980:	f002 ffb2 	bl	80038e8 <xTaskGenericNotifyWait>
 8000984:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	2b01      	cmp	r3, #1
 800098a:	d1eb      	bne.n	8000964 <led_green_handler+0x8>
			portENTER_CRITICAL();
 800098c:	f003 fe66 	bl	800465c <vPortEnterCritical>
			next_task_handle = LED2_task_handle;
 8000990:	4b0a      	ldr	r3, [pc, #40]	@ (80009bc <led_green_handler+0x60>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a0a      	ldr	r2, [pc, #40]	@ (80009c0 <led_green_handler+0x64>)
 8000996:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB,LD1_Pin,GPIO_PIN_SET);
 8000998:	2201      	movs	r2, #1
 800099a:	2101      	movs	r1, #1
 800099c:	4806      	ldr	r0, [pc, #24]	@ (80009b8 <led_green_handler+0x5c>)
 800099e:	f000 fc65 	bl	800126c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete green LED task");
 80009a2:	4808      	ldr	r0, [pc, #32]	@ (80009c4 <led_green_handler+0x68>)
 80009a4:	f006 faae 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 80009a8:	f003 fe8a 	bl	80046c0 <vPortExitCritical>
			vTaskDelete(NULL);
 80009ac:	2000      	movs	r0, #0
 80009ae:	f002 f967 	bl	8002c80 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
 80009b2:	e7d7      	b.n	8000964 <led_green_handler+0x8>
 80009b4:	080070c0 	.word	0x080070c0
 80009b8:	40020400 	.word	0x40020400
 80009bc:	20000034 	.word	0x20000034
 80009c0:	20000040 	.word	0x20000040
 80009c4:	080070d4 	.word	0x080070d4

080009c8 <led_blue_handler>:
		}
	}
}

static void led_blue_handler(void* parameters){
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b086      	sub	sp, #24
 80009cc:	af02      	add	r7, sp, #8
 80009ce:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 80009d0:	4813      	ldr	r0, [pc, #76]	@ (8000a20 <led_blue_handler+0x58>)
 80009d2:	f006 fa97 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 80009d6:	2180      	movs	r1, #128	@ 0x80
 80009d8:	4812      	ldr	r0, [pc, #72]	@ (8000a24 <led_blue_handler+0x5c>)
 80009da:	f000 fc60 	bl	800129e <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(800));
 80009de:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80009e2:	9300      	str	r3, [sp, #0]
 80009e4:	2300      	movs	r3, #0
 80009e6:	2200      	movs	r2, #0
 80009e8:	2100      	movs	r1, #0
 80009ea:	2000      	movs	r0, #0
 80009ec:	f002 ff7c 	bl	80038e8 <xTaskGenericNotifyWait>
 80009f0:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 80009f2:	68fb      	ldr	r3, [r7, #12]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d1eb      	bne.n	80009d0 <led_blue_handler+0x8>
			portENTER_CRITICAL();
 80009f8:	f003 fe30 	bl	800465c <vPortEnterCritical>
			next_task_handle = LED3_task_handle;
 80009fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000a28 <led_blue_handler+0x60>)
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0a      	ldr	r2, [pc, #40]	@ (8000a2c <led_blue_handler+0x64>)
 8000a02:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(GPIOB,LD2_Pin,GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2180      	movs	r1, #128	@ 0x80
 8000a08:	4806      	ldr	r0, [pc, #24]	@ (8000a24 <led_blue_handler+0x5c>)
 8000a0a:	f000 fc2f 	bl	800126c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete blue LED task");
 8000a0e:	4808      	ldr	r0, [pc, #32]	@ (8000a30 <led_blue_handler+0x68>)
 8000a10:	f006 fa78 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a14:	f003 fe54 	bl	80046c0 <vPortExitCritical>
			vTaskDelete(NULL);
 8000a18:	2000      	movs	r0, #0
 8000a1a:	f002 f931 	bl	8002c80 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
 8000a1e:	e7d7      	b.n	80009d0 <led_blue_handler+0x8>
 8000a20:	080070ec 	.word	0x080070ec
 8000a24:	40020400 	.word	0x40020400
 8000a28:	20000038 	.word	0x20000038
 8000a2c:	20000040 	.word	0x20000040
 8000a30:	08007100 	.word	0x08007100

08000a34 <led_red_handler>:
		}
	}
}

static void led_red_handler(void* parameters){
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b086      	sub	sp, #24
 8000a38:	af02      	add	r7, sp, #8
 8000a3a:	6078      	str	r0, [r7, #4]
	BaseType_t status_2;
	while(1){
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a3c:	4816      	ldr	r0, [pc, #88]	@ (8000a98 <led_red_handler+0x64>)
 8000a3e:	f006 fa61 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
		HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
 8000a42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a46:	4815      	ldr	r0, [pc, #84]	@ (8000a9c <led_red_handler+0x68>)
 8000a48:	f000 fc29 	bl	800129e <HAL_GPIO_TogglePin>
		status_2 = xTaskNotifyWait(0,0,NULL,pdMS_TO_TICKS(400));
 8000a4c:	f44f 73c8 	mov.w	r3, #400	@ 0x190
 8000a50:	9300      	str	r3, [sp, #0]
 8000a52:	2300      	movs	r3, #0
 8000a54:	2200      	movs	r2, #0
 8000a56:	2100      	movs	r1, #0
 8000a58:	2000      	movs	r0, #0
 8000a5a:	f002 ff45 	bl	80038e8 <xTaskGenericNotifyWait>
 8000a5e:	60f8      	str	r0, [r7, #12]
		if(status_2 == pdTRUE){
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d1ea      	bne.n	8000a3c <led_red_handler+0x8>
			portENTER_CRITICAL();
 8000a66:	f003 fdf9 	bl	800465c <vPortEnterCritical>
			next_task_handle = NULL;
 8000a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000aa0 <led_red_handler+0x6c>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
			HAL_GPIO_WritePin(GPIOB,LD3_Pin,GPIO_PIN_SET);
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000a76:	4809      	ldr	r0, [pc, #36]	@ (8000a9c <led_red_handler+0x68>)
 8000a78:	f000 fbf8 	bl	800126c <HAL_GPIO_WritePin>
			SEGGER_SYSVIEW_PrintfTarget("Delete red LED task");
 8000a7c:	4809      	ldr	r0, [pc, #36]	@ (8000aa4 <led_red_handler+0x70>)
 8000a7e:	f006 fa41 	bl	8006f04 <SEGGER_SYSVIEW_PrintfTarget>
			portEXIT_CRITICAL();
 8000a82:	f003 fe1d 	bl	80046c0 <vPortExitCritical>
			vTaskDelete(BTN_task_handle);
 8000a86:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <led_red_handler+0x74>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	f002 f8f8 	bl	8002c80 <vTaskDelete>
			vTaskDelete(NULL);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f002 f8f5 	bl	8002c80 <vTaskDelete>
		SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
 8000a96:	e7d1      	b.n	8000a3c <led_red_handler+0x8>
 8000a98:	08007118 	.word	0x08007118
 8000a9c:	40020400 	.word	0x40020400
 8000aa0:	20000040 	.word	0x20000040
 8000aa4:	0800712c 	.word	0x0800712c
 8000aa8:	2000003c 	.word	0x2000003c

08000aac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a04      	ldr	r2, [pc, #16]	@ (8000acc <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d101      	bne.n	8000ac2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000abe:	f000 f93f 	bl	8000d40 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	3708      	adds	r7, #8
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40001000 	.word	0x40001000

08000ad0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ad4:	b672      	cpsid	i
}
 8000ad6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ad8:	bf00      	nop
 8000ada:	e7fd      	b.n	8000ad8 <Error_Handler+0x8>

08000adc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	607b      	str	r3, [r7, #4]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aea:	4a0f      	ldr	r2, [pc, #60]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000aec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000af2:	4b0d      	ldr	r3, [pc, #52]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000af6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000afa:	607b      	str	r3, [r7, #4]
 8000afc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000afe:	2300      	movs	r3, #0
 8000b00:	603b      	str	r3, [r7, #0]
 8000b02:	4b09      	ldr	r3, [pc, #36]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b06:	4a08      	ldr	r2, [pc, #32]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b0e:	4b06      	ldr	r3, [pc, #24]	@ (8000b28 <HAL_MspInit+0x4c>)
 8000b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b16:	603b      	str	r3, [r7, #0]
 8000b18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 8000b1a:	f003 fd1f 	bl	800455c <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800

08000b2c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08e      	sub	sp, #56	@ 0x38
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000b34:	2300      	movs	r3, #0
 8000b36:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	60fb      	str	r3, [r7, #12]
 8000b40:	4b33      	ldr	r3, [pc, #204]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b44:	4a32      	ldr	r2, [pc, #200]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4c:	4b30      	ldr	r3, [pc, #192]	@ (8000c10 <HAL_InitTick+0xe4>)
 8000b4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b50:	f003 0310 	and.w	r3, r3, #16
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b58:	f107 0210 	add.w	r2, r7, #16
 8000b5c:	f107 0314 	add.w	r3, r7, #20
 8000b60:	4611      	mov	r1, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f000 fde6 	bl	8001734 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b68:	6a3b      	ldr	r3, [r7, #32]
 8000b6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d103      	bne.n	8000b7a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b72:	f000 fdcb 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8000b76:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b78:	e004      	b.n	8000b84 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b7a:	f000 fdc7 	bl	800170c <HAL_RCC_GetPCLK1Freq>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	005b      	lsls	r3, r3, #1
 8000b82:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b86:	4a23      	ldr	r2, [pc, #140]	@ (8000c14 <HAL_InitTick+0xe8>)
 8000b88:	fba2 2303 	umull	r2, r3, r2, r3
 8000b8c:	0c9b      	lsrs	r3, r3, #18
 8000b8e:	3b01      	subs	r3, #1
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b92:	4b21      	ldr	r3, [pc, #132]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b94:	4a21      	ldr	r2, [pc, #132]	@ (8000c1c <HAL_InitTick+0xf0>)
 8000b96:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b98:	4b1f      	ldr	r3, [pc, #124]	@ (8000c18 <HAL_InitTick+0xec>)
 8000b9a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b9e:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000ba4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8000c18 <HAL_InitTick+0xec>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bac:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b19      	ldr	r3, [pc, #100]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000bb8:	4817      	ldr	r0, [pc, #92]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bba:	f001 f871 	bl	8001ca0 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000bc4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d11b      	bne.n	8000c04 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000bcc:	4812      	ldr	r0, [pc, #72]	@ (8000c18 <HAL_InitTick+0xec>)
 8000bce:	f001 f8c1 	bl	8001d54 <HAL_TIM_Base_Start_IT>
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000bd8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d111      	bne.n	8000c04 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000be0:	2036      	movs	r0, #54	@ 0x36
 8000be2:	f000 f9a1 	bl	8000f28 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	2b0f      	cmp	r3, #15
 8000bea:	d808      	bhi.n	8000bfe <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bec:	2200      	movs	r2, #0
 8000bee:	6879      	ldr	r1, [r7, #4]
 8000bf0:	2036      	movs	r0, #54	@ 0x36
 8000bf2:	f000 f97d 	bl	8000ef0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf6:	4a0a      	ldr	r2, [pc, #40]	@ (8000c20 <HAL_InitTick+0xf4>)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	6013      	str	r3, [r2, #0]
 8000bfc:	e002      	b.n	8000c04 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000c04:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000c08:	4618      	mov	r0, r3
 8000c0a:	3738      	adds	r7, #56	@ 0x38
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	bd80      	pop	{r7, pc}
 8000c10:	40023800 	.word	0x40023800
 8000c14:	431bde83 	.word	0x431bde83
 8000c18:	20000048 	.word	0x20000048
 8000c1c:	40001000 	.word	0x40001000
 8000c20:	20000004 	.word	0x20000004

08000c24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c24:	b480      	push	{r7}
 8000c26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c28:	bf00      	nop
 8000c2a:	e7fd      	b.n	8000c28 <NMI_Handler+0x4>

08000c2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c30:	bf00      	nop
 8000c32:	e7fd      	b.n	8000c30 <HardFault_Handler+0x4>

08000c34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c38:	bf00      	nop
 8000c3a:	e7fd      	b.n	8000c38 <MemManage_Handler+0x4>

08000c3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c40:	bf00      	nop
 8000c42:	e7fd      	b.n	8000c40 <BusFault_Handler+0x4>

08000c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c48:	bf00      	nop
 8000c4a:	e7fd      	b.n	8000c48 <UsageFault_Handler+0x4>

08000c4c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr

08000c5a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000c5a:	b580      	push	{r7, lr}
 8000c5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

	button_interrupt_handler();
 8000c5e:	f7ff fe65 	bl	800092c <button_interrupt_handler>

  /* USER CODE END EXTI15_10_IRQn 0 */
	HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8000c62:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000c66:	f000 fb35 	bl	80012d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
	...

08000c70 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c74:	4802      	ldr	r0, [pc, #8]	@ (8000c80 <TIM6_DAC_IRQHandler+0x10>)
 8000c76:	f001 f8dd 	bl	8001e34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000048 	.word	0x20000048

08000c84 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c88:	4b06      	ldr	r3, [pc, #24]	@ (8000ca4 <SystemInit+0x20>)
 8000c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c8e:	4a05      	ldr	r2, [pc, #20]	@ (8000ca4 <SystemInit+0x20>)
 8000c90:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c94:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr
 8000ca2:	bf00      	nop
 8000ca4:	e000ed00 	.word	0xe000ed00

08000ca8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000ca8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ce0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000cac:	f7ff ffea 	bl	8000c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000cb2:	490d      	ldr	r1, [pc, #52]	@ (8000ce8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000cb4:	4a0d      	ldr	r2, [pc, #52]	@ (8000cec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb8:	e002      	b.n	8000cc0 <LoopCopyDataInit>

08000cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cbe:	3304      	adds	r3, #4

08000cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cc4:	d3f9      	bcc.n	8000cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000cc8:	4c0a      	ldr	r4, [pc, #40]	@ (8000cf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ccc:	e001      	b.n	8000cd2 <LoopFillZerobss>

08000cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd0:	3204      	adds	r2, #4

08000cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cd4:	d3fb      	bcc.n	8000cce <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000cd6:	f006 f99d 	bl	8007014 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000cda:	f7ff fc63 	bl	80005a4 <main>
  bx  lr    
 8000cde:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000ce0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000cec:	08007268 	.word	0x08007268
  ldr r2, =_sbss
 8000cf0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000cf4:	2004c8b0 	.word	0x2004c8b0

08000cf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cf8:	e7fe      	b.n	8000cf8 <ADC_IRQHandler>
	...

08000cfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000d00:	4b0e      	ldr	r3, [pc, #56]	@ (8000d3c <HAL_Init+0x40>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a0d      	ldr	r2, [pc, #52]	@ (8000d3c <HAL_Init+0x40>)
 8000d06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8000d3c <HAL_Init+0x40>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	4a0a      	ldr	r2, [pc, #40]	@ (8000d3c <HAL_Init+0x40>)
 8000d12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000d16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d18:	4b08      	ldr	r3, [pc, #32]	@ (8000d3c <HAL_Init+0x40>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	4a07      	ldr	r2, [pc, #28]	@ (8000d3c <HAL_Init+0x40>)
 8000d1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000d22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d24:	2003      	movs	r0, #3
 8000d26:	f000 f8d8 	bl	8000eda <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d2a:	200f      	movs	r0, #15
 8000d2c:	f7ff fefe 	bl	8000b2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d30:	f7ff fed4 	bl	8000adc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d34:	2300      	movs	r3, #0
}
 8000d36:	4618      	mov	r0, r3
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40023c00 	.word	0x40023c00

08000d40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d44:	4b06      	ldr	r3, [pc, #24]	@ (8000d60 <HAL_IncTick+0x20>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	4b06      	ldr	r3, [pc, #24]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	4413      	add	r3, r2
 8000d50:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <HAL_IncTick+0x24>)
 8000d52:	6013      	str	r3, [r2, #0]
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000090 	.word	0x20000090

08000d68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <HAL_GetTick+0x14>)
 8000d6e:	681b      	ldr	r3, [r3, #0]
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	20000090 	.word	0x20000090

08000d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d80:	b480      	push	{r7}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	f003 0307 	and.w	r3, r3, #7
 8000d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d90:	4b0c      	ldr	r3, [pc, #48]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d96:	68ba      	ldr	r2, [r7, #8]
 8000d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d9c:	4013      	ands	r3, r2
 8000d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000da4:	68bb      	ldr	r3, [r7, #8]
 8000da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000db2:	4a04      	ldr	r2, [pc, #16]	@ (8000dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	60d3      	str	r3, [r2, #12]
}
 8000db8:	bf00      	nop
 8000dba:	3714      	adds	r7, #20
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <__NVIC_GetPriorityGrouping+0x18>)
 8000dce:	68db      	ldr	r3, [r3, #12]
 8000dd0:	0a1b      	lsrs	r3, r3, #8
 8000dd2:	f003 0307 	and.w	r3, r3, #7
}
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	e000ed00 	.word	0xe000ed00

08000de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000de4:	b480      	push	{r7}
 8000de6:	b083      	sub	sp, #12
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	db0b      	blt.n	8000e0e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000df6:	79fb      	ldrb	r3, [r7, #7]
 8000df8:	f003 021f 	and.w	r2, r3, #31
 8000dfc:	4907      	ldr	r1, [pc, #28]	@ (8000e1c <__NVIC_EnableIRQ+0x38>)
 8000dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e02:	095b      	lsrs	r3, r3, #5
 8000e04:	2001      	movs	r0, #1
 8000e06:	fa00 f202 	lsl.w	r2, r0, r2
 8000e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000e0e:	bf00      	nop
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop
 8000e1c:	e000e100 	.word	0xe000e100

08000e20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e20:	b480      	push	{r7}
 8000e22:	b083      	sub	sp, #12
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	4603      	mov	r3, r0
 8000e28:	6039      	str	r1, [r7, #0]
 8000e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	db0a      	blt.n	8000e4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	b2da      	uxtb	r2, r3
 8000e38:	490c      	ldr	r1, [pc, #48]	@ (8000e6c <__NVIC_SetPriority+0x4c>)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	0112      	lsls	r2, r2, #4
 8000e40:	b2d2      	uxtb	r2, r2
 8000e42:	440b      	add	r3, r1
 8000e44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e48:	e00a      	b.n	8000e60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e4a:	683b      	ldr	r3, [r7, #0]
 8000e4c:	b2da      	uxtb	r2, r3
 8000e4e:	4908      	ldr	r1, [pc, #32]	@ (8000e70 <__NVIC_SetPriority+0x50>)
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	f003 030f 	and.w	r3, r3, #15
 8000e56:	3b04      	subs	r3, #4
 8000e58:	0112      	lsls	r2, r2, #4
 8000e5a:	b2d2      	uxtb	r2, r2
 8000e5c:	440b      	add	r3, r1
 8000e5e:	761a      	strb	r2, [r3, #24]
}
 8000e60:	bf00      	nop
 8000e62:	370c      	adds	r7, #12
 8000e64:	46bd      	mov	sp, r7
 8000e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6a:	4770      	bx	lr
 8000e6c:	e000e100 	.word	0xe000e100
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b089      	sub	sp, #36	@ 0x24
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	60f8      	str	r0, [r7, #12]
 8000e7c:	60b9      	str	r1, [r7, #8]
 8000e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f003 0307 	and.w	r3, r3, #7
 8000e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	f1c3 0307 	rsb	r3, r3, #7
 8000e8e:	2b04      	cmp	r3, #4
 8000e90:	bf28      	it	cs
 8000e92:	2304      	movcs	r3, #4
 8000e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	3304      	adds	r3, #4
 8000e9a:	2b06      	cmp	r3, #6
 8000e9c:	d902      	bls.n	8000ea4 <NVIC_EncodePriority+0x30>
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3b03      	subs	r3, #3
 8000ea2:	e000      	b.n	8000ea6 <NVIC_EncodePriority+0x32>
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8000eac:	69bb      	ldr	r3, [r7, #24]
 8000eae:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb2:	43da      	mvns	r2, r3
 8000eb4:	68bb      	ldr	r3, [r7, #8]
 8000eb6:	401a      	ands	r2, r3
 8000eb8:	697b      	ldr	r3, [r7, #20]
 8000eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec6:	43d9      	mvns	r1, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ecc:	4313      	orrs	r3, r2
         );
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3724      	adds	r7, #36	@ 0x24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed8:	4770      	bx	lr

08000eda <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000eda:	b580      	push	{r7, lr}
 8000edc:	b082      	sub	sp, #8
 8000ede:	af00      	add	r7, sp, #0
 8000ee0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ee2:	6878      	ldr	r0, [r7, #4]
 8000ee4:	f7ff ff4c 	bl	8000d80 <__NVIC_SetPriorityGrouping>
}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
 8000efc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f02:	f7ff ff61 	bl	8000dc8 <__NVIC_GetPriorityGrouping>
 8000f06:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	68b9      	ldr	r1, [r7, #8]
 8000f0c:	6978      	ldr	r0, [r7, #20]
 8000f0e:	f7ff ffb1 	bl	8000e74 <NVIC_EncodePriority>
 8000f12:	4602      	mov	r2, r0
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	4611      	mov	r1, r2
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff80 	bl	8000e20 <__NVIC_SetPriority>
}
 8000f20:	bf00      	nop
 8000f22:	3718      	adds	r7, #24
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	4603      	mov	r3, r0
 8000f30:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f36:	4618      	mov	r0, r3
 8000f38:	f7ff ff54 	bl	8000de4 <__NVIC_EnableIRQ>
}
 8000f3c:	bf00      	nop
 8000f3e:	3708      	adds	r7, #8
 8000f40:	46bd      	mov	sp, r7
 8000f42:	bd80      	pop	{r7, pc}

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b089      	sub	sp, #36	@ 0x24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	61fb      	str	r3, [r7, #28]
 8000f5e:	e165      	b.n	800122c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f60:	2201      	movs	r2, #1
 8000f62:	69fb      	ldr	r3, [r7, #28]
 8000f64:	fa02 f303 	lsl.w	r3, r2, r3
 8000f68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	697a      	ldr	r2, [r7, #20]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f74:	693a      	ldr	r2, [r7, #16]
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	429a      	cmp	r2, r3
 8000f7a:	f040 8154 	bne.w	8001226 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	685b      	ldr	r3, [r3, #4]
 8000f82:	f003 0303 	and.w	r3, r3, #3
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d005      	beq.n	8000f96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	685b      	ldr	r3, [r3, #4]
 8000f8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f92:	2b02      	cmp	r3, #2
 8000f94:	d130      	bne.n	8000ff8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	005b      	lsls	r3, r3, #1
 8000fa0:	2203      	movs	r2, #3
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	68da      	ldr	r2, [r3, #12]
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4313      	orrs	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fcc:	2201      	movs	r2, #1
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd4:	43db      	mvns	r3, r3
 8000fd6:	69ba      	ldr	r2, [r7, #24]
 8000fd8:	4013      	ands	r3, r2
 8000fda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	091b      	lsrs	r3, r3, #4
 8000fe2:	f003 0201 	and.w	r2, r3, #1
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	69ba      	ldr	r2, [r7, #24]
 8000fee:	4313      	orrs	r3, r2
 8000ff0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	f003 0303 	and.w	r3, r3, #3
 8001000:	2b03      	cmp	r3, #3
 8001002:	d017      	beq.n	8001034 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	68db      	ldr	r3, [r3, #12]
 8001008:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800100a:	69fb      	ldr	r3, [r7, #28]
 800100c:	005b      	lsls	r3, r3, #1
 800100e:	2203      	movs	r2, #3
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4013      	ands	r3, r2
 800101a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	689a      	ldr	r2, [r3, #8]
 8001020:	69fb      	ldr	r3, [r7, #28]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	fa02 f303 	lsl.w	r3, r2, r3
 8001028:	69ba      	ldr	r2, [r7, #24]
 800102a:	4313      	orrs	r3, r2
 800102c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	685b      	ldr	r3, [r3, #4]
 8001038:	f003 0303 	and.w	r3, r3, #3
 800103c:	2b02      	cmp	r3, #2
 800103e:	d123      	bne.n	8001088 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	08da      	lsrs	r2, r3, #3
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3208      	adds	r2, #8
 8001048:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800104c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	f003 0307 	and.w	r3, r3, #7
 8001054:	009b      	lsls	r3, r3, #2
 8001056:	220f      	movs	r2, #15
 8001058:	fa02 f303 	lsl.w	r3, r2, r3
 800105c:	43db      	mvns	r3, r3
 800105e:	69ba      	ldr	r2, [r7, #24]
 8001060:	4013      	ands	r3, r2
 8001062:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	691a      	ldr	r2, [r3, #16]
 8001068:	69fb      	ldr	r3, [r7, #28]
 800106a:	f003 0307 	and.w	r3, r3, #7
 800106e:	009b      	lsls	r3, r3, #2
 8001070:	fa02 f303 	lsl.w	r3, r2, r3
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	08da      	lsrs	r2, r3, #3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3208      	adds	r2, #8
 8001082:	69b9      	ldr	r1, [r7, #24]
 8001084:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	005b      	lsls	r3, r3, #1
 8001092:	2203      	movs	r2, #3
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	f003 0203 	and.w	r2, r3, #3
 80010a8:	69fb      	ldr	r3, [r7, #28]
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	f000 80ae 	beq.w	8001226 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	60fb      	str	r3, [r7, #12]
 80010ce:	4b5d      	ldr	r3, [pc, #372]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	4a5c      	ldr	r2, [pc, #368]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80010da:	4b5a      	ldr	r3, [pc, #360]	@ (8001244 <HAL_GPIO_Init+0x300>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010e2:	60fb      	str	r3, [r7, #12]
 80010e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80010e6:	4a58      	ldr	r2, [pc, #352]	@ (8001248 <HAL_GPIO_Init+0x304>)
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	089b      	lsrs	r3, r3, #2
 80010ec:	3302      	adds	r3, #2
 80010ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80010f4:	69fb      	ldr	r3, [r7, #28]
 80010f6:	f003 0303 	and.w	r3, r3, #3
 80010fa:	009b      	lsls	r3, r3, #2
 80010fc:	220f      	movs	r2, #15
 80010fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001102:	43db      	mvns	r3, r3
 8001104:	69ba      	ldr	r2, [r7, #24]
 8001106:	4013      	ands	r3, r2
 8001108:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	4a4f      	ldr	r2, [pc, #316]	@ (800124c <HAL_GPIO_Init+0x308>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d025      	beq.n	800115e <HAL_GPIO_Init+0x21a>
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	4a4e      	ldr	r2, [pc, #312]	@ (8001250 <HAL_GPIO_Init+0x30c>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d01f      	beq.n	800115a <HAL_GPIO_Init+0x216>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4a4d      	ldr	r2, [pc, #308]	@ (8001254 <HAL_GPIO_Init+0x310>)
 800111e:	4293      	cmp	r3, r2
 8001120:	d019      	beq.n	8001156 <HAL_GPIO_Init+0x212>
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	4a4c      	ldr	r2, [pc, #304]	@ (8001258 <HAL_GPIO_Init+0x314>)
 8001126:	4293      	cmp	r3, r2
 8001128:	d013      	beq.n	8001152 <HAL_GPIO_Init+0x20e>
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	4a4b      	ldr	r2, [pc, #300]	@ (800125c <HAL_GPIO_Init+0x318>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d00d      	beq.n	800114e <HAL_GPIO_Init+0x20a>
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4a4a      	ldr	r2, [pc, #296]	@ (8001260 <HAL_GPIO_Init+0x31c>)
 8001136:	4293      	cmp	r3, r2
 8001138:	d007      	beq.n	800114a <HAL_GPIO_Init+0x206>
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	4a49      	ldr	r2, [pc, #292]	@ (8001264 <HAL_GPIO_Init+0x320>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d101      	bne.n	8001146 <HAL_GPIO_Init+0x202>
 8001142:	2306      	movs	r3, #6
 8001144:	e00c      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001146:	2307      	movs	r3, #7
 8001148:	e00a      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114a:	2305      	movs	r3, #5
 800114c:	e008      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800114e:	2304      	movs	r3, #4
 8001150:	e006      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001152:	2303      	movs	r3, #3
 8001154:	e004      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 8001156:	2302      	movs	r3, #2
 8001158:	e002      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <HAL_GPIO_Init+0x21c>
 800115e:	2300      	movs	r3, #0
 8001160:	69fa      	ldr	r2, [r7, #28]
 8001162:	f002 0203 	and.w	r2, r2, #3
 8001166:	0092      	lsls	r2, r2, #2
 8001168:	4093      	lsls	r3, r2
 800116a:	69ba      	ldr	r2, [r7, #24]
 800116c:	4313      	orrs	r3, r2
 800116e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001170:	4935      	ldr	r1, [pc, #212]	@ (8001248 <HAL_GPIO_Init+0x304>)
 8001172:	69fb      	ldr	r3, [r7, #28]
 8001174:	089b      	lsrs	r3, r3, #2
 8001176:	3302      	adds	r3, #2
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800117e:	4b3a      	ldr	r3, [pc, #232]	@ (8001268 <HAL_GPIO_Init+0x324>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001184:	693b      	ldr	r3, [r7, #16]
 8001186:	43db      	mvns	r3, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4013      	ands	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001196:	2b00      	cmp	r3, #0
 8001198:	d003      	beq.n	80011a2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	4313      	orrs	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80011a2:	4a31      	ldr	r2, [pc, #196]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011a4:	69bb      	ldr	r3, [r7, #24]
 80011a6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80011a8:	4b2f      	ldr	r3, [pc, #188]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011aa:	68db      	ldr	r3, [r3, #12]
 80011ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011ae:	693b      	ldr	r3, [r7, #16]
 80011b0:	43db      	mvns	r3, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4013      	ands	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d003      	beq.n	80011cc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80011c4:	69ba      	ldr	r2, [r7, #24]
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	4313      	orrs	r3, r2
 80011ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80011cc:	4a26      	ldr	r2, [pc, #152]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011d2:	4b25      	ldr	r3, [pc, #148]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011d4:	685b      	ldr	r3, [r3, #4]
 80011d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011d8:	693b      	ldr	r3, [r7, #16]
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685b      	ldr	r3, [r3, #4]
 80011e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d003      	beq.n	80011f6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011fc:	4b1a      	ldr	r3, [pc, #104]	@ (8001268 <HAL_GPIO_Init+0x324>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001202:	693b      	ldr	r3, [r7, #16]
 8001204:	43db      	mvns	r3, r3
 8001206:	69ba      	ldr	r2, [r7, #24]
 8001208:	4013      	ands	r3, r2
 800120a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	693b      	ldr	r3, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001220:	4a11      	ldr	r2, [pc, #68]	@ (8001268 <HAL_GPIO_Init+0x324>)
 8001222:	69bb      	ldr	r3, [r7, #24]
 8001224:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001226:	69fb      	ldr	r3, [r7, #28]
 8001228:	3301      	adds	r3, #1
 800122a:	61fb      	str	r3, [r7, #28]
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	2b0f      	cmp	r3, #15
 8001230:	f67f ae96 	bls.w	8000f60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	3724      	adds	r7, #36	@ 0x24
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	40023800 	.word	0x40023800
 8001248:	40013800 	.word	0x40013800
 800124c:	40020000 	.word	0x40020000
 8001250:	40020400 	.word	0x40020400
 8001254:	40020800 	.word	0x40020800
 8001258:	40020c00 	.word	0x40020c00
 800125c:	40021000 	.word	0x40021000
 8001260:	40021400 	.word	0x40021400
 8001264:	40021800 	.word	0x40021800
 8001268:	40013c00 	.word	0x40013c00

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001288:	e003      	b.n	8001292 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800128a:	887b      	ldrh	r3, [r7, #2]
 800128c:	041a      	lsls	r2, r3, #16
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	619a      	str	r2, [r3, #24]
}
 8001292:	bf00      	nop
 8001294:	370c      	adds	r7, #12
 8001296:	46bd      	mov	sp, r7
 8001298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129c:	4770      	bx	lr

0800129e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800129e:	b480      	push	{r7}
 80012a0:	b085      	sub	sp, #20
 80012a2:	af00      	add	r7, sp, #0
 80012a4:	6078      	str	r0, [r7, #4]
 80012a6:	460b      	mov	r3, r1
 80012a8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	695b      	ldr	r3, [r3, #20]
 80012ae:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80012b0:	887a      	ldrh	r2, [r7, #2]
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	4013      	ands	r3, r2
 80012b6:	041a      	lsls	r2, r3, #16
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	43d9      	mvns	r1, r3
 80012bc:	887b      	ldrh	r3, [r7, #2]
 80012be:	400b      	ands	r3, r1
 80012c0:	431a      	orrs	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	619a      	str	r2, [r3, #24]
}
 80012c6:	bf00      	nop
 80012c8:	3714      	adds	r7, #20
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
	...

080012d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	4603      	mov	r3, r0
 80012dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80012de:	4b08      	ldr	r3, [pc, #32]	@ (8001300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012e0:	695a      	ldr	r2, [r3, #20]
 80012e2:	88fb      	ldrh	r3, [r7, #6]
 80012e4:	4013      	ands	r3, r2
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d006      	beq.n	80012f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80012ea:	4a05      	ldr	r2, [pc, #20]	@ (8001300 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80012ec:	88fb      	ldrh	r3, [r7, #6]
 80012ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 f806 	bl	8001304 <HAL_GPIO_EXTI_Callback>
  }
}
 80012f8:	bf00      	nop
 80012fa:	3708      	adds	r7, #8
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	40013c00 	.word	0x40013c00

08001304 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	4603      	mov	r3, r0
 800130c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800130e:	bf00      	nop
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d101      	bne.n	8001330 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800132c:	2301      	movs	r3, #1
 800132e:	e0cc      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001330:	4b68      	ldr	r3, [pc, #416]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d90c      	bls.n	8001358 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800133e:	4b65      	ldr	r3, [pc, #404]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001340:	683a      	ldr	r2, [r7, #0]
 8001342:	b2d2      	uxtb	r2, r2
 8001344:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001346:	4b63      	ldr	r3, [pc, #396]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f003 0307 	and.w	r3, r3, #7
 800134e:	683a      	ldr	r2, [r7, #0]
 8001350:	429a      	cmp	r2, r3
 8001352:	d001      	beq.n	8001358 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e0b8      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f003 0302 	and.w	r3, r3, #2
 8001360:	2b00      	cmp	r3, #0
 8001362:	d020      	beq.n	80013a6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f003 0304 	and.w	r3, r3, #4
 800136c:	2b00      	cmp	r3, #0
 800136e:	d005      	beq.n	800137c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001370:	4b59      	ldr	r3, [pc, #356]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	4a58      	ldr	r2, [pc, #352]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001376:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800137a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f003 0308 	and.w	r3, r3, #8
 8001384:	2b00      	cmp	r3, #0
 8001386:	d005      	beq.n	8001394 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001388:	4b53      	ldr	r3, [pc, #332]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	4a52      	ldr	r2, [pc, #328]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800138e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001392:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001394:	4b50      	ldr	r3, [pc, #320]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	689b      	ldr	r3, [r3, #8]
 80013a0:	494d      	ldr	r1, [pc, #308]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013a2:	4313      	orrs	r3, r2
 80013a4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f003 0301 	and.w	r3, r3, #1
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d044      	beq.n	800143c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	2b01      	cmp	r3, #1
 80013b8:	d107      	bne.n	80013ca <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ba:	4b47      	ldr	r3, [pc, #284]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d119      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013c6:	2301      	movs	r3, #1
 80013c8:	e07f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	2b02      	cmp	r3, #2
 80013d0:	d003      	beq.n	80013da <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80013d6:	2b03      	cmp	r3, #3
 80013d8:	d107      	bne.n	80013ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013da:	4b3f      	ldr	r3, [pc, #252]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e06f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013ea:	4b3b      	ldr	r3, [pc, #236]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f003 0302 	and.w	r3, r3, #2
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e067      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80013fa:	4b37      	ldr	r3, [pc, #220]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f023 0203 	bic.w	r2, r3, #3
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	685b      	ldr	r3, [r3, #4]
 8001406:	4934      	ldr	r1, [pc, #208]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001408:	4313      	orrs	r3, r2
 800140a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800140c:	f7ff fcac 	bl	8000d68 <HAL_GetTick>
 8001410:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001412:	e00a      	b.n	800142a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001414:	f7ff fca8 	bl	8000d68 <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001422:	4293      	cmp	r3, r2
 8001424:	d901      	bls.n	800142a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e04f      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800142a:	4b2b      	ldr	r3, [pc, #172]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800142c:	689b      	ldr	r3, [r3, #8]
 800142e:	f003 020c 	and.w	r2, r3, #12
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	685b      	ldr	r3, [r3, #4]
 8001436:	009b      	lsls	r3, r3, #2
 8001438:	429a      	cmp	r2, r3
 800143a:	d1eb      	bne.n	8001414 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800143c:	4b25      	ldr	r3, [pc, #148]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f003 0307 	and.w	r3, r3, #7
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	429a      	cmp	r2, r3
 8001448:	d20c      	bcs.n	8001464 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800144a:	4b22      	ldr	r3, [pc, #136]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 800144c:	683a      	ldr	r2, [r7, #0]
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001452:	4b20      	ldr	r3, [pc, #128]	@ (80014d4 <HAL_RCC_ClockConfig+0x1b8>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0307 	and.w	r3, r3, #7
 800145a:	683a      	ldr	r2, [r7, #0]
 800145c:	429a      	cmp	r2, r3
 800145e:	d001      	beq.n	8001464 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e032      	b.n	80014ca <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0304 	and.w	r3, r3, #4
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001470:	4b19      	ldr	r3, [pc, #100]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	4916      	ldr	r1, [pc, #88]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800147e:	4313      	orrs	r3, r2
 8001480:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d009      	beq.n	80014a2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800148e:	4b12      	ldr	r3, [pc, #72]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	691b      	ldr	r3, [r3, #16]
 800149a:	00db      	lsls	r3, r3, #3
 800149c:	490e      	ldr	r1, [pc, #56]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 800149e:	4313      	orrs	r3, r2
 80014a0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80014a2:	f000 f821 	bl	80014e8 <HAL_RCC_GetSysClockFreq>
 80014a6:	4602      	mov	r2, r0
 80014a8:	4b0b      	ldr	r3, [pc, #44]	@ (80014d8 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	091b      	lsrs	r3, r3, #4
 80014ae:	f003 030f 	and.w	r3, r3, #15
 80014b2:	490a      	ldr	r1, [pc, #40]	@ (80014dc <HAL_RCC_ClockConfig+0x1c0>)
 80014b4:	5ccb      	ldrb	r3, [r1, r3]
 80014b6:	fa22 f303 	lsr.w	r3, r2, r3
 80014ba:	4a09      	ldr	r2, [pc, #36]	@ (80014e0 <HAL_RCC_ClockConfig+0x1c4>)
 80014bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80014be:	4b09      	ldr	r3, [pc, #36]	@ (80014e4 <HAL_RCC_ClockConfig+0x1c8>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff fb32 	bl	8000b2c <HAL_InitTick>

  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3710      	adds	r7, #16
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40023c00 	.word	0x40023c00
 80014d8:	40023800 	.word	0x40023800
 80014dc:	0800721c 	.word	0x0800721c
 80014e0:	20000000 	.word	0x20000000
 80014e4:	20000004 	.word	0x20000004

080014e8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80014e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80014ec:	b094      	sub	sp, #80	@ 0x50
 80014ee:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80014f0:	2300      	movs	r3, #0
 80014f2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80014f4:	2300      	movs	r3, #0
 80014f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80014f8:	2300      	movs	r3, #0
 80014fa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80014fc:	2300      	movs	r3, #0
 80014fe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001500:	4b79      	ldr	r3, [pc, #484]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001502:	689b      	ldr	r3, [r3, #8]
 8001504:	f003 030c 	and.w	r3, r3, #12
 8001508:	2b08      	cmp	r3, #8
 800150a:	d00d      	beq.n	8001528 <HAL_RCC_GetSysClockFreq+0x40>
 800150c:	2b08      	cmp	r3, #8
 800150e:	f200 80e1 	bhi.w	80016d4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001512:	2b00      	cmp	r3, #0
 8001514:	d002      	beq.n	800151c <HAL_RCC_GetSysClockFreq+0x34>
 8001516:	2b04      	cmp	r3, #4
 8001518:	d003      	beq.n	8001522 <HAL_RCC_GetSysClockFreq+0x3a>
 800151a:	e0db      	b.n	80016d4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800151c:	4b73      	ldr	r3, [pc, #460]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x204>)
 800151e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001520:	e0db      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001522:	4b73      	ldr	r3, [pc, #460]	@ (80016f0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001524:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001526:	e0d8      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001528:	4b6f      	ldr	r3, [pc, #444]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 800152a:	685b      	ldr	r3, [r3, #4]
 800152c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001530:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001532:	4b6d      	ldr	r3, [pc, #436]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153a:	2b00      	cmp	r3, #0
 800153c:	d063      	beq.n	8001606 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800153e:	4b6a      	ldr	r3, [pc, #424]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001540:	685b      	ldr	r3, [r3, #4]
 8001542:	099b      	lsrs	r3, r3, #6
 8001544:	2200      	movs	r2, #0
 8001546:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001548:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800154a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800154c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001550:	633b      	str	r3, [r7, #48]	@ 0x30
 8001552:	2300      	movs	r3, #0
 8001554:	637b      	str	r3, [r7, #52]	@ 0x34
 8001556:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800155a:	4622      	mov	r2, r4
 800155c:	462b      	mov	r3, r5
 800155e:	f04f 0000 	mov.w	r0, #0
 8001562:	f04f 0100 	mov.w	r1, #0
 8001566:	0159      	lsls	r1, r3, #5
 8001568:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800156c:	0150      	lsls	r0, r2, #5
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	4621      	mov	r1, r4
 8001574:	1a51      	subs	r1, r2, r1
 8001576:	6139      	str	r1, [r7, #16]
 8001578:	4629      	mov	r1, r5
 800157a:	eb63 0301 	sbc.w	r3, r3, r1
 800157e:	617b      	str	r3, [r7, #20]
 8001580:	f04f 0200 	mov.w	r2, #0
 8001584:	f04f 0300 	mov.w	r3, #0
 8001588:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800158c:	4659      	mov	r1, fp
 800158e:	018b      	lsls	r3, r1, #6
 8001590:	4651      	mov	r1, sl
 8001592:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001596:	4651      	mov	r1, sl
 8001598:	018a      	lsls	r2, r1, #6
 800159a:	4651      	mov	r1, sl
 800159c:	ebb2 0801 	subs.w	r8, r2, r1
 80015a0:	4659      	mov	r1, fp
 80015a2:	eb63 0901 	sbc.w	r9, r3, r1
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	f04f 0300 	mov.w	r3, #0
 80015ae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80015b2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80015b6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80015ba:	4690      	mov	r8, r2
 80015bc:	4699      	mov	r9, r3
 80015be:	4623      	mov	r3, r4
 80015c0:	eb18 0303 	adds.w	r3, r8, r3
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	462b      	mov	r3, r5
 80015c8:	eb49 0303 	adc.w	r3, r9, r3
 80015cc:	60fb      	str	r3, [r7, #12]
 80015ce:	f04f 0200 	mov.w	r2, #0
 80015d2:	f04f 0300 	mov.w	r3, #0
 80015d6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80015da:	4629      	mov	r1, r5
 80015dc:	024b      	lsls	r3, r1, #9
 80015de:	4621      	mov	r1, r4
 80015e0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80015e4:	4621      	mov	r1, r4
 80015e6:	024a      	lsls	r2, r1, #9
 80015e8:	4610      	mov	r0, r2
 80015ea:	4619      	mov	r1, r3
 80015ec:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80015ee:	2200      	movs	r2, #0
 80015f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80015f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80015f4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80015f8:	f7fe fe5c 	bl	80002b4 <__aeabi_uldivmod>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4613      	mov	r3, r2
 8001602:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001604:	e058      	b.n	80016b8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001606:	4b38      	ldr	r3, [pc, #224]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	099b      	lsrs	r3, r3, #6
 800160c:	2200      	movs	r2, #0
 800160e:	4618      	mov	r0, r3
 8001610:	4611      	mov	r1, r2
 8001612:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001616:	623b      	str	r3, [r7, #32]
 8001618:	2300      	movs	r3, #0
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
 800161c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001620:	4642      	mov	r2, r8
 8001622:	464b      	mov	r3, r9
 8001624:	f04f 0000 	mov.w	r0, #0
 8001628:	f04f 0100 	mov.w	r1, #0
 800162c:	0159      	lsls	r1, r3, #5
 800162e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001632:	0150      	lsls	r0, r2, #5
 8001634:	4602      	mov	r2, r0
 8001636:	460b      	mov	r3, r1
 8001638:	4641      	mov	r1, r8
 800163a:	ebb2 0a01 	subs.w	sl, r2, r1
 800163e:	4649      	mov	r1, r9
 8001640:	eb63 0b01 	sbc.w	fp, r3, r1
 8001644:	f04f 0200 	mov.w	r2, #0
 8001648:	f04f 0300 	mov.w	r3, #0
 800164c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001650:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001654:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001658:	ebb2 040a 	subs.w	r4, r2, sl
 800165c:	eb63 050b 	sbc.w	r5, r3, fp
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	00eb      	lsls	r3, r5, #3
 800166a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800166e:	00e2      	lsls	r2, r4, #3
 8001670:	4614      	mov	r4, r2
 8001672:	461d      	mov	r5, r3
 8001674:	4643      	mov	r3, r8
 8001676:	18e3      	adds	r3, r4, r3
 8001678:	603b      	str	r3, [r7, #0]
 800167a:	464b      	mov	r3, r9
 800167c:	eb45 0303 	adc.w	r3, r5, r3
 8001680:	607b      	str	r3, [r7, #4]
 8001682:	f04f 0200 	mov.w	r2, #0
 8001686:	f04f 0300 	mov.w	r3, #0
 800168a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800168e:	4629      	mov	r1, r5
 8001690:	028b      	lsls	r3, r1, #10
 8001692:	4621      	mov	r1, r4
 8001694:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001698:	4621      	mov	r1, r4
 800169a:	028a      	lsls	r2, r1, #10
 800169c:	4610      	mov	r0, r2
 800169e:	4619      	mov	r1, r3
 80016a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80016a2:	2200      	movs	r2, #0
 80016a4:	61bb      	str	r3, [r7, #24]
 80016a6:	61fa      	str	r2, [r7, #28]
 80016a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016ac:	f7fe fe02 	bl	80002b4 <__aeabi_uldivmod>
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4613      	mov	r3, r2
 80016b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80016b8:	4b0b      	ldr	r3, [pc, #44]	@ (80016e8 <HAL_RCC_GetSysClockFreq+0x200>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	0c1b      	lsrs	r3, r3, #16
 80016be:	f003 0303 	and.w	r3, r3, #3
 80016c2:	3301      	adds	r3, #1
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80016c8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80016ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80016cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80016d0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016d2:	e002      	b.n	80016da <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016d4:	4b05      	ldr	r3, [pc, #20]	@ (80016ec <HAL_RCC_GetSysClockFreq+0x204>)
 80016d6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80016d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016da:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3750      	adds	r7, #80	@ 0x50
 80016e0:	46bd      	mov	sp, r7
 80016e2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80016e6:	bf00      	nop
 80016e8:	40023800 	.word	0x40023800
 80016ec:	00f42400 	.word	0x00f42400
 80016f0:	007a1200 	.word	0x007a1200

080016f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80016f4:	b480      	push	{r7}
 80016f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80016f8:	4b03      	ldr	r3, [pc, #12]	@ (8001708 <HAL_RCC_GetHCLKFreq+0x14>)
 80016fa:	681b      	ldr	r3, [r3, #0]
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
 8001706:	bf00      	nop
 8001708:	20000000 	.word	0x20000000

0800170c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001710:	f7ff fff0 	bl	80016f4 <HAL_RCC_GetHCLKFreq>
 8001714:	4602      	mov	r2, r0
 8001716:	4b05      	ldr	r3, [pc, #20]	@ (800172c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	0a9b      	lsrs	r3, r3, #10
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	4903      	ldr	r1, [pc, #12]	@ (8001730 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001722:	5ccb      	ldrb	r3, [r1, r3]
 8001724:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001728:	4618      	mov	r0, r3
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40023800 	.word	0x40023800
 8001730:	0800722c 	.word	0x0800722c

08001734 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	220f      	movs	r2, #15
 8001742:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001744:	4b12      	ldr	r3, [pc, #72]	@ (8001790 <HAL_RCC_GetClockConfig+0x5c>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 0203 	and.w	r2, r3, #3
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001750:	4b0f      	ldr	r3, [pc, #60]	@ (8001790 <HAL_RCC_GetClockConfig+0x5c>)
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800175c:	4b0c      	ldr	r3, [pc, #48]	@ (8001790 <HAL_RCC_GetClockConfig+0x5c>)
 800175e:	689b      	ldr	r3, [r3, #8]
 8001760:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001768:	4b09      	ldr	r3, [pc, #36]	@ (8001790 <HAL_RCC_GetClockConfig+0x5c>)
 800176a:	689b      	ldr	r3, [r3, #8]
 800176c:	08db      	lsrs	r3, r3, #3
 800176e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <HAL_RCC_GetClockConfig+0x60>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0207 	and.w	r2, r3, #7
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	601a      	str	r2, [r3, #0]
}
 8001782:	bf00      	nop
 8001784:	370c      	adds	r7, #12
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	40023800 	.word	0x40023800
 8001794:	40023c00 	.word	0x40023c00

08001798 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d101      	bne.n	80017aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
 80017a8:	e273      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f003 0301 	and.w	r3, r3, #1
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d075      	beq.n	80018a2 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80017b6:	4b88      	ldr	r3, [pc, #544]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b04      	cmp	r3, #4
 80017c0:	d00c      	beq.n	80017dc <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017c2:	4b85      	ldr	r3, [pc, #532]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80017c4:	689b      	ldr	r3, [r3, #8]
 80017c6:	f003 030c 	and.w	r3, r3, #12
        || \
 80017ca:	2b08      	cmp	r3, #8
 80017cc:	d112      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017ce:	4b82      	ldr	r3, [pc, #520]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017da:	d10b      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017dc:	4b7e      	ldr	r3, [pc, #504]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d05b      	beq.n	80018a0 <HAL_RCC_OscConfig+0x108>
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d157      	bne.n	80018a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e24e      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80017fc:	d106      	bne.n	800180c <HAL_RCC_OscConfig+0x74>
 80017fe:	4b76      	ldr	r3, [pc, #472]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a75      	ldr	r2, [pc, #468]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001804:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e01d      	b.n	8001848 <HAL_RCC_OscConfig+0xb0>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001814:	d10c      	bne.n	8001830 <HAL_RCC_OscConfig+0x98>
 8001816:	4b70      	ldr	r3, [pc, #448]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	4a6f      	ldr	r2, [pc, #444]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 800181c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001820:	6013      	str	r3, [r2, #0]
 8001822:	4b6d      	ldr	r3, [pc, #436]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6c      	ldr	r2, [pc, #432]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001828:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800182c:	6013      	str	r3, [r2, #0]
 800182e:	e00b      	b.n	8001848 <HAL_RCC_OscConfig+0xb0>
 8001830:	4b69      	ldr	r3, [pc, #420]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a68      	ldr	r2, [pc, #416]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001836:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800183a:	6013      	str	r3, [r2, #0]
 800183c:	4b66      	ldr	r3, [pc, #408]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a65      	ldr	r2, [pc, #404]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001842:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001846:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d013      	beq.n	8001878 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001850:	f7ff fa8a 	bl	8000d68 <HAL_GetTick>
 8001854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001856:	e008      	b.n	800186a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001858:	f7ff fa86 	bl	8000d68 <HAL_GetTick>
 800185c:	4602      	mov	r2, r0
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	1ad3      	subs	r3, r2, r3
 8001862:	2b64      	cmp	r3, #100	@ 0x64
 8001864:	d901      	bls.n	800186a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001866:	2303      	movs	r3, #3
 8001868:	e213      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	4b5b      	ldr	r3, [pc, #364]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d0f0      	beq.n	8001858 <HAL_RCC_OscConfig+0xc0>
 8001876:	e014      	b.n	80018a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001878:	f7ff fa76 	bl	8000d68 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001880:	f7ff fa72 	bl	8000d68 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b64      	cmp	r3, #100	@ 0x64
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e1ff      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	4b51      	ldr	r3, [pc, #324]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d1f0      	bne.n	8001880 <HAL_RCC_OscConfig+0xe8>
 800189e:	e000      	b.n	80018a2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d063      	beq.n	8001976 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80018ae:	4b4a      	ldr	r3, [pc, #296]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f003 030c 	and.w	r3, r3, #12
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d00b      	beq.n	80018d2 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ba:	4b47      	ldr	r3, [pc, #284]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 030c 	and.w	r3, r3, #12
        || \
 80018c2:	2b08      	cmp	r3, #8
 80018c4:	d11c      	bne.n	8001900 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018c6:	4b44      	ldr	r3, [pc, #272]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018c8:	685b      	ldr	r3, [r3, #4]
 80018ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d116      	bne.n	8001900 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018d2:	4b41      	ldr	r3, [pc, #260]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0302 	and.w	r3, r3, #2
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_RCC_OscConfig+0x152>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d001      	beq.n	80018ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	e1d3      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ea:	4b3b      	ldr	r3, [pc, #236]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	691b      	ldr	r3, [r3, #16]
 80018f6:	00db      	lsls	r3, r3, #3
 80018f8:	4937      	ldr	r1, [pc, #220]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80018fa:	4313      	orrs	r3, r2
 80018fc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018fe:	e03a      	b.n	8001976 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	2b00      	cmp	r3, #0
 8001906:	d020      	beq.n	800194a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001908:	4b34      	ldr	r3, [pc, #208]	@ (80019dc <HAL_RCC_OscConfig+0x244>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190e:	f7ff fa2b 	bl	8000d68 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001916:	f7ff fa27 	bl	8000d68 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e1b4      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	4b2b      	ldr	r3, [pc, #172]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001934:	4b28      	ldr	r3, [pc, #160]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	691b      	ldr	r3, [r3, #16]
 8001940:	00db      	lsls	r3, r3, #3
 8001942:	4925      	ldr	r1, [pc, #148]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 8001944:	4313      	orrs	r3, r2
 8001946:	600b      	str	r3, [r1, #0]
 8001948:	e015      	b.n	8001976 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800194a:	4b24      	ldr	r3, [pc, #144]	@ (80019dc <HAL_RCC_OscConfig+0x244>)
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001950:	f7ff fa0a 	bl	8000d68 <HAL_GetTick>
 8001954:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001956:	e008      	b.n	800196a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001958:	f7ff fa06 	bl	8000d68 <HAL_GetTick>
 800195c:	4602      	mov	r2, r0
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	2b02      	cmp	r3, #2
 8001964:	d901      	bls.n	800196a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001966:	2303      	movs	r3, #3
 8001968:	e193      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	4b1b      	ldr	r3, [pc, #108]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0302 	and.w	r3, r3, #2
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f0      	bne.n	8001958 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f003 0308 	and.w	r3, r3, #8
 800197e:	2b00      	cmp	r3, #0
 8001980:	d036      	beq.n	80019f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	695b      	ldr	r3, [r3, #20]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d016      	beq.n	80019b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800198a:	4b15      	ldr	r3, [pc, #84]	@ (80019e0 <HAL_RCC_OscConfig+0x248>)
 800198c:	2201      	movs	r2, #1
 800198e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001990:	f7ff f9ea 	bl	8000d68 <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001998:	f7ff f9e6 	bl	8000d68 <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e173      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_RCC_OscConfig+0x240>)
 80019ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0f0      	beq.n	8001998 <HAL_RCC_OscConfig+0x200>
 80019b6:	e01b      	b.n	80019f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019b8:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <HAL_RCC_OscConfig+0x248>)
 80019ba:	2200      	movs	r2, #0
 80019bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019be:	f7ff f9d3 	bl	8000d68 <HAL_GetTick>
 80019c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019c4:	e00e      	b.n	80019e4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019c6:	f7ff f9cf 	bl	8000d68 <HAL_GetTick>
 80019ca:	4602      	mov	r2, r0
 80019cc:	693b      	ldr	r3, [r7, #16]
 80019ce:	1ad3      	subs	r3, r2, r3
 80019d0:	2b02      	cmp	r3, #2
 80019d2:	d907      	bls.n	80019e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019d4:	2303      	movs	r3, #3
 80019d6:	e15c      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
 80019d8:	40023800 	.word	0x40023800
 80019dc:	42470000 	.word	0x42470000
 80019e0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019e4:	4b8a      	ldr	r3, [pc, #552]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 80019e6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019e8:	f003 0302 	and.w	r3, r3, #2
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d1ea      	bne.n	80019c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 0304 	and.w	r3, r3, #4
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	f000 8097 	beq.w	8001b2c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019fe:	2300      	movs	r3, #0
 8001a00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a02:	4b83      	ldr	r3, [pc, #524]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d10f      	bne.n	8001a2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	4b7f      	ldr	r3, [pc, #508]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a16:	4a7e      	ldr	r2, [pc, #504]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a1e:	4b7c      	ldr	r3, [pc, #496]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a26:	60bb      	str	r3, [r7, #8]
 8001a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a2e:	4b79      	ldr	r3, [pc, #484]	@ (8001c14 <HAL_RCC_OscConfig+0x47c>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d118      	bne.n	8001a6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a3a:	4b76      	ldr	r3, [pc, #472]	@ (8001c14 <HAL_RCC_OscConfig+0x47c>)
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	4a75      	ldr	r2, [pc, #468]	@ (8001c14 <HAL_RCC_OscConfig+0x47c>)
 8001a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a46:	f7ff f98f 	bl	8000d68 <HAL_GetTick>
 8001a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a4c:	e008      	b.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a4e:	f7ff f98b 	bl	8000d68 <HAL_GetTick>
 8001a52:	4602      	mov	r2, r0
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	2b02      	cmp	r3, #2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e118      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	4b6c      	ldr	r3, [pc, #432]	@ (8001c14 <HAL_RCC_OscConfig+0x47c>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0f0      	beq.n	8001a4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d106      	bne.n	8001a82 <HAL_RCC_OscConfig+0x2ea>
 8001a74:	4b66      	ldr	r3, [pc, #408]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a78:	4a65      	ldr	r2, [pc, #404]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a7a:	f043 0301 	orr.w	r3, r3, #1
 8001a7e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a80:	e01c      	b.n	8001abc <HAL_RCC_OscConfig+0x324>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	689b      	ldr	r3, [r3, #8]
 8001a86:	2b05      	cmp	r3, #5
 8001a88:	d10c      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x30c>
 8001a8a:	4b61      	ldr	r3, [pc, #388]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8e:	4a60      	ldr	r2, [pc, #384]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a90:	f043 0304 	orr.w	r3, r3, #4
 8001a94:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a96:	4b5e      	ldr	r3, [pc, #376]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a9a:	4a5d      	ldr	r2, [pc, #372]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001a9c:	f043 0301 	orr.w	r3, r3, #1
 8001aa0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aa2:	e00b      	b.n	8001abc <HAL_RCC_OscConfig+0x324>
 8001aa4:	4b5a      	ldr	r3, [pc, #360]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001aa6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa8:	4a59      	ldr	r2, [pc, #356]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab0:	4b57      	ldr	r3, [pc, #348]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001ab2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab4:	4a56      	ldr	r2, [pc, #344]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001ab6:	f023 0304 	bic.w	r3, r3, #4
 8001aba:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689b      	ldr	r3, [r3, #8]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d015      	beq.n	8001af0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac4:	f7ff f950 	bl	8000d68 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aca:	e00a      	b.n	8001ae2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001acc:	f7ff f94c 	bl	8000d68 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d901      	bls.n	8001ae2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001ade:	2303      	movs	r3, #3
 8001ae0:	e0d7      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ae2:	4b4b      	ldr	r3, [pc, #300]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001ae4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae6:	f003 0302 	and.w	r3, r3, #2
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d0ee      	beq.n	8001acc <HAL_RCC_OscConfig+0x334>
 8001aee:	e014      	b.n	8001b1a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001af0:	f7ff f93a 	bl	8000d68 <HAL_GetTick>
 8001af4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001af6:	e00a      	b.n	8001b0e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001af8:	f7ff f936 	bl	8000d68 <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e0c1      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0e:	4b40      	ldr	r3, [pc, #256]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b12:	f003 0302 	and.w	r3, r3, #2
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1ee      	bne.n	8001af8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2b01      	cmp	r3, #1
 8001b1e:	d105      	bne.n	8001b2c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b20:	4b3b      	ldr	r3, [pc, #236]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001b22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b24:	4a3a      	ldr	r2, [pc, #232]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001b26:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b2a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	699b      	ldr	r3, [r3, #24]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 80ad 	beq.w	8001c90 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b36:	4b36      	ldr	r3, [pc, #216]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d060      	beq.n	8001c04 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	699b      	ldr	r3, [r3, #24]
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d145      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b4a:	4b33      	ldr	r3, [pc, #204]	@ (8001c18 <HAL_RCC_OscConfig+0x480>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b50:	f7ff f90a 	bl	8000d68 <HAL_GetTick>
 8001b54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b56:	e008      	b.n	8001b6a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b58:	f7ff f906 	bl	8000d68 <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d901      	bls.n	8001b6a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b66:	2303      	movs	r3, #3
 8001b68:	e093      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	4b29      	ldr	r3, [pc, #164]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d1f0      	bne.n	8001b58 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	69da      	ldr	r2, [r3, #28]
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6a1b      	ldr	r3, [r3, #32]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b84:	019b      	lsls	r3, r3, #6
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001b8c:	085b      	lsrs	r3, r3, #1
 8001b8e:	3b01      	subs	r3, #1
 8001b90:	041b      	lsls	r3, r3, #16
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b98:	061b      	lsls	r3, r3, #24
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba0:	071b      	lsls	r3, r3, #28
 8001ba2:	491b      	ldr	r1, [pc, #108]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ba8:	4b1b      	ldr	r3, [pc, #108]	@ (8001c18 <HAL_RCC_OscConfig+0x480>)
 8001baa:	2201      	movs	r2, #1
 8001bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bae:	f7ff f8db 	bl	8000d68 <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bb4:	e008      	b.n	8001bc8 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bb6:	f7ff f8d7 	bl	8000d68 <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d901      	bls.n	8001bc8 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e064      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc8:	4b11      	ldr	r3, [pc, #68]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d0f0      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x41e>
 8001bd4:	e05c      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bd6:	4b10      	ldr	r3, [pc, #64]	@ (8001c18 <HAL_RCC_OscConfig+0x480>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bdc:	f7ff f8c4 	bl	8000d68 <HAL_GetTick>
 8001be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001be4:	f7ff f8c0 	bl	8000d68 <HAL_GetTick>
 8001be8:	4602      	mov	r2, r0
 8001bea:	693b      	ldr	r3, [r7, #16]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e04d      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bf6:	4b06      	ldr	r3, [pc, #24]	@ (8001c10 <HAL_RCC_OscConfig+0x478>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d1f0      	bne.n	8001be4 <HAL_RCC_OscConfig+0x44c>
 8001c02:	e045      	b.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	2b01      	cmp	r3, #1
 8001c0a:	d107      	bne.n	8001c1c <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e040      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
 8001c10:	40023800 	.word	0x40023800
 8001c14:	40007000 	.word	0x40007000
 8001c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c1c:	4b1f      	ldr	r3, [pc, #124]	@ (8001c9c <HAL_RCC_OscConfig+0x504>)
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	699b      	ldr	r3, [r3, #24]
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d030      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d129      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d122      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c46:	68fa      	ldr	r2, [r7, #12]
 8001c48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d119      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c62:	085b      	lsrs	r3, r3, #1
 8001c64:	3b01      	subs	r3, #1
 8001c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d10f      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d107      	bne.n	8001c8c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c86:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d001      	beq.n	8001c90 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e000      	b.n	8001c92 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	40023800 	.word	0x40023800

08001ca0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b082      	sub	sp, #8
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d101      	bne.n	8001cb2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cae:	2301      	movs	r3, #1
 8001cb0:	e041      	b.n	8001d36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d106      	bne.n	8001ccc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	f000 f839 	bl	8001d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	2202      	movs	r2, #2
 8001cd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	3304      	adds	r3, #4
 8001cdc:	4619      	mov	r1, r3
 8001cde:	4610      	mov	r0, r2
 8001ce0:	f000 f9c0 	bl	8002064 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	2201      	movs	r2, #1
 8001ce8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d34:	2300      	movs	r3, #0
}
 8001d36:	4618      	mov	r0, r3
 8001d38:	3708      	adds	r7, #8
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bd80      	pop	{r7, pc}

08001d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001d46:	bf00      	nop
 8001d48:	370c      	adds	r7, #12
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
	...

08001d54 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b085      	sub	sp, #20
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d62:	b2db      	uxtb	r3, r3
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d001      	beq.n	8001d6c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e04e      	b.n	8001e0a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	68da      	ldr	r2, [r3, #12]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f042 0201 	orr.w	r2, r2, #1
 8001d82:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a23      	ldr	r2, [pc, #140]	@ (8001e18 <HAL_TIM_Base_Start_IT+0xc4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d022      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d96:	d01d      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8001e1c <HAL_TIM_Base_Start_IT+0xc8>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d018      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1e      	ldr	r2, [pc, #120]	@ (8001e20 <HAL_TIM_Base_Start_IT+0xcc>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d013      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a1c      	ldr	r2, [pc, #112]	@ (8001e24 <HAL_TIM_Base_Start_IT+0xd0>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00e      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a1b      	ldr	r2, [pc, #108]	@ (8001e28 <HAL_TIM_Base_Start_IT+0xd4>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d009      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a19      	ldr	r2, [pc, #100]	@ (8001e2c <HAL_TIM_Base_Start_IT+0xd8>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d004      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x80>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	4a18      	ldr	r2, [pc, #96]	@ (8001e30 <HAL_TIM_Base_Start_IT+0xdc>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d111      	bne.n	8001df8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b06      	cmp	r3, #6
 8001de4:	d010      	beq.n	8001e08 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f042 0201 	orr.w	r2, r2, #1
 8001df4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001df6:	e007      	b.n	8001e08 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f042 0201 	orr.w	r2, r2, #1
 8001e06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3714      	adds	r7, #20
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	40010000 	.word	0x40010000
 8001e1c:	40000400 	.word	0x40000400
 8001e20:	40000800 	.word	0x40000800
 8001e24:	40000c00 	.word	0x40000c00
 8001e28:	40010400 	.word	0x40010400
 8001e2c:	40014000 	.word	0x40014000
 8001e30:	40001800 	.word	0x40001800

08001e34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68db      	ldr	r3, [r3, #12]
 8001e42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	691b      	ldr	r3, [r3, #16]
 8001e4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001e4c:	68bb      	ldr	r3, [r7, #8]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d020      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f003 0302 	and.w	r3, r3, #2
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d01b      	beq.n	8001e98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f06f 0202 	mvn.w	r2, #2
 8001e68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2201      	movs	r2, #1
 8001e6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	699b      	ldr	r3, [r3, #24]
 8001e76:	f003 0303 	and.w	r3, r3, #3
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d003      	beq.n	8001e86 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8d2 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001e84:	e005      	b.n	8001e92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f000 f8c4 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f8d5 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	f003 0304 	and.w	r3, r3, #4
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d020      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01b      	beq.n	8001ee4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f06f 0204 	mvn.w	r2, #4
 8001eb4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2202      	movs	r2, #2
 8001eba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 f8ac 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001ed0:	e005      	b.n	8001ede <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f89e 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f000 f8af 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f003 0308 	and.w	r3, r3, #8
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d020      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	f003 0308 	and.w	r3, r3, #8
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d01b      	beq.n	8001f30 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f06f 0208 	mvn.w	r2, #8
 8001f00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2204      	movs	r2, #4
 8001f06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	69db      	ldr	r3, [r3, #28]
 8001f0e:	f003 0303 	and.w	r3, r3, #3
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 f886 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001f1c:	e005      	b.n	8001f2a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f878 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f889 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	f003 0310 	and.w	r3, r3, #16
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d020      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d01b      	beq.n	8001f7c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f06f 0210 	mvn.w	r2, #16
 8001f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2208      	movs	r2, #8
 8001f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	69db      	ldr	r3, [r3, #28]
 8001f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d003      	beq.n	8001f6a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 f860 	bl	8002028 <HAL_TIM_IC_CaptureCallback>
 8001f68:	e005      	b.n	8001f76 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f000 f852 	bl	8002014 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f000 f863 	bl	800203c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	f003 0301 	and.w	r3, r3, #1
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d00c      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f003 0301 	and.w	r3, r3, #1
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d007      	beq.n	8001fa0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f06f 0201 	mvn.w	r2, #1
 8001f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f9a:	6878      	ldr	r0, [r7, #4]
 8001f9c:	f7fe fd86 	bl	8000aac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d00c      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001fbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f906 	bl	80021d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001fc4:	68bb      	ldr	r3, [r7, #8]
 8001fc6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00c      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d007      	beq.n	8001fe8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001fe0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fe2:	6878      	ldr	r0, [r7, #4]
 8001fe4:	f000 f834 	bl	8002050 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001fe8:	68bb      	ldr	r3, [r7, #8]
 8001fea:	f003 0320 	and.w	r3, r3, #32
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d00c      	beq.n	800200c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	f003 0320 	and.w	r3, r3, #32
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d007      	beq.n	800200c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	f06f 0220 	mvn.w	r2, #32
 8002004:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f000 f8d8 	bl	80021bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800200c:	bf00      	nop
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800201c:	bf00      	nop
 800201e:	370c      	adds	r7, #12
 8002020:	46bd      	mov	sp, r7
 8002022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002026:	4770      	bx	lr

08002028 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr

0800203c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002044:	bf00      	nop
 8002046:	370c      	adds	r7, #12
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002058:	bf00      	nop
 800205a:	370c      	adds	r7, #12
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002064:	b480      	push	{r7}
 8002066:	b085      	sub	sp, #20
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a46      	ldr	r2, [pc, #280]	@ (8002190 <TIM_Base_SetConfig+0x12c>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d013      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002082:	d00f      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a43      	ldr	r2, [pc, #268]	@ (8002194 <TIM_Base_SetConfig+0x130>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d00b      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a42      	ldr	r2, [pc, #264]	@ (8002198 <TIM_Base_SetConfig+0x134>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d007      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	4a41      	ldr	r2, [pc, #260]	@ (800219c <TIM_Base_SetConfig+0x138>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d003      	beq.n	80020a4 <TIM_Base_SetConfig+0x40>
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	4a40      	ldr	r2, [pc, #256]	@ (80021a0 <TIM_Base_SetConfig+0x13c>)
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d108      	bne.n	80020b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	4313      	orrs	r3, r2
 80020b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4a35      	ldr	r2, [pc, #212]	@ (8002190 <TIM_Base_SetConfig+0x12c>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d02b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020c4:	d027      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	4a32      	ldr	r2, [pc, #200]	@ (8002194 <TIM_Base_SetConfig+0x130>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d023      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	4a31      	ldr	r2, [pc, #196]	@ (8002198 <TIM_Base_SetConfig+0x134>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d01f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	4a30      	ldr	r2, [pc, #192]	@ (800219c <TIM_Base_SetConfig+0x138>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d01b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	4a2f      	ldr	r2, [pc, #188]	@ (80021a0 <TIM_Base_SetConfig+0x13c>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d017      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	4a2e      	ldr	r2, [pc, #184]	@ (80021a4 <TIM_Base_SetConfig+0x140>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d013      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4a2d      	ldr	r2, [pc, #180]	@ (80021a8 <TIM_Base_SetConfig+0x144>)
 80020f2:	4293      	cmp	r3, r2
 80020f4:	d00f      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	4a2c      	ldr	r2, [pc, #176]	@ (80021ac <TIM_Base_SetConfig+0x148>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d00b      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a2b      	ldr	r2, [pc, #172]	@ (80021b0 <TIM_Base_SetConfig+0x14c>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d007      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	4a2a      	ldr	r2, [pc, #168]	@ (80021b4 <TIM_Base_SetConfig+0x150>)
 800210a:	4293      	cmp	r3, r2
 800210c:	d003      	beq.n	8002116 <TIM_Base_SetConfig+0xb2>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a29      	ldr	r2, [pc, #164]	@ (80021b8 <TIM_Base_SetConfig+0x154>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d108      	bne.n	8002128 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800211c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	4313      	orrs	r3, r2
 8002126:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	695b      	ldr	r3, [r3, #20]
 8002132:	4313      	orrs	r3, r2
 8002134:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	68fa      	ldr	r2, [r7, #12]
 800213a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	689a      	ldr	r2, [r3, #8]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	681a      	ldr	r2, [r3, #0]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	4a10      	ldr	r2, [pc, #64]	@ (8002190 <TIM_Base_SetConfig+0x12c>)
 8002150:	4293      	cmp	r3, r2
 8002152:	d003      	beq.n	800215c <TIM_Base_SetConfig+0xf8>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a12      	ldr	r2, [pc, #72]	@ (80021a0 <TIM_Base_SetConfig+0x13c>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b01      	cmp	r3, #1
 8002174:	d105      	bne.n	8002182 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  }
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
 800218e:	bf00      	nop
 8002190:	40010000 	.word	0x40010000
 8002194:	40000400 	.word	0x40000400
 8002198:	40000800 	.word	0x40000800
 800219c:	40000c00 	.word	0x40000c00
 80021a0:	40010400 	.word	0x40010400
 80021a4:	40014000 	.word	0x40014000
 80021a8:	40014400 	.word	0x40014400
 80021ac:	40014800 	.word	0x40014800
 80021b0:	40001800 	.word	0x40001800
 80021b4:	40001c00 	.word	0x40001c00
 80021b8:	40002000 	.word	0x40002000

080021bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80021bc:	b480      	push	{r7}
 80021be:	b083      	sub	sp, #12
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80021c4:	bf00      	nop
 80021c6:	370c      	adds	r7, #12
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b083      	sub	sp, #12
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80021d8:	bf00      	nop
 80021da:	370c      	adds	r7, #12
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr

080021e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80021e4:	b480      	push	{r7}
 80021e6:	b083      	sub	sp, #12
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f103 0208 	add.w	r2, r3, #8
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	f04f 32ff 	mov.w	r2, #4294967295
 80021fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f103 0208 	add.w	r2, r3, #8
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f103 0208 	add.w	r2, r3, #8
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002218:	bf00      	nop
 800221a:	370c      	adds	r7, #12
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002224:	b480      	push	{r7}
 8002226:	b083      	sub	sp, #12
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002232:	bf00      	nop
 8002234:	370c      	adds	r7, #12
 8002236:	46bd      	mov	sp, r7
 8002238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223c:	4770      	bx	lr

0800223e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 800223e:	b480      	push	{r7}
 8002240:	b085      	sub	sp, #20
 8002242:	af00      	add	r7, sp, #0
 8002244:	6078      	str	r0, [r7, #4]
 8002246:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 800224e:	683b      	ldr	r3, [r7, #0]
 8002250:	68fa      	ldr	r2, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	689a      	ldr	r2, [r3, #8]
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	683a      	ldr	r2, [r7, #0]
 8002262:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	683a      	ldr	r2, [r7, #0]
 8002268:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	687a      	ldr	r2, [r7, #4]
 800226e:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	1c5a      	adds	r2, r3, #1
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	601a      	str	r2, [r3, #0]
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8002286:	b480      	push	{r7}
 8002288:	b085      	sub	sp, #20
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
 800228e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8002296:	68bb      	ldr	r3, [r7, #8]
 8002298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800229c:	d103      	bne.n	80022a6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	60fb      	str	r3, [r7, #12]
 80022a4:	e00c      	b.n	80022c0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	3308      	adds	r3, #8
 80022aa:	60fb      	str	r3, [r7, #12]
 80022ac:	e002      	b.n	80022b4 <vListInsert+0x2e>
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	60fb      	str	r3, [r7, #12]
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68ba      	ldr	r2, [r7, #8]
 80022bc:	429a      	cmp	r2, r3
 80022be:	d2f6      	bcs.n	80022ae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	685a      	ldr	r2, [r3, #4]
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	685b      	ldr	r3, [r3, #4]
 80022cc:	683a      	ldr	r2, [r7, #0]
 80022ce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	683a      	ldr	r2, [r7, #0]
 80022da:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	687a      	ldr	r2, [r7, #4]
 80022e0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	1c5a      	adds	r2, r3, #1
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	601a      	str	r2, [r3, #0]
}
 80022ec:	bf00      	nop
 80022ee:	3714      	adds	r7, #20
 80022f0:	46bd      	mov	sp, r7
 80022f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f6:	4770      	bx	lr

080022f8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	691b      	ldr	r3, [r3, #16]
 8002304:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	687a      	ldr	r2, [r7, #4]
 800230c:	6892      	ldr	r2, [r2, #8]
 800230e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	687a      	ldr	r2, [r7, #4]
 8002316:	6852      	ldr	r2, [r2, #4]
 8002318:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	685b      	ldr	r3, [r3, #4]
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	429a      	cmp	r2, r3
 8002322:	d103      	bne.n	800232c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	689a      	ldr	r2, [r3, #8]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2200      	movs	r2, #0
 8002330:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	1e5a      	subs	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
}
 8002340:	4618      	mov	r0, r3
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
 8002354:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002356:	2301      	movs	r3, #1
 8002358:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d10b      	bne.n	800237c <xQueueGenericReset+0x30>
        __asm volatile
 8002364:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002368:	f383 8811 	msr	BASEPRI, r3
 800236c:	f3bf 8f6f 	isb	sy
 8002370:	f3bf 8f4f 	dsb	sy
 8002374:	60fb      	str	r3, [r7, #12]
    }
 8002376:	bf00      	nop
 8002378:	bf00      	nop
 800237a:	e7fd      	b.n	8002378 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d052      	beq.n	8002428 <xQueueGenericReset+0xdc>
        ( pxQueue->uxLength >= 1U ) &&
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002386:	2b00      	cmp	r3, #0
 8002388:	d04e      	beq.n	8002428 <xQueueGenericReset+0xdc>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800238e:	693b      	ldr	r3, [r7, #16]
 8002390:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002392:	2100      	movs	r1, #0
 8002394:	fba3 2302 	umull	r2, r3, r3, r2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d000      	beq.n	800239e <xQueueGenericReset+0x52>
 800239c:	2101      	movs	r1, #1
 800239e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d141      	bne.n	8002428 <xQueueGenericReset+0xdc>
    {
        taskENTER_CRITICAL();
 80023a4:	f002 f95a 	bl	800465c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	681a      	ldr	r2, [r3, #0]
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	6939      	ldr	r1, [r7, #16]
 80023b2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023b4:	fb01 f303 	mul.w	r3, r1, r3
 80023b8:	441a      	add	r2, r3
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	2200      	movs	r2, #0
 80023c2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023d4:	3b01      	subs	r3, #1
 80023d6:	6939      	ldr	r1, [r7, #16]
 80023d8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80023da:	fb01 f303 	mul.w	r3, r1, r3
 80023de:	441a      	add	r2, r3
 80023e0:	693b      	ldr	r3, [r7, #16]
 80023e2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	22ff      	movs	r2, #255	@ 0xff
 80023e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	22ff      	movs	r2, #255	@ 0xff
 80023f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d109      	bne.n	800240e <xQueueGenericReset+0xc2>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	691b      	ldr	r3, [r3, #16]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d00f      	beq.n	8002422 <xQueueGenericReset+0xd6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002402:	693b      	ldr	r3, [r7, #16]
 8002404:	3310      	adds	r3, #16
 8002406:	4618      	mov	r0, r3
 8002408:	f001 f840 	bl	800348c <xTaskRemoveFromEventList>
 800240c:	e009      	b.n	8002422 <xQueueGenericReset+0xd6>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	3310      	adds	r3, #16
 8002412:	4618      	mov	r0, r3
 8002414:	f7ff fee6 	bl	80021e4 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	3324      	adds	r3, #36	@ 0x24
 800241c:	4618      	mov	r0, r3
 800241e:	f7ff fee1 	bl	80021e4 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002422:	f002 f94d 	bl	80046c0 <vPortExitCritical>
 8002426:	e001      	b.n	800242c <xQueueGenericReset+0xe0>
    }
    else
    {
        xReturn = pdFAIL;
 8002428:	2300      	movs	r3, #0
 800242a:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	2b00      	cmp	r3, #0
 8002430:	d10b      	bne.n	800244a <xQueueGenericReset+0xfe>
        __asm volatile
 8002432:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002436:	f383 8811 	msr	BASEPRI, r3
 800243a:	f3bf 8f6f 	isb	sy
 800243e:	f3bf 8f4f 	dsb	sy
 8002442:	60bb      	str	r3, [r7, #8]
    }
 8002444:	bf00      	nop
 8002446:	bf00      	nop
 8002448:	e7fd      	b.n	8002446 <xQueueGenericReset+0xfa>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 800244a:	697b      	ldr	r3, [r7, #20]
}
 800244c:	4618      	mov	r0, r3
 800244e:	3718      	adds	r7, #24
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}

08002454 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002454:	b580      	push	{r7, lr}
 8002456:	b08a      	sub	sp, #40	@ 0x28
 8002458:	af02      	add	r7, sp, #8
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	4613      	mov	r3, r2
 8002460:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002462:	2300      	movs	r3, #0
 8002464:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d02e      	beq.n	80024ca <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800246c:	2100      	movs	r1, #0
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	fba3 2302 	umull	r2, r3, r3, r2
 8002476:	2b00      	cmp	r3, #0
 8002478:	d000      	beq.n	800247c <xQueueGenericCreate+0x28>
 800247a:	2101      	movs	r1, #1
 800247c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800247e:	2b00      	cmp	r3, #0
 8002480:	d123      	bne.n	80024ca <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800248a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800248e:	d81c      	bhi.n	80024ca <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	68ba      	ldr	r2, [r7, #8]
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800249a:	69bb      	ldr	r3, [r7, #24]
 800249c:	3350      	adds	r3, #80	@ 0x50
 800249e:	4618      	mov	r0, r3
 80024a0:	f002 fa0e 	bl	80048c0 <pvPortMalloc>
 80024a4:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d01d      	beq.n	80024e8 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	3350      	adds	r3, #80	@ 0x50
 80024b4:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	9300      	str	r3, [sp, #0]
 80024bc:	4613      	mov	r3, r2
 80024be:	697a      	ldr	r2, [r7, #20]
 80024c0:	68b9      	ldr	r1, [r7, #8]
 80024c2:	68f8      	ldr	r0, [r7, #12]
 80024c4:	f000 f815 	bl	80024f2 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 80024c8:	e00e      	b.n	80024e8 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 80024ca:	69fb      	ldr	r3, [r7, #28]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d10b      	bne.n	80024e8 <xQueueGenericCreate+0x94>
        __asm volatile
 80024d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80024d4:	f383 8811 	msr	BASEPRI, r3
 80024d8:	f3bf 8f6f 	isb	sy
 80024dc:	f3bf 8f4f 	dsb	sy
 80024e0:	613b      	str	r3, [r7, #16]
    }
 80024e2:	bf00      	nop
 80024e4:	bf00      	nop
 80024e6:	e7fd      	b.n	80024e4 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 80024e8:	69fb      	ldr	r3, [r7, #28]
    }
 80024ea:	4618      	mov	r0, r3
 80024ec:	3720      	adds	r7, #32
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80024f2:	b580      	push	{r7, lr}
 80024f4:	b084      	sub	sp, #16
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	60f8      	str	r0, [r7, #12]
 80024fa:	60b9      	str	r1, [r7, #8]
 80024fc:	607a      	str	r2, [r7, #4]
 80024fe:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002500:	68bb      	ldr	r3, [r7, #8]
 8002502:	2b00      	cmp	r3, #0
 8002504:	d103      	bne.n	800250e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	69ba      	ldr	r2, [r7, #24]
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	e002      	b.n	8002514 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	68fa      	ldr	r2, [r7, #12]
 8002518:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	68ba      	ldr	r2, [r7, #8]
 800251e:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002520:	2101      	movs	r1, #1
 8002522:	69b8      	ldr	r0, [r7, #24]
 8002524:	f7ff ff12 	bl	800234c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	78fa      	ldrb	r2, [r7, #3]
 800252c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	68ba      	ldr	r2, [r7, #8]
 8002534:	68f9      	ldr	r1, [r7, #12]
 8002536:	2073      	movs	r0, #115	@ 0x73
 8002538:	f003 fe1e 	bl	8006178 <SEGGER_SYSVIEW_RecordU32x3>
}
 800253c:	bf00      	nop
 800253e:	3710      	adds	r7, #16
 8002540:	46bd      	mov	sp, r7
 8002542:	bd80      	pop	{r7, pc}

08002544 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002544:	b590      	push	{r4, r7, lr}
 8002546:	b08f      	sub	sp, #60	@ 0x3c
 8002548:	af02      	add	r7, sp, #8
 800254a:	60f8      	str	r0, [r7, #12]
 800254c:	60b9      	str	r1, [r7, #8]
 800254e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002550:	2300      	movs	r3, #0
 8002552:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800255a:	2b00      	cmp	r3, #0
 800255c:	d10b      	bne.n	8002576 <xQueueReceive+0x32>
        __asm volatile
 800255e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002562:	f383 8811 	msr	BASEPRI, r3
 8002566:	f3bf 8f6f 	isb	sy
 800256a:	f3bf 8f4f 	dsb	sy
 800256e:	623b      	str	r3, [r7, #32]
    }
 8002570:	bf00      	nop
 8002572:	bf00      	nop
 8002574:	e7fd      	b.n	8002572 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d103      	bne.n	8002584 <xQueueReceive+0x40>
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d101      	bne.n	8002588 <xQueueReceive+0x44>
 8002584:	2301      	movs	r3, #1
 8002586:	e000      	b.n	800258a <xQueueReceive+0x46>
 8002588:	2300      	movs	r3, #0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d10b      	bne.n	80025a6 <xQueueReceive+0x62>
        __asm volatile
 800258e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002592:	f383 8811 	msr	BASEPRI, r3
 8002596:	f3bf 8f6f 	isb	sy
 800259a:	f3bf 8f4f 	dsb	sy
 800259e:	61fb      	str	r3, [r7, #28]
    }
 80025a0:	bf00      	nop
 80025a2:	bf00      	nop
 80025a4:	e7fd      	b.n	80025a2 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80025a6:	f001 f981 	bl	80038ac <xTaskGetSchedulerState>
 80025aa:	4603      	mov	r3, r0
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d102      	bne.n	80025b6 <xQueueReceive+0x72>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d101      	bne.n	80025ba <xQueueReceive+0x76>
 80025b6:	2301      	movs	r3, #1
 80025b8:	e000      	b.n	80025bc <xQueueReceive+0x78>
 80025ba:	2300      	movs	r3, #0
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d10b      	bne.n	80025d8 <xQueueReceive+0x94>
        __asm volatile
 80025c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80025c4:	f383 8811 	msr	BASEPRI, r3
 80025c8:	f3bf 8f6f 	isb	sy
 80025cc:	f3bf 8f4f 	dsb	sy
 80025d0:	61bb      	str	r3, [r7, #24]
    }
 80025d2:	bf00      	nop
 80025d4:	bf00      	nop
 80025d6:	e7fd      	b.n	80025d4 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80025d8:	f002 f840 	bl	800465c <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80025dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e0:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80025e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d024      	beq.n	8002632 <xQueueReceive+0xee>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80025e8:	68b9      	ldr	r1, [r7, #8]
 80025ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80025ec:	f000 f8b2 	bl	8002754 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	4618      	mov	r0, r3
 80025f4:	f004 fb9a 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 80025f8:	4604      	mov	r4, r0
 80025fa:	2000      	movs	r0, #0
 80025fc:	f004 fb96 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002600:	4602      	mov	r2, r0
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2101      	movs	r1, #1
 8002606:	9100      	str	r1, [sp, #0]
 8002608:	4621      	mov	r1, r4
 800260a:	205c      	movs	r0, #92	@ 0x5c
 800260c:	f003 fe2a 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002612:	1e5a      	subs	r2, r3, #1
 8002614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002616:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800261a:	691b      	ldr	r3, [r3, #16]
 800261c:	2b00      	cmp	r3, #0
 800261e:	d004      	beq.n	800262a <xQueueReceive+0xe6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002620:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002622:	3310      	adds	r3, #16
 8002624:	4618      	mov	r0, r3
 8002626:	f000 ff31 	bl	800348c <xTaskRemoveFromEventList>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 800262a:	f002 f849 	bl	80046c0 <vPortExitCritical>
                return pdPASS;
 800262e:	2301      	movs	r3, #1
 8002630:	e08a      	b.n	8002748 <xQueueReceive+0x204>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2b00      	cmp	r3, #0
 8002636:	d113      	bne.n	8002660 <xQueueReceive+0x11c>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002638:	f002 f842 	bl	80046c0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 800263c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800263e:	4618      	mov	r0, r3
 8002640:	f004 fb74 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002644:	4604      	mov	r4, r0
 8002646:	2000      	movs	r0, #0
 8002648:	f004 fb70 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 800264c:	4602      	mov	r2, r0
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	2101      	movs	r1, #1
 8002652:	9100      	str	r1, [sp, #0]
 8002654:	4621      	mov	r1, r4
 8002656:	205c      	movs	r0, #92	@ 0x5c
 8002658:	f003 fe04 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 800265c:	2300      	movs	r3, #0
 800265e:	e073      	b.n	8002748 <xQueueReceive+0x204>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002660:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002662:	2b00      	cmp	r3, #0
 8002664:	d106      	bne.n	8002674 <xQueueReceive+0x130>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002666:	f107 0310 	add.w	r3, r7, #16
 800266a:	4618      	mov	r0, r3
 800266c:	f000 ffe8 	bl	8003640 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002670:	2301      	movs	r3, #1
 8002672:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002674:	f002 f824 	bl	80046c0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002678:	f000 fc14 	bl	8002ea4 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800267c:	f001 ffee 	bl	800465c <vPortEnterCritical>
 8002680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002682:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002686:	b25b      	sxtb	r3, r3
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d103      	bne.n	8002696 <xQueueReceive+0x152>
 800268e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002690:	2200      	movs	r2, #0
 8002692:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002698:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800269c:	b25b      	sxtb	r3, r3
 800269e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026a2:	d103      	bne.n	80026ac <xQueueReceive+0x168>
 80026a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80026ac:	f002 f808 	bl	80046c0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80026b0:	1d3a      	adds	r2, r7, #4
 80026b2:	f107 0310 	add.w	r3, r7, #16
 80026b6:	4611      	mov	r1, r2
 80026b8:	4618      	mov	r0, r3
 80026ba:	f000 ffd7 	bl	800366c <xTaskCheckForTimeOut>
 80026be:	4603      	mov	r3, r0
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d124      	bne.n	800270e <xQueueReceive+0x1ca>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80026c4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026c6:	f000 f8bd 	bl	8002844 <prvIsQueueEmpty>
 80026ca:	4603      	mov	r3, r0
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d018      	beq.n	8002702 <xQueueReceive+0x1be>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80026d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026d2:	3324      	adds	r3, #36	@ 0x24
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	4611      	mov	r1, r2
 80026d8:	4618      	mov	r0, r3
 80026da:	f000 fe67 	bl	80033ac <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80026de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80026e0:	f000 f85e 	bl	80027a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80026e4:	f000 fbec 	bl	8002ec0 <xTaskResumeAll>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	f47f af74 	bne.w	80025d8 <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 80026f0:	4b17      	ldr	r3, [pc, #92]	@ (8002750 <xQueueReceive+0x20c>)
 80026f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026f6:	601a      	str	r2, [r3, #0]
 80026f8:	f3bf 8f4f 	dsb	sy
 80026fc:	f3bf 8f6f 	isb	sy
 8002700:	e76a      	b.n	80025d8 <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002702:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002704:	f000 f84c 	bl	80027a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002708:	f000 fbda 	bl	8002ec0 <xTaskResumeAll>
 800270c:	e764      	b.n	80025d8 <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 800270e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002710:	f000 f846 	bl	80027a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002714:	f000 fbd4 	bl	8002ec0 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002718:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800271a:	f000 f893 	bl	8002844 <prvIsQueueEmpty>
 800271e:	4603      	mov	r3, r0
 8002720:	2b00      	cmp	r3, #0
 8002722:	f43f af59 	beq.w	80025d8 <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 8002726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002728:	4618      	mov	r0, r3
 800272a:	f004 faff 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 800272e:	4604      	mov	r4, r0
 8002730:	2000      	movs	r0, #0
 8002732:	f004 fafb 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002736:	4602      	mov	r2, r0
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2101      	movs	r1, #1
 800273c:	9100      	str	r1, [sp, #0]
 800273e:	4621      	mov	r1, r4
 8002740:	205c      	movs	r0, #92	@ 0x5c
 8002742:	f003 fd8f 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 8002746:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 8002748:	4618      	mov	r0, r3
 800274a:	3734      	adds	r7, #52	@ 0x34
 800274c:	46bd      	mov	sp, r7
 800274e:	bd90      	pop	{r4, r7, pc}
 8002750:	e000ed04 	.word	0xe000ed04

08002754 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d018      	beq.n	8002798 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68da      	ldr	r2, [r3, #12]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	441a      	add	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68da      	ldr	r2, [r3, #12]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	429a      	cmp	r2, r3
 800277e:	d303      	bcc.n	8002788 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	68d9      	ldr	r1, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002790:	461a      	mov	r2, r3
 8002792:	6838      	ldr	r0, [r7, #0]
 8002794:	f004 fc62 	bl	800705c <memcpy>
    }
}
 8002798:	bf00      	nop
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}

080027a0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80027a8:	f001 ff58 	bl	800465c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027b4:	e011      	b.n	80027da <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d012      	beq.n	80027e4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	3324      	adds	r3, #36	@ 0x24
 80027c2:	4618      	mov	r0, r3
 80027c4:	f000 fe62 	bl	800348c <xTaskRemoveFromEventList>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d001      	beq.n	80027d2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80027ce:	f000 ffb5 	bl	800373c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80027d2:	7bfb      	ldrb	r3, [r7, #15]
 80027d4:	3b01      	subs	r3, #1
 80027d6:	b2db      	uxtb	r3, r3
 80027d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80027da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	dce9      	bgt.n	80027b6 <prvUnlockQueue+0x16>
 80027e2:	e000      	b.n	80027e6 <prvUnlockQueue+0x46>
                    break;
 80027e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	22ff      	movs	r2, #255	@ 0xff
 80027ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80027ee:	f001 ff67 	bl	80046c0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80027f2:	f001 ff33 	bl	800465c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80027fe:	e011      	b.n	8002824 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d012      	beq.n	800282e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3310      	adds	r3, #16
 800280c:	4618      	mov	r0, r3
 800280e:	f000 fe3d 	bl	800348c <xTaskRemoveFromEventList>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002818:	f000 ff90 	bl	800373c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800281c:	7bbb      	ldrb	r3, [r7, #14]
 800281e:	3b01      	subs	r3, #1
 8002820:	b2db      	uxtb	r3, r3
 8002822:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8002824:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002828:	2b00      	cmp	r3, #0
 800282a:	dce9      	bgt.n	8002800 <prvUnlockQueue+0x60>
 800282c:	e000      	b.n	8002830 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800282e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	22ff      	movs	r2, #255	@ 0xff
 8002834:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8002838:	f001 ff42 	bl	80046c0 <vPortExitCritical>
}
 800283c:	bf00      	nop
 800283e:	3710      	adds	r7, #16
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}

08002844 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800284c:	f001 ff06 	bl	800465c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002854:	2b00      	cmp	r3, #0
 8002856:	d102      	bne.n	800285e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8002858:	2301      	movs	r3, #1
 800285a:	60fb      	str	r3, [r7, #12]
 800285c:	e001      	b.n	8002862 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800285e:	2300      	movs	r3, #0
 8002860:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8002862:	f001 ff2d 	bl	80046c0 <vPortExitCritical>

    return xReturn;
 8002866:	68fb      	ldr	r3, [r7, #12]
}
 8002868:	4618      	mov	r0, r3
 800286a:	3710      	adds	r7, #16
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 800287a:	2300      	movs	r3, #0
 800287c:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d10b      	bne.n	800289c <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002888:	f383 8811 	msr	BASEPRI, r3
 800288c:	f3bf 8f6f 	isb	sy
 8002890:	f3bf 8f4f 	dsb	sy
 8002894:	60fb      	str	r3, [r7, #12]
    }
 8002896:	bf00      	nop
 8002898:	bf00      	nop
 800289a:	e7fd      	b.n	8002898 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d024      	beq.n	80028ec <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028a2:	2300      	movs	r3, #0
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	e01e      	b.n	80028e6 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 80028a8:	4a1c      	ldr	r2, [pc, #112]	@ (800291c <vQueueAddToRegistry+0xac>)
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	00db      	lsls	r3, r3, #3
 80028ae:	4413      	add	r3, r2
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	687a      	ldr	r2, [r7, #4]
 80028b4:	429a      	cmp	r2, r3
 80028b6:	d105      	bne.n	80028c4 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	00db      	lsls	r3, r3, #3
 80028bc:	4a17      	ldr	r2, [pc, #92]	@ (800291c <vQueueAddToRegistry+0xac>)
 80028be:	4413      	add	r3, r2
 80028c0:	613b      	str	r3, [r7, #16]
                    break;
 80028c2:	e013      	b.n	80028ec <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 80028c4:	693b      	ldr	r3, [r7, #16]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10a      	bne.n	80028e0 <vQueueAddToRegistry+0x70>
 80028ca:	4a14      	ldr	r2, [pc, #80]	@ (800291c <vQueueAddToRegistry+0xac>)
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d104      	bne.n	80028e0 <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	4a10      	ldr	r2, [pc, #64]	@ (800291c <vQueueAddToRegistry+0xac>)
 80028dc:	4413      	add	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	3301      	adds	r3, #1
 80028e4:	617b      	str	r3, [r7, #20]
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	2b07      	cmp	r3, #7
 80028ea:	d9dd      	bls.n	80028a8 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 80028ec:	693b      	ldr	r3, [r7, #16]
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d00f      	beq.n	8002912 <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	683a      	ldr	r2, [r7, #0]
 80028f6:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4618      	mov	r0, r3
 8002902:	f004 fa13 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002906:	4601      	mov	r1, r0
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	461a      	mov	r2, r3
 800290c:	2071      	movs	r0, #113	@ 0x71
 800290e:	f003 fbd9 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 8002912:	bf00      	nop
 8002914:	3718      	adds	r7, #24
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	20000094 	.word	0x20000094

08002920 <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 8002920:	b580      	push	{r7, lr}
 8002922:	b086      	sub	sp, #24
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 8002930:	f001 fe94 	bl	800465c <vPortEnterCritical>
 8002934:	697b      	ldr	r3, [r7, #20]
 8002936:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800293a:	b25b      	sxtb	r3, r3
 800293c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002940:	d103      	bne.n	800294a <vQueueWaitForMessageRestricted+0x2a>
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002950:	b25b      	sxtb	r3, r3
 8002952:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002956:	d103      	bne.n	8002960 <vQueueWaitForMessageRestricted+0x40>
 8002958:	697b      	ldr	r3, [r7, #20]
 800295a:	2200      	movs	r2, #0
 800295c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002960:	f001 feae 	bl	80046c0 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002964:	697b      	ldr	r3, [r7, #20]
 8002966:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002968:	2b00      	cmp	r3, #0
 800296a:	d106      	bne.n	800297a <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	3324      	adds	r3, #36	@ 0x24
 8002970:	687a      	ldr	r2, [r7, #4]
 8002972:	68b9      	ldr	r1, [r7, #8]
 8002974:	4618      	mov	r0, r3
 8002976:	f000 fd3f 	bl	80033f8 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 800297a:	6978      	ldr	r0, [r7, #20]
 800297c:	f7ff ff10 	bl	80027a0 <prvUnlockQueue>
    }
 8002980:	bf00      	nop
 8002982:	3718      	adds	r7, #24
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002988:	b580      	push	{r7, lr}
 800298a:	b08c      	sub	sp, #48	@ 0x30
 800298c:	af04      	add	r7, sp, #16
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	60b9      	str	r1, [r7, #8]
 8002992:	603b      	str	r3, [r7, #0]
 8002994:	4613      	mov	r3, r2
 8002996:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002998:	88fb      	ldrh	r3, [r7, #6]
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	4618      	mov	r0, r3
 800299e:	f001 ff8f 	bl	80048c0 <pvPortMalloc>
 80029a2:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d013      	beq.n	80029d2 <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029aa:	2058      	movs	r0, #88	@ 0x58
 80029ac:	f001 ff88 	bl	80048c0 <pvPortMalloc>
 80029b0:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80029b8:	2258      	movs	r2, #88	@ 0x58
 80029ba:	2100      	movs	r1, #0
 80029bc:	69f8      	ldr	r0, [r7, #28]
 80029be:	f004 fb21 	bl	8007004 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	697a      	ldr	r2, [r7, #20]
 80029c6:	631a      	str	r2, [r3, #48]	@ 0x30
 80029c8:	e005      	b.n	80029d6 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80029ca:	6978      	ldr	r0, [r7, #20]
 80029cc:	f002 f834 	bl	8004a38 <vPortFree>
 80029d0:	e001      	b.n	80029d6 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80029d2:	2300      	movs	r3, #0
 80029d4:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d013      	beq.n	8002a04 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029dc:	88fa      	ldrh	r2, [r7, #6]
 80029de:	2300      	movs	r3, #0
 80029e0:	9303      	str	r3, [sp, #12]
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	9302      	str	r3, [sp, #8]
 80029e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029e8:	9301      	str	r3, [sp, #4]
 80029ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68b9      	ldr	r1, [r7, #8]
 80029f2:	68f8      	ldr	r0, [r7, #12]
 80029f4:	f000 f80e 	bl	8002a14 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80029f8:	69f8      	ldr	r0, [r7, #28]
 80029fa:	f000 f89b 	bl	8002b34 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e002      	b.n	8002a0a <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a04:	f04f 33ff 	mov.w	r3, #4294967295
 8002a08:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002a0a:	69bb      	ldr	r3, [r7, #24]
    }
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	3720      	adds	r7, #32
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bd80      	pop	{r7, pc}

08002a14 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b088      	sub	sp, #32
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a24:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	21a5      	movs	r1, #165	@ 0xa5
 8002a2e:	f004 fae9 	bl	8007004 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002a34:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	4413      	add	r3, r2
 8002a42:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f023 0307 	bic.w	r3, r3, #7
 8002a4a:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	f003 0307 	and.w	r3, r3, #7
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d00b      	beq.n	8002a6e <prvInitialiseNewTask+0x5a>
        __asm volatile
 8002a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002a5a:	f383 8811 	msr	BASEPRI, r3
 8002a5e:	f3bf 8f6f 	isb	sy
 8002a62:	f3bf 8f4f 	dsb	sy
 8002a66:	617b      	str	r3, [r7, #20]
    }
 8002a68:	bf00      	nop
 8002a6a:	bf00      	nop
 8002a6c:	e7fd      	b.n	8002a6a <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d01e      	beq.n	8002ab2 <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a74:	2300      	movs	r3, #0
 8002a76:	61fb      	str	r3, [r7, #28]
 8002a78:	e012      	b.n	8002aa0 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	4413      	add	r3, r2
 8002a80:	7819      	ldrb	r1, [r3, #0]
 8002a82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002a84:	69fb      	ldr	r3, [r7, #28]
 8002a86:	4413      	add	r3, r2
 8002a88:	3334      	adds	r3, #52	@ 0x34
 8002a8a:	460a      	mov	r2, r1
 8002a8c:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	69fb      	ldr	r3, [r7, #28]
 8002a92:	4413      	add	r3, r2
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d006      	beq.n	8002aa8 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a9a:	69fb      	ldr	r3, [r7, #28]
 8002a9c:	3301      	adds	r3, #1
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	2b09      	cmp	r3, #9
 8002aa4:	d9e9      	bls.n	8002a7a <prvInitialiseNewTask+0x66>
 8002aa6:	e000      	b.n	8002aaa <prvInitialiseNewTask+0x96>
            {
                break;
 8002aa8:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002aaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002aac:	2200      	movs	r2, #0
 8002aae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002ab2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d90b      	bls.n	8002ad0 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002ab8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002abc:	f383 8811 	msr	BASEPRI, r3
 8002ac0:	f3bf 8f6f 	isb	sy
 8002ac4:	f3bf 8f4f 	dsb	sy
 8002ac8:	613b      	str	r3, [r7, #16]
    }
 8002aca:	bf00      	nop
 8002acc:	bf00      	nop
 8002ace:	e7fd      	b.n	8002acc <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d901      	bls.n	8002ada <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ad6:	2304      	movs	r3, #4
 8002ad8:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002adc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ade:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002ae4:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff fb9a 	bl	8002224 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002af2:	3318      	adds	r3, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fb95 	bl	8002224 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002afc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002afe:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b02:	f1c3 0205 	rsb	r2, r3, #5
 8002b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b08:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b0e:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	68f9      	ldr	r1, [r7, #12]
 8002b14:	69b8      	ldr	r0, [r7, #24]
 8002b16:	f001 fbef 	bl	80042f8 <pxPortInitialiseStack>
 8002b1a:	4602      	mov	r2, r0
 8002b1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b1e:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d002      	beq.n	8002b2c <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b28:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002b2c:	bf00      	nop
 8002b2e:	3720      	adds	r7, #32
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002b34:	b5b0      	push	{r4, r5, r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af02      	add	r7, sp, #8
 8002b3a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002b3c:	f001 fd8e 	bl	800465c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002b40:	4b49      	ldr	r3, [pc, #292]	@ (8002c68 <prvAddNewTaskToReadyList+0x134>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	4a48      	ldr	r2, [pc, #288]	@ (8002c68 <prvAddNewTaskToReadyList+0x134>)
 8002b48:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8002b4a:	4b48      	ldr	r3, [pc, #288]	@ (8002c6c <prvAddNewTaskToReadyList+0x138>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002b52:	4a46      	ldr	r2, [pc, #280]	@ (8002c6c <prvAddNewTaskToReadyList+0x138>)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b58:	4b43      	ldr	r3, [pc, #268]	@ (8002c68 <prvAddNewTaskToReadyList+0x134>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d110      	bne.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002b60:	f000 fe0a 	bl	8003778 <prvInitialiseTaskLists>
 8002b64:	e00d      	b.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002b66:	4b42      	ldr	r3, [pc, #264]	@ (8002c70 <prvAddNewTaskToReadyList+0x13c>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d109      	bne.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002b6e:	4b3f      	ldr	r3, [pc, #252]	@ (8002c6c <prvAddNewTaskToReadyList+0x138>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d802      	bhi.n	8002b82 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002b7c:	4a3b      	ldr	r2, [pc, #236]	@ (8002c6c <prvAddNewTaskToReadyList+0x138>)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002b82:	4b3c      	ldr	r3, [pc, #240]	@ (8002c74 <prvAddNewTaskToReadyList+0x140>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	3301      	adds	r3, #1
 8002b88:	4a3a      	ldr	r2, [pc, #232]	@ (8002c74 <prvAddNewTaskToReadyList+0x140>)
 8002b8a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002b8c:	4b39      	ldr	r3, [pc, #228]	@ (8002c74 <prvAddNewTaskToReadyList+0x140>)
 8002b8e:	681a      	ldr	r2, [r3, #0]
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d016      	beq.n	8002bc8 <prvAddNewTaskToReadyList+0x94>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f003 ffff 	bl	8006ba0 <SEGGER_SYSVIEW_OnTaskCreate>
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	461d      	mov	r5, r3
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	461c      	mov	r4, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	1ae3      	subs	r3, r4, r3
 8002bc0:	9300      	str	r3, [sp, #0]
 8002bc2:	462b      	mov	r3, r5
 8002bc4:	f002 f8fc 	bl	8004dc0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f004 f86c 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bd4:	2201      	movs	r2, #1
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	4b27      	ldr	r3, [pc, #156]	@ (8002c78 <prvAddNewTaskToReadyList+0x144>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	4a26      	ldr	r2, [pc, #152]	@ (8002c78 <prvAddNewTaskToReadyList+0x144>)
 8002be0:	6013      	str	r3, [r2, #0]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002be6:	4925      	ldr	r1, [pc, #148]	@ (8002c7c <prvAddNewTaskToReadyList+0x148>)
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	440b      	add	r3, r1
 8002bf2:	3304      	adds	r3, #4
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	609a      	str	r2, [r3, #8]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	689a      	ldr	r2, [r3, #8]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	3204      	adds	r2, #4
 8002c0e:	605a      	str	r2, [r3, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	1d1a      	adds	r2, r3, #4
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	609a      	str	r2, [r3, #8]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	4a15      	ldr	r2, [pc, #84]	@ (8002c7c <prvAddNewTaskToReadyList+0x148>)
 8002c26:	441a      	add	r2, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	615a      	str	r2, [r3, #20]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002c30:	4912      	ldr	r1, [pc, #72]	@ (8002c7c <prvAddNewTaskToReadyList+0x148>)
 8002c32:	4613      	mov	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4413      	add	r3, r2
 8002c38:	009b      	lsls	r3, r3, #2
 8002c3a:	440b      	add	r3, r1
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	1c59      	adds	r1, r3, #1
 8002c40:	480e      	ldr	r0, [pc, #56]	@ (8002c7c <prvAddNewTaskToReadyList+0x148>)
 8002c42:	4613      	mov	r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002c4e:	f001 fd37 	bl	80046c0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002c52:	4b07      	ldr	r3, [pc, #28]	@ (8002c70 <prvAddNewTaskToReadyList+0x13c>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d001      	beq.n	8002c5e <prvAddNewTaskToReadyList+0x12a>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c5a:	4b04      	ldr	r3, [pc, #16]	@ (8002c6c <prvAddNewTaskToReadyList+0x138>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002c5e:	bf00      	nop
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bdb0      	pop	{r4, r5, r7, pc}
 8002c66:	bf00      	nop
 8002c68:	200001ac 	.word	0x200001ac
 8002c6c:	200000d4 	.word	0x200000d4
 8002c70:	200001b8 	.word	0x200001b8
 8002c74:	200001c8 	.word	0x200001c8
 8002c78:	200001b4 	.word	0x200001b4
 8002c7c:	200000d8 	.word	0x200000d8

08002c80 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    void vTaskDelete( TaskHandle_t xTaskToDelete )
    {
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
        TCB_t * pxTCB;

        taskENTER_CRITICAL();
 8002c88:	f001 fce8 	bl	800465c <vPortEnterCritical>
        {
            /* If null is passed in here then it is the calling task that is
             * being deleted. */
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d102      	bne.n	8002c98 <vTaskDelete+0x18>
 8002c92:	4b49      	ldr	r3, [pc, #292]	@ (8002db8 <vTaskDelete+0x138>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	e000      	b.n	8002c9a <vTaskDelete+0x1a>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	60fb      	str	r3, [r7, #12]

            /* Remove task from the ready/delayed list. */
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	3304      	adds	r3, #4
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7ff fb29 	bl	80022f8 <uxListRemove>
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d115      	bne.n	8002cd8 <vTaskDelete+0x58>
            {
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cb0:	4942      	ldr	r1, [pc, #264]	@ (8002dbc <vTaskDelete+0x13c>)
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	009b      	lsls	r3, r3, #2
 8002cba:	440b      	add	r3, r1
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d10a      	bne.n	8002cd8 <vTaskDelete+0x58>
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	4b3c      	ldr	r3, [pc, #240]	@ (8002dc0 <vTaskDelete+0x140>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	4013      	ands	r3, r2
 8002cd4:	4a3a      	ldr	r2, [pc, #232]	@ (8002dc0 <vTaskDelete+0x140>)
 8002cd6:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }

            /* Is the task waiting on an event also? */
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d004      	beq.n	8002cea <vTaskDelete+0x6a>
            {
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	3318      	adds	r3, #24
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7ff fb07 	bl	80022f8 <uxListRemove>

            /* Increment the uxTaskNumber also so kernel aware debuggers can
             * detect that the task lists need re-generating.  This is done before
             * portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
             * not return. */
            uxTaskNumber++;
 8002cea:	4b36      	ldr	r3, [pc, #216]	@ (8002dc4 <vTaskDelete+0x144>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	3301      	adds	r3, #1
 8002cf0:	4a34      	ldr	r2, [pc, #208]	@ (8002dc4 <vTaskDelete+0x144>)
 8002cf2:	6013      	str	r3, [r2, #0]

            if( pxTCB == pxCurrentTCB )
 8002cf4:	4b30      	ldr	r3, [pc, #192]	@ (8002db8 <vTaskDelete+0x138>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d118      	bne.n	8002d30 <vTaskDelete+0xb0>
                /* A task is deleting itself.  This cannot complete within the
                 * task itself, as a context switch to another task is required.
                 * Place the task in the termination list.  The idle task will
                 * check the termination list and free up any memory allocated by
                 * the scheduler for the TCB and stack of the deleted task. */
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	3304      	adds	r3, #4
 8002d02:	4619      	mov	r1, r3
 8002d04:	4830      	ldr	r0, [pc, #192]	@ (8002dc8 <vTaskDelete+0x148>)
 8002d06:	f7ff fa9a 	bl	800223e <vListInsertEnd>

                /* Increment the ucTasksDeleted variable so the idle task knows
                 * there is a task that has been deleted and that it should therefore
                 * check the xTasksWaitingTermination list. */
                ++uxDeletedTasksWaitingCleanUp;
 8002d0a:	4b30      	ldr	r3, [pc, #192]	@ (8002dcc <vTaskDelete+0x14c>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	4a2e      	ldr	r2, [pc, #184]	@ (8002dcc <vTaskDelete+0x14c>)
 8002d12:	6013      	str	r3, [r2, #0]

                /* Call the delete hook before portPRE_TASK_DELETE_HOOK() as
                 * portPRE_TASK_DELETE_HOOK() does not return in the Win32 port. */
                traceTASK_DELETE( pxTCB );
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f004 f808 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	4619      	mov	r1, r3
 8002d20:	2022      	movs	r0, #34	@ 0x22
 8002d22:	f003 f993 	bl	800604c <SEGGER_SYSVIEW_RecordU32>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f002 f8b1 	bl	8004e90 <SYSVIEW_DeleteTask>
 8002d2e:	e013      	b.n	8002d58 <vTaskDelete+0xd8>
                 * required. */
                portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
            }
            else
            {
                --uxCurrentNumberOfTasks;
 8002d30:	4b27      	ldr	r3, [pc, #156]	@ (8002dd0 <vTaskDelete+0x150>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	3b01      	subs	r3, #1
 8002d36:	4a26      	ldr	r2, [pc, #152]	@ (8002dd0 <vTaskDelete+0x150>)
 8002d38:	6013      	str	r3, [r2, #0]
                traceTASK_DELETE( pxTCB );
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	f003 fff5 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8002d42:	4603      	mov	r3, r0
 8002d44:	4619      	mov	r1, r3
 8002d46:	2022      	movs	r0, #34	@ 0x22
 8002d48:	f003 f980 	bl	800604c <SEGGER_SYSVIEW_RecordU32>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f002 f89e 	bl	8004e90 <SYSVIEW_DeleteTask>

                /* Reset the next expected unblock time in case it referred to
                 * the task that has just been deleted. */
                prvResetNextTaskUnblockTime();
 8002d54:	f000 fd8e 	bl	8003874 <prvResetNextTaskUnblockTime>
            }
        }
        taskEXIT_CRITICAL();
 8002d58:	f001 fcb2 	bl	80046c0 <vPortExitCritical>

        /* If the task is not deleting itself, call prvDeleteTCB from outside of
         * critical section. If a task deletes itself, prvDeleteTCB is called
         * from prvCheckTasksWaitingTermination which is called from Idle task. */
        if( pxTCB != pxCurrentTCB )
 8002d5c:	4b16      	ldr	r3, [pc, #88]	@ (8002db8 <vTaskDelete+0x138>)
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	429a      	cmp	r2, r3
 8002d64:	d002      	beq.n	8002d6c <vTaskDelete+0xec>
        {
            prvDeleteTCB( pxTCB );
 8002d66:	68f8      	ldr	r0, [r7, #12]
 8002d68:	f000 fd74 	bl	8003854 <prvDeleteTCB>
        }

        /* Force a reschedule if it is the currently running task that has just
         * been deleted. */
        if( xSchedulerRunning != pdFALSE )
 8002d6c:	4b19      	ldr	r3, [pc, #100]	@ (8002dd4 <vTaskDelete+0x154>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d01c      	beq.n	8002dae <vTaskDelete+0x12e>
        {
            if( pxTCB == pxCurrentTCB )
 8002d74:	4b10      	ldr	r3, [pc, #64]	@ (8002db8 <vTaskDelete+0x138>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	429a      	cmp	r2, r3
 8002d7c:	d117      	bne.n	8002dae <vTaskDelete+0x12e>
            {
                configASSERT( uxSchedulerSuspended == 0 );
 8002d7e:	4b16      	ldr	r3, [pc, #88]	@ (8002dd8 <vTaskDelete+0x158>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d00b      	beq.n	8002d9e <vTaskDelete+0x11e>
        __asm volatile
 8002d86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d8a:	f383 8811 	msr	BASEPRI, r3
 8002d8e:	f3bf 8f6f 	isb	sy
 8002d92:	f3bf 8f4f 	dsb	sy
 8002d96:	60bb      	str	r3, [r7, #8]
    }
 8002d98:	bf00      	nop
 8002d9a:	bf00      	nop
 8002d9c:	e7fd      	b.n	8002d9a <vTaskDelete+0x11a>
                portYIELD_WITHIN_API();
 8002d9e:	4b0f      	ldr	r3, [pc, #60]	@ (8002ddc <vTaskDelete+0x15c>)
 8002da0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002da4:	601a      	str	r2, [r3, #0]
 8002da6:	f3bf 8f4f 	dsb	sy
 8002daa:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
 8002dae:	bf00      	nop
 8002db0:	3710      	adds	r7, #16
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200000d4 	.word	0x200000d4
 8002dbc:	200000d8 	.word	0x200000d8
 8002dc0:	200001b4 	.word	0x200001b4
 8002dc4:	200001c8 	.word	0x200001c8
 8002dc8:	20000180 	.word	0x20000180
 8002dcc:	20000194 	.word	0x20000194
 8002dd0:	200001ac 	.word	0x200001ac
 8002dd4:	200001b8 	.word	0x200001b8
 8002dd8:	200001d4 	.word	0x200001d4
 8002ddc:	e000ed04 	.word	0xe000ed04

08002de0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002de0:	b580      	push	{r7, lr}
 8002de2:	b086      	sub	sp, #24
 8002de4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002de6:	4b27      	ldr	r3, [pc, #156]	@ (8002e84 <vTaskStartScheduler+0xa4>)
 8002de8:	9301      	str	r3, [sp, #4]
 8002dea:	2300      	movs	r3, #0
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	2300      	movs	r3, #0
 8002df0:	2282      	movs	r2, #130	@ 0x82
 8002df2:	4925      	ldr	r1, [pc, #148]	@ (8002e88 <vTaskStartScheduler+0xa8>)
 8002df4:	4825      	ldr	r0, [pc, #148]	@ (8002e8c <vTaskStartScheduler+0xac>)
 8002df6:	f7ff fdc7 	bl	8002988 <xTaskCreate>
 8002dfa:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2b01      	cmp	r3, #1
 8002e00:	d102      	bne.n	8002e08 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002e02:	f000 ffed 	bl	8003de0 <xTimerCreateTimerTask>
 8002e06:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d124      	bne.n	8002e58 <vTaskStartScheduler+0x78>
        __asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	60bb      	str	r3, [r7, #8]
    }
 8002e20:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002e22:	4b1b      	ldr	r3, [pc, #108]	@ (8002e90 <vTaskStartScheduler+0xb0>)
 8002e24:	f04f 32ff 	mov.w	r2, #4294967295
 8002e28:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002e2a:	4b1a      	ldr	r3, [pc, #104]	@ (8002e94 <vTaskStartScheduler+0xb4>)
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e30:	4b19      	ldr	r3, [pc, #100]	@ (8002e98 <vTaskStartScheduler+0xb8>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002e36:	4b19      	ldr	r3, [pc, #100]	@ (8002e9c <vTaskStartScheduler+0xbc>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	4b12      	ldr	r3, [pc, #72]	@ (8002e84 <vTaskStartScheduler+0xa4>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d102      	bne.n	8002e48 <vTaskStartScheduler+0x68>
 8002e42:	f003 fe91 	bl	8006b68 <SEGGER_SYSVIEW_OnIdle>
 8002e46:	e004      	b.n	8002e52 <vTaskStartScheduler+0x72>
 8002e48:	4b14      	ldr	r3, [pc, #80]	@ (8002e9c <vTaskStartScheduler+0xbc>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f003 fee9 	bl	8006c24 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002e52:	f001 fadf 	bl	8004414 <xPortStartScheduler>
 8002e56:	e00f      	b.n	8002e78 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d10b      	bne.n	8002e78 <vTaskStartScheduler+0x98>
        __asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	607b      	str	r3, [r7, #4]
    }
 8002e72:	bf00      	nop
 8002e74:	bf00      	nop
 8002e76:	e7fd      	b.n	8002e74 <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002e78:	4b09      	ldr	r3, [pc, #36]	@ (8002ea0 <vTaskStartScheduler+0xc0>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
}
 8002e7c:	bf00      	nop
 8002e7e:	3710      	adds	r7, #16
 8002e80:	46bd      	mov	sp, r7
 8002e82:	bd80      	pop	{r7, pc}
 8002e84:	200001d0 	.word	0x200001d0
 8002e88:	08007140 	.word	0x08007140
 8002e8c:	08003755 	.word	0x08003755
 8002e90:	200001cc 	.word	0x200001cc
 8002e94:	200001b8 	.word	0x200001b8
 8002e98:	200001b0 	.word	0x200001b0
 8002e9c:	200000d4 	.word	0x200000d4
 8002ea0:	2000000c 	.word	0x2000000c

08002ea4 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002ea8:	4b04      	ldr	r3, [pc, #16]	@ (8002ebc <vTaskSuspendAll+0x18>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3301      	adds	r3, #1
 8002eae:	4a03      	ldr	r2, [pc, #12]	@ (8002ebc <vTaskSuspendAll+0x18>)
 8002eb0:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002eb2:	bf00      	nop
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	200001d4 	.word	0x200001d4

08002ec0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b088      	sub	sp, #32
 8002ec4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002eca:	2300      	movs	r3, #0
 8002ecc:	617b      	str	r3, [r7, #20]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002ece:	4b6d      	ldr	r3, [pc, #436]	@ (8003084 <xTaskResumeAll+0x1c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d10b      	bne.n	8002eee <xTaskResumeAll+0x2e>
        __asm volatile
 8002ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eda:	f383 8811 	msr	BASEPRI, r3
 8002ede:	f3bf 8f6f 	isb	sy
 8002ee2:	f3bf 8f4f 	dsb	sy
 8002ee6:	607b      	str	r3, [r7, #4]
    }
 8002ee8:	bf00      	nop
 8002eea:	bf00      	nop
 8002eec:	e7fd      	b.n	8002eea <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002eee:	f001 fbb5 	bl	800465c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002ef2:	4b64      	ldr	r3, [pc, #400]	@ (8003084 <xTaskResumeAll+0x1c4>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	3b01      	subs	r3, #1
 8002ef8:	4a62      	ldr	r2, [pc, #392]	@ (8003084 <xTaskResumeAll+0x1c4>)
 8002efa:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002efc:	4b61      	ldr	r3, [pc, #388]	@ (8003084 <xTaskResumeAll+0x1c4>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	f040 80b8 	bne.w	8003076 <xTaskResumeAll+0x1b6>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002f06:	4b60      	ldr	r3, [pc, #384]	@ (8003088 <xTaskResumeAll+0x1c8>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	f000 80b3 	beq.w	8003076 <xTaskResumeAll+0x1b6>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f10:	e08e      	b.n	8003030 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f12:	4b5e      	ldr	r3, [pc, #376]	@ (800308c <xTaskResumeAll+0x1cc>)
 8002f14:	68db      	ldr	r3, [r3, #12]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f1a:	69fb      	ldr	r3, [r7, #28]
 8002f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f1e:	613b      	str	r3, [r7, #16]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	69db      	ldr	r3, [r3, #28]
 8002f24:	69fa      	ldr	r2, [r7, #28]
 8002f26:	6a12      	ldr	r2, [r2, #32]
 8002f28:	609a      	str	r2, [r3, #8]
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	6a1b      	ldr	r3, [r3, #32]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	69d2      	ldr	r2, [r2, #28]
 8002f32:	605a      	str	r2, [r3, #4]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	69fb      	ldr	r3, [r7, #28]
 8002f3a:	3318      	adds	r3, #24
 8002f3c:	429a      	cmp	r2, r3
 8002f3e:	d103      	bne.n	8002f48 <xTaskResumeAll+0x88>
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	605a      	str	r2, [r3, #4]
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	1e5a      	subs	r2, r3, #1
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	695b      	ldr	r3, [r3, #20]
 8002f5c:	60fb      	str	r3, [r7, #12]
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	689b      	ldr	r3, [r3, #8]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	68d2      	ldr	r2, [r2, #12]
 8002f66:	609a      	str	r2, [r3, #8]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	69fa      	ldr	r2, [r7, #28]
 8002f6e:	6892      	ldr	r2, [r2, #8]
 8002f70:	605a      	str	r2, [r3, #4]
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685a      	ldr	r2, [r3, #4]
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	3304      	adds	r3, #4
 8002f7a:	429a      	cmp	r2, r3
 8002f7c:	d103      	bne.n	8002f86 <xTaskResumeAll+0xc6>
 8002f7e:	69fb      	ldr	r3, [r7, #28]
 8002f80:	68da      	ldr	r2, [r3, #12]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	605a      	str	r2, [r3, #4]
 8002f86:	69fb      	ldr	r3, [r7, #28]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	615a      	str	r2, [r3, #20]
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	1e5a      	subs	r2, r3, #1
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002f96:	69fb      	ldr	r3, [r7, #28]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f003 fe85 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	409a      	lsls	r2, r3
 8002fa6:	4b3a      	ldr	r3, [pc, #232]	@ (8003090 <xTaskResumeAll+0x1d0>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4313      	orrs	r3, r2
 8002fac:	4a38      	ldr	r2, [pc, #224]	@ (8003090 <xTaskResumeAll+0x1d0>)
 8002fae:	6013      	str	r3, [r2, #0]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb4:	4937      	ldr	r1, [pc, #220]	@ (8003094 <xTaskResumeAll+0x1d4>)
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	609a      	str	r2, [r3, #8]
 8002fcc:	68bb      	ldr	r3, [r7, #8]
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	60da      	str	r2, [r3, #12]
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	69fa      	ldr	r2, [r7, #28]
 8002fda:	3204      	adds	r2, #4
 8002fdc:	605a      	str	r2, [r3, #4]
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	1d1a      	adds	r2, r3, #4
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	69fb      	ldr	r3, [r7, #28]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fea:	4613      	mov	r3, r2
 8002fec:	009b      	lsls	r3, r3, #2
 8002fee:	4413      	add	r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4a28      	ldr	r2, [pc, #160]	@ (8003094 <xTaskResumeAll+0x1d4>)
 8002ff4:	441a      	add	r2, r3
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	615a      	str	r2, [r3, #20]
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ffe:	4925      	ldr	r1, [pc, #148]	@ (8003094 <xTaskResumeAll+0x1d4>)
 8003000:	4613      	mov	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	4413      	add	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	1c59      	adds	r1, r3, #1
 800300e:	4821      	ldr	r0, [pc, #132]	@ (8003094 <xTaskResumeAll+0x1d4>)
 8003010:	4613      	mov	r3, r2
 8003012:	009b      	lsls	r3, r3, #2
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	4403      	add	r3, r0
 800301a:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800301c:	69fb      	ldr	r3, [r7, #28]
 800301e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003020:	4b1d      	ldr	r3, [pc, #116]	@ (8003098 <xTaskResumeAll+0x1d8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003026:	429a      	cmp	r2, r3
 8003028:	d302      	bcc.n	8003030 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 800302a:	4b1c      	ldr	r3, [pc, #112]	@ (800309c <xTaskResumeAll+0x1dc>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003030:	4b16      	ldr	r3, [pc, #88]	@ (800308c <xTaskResumeAll+0x1cc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	f47f af6c 	bne.w	8002f12 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8003040:	f000 fc18 	bl	8003874 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003044:	4b16      	ldr	r3, [pc, #88]	@ (80030a0 <xTaskResumeAll+0x1e0>)
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	61bb      	str	r3, [r7, #24]

                    if( xPendedCounts > ( TickType_t ) 0U )
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d010      	beq.n	8003072 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8003050:	f000 f84a 	bl	80030e8 <xTaskIncrementTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 800305a:	4b10      	ldr	r3, [pc, #64]	@ (800309c <xTaskResumeAll+0x1dc>)
 800305c:	2201      	movs	r2, #1
 800305e:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	3b01      	subs	r3, #1
 8003064:	61bb      	str	r3, [r7, #24]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003066:	69bb      	ldr	r3, [r7, #24]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d1f1      	bne.n	8003050 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 800306c:	4b0c      	ldr	r3, [pc, #48]	@ (80030a0 <xTaskResumeAll+0x1e0>)
 800306e:	2200      	movs	r2, #0
 8003070:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8003072:	4b0a      	ldr	r3, [pc, #40]	@ (800309c <xTaskResumeAll+0x1dc>)
 8003074:	681b      	ldr	r3, [r3, #0]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8003076:	f001 fb23 	bl	80046c0 <vPortExitCritical>

    return xAlreadyYielded;
 800307a:	697b      	ldr	r3, [r7, #20]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3720      	adds	r7, #32
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	200001d4 	.word	0x200001d4
 8003088:	200001ac 	.word	0x200001ac
 800308c:	2000016c 	.word	0x2000016c
 8003090:	200001b4 	.word	0x200001b4
 8003094:	200000d8 	.word	0x200000d8
 8003098:	200000d4 	.word	0x200000d4
 800309c:	200001c0 	.word	0x200001c0
 80030a0:	200001bc 	.word	0x200001bc

080030a4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80030a4:	b480      	push	{r7}
 80030a6:	b083      	sub	sp, #12
 80030a8:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 80030aa:	4b05      	ldr	r3, [pc, #20]	@ (80030c0 <xTaskGetTickCount+0x1c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 80030b0:	687b      	ldr	r3, [r7, #4]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	200001b0 	.word	0x200001b0

080030c4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80030ca:	f001 fbb7 	bl	800483c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 80030ce:	2300      	movs	r3, #0
 80030d0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 80030d2:	4b04      	ldr	r3, [pc, #16]	@ (80030e4 <xTaskGetTickCountFromISR+0x20>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 80030d8:	683b      	ldr	r3, [r7, #0]
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3708      	adds	r7, #8
 80030de:	46bd      	mov	sp, r7
 80030e0:	bd80      	pop	{r7, pc}
 80030e2:	bf00      	nop
 80030e4:	200001b0 	.word	0x200001b0

080030e8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b08a      	sub	sp, #40	@ 0x28
 80030ec:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80030f2:	4b70      	ldr	r3, [pc, #448]	@ (80032b4 <xTaskIncrementTick+0x1cc>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f040 80d2 	bne.w	80032a0 <xTaskIncrementTick+0x1b8>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80030fc:	4b6e      	ldr	r3, [pc, #440]	@ (80032b8 <xTaskIncrementTick+0x1d0>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	3301      	adds	r3, #1
 8003102:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003104:	4a6c      	ldr	r2, [pc, #432]	@ (80032b8 <xTaskIncrementTick+0x1d0>)
 8003106:	6a3b      	ldr	r3, [r7, #32]
 8003108:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800310a:	6a3b      	ldr	r3, [r7, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d121      	bne.n	8003154 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8003110:	4b6a      	ldr	r3, [pc, #424]	@ (80032bc <xTaskIncrementTick+0x1d4>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d00b      	beq.n	8003132 <xTaskIncrementTick+0x4a>
        __asm volatile
 800311a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311e:	f383 8811 	msr	BASEPRI, r3
 8003122:	f3bf 8f6f 	isb	sy
 8003126:	f3bf 8f4f 	dsb	sy
 800312a:	607b      	str	r3, [r7, #4]
    }
 800312c:	bf00      	nop
 800312e:	bf00      	nop
 8003130:	e7fd      	b.n	800312e <xTaskIncrementTick+0x46>
 8003132:	4b62      	ldr	r3, [pc, #392]	@ (80032bc <xTaskIncrementTick+0x1d4>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	61fb      	str	r3, [r7, #28]
 8003138:	4b61      	ldr	r3, [pc, #388]	@ (80032c0 <xTaskIncrementTick+0x1d8>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	4a5f      	ldr	r2, [pc, #380]	@ (80032bc <xTaskIncrementTick+0x1d4>)
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4a5f      	ldr	r2, [pc, #380]	@ (80032c0 <xTaskIncrementTick+0x1d8>)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	6013      	str	r3, [r2, #0]
 8003146:	4b5f      	ldr	r3, [pc, #380]	@ (80032c4 <xTaskIncrementTick+0x1dc>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	3301      	adds	r3, #1
 800314c:	4a5d      	ldr	r2, [pc, #372]	@ (80032c4 <xTaskIncrementTick+0x1dc>)
 800314e:	6013      	str	r3, [r2, #0]
 8003150:	f000 fb90 	bl	8003874 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003154:	4b5c      	ldr	r3, [pc, #368]	@ (80032c8 <xTaskIncrementTick+0x1e0>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6a3a      	ldr	r2, [r7, #32]
 800315a:	429a      	cmp	r2, r3
 800315c:	f0c0 80a5 	bcc.w	80032aa <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003160:	4b56      	ldr	r3, [pc, #344]	@ (80032bc <xTaskIncrementTick+0x1d4>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d104      	bne.n	8003174 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800316a:	4b57      	ldr	r3, [pc, #348]	@ (80032c8 <xTaskIncrementTick+0x1e0>)
 800316c:	f04f 32ff 	mov.w	r2, #4294967295
 8003170:	601a      	str	r2, [r3, #0]
                    break;
 8003172:	e09a      	b.n	80032aa <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003174:	4b51      	ldr	r3, [pc, #324]	@ (80032bc <xTaskIncrementTick+0x1d4>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8003184:	6a3a      	ldr	r2, [r7, #32]
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	429a      	cmp	r2, r3
 800318a:	d203      	bcs.n	8003194 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 800318c:	4a4e      	ldr	r2, [pc, #312]	@ (80032c8 <xTaskIncrementTick+0x1e0>)
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003192:	e08a      	b.n	80032aa <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	613b      	str	r3, [r7, #16]
 800319a:	69bb      	ldr	r3, [r7, #24]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	68d2      	ldr	r2, [r2, #12]
 80031a2:	609a      	str	r2, [r3, #8]
 80031a4:	69bb      	ldr	r3, [r7, #24]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	6892      	ldr	r2, [r2, #8]
 80031ac:	605a      	str	r2, [r3, #4]
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	685a      	ldr	r2, [r3, #4]
 80031b2:	69bb      	ldr	r3, [r7, #24]
 80031b4:	3304      	adds	r3, #4
 80031b6:	429a      	cmp	r2, r3
 80031b8:	d103      	bne.n	80031c2 <xTaskIncrementTick+0xda>
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	68da      	ldr	r2, [r3, #12]
 80031be:	693b      	ldr	r3, [r7, #16]
 80031c0:	605a      	str	r2, [r3, #4]
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2200      	movs	r2, #0
 80031c6:	615a      	str	r2, [r3, #20]
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	1e5a      	subs	r2, r3, #1
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d01e      	beq.n	8003218 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031de:	60fb      	str	r3, [r7, #12]
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	69db      	ldr	r3, [r3, #28]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	6a12      	ldr	r2, [r2, #32]
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	69ba      	ldr	r2, [r7, #24]
 80031f0:	69d2      	ldr	r2, [r2, #28]
 80031f2:	605a      	str	r2, [r3, #4]
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	685a      	ldr	r2, [r3, #4]
 80031f8:	69bb      	ldr	r3, [r7, #24]
 80031fa:	3318      	adds	r3, #24
 80031fc:	429a      	cmp	r2, r3
 80031fe:	d103      	bne.n	8003208 <xTaskIncrementTick+0x120>
 8003200:	69bb      	ldr	r3, [r7, #24]
 8003202:	6a1a      	ldr	r2, [r3, #32]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	605a      	str	r2, [r3, #4]
 8003208:	69bb      	ldr	r3, [r7, #24]
 800320a:	2200      	movs	r2, #0
 800320c:	629a      	str	r2, [r3, #40]	@ 0x28
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	1e5a      	subs	r2, r3, #1
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 fd44 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003220:	69bb      	ldr	r3, [r7, #24]
 8003222:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003224:	2201      	movs	r2, #1
 8003226:	409a      	lsls	r2, r3
 8003228:	4b28      	ldr	r3, [pc, #160]	@ (80032cc <xTaskIncrementTick+0x1e4>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4313      	orrs	r3, r2
 800322e:	4a27      	ldr	r2, [pc, #156]	@ (80032cc <xTaskIncrementTick+0x1e4>)
 8003230:	6013      	str	r3, [r2, #0]
 8003232:	69bb      	ldr	r3, [r7, #24]
 8003234:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003236:	4926      	ldr	r1, [pc, #152]	@ (80032d0 <xTaskIncrementTick+0x1e8>)
 8003238:	4613      	mov	r3, r2
 800323a:	009b      	lsls	r3, r3, #2
 800323c:	4413      	add	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3304      	adds	r3, #4
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	60bb      	str	r3, [r7, #8]
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	609a      	str	r2, [r3, #8]
 800324e:	68bb      	ldr	r3, [r7, #8]
 8003250:	689a      	ldr	r2, [r3, #8]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	60da      	str	r2, [r3, #12]
 8003256:	68bb      	ldr	r3, [r7, #8]
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	69ba      	ldr	r2, [r7, #24]
 800325c:	3204      	adds	r2, #4
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	69bb      	ldr	r3, [r7, #24]
 8003262:	1d1a      	adds	r2, r3, #4
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	69bb      	ldr	r3, [r7, #24]
 800326a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800326c:	4613      	mov	r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	4413      	add	r3, r2
 8003272:	009b      	lsls	r3, r3, #2
 8003274:	4a16      	ldr	r2, [pc, #88]	@ (80032d0 <xTaskIncrementTick+0x1e8>)
 8003276:	441a      	add	r2, r3
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	615a      	str	r2, [r3, #20]
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003280:	4913      	ldr	r1, [pc, #76]	@ (80032d0 <xTaskIncrementTick+0x1e8>)
 8003282:	4613      	mov	r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	4413      	add	r3, r2
 8003288:	009b      	lsls	r3, r3, #2
 800328a:	440b      	add	r3, r1
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	1c59      	adds	r1, r3, #1
 8003290:	480f      	ldr	r0, [pc, #60]	@ (80032d0 <xTaskIncrementTick+0x1e8>)
 8003292:	4613      	mov	r3, r2
 8003294:	009b      	lsls	r3, r3, #2
 8003296:	4413      	add	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4403      	add	r3, r0
 800329c:	6019      	str	r1, [r3, #0]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800329e:	e75f      	b.n	8003160 <xTaskIncrementTick+0x78>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 80032a0:	4b0c      	ldr	r3, [pc, #48]	@ (80032d4 <xTaskIncrementTick+0x1ec>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	3301      	adds	r3, #1
 80032a6:	4a0b      	ldr	r2, [pc, #44]	@ (80032d4 <xTaskIncrementTick+0x1ec>)
 80032a8:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3728      	adds	r7, #40	@ 0x28
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	200001d4 	.word	0x200001d4
 80032b8:	200001b0 	.word	0x200001b0
 80032bc:	20000164 	.word	0x20000164
 80032c0:	20000168 	.word	0x20000168
 80032c4:	200001c4 	.word	0x200001c4
 80032c8:	200001cc 	.word	0x200001cc
 80032cc:	200001b4 	.word	0x200001b4
 80032d0:	200000d8 	.word	0x200000d8
 80032d4:	200001bc 	.word	0x200001bc

080032d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80032de:	4b2d      	ldr	r3, [pc, #180]	@ (8003394 <vTaskSwitchContext+0xbc>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d003      	beq.n	80032ee <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 80032e6:	4b2c      	ldr	r3, [pc, #176]	@ (8003398 <vTaskSwitchContext+0xc0>)
 80032e8:	2201      	movs	r2, #1
 80032ea:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 80032ec:	e04e      	b.n	800338c <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 80032ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003398 <vTaskSwitchContext+0xc0>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032f4:	4b29      	ldr	r3, [pc, #164]	@ (800339c <vTaskSwitchContext+0xc4>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	fab3 f383 	clz	r3, r3
 8003300:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8003302:	7afb      	ldrb	r3, [r7, #11]
 8003304:	f1c3 031f 	rsb	r3, r3, #31
 8003308:	617b      	str	r3, [r7, #20]
 800330a:	4925      	ldr	r1, [pc, #148]	@ (80033a0 <vTaskSwitchContext+0xc8>)
 800330c:	697a      	ldr	r2, [r7, #20]
 800330e:	4613      	mov	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4413      	add	r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d10b      	bne.n	8003336 <vTaskSwitchContext+0x5e>
        __asm volatile
 800331e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003322:	f383 8811 	msr	BASEPRI, r3
 8003326:	f3bf 8f6f 	isb	sy
 800332a:	f3bf 8f4f 	dsb	sy
 800332e:	607b      	str	r3, [r7, #4]
    }
 8003330:	bf00      	nop
 8003332:	bf00      	nop
 8003334:	e7fd      	b.n	8003332 <vTaskSwitchContext+0x5a>
 8003336:	697a      	ldr	r2, [r7, #20]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	4a17      	ldr	r2, [pc, #92]	@ (80033a0 <vTaskSwitchContext+0xc8>)
 8003342:	4413      	add	r3, r2
 8003344:	613b      	str	r3, [r7, #16]
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	685a      	ldr	r2, [r3, #4]
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	605a      	str	r2, [r3, #4]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	685a      	ldr	r2, [r3, #4]
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	3308      	adds	r3, #8
 8003358:	429a      	cmp	r2, r3
 800335a:	d104      	bne.n	8003366 <vTaskSwitchContext+0x8e>
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	605a      	str	r2, [r3, #4]
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	4a0d      	ldr	r2, [pc, #52]	@ (80033a4 <vTaskSwitchContext+0xcc>)
 800336e:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8003370:	4b0c      	ldr	r3, [pc, #48]	@ (80033a4 <vTaskSwitchContext+0xcc>)
 8003372:	681a      	ldr	r2, [r3, #0]
 8003374:	4b0c      	ldr	r3, [pc, #48]	@ (80033a8 <vTaskSwitchContext+0xd0>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	429a      	cmp	r2, r3
 800337a:	d102      	bne.n	8003382 <vTaskSwitchContext+0xaa>
 800337c:	f003 fbf4 	bl	8006b68 <SEGGER_SYSVIEW_OnIdle>
}
 8003380:	e004      	b.n	800338c <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8003382:	4b08      	ldr	r3, [pc, #32]	@ (80033a4 <vTaskSwitchContext+0xcc>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f003 fc4c 	bl	8006c24 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 800338c:	bf00      	nop
 800338e:	3718      	adds	r7, #24
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200001d4 	.word	0x200001d4
 8003398:	200001c0 	.word	0x200001c0
 800339c:	200001b4 	.word	0x200001b4
 80033a0:	200000d8 	.word	0x200000d8
 80033a4:	200000d4 	.word	0x200000d4
 80033a8:	200001d0 	.word	0x200001d0

080033ac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b084      	sub	sp, #16
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d10b      	bne.n	80033d4 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 80033bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033c0:	f383 8811 	msr	BASEPRI, r3
 80033c4:	f3bf 8f6f 	isb	sy
 80033c8:	f3bf 8f4f 	dsb	sy
 80033cc:	60fb      	str	r3, [r7, #12]
    }
 80033ce:	bf00      	nop
 80033d0:	bf00      	nop
 80033d2:	e7fd      	b.n	80033d0 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80033d4:	4b07      	ldr	r3, [pc, #28]	@ (80033f4 <vTaskPlaceOnEventList+0x48>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3318      	adds	r3, #24
 80033da:	4619      	mov	r1, r3
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7fe ff52 	bl	8002286 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80033e2:	2101      	movs	r1, #1
 80033e4:	6838      	ldr	r0, [r7, #0]
 80033e6:	f000 fc7b 	bl	8003ce0 <prvAddCurrentTaskToDelayedList>
}
 80033ea:	bf00      	nop
 80033ec:	3710      	adds	r7, #16
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	200000d4 	.word	0x200000d4

080033f8 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 800340a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800340e:	f383 8811 	msr	BASEPRI, r3
 8003412:	f3bf 8f6f 	isb	sy
 8003416:	f3bf 8f4f 	dsb	sy
 800341a:	613b      	str	r3, [r7, #16]
    }
 800341c:	bf00      	nop
 800341e:	bf00      	nop
 8003420:	e7fd      	b.n	800341e <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	4b17      	ldr	r3, [pc, #92]	@ (8003488 <vTaskPlaceOnEventListRestricted+0x90>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	61da      	str	r2, [r3, #28]
 8003430:	4b15      	ldr	r3, [pc, #84]	@ (8003488 <vTaskPlaceOnEventListRestricted+0x90>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	697a      	ldr	r2, [r7, #20]
 8003436:	6892      	ldr	r2, [r2, #8]
 8003438:	621a      	str	r2, [r3, #32]
 800343a:	4b13      	ldr	r3, [pc, #76]	@ (8003488 <vTaskPlaceOnEventListRestricted+0x90>)
 800343c:	681a      	ldr	r2, [r3, #0]
 800343e:	697b      	ldr	r3, [r7, #20]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	3218      	adds	r2, #24
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	4b10      	ldr	r3, [pc, #64]	@ (8003488 <vTaskPlaceOnEventListRestricted+0x90>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f103 0218 	add.w	r2, r3, #24
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	609a      	str	r2, [r3, #8]
 8003452:	4b0d      	ldr	r3, [pc, #52]	@ (8003488 <vTaskPlaceOnEventListRestricted+0x90>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	68fa      	ldr	r2, [r7, #12]
 8003458:	629a      	str	r2, [r3, #40]	@ 0x28
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	1c5a      	adds	r2, r3, #1
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d002      	beq.n	8003470 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295
 800346e:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 8003470:	2024      	movs	r0, #36	@ 0x24
 8003472:	f002 fdcd 	bl	8006010 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	68b8      	ldr	r0, [r7, #8]
 800347a:	f000 fc31 	bl	8003ce0 <prvAddCurrentTaskToDelayedList>
    }
 800347e:	bf00      	nop
 8003480:	3718      	adds	r7, #24
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200000d4 	.word	0x200000d4

0800348c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	@ 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d10b      	bne.n	80034ba <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80034a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034a6:	f383 8811 	msr	BASEPRI, r3
 80034aa:	f3bf 8f6f 	isb	sy
 80034ae:	f3bf 8f4f 	dsb	sy
 80034b2:	60fb      	str	r3, [r7, #12]
    }
 80034b4:	bf00      	nop
 80034b6:	bf00      	nop
 80034b8:	e7fd      	b.n	80034b6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80034ba:	6a3b      	ldr	r3, [r7, #32]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034be:	61fb      	str	r3, [r7, #28]
 80034c0:	6a3b      	ldr	r3, [r7, #32]
 80034c2:	69db      	ldr	r3, [r3, #28]
 80034c4:	6a3a      	ldr	r2, [r7, #32]
 80034c6:	6a12      	ldr	r2, [r2, #32]
 80034c8:	609a      	str	r2, [r3, #8]
 80034ca:	6a3b      	ldr	r3, [r7, #32]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	6a3a      	ldr	r2, [r7, #32]
 80034d0:	69d2      	ldr	r2, [r2, #28]
 80034d2:	605a      	str	r2, [r3, #4]
 80034d4:	69fb      	ldr	r3, [r7, #28]
 80034d6:	685a      	ldr	r2, [r3, #4]
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	3318      	adds	r3, #24
 80034dc:	429a      	cmp	r2, r3
 80034de:	d103      	bne.n	80034e8 <xTaskRemoveFromEventList+0x5c>
 80034e0:	6a3b      	ldr	r3, [r7, #32]
 80034e2:	6a1a      	ldr	r2, [r3, #32]
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	6a3b      	ldr	r3, [r7, #32]
 80034ea:	2200      	movs	r2, #0
 80034ec:	629a      	str	r2, [r3, #40]	@ 0x28
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	1e5a      	subs	r2, r3, #1
 80034f4:	69fb      	ldr	r3, [r7, #28]
 80034f6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034f8:	4b4b      	ldr	r3, [pc, #300]	@ (8003628 <xTaskRemoveFromEventList+0x19c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d162      	bne.n	80035c6 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	695b      	ldr	r3, [r3, #20]
 8003504:	617b      	str	r3, [r7, #20]
 8003506:	6a3b      	ldr	r3, [r7, #32]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	6a3a      	ldr	r2, [r7, #32]
 800350c:	68d2      	ldr	r2, [r2, #12]
 800350e:	609a      	str	r2, [r3, #8]
 8003510:	6a3b      	ldr	r3, [r7, #32]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	6a3a      	ldr	r2, [r7, #32]
 8003516:	6892      	ldr	r2, [r2, #8]
 8003518:	605a      	str	r2, [r3, #4]
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	6a3b      	ldr	r3, [r7, #32]
 8003520:	3304      	adds	r3, #4
 8003522:	429a      	cmp	r2, r3
 8003524:	d103      	bne.n	800352e <xTaskRemoveFromEventList+0xa2>
 8003526:	6a3b      	ldr	r3, [r7, #32]
 8003528:	68da      	ldr	r2, [r3, #12]
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	605a      	str	r2, [r3, #4]
 800352e:	6a3b      	ldr	r3, [r7, #32]
 8003530:	2200      	movs	r2, #0
 8003532:	615a      	str	r2, [r3, #20]
 8003534:	697b      	ldr	r3, [r7, #20]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	1e5a      	subs	r2, r3, #1
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800353e:	6a3b      	ldr	r3, [r7, #32]
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fbb1 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003546:	6a3b      	ldr	r3, [r7, #32]
 8003548:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800354a:	2201      	movs	r2, #1
 800354c:	409a      	lsls	r2, r3
 800354e:	4b37      	ldr	r3, [pc, #220]	@ (800362c <xTaskRemoveFromEventList+0x1a0>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4313      	orrs	r3, r2
 8003554:	4a35      	ldr	r2, [pc, #212]	@ (800362c <xTaskRemoveFromEventList+0x1a0>)
 8003556:	6013      	str	r3, [r2, #0]
 8003558:	6a3b      	ldr	r3, [r7, #32]
 800355a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800355c:	4934      	ldr	r1, [pc, #208]	@ (8003630 <xTaskRemoveFromEventList+0x1a4>)
 800355e:	4613      	mov	r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	4413      	add	r3, r2
 8003564:	009b      	lsls	r3, r3, #2
 8003566:	440b      	add	r3, r1
 8003568:	3304      	adds	r3, #4
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	613b      	str	r3, [r7, #16]
 800356e:	6a3b      	ldr	r3, [r7, #32]
 8003570:	693a      	ldr	r2, [r7, #16]
 8003572:	609a      	str	r2, [r3, #8]
 8003574:	693b      	ldr	r3, [r7, #16]
 8003576:	689a      	ldr	r2, [r3, #8]
 8003578:	6a3b      	ldr	r3, [r7, #32]
 800357a:	60da      	str	r2, [r3, #12]
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	6a3a      	ldr	r2, [r7, #32]
 8003582:	3204      	adds	r2, #4
 8003584:	605a      	str	r2, [r3, #4]
 8003586:	6a3b      	ldr	r3, [r7, #32]
 8003588:	1d1a      	adds	r2, r3, #4
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	609a      	str	r2, [r3, #8]
 800358e:	6a3b      	ldr	r3, [r7, #32]
 8003590:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003592:	4613      	mov	r3, r2
 8003594:	009b      	lsls	r3, r3, #2
 8003596:	4413      	add	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4a25      	ldr	r2, [pc, #148]	@ (8003630 <xTaskRemoveFromEventList+0x1a4>)
 800359c:	441a      	add	r2, r3
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	615a      	str	r2, [r3, #20]
 80035a2:	6a3b      	ldr	r3, [r7, #32]
 80035a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035a6:	4922      	ldr	r1, [pc, #136]	@ (8003630 <xTaskRemoveFromEventList+0x1a4>)
 80035a8:	4613      	mov	r3, r2
 80035aa:	009b      	lsls	r3, r3, #2
 80035ac:	4413      	add	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	440b      	add	r3, r1
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	1c59      	adds	r1, r3, #1
 80035b6:	481e      	ldr	r0, [pc, #120]	@ (8003630 <xTaskRemoveFromEventList+0x1a4>)
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009b      	lsls	r3, r3, #2
 80035c0:	4403      	add	r3, r0
 80035c2:	6019      	str	r1, [r3, #0]
 80035c4:	e01b      	b.n	80035fe <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80035c6:	4b1b      	ldr	r3, [pc, #108]	@ (8003634 <xTaskRemoveFromEventList+0x1a8>)
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	61bb      	str	r3, [r7, #24]
 80035cc:	6a3b      	ldr	r3, [r7, #32]
 80035ce:	69ba      	ldr	r2, [r7, #24]
 80035d0:	61da      	str	r2, [r3, #28]
 80035d2:	69bb      	ldr	r3, [r7, #24]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	6a3b      	ldr	r3, [r7, #32]
 80035d8:	621a      	str	r2, [r3, #32]
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	6a3a      	ldr	r2, [r7, #32]
 80035e0:	3218      	adds	r2, #24
 80035e2:	605a      	str	r2, [r3, #4]
 80035e4:	6a3b      	ldr	r3, [r7, #32]
 80035e6:	f103 0218 	add.w	r2, r3, #24
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	609a      	str	r2, [r3, #8]
 80035ee:	6a3b      	ldr	r3, [r7, #32]
 80035f0:	4a10      	ldr	r2, [pc, #64]	@ (8003634 <xTaskRemoveFromEventList+0x1a8>)
 80035f2:	629a      	str	r2, [r3, #40]	@ 0x28
 80035f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003634 <xTaskRemoveFromEventList+0x1a8>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	3301      	adds	r3, #1
 80035fa:	4a0e      	ldr	r2, [pc, #56]	@ (8003634 <xTaskRemoveFromEventList+0x1a8>)
 80035fc:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80035fe:	6a3b      	ldr	r3, [r7, #32]
 8003600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003602:	4b0d      	ldr	r3, [pc, #52]	@ (8003638 <xTaskRemoveFromEventList+0x1ac>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003608:	429a      	cmp	r2, r3
 800360a:	d905      	bls.n	8003618 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 800360c:	2301      	movs	r3, #1
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003610:	4b0a      	ldr	r3, [pc, #40]	@ (800363c <xTaskRemoveFromEventList+0x1b0>)
 8003612:	2201      	movs	r2, #1
 8003614:	601a      	str	r2, [r3, #0]
 8003616:	e001      	b.n	800361c <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003618:	2300      	movs	r3, #0
 800361a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800361c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800361e:	4618      	mov	r0, r3
 8003620:	3728      	adds	r7, #40	@ 0x28
 8003622:	46bd      	mov	sp, r7
 8003624:	bd80      	pop	{r7, pc}
 8003626:	bf00      	nop
 8003628:	200001d4 	.word	0x200001d4
 800362c:	200001b4 	.word	0x200001b4
 8003630:	200000d8 	.word	0x200000d8
 8003634:	2000016c 	.word	0x2000016c
 8003638:	200000d4 	.word	0x200000d4
 800363c:	200001c0 	.word	0x200001c0

08003640 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003640:	b480      	push	{r7}
 8003642:	b083      	sub	sp, #12
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003648:	4b06      	ldr	r3, [pc, #24]	@ (8003664 <vTaskInternalSetTimeOutState+0x24>)
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8003650:	4b05      	ldr	r3, [pc, #20]	@ (8003668 <vTaskInternalSetTimeOutState+0x28>)
 8003652:	681a      	ldr	r2, [r3, #0]
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	605a      	str	r2, [r3, #4]
}
 8003658:	bf00      	nop
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	200001c4 	.word	0x200001c4
 8003668:	200001b0 	.word	0x200001b0

0800366c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b088      	sub	sp, #32
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10b      	bne.n	8003694 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	613b      	str	r3, [r7, #16]
    }
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	e7fd      	b.n	8003690 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d10b      	bne.n	80036b2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800369a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800369e:	f383 8811 	msr	BASEPRI, r3
 80036a2:	f3bf 8f6f 	isb	sy
 80036a6:	f3bf 8f4f 	dsb	sy
 80036aa:	60fb      	str	r3, [r7, #12]
    }
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	e7fd      	b.n	80036ae <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80036b2:	f000 ffd3 	bl	800465c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80036b6:	4b1f      	ldr	r3, [pc, #124]	@ (8003734 <xTaskCheckForTimeOut+0xc8>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	69ba      	ldr	r2, [r7, #24]
 80036c2:	1ad3      	subs	r3, r2, r3
 80036c4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ce:	d102      	bne.n	80036d6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80036d0:	2300      	movs	r3, #0
 80036d2:	61fb      	str	r3, [r7, #28]
 80036d4:	e026      	b.n	8003724 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681a      	ldr	r2, [r3, #0]
 80036da:	4b17      	ldr	r3, [pc, #92]	@ (8003738 <xTaskCheckForTimeOut+0xcc>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d00a      	beq.n	80036f8 <xTaskCheckForTimeOut+0x8c>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	69ba      	ldr	r2, [r7, #24]
 80036e8:	429a      	cmp	r2, r3
 80036ea:	d305      	bcc.n	80036f8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80036ec:	2301      	movs	r3, #1
 80036ee:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	e015      	b.n	8003724 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	697a      	ldr	r2, [r7, #20]
 80036fe:	429a      	cmp	r2, r3
 8003700:	d20b      	bcs.n	800371a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	1ad2      	subs	r2, r2, r3
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7ff ff96 	bl	8003640 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8003714:	2300      	movs	r3, #0
 8003716:	61fb      	str	r3, [r7, #28]
 8003718:	e004      	b.n	8003724 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2200      	movs	r2, #0
 800371e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003720:	2301      	movs	r3, #1
 8003722:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8003724:	f000 ffcc 	bl	80046c0 <vPortExitCritical>

    return xReturn;
 8003728:	69fb      	ldr	r3, [r7, #28]
}
 800372a:	4618      	mov	r0, r3
 800372c:	3720      	adds	r7, #32
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	200001b0 	.word	0x200001b0
 8003738:	200001c4 	.word	0x200001c4

0800373c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800373c:	b480      	push	{r7}
 800373e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8003740:	4b03      	ldr	r3, [pc, #12]	@ (8003750 <vTaskMissedYield+0x14>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]
}
 8003746:	bf00      	nop
 8003748:	46bd      	mov	sp, r7
 800374a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374e:	4770      	bx	lr
 8003750:	200001c0 	.word	0x200001c0

08003754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b082      	sub	sp, #8
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800375c:	f000 f84c 	bl	80037f8 <prvCheckTasksWaitingTermination>
        {
            /* If we are not using preemption we keep forcing a task switch to
             * see if any other task has become available.  If we are using
             * preemption we don't need to do this as any task becoming available
             * will automatically get the processor anyway. */
            taskYIELD();
 8003760:	4b04      	ldr	r3, [pc, #16]	@ (8003774 <prvIdleTask+0x20>)
 8003762:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003766:	601a      	str	r2, [r3, #0]
 8003768:	f3bf 8f4f 	dsb	sy
 800376c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8003770:	bf00      	nop
 8003772:	e7f3      	b.n	800375c <prvIdleTask+0x8>
 8003774:	e000ed04 	.word	0xe000ed04

08003778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	e00c      	b.n	800379e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	4613      	mov	r3, r2
 8003788:	009b      	lsls	r3, r3, #2
 800378a:	4413      	add	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4a12      	ldr	r2, [pc, #72]	@ (80037d8 <prvInitialiseTaskLists+0x60>)
 8003790:	4413      	add	r3, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f7fe fd26 	bl	80021e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	3301      	adds	r3, #1
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2b04      	cmp	r3, #4
 80037a2:	d9ef      	bls.n	8003784 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80037a4:	480d      	ldr	r0, [pc, #52]	@ (80037dc <prvInitialiseTaskLists+0x64>)
 80037a6:	f7fe fd1d 	bl	80021e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80037aa:	480d      	ldr	r0, [pc, #52]	@ (80037e0 <prvInitialiseTaskLists+0x68>)
 80037ac:	f7fe fd1a 	bl	80021e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80037b0:	480c      	ldr	r0, [pc, #48]	@ (80037e4 <prvInitialiseTaskLists+0x6c>)
 80037b2:	f7fe fd17 	bl	80021e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80037b6:	480c      	ldr	r0, [pc, #48]	@ (80037e8 <prvInitialiseTaskLists+0x70>)
 80037b8:	f7fe fd14 	bl	80021e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80037bc:	480b      	ldr	r0, [pc, #44]	@ (80037ec <prvInitialiseTaskLists+0x74>)
 80037be:	f7fe fd11 	bl	80021e4 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80037c2:	4b0b      	ldr	r3, [pc, #44]	@ (80037f0 <prvInitialiseTaskLists+0x78>)
 80037c4:	4a05      	ldr	r2, [pc, #20]	@ (80037dc <prvInitialiseTaskLists+0x64>)
 80037c6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80037c8:	4b0a      	ldr	r3, [pc, #40]	@ (80037f4 <prvInitialiseTaskLists+0x7c>)
 80037ca:	4a05      	ldr	r2, [pc, #20]	@ (80037e0 <prvInitialiseTaskLists+0x68>)
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	bf00      	nop
 80037d0:	3708      	adds	r7, #8
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	200000d8 	.word	0x200000d8
 80037dc:	2000013c 	.word	0x2000013c
 80037e0:	20000150 	.word	0x20000150
 80037e4:	2000016c 	.word	0x2000016c
 80037e8:	20000180 	.word	0x20000180
 80037ec:	20000198 	.word	0x20000198
 80037f0:	20000164 	.word	0x20000164
 80037f4:	20000168 	.word	0x20000168

080037f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b082      	sub	sp, #8
 80037fc:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80037fe:	e019      	b.n	8003834 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003800:	f000 ff2c 	bl	800465c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003804:	4b10      	ldr	r3, [pc, #64]	@ (8003848 <prvCheckTasksWaitingTermination+0x50>)
 8003806:	68db      	ldr	r3, [r3, #12]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3304      	adds	r3, #4
 8003810:	4618      	mov	r0, r3
 8003812:	f7fe fd71 	bl	80022f8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8003816:	4b0d      	ldr	r3, [pc, #52]	@ (800384c <prvCheckTasksWaitingTermination+0x54>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	3b01      	subs	r3, #1
 800381c:	4a0b      	ldr	r2, [pc, #44]	@ (800384c <prvCheckTasksWaitingTermination+0x54>)
 800381e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8003820:	4b0b      	ldr	r3, [pc, #44]	@ (8003850 <prvCheckTasksWaitingTermination+0x58>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	3b01      	subs	r3, #1
 8003826:	4a0a      	ldr	r2, [pc, #40]	@ (8003850 <prvCheckTasksWaitingTermination+0x58>)
 8003828:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800382a:	f000 ff49 	bl	80046c0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800382e:	6878      	ldr	r0, [r7, #4]
 8003830:	f000 f810 	bl	8003854 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003834:	4b06      	ldr	r3, [pc, #24]	@ (8003850 <prvCheckTasksWaitingTermination+0x58>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d1e1      	bne.n	8003800 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	3708      	adds	r7, #8
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	20000180 	.word	0x20000180
 800384c:	200001ac 	.word	0x200001ac
 8003850:	20000194 	.word	0x20000194

08003854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003860:	4618      	mov	r0, r3
 8003862:	f001 f8e9 	bl	8004a38 <vPortFree>
            vPortFree( pxTCB );
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f001 f8e6 	bl	8004a38 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800386c:	bf00      	nop
 800386e:	3708      	adds	r7, #8
 8003870:	46bd      	mov	sp, r7
 8003872:	bd80      	pop	{r7, pc}

08003874 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003874:	b480      	push	{r7}
 8003876:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003878:	4b0a      	ldr	r3, [pc, #40]	@ (80038a4 <prvResetNextTaskUnblockTime+0x30>)
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d104      	bne.n	800388c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003882:	4b09      	ldr	r3, [pc, #36]	@ (80038a8 <prvResetNextTaskUnblockTime+0x34>)
 8003884:	f04f 32ff 	mov.w	r2, #4294967295
 8003888:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800388a:	e005      	b.n	8003898 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800388c:	4b05      	ldr	r3, [pc, #20]	@ (80038a4 <prvResetNextTaskUnblockTime+0x30>)
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	68db      	ldr	r3, [r3, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a04      	ldr	r2, [pc, #16]	@ (80038a8 <prvResetNextTaskUnblockTime+0x34>)
 8003896:	6013      	str	r3, [r2, #0]
}
 8003898:	bf00      	nop
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	20000164 	.word	0x20000164
 80038a8:	200001cc 	.word	0x200001cc

080038ac <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 80038ac:	b480      	push	{r7}
 80038ae:	b083      	sub	sp, #12
 80038b0:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 80038b2:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <xTaskGetSchedulerState+0x34>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d102      	bne.n	80038c0 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 80038ba:	2301      	movs	r3, #1
 80038bc:	607b      	str	r3, [r7, #4]
 80038be:	e008      	b.n	80038d2 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80038c0:	4b08      	ldr	r3, [pc, #32]	@ (80038e4 <xTaskGetSchedulerState+0x38>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d102      	bne.n	80038ce <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 80038c8:	2302      	movs	r3, #2
 80038ca:	607b      	str	r3, [r7, #4]
 80038cc:	e001      	b.n	80038d2 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 80038ce:	2300      	movs	r3, #0
 80038d0:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 80038d2:	687b      	ldr	r3, [r7, #4]
    }
 80038d4:	4618      	mov	r0, r3
 80038d6:	370c      	adds	r7, #12
 80038d8:	46bd      	mov	sp, r7
 80038da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038de:	4770      	bx	lr
 80038e0:	200001b8 	.word	0x200001b8
 80038e4:	200001d4 	.word	0x200001d4

080038e8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWait,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b088      	sub	sp, #32
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	60f8      	str	r0, [r7, #12]
 80038f0:	60b9      	str	r1, [r7, #8]
 80038f2:	607a      	str	r2, [r7, #4]
 80038f4:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn;

        configASSERT( uxIndexToWait < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d00b      	beq.n	8003914 <xTaskGenericNotifyWait+0x2c>
        __asm volatile
 80038fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003900:	f383 8811 	msr	BASEPRI, r3
 8003904:	f3bf 8f6f 	isb	sy
 8003908:	f3bf 8f4f 	dsb	sy
 800390c:	613b      	str	r3, [r7, #16]
    }
 800390e:	bf00      	nop
 8003910:	bf00      	nop
 8003912:	e7fd      	b.n	8003910 <xTaskGenericNotifyWait+0x28>

        taskENTER_CRITICAL();
 8003914:	f000 fea2 	bl	800465c <vPortEnterCritical>
        {
            /* Only block if a notification is not already pending. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 8003918:	4b36      	ldr	r3, [pc, #216]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 800391a:	681a      	ldr	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	4413      	add	r3, r2
 8003920:	3354      	adds	r3, #84	@ 0x54
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	2b02      	cmp	r3, #2
 8003928:	d022      	beq.n	8003970 <xTaskGenericNotifyWait+0x88>
            {
                /* Clear bits in the task's notification value as bits may get
                 * set  by the notifying task or interrupt.  This can be used to
                 * clear the value to zero. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnEntry;
 800392a:	4b32      	ldr	r3, [pc, #200]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	3214      	adds	r2, #20
 8003932:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003936:	68ba      	ldr	r2, [r7, #8]
 8003938:	43d2      	mvns	r2, r2
 800393a:	4011      	ands	r1, r2
 800393c:	68fa      	ldr	r2, [r7, #12]
 800393e:	3214      	adds	r2, #20
 8003940:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

                /* Mark this task as waiting for a notification. */
                pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskWAITING_NOTIFICATION;
 8003944:	4b2b      	ldr	r3, [pc, #172]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	4413      	add	r3, r2
 800394c:	3354      	adds	r3, #84	@ 0x54
 800394e:	2201      	movs	r2, #1
 8003950:	701a      	strb	r2, [r3, #0]

                if( xTicksToWait > ( TickType_t ) 0 )
 8003952:	6a3b      	ldr	r3, [r7, #32]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d00b      	beq.n	8003970 <xTaskGenericNotifyWait+0x88>
                {
                    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003958:	2101      	movs	r1, #1
 800395a:	6a38      	ldr	r0, [r7, #32]
 800395c:	f000 f9c0 	bl	8003ce0 <prvAddCurrentTaskToDelayedList>

                    /* All ports are written to allow a yield in a critical
                     * section (some will yield immediately, others wait until the
                     * critical section exits) - but it is not something that
                     * application code should ever do. */
                    portYIELD_WITHIN_API();
 8003960:	4b25      	ldr	r3, [pc, #148]	@ (80039f8 <xTaskGenericNotifyWait+0x110>)
 8003962:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003970:	f000 fea6 	bl	80046c0 <vPortExitCritical>

        taskENTER_CRITICAL();
 8003974:	f000 fe72 	bl	800465c <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT(  );
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	6a3b      	ldr	r3, [r7, #32]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	4613      	mov	r3, r2
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	68b9      	ldr	r1, [r7, #8]
 8003984:	2040      	movs	r0, #64	@ 0x40
 8003986:	f002 fc6d 	bl	8006264 <SEGGER_SYSVIEW_RecordU32x4>

            if( pulNotificationValue != NULL )
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b00      	cmp	r3, #0
 800398e:	d007      	beq.n	80039a0 <xTaskGenericNotifyWait+0xb8>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ];
 8003990:	4b18      	ldr	r3, [pc, #96]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68fa      	ldr	r2, [r7, #12]
 8003996:	3214      	adds	r2, #20
 8003998:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWait ] != taskNOTIFICATION_RECEIVED )
 80039a0:	4b14      	ldr	r3, [pc, #80]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 80039a2:	681a      	ldr	r2, [r3, #0]
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	4413      	add	r3, r2
 80039a8:	3354      	adds	r3, #84	@ 0x54
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d002      	beq.n	80039b8 <xTaskGenericNotifyWait+0xd0>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80039b2:	2300      	movs	r3, #0
 80039b4:	617b      	str	r3, [r7, #20]
 80039b6:	e00e      	b.n	80039d6 <xTaskGenericNotifyWait+0xee>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWait ] &= ~ulBitsToClearOnExit;
 80039b8:	4b0e      	ldr	r3, [pc, #56]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	3214      	adds	r2, #20
 80039c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	43d2      	mvns	r2, r2
 80039c8:	4011      	ands	r1, r2
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	3214      	adds	r2, #20
 80039ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                xReturn = pdTRUE;
 80039d2:	2301      	movs	r3, #1
 80039d4:	617b      	str	r3, [r7, #20]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWait ] = taskNOT_WAITING_NOTIFICATION;
 80039d6:	4b07      	ldr	r3, [pc, #28]	@ (80039f4 <xTaskGenericNotifyWait+0x10c>)
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	4413      	add	r3, r2
 80039de:	3354      	adds	r3, #84	@ 0x54
 80039e0:	2200      	movs	r2, #0
 80039e2:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80039e4:	f000 fe6c 	bl	80046c0 <vPortExitCritical>

        return xReturn;
 80039e8:	697b      	ldr	r3, [r7, #20]
    }
 80039ea:	4618      	mov	r0, r3
 80039ec:	3718      	adds	r7, #24
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	200000d4 	.word	0x200000d4
 80039f8:	e000ed04 	.word	0xe000ed04

080039fc <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b094      	sub	sp, #80	@ 0x50
 8003a00:	af02      	add	r7, sp, #8
 8003a02:	60f8      	str	r0, [r7, #12]
 8003a04:	60b9      	str	r1, [r7, #8]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	647b      	str	r3, [r7, #68]	@ 0x44
        UBaseType_t uxSavedInterruptStatus;

        configASSERT( xTaskToNotify );
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d10b      	bne.n	8003a2c <xTaskGenericNotifyFromISR+0x30>
        __asm volatile
 8003a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a18:	f383 8811 	msr	BASEPRI, r3
 8003a1c:	f3bf 8f6f 	isb	sy
 8003a20:	f3bf 8f4f 	dsb	sy
 8003a24:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
 8003a26:	bf00      	nop
 8003a28:	bf00      	nop
 8003a2a:	e7fd      	b.n	8003a28 <xTaskGenericNotifyFromISR+0x2c>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00b      	beq.n	8003a4a <xTaskGenericNotifyFromISR+0x4e>
        __asm volatile
 8003a32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a36:	f383 8811 	msr	BASEPRI, r3
 8003a3a:	f3bf 8f6f 	isb	sy
 8003a3e:	f3bf 8f4f 	dsb	sy
 8003a42:	627b      	str	r3, [r7, #36]	@ 0x24
    }
 8003a44:	bf00      	nop
 8003a46:	bf00      	nop
 8003a48:	e7fd      	b.n	8003a46 <xTaskGenericNotifyFromISR+0x4a>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003a4a:	f000 fef7 	bl	800483c <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	643b      	str	r3, [r7, #64]	@ 0x40

    portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
    {
        uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

        __asm volatile
 8003a52:	f3ef 8211 	mrs	r2, BASEPRI
 8003a56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a5a:	f383 8811 	msr	BASEPRI, r3
 8003a5e:	f3bf 8f6f 	isb	sy
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	623a      	str	r2, [r7, #32]
 8003a68:	61fb      	str	r3, [r7, #28]
            : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );

        /* This return will not be reached but is necessary to prevent compiler
         * warnings. */
        return ulOriginalBASEPRI;
 8003a6a:	6a3b      	ldr	r3, [r7, #32]

        uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003a6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        {
            if( pulPreviousNotificationValue != NULL )
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d006      	beq.n	8003a82 <xTaskGenericNotifyFromISR+0x86>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8003a74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003a76:	68ba      	ldr	r2, [r7, #8]
 8003a78:	3214      	adds	r2, #20
 8003a7a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003a7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a80:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8003a82:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a84:	68bb      	ldr	r3, [r7, #8]
 8003a86:	4413      	add	r3, r2
 8003a88:	3354      	adds	r3, #84	@ 0x54
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8003a90:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	4413      	add	r3, r2
 8003a96:	3354      	adds	r3, #84	@ 0x54
 8003a98:	2202      	movs	r2, #2
 8003a9a:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8003a9c:	78fb      	ldrb	r3, [r7, #3]
 8003a9e:	2b04      	cmp	r3, #4
 8003aa0:	d83b      	bhi.n	8003b1a <xTaskGenericNotifyFromISR+0x11e>
 8003aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8003aa8 <xTaskGenericNotifyFromISR+0xac>)
 8003aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003aa8:	08003b3b 	.word	0x08003b3b
 8003aac:	08003abd 	.word	0x08003abd
 8003ab0:	08003ad9 	.word	0x08003ad9
 8003ab4:	08003af1 	.word	0x08003af1
 8003ab8:	08003aff 	.word	0x08003aff
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8003abc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	3214      	adds	r2, #20
 8003ac2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	ea42 0103 	orr.w	r1, r2, r3
 8003acc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ace:	68ba      	ldr	r2, [r7, #8]
 8003ad0:	3214      	adds	r2, #20
 8003ad2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003ad6:	e033      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ada:	68ba      	ldr	r2, [r7, #8]
 8003adc:	3214      	adds	r2, #20
 8003ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ae2:	1c59      	adds	r1, r3, #1
 8003ae4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ae6:	68ba      	ldr	r2, [r7, #8]
 8003ae8:	3214      	adds	r2, #20
 8003aea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003aee:	e027      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003af0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	3214      	adds	r2, #20
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    break;
 8003afc:	e020      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8003afe:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d006      	beq.n	8003b14 <xTaskGenericNotifyFromISR+0x118>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8003b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	3214      	adds	r2, #20
 8003b0c:	6879      	ldr	r1, [r7, #4]
 8003b0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8003b12:	e015      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>
                        xReturn = pdFAIL;
 8003b14:	2300      	movs	r3, #0
 8003b16:	647b      	str	r3, [r7, #68]	@ 0x44
                    break;
 8003b18:	e012      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8003b1a:	4b6a      	ldr	r3, [pc, #424]	@ (8003cc4 <xTaskGenericNotifyFromISR+0x2c8>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d00d      	beq.n	8003b3e <xTaskGenericNotifyFromISR+0x142>
        __asm volatile
 8003b22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b26:	f383 8811 	msr	BASEPRI, r3
 8003b2a:	f3bf 8f6f 	isb	sy
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	61bb      	str	r3, [r7, #24]
    }
 8003b34:	bf00      	nop
 8003b36:	bf00      	nop
 8003b38:	e7fd      	b.n	8003b36 <xTaskGenericNotifyFromISR+0x13a>
                    break;
 8003b3a:	bf00      	nop
 8003b3c:	e000      	b.n	8003b40 <xTaskGenericNotifyFromISR+0x144>
                    break;
 8003b3e:	bf00      	nop
            }

            traceTASK_NOTIFY_FROM_ISR(  );
 8003b40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b42:	4618      	mov	r0, r3
 8003b44:	f003 f8f2 	bl	8006d2c <SEGGER_SYSVIEW_ShrinkId>
 8003b48:	78f9      	ldrb	r1, [r7, #3]
 8003b4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003b4c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8003b4e:	9201      	str	r2, [sp, #4]
 8003b50:	9300      	str	r3, [sp, #0]
 8003b52:	460b      	mov	r3, r1
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	4601      	mov	r1, r0
 8003b58:	203f      	movs	r0, #63	@ 0x3f
 8003b5a:	f002 fc15 	bl	8006388 <SEGGER_SYSVIEW_RecordU32x5>

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8003b5e:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	f040 80a3 	bne.w	8003cae <xTaskGenericNotifyFromISR+0x2b2>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8003b68:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d00b      	beq.n	8003b88 <xTaskGenericNotifyFromISR+0x18c>
        __asm volatile
 8003b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b74:	f383 8811 	msr	BASEPRI, r3
 8003b78:	f3bf 8f6f 	isb	sy
 8003b7c:	f3bf 8f4f 	dsb	sy
 8003b80:	617b      	str	r3, [r7, #20]
    }
 8003b82:	bf00      	nop
 8003b84:	bf00      	nop
 8003b86:	e7fd      	b.n	8003b84 <xTaskGenericNotifyFromISR+0x188>

                if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b88:	4b4f      	ldr	r3, [pc, #316]	@ (8003cc8 <xTaskGenericNotifyFromISR+0x2cc>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d162      	bne.n	8003c56 <xTaskGenericNotifyFromISR+0x25a>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003b90:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b98:	689b      	ldr	r3, [r3, #8]
 8003b9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b9c:	68d2      	ldr	r2, [r2, #12]
 8003b9e:	609a      	str	r2, [r3, #8]
 8003ba0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003ba6:	6892      	ldr	r2, [r2, #8]
 8003ba8:	605a      	str	r2, [r3, #4]
 8003baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bac:	685a      	ldr	r2, [r3, #4]
 8003bae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	429a      	cmp	r2, r3
 8003bb4:	d103      	bne.n	8003bbe <xTaskGenericNotifyFromISR+0x1c2>
 8003bb6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bb8:	68da      	ldr	r2, [r3, #12]
 8003bba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bc0:	2200      	movs	r2, #0
 8003bc2:	615a      	str	r2, [r3, #20]
 8003bc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	1e5a      	subs	r2, r3, #1
 8003bca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003bcc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f003 f869 	bl	8006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>
 8003bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bda:	2201      	movs	r2, #1
 8003bdc:	409a      	lsls	r2, r3
 8003bde:	4b3b      	ldr	r3, [pc, #236]	@ (8003ccc <xTaskGenericNotifyFromISR+0x2d0>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	4a39      	ldr	r2, [pc, #228]	@ (8003ccc <xTaskGenericNotifyFromISR+0x2d0>)
 8003be6:	6013      	str	r3, [r2, #0]
 8003be8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003bea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bec:	4938      	ldr	r1, [pc, #224]	@ (8003cd0 <xTaskGenericNotifyFromISR+0x2d4>)
 8003bee:	4613      	mov	r3, r2
 8003bf0:	009b      	lsls	r3, r3, #2
 8003bf2:	4413      	add	r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	3304      	adds	r3, #4
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003bfe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c02:	609a      	str	r2, [r3, #8]
 8003c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c0a:	60da      	str	r2, [r3, #12]
 8003c0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c12:	3204      	adds	r2, #4
 8003c14:	605a      	str	r2, [r3, #4]
 8003c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c18:	1d1a      	adds	r2, r3, #4
 8003c1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003c1c:	609a      	str	r2, [r3, #8]
 8003c1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c22:	4613      	mov	r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	4413      	add	r3, r2
 8003c28:	009b      	lsls	r3, r3, #2
 8003c2a:	4a29      	ldr	r2, [pc, #164]	@ (8003cd0 <xTaskGenericNotifyFromISR+0x2d4>)
 8003c2c:	441a      	add	r2, r3
 8003c2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c30:	615a      	str	r2, [r3, #20]
 8003c32:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c36:	4926      	ldr	r1, [pc, #152]	@ (8003cd0 <xTaskGenericNotifyFromISR+0x2d4>)
 8003c38:	4613      	mov	r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	1c59      	adds	r1, r3, #1
 8003c46:	4822      	ldr	r0, [pc, #136]	@ (8003cd0 <xTaskGenericNotifyFromISR+0x2d4>)
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	4413      	add	r3, r2
 8003c4e:	009b      	lsls	r3, r3, #2
 8003c50:	4403      	add	r3, r0
 8003c52:	6019      	str	r1, [r3, #0]
 8003c54:	e01b      	b.n	8003c8e <xTaskGenericNotifyFromISR+0x292>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8003c56:	4b1f      	ldr	r3, [pc, #124]	@ (8003cd4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c5e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003c60:	61da      	str	r2, [r3, #28]
 8003c62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c64:	689a      	ldr	r2, [r3, #8]
 8003c66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c68:	621a      	str	r2, [r3, #32]
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003c70:	3218      	adds	r2, #24
 8003c72:	605a      	str	r2, [r3, #4]
 8003c74:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c76:	f103 0218 	add.w	r2, r3, #24
 8003c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c80:	4a14      	ldr	r2, [pc, #80]	@ (8003cd4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003c82:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c84:	4b13      	ldr	r3, [pc, #76]	@ (8003cd4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	4a12      	ldr	r2, [pc, #72]	@ (8003cd4 <xTaskGenericNotifyFromISR+0x2d8>)
 8003c8c:	6013      	str	r3, [r2, #0]
                }

                if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003c90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003c92:	4b11      	ldr	r3, [pc, #68]	@ (8003cd8 <xTaskGenericNotifyFromISR+0x2dc>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c98:	429a      	cmp	r2, r3
 8003c9a:	d908      	bls.n	8003cae <xTaskGenericNotifyFromISR+0x2b2>
                {
                    /* The notified task has a priority above the currently
                     * executing task so a yield is required. */
                    if( pxHigherPriorityTaskWoken != NULL )
 8003c9c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d002      	beq.n	8003ca8 <xTaskGenericNotifyFromISR+0x2ac>
                    {
                        *pxHigherPriorityTaskWoken = pdTRUE;
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003ca4:	2201      	movs	r2, #1
 8003ca6:	601a      	str	r2, [r3, #0]
                    }

                    /* Mark that a yield is pending in case the user is not
                     * using the "xHigherPriorityTaskWoken" parameter to an ISR
                     * safe FreeRTOS function. */
                    xYieldPending = pdTRUE;
 8003ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8003cdc <xTaskGenericNotifyFromISR+0x2e0>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003cb0:	613b      	str	r3, [r7, #16]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003cb2:	693b      	ldr	r3, [r7, #16]
 8003cb4:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003cb8:	bf00      	nop
                }
            }
        }
        portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

        return xReturn;
 8003cba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3748      	adds	r7, #72	@ 0x48
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	200001b0 	.word	0x200001b0
 8003cc8:	200001d4 	.word	0x200001d4
 8003ccc:	200001b4 	.word	0x200001b4
 8003cd0:	200000d8 	.word	0x200000d8
 8003cd4:	2000016c 	.word	0x2000016c
 8003cd8:	200000d4 	.word	0x200000d4
 8003cdc:	200001c0 	.word	0x200001c0

08003ce0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003cea:	4b36      	ldr	r3, [pc, #216]	@ (8003dc4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cf0:	4b35      	ldr	r3, [pc, #212]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	3304      	adds	r3, #4
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7fe fafe 	bl	80022f8 <uxListRemove>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10b      	bne.n	8003d1a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003d02:	4b31      	ldr	r3, [pc, #196]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d08:	2201      	movs	r2, #1
 8003d0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0e:	43da      	mvns	r2, r3
 8003d10:	4b2e      	ldr	r3, [pc, #184]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	4013      	ands	r3, r2
 8003d16:	4a2d      	ldr	r2, [pc, #180]	@ (8003dcc <prvAddCurrentTaskToDelayedList+0xec>)
 8003d18:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d124      	bne.n	8003d6c <prvAddCurrentTaskToDelayedList+0x8c>
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d021      	beq.n	8003d6c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d28:	4b29      	ldr	r3, [pc, #164]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	613b      	str	r3, [r7, #16]
 8003d2e:	4b26      	ldr	r3, [pc, #152]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	609a      	str	r2, [r3, #8]
 8003d36:	4b24      	ldr	r3, [pc, #144]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	693a      	ldr	r2, [r7, #16]
 8003d3c:	6892      	ldr	r2, [r2, #8]
 8003d3e:	60da      	str	r2, [r3, #12]
 8003d40:	4b21      	ldr	r3, [pc, #132]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	693b      	ldr	r3, [r7, #16]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	3204      	adds	r2, #4
 8003d4a:	605a      	str	r2, [r3, #4]
 8003d4c:	4b1e      	ldr	r3, [pc, #120]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	1d1a      	adds	r2, r3, #4
 8003d52:	693b      	ldr	r3, [r7, #16]
 8003d54:	609a      	str	r2, [r3, #8]
 8003d56:	4b1c      	ldr	r3, [pc, #112]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a1d      	ldr	r2, [pc, #116]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d5c:	615a      	str	r2, [r3, #20]
 8003d5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	3301      	adds	r3, #1
 8003d64:	4a1a      	ldr	r2, [pc, #104]	@ (8003dd0 <prvAddCurrentTaskToDelayedList+0xf0>)
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003d6a:	e026      	b.n	8003dba <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	4413      	add	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003d74:	4b14      	ldr	r3, [pc, #80]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003d7c:	68fa      	ldr	r2, [r7, #12]
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	429a      	cmp	r2, r3
 8003d82:	d209      	bcs.n	8003d98 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d84:	4b13      	ldr	r3, [pc, #76]	@ (8003dd4 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003d86:	681a      	ldr	r2, [r3, #0]
 8003d88:	4b0f      	ldr	r3, [pc, #60]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	3304      	adds	r3, #4
 8003d8e:	4619      	mov	r1, r3
 8003d90:	4610      	mov	r0, r2
 8003d92:	f7fe fa78 	bl	8002286 <vListInsert>
}
 8003d96:	e010      	b.n	8003dba <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003d98:	4b0f      	ldr	r3, [pc, #60]	@ (8003dd8 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8003dc8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	3304      	adds	r3, #4
 8003da2:	4619      	mov	r1, r3
 8003da4:	4610      	mov	r0, r2
 8003da6:	f7fe fa6e 	bl	8002286 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003daa:	4b0c      	ldr	r3, [pc, #48]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	68fa      	ldr	r2, [r7, #12]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d202      	bcs.n	8003dba <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003db4:	4a09      	ldr	r2, [pc, #36]	@ (8003ddc <prvAddCurrentTaskToDelayedList+0xfc>)
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	6013      	str	r3, [r2, #0]
}
 8003dba:	bf00      	nop
 8003dbc:	3718      	adds	r7, #24
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	200001b0 	.word	0x200001b0
 8003dc8:	200000d4 	.word	0x200000d4
 8003dcc:	200001b4 	.word	0x200001b4
 8003dd0:	20000198 	.word	0x20000198
 8003dd4:	20000168 	.word	0x20000168
 8003dd8:	20000164 	.word	0x20000164
 8003ddc:	200001cc 	.word	0x200001cc

08003de0 <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003de6:	2300      	movs	r3, #0
 8003de8:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003dea:	f000 fa4f 	bl	800428c <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <xTimerCreateTimerTask+0x58>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d00b      	beq.n	8003e0e <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003df6:	4b11      	ldr	r3, [pc, #68]	@ (8003e3c <xTimerCreateTimerTask+0x5c>)
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2300      	movs	r3, #0
 8003e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003e04:	490e      	ldr	r1, [pc, #56]	@ (8003e40 <xTimerCreateTimerTask+0x60>)
 8003e06:	480f      	ldr	r0, [pc, #60]	@ (8003e44 <xTimerCreateTimerTask+0x64>)
 8003e08:	f7fe fdbe 	bl	8002988 <xTaskCreate>
 8003e0c:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d10b      	bne.n	8003e2c <xTimerCreateTimerTask+0x4c>
        __asm volatile
 8003e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e18:	f383 8811 	msr	BASEPRI, r3
 8003e1c:	f3bf 8f6f 	isb	sy
 8003e20:	f3bf 8f4f 	dsb	sy
 8003e24:	603b      	str	r3, [r7, #0]
    }
 8003e26:	bf00      	nop
 8003e28:	bf00      	nop
 8003e2a:	e7fd      	b.n	8003e28 <xTimerCreateTimerTask+0x48>
        return xReturn;
 8003e2c:	687b      	ldr	r3, [r7, #4]
    }
 8003e2e:	4618      	mov	r0, r3
 8003e30:	3708      	adds	r7, #8
 8003e32:	46bd      	mov	sp, r7
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	20000208 	.word	0x20000208
 8003e3c:	2000020c 	.word	0x2000020c
 8003e40:	08007148 	.word	0x08007148
 8003e44:	08003eed 	.word	0x08003eed

08003e48 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	60f8      	str	r0, [r7, #12]
 8003e50:	60b9      	str	r1, [r7, #8]
 8003e52:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e54:	e008      	b.n	8003e68 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	68ba      	ldr	r2, [r7, #8]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a1b      	ldr	r3, [r3, #32]
 8003e64:	68f8      	ldr	r0, [r7, #12]
 8003e66:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	699a      	ldr	r2, [r3, #24]
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	18d1      	adds	r1, r2, r3
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	687a      	ldr	r2, [r7, #4]
 8003e74:	68f8      	ldr	r0, [r7, #12]
 8003e76:	f000 f8df 	bl	8004038 <prvInsertTimerInActiveList>
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d1ea      	bne.n	8003e56 <prvReloadTimer+0xe>
        }
    }
 8003e80:	bf00      	nop
 8003e82:	bf00      	nop
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b084      	sub	sp, #16
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
 8003e94:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e96:	4b14      	ldr	r3, [pc, #80]	@ (8003ee8 <prvProcessExpiredTimer+0x5c>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	68db      	ldr	r3, [r3, #12]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	3304      	adds	r3, #4
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fe fa27 	bl	80022f8 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eb0:	f003 0304 	and.w	r3, r3, #4
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d005      	beq.n	8003ec4 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	6879      	ldr	r1, [r7, #4]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f7ff ffc3 	bl	8003e48 <prvReloadTimer>
 8003ec2:	e008      	b.n	8003ed6 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003eca:	f023 0301 	bic.w	r3, r3, #1
 8003ece:	b2da      	uxtb	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a1b      	ldr	r3, [r3, #32]
 8003eda:	68f8      	ldr	r0, [r7, #12]
 8003edc:	4798      	blx	r3
    }
 8003ede:	bf00      	nop
 8003ee0:	3710      	adds	r7, #16
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	bd80      	pop	{r7, pc}
 8003ee6:	bf00      	nop
 8003ee8:	20000200 	.word	0x20000200

08003eec <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003ef4:	f107 0308 	add.w	r3, r7, #8
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f859 	bl	8003fb0 <prvGetNextExpireTime>
 8003efe:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	4619      	mov	r1, r3
 8003f04:	68f8      	ldr	r0, [r7, #12]
 8003f06:	f000 f805 	bl	8003f14 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003f0a:	f000 f8d7 	bl	80040bc <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003f0e:	bf00      	nop
 8003f10:	e7f0      	b.n	8003ef4 <prvTimerTask+0x8>
	...

08003f14 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 8003f1e:	f7fe ffc1 	bl	8002ea4 <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003f22:	f107 0308 	add.w	r3, r7, #8
 8003f26:	4618      	mov	r0, r3
 8003f28:	f000 f866 	bl	8003ff8 <prvSampleTimeNow>
 8003f2c:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d130      	bne.n	8003f96 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10a      	bne.n	8003f50 <prvProcessTimerOrBlockTask+0x3c>
 8003f3a:	687a      	ldr	r2, [r7, #4]
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d806      	bhi.n	8003f50 <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 8003f42:	f7fe ffbd 	bl	8002ec0 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003f46:	68f9      	ldr	r1, [r7, #12]
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff9f 	bl	8003e8c <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 8003f4e:	e024      	b.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d008      	beq.n	8003f68 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003f56:	4b13      	ldr	r3, [pc, #76]	@ (8003fa4 <prvProcessTimerOrBlockTask+0x90>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d101      	bne.n	8003f64 <prvProcessTimerOrBlockTask+0x50>
 8003f60:	2301      	movs	r3, #1
 8003f62:	e000      	b.n	8003f66 <prvProcessTimerOrBlockTask+0x52>
 8003f64:	2300      	movs	r3, #0
 8003f66:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003f68:	4b0f      	ldr	r3, [pc, #60]	@ (8003fa8 <prvProcessTimerOrBlockTask+0x94>)
 8003f6a:	6818      	ldr	r0, [r3, #0]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	1ad3      	subs	r3, r2, r3
 8003f72:	683a      	ldr	r2, [r7, #0]
 8003f74:	4619      	mov	r1, r3
 8003f76:	f7fe fcd3 	bl	8002920 <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003f7a:	f7fe ffa1 	bl	8002ec0 <xTaskResumeAll>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d10a      	bne.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003f84:	4b09      	ldr	r3, [pc, #36]	@ (8003fac <prvProcessTimerOrBlockTask+0x98>)
 8003f86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f8a:	601a      	str	r2, [r3, #0]
 8003f8c:	f3bf 8f4f 	dsb	sy
 8003f90:	f3bf 8f6f 	isb	sy
    }
 8003f94:	e001      	b.n	8003f9a <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003f96:	f7fe ff93 	bl	8002ec0 <xTaskResumeAll>
    }
 8003f9a:	bf00      	nop
 8003f9c:	3710      	adds	r7, #16
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}
 8003fa2:	bf00      	nop
 8003fa4:	20000204 	.word	0x20000204
 8003fa8:	20000208 	.word	0x20000208
 8003fac:	e000ed04 	.word	0xe000ed04

08003fb0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003ff4 <prvGetNextExpireTime+0x44>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <prvGetNextExpireTime+0x16>
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	e000      	b.n	8003fc8 <prvGetNextExpireTime+0x18>
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d105      	bne.n	8003fe0 <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003fd4:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <prvGetNextExpireTime+0x44>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68db      	ldr	r3, [r3, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	e001      	b.n	8003fe4 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 8003fe0:	2300      	movs	r3, #0
 8003fe2:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
    }
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3714      	adds	r7, #20
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr
 8003ff2:	bf00      	nop
 8003ff4:	20000200 	.word	0x20000200

08003ff8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 8004000:	f7ff f850 	bl	80030a4 <xTaskGetTickCount>
 8004004:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8004006:	4b0b      	ldr	r3, [pc, #44]	@ (8004034 <prvSampleTimeNow+0x3c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68fa      	ldr	r2, [r7, #12]
 800400c:	429a      	cmp	r2, r3
 800400e:	d205      	bcs.n	800401c <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 8004010:	f000 f916 	bl	8004240 <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2201      	movs	r2, #1
 8004018:	601a      	str	r2, [r3, #0]
 800401a:	e002      	b.n	8004022 <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 8004022:	4a04      	ldr	r2, [pc, #16]	@ (8004034 <prvSampleTimeNow+0x3c>)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 8004028:	68fb      	ldr	r3, [r7, #12]
    }
 800402a:	4618      	mov	r0, r3
 800402c:	3710      	adds	r7, #16
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000210 	.word	0x20000210

08004038 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	60b9      	str	r1, [r7, #8]
 8004042:	607a      	str	r2, [r7, #4]
 8004044:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 8004046:	2300      	movs	r3, #0
 8004048:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	68ba      	ldr	r2, [r7, #8]
 800404e:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	429a      	cmp	r2, r3
 800405c:	d812      	bhi.n	8004084 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800405e:	687a      	ldr	r2, [r7, #4]
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	1ad2      	subs	r2, r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	699b      	ldr	r3, [r3, #24]
 8004068:	429a      	cmp	r2, r3
 800406a:	d302      	bcc.n	8004072 <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	617b      	str	r3, [r7, #20]
 8004070:	e01b      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004072:	4b10      	ldr	r3, [pc, #64]	@ (80040b4 <prvInsertTimerInActiveList+0x7c>)
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	3304      	adds	r3, #4
 800407a:	4619      	mov	r1, r3
 800407c:	4610      	mov	r0, r2
 800407e:	f7fe f902 	bl	8002286 <vListInsert>
 8004082:	e012      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	429a      	cmp	r2, r3
 800408a:	d206      	bcs.n	800409a <prvInsertTimerInActiveList+0x62>
 800408c:	68ba      	ldr	r2, [r7, #8]
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	429a      	cmp	r2, r3
 8004092:	d302      	bcc.n	800409a <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8004094:	2301      	movs	r3, #1
 8004096:	617b      	str	r3, [r7, #20]
 8004098:	e007      	b.n	80040aa <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800409a:	4b07      	ldr	r3, [pc, #28]	@ (80040b8 <prvInsertTimerInActiveList+0x80>)
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	3304      	adds	r3, #4
 80040a2:	4619      	mov	r1, r3
 80040a4:	4610      	mov	r0, r2
 80040a6:	f7fe f8ee 	bl	8002286 <vListInsert>
            }
        }

        return xProcessTimerNow;
 80040aa:	697b      	ldr	r3, [r7, #20]
    }
 80040ac:	4618      	mov	r0, r3
 80040ae:	3718      	adds	r7, #24
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000204 	.word	0x20000204
 80040b8:	20000200 	.word	0x20000200

080040bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80040c2:	e0a9      	b.n	8004218 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f2c0 80a6 	blt.w	8004218 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80040d0:	69fb      	ldr	r3, [r7, #28]
 80040d2:	695b      	ldr	r3, [r3, #20]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d004      	beq.n	80040e2 <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80040d8:	69fb      	ldr	r3, [r7, #28]
 80040da:	3304      	adds	r3, #4
 80040dc:	4618      	mov	r0, r3
 80040de:	f7fe f90b 	bl	80022f8 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80040e2:	1d3b      	adds	r3, r7, #4
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff87 	bl	8003ff8 <prvSampleTimeNow>
 80040ea:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	3b01      	subs	r3, #1
 80040f0:	2b08      	cmp	r3, #8
 80040f2:	f200 808e 	bhi.w	8004212 <prvProcessReceivedCommands+0x156>
 80040f6:	a201      	add	r2, pc, #4	@ (adr r2, 80040fc <prvProcessReceivedCommands+0x40>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004121 	.word	0x08004121
 8004100:	08004121 	.word	0x08004121
 8004104:	08004189 	.word	0x08004189
 8004108:	0800419d 	.word	0x0800419d
 800410c:	080041e9 	.word	0x080041e9
 8004110:	08004121 	.word	0x08004121
 8004114:	08004121 	.word	0x08004121
 8004118:	08004189 	.word	0x08004189
 800411c:	0800419d 	.word	0x0800419d
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004126:	f043 0301 	orr.w	r3, r3, #1
 800412a:	b2da      	uxtb	r2, r3
 800412c:	69fb      	ldr	r3, [r7, #28]
 800412e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004132:	68fa      	ldr	r2, [r7, #12]
 8004134:	69fb      	ldr	r3, [r7, #28]
 8004136:	699b      	ldr	r3, [r3, #24]
 8004138:	18d1      	adds	r1, r2, r3
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	69ba      	ldr	r2, [r7, #24]
 800413e:	69f8      	ldr	r0, [r7, #28]
 8004140:	f7ff ff7a 	bl	8004038 <prvInsertTimerInActiveList>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d065      	beq.n	8004216 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800414a:	69fb      	ldr	r3, [r7, #28]
 800414c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004150:	f003 0304 	and.w	r3, r3, #4
 8004154:	2b00      	cmp	r3, #0
 8004156:	d009      	beq.n	800416c <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	69fb      	ldr	r3, [r7, #28]
 800415c:	699b      	ldr	r3, [r3, #24]
 800415e:	4413      	add	r3, r2
 8004160:	69ba      	ldr	r2, [r7, #24]
 8004162:	4619      	mov	r1, r3
 8004164:	69f8      	ldr	r0, [r7, #28]
 8004166:	f7ff fe6f 	bl	8003e48 <prvReloadTimer>
 800416a:	e008      	b.n	800417e <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 800416c:	69fb      	ldr	r3, [r7, #28]
 800416e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004172:	f023 0301 	bic.w	r3, r3, #1
 8004176:	b2da      	uxtb	r2, r3
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	69f8      	ldr	r0, [r7, #28]
 8004184:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8004186:	e046      	b.n	8004216 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8004188:	69fb      	ldr	r3, [r7, #28]
 800418a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800418e:	f023 0301 	bic.w	r3, r3, #1
 8004192:	b2da      	uxtb	r2, r3
 8004194:	69fb      	ldr	r3, [r7, #28]
 8004196:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 800419a:	e03d      	b.n	8004218 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800419c:	69fb      	ldr	r3, [r7, #28]
 800419e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041a2:	f043 0301 	orr.w	r3, r3, #1
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80041ae:	68fa      	ldr	r2, [r7, #12]
 80041b0:	69fb      	ldr	r3, [r7, #28]
 80041b2:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10b      	bne.n	80041d4 <prvProcessReceivedCommands+0x118>
        __asm volatile
 80041bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80041c0:	f383 8811 	msr	BASEPRI, r3
 80041c4:	f3bf 8f6f 	isb	sy
 80041c8:	f3bf 8f4f 	dsb	sy
 80041cc:	617b      	str	r3, [r7, #20]
    }
 80041ce:	bf00      	nop
 80041d0:	bf00      	nop
 80041d2:	e7fd      	b.n	80041d0 <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	699a      	ldr	r2, [r3, #24]
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	18d1      	adds	r1, r2, r3
 80041dc:	69bb      	ldr	r3, [r7, #24]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	69f8      	ldr	r0, [r7, #28]
 80041e2:	f7ff ff29 	bl	8004038 <prvInsertTimerInActiveList>
                        break;
 80041e6:	e017      	b.n	8004218 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d103      	bne.n	80041fe <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 80041f6:	69f8      	ldr	r0, [r7, #28]
 80041f8:	f000 fc1e 	bl	8004a38 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 80041fc:	e00c      	b.n	8004218 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004204:	f023 0301 	bic.w	r3, r3, #1
 8004208:	b2da      	uxtb	r2, r3
 800420a:	69fb      	ldr	r3, [r7, #28]
 800420c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8004210:	e002      	b.n	8004218 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8004212:	bf00      	nop
 8004214:	e000      	b.n	8004218 <prvProcessReceivedCommands+0x15c>
                        break;
 8004216:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004218:	4b08      	ldr	r3, [pc, #32]	@ (800423c <prvProcessReceivedCommands+0x180>)
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f107 0108 	add.w	r1, r7, #8
 8004220:	2200      	movs	r2, #0
 8004222:	4618      	mov	r0, r3
 8004224:	f7fe f98e 	bl	8002544 <xQueueReceive>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	f47f af4a 	bne.w	80040c4 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8004230:	bf00      	nop
 8004232:	bf00      	nop
 8004234:	3720      	adds	r7, #32
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}
 800423a:	bf00      	nop
 800423c:	20000208 	.word	0x20000208

08004240 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004246:	e009      	b.n	800425c <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004248:	4b0e      	ldr	r3, [pc, #56]	@ (8004284 <prvSwitchTimerLists+0x44>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8004252:	f04f 31ff 	mov.w	r1, #4294967295
 8004256:	6838      	ldr	r0, [r7, #0]
 8004258:	f7ff fe18 	bl	8003e8c <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800425c:	4b09      	ldr	r3, [pc, #36]	@ (8004284 <prvSwitchTimerLists+0x44>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8004266:	4b07      	ldr	r3, [pc, #28]	@ (8004284 <prvSwitchTimerLists+0x44>)
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 800426c:	4b06      	ldr	r3, [pc, #24]	@ (8004288 <prvSwitchTimerLists+0x48>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	4a04      	ldr	r2, [pc, #16]	@ (8004284 <prvSwitchTimerLists+0x44>)
 8004272:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8004274:	4a04      	ldr	r2, [pc, #16]	@ (8004288 <prvSwitchTimerLists+0x48>)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6013      	str	r3, [r2, #0]
    }
 800427a:	bf00      	nop
 800427c:	3708      	adds	r7, #8
 800427e:	46bd      	mov	sp, r7
 8004280:	bd80      	pop	{r7, pc}
 8004282:	bf00      	nop
 8004284:	20000200 	.word	0x20000200
 8004288:	20000204 	.word	0x20000204

0800428c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 800428c:	b580      	push	{r7, lr}
 800428e:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8004290:	f000 f9e4 	bl	800465c <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8004294:	4b12      	ldr	r3, [pc, #72]	@ (80042e0 <prvCheckForValidListAndQueue+0x54>)
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d11d      	bne.n	80042d8 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 800429c:	4811      	ldr	r0, [pc, #68]	@ (80042e4 <prvCheckForValidListAndQueue+0x58>)
 800429e:	f7fd ffa1 	bl	80021e4 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 80042a2:	4811      	ldr	r0, [pc, #68]	@ (80042e8 <prvCheckForValidListAndQueue+0x5c>)
 80042a4:	f7fd ff9e 	bl	80021e4 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 80042a8:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <prvCheckForValidListAndQueue+0x60>)
 80042aa:	4a0e      	ldr	r2, [pc, #56]	@ (80042e4 <prvCheckForValidListAndQueue+0x58>)
 80042ac:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 80042ae:	4b10      	ldr	r3, [pc, #64]	@ (80042f0 <prvCheckForValidListAndQueue+0x64>)
 80042b0:	4a0d      	ldr	r2, [pc, #52]	@ (80042e8 <prvCheckForValidListAndQueue+0x5c>)
 80042b2:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 80042b4:	2200      	movs	r2, #0
 80042b6:	210c      	movs	r1, #12
 80042b8:	200a      	movs	r0, #10
 80042ba:	f7fe f8cb 	bl	8002454 <xQueueGenericCreate>
 80042be:	4603      	mov	r3, r0
 80042c0:	4a07      	ldr	r2, [pc, #28]	@ (80042e0 <prvCheckForValidListAndQueue+0x54>)
 80042c2:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 80042c4:	4b06      	ldr	r3, [pc, #24]	@ (80042e0 <prvCheckForValidListAndQueue+0x54>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d005      	beq.n	80042d8 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80042cc:	4b04      	ldr	r3, [pc, #16]	@ (80042e0 <prvCheckForValidListAndQueue+0x54>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	4908      	ldr	r1, [pc, #32]	@ (80042f4 <prvCheckForValidListAndQueue+0x68>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe facc 	bl	8002870 <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 80042d8:	f000 f9f2 	bl	80046c0 <vPortExitCritical>
    }
 80042dc:	bf00      	nop
 80042de:	bd80      	pop	{r7, pc}
 80042e0:	20000208 	.word	0x20000208
 80042e4:	200001d8 	.word	0x200001d8
 80042e8:	200001ec 	.word	0x200001ec
 80042ec:	20000200 	.word	0x20000200
 80042f0:	20000204 	.word	0x20000204
 80042f4:	08007150 	.word	0x08007150

080042f8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	3b04      	subs	r3, #4
 8004308:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004310:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	3b04      	subs	r3, #4
 8004316:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	f023 0201 	bic.w	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	3b04      	subs	r3, #4
 8004326:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004328:	4a0c      	ldr	r2, [pc, #48]	@ (800435c <pxPortInitialiseStack+0x64>)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	3b14      	subs	r3, #20
 8004332:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	3b04      	subs	r3, #4
 800433e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	f06f 0202 	mvn.w	r2, #2
 8004346:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	3b20      	subs	r3, #32
 800434c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800434e:	68fb      	ldr	r3, [r7, #12]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3714      	adds	r7, #20
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	08004361 	.word	0x08004361

08004360 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8004366:	2300      	movs	r3, #0
 8004368:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800436a:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <prvTaskExitError+0x58>)
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004372:	d00b      	beq.n	800438c <prvTaskExitError+0x2c>
        __asm volatile
 8004374:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004378:	f383 8811 	msr	BASEPRI, r3
 800437c:	f3bf 8f6f 	isb	sy
 8004380:	f3bf 8f4f 	dsb	sy
 8004384:	60fb      	str	r3, [r7, #12]
    }
 8004386:	bf00      	nop
 8004388:	bf00      	nop
 800438a:	e7fd      	b.n	8004388 <prvTaskExitError+0x28>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60bb      	str	r3, [r7, #8]
    }
 800439e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80043a0:	bf00      	nop
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0fc      	beq.n	80043a2 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80043a8:	bf00      	nop
 80043aa:	bf00      	nop
 80043ac:	3714      	adds	r7, #20
 80043ae:	46bd      	mov	sp, r7
 80043b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b4:	4770      	bx	lr
 80043b6:	bf00      	nop
 80043b8:	20000010 	.word	0x20000010
 80043bc:	00000000 	.word	0x00000000

080043c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80043c0:	4b07      	ldr	r3, [pc, #28]	@ (80043e0 <pxCurrentTCBConst2>)
 80043c2:	6819      	ldr	r1, [r3, #0]
 80043c4:	6808      	ldr	r0, [r1, #0]
 80043c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80043ca:	f380 8809 	msr	PSP, r0
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f04f 0000 	mov.w	r0, #0
 80043d6:	f380 8811 	msr	BASEPRI, r0
 80043da:	4770      	bx	lr
 80043dc:	f3af 8000 	nop.w

080043e0 <pxCurrentTCBConst2>:
 80043e0:	200000d4 	.word	0x200000d4
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80043e4:	bf00      	nop
 80043e6:	bf00      	nop

080043e8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80043e8:	4808      	ldr	r0, [pc, #32]	@ (800440c <prvPortStartFirstTask+0x24>)
 80043ea:	6800      	ldr	r0, [r0, #0]
 80043ec:	6800      	ldr	r0, [r0, #0]
 80043ee:	f380 8808 	msr	MSP, r0
 80043f2:	f04f 0000 	mov.w	r0, #0
 80043f6:	f380 8814 	msr	CONTROL, r0
 80043fa:	b662      	cpsie	i
 80043fc:	b661      	cpsie	f
 80043fe:	f3bf 8f4f 	dsb	sy
 8004402:	f3bf 8f6f 	isb	sy
 8004406:	df00      	svc	0
 8004408:	bf00      	nop
 800440a:	0000      	.short	0x0000
 800440c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8004410:	bf00      	nop
 8004412:	bf00      	nop

08004414 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b086      	sub	sp, #24
 8004418:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800441a:	4b47      	ldr	r3, [pc, #284]	@ (8004538 <xPortStartScheduler+0x124>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	4a47      	ldr	r2, [pc, #284]	@ (800453c <xPortStartScheduler+0x128>)
 8004420:	4293      	cmp	r3, r2
 8004422:	d10b      	bne.n	800443c <xPortStartScheduler+0x28>
        __asm volatile
 8004424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004428:	f383 8811 	msr	BASEPRI, r3
 800442c:	f3bf 8f6f 	isb	sy
 8004430:	f3bf 8f4f 	dsb	sy
 8004434:	613b      	str	r3, [r7, #16]
    }
 8004436:	bf00      	nop
 8004438:	bf00      	nop
 800443a:	e7fd      	b.n	8004438 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800443c:	4b3e      	ldr	r3, [pc, #248]	@ (8004538 <xPortStartScheduler+0x124>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a3f      	ldr	r2, [pc, #252]	@ (8004540 <xPortStartScheduler+0x12c>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d10b      	bne.n	800445e <xPortStartScheduler+0x4a>
        __asm volatile
 8004446:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444a:	f383 8811 	msr	BASEPRI, r3
 800444e:	f3bf 8f6f 	isb	sy
 8004452:	f3bf 8f4f 	dsb	sy
 8004456:	60fb      	str	r3, [r7, #12]
    }
 8004458:	bf00      	nop
 800445a:	bf00      	nop
 800445c:	e7fd      	b.n	800445a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800445e:	4b39      	ldr	r3, [pc, #228]	@ (8004544 <xPortStartScheduler+0x130>)
 8004460:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	b2db      	uxtb	r3, r3
 8004468:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800446a:	697b      	ldr	r3, [r7, #20]
 800446c:	22ff      	movs	r2, #255	@ 0xff
 800446e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	b2db      	uxtb	r3, r3
 8004476:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004478:	78fb      	ldrb	r3, [r7, #3]
 800447a:	b2db      	uxtb	r3, r3
 800447c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004480:	b2da      	uxtb	r2, r3
 8004482:	4b31      	ldr	r3, [pc, #196]	@ (8004548 <xPortStartScheduler+0x134>)
 8004484:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004486:	4b31      	ldr	r3, [pc, #196]	@ (800454c <xPortStartScheduler+0x138>)
 8004488:	2207      	movs	r2, #7
 800448a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800448c:	e009      	b.n	80044a2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 800448e:	4b2f      	ldr	r3, [pc, #188]	@ (800454c <xPortStartScheduler+0x138>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	3b01      	subs	r3, #1
 8004494:	4a2d      	ldr	r2, [pc, #180]	@ (800454c <xPortStartScheduler+0x138>)
 8004496:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	b2db      	uxtb	r3, r3
 800449c:	005b      	lsls	r3, r3, #1
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80044a2:	78fb      	ldrb	r3, [r7, #3]
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80044aa:	2b80      	cmp	r3, #128	@ 0x80
 80044ac:	d0ef      	beq.n	800448e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80044ae:	4b27      	ldr	r3, [pc, #156]	@ (800454c <xPortStartScheduler+0x138>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f1c3 0307 	rsb	r3, r3, #7
 80044b6:	2b04      	cmp	r3, #4
 80044b8:	d00b      	beq.n	80044d2 <xPortStartScheduler+0xbe>
        __asm volatile
 80044ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044be:	f383 8811 	msr	BASEPRI, r3
 80044c2:	f3bf 8f6f 	isb	sy
 80044c6:	f3bf 8f4f 	dsb	sy
 80044ca:	60bb      	str	r3, [r7, #8]
    }
 80044cc:	bf00      	nop
 80044ce:	bf00      	nop
 80044d0:	e7fd      	b.n	80044ce <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80044d2:	4b1e      	ldr	r3, [pc, #120]	@ (800454c <xPortStartScheduler+0x138>)
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	021b      	lsls	r3, r3, #8
 80044d8:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <xPortStartScheduler+0x138>)
 80044da:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80044dc:	4b1b      	ldr	r3, [pc, #108]	@ (800454c <xPortStartScheduler+0x138>)
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80044e4:	4a19      	ldr	r2, [pc, #100]	@ (800454c <xPortStartScheduler+0x138>)
 80044e6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	b2da      	uxtb	r2, r3
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80044f0:	4b17      	ldr	r3, [pc, #92]	@ (8004550 <xPortStartScheduler+0x13c>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	4a16      	ldr	r2, [pc, #88]	@ (8004550 <xPortStartScheduler+0x13c>)
 80044f6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80044fa:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80044fc:	4b14      	ldr	r3, [pc, #80]	@ (8004550 <xPortStartScheduler+0x13c>)
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4a13      	ldr	r2, [pc, #76]	@ (8004550 <xPortStartScheduler+0x13c>)
 8004502:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004506:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8004508:	f000 f968 	bl	80047dc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 800450c:	4b11      	ldr	r3, [pc, #68]	@ (8004554 <xPortStartScheduler+0x140>)
 800450e:	2200      	movs	r2, #0
 8004510:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8004512:	f000 f987 	bl	8004824 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004516:	4b10      	ldr	r3, [pc, #64]	@ (8004558 <xPortStartScheduler+0x144>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4a0f      	ldr	r2, [pc, #60]	@ (8004558 <xPortStartScheduler+0x144>)
 800451c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004520:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8004522:	f7ff ff61 	bl	80043e8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8004526:	f7fe fed7 	bl	80032d8 <vTaskSwitchContext>
    prvTaskExitError();
 800452a:	f7ff ff19 	bl	8004360 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800452e:	2300      	movs	r3, #0
}
 8004530:	4618      	mov	r0, r3
 8004532:	3718      	adds	r7, #24
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	e000ed00 	.word	0xe000ed00
 800453c:	410fc271 	.word	0x410fc271
 8004540:	410fc270 	.word	0x410fc270
 8004544:	e000e400 	.word	0xe000e400
 8004548:	20000214 	.word	0x20000214
 800454c:	20000218 	.word	0x20000218
 8004550:	e000ed20 	.word	0xe000ed20
 8004554:	20000010 	.word	0x20000010
 8004558:	e000ef34 	.word	0xe000ef34

0800455c <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 800455c:	b480      	push	{r7}
 800455e:	b087      	sub	sp, #28
 8004560:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004562:	4b38      	ldr	r3, [pc, #224]	@ (8004644 <vInitPrioGroupValue+0xe8>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a38      	ldr	r2, [pc, #224]	@ (8004648 <vInitPrioGroupValue+0xec>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d10b      	bne.n	8004584 <vInitPrioGroupValue+0x28>
        __asm volatile
 800456c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	613b      	str	r3, [r7, #16]
    }
 800457e:	bf00      	nop
 8004580:	bf00      	nop
 8004582:	e7fd      	b.n	8004580 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004584:	4b2f      	ldr	r3, [pc, #188]	@ (8004644 <vInitPrioGroupValue+0xe8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a30      	ldr	r2, [pc, #192]	@ (800464c <vInitPrioGroupValue+0xf0>)
 800458a:	4293      	cmp	r3, r2
 800458c:	d10b      	bne.n	80045a6 <vInitPrioGroupValue+0x4a>
        __asm volatile
 800458e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004592:	f383 8811 	msr	BASEPRI, r3
 8004596:	f3bf 8f6f 	isb	sy
 800459a:	f3bf 8f4f 	dsb	sy
 800459e:	60fb      	str	r3, [r7, #12]
    }
 80045a0:	bf00      	nop
 80045a2:	bf00      	nop
 80045a4:	e7fd      	b.n	80045a2 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80045a6:	4b2a      	ldr	r3, [pc, #168]	@ (8004650 <vInitPrioGroupValue+0xf4>)
 80045a8:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 80045aa:	697b      	ldr	r3, [r7, #20]
 80045ac:	781b      	ldrb	r3, [r3, #0]
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	22ff      	movs	r2, #255	@ 0xff
 80045b6:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	781b      	ldrb	r3, [r3, #0]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80045c0:	78fb      	ldrb	r3, [r7, #3]
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	4b22      	ldr	r3, [pc, #136]	@ (8004654 <vInitPrioGroupValue+0xf8>)
 80045cc:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80045ce:	4b22      	ldr	r3, [pc, #136]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 80045d0:	2207      	movs	r2, #7
 80045d2:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045d4:	e009      	b.n	80045ea <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 80045d6:	4b20      	ldr	r3, [pc, #128]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	3b01      	subs	r3, #1
 80045dc:	4a1e      	ldr	r2, [pc, #120]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 80045de:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80045e0:	78fb      	ldrb	r3, [r7, #3]
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80045ea:	78fb      	ldrb	r3, [r7, #3]
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80045f2:	2b80      	cmp	r3, #128	@ 0x80
 80045f4:	d0ef      	beq.n	80045d6 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80045f6:	4b18      	ldr	r3, [pc, #96]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f1c3 0307 	rsb	r3, r3, #7
 80045fe:	2b04      	cmp	r3, #4
 8004600:	d00b      	beq.n	800461a <vInitPrioGroupValue+0xbe>
        __asm volatile
 8004602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004606:	f383 8811 	msr	BASEPRI, r3
 800460a:	f3bf 8f6f 	isb	sy
 800460e:	f3bf 8f4f 	dsb	sy
 8004612:	60bb      	str	r3, [r7, #8]
    }
 8004614:	bf00      	nop
 8004616:	bf00      	nop
 8004618:	e7fd      	b.n	8004616 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800461a:	4b0f      	ldr	r3, [pc, #60]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	021b      	lsls	r3, r3, #8
 8004620:	4a0d      	ldr	r2, [pc, #52]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 8004622:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004624:	4b0c      	ldr	r3, [pc, #48]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800462c:	4a0a      	ldr	r2, [pc, #40]	@ (8004658 <vInitPrioGroupValue+0xfc>)
 800462e:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	697b      	ldr	r3, [r7, #20]
 8004636:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8004638:	bf00      	nop
 800463a:	371c      	adds	r7, #28
 800463c:	46bd      	mov	sp, r7
 800463e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004642:	4770      	bx	lr
 8004644:	e000ed00 	.word	0xe000ed00
 8004648:	410fc271 	.word	0x410fc271
 800464c:	410fc270 	.word	0x410fc270
 8004650:	e000e400 	.word	0xe000e400
 8004654:	20000214 	.word	0x20000214
 8004658:	20000218 	.word	0x20000218

0800465c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
        __asm volatile
 8004662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004666:	f383 8811 	msr	BASEPRI, r3
 800466a:	f3bf 8f6f 	isb	sy
 800466e:	f3bf 8f4f 	dsb	sy
 8004672:	607b      	str	r3, [r7, #4]
    }
 8004674:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004676:	4b10      	ldr	r3, [pc, #64]	@ (80046b8 <vPortEnterCritical+0x5c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	3301      	adds	r3, #1
 800467c:	4a0e      	ldr	r2, [pc, #56]	@ (80046b8 <vPortEnterCritical+0x5c>)
 800467e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004680:	4b0d      	ldr	r3, [pc, #52]	@ (80046b8 <vPortEnterCritical+0x5c>)
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	2b01      	cmp	r3, #1
 8004686:	d110      	bne.n	80046aa <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004688:	4b0c      	ldr	r3, [pc, #48]	@ (80046bc <vPortEnterCritical+0x60>)
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	b2db      	uxtb	r3, r3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d00b      	beq.n	80046aa <vPortEnterCritical+0x4e>
        __asm volatile
 8004692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004696:	f383 8811 	msr	BASEPRI, r3
 800469a:	f3bf 8f6f 	isb	sy
 800469e:	f3bf 8f4f 	dsb	sy
 80046a2:	603b      	str	r3, [r7, #0]
    }
 80046a4:	bf00      	nop
 80046a6:	bf00      	nop
 80046a8:	e7fd      	b.n	80046a6 <vPortEnterCritical+0x4a>
    }
}
 80046aa:	bf00      	nop
 80046ac:	370c      	adds	r7, #12
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	20000010 	.word	0x20000010
 80046bc:	e000ed04 	.word	0xe000ed04

080046c0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80046c6:	4b12      	ldr	r3, [pc, #72]	@ (8004710 <vPortExitCritical+0x50>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d10b      	bne.n	80046e6 <vPortExitCritical+0x26>
        __asm volatile
 80046ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046d2:	f383 8811 	msr	BASEPRI, r3
 80046d6:	f3bf 8f6f 	isb	sy
 80046da:	f3bf 8f4f 	dsb	sy
 80046de:	607b      	str	r3, [r7, #4]
    }
 80046e0:	bf00      	nop
 80046e2:	bf00      	nop
 80046e4:	e7fd      	b.n	80046e2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 80046e6:	4b0a      	ldr	r3, [pc, #40]	@ (8004710 <vPortExitCritical+0x50>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	3b01      	subs	r3, #1
 80046ec:	4a08      	ldr	r2, [pc, #32]	@ (8004710 <vPortExitCritical+0x50>)
 80046ee:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80046f0:	4b07      	ldr	r3, [pc, #28]	@ (8004710 <vPortExitCritical+0x50>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d105      	bne.n	8004704 <vPortExitCritical+0x44>
 80046f8:	2300      	movs	r3, #0
 80046fa:	603b      	str	r3, [r7, #0]
        __asm volatile
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	f383 8811 	msr	BASEPRI, r3
    }
 8004702:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004704:	bf00      	nop
 8004706:	370c      	adds	r7, #12
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr
 8004710:	20000010 	.word	0x20000010
	...

08004720 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004720:	f3ef 8009 	mrs	r0, PSP
 8004724:	f3bf 8f6f 	isb	sy
 8004728:	4b15      	ldr	r3, [pc, #84]	@ (8004780 <pxCurrentTCBConst>)
 800472a:	681a      	ldr	r2, [r3, #0]
 800472c:	f01e 0f10 	tst.w	lr, #16
 8004730:	bf08      	it	eq
 8004732:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004736:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473a:	6010      	str	r0, [r2, #0]
 800473c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004740:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004744:	f380 8811 	msr	BASEPRI, r0
 8004748:	f3bf 8f4f 	dsb	sy
 800474c:	f3bf 8f6f 	isb	sy
 8004750:	f7fe fdc2 	bl	80032d8 <vTaskSwitchContext>
 8004754:	f04f 0000 	mov.w	r0, #0
 8004758:	f380 8811 	msr	BASEPRI, r0
 800475c:	bc09      	pop	{r0, r3}
 800475e:	6819      	ldr	r1, [r3, #0]
 8004760:	6808      	ldr	r0, [r1, #0]
 8004762:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004766:	f01e 0f10 	tst.w	lr, #16
 800476a:	bf08      	it	eq
 800476c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004770:	f380 8809 	msr	PSP, r0
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	f3af 8000 	nop.w

08004780 <pxCurrentTCBConst>:
 8004780:	200000d4 	.word	0x200000d4
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004784:	bf00      	nop
 8004786:	bf00      	nop

08004788 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
        __asm volatile
 800478e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004792:	f383 8811 	msr	BASEPRI, r3
 8004796:	f3bf 8f6f 	isb	sy
 800479a:	f3bf 8f4f 	dsb	sy
 800479e:	607b      	str	r3, [r7, #4]
    }
 80047a0:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 80047a2:	f002 f967 	bl	8006a74 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80047a6:	f7fe fc9f 	bl	80030e8 <xTaskIncrementTick>
 80047aa:	4603      	mov	r3, r0
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d006      	beq.n	80047be <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 80047b0:	f002 f9be 	bl	8006b30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80047b4:	4b08      	ldr	r3, [pc, #32]	@ (80047d8 <SysTick_Handler+0x50>)
 80047b6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80047ba:	601a      	str	r2, [r3, #0]
 80047bc:	e001      	b.n	80047c2 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 80047be:	f002 f99b 	bl	8006af8 <SEGGER_SYSVIEW_RecordExitISR>
 80047c2:	2300      	movs	r3, #0
 80047c4:	603b      	str	r3, [r7, #0]
        __asm volatile
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	f383 8811 	msr	BASEPRI, r3
    }
 80047cc:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 80047ce:	bf00      	nop
 80047d0:	3708      	adds	r7, #8
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80047e0:	4b0b      	ldr	r3, [pc, #44]	@ (8004810 <vPortSetupTimerInterrupt+0x34>)
 80047e2:	2200      	movs	r2, #0
 80047e4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80047e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004814 <vPortSetupTimerInterrupt+0x38>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80047ec:	4b0a      	ldr	r3, [pc, #40]	@ (8004818 <vPortSetupTimerInterrupt+0x3c>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	4a0a      	ldr	r2, [pc, #40]	@ (800481c <vPortSetupTimerInterrupt+0x40>)
 80047f2:	fba2 2303 	umull	r2, r3, r2, r3
 80047f6:	099b      	lsrs	r3, r3, #6
 80047f8:	4a09      	ldr	r2, [pc, #36]	@ (8004820 <vPortSetupTimerInterrupt+0x44>)
 80047fa:	3b01      	subs	r3, #1
 80047fc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80047fe:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <vPortSetupTimerInterrupt+0x34>)
 8004800:	2207      	movs	r2, #7
 8004802:	601a      	str	r2, [r3, #0]
}
 8004804:	bf00      	nop
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	e000e010 	.word	0xe000e010
 8004814:	e000e018 	.word	0xe000e018
 8004818:	20000000 	.word	0x20000000
 800481c:	10624dd3 	.word	0x10624dd3
 8004820:	e000e014 	.word	0xe000e014

08004824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8004824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004834 <vPortEnableVFP+0x10>
 8004828:	6801      	ldr	r1, [r0, #0]
 800482a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800482e:	6001      	str	r1, [r0, #0]
 8004830:	4770      	bx	lr
 8004832:	0000      	.short	0x0000
 8004834:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8004838:	bf00      	nop
 800483a:	bf00      	nop

0800483c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800483c:	b480      	push	{r7}
 800483e:	b085      	sub	sp, #20
 8004840:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8004842:	f3ef 8305 	mrs	r3, IPSR
 8004846:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	2b0f      	cmp	r3, #15
 800484c:	d915      	bls.n	800487a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800484e:	4a18      	ldr	r2, [pc, #96]	@ (80048b0 <vPortValidateInterruptPriority+0x74>)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	4413      	add	r3, r2
 8004854:	781b      	ldrb	r3, [r3, #0]
 8004856:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004858:	4b16      	ldr	r3, [pc, #88]	@ (80048b4 <vPortValidateInterruptPriority+0x78>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	7afa      	ldrb	r2, [r7, #11]
 800485e:	429a      	cmp	r2, r3
 8004860:	d20b      	bcs.n	800487a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	607b      	str	r3, [r7, #4]
    }
 8004874:	bf00      	nop
 8004876:	bf00      	nop
 8004878:	e7fd      	b.n	8004876 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800487a:	4b0f      	ldr	r3, [pc, #60]	@ (80048b8 <vPortValidateInterruptPriority+0x7c>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004882:	4b0e      	ldr	r3, [pc, #56]	@ (80048bc <vPortValidateInterruptPriority+0x80>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	429a      	cmp	r2, r3
 8004888:	d90b      	bls.n	80048a2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800488a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800488e:	f383 8811 	msr	BASEPRI, r3
 8004892:	f3bf 8f6f 	isb	sy
 8004896:	f3bf 8f4f 	dsb	sy
 800489a:	603b      	str	r3, [r7, #0]
    }
 800489c:	bf00      	nop
 800489e:	bf00      	nop
 80048a0:	e7fd      	b.n	800489e <vPortValidateInterruptPriority+0x62>
    }
 80048a2:	bf00      	nop
 80048a4:	3714      	adds	r7, #20
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	e000e3f0 	.word	0xe000e3f0
 80048b4:	20000214 	.word	0x20000214
 80048b8:	e000ed0c 	.word	0xe000ed0c
 80048bc:	20000218 	.word	0x20000218

080048c0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08a      	sub	sp, #40	@ 0x28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80048c8:	2300      	movs	r3, #0
 80048ca:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80048cc:	f7fe faea 	bl	8002ea4 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80048d0:	4b54      	ldr	r3, [pc, #336]	@ (8004a24 <pvPortMalloc+0x164>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d101      	bne.n	80048dc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80048d8:	f000 f90c 	bl	8004af4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d012      	beq.n	8004908 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80048e2:	2208      	movs	r2, #8
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	3308      	adds	r3, #8
 80048ee:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80048f0:	69bb      	ldr	r3, [r7, #24]
 80048f2:	43db      	mvns	r3, r3
 80048f4:	687a      	ldr	r2, [r7, #4]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d804      	bhi.n	8004904 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	69bb      	ldr	r3, [r7, #24]
 80048fe:	4413      	add	r3, r2
 8004900:	607b      	str	r3, [r7, #4]
 8004902:	e001      	b.n	8004908 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004904:	2300      	movs	r3, #0
 8004906:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	db71      	blt.n	80049f2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d06e      	beq.n	80049f2 <pvPortMalloc+0x132>
 8004914:	4b44      	ldr	r3, [pc, #272]	@ (8004a28 <pvPortMalloc+0x168>)
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	429a      	cmp	r2, r3
 800491c:	d869      	bhi.n	80049f2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800491e:	4b43      	ldr	r3, [pc, #268]	@ (8004a2c <pvPortMalloc+0x16c>)
 8004920:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8004922:	4b42      	ldr	r3, [pc, #264]	@ (8004a2c <pvPortMalloc+0x16c>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004928:	e004      	b.n	8004934 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800492a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800492c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	687a      	ldr	r2, [r7, #4]
 800493a:	429a      	cmp	r2, r3
 800493c:	d903      	bls.n	8004946 <pvPortMalloc+0x86>
 800493e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	2b00      	cmp	r3, #0
 8004944:	d1f1      	bne.n	800492a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004946:	4b37      	ldr	r3, [pc, #220]	@ (8004a24 <pvPortMalloc+0x164>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800494c:	429a      	cmp	r2, r3
 800494e:	d050      	beq.n	80049f2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004950:	6a3b      	ldr	r3, [r7, #32]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2208      	movs	r2, #8
 8004956:	4413      	add	r3, r2
 8004958:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800495a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	6a3b      	ldr	r3, [r7, #32]
 8004960:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004964:	685a      	ldr	r2, [r3, #4]
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	1ad2      	subs	r2, r2, r3
 800496a:	2308      	movs	r3, #8
 800496c:	005b      	lsls	r3, r3, #1
 800496e:	429a      	cmp	r2, r3
 8004970:	d920      	bls.n	80049b4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004972:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	4413      	add	r3, r2
 8004978:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800497a:	697b      	ldr	r3, [r7, #20]
 800497c:	f003 0307 	and.w	r3, r3, #7
 8004980:	2b00      	cmp	r3, #0
 8004982:	d00b      	beq.n	800499c <pvPortMalloc+0xdc>
        __asm volatile
 8004984:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004988:	f383 8811 	msr	BASEPRI, r3
 800498c:	f3bf 8f6f 	isb	sy
 8004990:	f3bf 8f4f 	dsb	sy
 8004994:	613b      	str	r3, [r7, #16]
    }
 8004996:	bf00      	nop
 8004998:	bf00      	nop
 800499a:	e7fd      	b.n	8004998 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800499c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499e:	685a      	ldr	r2, [r3, #4]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	1ad2      	subs	r2, r2, r3
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80049ae:	6978      	ldr	r0, [r7, #20]
 80049b0:	f000 f8fc 	bl	8004bac <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80049b4:	4b1c      	ldr	r3, [pc, #112]	@ (8004a28 <pvPortMalloc+0x168>)
 80049b6:	681a      	ldr	r2, [r3, #0]
 80049b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	4a1a      	ldr	r2, [pc, #104]	@ (8004a28 <pvPortMalloc+0x168>)
 80049c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80049c2:	4b19      	ldr	r3, [pc, #100]	@ (8004a28 <pvPortMalloc+0x168>)
 80049c4:	681a      	ldr	r2, [r3, #0]
 80049c6:	4b1a      	ldr	r3, [pc, #104]	@ (8004a30 <pvPortMalloc+0x170>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d203      	bcs.n	80049d6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80049ce:	4b16      	ldr	r3, [pc, #88]	@ (8004a28 <pvPortMalloc+0x168>)
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4a17      	ldr	r2, [pc, #92]	@ (8004a30 <pvPortMalloc+0x170>)
 80049d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80049d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80049de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80049e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e4:	2200      	movs	r2, #0
 80049e6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80049e8:	4b12      	ldr	r3, [pc, #72]	@ (8004a34 <pvPortMalloc+0x174>)
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	3301      	adds	r3, #1
 80049ee:	4a11      	ldr	r2, [pc, #68]	@ (8004a34 <pvPortMalloc+0x174>)
 80049f0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80049f2:	f7fe fa65 	bl	8002ec0 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80049f6:	69fb      	ldr	r3, [r7, #28]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <pvPortMalloc+0x158>
        __asm volatile
 8004a00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a04:	f383 8811 	msr	BASEPRI, r3
 8004a08:	f3bf 8f6f 	isb	sy
 8004a0c:	f3bf 8f4f 	dsb	sy
 8004a10:	60fb      	str	r3, [r7, #12]
    }
 8004a12:	bf00      	nop
 8004a14:	bf00      	nop
 8004a16:	e7fd      	b.n	8004a14 <pvPortMalloc+0x154>
    return pvReturn;
 8004a18:	69fb      	ldr	r3, [r7, #28]
}
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	3728      	adds	r7, #40	@ 0x28
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	bd80      	pop	{r7, pc}
 8004a22:	bf00      	nop
 8004a24:	2004b224 	.word	0x2004b224
 8004a28:	2004b228 	.word	0x2004b228
 8004a2c:	2004b21c 	.word	0x2004b21c
 8004a30:	2004b22c 	.word	0x2004b22c
 8004a34:	2004b230 	.word	0x2004b230

08004a38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b086      	sub	sp, #24
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d04b      	beq.n	8004ae2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004a4a:	2308      	movs	r3, #8
 8004a4c:	425b      	negs	r3, r3
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	4413      	add	r3, r2
 8004a52:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	db0b      	blt.n	8004a78 <vPortFree+0x40>
        __asm volatile
 8004a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a64:	f383 8811 	msr	BASEPRI, r3
 8004a68:	f3bf 8f6f 	isb	sy
 8004a6c:	f3bf 8f4f 	dsb	sy
 8004a70:	60fb      	str	r3, [r7, #12]
    }
 8004a72:	bf00      	nop
 8004a74:	bf00      	nop
 8004a76:	e7fd      	b.n	8004a74 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00b      	beq.n	8004a98 <vPortFree+0x60>
        __asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	60bb      	str	r3, [r7, #8]
    }
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	0fdb      	lsrs	r3, r3, #31
 8004a9e:	f003 0301 	and.w	r3, r3, #1
 8004aa2:	b2db      	uxtb	r3, r3
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d01c      	beq.n	8004ae2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d118      	bne.n	8004ae2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8004abc:	f7fe f9f2 	bl	8002ea4 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	685a      	ldr	r2, [r3, #4]
 8004ac4:	4b09      	ldr	r3, [pc, #36]	@ (8004aec <vPortFree+0xb4>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	4413      	add	r3, r2
 8004aca:	4a08      	ldr	r2, [pc, #32]	@ (8004aec <vPortFree+0xb4>)
 8004acc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004ace:	6938      	ldr	r0, [r7, #16]
 8004ad0:	f000 f86c 	bl	8004bac <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8004ad4:	4b06      	ldr	r3, [pc, #24]	@ (8004af0 <vPortFree+0xb8>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	3301      	adds	r3, #1
 8004ada:	4a05      	ldr	r2, [pc, #20]	@ (8004af0 <vPortFree+0xb8>)
 8004adc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8004ade:	f7fe f9ef 	bl	8002ec0 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8004ae2:	bf00      	nop
 8004ae4:	3718      	adds	r7, #24
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}
 8004aea:	bf00      	nop
 8004aec:	2004b228 	.word	0x2004b228
 8004af0:	2004b234 	.word	0x2004b234

08004af4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004af4:	b480      	push	{r7}
 8004af6:	b085      	sub	sp, #20
 8004af8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004afa:	f44f 2396 	mov.w	r3, #307200	@ 0x4b000
 8004afe:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b00:	4b25      	ldr	r3, [pc, #148]	@ (8004b98 <prvHeapInit+0xa4>)
 8004b02:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f003 0307 	and.w	r3, r3, #7
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00c      	beq.n	8004b28 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3307      	adds	r3, #7
 8004b12:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f023 0307 	bic.w	r3, r3, #7
 8004b1a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	1ad3      	subs	r3, r2, r3
 8004b22:	4a1d      	ldr	r2, [pc, #116]	@ (8004b98 <prvHeapInit+0xa4>)
 8004b24:	4413      	add	r3, r2
 8004b26:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8004b9c <prvHeapInit+0xa8>)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8004b32:	4b1a      	ldr	r3, [pc, #104]	@ (8004b9c <prvHeapInit+0xa8>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	4413      	add	r3, r2
 8004b3e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8004b40:	2208      	movs	r2, #8
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	1a9b      	subs	r3, r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f023 0307 	bic.w	r3, r3, #7
 8004b4e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4a13      	ldr	r2, [pc, #76]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b54:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004b56:	4b12      	ldr	r3, [pc, #72]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8004b5e:	4b10      	ldr	r3, [pc, #64]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	2200      	movs	r2, #0
 8004b64:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	68fa      	ldr	r2, [r7, #12]
 8004b6e:	1ad2      	subs	r2, r2, r3
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b74:	4b0a      	ldr	r3, [pc, #40]	@ (8004ba0 <prvHeapInit+0xac>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	685b      	ldr	r3, [r3, #4]
 8004b80:	4a08      	ldr	r2, [pc, #32]	@ (8004ba4 <prvHeapInit+0xb0>)
 8004b82:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	4a07      	ldr	r2, [pc, #28]	@ (8004ba8 <prvHeapInit+0xb4>)
 8004b8a:	6013      	str	r3, [r2, #0]
}
 8004b8c:	bf00      	nop
 8004b8e:	3714      	adds	r7, #20
 8004b90:	46bd      	mov	sp, r7
 8004b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b96:	4770      	bx	lr
 8004b98:	2000021c 	.word	0x2000021c
 8004b9c:	2004b21c 	.word	0x2004b21c
 8004ba0:	2004b224 	.word	0x2004b224
 8004ba4:	2004b22c 	.word	0x2004b22c
 8004ba8:	2004b228 	.word	0x2004b228

08004bac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004bb4:	4b28      	ldr	r3, [pc, #160]	@ (8004c58 <prvInsertBlockIntoFreeList+0xac>)
 8004bb6:	60fb      	str	r3, [r7, #12]
 8004bb8:	e002      	b.n	8004bc0 <prvInsertBlockIntoFreeList+0x14>
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	60fb      	str	r3, [r7, #12]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	687a      	ldr	r2, [r7, #4]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d8f7      	bhi.n	8004bba <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	68ba      	ldr	r2, [r7, #8]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	687a      	ldr	r2, [r7, #4]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d108      	bne.n	8004bee <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685a      	ldr	r2, [r3, #4]
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	441a      	add	r2, r3
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	685b      	ldr	r3, [r3, #4]
 8004bf6:	68ba      	ldr	r2, [r7, #8]
 8004bf8:	441a      	add	r2, r3
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d118      	bne.n	8004c34 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681a      	ldr	r2, [r3, #0]
 8004c06:	4b15      	ldr	r3, [pc, #84]	@ (8004c5c <prvInsertBlockIntoFreeList+0xb0>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d00d      	beq.n	8004c2a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	685b      	ldr	r3, [r3, #4]
 8004c18:	441a      	add	r2, r3
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681a      	ldr	r2, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	601a      	str	r2, [r3, #0]
 8004c28:	e008      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004c2a:	4b0c      	ldr	r3, [pc, #48]	@ (8004c5c <prvInsertBlockIntoFreeList+0xb0>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	601a      	str	r2, [r3, #0]
 8004c32:	e003      	b.n	8004c3c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004c3c:	68fa      	ldr	r2, [r7, #12]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	429a      	cmp	r2, r3
 8004c42:	d002      	beq.n	8004c4a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004c4a:	bf00      	nop
 8004c4c:	3714      	adds	r7, #20
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c54:	4770      	bx	lr
 8004c56:	bf00      	nop
 8004c58:	2004b21c 	.word	0x2004b21c
 8004c5c:	2004b224 	.word	0x2004b224

08004c60 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8004c64:	4803      	ldr	r0, [pc, #12]	@ (8004c74 <_cbSendSystemDesc+0x14>)
 8004c66:	f001 feaf 	bl	80069c8 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 8004c6a:	4803      	ldr	r0, [pc, #12]	@ (8004c78 <_cbSendSystemDesc+0x18>)
 8004c6c:	f001 feac 	bl	80069c8 <SEGGER_SYSVIEW_SendSysDesc>
}
 8004c70:	bf00      	nop
 8004c72:	bd80      	pop	{r7, pc}
 8004c74:	08007158 	.word	0x08007158
 8004c78:	08007194 	.word	0x08007194

08004c7c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8004c80:	4b06      	ldr	r3, [pc, #24]	@ (8004c9c <SEGGER_SYSVIEW_Conf+0x20>)
 8004c82:	6818      	ldr	r0, [r3, #0]
 8004c84:	4b05      	ldr	r3, [pc, #20]	@ (8004c9c <SEGGER_SYSVIEW_Conf+0x20>)
 8004c86:	6819      	ldr	r1, [r3, #0]
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SEGGER_SYSVIEW_Conf+0x24>)
 8004c8a:	4a06      	ldr	r2, [pc, #24]	@ (8004ca4 <SEGGER_SYSVIEW_Conf+0x28>)
 8004c8c:	f001 f96c 	bl	8005f68 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 8004c90:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 8004c94:	f001 f9ac 	bl	8005ff0 <SEGGER_SYSVIEW_SetRAMBase>
}
 8004c98:	bf00      	nop
 8004c9a:	bd80      	pop	{r7, pc}
 8004c9c:	20000000 	.word	0x20000000
 8004ca0:	08004c61 	.word	0x08004c61
 8004ca4:	08007234 	.word	0x08007234

08004ca8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 8004ca8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 8004cae:	2300      	movs	r3, #0
 8004cb0:	607b      	str	r3, [r7, #4]
 8004cb2:	e033      	b.n	8004d1c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 8004cb4:	491e      	ldr	r1, [pc, #120]	@ (8004d30 <_cbSendTaskList+0x88>)
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	009b      	lsls	r3, r3, #2
 8004cc0:	440b      	add	r3, r1
 8004cc2:	6818      	ldr	r0, [r3, #0]
 8004cc4:	491a      	ldr	r1, [pc, #104]	@ (8004d30 <_cbSendTaskList+0x88>)
 8004cc6:	687a      	ldr	r2, [r7, #4]
 8004cc8:	4613      	mov	r3, r2
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	4413      	add	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	440b      	add	r3, r1
 8004cd2:	3304      	adds	r3, #4
 8004cd4:	6819      	ldr	r1, [r3, #0]
 8004cd6:	4c16      	ldr	r4, [pc, #88]	@ (8004d30 <_cbSendTaskList+0x88>)
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	009b      	lsls	r3, r3, #2
 8004cde:	4413      	add	r3, r2
 8004ce0:	009b      	lsls	r3, r3, #2
 8004ce2:	4423      	add	r3, r4
 8004ce4:	3308      	adds	r3, #8
 8004ce6:	681c      	ldr	r4, [r3, #0]
 8004ce8:	4d11      	ldr	r5, [pc, #68]	@ (8004d30 <_cbSendTaskList+0x88>)
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	4613      	mov	r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	4413      	add	r3, r2
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	442b      	add	r3, r5
 8004cf6:	330c      	adds	r3, #12
 8004cf8:	681d      	ldr	r5, [r3, #0]
 8004cfa:	4e0d      	ldr	r6, [pc, #52]	@ (8004d30 <_cbSendTaskList+0x88>)
 8004cfc:	687a      	ldr	r2, [r7, #4]
 8004cfe:	4613      	mov	r3, r2
 8004d00:	009b      	lsls	r3, r3, #2
 8004d02:	4413      	add	r3, r2
 8004d04:	009b      	lsls	r3, r3, #2
 8004d06:	4433      	add	r3, r6
 8004d08:	3310      	adds	r3, #16
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	462b      	mov	r3, r5
 8004d10:	4622      	mov	r2, r4
 8004d12:	f000 f979 	bl	8005008 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	3301      	adds	r3, #1
 8004d1a:	607b      	str	r3, [r7, #4]
 8004d1c:	4b05      	ldr	r3, [pc, #20]	@ (8004d34 <_cbSendTaskList+0x8c>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d3c6      	bcc.n	8004cb4 <_cbSendTaskList+0xc>
  }
}
 8004d26:	bf00      	nop
 8004d28:	bf00      	nop
 8004d2a:	370c      	adds	r7, #12
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d30:	2004b238 	.word	0x2004b238
 8004d34:	2004b2d8 	.word	0x2004b2d8

08004d38 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8004d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d3c:	b082      	sub	sp, #8
 8004d3e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8004d40:	f7fe f9c0 	bl	80030c4 <xTaskGetTickCountFromISR>
 8004d44:	4603      	mov	r3, r0
 8004d46:	2200      	movs	r2, #0
 8004d48:	469a      	mov	sl, r3
 8004d4a:	4693      	mov	fp, r2
 8004d4c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8004d50:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d54:	4602      	mov	r2, r0
 8004d56:	460b      	mov	r3, r1
 8004d58:	f04f 0a00 	mov.w	sl, #0
 8004d5c:	f04f 0b00 	mov.w	fp, #0
 8004d60:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8004d64:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8004d68:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 8004d6c:	4652      	mov	r2, sl
 8004d6e:	465b      	mov	r3, fp
 8004d70:	1a14      	subs	r4, r2, r0
 8004d72:	eb63 0501 	sbc.w	r5, r3, r1
 8004d76:	f04f 0200 	mov.w	r2, #0
 8004d7a:	f04f 0300 	mov.w	r3, #0
 8004d7e:	00ab      	lsls	r3, r5, #2
 8004d80:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004d84:	00a2      	lsls	r2, r4, #2
 8004d86:	4614      	mov	r4, r2
 8004d88:	461d      	mov	r5, r3
 8004d8a:	eb14 0800 	adds.w	r8, r4, r0
 8004d8e:	eb45 0901 	adc.w	r9, r5, r1
 8004d92:	f04f 0200 	mov.w	r2, #0
 8004d96:	f04f 0300 	mov.w	r3, #0
 8004d9a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d9e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004da2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004da6:	4690      	mov	r8, r2
 8004da8:	4699      	mov	r9, r3
 8004daa:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 8004dae:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004db2:	4610      	mov	r0, r2
 8004db4:	4619      	mov	r1, r3
 8004db6:	3708      	adds	r7, #8
 8004db8:	46bd      	mov	sp, r7
 8004dba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08004dc0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 8004dc0:	b580      	push	{r7, lr}
 8004dc2:	b086      	sub	sp, #24
 8004dc4:	af02      	add	r7, sp, #8
 8004dc6:	60f8      	str	r0, [r7, #12]
 8004dc8:	60b9      	str	r1, [r7, #8]
 8004dca:	607a      	str	r2, [r7, #4]
 8004dcc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 8004dce:	2205      	movs	r2, #5
 8004dd0:	492b      	ldr	r1, [pc, #172]	@ (8004e80 <SYSVIEW_AddTask+0xc0>)
 8004dd2:	68b8      	ldr	r0, [r7, #8]
 8004dd4:	f002 f906 	bl	8006fe4 <memcmp>
 8004dd8:	4603      	mov	r3, r0
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04b      	beq.n	8004e76 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 8004dde:	4b29      	ldr	r3, [pc, #164]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	2b07      	cmp	r3, #7
 8004de4:	d903      	bls.n	8004dee <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004de6:	4828      	ldr	r0, [pc, #160]	@ (8004e88 <SYSVIEW_AddTask+0xc8>)
 8004de8:	f002 f8a0 	bl	8006f2c <SEGGER_SYSVIEW_Warn>
    return;
 8004dec:	e044      	b.n	8004e78 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 8004dee:	4b25      	ldr	r3, [pc, #148]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004df0:	681a      	ldr	r2, [r3, #0]
 8004df2:	4926      	ldr	r1, [pc, #152]	@ (8004e8c <SYSVIEW_AddTask+0xcc>)
 8004df4:	4613      	mov	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	440b      	add	r3, r1
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8004e02:	4b20      	ldr	r3, [pc, #128]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4921      	ldr	r1, [pc, #132]	@ (8004e8c <SYSVIEW_AddTask+0xcc>)
 8004e08:	4613      	mov	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	4413      	add	r3, r2
 8004e0e:	009b      	lsls	r3, r3, #2
 8004e10:	440b      	add	r3, r1
 8004e12:	3304      	adds	r3, #4
 8004e14:	68ba      	ldr	r2, [r7, #8]
 8004e16:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8004e18:	4b1a      	ldr	r3, [pc, #104]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	491b      	ldr	r1, [pc, #108]	@ (8004e8c <SYSVIEW_AddTask+0xcc>)
 8004e1e:	4613      	mov	r3, r2
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	4413      	add	r3, r2
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	440b      	add	r3, r1
 8004e28:	3308      	adds	r3, #8
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 8004e2e:	4b15      	ldr	r3, [pc, #84]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	4916      	ldr	r1, [pc, #88]	@ (8004e8c <SYSVIEW_AddTask+0xcc>)
 8004e34:	4613      	mov	r3, r2
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	4413      	add	r3, r2
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	440b      	add	r3, r1
 8004e3e:	330c      	adds	r3, #12
 8004e40:	683a      	ldr	r2, [r7, #0]
 8004e42:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8004e44:	4b0f      	ldr	r3, [pc, #60]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	4910      	ldr	r1, [pc, #64]	@ (8004e8c <SYSVIEW_AddTask+0xcc>)
 8004e4a:	4613      	mov	r3, r2
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	009b      	lsls	r3, r3, #2
 8004e52:	440b      	add	r3, r1
 8004e54:	3310      	adds	r3, #16
 8004e56:	69ba      	ldr	r2, [r7, #24]
 8004e58:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	3301      	adds	r3, #1
 8004e60:	4a08      	ldr	r2, [pc, #32]	@ (8004e84 <SYSVIEW_AddTask+0xc4>)
 8004e62:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	9300      	str	r3, [sp, #0]
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	687a      	ldr	r2, [r7, #4]
 8004e6c:	68b9      	ldr	r1, [r7, #8]
 8004e6e:	68f8      	ldr	r0, [r7, #12]
 8004e70:	f000 f8ca 	bl	8005008 <SYSVIEW_SendTaskInfo>
 8004e74:	e000      	b.n	8004e78 <SYSVIEW_AddTask+0xb8>
    return;
 8004e76:	bf00      	nop

}
 8004e78:	3710      	adds	r7, #16
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	080071a4 	.word	0x080071a4
 8004e84:	2004b2d8 	.word	0x2004b2d8
 8004e88:	080071ac 	.word	0x080071ac
 8004e8c:	2004b238 	.word	0x2004b238

08004e90 <SYSVIEW_DeleteTask>:
*       SYSVIEW_DeleteTask()
*
*  Function description
*    Delete a task from the internal list.
*/
void SYSVIEW_DeleteTask(U32 xHandle) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  unsigned n;
  
  if (_NumTasks == 0) {
 8004e98:	4b59      	ldr	r3, [pc, #356]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 80ab 	beq.w	8004ff8 <SYSVIEW_DeleteTask+0x168>
    return; // Early out
  }  
  for (n = 0; n < _NumTasks; n++) {
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
 8004ea6:	e00d      	b.n	8004ec4 <SYSVIEW_DeleteTask+0x34>
    if (_aTasks[n].xHandle == xHandle) {
 8004ea8:	4956      	ldr	r1, [pc, #344]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004eaa:	68fa      	ldr	r2, [r7, #12]
 8004eac:	4613      	mov	r3, r2
 8004eae:	009b      	lsls	r3, r3, #2
 8004eb0:	4413      	add	r3, r2
 8004eb2:	009b      	lsls	r3, r3, #2
 8004eb4:	440b      	add	r3, r1
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	687a      	ldr	r2, [r7, #4]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d008      	beq.n	8004ed0 <SYSVIEW_DeleteTask+0x40>
  for (n = 0; n < _NumTasks; n++) {
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	60fb      	str	r3, [r7, #12]
 8004ec4:	4b4e      	ldr	r3, [pc, #312]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	429a      	cmp	r2, r3
 8004ecc:	d3ec      	bcc.n	8004ea8 <SYSVIEW_DeleteTask+0x18>
 8004ece:	e000      	b.n	8004ed2 <SYSVIEW_DeleteTask+0x42>
      break;
 8004ed0:	bf00      	nop
    }
  }
  if (n == (_NumTasks - 1)) {  
 8004ed2:	4b4b      	ldr	r3, [pc, #300]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3b01      	subs	r3, #1
 8004ed8:	68fa      	ldr	r2, [r7, #12]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d111      	bne.n	8004f02 <SYSVIEW_DeleteTask+0x72>
    //
    // Task is last item in list.
    // Simply zero the item and decrement number of tasks.
    //
    memset(&_aTasks[n], 0, sizeof(_aTasks[n]));
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	4613      	mov	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4413      	add	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4a46      	ldr	r2, [pc, #280]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004eea:	4413      	add	r3, r2
 8004eec:	2214      	movs	r2, #20
 8004eee:	2100      	movs	r1, #0
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	f002 f887 	bl	8007004 <memset>
    _NumTasks--;
 8004ef6:	4b42      	ldr	r3, [pc, #264]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	3b01      	subs	r3, #1
 8004efc:	4a40      	ldr	r2, [pc, #256]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004efe:	6013      	str	r3, [r2, #0]
 8004f00:	e07b      	b.n	8004ffa <SYSVIEW_DeleteTask+0x16a>
  } else if (n < _NumTasks) {
 8004f02:	4b3f      	ldr	r3, [pc, #252]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	68fa      	ldr	r2, [r7, #12]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d276      	bcs.n	8004ffa <SYSVIEW_DeleteTask+0x16a>
    //
    // Task is in the middle of the list.
    // Move last item to current position and decrement number of tasks.
    // Order of tasks does not really matter, so no need to move all following items.
    //
    _aTasks[n].xHandle             = _aTasks[_NumTasks - 1].xHandle;
 8004f0c:	4b3c      	ldr	r3, [pc, #240]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	1e5a      	subs	r2, r3, #1
 8004f12:	493c      	ldr	r1, [pc, #240]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f14:	4613      	mov	r3, r2
 8004f16:	009b      	lsls	r3, r3, #2
 8004f18:	4413      	add	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	440b      	add	r3, r1
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	4838      	ldr	r0, [pc, #224]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f22:	68fa      	ldr	r2, [r7, #12]
 8004f24:	4613      	mov	r3, r2
 8004f26:	009b      	lsls	r3, r3, #2
 8004f28:	4413      	add	r3, r2
 8004f2a:	009b      	lsls	r3, r3, #2
 8004f2c:	4403      	add	r3, r0
 8004f2e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pcTaskName          = _aTasks[_NumTasks - 1].pcTaskName;
 8004f30:	4b33      	ldr	r3, [pc, #204]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	1e5a      	subs	r2, r3, #1
 8004f36:	4933      	ldr	r1, [pc, #204]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	3304      	adds	r3, #4
 8004f44:	6819      	ldr	r1, [r3, #0]
 8004f46:	482f      	ldr	r0, [pc, #188]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f48:	68fa      	ldr	r2, [r7, #12]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	009b      	lsls	r3, r3, #2
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	4403      	add	r3, r0
 8004f54:	3304      	adds	r3, #4
 8004f56:	6019      	str	r1, [r3, #0]
    _aTasks[n].uxCurrentPriority   = _aTasks[_NumTasks - 1].uxCurrentPriority;
 8004f58:	4b29      	ldr	r3, [pc, #164]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	1e5a      	subs	r2, r3, #1
 8004f5e:	4929      	ldr	r1, [pc, #164]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f60:	4613      	mov	r3, r2
 8004f62:	009b      	lsls	r3, r3, #2
 8004f64:	4413      	add	r3, r2
 8004f66:	009b      	lsls	r3, r3, #2
 8004f68:	440b      	add	r3, r1
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	6819      	ldr	r1, [r3, #0]
 8004f6e:	4825      	ldr	r0, [pc, #148]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4613      	mov	r3, r2
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	4413      	add	r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	4403      	add	r3, r0
 8004f7c:	3308      	adds	r3, #8
 8004f7e:	6019      	str	r1, [r3, #0]
    _aTasks[n].pxStack             = _aTasks[_NumTasks - 1].pxStack;
 8004f80:	4b1f      	ldr	r3, [pc, #124]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	1e5a      	subs	r2, r3, #1
 8004f86:	491f      	ldr	r1, [pc, #124]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f88:	4613      	mov	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	330c      	adds	r3, #12
 8004f94:	6819      	ldr	r1, [r3, #0]
 8004f96:	481b      	ldr	r0, [pc, #108]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	009b      	lsls	r3, r3, #2
 8004fa2:	4403      	add	r3, r0
 8004fa4:	330c      	adds	r3, #12
 8004fa6:	6019      	str	r1, [r3, #0]
    _aTasks[n].uStackHighWaterMark = _aTasks[_NumTasks - 1].uStackHighWaterMark;
 8004fa8:	4b15      	ldr	r3, [pc, #84]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	1e5a      	subs	r2, r3, #1
 8004fae:	4915      	ldr	r1, [pc, #84]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004fb0:	4613      	mov	r3, r2
 8004fb2:	009b      	lsls	r3, r3, #2
 8004fb4:	4413      	add	r3, r2
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	440b      	add	r3, r1
 8004fba:	3310      	adds	r3, #16
 8004fbc:	6819      	ldr	r1, [r3, #0]
 8004fbe:	4811      	ldr	r0, [pc, #68]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004fc0:	68fa      	ldr	r2, [r7, #12]
 8004fc2:	4613      	mov	r3, r2
 8004fc4:	009b      	lsls	r3, r3, #2
 8004fc6:	4413      	add	r3, r2
 8004fc8:	009b      	lsls	r3, r3, #2
 8004fca:	4403      	add	r3, r0
 8004fcc:	3310      	adds	r3, #16
 8004fce:	6019      	str	r1, [r3, #0]
    memset(&_aTasks[_NumTasks - 1], 0, sizeof(_aTasks[_NumTasks - 1]));
 8004fd0:	4b0b      	ldr	r3, [pc, #44]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	1e5a      	subs	r2, r3, #1
 8004fd6:	4613      	mov	r3, r2
 8004fd8:	009b      	lsls	r3, r3, #2
 8004fda:	4413      	add	r3, r2
 8004fdc:	009b      	lsls	r3, r3, #2
 8004fde:	4a09      	ldr	r2, [pc, #36]	@ (8005004 <SYSVIEW_DeleteTask+0x174>)
 8004fe0:	4413      	add	r3, r2
 8004fe2:	2214      	movs	r2, #20
 8004fe4:	2100      	movs	r1, #0
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f002 f80c 	bl	8007004 <memset>
    _NumTasks--;
 8004fec:	4b04      	ldr	r3, [pc, #16]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	4a03      	ldr	r2, [pc, #12]	@ (8005000 <SYSVIEW_DeleteTask+0x170>)
 8004ff4:	6013      	str	r3, [r2, #0]
 8004ff6:	e000      	b.n	8004ffa <SYSVIEW_DeleteTask+0x16a>
    return; // Early out
 8004ff8:	bf00      	nop
  }
}
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	2004b2d8 	.word	0x2004b2d8
 8005004:	2004b238 	.word	0x2004b238

08005008 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 8005008:	b580      	push	{r7, lr}
 800500a:	b08a      	sub	sp, #40	@ 0x28
 800500c:	af00      	add	r7, sp, #0
 800500e:	60f8      	str	r0, [r7, #12]
 8005010:	60b9      	str	r1, [r7, #8]
 8005012:	607a      	str	r2, [r7, #4]
 8005014:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 8005016:	f107 0314 	add.w	r3, r7, #20
 800501a:	2214      	movs	r2, #20
 800501c:	2100      	movs	r1, #0
 800501e:	4618      	mov	r0, r3
 8005020:	f001 fff0 	bl	8007004 <memset>
  TaskInfo.TaskID     = TaskID;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8005034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005036:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 8005038:	f107 0314 	add.w	r3, r7, #20
 800503c:	4618      	mov	r0, r3
 800503e:	f001 fbcb 	bl	80067d8 <SEGGER_SYSVIEW_SendTaskInfo>
}
 8005042:	bf00      	nop
 8005044:	3728      	adds	r7, #40	@ 0x28
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
	...

0800504c <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 800504c:	b480      	push	{r7}
 800504e:	b083      	sub	sp, #12
 8005050:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8005052:	4b24      	ldr	r3, [pc, #144]	@ (80050e4 <_DoInit+0x98>)
 8005054:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2203      	movs	r2, #3
 800505a:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2203      	movs	r2, #3
 8005060:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a20      	ldr	r2, [pc, #128]	@ (80050e8 <_DoInit+0x9c>)
 8005066:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a20      	ldr	r2, [pc, #128]	@ (80050ec <_DoInit+0xa0>)
 800506c:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005074:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2200      	movs	r2, #0
 800507a:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2200      	movs	r2, #0
 8005080:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4a17      	ldr	r2, [pc, #92]	@ (80050e8 <_DoInit+0x9c>)
 800508c:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	4a17      	ldr	r2, [pc, #92]	@ (80050f0 <_DoInit+0xa4>)
 8005092:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2210      	movs	r2, #16
 8005098:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2200      	movs	r2, #0
 800509e:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3307      	adds	r3, #7
 80050b0:	4a10      	ldr	r2, [pc, #64]	@ (80050f4 <_DoInit+0xa8>)
 80050b2:	6810      	ldr	r0, [r2, #0]
 80050b4:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050b6:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	4a0e      	ldr	r2, [pc, #56]	@ (80050f8 <_DoInit+0xac>)
 80050be:	6810      	ldr	r0, [r2, #0]
 80050c0:	6018      	str	r0, [r3, #0]
 80050c2:	8891      	ldrh	r1, [r2, #4]
 80050c4:	7992      	ldrb	r2, [r2, #6]
 80050c6:	8099      	strh	r1, [r3, #4]
 80050c8:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050ca:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2220      	movs	r2, #32
 80050d2:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80050d4:	f3bf 8f5f 	dmb	sy
}
 80050d8:	bf00      	nop
 80050da:	370c      	adds	r7, #12
 80050dc:	46bd      	mov	sp, r7
 80050de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e2:	4770      	bx	lr
 80050e4:	2004b2dc 	.word	0x2004b2dc
 80050e8:	080071fc 	.word	0x080071fc
 80050ec:	2004b384 	.word	0x2004b384
 80050f0:	2004b784 	.word	0x2004b784
 80050f4:	08007208 	.word	0x08007208
 80050f8:	0800720c 	.word	0x0800720c

080050fc <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b08c      	sub	sp, #48	@ 0x30
 8005100:	af00      	add	r7, sp, #0
 8005102:	60f8      	str	r0, [r7, #12]
 8005104:	60b9      	str	r1, [r7, #8]
 8005106:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8005108:	4b3e      	ldr	r3, [pc, #248]	@ (8005204 <SEGGER_RTT_ReadNoLock+0x108>)
 800510a:	623b      	str	r3, [r7, #32]
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	781b      	ldrb	r3, [r3, #0]
 8005110:	b2db      	uxtb	r3, r3
 8005112:	2b00      	cmp	r3, #0
 8005114:	d101      	bne.n	800511a <SEGGER_RTT_ReadNoLock+0x1e>
 8005116:	f7ff ff99 	bl	800504c <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800511a:	68fa      	ldr	r2, [r7, #12]
 800511c:	4613      	mov	r3, r2
 800511e:	005b      	lsls	r3, r3, #1
 8005120:	4413      	add	r3, r2
 8005122:	00db      	lsls	r3, r3, #3
 8005124:	3360      	adds	r3, #96	@ 0x60
 8005126:	4a37      	ldr	r2, [pc, #220]	@ (8005204 <SEGGER_RTT_ReadNoLock+0x108>)
 8005128:	4413      	add	r3, r2
 800512a:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	691b      	ldr	r3, [r3, #16]
 8005134:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	68db      	ldr	r3, [r3, #12]
 800513a:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8005140:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	429a      	cmp	r2, r3
 8005146:	d92b      	bls.n	80051a0 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	689a      	ldr	r2, [r3, #8]
 800514c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514e:	1ad3      	subs	r3, r2, r3
 8005150:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8005152:	697a      	ldr	r2, [r7, #20]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4293      	cmp	r3, r2
 8005158:	bf28      	it	cs
 800515a:	4613      	movcs	r3, r2
 800515c:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	685a      	ldr	r2, [r3, #4]
 8005162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005164:	4413      	add	r3, r2
 8005166:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	6939      	ldr	r1, [r7, #16]
 800516c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800516e:	f001 ff75 	bl	800705c <memcpy>
    NumBytesRead += NumBytesRem;
 8005172:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800517a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	4413      	add	r3, r2
 8005180:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8005182:	687a      	ldr	r2, [r7, #4]
 8005184:	697b      	ldr	r3, [r7, #20]
 8005186:	1ad3      	subs	r3, r2, r3
 8005188:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800518a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	4413      	add	r3, r2
 8005190:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005198:	429a      	cmp	r2, r3
 800519a:	d101      	bne.n	80051a0 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800519c:	2300      	movs	r3, #0
 800519e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80051a0:	69ba      	ldr	r2, [r7, #24]
 80051a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	4293      	cmp	r3, r2
 80051ae:	bf28      	it	cs
 80051b0:	4613      	movcs	r3, r2
 80051b2:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d019      	beq.n	80051ee <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	685a      	ldr	r2, [r3, #4]
 80051be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051c0:	4413      	add	r3, r2
 80051c2:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80051c4:	697a      	ldr	r2, [r7, #20]
 80051c6:	6939      	ldr	r1, [r7, #16]
 80051c8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80051ca:	f001 ff47 	bl	800705c <memcpy>
    NumBytesRead += NumBytesRem;
 80051ce:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	4413      	add	r3, r2
 80051d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80051d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051d8:	697b      	ldr	r3, [r7, #20]
 80051da:	4413      	add	r3, r2
 80051dc:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	697b      	ldr	r3, [r7, #20]
 80051e2:	1ad3      	subs	r3, r2, r3
 80051e4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80051e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051e8:	697b      	ldr	r3, [r7, #20]
 80051ea:	4413      	add	r3, r2
 80051ec:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 80051ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d002      	beq.n	80051fa <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80051f8:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 80051fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3730      	adds	r7, #48	@ 0x30
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	2004b2dc 	.word	0x2004b2dc

08005208 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005208:	b580      	push	{r7, lr}
 800520a:	b088      	sub	sp, #32
 800520c:	af00      	add	r7, sp, #0
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	607a      	str	r2, [r7, #4]
 8005214:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8005216:	4b3d      	ldr	r3, [pc, #244]	@ (800530c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005218:	61bb      	str	r3, [r7, #24]
 800521a:	69bb      	ldr	r3, [r7, #24]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	b2db      	uxtb	r3, r3
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <SEGGER_RTT_AllocUpBuffer+0x20>
 8005224:	f7ff ff12 	bl	800504c <_DoInit>
  SEGGER_RTT_LOCK();
 8005228:	f3ef 8311 	mrs	r3, BASEPRI
 800522c:	f04f 0120 	mov.w	r1, #32
 8005230:	f381 8811 	msr	BASEPRI, r1
 8005234:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005236:	4b35      	ldr	r3, [pc, #212]	@ (800530c <SEGGER_RTT_AllocUpBuffer+0x104>)
 8005238:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800523a:	2300      	movs	r3, #0
 800523c:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800523e:	6939      	ldr	r1, [r7, #16]
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	1c5a      	adds	r2, r3, #1
 8005244:	4613      	mov	r3, r2
 8005246:	005b      	lsls	r3, r3, #1
 8005248:	4413      	add	r3, r2
 800524a:	00db      	lsls	r3, r3, #3
 800524c:	440b      	add	r3, r1
 800524e:	3304      	adds	r3, #4
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d008      	beq.n	8005268 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	3301      	adds	r3, #1
 800525a:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	691b      	ldr	r3, [r3, #16]
 8005260:	69fa      	ldr	r2, [r7, #28]
 8005262:	429a      	cmp	r2, r3
 8005264:	dbeb      	blt.n	800523e <SEGGER_RTT_AllocUpBuffer+0x36>
 8005266:	e000      	b.n	800526a <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8005268:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	691b      	ldr	r3, [r3, #16]
 800526e:	69fa      	ldr	r2, [r7, #28]
 8005270:	429a      	cmp	r2, r3
 8005272:	da3f      	bge.n	80052f4 <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8005274:	6939      	ldr	r1, [r7, #16]
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	4613      	mov	r3, r2
 800527c:	005b      	lsls	r3, r3, #1
 800527e:	4413      	add	r3, r2
 8005280:	00db      	lsls	r3, r3, #3
 8005282:	440b      	add	r3, r1
 8005284:	68fa      	ldr	r2, [r7, #12]
 8005286:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8005288:	6939      	ldr	r1, [r7, #16]
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	4613      	mov	r3, r2
 8005290:	005b      	lsls	r3, r3, #1
 8005292:	4413      	add	r3, r2
 8005294:	00db      	lsls	r3, r3, #3
 8005296:	440b      	add	r3, r1
 8005298:	3304      	adds	r3, #4
 800529a:	68ba      	ldr	r2, [r7, #8]
 800529c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800529e:	6939      	ldr	r1, [r7, #16]
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	4613      	mov	r3, r2
 80052a4:	005b      	lsls	r3, r3, #1
 80052a6:	4413      	add	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	440b      	add	r3, r1
 80052ac:	3320      	adds	r3, #32
 80052ae:	687a      	ldr	r2, [r7, #4]
 80052b0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 80052b2:	6939      	ldr	r1, [r7, #16]
 80052b4:	69fa      	ldr	r2, [r7, #28]
 80052b6:	4613      	mov	r3, r2
 80052b8:	005b      	lsls	r3, r3, #1
 80052ba:	4413      	add	r3, r2
 80052bc:	00db      	lsls	r3, r3, #3
 80052be:	440b      	add	r3, r1
 80052c0:	3328      	adds	r3, #40	@ 0x28
 80052c2:	2200      	movs	r2, #0
 80052c4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 80052c6:	6939      	ldr	r1, [r7, #16]
 80052c8:	69fa      	ldr	r2, [r7, #28]
 80052ca:	4613      	mov	r3, r2
 80052cc:	005b      	lsls	r3, r3, #1
 80052ce:	4413      	add	r3, r2
 80052d0:	00db      	lsls	r3, r3, #3
 80052d2:	440b      	add	r3, r1
 80052d4:	3324      	adds	r3, #36	@ 0x24
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 80052da:	6939      	ldr	r1, [r7, #16]
 80052dc:	69fa      	ldr	r2, [r7, #28]
 80052de:	4613      	mov	r3, r2
 80052e0:	005b      	lsls	r3, r3, #1
 80052e2:	4413      	add	r3, r2
 80052e4:	00db      	lsls	r3, r3, #3
 80052e6:	440b      	add	r3, r1
 80052e8:	332c      	adds	r3, #44	@ 0x2c
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80052ee:	f3bf 8f5f 	dmb	sy
 80052f2:	e002      	b.n	80052fa <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 80052f4:	f04f 33ff 	mov.w	r3, #4294967295
 80052f8:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8005300:	69fb      	ldr	r3, [r7, #28]
}
 8005302:	4618      	mov	r0, r3
 8005304:	3720      	adds	r7, #32
 8005306:	46bd      	mov	sp, r7
 8005308:	bd80      	pop	{r7, pc}
 800530a:	bf00      	nop
 800530c:	2004b2dc 	.word	0x2004b2dc

08005310 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8005310:	b580      	push	{r7, lr}
 8005312:	b088      	sub	sp, #32
 8005314:	af00      	add	r7, sp, #0
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	607a      	str	r2, [r7, #4]
 800531c:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800531e:	4b33      	ldr	r3, [pc, #204]	@ (80053ec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	69bb      	ldr	r3, [r7, #24]
 8005324:	781b      	ldrb	r3, [r3, #0]
 8005326:	b2db      	uxtb	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d101      	bne.n	8005330 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800532c:	f7ff fe8e 	bl	800504c <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((unsigned char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8005330:	4b2e      	ldr	r3, [pc, #184]	@ (80053ec <SEGGER_RTT_ConfigDownBuffer+0xdc>)
 8005332:	617b      	str	r3, [r7, #20]
  if (BufferIndex < (unsigned)pRTTCB->MaxNumDownBuffers) {
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	695b      	ldr	r3, [r3, #20]
 8005338:	461a      	mov	r2, r3
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4293      	cmp	r3, r2
 800533e:	d24d      	bcs.n	80053dc <SEGGER_RTT_ConfigDownBuffer+0xcc>
    SEGGER_RTT_LOCK();
 8005340:	f3ef 8311 	mrs	r3, BASEPRI
 8005344:	f04f 0120 	mov.w	r1, #32
 8005348:	f381 8811 	msr	BASEPRI, r1
 800534c:	613b      	str	r3, [r7, #16]
    if (BufferIndex > 0u) {
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d031      	beq.n	80053b8 <SEGGER_RTT_ConfigDownBuffer+0xa8>
      pRTTCB->aDown[BufferIndex].sName        = sName;
 8005354:	6979      	ldr	r1, [r7, #20]
 8005356:	68fa      	ldr	r2, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	005b      	lsls	r3, r3, #1
 800535c:	4413      	add	r3, r2
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	440b      	add	r3, r1
 8005362:	3360      	adds	r3, #96	@ 0x60
 8005364:	68ba      	ldr	r2, [r7, #8]
 8005366:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].pBuffer      = (char*)pBuffer;
 8005368:	6979      	ldr	r1, [r7, #20]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	4613      	mov	r3, r2
 800536e:	005b      	lsls	r3, r3, #1
 8005370:	4413      	add	r3, r2
 8005372:	00db      	lsls	r3, r3, #3
 8005374:	440b      	add	r3, r1
 8005376:	3364      	adds	r3, #100	@ 0x64
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].SizeOfBuffer = BufferSize;
 800537c:	6979      	ldr	r1, [r7, #20]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	4613      	mov	r3, r2
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	4413      	add	r3, r2
 8005386:	00db      	lsls	r3, r3, #3
 8005388:	440b      	add	r3, r1
 800538a:	3368      	adds	r3, #104	@ 0x68
 800538c:	683a      	ldr	r2, [r7, #0]
 800538e:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].RdOff        = 0u;
 8005390:	6979      	ldr	r1, [r7, #20]
 8005392:	68fa      	ldr	r2, [r7, #12]
 8005394:	4613      	mov	r3, r2
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	4413      	add	r3, r2
 800539a:	00db      	lsls	r3, r3, #3
 800539c:	440b      	add	r3, r1
 800539e:	3370      	adds	r3, #112	@ 0x70
 80053a0:	2200      	movs	r2, #0
 80053a2:	601a      	str	r2, [r3, #0]
      pRTTCB->aDown[BufferIndex].WrOff        = 0u;
 80053a4:	6979      	ldr	r1, [r7, #20]
 80053a6:	68fa      	ldr	r2, [r7, #12]
 80053a8:	4613      	mov	r3, r2
 80053aa:	005b      	lsls	r3, r3, #1
 80053ac:	4413      	add	r3, r2
 80053ae:	00db      	lsls	r3, r3, #3
 80053b0:	440b      	add	r3, r1
 80053b2:	336c      	adds	r3, #108	@ 0x6c
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]
    }
    pRTTCB->aDown[BufferIndex].Flags          = Flags;
 80053b8:	6979      	ldr	r1, [r7, #20]
 80053ba:	68fa      	ldr	r2, [r7, #12]
 80053bc:	4613      	mov	r3, r2
 80053be:	005b      	lsls	r3, r3, #1
 80053c0:	4413      	add	r3, r2
 80053c2:	00db      	lsls	r3, r3, #3
 80053c4:	440b      	add	r3, r1
 80053c6:	3374      	adds	r3, #116	@ 0x74
 80053c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80053ca:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80053cc:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 80053d6:	2300      	movs	r3, #0
 80053d8:	61fb      	str	r3, [r7, #28]
 80053da:	e002      	b.n	80053e2 <SEGGER_RTT_ConfigDownBuffer+0xd2>
  } else {
    r = -1;
 80053dc:	f04f 33ff 	mov.w	r3, #4294967295
 80053e0:	61fb      	str	r3, [r7, #28]
  }
  return r;
 80053e2:	69fb      	ldr	r3, [r7, #28]
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3720      	adds	r7, #32
 80053e8:	46bd      	mov	sp, r7
 80053ea:	bd80      	pop	{r7, pc}
 80053ec:	2004b2dc 	.word	0x2004b2dc

080053f0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 80053f0:	b480      	push	{r7}
 80053f2:	b087      	sub	sp, #28
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 80053fc:	2300      	movs	r3, #0
 80053fe:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005400:	e002      	b.n	8005408 <_EncodeStr+0x18>
    Len++;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	3301      	adds	r3, #1
 8005406:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8005408:	68ba      	ldr	r2, [r7, #8]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	4413      	add	r3, r2
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d1f6      	bne.n	8005402 <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	429a      	cmp	r2, r3
 800541a:	d901      	bls.n	8005420 <_EncodeStr+0x30>
    Len = Limit;
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	2bfe      	cmp	r3, #254	@ 0xfe
 8005424:	d806      	bhi.n	8005434 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	1c5a      	adds	r2, r3, #1
 800542a:	60fa      	str	r2, [r7, #12]
 800542c:	693a      	ldr	r2, [r7, #16]
 800542e:	b2d2      	uxtb	r2, r2
 8005430:	701a      	strb	r2, [r3, #0]
 8005432:	e011      	b.n	8005458 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	1c5a      	adds	r2, r3, #1
 8005438:	60fa      	str	r2, [r7, #12]
 800543a:	22ff      	movs	r2, #255	@ 0xff
 800543c:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	1c5a      	adds	r2, r3, #1
 8005442:	60fa      	str	r2, [r7, #12]
 8005444:	693a      	ldr	r2, [r7, #16]
 8005446:	b2d2      	uxtb	r2, r2
 8005448:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	0a19      	lsrs	r1, r3, #8
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	1c5a      	adds	r2, r3, #1
 8005452:	60fa      	str	r2, [r7, #12]
 8005454:	b2ca      	uxtb	r2, r1
 8005456:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 8005458:	2300      	movs	r3, #0
 800545a:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 800545c:	e00a      	b.n	8005474 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 800545e:	68ba      	ldr	r2, [r7, #8]
 8005460:	1c53      	adds	r3, r2, #1
 8005462:	60bb      	str	r3, [r7, #8]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	1c59      	adds	r1, r3, #1
 8005468:	60f9      	str	r1, [r7, #12]
 800546a:	7812      	ldrb	r2, [r2, #0]
 800546c:	701a      	strb	r2, [r3, #0]
    n++;
 800546e:	697b      	ldr	r3, [r7, #20]
 8005470:	3301      	adds	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 8005474:	697a      	ldr	r2, [r7, #20]
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	429a      	cmp	r2, r3
 800547a:	d3f0      	bcc.n	800545e <_EncodeStr+0x6e>
  }
  return pPayload;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	4618      	mov	r0, r3
 8005480:	371c      	adds	r7, #28
 8005482:	46bd      	mov	sp, r7
 8005484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005488:	4770      	bx	lr

0800548a <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800548a:	b480      	push	{r7}
 800548c:	b083      	sub	sp, #12
 800548e:	af00      	add	r7, sp, #0
 8005490:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	3304      	adds	r3, #4
}
 8005496:	4618      	mov	r0, r3
 8005498:	370c      	adds	r7, #12
 800549a:	46bd      	mov	sp, r7
 800549c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054a0:	4770      	bx	lr
	...

080054a4 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80054a4:	b580      	push	{r7, lr}
 80054a6:	b082      	sub	sp, #8
 80054a8:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80054aa:	4b35      	ldr	r3, [pc, #212]	@ (8005580 <_HandleIncomingPacket+0xdc>)
 80054ac:	7e1b      	ldrb	r3, [r3, #24]
 80054ae:	4618      	mov	r0, r3
 80054b0:	1cfb      	adds	r3, r7, #3
 80054b2:	2201      	movs	r2, #1
 80054b4:	4619      	mov	r1, r3
 80054b6:	f7ff fe21 	bl	80050fc <SEGGER_RTT_ReadNoLock>
 80054ba:	4603      	mov	r3, r0
 80054bc:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	dd59      	ble.n	8005578 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 80054c4:	78fb      	ldrb	r3, [r7, #3]
 80054c6:	2b80      	cmp	r3, #128	@ 0x80
 80054c8:	d032      	beq.n	8005530 <_HandleIncomingPacket+0x8c>
 80054ca:	2b80      	cmp	r3, #128	@ 0x80
 80054cc:	dc42      	bgt.n	8005554 <_HandleIncomingPacket+0xb0>
 80054ce:	2b07      	cmp	r3, #7
 80054d0:	dc16      	bgt.n	8005500 <_HandleIncomingPacket+0x5c>
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	dd3e      	ble.n	8005554 <_HandleIncomingPacket+0xb0>
 80054d6:	3b01      	subs	r3, #1
 80054d8:	2b06      	cmp	r3, #6
 80054da:	d83b      	bhi.n	8005554 <_HandleIncomingPacket+0xb0>
 80054dc:	a201      	add	r2, pc, #4	@ (adr r2, 80054e4 <_HandleIncomingPacket+0x40>)
 80054de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054e2:	bf00      	nop
 80054e4:	08005507 	.word	0x08005507
 80054e8:	0800550d 	.word	0x0800550d
 80054ec:	08005513 	.word	0x08005513
 80054f0:	08005519 	.word	0x08005519
 80054f4:	0800551f 	.word	0x0800551f
 80054f8:	08005525 	.word	0x08005525
 80054fc:	0800552b 	.word	0x0800552b
 8005500:	2b7f      	cmp	r3, #127	@ 0x7f
 8005502:	d034      	beq.n	800556e <_HandleIncomingPacket+0xca>
 8005504:	e026      	b.n	8005554 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8005506:	f000 ffed 	bl	80064e4 <SEGGER_SYSVIEW_Start>
      break;
 800550a:	e035      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800550c:	f001 f8a4 	bl	8006658 <SEGGER_SYSVIEW_Stop>
      break;
 8005510:	e032      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8005512:	f001 fa7d 	bl	8006a10 <SEGGER_SYSVIEW_RecordSystime>
      break;
 8005516:	e02f      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8005518:	f001 fa42 	bl	80069a0 <SEGGER_SYSVIEW_SendTaskList>
      break;
 800551c:	e02c      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800551e:	f001 f8c1 	bl	80066a4 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8005522:	e029      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8005524:	f001 fcb0 	bl	8006e88 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8005528:	e026      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800552a:	f001 fc8f 	bl	8006e4c <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800552e:	e023      	b.n	8005578 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8005530:	4b13      	ldr	r3, [pc, #76]	@ (8005580 <_HandleIncomingPacket+0xdc>)
 8005532:	7e1b      	ldrb	r3, [r3, #24]
 8005534:	4618      	mov	r0, r3
 8005536:	1cfb      	adds	r3, r7, #3
 8005538:	2201      	movs	r2, #1
 800553a:	4619      	mov	r1, r3
 800553c:	f7ff fdde 	bl	80050fc <SEGGER_RTT_ReadNoLock>
 8005540:	4603      	mov	r3, r0
 8005542:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	dd13      	ble.n	8005572 <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800554a:	78fb      	ldrb	r3, [r7, #3]
 800554c:	4618      	mov	r0, r3
 800554e:	f001 fbfd 	bl	8006d4c <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8005552:	e00e      	b.n	8005572 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8005554:	78fb      	ldrb	r3, [r7, #3]
 8005556:	b25b      	sxtb	r3, r3
 8005558:	2b00      	cmp	r3, #0
 800555a:	da0c      	bge.n	8005576 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800555c:	4b08      	ldr	r3, [pc, #32]	@ (8005580 <_HandleIncomingPacket+0xdc>)
 800555e:	7e1b      	ldrb	r3, [r3, #24]
 8005560:	4618      	mov	r0, r3
 8005562:	1cfb      	adds	r3, r7, #3
 8005564:	2201      	movs	r2, #1
 8005566:	4619      	mov	r1, r3
 8005568:	f7ff fdc8 	bl	80050fc <SEGGER_RTT_ReadNoLock>
      }
      break;
 800556c:	e003      	b.n	8005576 <_HandleIncomingPacket+0xd2>
      break;
 800556e:	bf00      	nop
 8005570:	e002      	b.n	8005578 <_HandleIncomingPacket+0xd4>
      break;
 8005572:	bf00      	nop
 8005574:	e000      	b.n	8005578 <_HandleIncomingPacket+0xd4>
      break;
 8005576:	bf00      	nop
    }
  }
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	2004c79c 	.word	0x2004c79c

08005584 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8005584:	b580      	push	{r7, lr}
 8005586:	b08c      	sub	sp, #48	@ 0x30
 8005588:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800558a:	2301      	movs	r3, #1
 800558c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800558e:	1d3b      	adds	r3, r7, #4
 8005590:	3301      	adds	r3, #1
 8005592:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8005594:	69fb      	ldr	r3, [r7, #28]
 8005596:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005598:	4b31      	ldr	r3, [pc, #196]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 800559a:	695b      	ldr	r3, [r3, #20]
 800559c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800559e:	e00b      	b.n	80055b8 <_TrySendOverflowPacket+0x34>
 80055a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055a2:	b2da      	uxtb	r2, r3
 80055a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055a6:	1c59      	adds	r1, r3, #1
 80055a8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80055aa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055ae:	b2d2      	uxtb	r2, r2
 80055b0:	701a      	strb	r2, [r3, #0]
 80055b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055b4:	09db      	lsrs	r3, r3, #7
 80055b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80055b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ba:	2b7f      	cmp	r3, #127	@ 0x7f
 80055bc:	d8f0      	bhi.n	80055a0 <_TrySendOverflowPacket+0x1c>
 80055be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80055c4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]
 80055ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80055cc:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 80055ce:	4b25      	ldr	r3, [pc, #148]	@ (8005664 <_TrySendOverflowPacket+0xe0>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 80055d4:	4b22      	ldr	r3, [pc, #136]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 80055d6:	68db      	ldr	r3, [r3, #12]
 80055d8:	69ba      	ldr	r2, [r7, #24]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 80055de:	69fb      	ldr	r3, [r7, #28]
 80055e0:	627b      	str	r3, [r7, #36]	@ 0x24
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	623b      	str	r3, [r7, #32]
 80055e6:	e00b      	b.n	8005600 <_TrySendOverflowPacket+0x7c>
 80055e8:	6a3b      	ldr	r3, [r7, #32]
 80055ea:	b2da      	uxtb	r2, r3
 80055ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ee:	1c59      	adds	r1, r3, #1
 80055f0:	6279      	str	r1, [r7, #36]	@ 0x24
 80055f2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80055f6:	b2d2      	uxtb	r2, r2
 80055f8:	701a      	strb	r2, [r3, #0]
 80055fa:	6a3b      	ldr	r3, [r7, #32]
 80055fc:	09db      	lsrs	r3, r3, #7
 80055fe:	623b      	str	r3, [r7, #32]
 8005600:	6a3b      	ldr	r3, [r7, #32]
 8005602:	2b7f      	cmp	r3, #127	@ 0x7f
 8005604:	d8f0      	bhi.n	80055e8 <_TrySendOverflowPacket+0x64>
 8005606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005608:	1c5a      	adds	r2, r3, #1
 800560a:	627a      	str	r2, [r7, #36]	@ 0x24
 800560c:	6a3a      	ldr	r2, [r7, #32]
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]
 8005612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005614:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8005616:	4b12      	ldr	r3, [pc, #72]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 8005618:	785b      	ldrb	r3, [r3, #1]
 800561a:	4618      	mov	r0, r3
 800561c:	1d3b      	adds	r3, r7, #4
 800561e:	69fa      	ldr	r2, [r7, #28]
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	461a      	mov	r2, r3
 8005624:	1d3b      	adds	r3, r7, #4
 8005626:	4619      	mov	r1, r3
 8005628:	f7fa fdfa 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800562c:	4603      	mov	r3, r0
 800562e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8005630:	693b      	ldr	r3, [r7, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d009      	beq.n	800564a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8005636:	4a0a      	ldr	r2, [pc, #40]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 8005638:	69bb      	ldr	r3, [r7, #24]
 800563a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800563c:	4b08      	ldr	r3, [pc, #32]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	3b01      	subs	r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	4b06      	ldr	r3, [pc, #24]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e004      	b.n	8005654 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800564a:	4b05      	ldr	r3, [pc, #20]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	4a03      	ldr	r2, [pc, #12]	@ (8005660 <_TrySendOverflowPacket+0xdc>)
 8005652:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8005654:	693b      	ldr	r3, [r7, #16]
}
 8005656:	4618      	mov	r0, r3
 8005658:	3730      	adds	r7, #48	@ 0x30
 800565a:	46bd      	mov	sp, r7
 800565c:	bd80      	pop	{r7, pc}
 800565e:	bf00      	nop
 8005660:	2004c79c 	.word	0x2004c79c
 8005664:	e0001004 	.word	0xe0001004

08005668 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8005668:	b580      	push	{r7, lr}
 800566a:	b08a      	sub	sp, #40	@ 0x28
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8005674:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <_SendPacket+0x1c0>)
 8005676:	781b      	ldrb	r3, [r3, #0]
 8005678:	2b01      	cmp	r3, #1
 800567a:	d010      	beq.n	800569e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800567c:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <_SendPacket+0x1c0>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	f000 80a3 	beq.w	80057cc <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8005686:	4b68      	ldr	r3, [pc, #416]	@ (8005828 <_SendPacket+0x1c0>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b02      	cmp	r3, #2
 800568c:	d109      	bne.n	80056a2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800568e:	f7ff ff79 	bl	8005584 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8005692:	4b65      	ldr	r3, [pc, #404]	@ (8005828 <_SendPacket+0x1c0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	2b01      	cmp	r3, #1
 8005698:	f040 809a 	bne.w	80057d0 <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 800569c:	e001      	b.n	80056a2 <_SendPacket+0x3a>
    goto Send;
 800569e:	bf00      	nop
 80056a0:	e000      	b.n	80056a4 <_SendPacket+0x3c>
Send:
 80056a2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2b1f      	cmp	r3, #31
 80056a8:	d809      	bhi.n	80056be <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 80056aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005828 <_SendPacket+0x1c0>)
 80056ac:	69da      	ldr	r2, [r3, #28]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	fa22 f303 	lsr.w	r3, r2, r3
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	f040 808b 	bne.w	80057d4 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2b17      	cmp	r3, #23
 80056c2:	d807      	bhi.n	80056d4 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	3b01      	subs	r3, #1
 80056c8:	60fb      	str	r3, [r7, #12]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	b2da      	uxtb	r2, r3
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	701a      	strb	r2, [r3, #0]
 80056d2:	e03d      	b.n	8005750 <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 80056d4:	68ba      	ldr	r2, [r7, #8]
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	1ad3      	subs	r3, r2, r3
 80056da:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 80056dc:	69fb      	ldr	r3, [r7, #28]
 80056de:	2b7f      	cmp	r3, #127	@ 0x7f
 80056e0:	d912      	bls.n	8005708 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 80056e2:	69fb      	ldr	r3, [r7, #28]
 80056e4:	09da      	lsrs	r2, r3, #7
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	3b01      	subs	r3, #1
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	b2d2      	uxtb	r2, r2
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 80056f2:	69fb      	ldr	r3, [r7, #28]
 80056f4:	b2db      	uxtb	r3, r3
 80056f6:	68fa      	ldr	r2, [r7, #12]
 80056f8:	3a01      	subs	r2, #1
 80056fa:	60fa      	str	r2, [r7, #12]
 80056fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005700:	b2da      	uxtb	r2, r3
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	701a      	strb	r2, [r3, #0]
 8005706:	e006      	b.n	8005716 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	3b01      	subs	r3, #1
 800570c:	60fb      	str	r3, [r7, #12]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	b2da      	uxtb	r2, r3
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2b7f      	cmp	r3, #127	@ 0x7f
 800571a:	d912      	bls.n	8005742 <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	09da      	lsrs	r2, r3, #7
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	3b01      	subs	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]
 8005726:	b2d2      	uxtb	r2, r2
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	b2db      	uxtb	r3, r3
 8005730:	68fa      	ldr	r2, [r7, #12]
 8005732:	3a01      	subs	r2, #1
 8005734:	60fa      	str	r2, [r7, #12]
 8005736:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800573a:	b2da      	uxtb	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	701a      	strb	r2, [r3, #0]
 8005740:	e006      	b.n	8005750 <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	3b01      	subs	r3, #1
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	b2da      	uxtb	r2, r3
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005750:	4b36      	ldr	r3, [pc, #216]	@ (800582c <_SendPacket+0x1c4>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8005756:	4b34      	ldr	r3, [pc, #208]	@ (8005828 <_SendPacket+0x1c0>)
 8005758:	68db      	ldr	r3, [r3, #12]
 800575a:	69ba      	ldr	r2, [r7, #24]
 800575c:	1ad3      	subs	r3, r2, r3
 800575e:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8005760:	68bb      	ldr	r3, [r7, #8]
 8005762:	627b      	str	r3, [r7, #36]	@ 0x24
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	623b      	str	r3, [r7, #32]
 8005768:	e00b      	b.n	8005782 <_SendPacket+0x11a>
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	b2da      	uxtb	r2, r3
 800576e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005770:	1c59      	adds	r1, r3, #1
 8005772:	6279      	str	r1, [r7, #36]	@ 0x24
 8005774:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005778:	b2d2      	uxtb	r2, r2
 800577a:	701a      	strb	r2, [r3, #0]
 800577c:	6a3b      	ldr	r3, [r7, #32]
 800577e:	09db      	lsrs	r3, r3, #7
 8005780:	623b      	str	r3, [r7, #32]
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	2b7f      	cmp	r3, #127	@ 0x7f
 8005786:	d8f0      	bhi.n	800576a <_SendPacket+0x102>
 8005788:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578a:	1c5a      	adds	r2, r3, #1
 800578c:	627a      	str	r2, [r7, #36]	@ 0x24
 800578e:	6a3a      	ldr	r2, [r7, #32]
 8005790:	b2d2      	uxtb	r2, r2
 8005792:	701a      	strb	r2, [r3, #0]
 8005794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005796:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8005798:	4b23      	ldr	r3, [pc, #140]	@ (8005828 <_SendPacket+0x1c0>)
 800579a:	785b      	ldrb	r3, [r3, #1]
 800579c:	4618      	mov	r0, r3
 800579e:	68ba      	ldr	r2, [r7, #8]
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1ad3      	subs	r3, r2, r3
 80057a4:	461a      	mov	r2, r3
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f7fa fd3a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 80057ac:	4603      	mov	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d003      	beq.n	80057be <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 80057b6:	4a1c      	ldr	r2, [pc, #112]	@ (8005828 <_SendPacket+0x1c0>)
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	60d3      	str	r3, [r2, #12]
 80057bc:	e00b      	b.n	80057d6 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 80057be:	4b1a      	ldr	r3, [pc, #104]	@ (8005828 <_SendPacket+0x1c0>)
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	3301      	adds	r3, #1
 80057c4:	b2da      	uxtb	r2, r3
 80057c6:	4b18      	ldr	r3, [pc, #96]	@ (8005828 <_SendPacket+0x1c0>)
 80057c8:	701a      	strb	r2, [r3, #0]
 80057ca:	e004      	b.n	80057d6 <_SendPacket+0x16e>
    goto SendDone;
 80057cc:	bf00      	nop
 80057ce:	e002      	b.n	80057d6 <_SendPacket+0x16e>
      goto SendDone;
 80057d0:	bf00      	nop
 80057d2:	e000      	b.n	80057d6 <_SendPacket+0x16e>
      goto SendDone;
 80057d4:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 80057d6:	4b14      	ldr	r3, [pc, #80]	@ (8005828 <_SendPacket+0x1c0>)
 80057d8:	7e1b      	ldrb	r3, [r3, #24]
 80057da:	4619      	mov	r1, r3
 80057dc:	4a14      	ldr	r2, [pc, #80]	@ (8005830 <_SendPacket+0x1c8>)
 80057de:	460b      	mov	r3, r1
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	440b      	add	r3, r1
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	4413      	add	r3, r2
 80057e8:	336c      	adds	r3, #108	@ 0x6c
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <_SendPacket+0x1c0>)
 80057ee:	7e1b      	ldrb	r3, [r3, #24]
 80057f0:	4618      	mov	r0, r3
 80057f2:	490f      	ldr	r1, [pc, #60]	@ (8005830 <_SendPacket+0x1c8>)
 80057f4:	4603      	mov	r3, r0
 80057f6:	005b      	lsls	r3, r3, #1
 80057f8:	4403      	add	r3, r0
 80057fa:	00db      	lsls	r3, r3, #3
 80057fc:	440b      	add	r3, r1
 80057fe:	3370      	adds	r3, #112	@ 0x70
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	429a      	cmp	r2, r3
 8005804:	d00b      	beq.n	800581e <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8005806:	4b08      	ldr	r3, [pc, #32]	@ (8005828 <_SendPacket+0x1c0>)
 8005808:	789b      	ldrb	r3, [r3, #2]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d107      	bne.n	800581e <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800580e:	4b06      	ldr	r3, [pc, #24]	@ (8005828 <_SendPacket+0x1c0>)
 8005810:	2201      	movs	r2, #1
 8005812:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8005814:	f7ff fe46 	bl	80054a4 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8005818:	4b03      	ldr	r3, [pc, #12]	@ (8005828 <_SendPacket+0x1c0>)
 800581a:	2200      	movs	r2, #0
 800581c:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800581e:	bf00      	nop
 8005820:	3728      	adds	r7, #40	@ 0x28
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	2004c79c 	.word	0x2004c79c
 800582c:	e0001004 	.word	0xe0001004
 8005830:	2004b2dc 	.word	0x2004b2dc

08005834 <_StoreChar>:
*
*  Parameters
*    p            Pointer to the buffer description.
*    c            Character to be printed.
*/
static void _StoreChar(SEGGER_SYSVIEW_PRINTF_DESC * p, char c) {
 8005834:	b580      	push	{r7, lr}
 8005836:	b08a      	sub	sp, #40	@ 0x28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  unsigned int  Cnt;
  U8*           pPayload;
  U32           Options;

  Cnt = p->Cnt;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	617b      	str	r3, [r7, #20]
  if ((Cnt + 1u) <= SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005846:	697b      	ldr	r3, [r7, #20]
 8005848:	3301      	adds	r3, #1
 800584a:	2b80      	cmp	r3, #128	@ 0x80
 800584c:	d80a      	bhi.n	8005864 <_StoreChar+0x30>
    *(p->pPayload++) = c;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	685b      	ldr	r3, [r3, #4]
 8005852:	1c59      	adds	r1, r3, #1
 8005854:	687a      	ldr	r2, [r7, #4]
 8005856:	6051      	str	r1, [r2, #4]
 8005858:	78fa      	ldrb	r2, [r7, #3]
 800585a:	701a      	strb	r2, [r3, #0]
    p->Cnt = Cnt + 1u;
 800585c:	697b      	ldr	r3, [r7, #20]
 800585e:	1c5a      	adds	r2, r3, #1
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	611a      	str	r2, [r3, #16]
  }
  //
  // Write part of string, when the buffer is full
  //
  if (p->Cnt == SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	2b80      	cmp	r3, #128	@ 0x80
 800586a:	d15a      	bne.n	8005922 <_StoreChar+0xee>
    *(p->pPayloadStart) = p->Cnt;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	691a      	ldr	r2, [r3, #16]
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	689b      	ldr	r3, [r3, #8]
 8005874:	b2d2      	uxtb	r2, r2
 8005876:	701a      	strb	r2, [r3, #0]
    pPayload = p->pPayload;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685b      	ldr	r3, [r3, #4]
 800587c:	613b      	str	r3, [r7, #16]
    Options = p->Options;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	60fb      	str	r3, [r7, #12]
    ENCODE_U32(pPayload, Options);
 8005884:	693b      	ldr	r3, [r7, #16]
 8005886:	627b      	str	r3, [r7, #36]	@ 0x24
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	623b      	str	r3, [r7, #32]
 800588c:	e00b      	b.n	80058a6 <_StoreChar+0x72>
 800588e:	6a3b      	ldr	r3, [r7, #32]
 8005890:	b2da      	uxtb	r2, r3
 8005892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005894:	1c59      	adds	r1, r3, #1
 8005896:	6279      	str	r1, [r7, #36]	@ 0x24
 8005898:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800589c:	b2d2      	uxtb	r2, r2
 800589e:	701a      	strb	r2, [r3, #0]
 80058a0:	6a3b      	ldr	r3, [r7, #32]
 80058a2:	09db      	lsrs	r3, r3, #7
 80058a4:	623b      	str	r3, [r7, #32]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058aa:	d8f0      	bhi.n	800588e <_StoreChar+0x5a>
 80058ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ae:	1c5a      	adds	r2, r3, #1
 80058b0:	627a      	str	r2, [r7, #36]	@ 0x24
 80058b2:	6a3a      	ldr	r2, [r7, #32]
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
 80058b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058ba:	613b      	str	r3, [r7, #16]
    ENCODE_U32(pPayload, 0);
 80058bc:	693b      	ldr	r3, [r7, #16]
 80058be:	61fb      	str	r3, [r7, #28]
 80058c0:	2300      	movs	r3, #0
 80058c2:	61bb      	str	r3, [r7, #24]
 80058c4:	e00b      	b.n	80058de <_StoreChar+0xaa>
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	69fb      	ldr	r3, [r7, #28]
 80058cc:	1c59      	adds	r1, r3, #1
 80058ce:	61f9      	str	r1, [r7, #28]
 80058d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	701a      	strb	r2, [r3, #0]
 80058d8:	69bb      	ldr	r3, [r7, #24]
 80058da:	09db      	lsrs	r3, r3, #7
 80058dc:	61bb      	str	r3, [r7, #24]
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e2:	d8f0      	bhi.n	80058c6 <_StoreChar+0x92>
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1c5a      	adds	r2, r3, #1
 80058e8:	61fa      	str	r2, [r7, #28]
 80058ea:	69ba      	ldr	r2, [r7, #24]
 80058ec:	b2d2      	uxtb	r2, r2
 80058ee:	701a      	strb	r2, [r3, #0]
 80058f0:	69fb      	ldr	r3, [r7, #28]
 80058f2:	613b      	str	r3, [r7, #16]
    _SendPacket(p->pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	689b      	ldr	r3, [r3, #8]
 80058f8:	221a      	movs	r2, #26
 80058fa:	6939      	ldr	r1, [r7, #16]
 80058fc:	4618      	mov	r0, r3
 80058fe:	f7ff feb3 	bl	8005668 <_SendPacket>
    p->pPayloadStart = _PreparePacket(p->pBuffer);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4618      	mov	r0, r3
 8005908:	f7ff fdbf 	bl	800548a <_PreparePacket>
 800590c:	4602      	mov	r2, r0
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	609a      	str	r2, [r3, #8]
    p->pPayload = p->pPayloadStart + 1u;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	1c5a      	adds	r2, r3, #1
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	605a      	str	r2, [r3, #4]
    p->Cnt = 0u;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2200      	movs	r2, #0
 8005920:	611a      	str	r2, [r3, #16]
  }
}
 8005922:	bf00      	nop
 8005924:	3728      	adds	r7, #40	@ 0x28
 8005926:	46bd      	mov	sp, r7
 8005928:	bd80      	pop	{r7, pc}
	...

0800592c <_PrintUnsigned>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintUnsigned(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, unsigned int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 800592c:	b580      	push	{r7, lr}
 800592e:	b08a      	sub	sp, #40	@ 0x28
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
 8005938:	603b      	str	r3, [r7, #0]
  unsigned int      Digit;
  unsigned int      Number;
  unsigned int      Width;
  char              c;

  Number = v;
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	623b      	str	r3, [r7, #32]
  Digit = 1u;
 800593e:	2301      	movs	r3, #1
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
  //
  // Get actual field width
  //
  Width = 1u;
 8005942:	2301      	movs	r3, #1
 8005944:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005946:	e007      	b.n	8005958 <_PrintUnsigned+0x2c>
    Number = (Number / Base);
 8005948:	6a3a      	ldr	r2, [r7, #32]
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005950:	623b      	str	r3, [r7, #32]
    Width++;
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	3301      	adds	r3, #1
 8005956:	61fb      	str	r3, [r7, #28]
  while (Number >= Base) {
 8005958:	6a3a      	ldr	r2, [r7, #32]
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	429a      	cmp	r2, r3
 800595e:	d2f3      	bcs.n	8005948 <_PrintUnsigned+0x1c>
  }
  if (NumDigits > Width) {
 8005960:	683a      	ldr	r2, [r7, #0]
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	429a      	cmp	r2, r3
 8005966:	d901      	bls.n	800596c <_PrintUnsigned+0x40>
    Width = NumDigits;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	61fb      	str	r3, [r7, #28]
  }
  //
  // Print leading chars if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) {
 800596c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d000      	beq.n	8005978 <_PrintUnsigned+0x4c>
 8005976:	e01f      	b.n	80059b8 <_PrintUnsigned+0x8c>
    if (FieldWidth != 0u) {
 8005978:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800597a:	2b00      	cmp	r3, #0
 800597c:	d01c      	beq.n	80059b8 <_PrintUnsigned+0x8c>
      if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && (NumDigits == 0u)) {
 800597e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005980:	f003 0302 	and.w	r3, r3, #2
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <_PrintUnsigned+0x68>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b00      	cmp	r3, #0
 800598c:	d102      	bne.n	8005994 <_PrintUnsigned+0x68>
        c = '0';
 800598e:	2330      	movs	r3, #48	@ 0x30
 8005990:	76fb      	strb	r3, [r7, #27]
 8005992:	e001      	b.n	8005998 <_PrintUnsigned+0x6c>
      } else {
        c = ' ';
 8005994:	2320      	movs	r3, #32
 8005996:	76fb      	strb	r3, [r7, #27]
      }
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005998:	e007      	b.n	80059aa <_PrintUnsigned+0x7e>
        FieldWidth--;
 800599a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800599c:	3b01      	subs	r3, #1
 800599e:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, c);
 80059a0:	7efb      	ldrb	r3, [r7, #27]
 80059a2:	4619      	mov	r1, r3
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f7ff ff45 	bl	8005834 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 80059aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d003      	beq.n	80059b8 <_PrintUnsigned+0x8c>
 80059b0:	69fa      	ldr	r2, [r7, #28]
 80059b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059b4:	429a      	cmp	r2, r3
 80059b6:	d3f0      	bcc.n	800599a <_PrintUnsigned+0x6e>
  // Compute Digit.
  // Loop until Digit has the value of the highest digit required.
  // Example: If the output is 345 (Base 10), loop 2 times until Digit is 100.
  //
  while (1) {
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	2b01      	cmp	r3, #1
 80059bc:	d903      	bls.n	80059c6 <_PrintUnsigned+0x9a>
      NumDigits--;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	3b01      	subs	r3, #1
 80059c2:	603b      	str	r3, [r7, #0]
 80059c4:	e009      	b.n	80059da <_PrintUnsigned+0xae>
    } else {
      Div = v / Digit;
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ce:	617b      	str	r3, [r7, #20]
      if (Div < Base) {        // Is our divider big enough to extract the highest digit from value? => Done
 80059d0:	697a      	ldr	r2, [r7, #20]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d200      	bcs.n	80059da <_PrintUnsigned+0xae>
        break;
 80059d8:	e005      	b.n	80059e6 <_PrintUnsigned+0xba>
      }
    }
    Digit *= Base;
 80059da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059dc:	687a      	ldr	r2, [r7, #4]
 80059de:	fb02 f303 	mul.w	r3, r2, r3
 80059e2:	627b      	str	r3, [r7, #36]	@ 0x24
    if (NumDigits > 1u) {       // User specified a min number of digits to print? => Make sure we loop at least that often, before checking anything else (> 1 check avoids problems with NumDigits being signed / unsigned)
 80059e4:	e7e8      	b.n	80059b8 <_PrintUnsigned+0x8c>
  }
  //
  // Output digits
  //
  do {
    Div = v / Digit;
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ee:	617b      	str	r3, [r7, #20]
    v -= Div * Digit;
 80059f0:	697b      	ldr	r3, [r7, #20]
 80059f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80059f4:	fb02 f303 	mul.w	r3, r2, r3
 80059f8:	68ba      	ldr	r2, [r7, #8]
 80059fa:	1ad3      	subs	r3, r2, r3
 80059fc:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, _aV2C[Div]);
 80059fe:	4a15      	ldr	r2, [pc, #84]	@ (8005a54 <_PrintUnsigned+0x128>)
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	4413      	add	r3, r2
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	4619      	mov	r1, r3
 8005a08:	68f8      	ldr	r0, [r7, #12]
 8005a0a:	f7ff ff13 	bl	8005834 <_StoreChar>
    Digit /= Base;
 8005a0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a16:	627b      	str	r3, [r7, #36]	@ 0x24
  } while (Digit);
 8005a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d1e3      	bne.n	80059e6 <_PrintUnsigned+0xba>
  //
  // Print trailing spaces if necessary
  //
  if ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == FORMAT_FLAG_LEFT_JUSTIFY) {
 8005a1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d011      	beq.n	8005a4c <_PrintUnsigned+0x120>
    if (FieldWidth != 0u) {
 8005a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00e      	beq.n	8005a4c <_PrintUnsigned+0x120>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a2e:	e006      	b.n	8005a3e <_PrintUnsigned+0x112>
        FieldWidth--;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	3b01      	subs	r3, #1
 8005a34:	633b      	str	r3, [r7, #48]	@ 0x30
        _StoreChar(pBufferDesc, ' ');
 8005a36:	2120      	movs	r1, #32
 8005a38:	68f8      	ldr	r0, [r7, #12]
 8005a3a:	f7ff fefb 	bl	8005834 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d003      	beq.n	8005a4c <_PrintUnsigned+0x120>
 8005a44:	69fa      	ldr	r2, [r7, #28]
 8005a46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a48:	429a      	cmp	r2, r3
 8005a4a:	d3f1      	bcc.n	8005a30 <_PrintUnsigned+0x104>
      }
    }
  }
}
 8005a4c:	bf00      	nop
 8005a4e:	3728      	adds	r7, #40	@ 0x28
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	08007248 	.word	0x08007248

08005a58 <_PrintInt>:
*    Base         Base of the value.
*    NumDigits    Number of digits to be printed.
*    FieldWidth   Width of the printed field.
*    FormatFlags  Flags for formatting the value.
*/
static void _PrintInt(SEGGER_SYSVIEW_PRINTF_DESC * pBufferDesc, int v, unsigned int Base, unsigned int NumDigits, unsigned int FieldWidth, unsigned int FormatFlags) {
 8005a58:	b580      	push	{r7, lr}
 8005a5a:	b088      	sub	sp, #32
 8005a5c:	af02      	add	r7, sp, #8
 8005a5e:	60f8      	str	r0, [r7, #12]
 8005a60:	60b9      	str	r1, [r7, #8]
 8005a62:	607a      	str	r2, [r7, #4]
 8005a64:	603b      	str	r3, [r7, #0]
  unsigned int  Width;
  int           Number;

  Number = (v < 0) ? -v : v;
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	bfb8      	it	lt
 8005a6c:	425b      	neglt	r3, r3
 8005a6e:	613b      	str	r3, [r7, #16]

  //
  // Get actual field width
  //
  Width = 1u;
 8005a70:	2301      	movs	r3, #1
 8005a72:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a74:	e007      	b.n	8005a86 <_PrintInt+0x2e>
    Number = (Number / (int)Base);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	693a      	ldr	r2, [r7, #16]
 8005a7a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005a7e:	613b      	str	r3, [r7, #16]
    Width++;
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	3301      	adds	r3, #1
 8005a84:	617b      	str	r3, [r7, #20]
  while (Number >= (int)Base) {
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	693a      	ldr	r2, [r7, #16]
 8005a8a:	429a      	cmp	r2, r3
 8005a8c:	daf3      	bge.n	8005a76 <_PrintInt+0x1e>
  }
  if (NumDigits > Width) {
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	429a      	cmp	r2, r3
 8005a94:	d901      	bls.n	8005a9a <_PrintInt+0x42>
    Width = NumDigits;
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	617b      	str	r3, [r7, #20]
  }
  if ((FieldWidth > 0u) && ((v < 0) || ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN))) {
 8005a9a:	6a3b      	ldr	r3, [r7, #32]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d00a      	beq.n	8005ab6 <_PrintInt+0x5e>
 8005aa0:	68bb      	ldr	r3, [r7, #8]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	db04      	blt.n	8005ab0 <_PrintInt+0x58>
 8005aa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aa8:	f003 0304 	and.w	r3, r3, #4
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d002      	beq.n	8005ab6 <_PrintInt+0x5e>
    FieldWidth--;
 8005ab0:	6a3b      	ldr	r3, [r7, #32]
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	623b      	str	r3, [r7, #32]
  }

  //
  // Print leading spaces if necessary
  //
  if ((((FormatFlags & FORMAT_FLAG_PAD_ZERO) == 0u) || (NumDigits != 0u)) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u)) {
 8005ab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab8:	f003 0302 	and.w	r3, r3, #2
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d002      	beq.n	8005ac6 <_PrintInt+0x6e>
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d016      	beq.n	8005af4 <_PrintInt+0x9c>
 8005ac6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ac8:	f003 0301 	and.w	r3, r3, #1
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d111      	bne.n	8005af4 <_PrintInt+0x9c>
    if (FieldWidth != 0u) {
 8005ad0:	6a3b      	ldr	r3, [r7, #32]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00e      	beq.n	8005af4 <_PrintInt+0x9c>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ad6:	e006      	b.n	8005ae6 <_PrintInt+0x8e>
        FieldWidth--;
 8005ad8:	6a3b      	ldr	r3, [r7, #32]
 8005ada:	3b01      	subs	r3, #1
 8005adc:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, ' ');
 8005ade:	2120      	movs	r1, #32
 8005ae0:	68f8      	ldr	r0, [r7, #12]
 8005ae2:	f7ff fea7 	bl	8005834 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005ae6:	6a3b      	ldr	r3, [r7, #32]
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d003      	beq.n	8005af4 <_PrintInt+0x9c>
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	429a      	cmp	r2, r3
 8005af2:	d3f1      	bcc.n	8005ad8 <_PrintInt+0x80>
    }
  }
  //
  // Print sign if necessary
  //
  if (v < 0) {
 8005af4:	68bb      	ldr	r3, [r7, #8]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	da07      	bge.n	8005b0a <_PrintInt+0xb2>
    v = -v;
 8005afa:	68bb      	ldr	r3, [r7, #8]
 8005afc:	425b      	negs	r3, r3
 8005afe:	60bb      	str	r3, [r7, #8]
    _StoreChar(pBufferDesc, '-');
 8005b00:	212d      	movs	r1, #45	@ 0x2d
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f7ff fe96 	bl	8005834 <_StoreChar>
 8005b08:	e008      	b.n	8005b1c <_PrintInt+0xc4>
  } else if ((FormatFlags & FORMAT_FLAG_PRINT_SIGN) == FORMAT_FLAG_PRINT_SIGN) {
 8005b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b0c:	f003 0304 	and.w	r3, r3, #4
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d003      	beq.n	8005b1c <_PrintInt+0xc4>
    _StoreChar(pBufferDesc, '+');
 8005b14:	212b      	movs	r1, #43	@ 0x2b
 8005b16:	68f8      	ldr	r0, [r7, #12]
 8005b18:	f7ff fe8c 	bl	8005834 <_StoreChar>

  }
  //
  // Print leading zeros if necessary
  //
  if (((FormatFlags & FORMAT_FLAG_PAD_ZERO) == FORMAT_FLAG_PAD_ZERO) && ((FormatFlags & FORMAT_FLAG_LEFT_JUSTIFY) == 0u) && (NumDigits == 0u)) {
 8005b1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b1e:	f003 0302 	and.w	r3, r3, #2
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d019      	beq.n	8005b5a <_PrintInt+0x102>
 8005b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b28:	f003 0301 	and.w	r3, r3, #1
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d114      	bne.n	8005b5a <_PrintInt+0x102>
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d111      	bne.n	8005b5a <_PrintInt+0x102>
    if (FieldWidth != 0u) {
 8005b36:	6a3b      	ldr	r3, [r7, #32]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d00e      	beq.n	8005b5a <_PrintInt+0x102>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b3c:	e006      	b.n	8005b4c <_PrintInt+0xf4>
        FieldWidth--;
 8005b3e:	6a3b      	ldr	r3, [r7, #32]
 8005b40:	3b01      	subs	r3, #1
 8005b42:	623b      	str	r3, [r7, #32]
        _StoreChar(pBufferDesc, '0');
 8005b44:	2130      	movs	r1, #48	@ 0x30
 8005b46:	68f8      	ldr	r0, [r7, #12]
 8005b48:	f7ff fe74 	bl	8005834 <_StoreChar>
      while ((FieldWidth != 0u) && (Width < FieldWidth)) {
 8005b4c:	6a3b      	ldr	r3, [r7, #32]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d003      	beq.n	8005b5a <_PrintInt+0x102>
 8005b52:	697a      	ldr	r2, [r7, #20]
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	429a      	cmp	r2, r3
 8005b58:	d3f1      	bcc.n	8005b3e <_PrintInt+0xe6>
    }
  }
  //
  // Print number without sign
  //
  _PrintUnsigned(pBufferDesc, (unsigned int)v, Base, NumDigits, FieldWidth, FormatFlags);
 8005b5a:	68b9      	ldr	r1, [r7, #8]
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b5e:	9301      	str	r3, [sp, #4]
 8005b60:	6a3b      	ldr	r3, [r7, #32]
 8005b62:	9300      	str	r3, [sp, #0]
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	68f8      	ldr	r0, [r7, #12]
 8005b6a:	f7ff fedf 	bl	800592c <_PrintUnsigned>
}
 8005b6e:	bf00      	nop
 8005b70:	3718      	adds	r7, #24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}
	...

08005b78 <_VPrintTarget>:
*  Parameters
*    sFormat      Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static void _VPrintTarget(const char* sFormat, U32 Options, va_list* pParamList) {
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b098      	sub	sp, #96	@ 0x60
 8005b7c:	af02      	add	r7, sp, #8
 8005b7e:	60f8      	str	r0, [r7, #12]
 8005b80:	60b9      	str	r1, [r7, #8]
 8005b82:	607a      	str	r2, [r7, #4]
  U8*           pPayloadStart;
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
  SEGGER_SYSVIEW_LOCK();
#else
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 1 + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8005b84:	f3ef 8311 	mrs	r3, BASEPRI
 8005b88:	f04f 0120 	mov.w	r1, #32
 8005b8c:	f381 8811 	msr	BASEPRI, r1
 8005b90:	633b      	str	r3, [r7, #48]	@ 0x30
 8005b92:	48b7      	ldr	r0, [pc, #732]	@ (8005e70 <_VPrintTarget+0x2f8>)
 8005b94:	f7ff fc79 	bl	800548a <_PreparePacket>
 8005b98:	62f8      	str	r0, [r7, #44]	@ 0x2c
#endif

#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  BufferDesc.pBuffer        = aPacket;
#else
  BufferDesc.pBuffer        = _aPacket;
 8005b9a:	4bb5      	ldr	r3, [pc, #724]	@ (8005e70 <_VPrintTarget+0x2f8>)
 8005b9c:	617b      	str	r3, [r7, #20]
#endif
  BufferDesc.Cnt            = 0u;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	627b      	str	r3, [r7, #36]	@ 0x24
  BufferDesc.pPayloadStart  = pPayloadStart;
 8005ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ba4:	61fb      	str	r3, [r7, #28]
  BufferDesc.pPayload       = BufferDesc.pPayloadStart + 1u;
 8005ba6:	69fb      	ldr	r3, [r7, #28]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	61bb      	str	r3, [r7, #24]
  BufferDesc.Options        =  Options;
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	623b      	str	r3, [r7, #32]

  do {
    c = *sFormat;
 8005bb0:	68fb      	ldr	r3, [r7, #12]
 8005bb2:	781b      	ldrb	r3, [r3, #0]
 8005bb4:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    sFormat++;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	3301      	adds	r3, #1
 8005bbc:	60fb      	str	r3, [r7, #12]
    if (c == 0u) {
 8005bbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	f000 8183 	beq.w	8005ece <_VPrintTarget+0x356>
      break;
    }
    if (c == '%') {
 8005bc8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005bcc:	2b25      	cmp	r3, #37	@ 0x25
 8005bce:	f040 8170 	bne.w	8005eb2 <_VPrintTarget+0x33a>
      //
      // Filter out flags
      //
      FormatFlags = 0u;
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      v = 1;
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	653b      	str	r3, [r7, #80]	@ 0x50
      do {
        c = *sFormat;
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        switch (c) {
 8005be2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005be6:	3b23      	subs	r3, #35	@ 0x23
 8005be8:	2b0d      	cmp	r3, #13
 8005bea:	d83f      	bhi.n	8005c6c <_VPrintTarget+0xf4>
 8005bec:	a201      	add	r2, pc, #4	@ (adr r2, 8005bf4 <_VPrintTarget+0x7c>)
 8005bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bf2:	bf00      	nop
 8005bf4:	08005c5d 	.word	0x08005c5d
 8005bf8:	08005c6d 	.word	0x08005c6d
 8005bfc:	08005c6d 	.word	0x08005c6d
 8005c00:	08005c6d 	.word	0x08005c6d
 8005c04:	08005c6d 	.word	0x08005c6d
 8005c08:	08005c6d 	.word	0x08005c6d
 8005c0c:	08005c6d 	.word	0x08005c6d
 8005c10:	08005c6d 	.word	0x08005c6d
 8005c14:	08005c4d 	.word	0x08005c4d
 8005c18:	08005c6d 	.word	0x08005c6d
 8005c1c:	08005c2d 	.word	0x08005c2d
 8005c20:	08005c6d 	.word	0x08005c6d
 8005c24:	08005c6d 	.word	0x08005c6d
 8005c28:	08005c3d 	.word	0x08005c3d
        case '-': FormatFlags |= FORMAT_FLAG_LEFT_JUSTIFY; sFormat++; break;
 8005c2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c2e:	f043 0301 	orr.w	r3, r3, #1
 8005c32:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	3301      	adds	r3, #1
 8005c38:	60fb      	str	r3, [r7, #12]
 8005c3a:	e01a      	b.n	8005c72 <_VPrintTarget+0xfa>
        case '0': FormatFlags |= FORMAT_FLAG_PAD_ZERO;     sFormat++; break;
 8005c3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c3e:	f043 0302 	orr.w	r3, r3, #2
 8005c42:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	3301      	adds	r3, #1
 8005c48:	60fb      	str	r3, [r7, #12]
 8005c4a:	e012      	b.n	8005c72 <_VPrintTarget+0xfa>
        case '+': FormatFlags |= FORMAT_FLAG_PRINT_SIGN;   sFormat++; break;
 8005c4c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c4e:	f043 0304 	orr.w	r3, r3, #4
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3301      	adds	r3, #1
 8005c58:	60fb      	str	r3, [r7, #12]
 8005c5a:	e00a      	b.n	8005c72 <_VPrintTarget+0xfa>
        case '#': FormatFlags |= FORMAT_FLAG_ALTERNATE;    sFormat++; break;
 8005c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5e:	f043 0308 	orr.w	r3, r3, #8
 8005c62:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	3301      	adds	r3, #1
 8005c68:	60fb      	str	r3, [r7, #12]
 8005c6a:	e002      	b.n	8005c72 <_VPrintTarget+0xfa>
        default:  v = 0; break;
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005c70:	bf00      	nop
        }
      } while (v);
 8005c72:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d1b0      	bne.n	8005bda <_VPrintTarget+0x62>
      //
      // filter out field with
      //
      FieldWidth = 0u;
 8005c78:	2300      	movs	r3, #0
 8005c7a:	647b      	str	r3, [r7, #68]	@ 0x44
      do {
        c = *sFormat;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	781b      	ldrb	r3, [r3, #0]
 8005c80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
        if ((c < '0') || (c > '9')) {
 8005c84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c88:	2b2f      	cmp	r3, #47	@ 0x2f
 8005c8a:	d912      	bls.n	8005cb2 <_VPrintTarget+0x13a>
 8005c8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005c90:	2b39      	cmp	r3, #57	@ 0x39
 8005c92:	d80e      	bhi.n	8005cb2 <_VPrintTarget+0x13a>
          break;
        }
        sFormat++;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	3301      	adds	r3, #1
 8005c98:	60fb      	str	r3, [r7, #12]
        FieldWidth = (FieldWidth * 10u) + ((unsigned int)c - '0');
 8005c9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c9c:	4613      	mov	r3, r2
 8005c9e:	009b      	lsls	r3, r3, #2
 8005ca0:	4413      	add	r3, r2
 8005ca2:	005b      	lsls	r3, r3, #1
 8005ca4:	461a      	mov	r2, r3
 8005ca6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005caa:	4413      	add	r3, r2
 8005cac:	3b30      	subs	r3, #48	@ 0x30
 8005cae:	647b      	str	r3, [r7, #68]	@ 0x44
        c = *sFormat;
 8005cb0:	e7e4      	b.n	8005c7c <_VPrintTarget+0x104>
      } while (1);

      //
      // Filter out precision (number of digits to display)
      //
      NumDigits = 0u;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	64fb      	str	r3, [r7, #76]	@ 0x4c
      c = *sFormat;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      if (c == '.') {
 8005cbe:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cc2:	2b2e      	cmp	r3, #46	@ 0x2e
 8005cc4:	d11d      	bne.n	8005d02 <_VPrintTarget+0x18a>
        sFormat++;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	3301      	adds	r3, #1
 8005cca:	60fb      	str	r3, [r7, #12]
        do {
          c = *sFormat;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          if ((c < '0') || (c > '9')) {
 8005cd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cd8:	2b2f      	cmp	r3, #47	@ 0x2f
 8005cda:	d912      	bls.n	8005d02 <_VPrintTarget+0x18a>
 8005cdc:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005ce0:	2b39      	cmp	r3, #57	@ 0x39
 8005ce2:	d80e      	bhi.n	8005d02 <_VPrintTarget+0x18a>
            break;
          }
          sFormat++;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	3301      	adds	r3, #1
 8005ce8:	60fb      	str	r3, [r7, #12]
          NumDigits = NumDigits * 10u + ((unsigned int)c - '0');
 8005cea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005cec:	4613      	mov	r3, r2
 8005cee:	009b      	lsls	r3, r3, #2
 8005cf0:	4413      	add	r3, r2
 8005cf2:	005b      	lsls	r3, r3, #1
 8005cf4:	461a      	mov	r2, r3
 8005cf6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005cfa:	4413      	add	r3, r2
 8005cfc:	3b30      	subs	r3, #48	@ 0x30
 8005cfe:	64fb      	str	r3, [r7, #76]	@ 0x4c
          c = *sFormat;
 8005d00:	e7e4      	b.n	8005ccc <_VPrintTarget+0x154>
        } while (1);
      }
      //
      // Filter out length modifier
      //
      c = *sFormat;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
      do {
        if ((c == 'l') || (c == 'h')) {
 8005d0a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d0e:	2b6c      	cmp	r3, #108	@ 0x6c
 8005d10:	d003      	beq.n	8005d1a <_VPrintTarget+0x1a2>
 8005d12:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d16:	2b68      	cmp	r3, #104	@ 0x68
 8005d18:	d107      	bne.n	8005d2a <_VPrintTarget+0x1b2>
          c = *sFormat;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	781b      	ldrb	r3, [r3, #0]
 8005d1e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
          sFormat++;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	3301      	adds	r3, #1
 8005d26:	60fb      	str	r3, [r7, #12]
        if ((c == 'l') || (c == 'h')) {
 8005d28:	e7ef      	b.n	8005d0a <_VPrintTarget+0x192>
        }
      } while (1);
      //
      // Handle specifiers
      //
      switch (c) {
 8005d2a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d2e:	2b25      	cmp	r3, #37	@ 0x25
 8005d30:	f000 80b3 	beq.w	8005e9a <_VPrintTarget+0x322>
 8005d34:	2b25      	cmp	r3, #37	@ 0x25
 8005d36:	f2c0 80b7 	blt.w	8005ea8 <_VPrintTarget+0x330>
 8005d3a:	2b78      	cmp	r3, #120	@ 0x78
 8005d3c:	f300 80b4 	bgt.w	8005ea8 <_VPrintTarget+0x330>
 8005d40:	2b58      	cmp	r3, #88	@ 0x58
 8005d42:	f2c0 80b1 	blt.w	8005ea8 <_VPrintTarget+0x330>
 8005d46:	3b58      	subs	r3, #88	@ 0x58
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	f200 80ad 	bhi.w	8005ea8 <_VPrintTarget+0x330>
 8005d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8005d54 <_VPrintTarget+0x1dc>)
 8005d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d54:	08005e4b 	.word	0x08005e4b
 8005d58:	08005ea9 	.word	0x08005ea9
 8005d5c:	08005ea9 	.word	0x08005ea9
 8005d60:	08005ea9 	.word	0x08005ea9
 8005d64:	08005ea9 	.word	0x08005ea9
 8005d68:	08005ea9 	.word	0x08005ea9
 8005d6c:	08005ea9 	.word	0x08005ea9
 8005d70:	08005ea9 	.word	0x08005ea9
 8005d74:	08005ea9 	.word	0x08005ea9
 8005d78:	08005ea9 	.word	0x08005ea9
 8005d7c:	08005ea9 	.word	0x08005ea9
 8005d80:	08005dd9 	.word	0x08005dd9
 8005d84:	08005dff 	.word	0x08005dff
 8005d88:	08005ea9 	.word	0x08005ea9
 8005d8c:	08005ea9 	.word	0x08005ea9
 8005d90:	08005ea9 	.word	0x08005ea9
 8005d94:	08005ea9 	.word	0x08005ea9
 8005d98:	08005ea9 	.word	0x08005ea9
 8005d9c:	08005ea9 	.word	0x08005ea9
 8005da0:	08005ea9 	.word	0x08005ea9
 8005da4:	08005ea9 	.word	0x08005ea9
 8005da8:	08005ea9 	.word	0x08005ea9
 8005dac:	08005ea9 	.word	0x08005ea9
 8005db0:	08005ea9 	.word	0x08005ea9
 8005db4:	08005e75 	.word	0x08005e75
 8005db8:	08005ea9 	.word	0x08005ea9
 8005dbc:	08005ea9 	.word	0x08005ea9
 8005dc0:	08005ea9 	.word	0x08005ea9
 8005dc4:	08005ea9 	.word	0x08005ea9
 8005dc8:	08005e25 	.word	0x08005e25
 8005dcc:	08005ea9 	.word	0x08005ea9
 8005dd0:	08005ea9 	.word	0x08005ea9
 8005dd4:	08005e4b 	.word	0x08005e4b
      case 'c': {
        char c0;
        v = va_arg(*pParamList, int);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	1d19      	adds	r1, r3, #4
 8005dde:	687a      	ldr	r2, [r7, #4]
 8005de0:	6011      	str	r1, [r2, #0]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	653b      	str	r3, [r7, #80]	@ 0x50
        c0 = (char)v;
 8005de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        _StoreChar(&BufferDesc, c0);
 8005dec:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 8005df0:	f107 0314 	add.w	r3, r7, #20
 8005df4:	4611      	mov	r1, r2
 8005df6:	4618      	mov	r0, r3
 8005df8:	f7ff fd1c 	bl	8005834 <_StoreChar>
        break;
 8005dfc:	e055      	b.n	8005eaa <_VPrintTarget+0x332>
      }
      case 'd':
        v = va_arg(*pParamList, int);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	1d19      	adds	r1, r3, #4
 8005e04:	687a      	ldr	r2, [r7, #4]
 8005e06:	6011      	str	r1, [r2, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintInt(&BufferDesc, v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e0c:	f107 0014 	add.w	r0, r7, #20
 8005e10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e12:	9301      	str	r3, [sp, #4]
 8005e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e16:	9300      	str	r3, [sp, #0]
 8005e18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1a:	220a      	movs	r2, #10
 8005e1c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e1e:	f7ff fe1b 	bl	8005a58 <_PrintInt>
        break;
 8005e22:	e042      	b.n	8005eaa <_VPrintTarget+0x332>
      case 'u':
        v = va_arg(*pParamList, int);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	1d19      	adds	r1, r3, #4
 8005e2a:	687a      	ldr	r2, [r7, #4]
 8005e2c:	6011      	str	r1, [r2, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 10u, NumDigits, FieldWidth, FormatFlags);
 8005e32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e34:	f107 0014 	add.w	r0, r7, #20
 8005e38:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e3a:	9301      	str	r3, [sp, #4]
 8005e3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e3e:	9300      	str	r3, [sp, #0]
 8005e40:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e42:	220a      	movs	r2, #10
 8005e44:	f7ff fd72 	bl	800592c <_PrintUnsigned>
        break;
 8005e48:	e02f      	b.n	8005eaa <_VPrintTarget+0x332>
      case 'x':
      case 'X':
        v = va_arg(*pParamList, int);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	1d19      	adds	r1, r3, #4
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	6011      	str	r1, [r2, #0]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, NumDigits, FieldWidth, FormatFlags);
 8005e58:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e5a:	f107 0014 	add.w	r0, r7, #20
 8005e5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005e64:	9300      	str	r3, [sp, #0]
 8005e66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e68:	2210      	movs	r2, #16
 8005e6a:	f7ff fd5f 	bl	800592c <_PrintUnsigned>
        break;
 8005e6e:	e01c      	b.n	8005eaa <_VPrintTarget+0x332>
 8005e70:	2004c7cc 	.word	0x2004c7cc
      case 'p':
        v = va_arg(*pParamList, int);
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	1d19      	adds	r1, r3, #4
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	6011      	str	r1, [r2, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	653b      	str	r3, [r7, #80]	@ 0x50
        _PrintUnsigned(&BufferDesc, (unsigned int)v, 16u, 8u, 8u, 0u);
 8005e82:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005e84:	f107 0014 	add.w	r0, r7, #20
 8005e88:	2300      	movs	r3, #0
 8005e8a:	9301      	str	r3, [sp, #4]
 8005e8c:	2308      	movs	r3, #8
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	2308      	movs	r3, #8
 8005e92:	2210      	movs	r2, #16
 8005e94:	f7ff fd4a 	bl	800592c <_PrintUnsigned>
        break;
 8005e98:	e007      	b.n	8005eaa <_VPrintTarget+0x332>
      case '%':
        _StoreChar(&BufferDesc, '%');
 8005e9a:	f107 0314 	add.w	r3, r7, #20
 8005e9e:	2125      	movs	r1, #37	@ 0x25
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7ff fcc7 	bl	8005834 <_StoreChar>
        break;
 8005ea6:	e000      	b.n	8005eaa <_VPrintTarget+0x332>
      default:
        break;
 8005ea8:	bf00      	nop
      }
      sFormat++;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	3301      	adds	r3, #1
 8005eae:	60fb      	str	r3, [r7, #12]
 8005eb0:	e007      	b.n	8005ec2 <_VPrintTarget+0x34a>
    } else {
      _StoreChar(&BufferDesc, c);
 8005eb2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8005eb6:	f107 0314 	add.w	r3, r7, #20
 8005eba:	4611      	mov	r1, r2
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	f7ff fcb9 	bl	8005834 <_StoreChar>
    }
  } while (*sFormat);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	781b      	ldrb	r3, [r3, #0]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	f47f ae72 	bne.w	8005bb0 <_VPrintTarget+0x38>
 8005ecc:	e000      	b.n	8005ed0 <_VPrintTarget+0x358>
      break;
 8005ece:	bf00      	nop

  //
  // Write remaining data, if any
  //
  if (BufferDesc.Cnt != 0u) {
 8005ed0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d041      	beq.n	8005f5a <_VPrintTarget+0x3e2>
    *(BufferDesc.pPayloadStart) = BufferDesc.Cnt;
 8005ed6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ed8:	69fb      	ldr	r3, [r7, #28]
 8005eda:	b2d2      	uxtb	r2, r2
 8005edc:	701a      	strb	r2, [r3, #0]
    ENCODE_U32(BufferDesc.pPayload, BufferDesc.Options);
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	643b      	str	r3, [r7, #64]	@ 0x40
 8005ee2:	6a3b      	ldr	r3, [r7, #32]
 8005ee4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee6:	e00b      	b.n	8005f00 <_VPrintTarget+0x388>
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005eea:	b2da      	uxtb	r2, r3
 8005eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005eee:	1c59      	adds	r1, r3, #1
 8005ef0:	6439      	str	r1, [r7, #64]	@ 0x40
 8005ef2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005ef6:	b2d2      	uxtb	r2, r2
 8005ef8:	701a      	strb	r2, [r3, #0]
 8005efa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005efc:	09db      	lsrs	r3, r3, #7
 8005efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005f00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f02:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f04:	d8f0      	bhi.n	8005ee8 <_VPrintTarget+0x370>
 8005f06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	643a      	str	r2, [r7, #64]	@ 0x40
 8005f0c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005f0e:	b2d2      	uxtb	r2, r2
 8005f10:	701a      	strb	r2, [r3, #0]
 8005f12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005f14:	61bb      	str	r3, [r7, #24]
    ENCODE_U32(BufferDesc.pPayload, 0);
 8005f16:	69bb      	ldr	r3, [r7, #24]
 8005f18:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f1e:	e00b      	b.n	8005f38 <_VPrintTarget+0x3c0>
 8005f20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f22:	b2da      	uxtb	r2, r3
 8005f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f26:	1c59      	adds	r1, r3, #1
 8005f28:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005f2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005f2e:	b2d2      	uxtb	r2, r2
 8005f30:	701a      	strb	r2, [r3, #0]
 8005f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f34:	09db      	lsrs	r3, r3, #7
 8005f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f3a:	2b7f      	cmp	r3, #127	@ 0x7f
 8005f3c:	d8f0      	bhi.n	8005f20 <_VPrintTarget+0x3a8>
 8005f3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f40:	1c5a      	adds	r2, r3, #1
 8005f42:	63ba      	str	r2, [r7, #56]	@ 0x38
 8005f44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005f46:	b2d2      	uxtb	r2, r2
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f4c:	61bb      	str	r3, [r7, #24]
    _SendPacket(BufferDesc.pPayloadStart, BufferDesc.pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005f4e:	69fb      	ldr	r3, [r7, #28]
 8005f50:	69b9      	ldr	r1, [r7, #24]
 8005f52:	221a      	movs	r2, #26
 8005f54:	4618      	mov	r0, r3
 8005f56:	f7ff fb87 	bl	8005668 <_SendPacket>
  }
#if SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0
  SEGGER_SYSVIEW_UNLOCK();
  RECORD_END();
#else
  RECORD_END();
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	f383 8811 	msr	BASEPRI, r3
#endif
}
 8005f60:	bf00      	nop
 8005f62:	3758      	adds	r7, #88	@ 0x58
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software 
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	b086      	sub	sp, #24
 8005f6c:	af02      	add	r7, sp, #8
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f76:	2300      	movs	r3, #0
 8005f78:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005f7c:	4917      	ldr	r1, [pc, #92]	@ (8005fdc <SEGGER_SYSVIEW_Init+0x74>)
 8005f7e:	4818      	ldr	r0, [pc, #96]	@ (8005fe0 <SEGGER_SYSVIEW_Init+0x78>)
 8005f80:	f7ff f942 	bl	8005208 <SEGGER_RTT_AllocUpBuffer>
 8005f84:	4603      	mov	r3, r0
 8005f86:	b2da      	uxtb	r2, r3
 8005f88:	4b16      	ldr	r3, [pc, #88]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8a:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 8005f8c:	4b15      	ldr	r3, [pc, #84]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f8e:	785a      	ldrb	r2, [r3, #1]
 8005f90:	4b14      	ldr	r3, [pc, #80]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f92:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 8005f94:	4b13      	ldr	r3, [pc, #76]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005f96:	7e1b      	ldrb	r3, [r3, #24]
 8005f98:	4618      	mov	r0, r3
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	9300      	str	r3, [sp, #0]
 8005f9e:	2308      	movs	r3, #8
 8005fa0:	4a11      	ldr	r2, [pc, #68]	@ (8005fe8 <SEGGER_SYSVIEW_Init+0x80>)
 8005fa2:	490f      	ldr	r1, [pc, #60]	@ (8005fe0 <SEGGER_SYSVIEW_Init+0x78>)
 8005fa4:	f7ff f9b4 	bl	8005310 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 8005fa8:	4b0e      	ldr	r3, [pc, #56]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8005fae:	4b0f      	ldr	r3, [pc, #60]	@ (8005fec <SEGGER_SYSVIEW_Init+0x84>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb4:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 8005fb6:	4a0b      	ldr	r2, [pc, #44]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 8005fbc:	4a09      	ldr	r2, [pc, #36]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 8005fc2:	4a08      	ldr	r2, [pc, #32]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 8005fc8:	4a06      	ldr	r2, [pc, #24]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 8005fce:	4b05      	ldr	r3, [pc, #20]	@ (8005fe4 <SEGGER_SYSVIEW_Init+0x7c>)
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 8005fd4:	bf00      	nop
 8005fd6:	3710      	adds	r7, #16
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	bd80      	pop	{r7, pc}
 8005fdc:	2004b794 	.word	0x2004b794
 8005fe0:	08007214 	.word	0x08007214
 8005fe4:	2004c79c 	.word	0x2004c79c
 8005fe8:	2004c794 	.word	0x2004c794
 8005fec:	e0001004 	.word	0xe0001004

08005ff0 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 8005ff8:	4a04      	ldr	r2, [pc, #16]	@ (800600c <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6113      	str	r3, [r2, #16]
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
 800600a:	bf00      	nop
 800600c:	2004c79c 	.word	0x2004c79c

08006010 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8006010:	b580      	push	{r7, lr}
 8006012:	b084      	sub	sp, #16
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006018:	f3ef 8311 	mrs	r3, BASEPRI
 800601c:	f04f 0120 	mov.w	r1, #32
 8006020:	f381 8811 	msr	BASEPRI, r1
 8006024:	60fb      	str	r3, [r7, #12]
 8006026:	4808      	ldr	r0, [pc, #32]	@ (8006048 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8006028:	f7ff fa2f 	bl	800548a <_PreparePacket>
 800602c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800602e:	687a      	ldr	r2, [r7, #4]
 8006030:	68b9      	ldr	r1, [r7, #8]
 8006032:	68b8      	ldr	r0, [r7, #8]
 8006034:	f7ff fb18 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	f383 8811 	msr	BASEPRI, r3
}
 800603e:	bf00      	nop
 8006040:	3710      	adds	r7, #16
 8006042:	46bd      	mov	sp, r7
 8006044:	bd80      	pop	{r7, pc}
 8006046:	bf00      	nop
 8006048:	2004c7cc 	.word	0x2004c7cc

0800604c <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800604c:	b580      	push	{r7, lr}
 800604e:	b088      	sub	sp, #32
 8006050:	af00      	add	r7, sp, #0
 8006052:	6078      	str	r0, [r7, #4]
 8006054:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006056:	f3ef 8311 	mrs	r3, BASEPRI
 800605a:	f04f 0120 	mov.w	r1, #32
 800605e:	f381 8811 	msr	BASEPRI, r1
 8006062:	617b      	str	r3, [r7, #20]
 8006064:	4816      	ldr	r0, [pc, #88]	@ (80060c0 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8006066:	f7ff fa10 	bl	800548a <_PreparePacket>
 800606a:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800606c:	693b      	ldr	r3, [r7, #16]
 800606e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	61fb      	str	r3, [r7, #28]
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	61bb      	str	r3, [r7, #24]
 8006078:	e00b      	b.n	8006092 <SEGGER_SYSVIEW_RecordU32+0x46>
 800607a:	69bb      	ldr	r3, [r7, #24]
 800607c:	b2da      	uxtb	r2, r3
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	1c59      	adds	r1, r3, #1
 8006082:	61f9      	str	r1, [r7, #28]
 8006084:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006088:	b2d2      	uxtb	r2, r2
 800608a:	701a      	strb	r2, [r3, #0]
 800608c:	69bb      	ldr	r3, [r7, #24]
 800608e:	09db      	lsrs	r3, r3, #7
 8006090:	61bb      	str	r3, [r7, #24]
 8006092:	69bb      	ldr	r3, [r7, #24]
 8006094:	2b7f      	cmp	r3, #127	@ 0x7f
 8006096:	d8f0      	bhi.n	800607a <SEGGER_SYSVIEW_RecordU32+0x2e>
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	61fa      	str	r2, [r7, #28]
 800609e:	69ba      	ldr	r2, [r7, #24]
 80060a0:	b2d2      	uxtb	r2, r2
 80060a2:	701a      	strb	r2, [r3, #0]
 80060a4:	69fb      	ldr	r3, [r7, #28]
 80060a6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80060a8:	687a      	ldr	r2, [r7, #4]
 80060aa:	68f9      	ldr	r1, [r7, #12]
 80060ac:	6938      	ldr	r0, [r7, #16]
 80060ae:	f7ff fadb 	bl	8005668 <_SendPacket>
  RECORD_END();
 80060b2:	697b      	ldr	r3, [r7, #20]
 80060b4:	f383 8811 	msr	BASEPRI, r3
}
 80060b8:	bf00      	nop
 80060ba:	3720      	adds	r7, #32
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	2004c7cc 	.word	0x2004c7cc

080060c4 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b08c      	sub	sp, #48	@ 0x30
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	60f8      	str	r0, [r7, #12]
 80060cc:	60b9      	str	r1, [r7, #8]
 80060ce:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 80060d0:	f3ef 8311 	mrs	r3, BASEPRI
 80060d4:	f04f 0120 	mov.w	r1, #32
 80060d8:	f381 8811 	msr	BASEPRI, r1
 80060dc:	61fb      	str	r3, [r7, #28]
 80060de:	4825      	ldr	r0, [pc, #148]	@ (8006174 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 80060e0:	f7ff f9d3 	bl	800548a <_PreparePacket>
 80060e4:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80060e6:	69bb      	ldr	r3, [r7, #24]
 80060e8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80060f2:	e00b      	b.n	800610c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 80060f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060f6:	b2da      	uxtb	r2, r3
 80060f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80060fa:	1c59      	adds	r1, r3, #1
 80060fc:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80060fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006102:	b2d2      	uxtb	r2, r2
 8006104:	701a      	strb	r2, [r3, #0]
 8006106:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006108:	09db      	lsrs	r3, r3, #7
 800610a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800610c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800610e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006110:	d8f0      	bhi.n	80060f4 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8006112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006114:	1c5a      	adds	r2, r3, #1
 8006116:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006118:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800611a:	b2d2      	uxtb	r2, r2
 800611c:	701a      	strb	r2, [r3, #0]
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	627b      	str	r3, [r7, #36]	@ 0x24
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	623b      	str	r3, [r7, #32]
 800612a:	e00b      	b.n	8006144 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800612c:	6a3b      	ldr	r3, [r7, #32]
 800612e:	b2da      	uxtb	r2, r3
 8006130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006132:	1c59      	adds	r1, r3, #1
 8006134:	6279      	str	r1, [r7, #36]	@ 0x24
 8006136:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800613a:	b2d2      	uxtb	r2, r2
 800613c:	701a      	strb	r2, [r3, #0]
 800613e:	6a3b      	ldr	r3, [r7, #32]
 8006140:	09db      	lsrs	r3, r3, #7
 8006142:	623b      	str	r3, [r7, #32]
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	2b7f      	cmp	r3, #127	@ 0x7f
 8006148:	d8f0      	bhi.n	800612c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800614a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800614c:	1c5a      	adds	r2, r3, #1
 800614e:	627a      	str	r2, [r7, #36]	@ 0x24
 8006150:	6a3a      	ldr	r2, [r7, #32]
 8006152:	b2d2      	uxtb	r2, r2
 8006154:	701a      	strb	r2, [r3, #0]
 8006156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006158:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800615a:	68fa      	ldr	r2, [r7, #12]
 800615c:	6979      	ldr	r1, [r7, #20]
 800615e:	69b8      	ldr	r0, [r7, #24]
 8006160:	f7ff fa82 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	f383 8811 	msr	BASEPRI, r3
}
 800616a:	bf00      	nop
 800616c:	3730      	adds	r7, #48	@ 0x30
 800616e:	46bd      	mov	sp, r7
 8006170:	bd80      	pop	{r7, pc}
 8006172:	bf00      	nop
 8006174:	2004c7cc 	.word	0x2004c7cc

08006178 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8006178:	b580      	push	{r7, lr}
 800617a:	b08e      	sub	sp, #56	@ 0x38
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	607a      	str	r2, [r7, #4]
 8006184:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8006186:	f3ef 8311 	mrs	r3, BASEPRI
 800618a:	f04f 0120 	mov.w	r1, #32
 800618e:	f381 8811 	msr	BASEPRI, r1
 8006192:	61fb      	str	r3, [r7, #28]
 8006194:	4832      	ldr	r0, [pc, #200]	@ (8006260 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8006196:	f7ff f978 	bl	800548a <_PreparePacket>
 800619a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800619c:	69bb      	ldr	r3, [r7, #24]
 800619e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80061a0:	697b      	ldr	r3, [r7, #20]
 80061a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	633b      	str	r3, [r7, #48]	@ 0x30
 80061a8:	e00b      	b.n	80061c2 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 80061aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061ac:	b2da      	uxtb	r2, r3
 80061ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b0:	1c59      	adds	r1, r3, #1
 80061b2:	6379      	str	r1, [r7, #52]	@ 0x34
 80061b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061b8:	b2d2      	uxtb	r2, r2
 80061ba:	701a      	strb	r2, [r3, #0]
 80061bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061be:	09db      	lsrs	r3, r3, #7
 80061c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80061c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80061c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80061c6:	d8f0      	bhi.n	80061aa <SEGGER_SYSVIEW_RecordU32x3+0x32>
 80061c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061ca:	1c5a      	adds	r2, r3, #1
 80061cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80061ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80061d0:	b2d2      	uxtb	r2, r2
 80061d2:	701a      	strb	r2, [r3, #0]
 80061d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061d6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80061d8:	697b      	ldr	r3, [r7, #20]
 80061da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061e0:	e00b      	b.n	80061fa <SEGGER_SYSVIEW_RecordU32x3+0x82>
 80061e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061e4:	b2da      	uxtb	r2, r3
 80061e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80061e8:	1c59      	adds	r1, r3, #1
 80061ea:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80061ec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80061f0:	b2d2      	uxtb	r2, r2
 80061f2:	701a      	strb	r2, [r3, #0]
 80061f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f6:	09db      	lsrs	r3, r3, #7
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	2b7f      	cmp	r3, #127	@ 0x7f
 80061fe:	d8f0      	bhi.n	80061e2 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8006200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006202:	1c5a      	adds	r2, r3, #1
 8006204:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006206:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006208:	b2d2      	uxtb	r2, r2
 800620a:	701a      	strb	r2, [r3, #0]
 800620c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800620e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006210:	697b      	ldr	r3, [r7, #20]
 8006212:	627b      	str	r3, [r7, #36]	@ 0x24
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	623b      	str	r3, [r7, #32]
 8006218:	e00b      	b.n	8006232 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	b2da      	uxtb	r2, r3
 800621e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006220:	1c59      	adds	r1, r3, #1
 8006222:	6279      	str	r1, [r7, #36]	@ 0x24
 8006224:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006228:	b2d2      	uxtb	r2, r2
 800622a:	701a      	strb	r2, [r3, #0]
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	09db      	lsrs	r3, r3, #7
 8006230:	623b      	str	r3, [r7, #32]
 8006232:	6a3b      	ldr	r3, [r7, #32]
 8006234:	2b7f      	cmp	r3, #127	@ 0x7f
 8006236:	d8f0      	bhi.n	800621a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8006238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800623a:	1c5a      	adds	r2, r3, #1
 800623c:	627a      	str	r2, [r7, #36]	@ 0x24
 800623e:	6a3a      	ldr	r2, [r7, #32]
 8006240:	b2d2      	uxtb	r2, r2
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006246:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8006248:	68fa      	ldr	r2, [r7, #12]
 800624a:	6979      	ldr	r1, [r7, #20]
 800624c:	69b8      	ldr	r0, [r7, #24]
 800624e:	f7ff fa0b 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	f383 8811 	msr	BASEPRI, r3
}
 8006258:	bf00      	nop
 800625a:	3738      	adds	r7, #56	@ 0x38
 800625c:	46bd      	mov	sp, r7
 800625e:	bd80      	pop	{r7, pc}
 8006260:	2004c7cc 	.word	0x2004c7cc

08006264 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8006264:	b580      	push	{r7, lr}
 8006266:	b090      	sub	sp, #64	@ 0x40
 8006268:	af00      	add	r7, sp, #0
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	607a      	str	r2, [r7, #4]
 8006270:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006272:	f3ef 8311 	mrs	r3, BASEPRI
 8006276:	f04f 0120 	mov.w	r1, #32
 800627a:	f381 8811 	msr	BASEPRI, r1
 800627e:	61fb      	str	r3, [r7, #28]
 8006280:	4840      	ldr	r0, [pc, #256]	@ (8006384 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8006282:	f7ff f902 	bl	800548a <_PreparePacket>
 8006286:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8006288:	69bb      	ldr	r3, [r7, #24]
 800628a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006290:	68bb      	ldr	r3, [r7, #8]
 8006292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006294:	e00b      	b.n	80062ae <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8006296:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006298:	b2da      	uxtb	r2, r3
 800629a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800629c:	1c59      	adds	r1, r3, #1
 800629e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80062a0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	701a      	strb	r2, [r3, #0]
 80062a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062aa:	09db      	lsrs	r3, r3, #7
 80062ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80062ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80062b2:	d8f0      	bhi.n	8006296 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 80062b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062b6:	1c5a      	adds	r2, r3, #1
 80062b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80062ba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80062bc:	b2d2      	uxtb	r2, r2
 80062be:	701a      	strb	r2, [r3, #0]
 80062c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80062c2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	637b      	str	r3, [r7, #52]	@ 0x34
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	633b      	str	r3, [r7, #48]	@ 0x30
 80062cc:	e00b      	b.n	80062e6 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 80062ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062d0:	b2da      	uxtb	r2, r3
 80062d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062d4:	1c59      	adds	r1, r3, #1
 80062d6:	6379      	str	r1, [r7, #52]	@ 0x34
 80062d8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80062dc:	b2d2      	uxtb	r2, r2
 80062de:	701a      	strb	r2, [r3, #0]
 80062e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e2:	09db      	lsrs	r3, r3, #7
 80062e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80062e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80062e8:	2b7f      	cmp	r3, #127	@ 0x7f
 80062ea:	d8f0      	bhi.n	80062ce <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 80062ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ee:	1c5a      	adds	r2, r3, #1
 80062f0:	637a      	str	r2, [r7, #52]	@ 0x34
 80062f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80062f4:	b2d2      	uxtb	r2, r2
 80062f6:	701a      	strb	r2, [r3, #0]
 80062f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062fa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 80062fc:	697b      	ldr	r3, [r7, #20]
 80062fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006304:	e00b      	b.n	800631e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8006306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006308:	b2da      	uxtb	r2, r3
 800630a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800630c:	1c59      	adds	r1, r3, #1
 800630e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006310:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006314:	b2d2      	uxtb	r2, r2
 8006316:	701a      	strb	r2, [r3, #0]
 8006318:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800631a:	09db      	lsrs	r3, r3, #7
 800631c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800631e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006320:	2b7f      	cmp	r3, #127	@ 0x7f
 8006322:	d8f0      	bhi.n	8006306 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8006324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006326:	1c5a      	adds	r2, r3, #1
 8006328:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800632a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800632c:	b2d2      	uxtb	r2, r2
 800632e:	701a      	strb	r2, [r3, #0]
 8006330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006332:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
 8006338:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800633a:	623b      	str	r3, [r7, #32]
 800633c:	e00b      	b.n	8006356 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 800633e:	6a3b      	ldr	r3, [r7, #32]
 8006340:	b2da      	uxtb	r2, r3
 8006342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006344:	1c59      	adds	r1, r3, #1
 8006346:	6279      	str	r1, [r7, #36]	@ 0x24
 8006348:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800634c:	b2d2      	uxtb	r2, r2
 800634e:	701a      	strb	r2, [r3, #0]
 8006350:	6a3b      	ldr	r3, [r7, #32]
 8006352:	09db      	lsrs	r3, r3, #7
 8006354:	623b      	str	r3, [r7, #32]
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	2b7f      	cmp	r3, #127	@ 0x7f
 800635a:	d8f0      	bhi.n	800633e <SEGGER_SYSVIEW_RecordU32x4+0xda>
 800635c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800635e:	1c5a      	adds	r2, r3, #1
 8006360:	627a      	str	r2, [r7, #36]	@ 0x24
 8006362:	6a3a      	ldr	r2, [r7, #32]
 8006364:	b2d2      	uxtb	r2, r2
 8006366:	701a      	strb	r2, [r3, #0]
 8006368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800636a:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800636c:	68fa      	ldr	r2, [r7, #12]
 800636e:	6979      	ldr	r1, [r7, #20]
 8006370:	69b8      	ldr	r0, [r7, #24]
 8006372:	f7ff f979 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	f383 8811 	msr	BASEPRI, r3
}
 800637c:	bf00      	nop
 800637e:	3740      	adds	r7, #64	@ 0x40
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	2004c7cc 	.word	0x2004c7cc

08006388 <SEGGER_SYSVIEW_RecordU32x5>:
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*    Para4   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x5(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3, U32 Para4) {
 8006388:	b580      	push	{r7, lr}
 800638a:	b092      	sub	sp, #72	@ 0x48
 800638c:	af00      	add	r7, sp, #0
 800638e:	60f8      	str	r0, [r7, #12]
 8006390:	60b9      	str	r1, [r7, #8]
 8006392:	607a      	str	r2, [r7, #4]
 8006394:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 5 * SEGGER_SYSVIEW_QUANTA_U32);
 8006396:	f3ef 8311 	mrs	r3, BASEPRI
 800639a:	f04f 0120 	mov.w	r1, #32
 800639e:	f381 8811 	msr	BASEPRI, r1
 80063a2:	61fb      	str	r3, [r7, #28]
 80063a4:	484e      	ldr	r0, [pc, #312]	@ (80064e0 <SEGGER_SYSVIEW_RecordU32x5+0x158>)
 80063a6:	f7ff f870 	bl	800548a <_PreparePacket>
 80063aa:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 80063b0:	697b      	ldr	r3, [r7, #20]
 80063b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	643b      	str	r3, [r7, #64]	@ 0x40
 80063b8:	e00b      	b.n	80063d2 <SEGGER_SYSVIEW_RecordU32x5+0x4a>
 80063ba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063bc:	b2da      	uxtb	r2, r3
 80063be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063c0:	1c59      	adds	r1, r3, #1
 80063c2:	6479      	str	r1, [r7, #68]	@ 0x44
 80063c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80063c8:	b2d2      	uxtb	r2, r2
 80063ca:	701a      	strb	r2, [r3, #0]
 80063cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063ce:	09db      	lsrs	r3, r3, #7
 80063d0:	643b      	str	r3, [r7, #64]	@ 0x40
 80063d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80063d4:	2b7f      	cmp	r3, #127	@ 0x7f
 80063d6:	d8f0      	bhi.n	80063ba <SEGGER_SYSVIEW_RecordU32x5+0x32>
 80063d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063da:	1c5a      	adds	r2, r3, #1
 80063dc:	647a      	str	r2, [r7, #68]	@ 0x44
 80063de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80063e0:	b2d2      	uxtb	r2, r2
 80063e2:	701a      	strb	r2, [r3, #0]
 80063e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80063e6:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	63bb      	str	r3, [r7, #56]	@ 0x38
 80063f0:	e00b      	b.n	800640a <SEGGER_SYSVIEW_RecordU32x5+0x82>
 80063f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80063f8:	1c59      	adds	r1, r3, #1
 80063fa:	63f9      	str	r1, [r7, #60]	@ 0x3c
 80063fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006400:	b2d2      	uxtb	r2, r2
 8006402:	701a      	strb	r2, [r3, #0]
 8006404:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006406:	09db      	lsrs	r3, r3, #7
 8006408:	63bb      	str	r3, [r7, #56]	@ 0x38
 800640a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800640c:	2b7f      	cmp	r3, #127	@ 0x7f
 800640e:	d8f0      	bhi.n	80063f2 <SEGGER_SYSVIEW_RecordU32x5+0x6a>
 8006410:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006412:	1c5a      	adds	r2, r3, #1
 8006414:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006416:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006418:	b2d2      	uxtb	r2, r2
 800641a:	701a      	strb	r2, [r3, #0]
 800641c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800641e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8006420:	697b      	ldr	r3, [r7, #20]
 8006422:	637b      	str	r3, [r7, #52]	@ 0x34
 8006424:	683b      	ldr	r3, [r7, #0]
 8006426:	633b      	str	r3, [r7, #48]	@ 0x30
 8006428:	e00b      	b.n	8006442 <SEGGER_SYSVIEW_RecordU32x5+0xba>
 800642a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800642c:	b2da      	uxtb	r2, r3
 800642e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006430:	1c59      	adds	r1, r3, #1
 8006432:	6379      	str	r1, [r7, #52]	@ 0x34
 8006434:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006438:	b2d2      	uxtb	r2, r2
 800643a:	701a      	strb	r2, [r3, #0]
 800643c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800643e:	09db      	lsrs	r3, r3, #7
 8006440:	633b      	str	r3, [r7, #48]	@ 0x30
 8006442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006444:	2b7f      	cmp	r3, #127	@ 0x7f
 8006446:	d8f0      	bhi.n	800642a <SEGGER_SYSVIEW_RecordU32x5+0xa2>
 8006448:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800644a:	1c5a      	adds	r2, r3, #1
 800644c:	637a      	str	r2, [r7, #52]	@ 0x34
 800644e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006450:	b2d2      	uxtb	r2, r2
 8006452:	701a      	strb	r2, [r3, #0]
 8006454:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006456:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800645c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800645e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006460:	e00b      	b.n	800647a <SEGGER_SYSVIEW_RecordU32x5+0xf2>
 8006462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006464:	b2da      	uxtb	r2, r3
 8006466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006468:	1c59      	adds	r1, r3, #1
 800646a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800646c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006470:	b2d2      	uxtb	r2, r2
 8006472:	701a      	strb	r2, [r3, #0]
 8006474:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006476:	09db      	lsrs	r3, r3, #7
 8006478:	62bb      	str	r3, [r7, #40]	@ 0x28
 800647a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800647c:	2b7f      	cmp	r3, #127	@ 0x7f
 800647e:	d8f0      	bhi.n	8006462 <SEGGER_SYSVIEW_RecordU32x5+0xda>
 8006480:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006482:	1c5a      	adds	r2, r3, #1
 8006484:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006486:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006488:	b2d2      	uxtb	r2, r2
 800648a:	701a      	strb	r2, [r3, #0]
 800648c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800648e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para4);
 8006490:	697b      	ldr	r3, [r7, #20]
 8006492:	627b      	str	r3, [r7, #36]	@ 0x24
 8006494:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006496:	623b      	str	r3, [r7, #32]
 8006498:	e00b      	b.n	80064b2 <SEGGER_SYSVIEW_RecordU32x5+0x12a>
 800649a:	6a3b      	ldr	r3, [r7, #32]
 800649c:	b2da      	uxtb	r2, r3
 800649e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a0:	1c59      	adds	r1, r3, #1
 80064a2:	6279      	str	r1, [r7, #36]	@ 0x24
 80064a4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80064a8:	b2d2      	uxtb	r2, r2
 80064aa:	701a      	strb	r2, [r3, #0]
 80064ac:	6a3b      	ldr	r3, [r7, #32]
 80064ae:	09db      	lsrs	r3, r3, #7
 80064b0:	623b      	str	r3, [r7, #32]
 80064b2:	6a3b      	ldr	r3, [r7, #32]
 80064b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80064b6:	d8f0      	bhi.n	800649a <SEGGER_SYSVIEW_RecordU32x5+0x112>
 80064b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	627a      	str	r2, [r7, #36]	@ 0x24
 80064be:	6a3a      	ldr	r2, [r7, #32]
 80064c0:	b2d2      	uxtb	r2, r2
 80064c2:	701a      	strb	r2, [r3, #0]
 80064c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 80064c8:	68fa      	ldr	r2, [r7, #12]
 80064ca:	6979      	ldr	r1, [r7, #20]
 80064cc:	69b8      	ldr	r0, [r7, #24]
 80064ce:	f7ff f8cb 	bl	8005668 <_SendPacket>
  RECORD_END();
 80064d2:	69fb      	ldr	r3, [r7, #28]
 80064d4:	f383 8811 	msr	BASEPRI, r3
}
 80064d8:	bf00      	nop
 80064da:	3748      	adds	r7, #72	@ 0x48
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}
 80064e0:	2004c7cc 	.word	0x2004c7cc

080064e4 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b08c      	sub	sp, #48	@ 0x30
 80064e8:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 80064ea:	4b58      	ldr	r3, [pc, #352]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 80064ec:	2201      	movs	r2, #1
 80064ee:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 80064f0:	f3ef 8311 	mrs	r3, BASEPRI
 80064f4:	f04f 0120 	mov.w	r1, #32
 80064f8:	f381 8811 	msr	BASEPRI, r1
 80064fc:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 80064fe:	4b53      	ldr	r3, [pc, #332]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 8006500:	785b      	ldrb	r3, [r3, #1]
 8006502:	220a      	movs	r2, #10
 8006504:	4952      	ldr	r1, [pc, #328]	@ (8006650 <SEGGER_SYSVIEW_Start+0x16c>)
 8006506:	4618      	mov	r0, r3
 8006508:	f7f9 fe8a 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8006512:	200a      	movs	r0, #10
 8006514:	f7ff fd7c 	bl	8006010 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8006518:	f3ef 8311 	mrs	r3, BASEPRI
 800651c:	f04f 0120 	mov.w	r1, #32
 8006520:	f381 8811 	msr	BASEPRI, r1
 8006524:	60bb      	str	r3, [r7, #8]
 8006526:	484b      	ldr	r0, [pc, #300]	@ (8006654 <SEGGER_SYSVIEW_Start+0x170>)
 8006528:	f7fe ffaf 	bl	800548a <_PreparePacket>
 800652c:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006536:	4b45      	ldr	r3, [pc, #276]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 8006538:	685b      	ldr	r3, [r3, #4]
 800653a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800653c:	e00b      	b.n	8006556 <SEGGER_SYSVIEW_Start+0x72>
 800653e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006540:	b2da      	uxtb	r2, r3
 8006542:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006544:	1c59      	adds	r1, r3, #1
 8006546:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8006548:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800654c:	b2d2      	uxtb	r2, r2
 800654e:	701a      	strb	r2, [r3, #0]
 8006550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006552:	09db      	lsrs	r3, r3, #7
 8006554:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	2b7f      	cmp	r3, #127	@ 0x7f
 800655a:	d8f0      	bhi.n	800653e <SEGGER_SYSVIEW_Start+0x5a>
 800655c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800655e:	1c5a      	adds	r2, r3, #1
 8006560:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006562:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006564:	b2d2      	uxtb	r2, r2
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800656a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800656c:	683b      	ldr	r3, [r7, #0]
 800656e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006570:	4b36      	ldr	r3, [pc, #216]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	623b      	str	r3, [r7, #32]
 8006576:	e00b      	b.n	8006590 <SEGGER_SYSVIEW_Start+0xac>
 8006578:	6a3b      	ldr	r3, [r7, #32]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800657e:	1c59      	adds	r1, r3, #1
 8006580:	6279      	str	r1, [r7, #36]	@ 0x24
 8006582:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006586:	b2d2      	uxtb	r2, r2
 8006588:	701a      	strb	r2, [r3, #0]
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	09db      	lsrs	r3, r3, #7
 800658e:	623b      	str	r3, [r7, #32]
 8006590:	6a3b      	ldr	r3, [r7, #32]
 8006592:	2b7f      	cmp	r3, #127	@ 0x7f
 8006594:	d8f0      	bhi.n	8006578 <SEGGER_SYSVIEW_Start+0x94>
 8006596:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	627a      	str	r2, [r7, #36]	@ 0x24
 800659c:	6a3a      	ldr	r2, [r7, #32]
 800659e:	b2d2      	uxtb	r2, r2
 80065a0:	701a      	strb	r2, [r3, #0]
 80065a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a4:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	61fb      	str	r3, [r7, #28]
 80065aa:	4b28      	ldr	r3, [pc, #160]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	61bb      	str	r3, [r7, #24]
 80065b0:	e00b      	b.n	80065ca <SEGGER_SYSVIEW_Start+0xe6>
 80065b2:	69bb      	ldr	r3, [r7, #24]
 80065b4:	b2da      	uxtb	r2, r3
 80065b6:	69fb      	ldr	r3, [r7, #28]
 80065b8:	1c59      	adds	r1, r3, #1
 80065ba:	61f9      	str	r1, [r7, #28]
 80065bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065c0:	b2d2      	uxtb	r2, r2
 80065c2:	701a      	strb	r2, [r3, #0]
 80065c4:	69bb      	ldr	r3, [r7, #24]
 80065c6:	09db      	lsrs	r3, r3, #7
 80065c8:	61bb      	str	r3, [r7, #24]
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80065ce:	d8f0      	bhi.n	80065b2 <SEGGER_SYSVIEW_Start+0xce>
 80065d0:	69fb      	ldr	r3, [r7, #28]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	61fa      	str	r2, [r7, #28]
 80065d6:	69ba      	ldr	r2, [r7, #24]
 80065d8:	b2d2      	uxtb	r2, r2
 80065da:	701a      	strb	r2, [r3, #0]
 80065dc:	69fb      	ldr	r3, [r7, #28]
 80065de:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	617b      	str	r3, [r7, #20]
 80065e4:	2300      	movs	r3, #0
 80065e6:	613b      	str	r3, [r7, #16]
 80065e8:	e00b      	b.n	8006602 <SEGGER_SYSVIEW_Start+0x11e>
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	b2da      	uxtb	r2, r3
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	1c59      	adds	r1, r3, #1
 80065f2:	6179      	str	r1, [r7, #20]
 80065f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	09db      	lsrs	r3, r3, #7
 8006600:	613b      	str	r3, [r7, #16]
 8006602:	693b      	ldr	r3, [r7, #16]
 8006604:	2b7f      	cmp	r3, #127	@ 0x7f
 8006606:	d8f0      	bhi.n	80065ea <SEGGER_SYSVIEW_Start+0x106>
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	617a      	str	r2, [r7, #20]
 800660e:	693a      	ldr	r2, [r7, #16]
 8006610:	b2d2      	uxtb	r2, r2
 8006612:	701a      	strb	r2, [r3, #0]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 8006618:	2218      	movs	r2, #24
 800661a:	6839      	ldr	r1, [r7, #0]
 800661c:	6878      	ldr	r0, [r7, #4]
 800661e:	f7ff f823 	bl	8005668 <_SendPacket>
      RECORD_END();
 8006622:	68bb      	ldr	r3, [r7, #8]
 8006624:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 8006628:	4b08      	ldr	r3, [pc, #32]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 800662a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800662c:	2b00      	cmp	r3, #0
 800662e:	d002      	beq.n	8006636 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8006630:	4b06      	ldr	r3, [pc, #24]	@ (800664c <SEGGER_SYSVIEW_Start+0x168>)
 8006632:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006634:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 8006636:	f000 f9eb 	bl	8006a10 <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800663a:	f000 f9b1 	bl	80069a0 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800663e:	f000 fc23 	bl	8006e88 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8006642:	bf00      	nop
 8006644:	3730      	adds	r7, #48	@ 0x30
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	2004c79c 	.word	0x2004c79c
 8006650:	0800723c 	.word	0x0800723c
 8006654:	2004c7cc 	.word	0x2004c7cc

08006658 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800665e:	f3ef 8311 	mrs	r3, BASEPRI
 8006662:	f04f 0120 	mov.w	r1, #32
 8006666:	f381 8811 	msr	BASEPRI, r1
 800666a:	607b      	str	r3, [r7, #4]
 800666c:	480b      	ldr	r0, [pc, #44]	@ (800669c <SEGGER_SYSVIEW_Stop+0x44>)
 800666e:	f7fe ff0c 	bl	800548a <_PreparePacket>
 8006672:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8006674:	4b0a      	ldr	r3, [pc, #40]	@ (80066a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d007      	beq.n	800668c <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800667c:	220b      	movs	r2, #11
 800667e:	6839      	ldr	r1, [r7, #0]
 8006680:	6838      	ldr	r0, [r7, #0]
 8006682:	f7fe fff1 	bl	8005668 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 8006686:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <SEGGER_SYSVIEW_Stop+0x48>)
 8006688:	2200      	movs	r2, #0
 800668a:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	f383 8811 	msr	BASEPRI, r3
}
 8006692:	bf00      	nop
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}
 800669a:	bf00      	nop
 800669c:	2004c7cc 	.word	0x2004c7cc
 80066a0:	2004c79c 	.word	0x2004c79c

080066a4 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b08c      	sub	sp, #48	@ 0x30
 80066a8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80066aa:	f3ef 8311 	mrs	r3, BASEPRI
 80066ae:	f04f 0120 	mov.w	r1, #32
 80066b2:	f381 8811 	msr	BASEPRI, r1
 80066b6:	60fb      	str	r3, [r7, #12]
 80066b8:	4845      	ldr	r0, [pc, #276]	@ (80067d0 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80066ba:	f7fe fee6 	bl	800548a <_PreparePacket>
 80066be:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80066c8:	4b42      	ldr	r3, [pc, #264]	@ (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80066ca:	685b      	ldr	r3, [r3, #4]
 80066cc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066ce:	e00b      	b.n	80066e8 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80066d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066d2:	b2da      	uxtb	r2, r3
 80066d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066d6:	1c59      	adds	r1, r3, #1
 80066d8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80066da:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80066de:	b2d2      	uxtb	r2, r2
 80066e0:	701a      	strb	r2, [r3, #0]
 80066e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066e4:	09db      	lsrs	r3, r3, #7
 80066e6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80066e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066ea:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ec:	d8f0      	bhi.n	80066d0 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 80066ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066f0:	1c5a      	adds	r2, r3, #1
 80066f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80066f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066f6:	b2d2      	uxtb	r2, r2
 80066f8:	701a      	strb	r2, [r3, #0]
 80066fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066fc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	627b      	str	r3, [r7, #36]	@ 0x24
 8006702:	4b34      	ldr	r3, [pc, #208]	@ (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8006704:	689b      	ldr	r3, [r3, #8]
 8006706:	623b      	str	r3, [r7, #32]
 8006708:	e00b      	b.n	8006722 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800670a:	6a3b      	ldr	r3, [r7, #32]
 800670c:	b2da      	uxtb	r2, r3
 800670e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006710:	1c59      	adds	r1, r3, #1
 8006712:	6279      	str	r1, [r7, #36]	@ 0x24
 8006714:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006718:	b2d2      	uxtb	r2, r2
 800671a:	701a      	strb	r2, [r3, #0]
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	09db      	lsrs	r3, r3, #7
 8006720:	623b      	str	r3, [r7, #32]
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	2b7f      	cmp	r3, #127	@ 0x7f
 8006726:	d8f0      	bhi.n	800670a <SEGGER_SYSVIEW_GetSysDesc+0x66>
 8006728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672a:	1c5a      	adds	r2, r3, #1
 800672c:	627a      	str	r2, [r7, #36]	@ 0x24
 800672e:	6a3a      	ldr	r2, [r7, #32]
 8006730:	b2d2      	uxtb	r2, r2
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006736:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	61fb      	str	r3, [r7, #28]
 800673c:	4b25      	ldr	r3, [pc, #148]	@ (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800673e:	691b      	ldr	r3, [r3, #16]
 8006740:	61bb      	str	r3, [r7, #24]
 8006742:	e00b      	b.n	800675c <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8006744:	69bb      	ldr	r3, [r7, #24]
 8006746:	b2da      	uxtb	r2, r3
 8006748:	69fb      	ldr	r3, [r7, #28]
 800674a:	1c59      	adds	r1, r3, #1
 800674c:	61f9      	str	r1, [r7, #28]
 800674e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006752:	b2d2      	uxtb	r2, r2
 8006754:	701a      	strb	r2, [r3, #0]
 8006756:	69bb      	ldr	r3, [r7, #24]
 8006758:	09db      	lsrs	r3, r3, #7
 800675a:	61bb      	str	r3, [r7, #24]
 800675c:	69bb      	ldr	r3, [r7, #24]
 800675e:	2b7f      	cmp	r3, #127	@ 0x7f
 8006760:	d8f0      	bhi.n	8006744 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8006762:	69fb      	ldr	r3, [r7, #28]
 8006764:	1c5a      	adds	r2, r3, #1
 8006766:	61fa      	str	r2, [r7, #28]
 8006768:	69ba      	ldr	r2, [r7, #24]
 800676a:	b2d2      	uxtb	r2, r2
 800676c:	701a      	strb	r2, [r3, #0]
 800676e:	69fb      	ldr	r3, [r7, #28]
 8006770:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	617b      	str	r3, [r7, #20]
 8006776:	2300      	movs	r3, #0
 8006778:	613b      	str	r3, [r7, #16]
 800677a:	e00b      	b.n	8006794 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	b2da      	uxtb	r2, r3
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	1c59      	adds	r1, r3, #1
 8006784:	6179      	str	r1, [r7, #20]
 8006786:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800678a:	b2d2      	uxtb	r2, r2
 800678c:	701a      	strb	r2, [r3, #0]
 800678e:	693b      	ldr	r3, [r7, #16]
 8006790:	09db      	lsrs	r3, r3, #7
 8006792:	613b      	str	r3, [r7, #16]
 8006794:	693b      	ldr	r3, [r7, #16]
 8006796:	2b7f      	cmp	r3, #127	@ 0x7f
 8006798:	d8f0      	bhi.n	800677c <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	1c5a      	adds	r2, r3, #1
 800679e:	617a      	str	r2, [r7, #20]
 80067a0:	693a      	ldr	r2, [r7, #16]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	701a      	strb	r2, [r3, #0]
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80067aa:	2218      	movs	r2, #24
 80067ac:	6879      	ldr	r1, [r7, #4]
 80067ae:	68b8      	ldr	r0, [r7, #8]
 80067b0:	f7fe ff5a 	bl	8005668 <_SendPacket>
  RECORD_END();
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80067ba:	4b06      	ldr	r3, [pc, #24]	@ (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d002      	beq.n	80067c8 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80067c2:	4b04      	ldr	r3, [pc, #16]	@ (80067d4 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80067c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067c6:	4798      	blx	r3
  }
}
 80067c8:	bf00      	nop
 80067ca:	3730      	adds	r7, #48	@ 0x30
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}
 80067d0:	2004c7cc 	.word	0x2004c7cc
 80067d4:	2004c79c 	.word	0x2004c79c

080067d8 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80067d8:	b580      	push	{r7, lr}
 80067da:	b092      	sub	sp, #72	@ 0x48
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80067e0:	f3ef 8311 	mrs	r3, BASEPRI
 80067e4:	f04f 0120 	mov.w	r1, #32
 80067e8:	f381 8811 	msr	BASEPRI, r1
 80067ec:	617b      	str	r3, [r7, #20]
 80067ee:	486a      	ldr	r0, [pc, #424]	@ (8006998 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 80067f0:	f7fe fe4b 	bl	800548a <_PreparePacket>
 80067f4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	4b66      	ldr	r3, [pc, #408]	@ (800699c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	1ad3      	subs	r3, r2, r3
 8006808:	643b      	str	r3, [r7, #64]	@ 0x40
 800680a:	e00b      	b.n	8006824 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800680c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800680e:	b2da      	uxtb	r2, r3
 8006810:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006812:	1c59      	adds	r1, r3, #1
 8006814:	6479      	str	r1, [r7, #68]	@ 0x44
 8006816:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800681a:	b2d2      	uxtb	r2, r2
 800681c:	701a      	strb	r2, [r3, #0]
 800681e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006820:	09db      	lsrs	r3, r3, #7
 8006822:	643b      	str	r3, [r7, #64]	@ 0x40
 8006824:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006826:	2b7f      	cmp	r3, #127	@ 0x7f
 8006828:	d8f0      	bhi.n	800680c <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800682a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800682c:	1c5a      	adds	r2, r3, #1
 800682e:	647a      	str	r2, [r7, #68]	@ 0x44
 8006830:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006832:	b2d2      	uxtb	r2, r2
 8006834:	701a      	strb	r2, [r3, #0]
 8006836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006838:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006844:	e00b      	b.n	800685e <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 8006846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006848:	b2da      	uxtb	r2, r3
 800684a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800684c:	1c59      	adds	r1, r3, #1
 800684e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8006850:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006854:	b2d2      	uxtb	r2, r2
 8006856:	701a      	strb	r2, [r3, #0]
 8006858:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800685a:	09db      	lsrs	r3, r3, #7
 800685c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800685e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006860:	2b7f      	cmp	r3, #127	@ 0x7f
 8006862:	d8f0      	bhi.n	8006846 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8006864:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006866:	1c5a      	adds	r2, r3, #1
 8006868:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800686a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800686c:	b2d2      	uxtb	r2, r2
 800686e:	701a      	strb	r2, [r3, #0]
 8006870:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006872:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	685b      	ldr	r3, [r3, #4]
 8006878:	2220      	movs	r2, #32
 800687a:	4619      	mov	r1, r3
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f7fe fdb7 	bl	80053f0 <_EncodeStr>
 8006882:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8006884:	2209      	movs	r2, #9
 8006886:	68f9      	ldr	r1, [r7, #12]
 8006888:	6938      	ldr	r0, [r7, #16]
 800688a:	f7fe feed 	bl	8005668 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	637b      	str	r3, [r7, #52]	@ 0x34
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681a      	ldr	r2, [r3, #0]
 800689a:	4b40      	ldr	r3, [pc, #256]	@ (800699c <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	1ad3      	subs	r3, r2, r3
 80068a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80068a2:	e00b      	b.n	80068bc <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80068a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068a6:	b2da      	uxtb	r2, r3
 80068a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068aa:	1c59      	adds	r1, r3, #1
 80068ac:	6379      	str	r1, [r7, #52]	@ 0x34
 80068ae:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068b2:	b2d2      	uxtb	r2, r2
 80068b4:	701a      	strb	r2, [r3, #0]
 80068b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068b8:	09db      	lsrs	r3, r3, #7
 80068ba:	633b      	str	r3, [r7, #48]	@ 0x30
 80068bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80068be:	2b7f      	cmp	r3, #127	@ 0x7f
 80068c0:	d8f0      	bhi.n	80068a4 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80068c2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	637a      	str	r2, [r7, #52]	@ 0x34
 80068c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	701a      	strb	r2, [r3, #0]
 80068ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068d0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	68db      	ldr	r3, [r3, #12]
 80068da:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068dc:	e00b      	b.n	80068f6 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80068de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068e4:	1c59      	adds	r1, r3, #1
 80068e6:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80068e8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80068ec:	b2d2      	uxtb	r2, r2
 80068ee:	701a      	strb	r2, [r3, #0]
 80068f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f2:	09db      	lsrs	r3, r3, #7
 80068f4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80068f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80068fa:	d8f0      	bhi.n	80068de <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 80068fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068fe:	1c5a      	adds	r2, r3, #1
 8006900:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006902:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006904:	b2d2      	uxtb	r2, r2
 8006906:	701a      	strb	r2, [r3, #0]
 8006908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800690a:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	623b      	str	r3, [r7, #32]
 8006916:	e00b      	b.n	8006930 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 8006918:	6a3b      	ldr	r3, [r7, #32]
 800691a:	b2da      	uxtb	r2, r3
 800691c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800691e:	1c59      	adds	r1, r3, #1
 8006920:	6279      	str	r1, [r7, #36]	@ 0x24
 8006922:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006926:	b2d2      	uxtb	r2, r2
 8006928:	701a      	strb	r2, [r3, #0]
 800692a:	6a3b      	ldr	r3, [r7, #32]
 800692c:	09db      	lsrs	r3, r3, #7
 800692e:	623b      	str	r3, [r7, #32]
 8006930:	6a3b      	ldr	r3, [r7, #32]
 8006932:	2b7f      	cmp	r3, #127	@ 0x7f
 8006934:	d8f0      	bhi.n	8006918 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 8006936:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	627a      	str	r2, [r7, #36]	@ 0x24
 800693c:	6a3a      	ldr	r2, [r7, #32]
 800693e:	b2d2      	uxtb	r2, r2
 8006940:	701a      	strb	r2, [r3, #0]
 8006942:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006944:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	2300      	movs	r3, #0
 800694c:	61bb      	str	r3, [r7, #24]
 800694e:	e00b      	b.n	8006968 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8006950:	69bb      	ldr	r3, [r7, #24]
 8006952:	b2da      	uxtb	r2, r3
 8006954:	69fb      	ldr	r3, [r7, #28]
 8006956:	1c59      	adds	r1, r3, #1
 8006958:	61f9      	str	r1, [r7, #28]
 800695a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800695e:	b2d2      	uxtb	r2, r2
 8006960:	701a      	strb	r2, [r3, #0]
 8006962:	69bb      	ldr	r3, [r7, #24]
 8006964:	09db      	lsrs	r3, r3, #7
 8006966:	61bb      	str	r3, [r7, #24]
 8006968:	69bb      	ldr	r3, [r7, #24]
 800696a:	2b7f      	cmp	r3, #127	@ 0x7f
 800696c:	d8f0      	bhi.n	8006950 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800696e:	69fb      	ldr	r3, [r7, #28]
 8006970:	1c5a      	adds	r2, r3, #1
 8006972:	61fa      	str	r2, [r7, #28]
 8006974:	69ba      	ldr	r2, [r7, #24]
 8006976:	b2d2      	uxtb	r2, r2
 8006978:	701a      	strb	r2, [r3, #0]
 800697a:	69fb      	ldr	r3, [r7, #28]
 800697c:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800697e:	2215      	movs	r2, #21
 8006980:	68f9      	ldr	r1, [r7, #12]
 8006982:	6938      	ldr	r0, [r7, #16]
 8006984:	f7fe fe70 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006988:	697b      	ldr	r3, [r7, #20]
 800698a:	f383 8811 	msr	BASEPRI, r3
}
 800698e:	bf00      	nop
 8006990:	3748      	adds	r7, #72	@ 0x48
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}
 8006996:	bf00      	nop
 8006998:	2004c7cc 	.word	0x2004c7cc
 800699c:	2004c79c 	.word	0x2004c79c

080069a0 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80069a0:	b580      	push	{r7, lr}
 80069a2:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80069a4:	4b07      	ldr	r3, [pc, #28]	@ (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069a6:	6a1b      	ldr	r3, [r3, #32]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d008      	beq.n	80069be <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80069ac:	4b05      	ldr	r3, [pc, #20]	@ (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069ae:	6a1b      	ldr	r3, [r3, #32]
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d003      	beq.n	80069be <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80069b6:	4b03      	ldr	r3, [pc, #12]	@ (80069c4 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80069b8:	6a1b      	ldr	r3, [r3, #32]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	4798      	blx	r3
  }
}
 80069be:	bf00      	nop
 80069c0:	bd80      	pop	{r7, pc}
 80069c2:	bf00      	nop
 80069c4:	2004c79c 	.word	0x2004c79c

080069c8 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069d0:	f3ef 8311 	mrs	r3, BASEPRI
 80069d4:	f04f 0120 	mov.w	r1, #32
 80069d8:	f381 8811 	msr	BASEPRI, r1
 80069dc:	617b      	str	r3, [r7, #20]
 80069de:	480b      	ldr	r0, [pc, #44]	@ (8006a0c <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 80069e0:	f7fe fd53 	bl	800548a <_PreparePacket>
 80069e4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80069e6:	2280      	movs	r2, #128	@ 0x80
 80069e8:	6879      	ldr	r1, [r7, #4]
 80069ea:	6938      	ldr	r0, [r7, #16]
 80069ec:	f7fe fd00 	bl	80053f0 <_EncodeStr>
 80069f0:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 80069f2:	220e      	movs	r2, #14
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	6938      	ldr	r0, [r7, #16]
 80069f8:	f7fe fe36 	bl	8005668 <_SendPacket>
  RECORD_END();
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	f383 8811 	msr	BASEPRI, r3
}
 8006a02:	bf00      	nop
 8006a04:	3718      	adds	r7, #24
 8006a06:	46bd      	mov	sp, r7
 8006a08:	bd80      	pop	{r7, pc}
 8006a0a:	bf00      	nop
 8006a0c:	2004c7cc 	.word	0x2004c7cc

08006a10 <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 8006a10:	b590      	push	{r4, r7, lr}
 8006a12:	b083      	sub	sp, #12
 8006a14:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 8006a16:	4b15      	ldr	r3, [pc, #84]	@ (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d01a      	beq.n	8006a54 <SEGGER_SYSVIEW_RecordSystime+0x44>
 8006a1e:	4b13      	ldr	r3, [pc, #76]	@ (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d015      	beq.n	8006a54 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 8006a28:	4b10      	ldr	r3, [pc, #64]	@ (8006a6c <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 8006a2a:	6a1b      	ldr	r3, [r3, #32]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	4798      	blx	r3
 8006a30:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a34:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8006a36:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006a3a:	f04f 0200 	mov.w	r2, #0
 8006a3e:	f04f 0300 	mov.w	r3, #0
 8006a42:	000a      	movs	r2, r1
 8006a44:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8006a46:	4613      	mov	r3, r2
 8006a48:	461a      	mov	r2, r3
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	200d      	movs	r0, #13
 8006a4e:	f7ff fb39 	bl	80060c4 <SEGGER_SYSVIEW_RecordU32x2>
 8006a52:	e006      	b.n	8006a62 <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8006a54:	4b06      	ldr	r3, [pc, #24]	@ (8006a70 <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	200c      	movs	r0, #12
 8006a5c:	f7ff faf6 	bl	800604c <SEGGER_SYSVIEW_RecordU32>
  }
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	370c      	adds	r7, #12
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd90      	pop	{r4, r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	2004c79c 	.word	0x2004c79c
 8006a70:	e0001004 	.word	0xe0001004

08006a74 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b086      	sub	sp, #24
 8006a78:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006a7a:	f3ef 8311 	mrs	r3, BASEPRI
 8006a7e:	f04f 0120 	mov.w	r1, #32
 8006a82:	f381 8811 	msr	BASEPRI, r1
 8006a86:	60fb      	str	r3, [r7, #12]
 8006a88:	4819      	ldr	r0, [pc, #100]	@ (8006af0 <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8006a8a:	f7fe fcfe 	bl	800548a <_PreparePacket>
 8006a8e:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8006a94:	4b17      	ldr	r3, [pc, #92]	@ (8006af4 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006a9c:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	617b      	str	r3, [r7, #20]
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	613b      	str	r3, [r7, #16]
 8006aa6:	e00b      	b.n	8006ac0 <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8006aa8:	693b      	ldr	r3, [r7, #16]
 8006aaa:	b2da      	uxtb	r2, r3
 8006aac:	697b      	ldr	r3, [r7, #20]
 8006aae:	1c59      	adds	r1, r3, #1
 8006ab0:	6179      	str	r1, [r7, #20]
 8006ab2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ab6:	b2d2      	uxtb	r2, r2
 8006ab8:	701a      	strb	r2, [r3, #0]
 8006aba:	693b      	ldr	r3, [r7, #16]
 8006abc:	09db      	lsrs	r3, r3, #7
 8006abe:	613b      	str	r3, [r7, #16]
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ac4:	d8f0      	bhi.n	8006aa8 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	1c5a      	adds	r2, r3, #1
 8006aca:	617a      	str	r2, [r7, #20]
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	b2d2      	uxtb	r2, r2
 8006ad0:	701a      	strb	r2, [r3, #0]
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 8006ad6:	2202      	movs	r2, #2
 8006ad8:	6879      	ldr	r1, [r7, #4]
 8006ada:	68b8      	ldr	r0, [r7, #8]
 8006adc:	f7fe fdc4 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f383 8811 	msr	BASEPRI, r3
}
 8006ae6:	bf00      	nop
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	2004c7cc 	.word	0x2004c7cc
 8006af4:	e000ed04 	.word	0xe000ed04

08006af8 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006afe:	f3ef 8311 	mrs	r3, BASEPRI
 8006b02:	f04f 0120 	mov.w	r1, #32
 8006b06:	f381 8811 	msr	BASEPRI, r1
 8006b0a:	607b      	str	r3, [r7, #4]
 8006b0c:	4807      	ldr	r0, [pc, #28]	@ (8006b2c <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 8006b0e:	f7fe fcbc 	bl	800548a <_PreparePacket>
 8006b12:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 8006b14:	2203      	movs	r2, #3
 8006b16:	6839      	ldr	r1, [r7, #0]
 8006b18:	6838      	ldr	r0, [r7, #0]
 8006b1a:	f7fe fda5 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f383 8811 	msr	BASEPRI, r3
}
 8006b24:	bf00      	nop
 8006b26:	3708      	adds	r7, #8
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	bd80      	pop	{r7, pc}
 8006b2c:	2004c7cc 	.word	0x2004c7cc

08006b30 <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 8006b30:	b580      	push	{r7, lr}
 8006b32:	b082      	sub	sp, #8
 8006b34:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b36:	f3ef 8311 	mrs	r3, BASEPRI
 8006b3a:	f04f 0120 	mov.w	r1, #32
 8006b3e:	f381 8811 	msr	BASEPRI, r1
 8006b42:	607b      	str	r3, [r7, #4]
 8006b44:	4807      	ldr	r0, [pc, #28]	@ (8006b64 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8006b46:	f7fe fca0 	bl	800548a <_PreparePacket>
 8006b4a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8006b4c:	2212      	movs	r2, #18
 8006b4e:	6839      	ldr	r1, [r7, #0]
 8006b50:	6838      	ldr	r0, [r7, #0]
 8006b52:	f7fe fd89 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f383 8811 	msr	BASEPRI, r3
}
 8006b5c:	bf00      	nop
 8006b5e:	3708      	adds	r7, #8
 8006b60:	46bd      	mov	sp, r7
 8006b62:	bd80      	pop	{r7, pc}
 8006b64:	2004c7cc 	.word	0x2004c7cc

08006b68 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8006b6e:	f3ef 8311 	mrs	r3, BASEPRI
 8006b72:	f04f 0120 	mov.w	r1, #32
 8006b76:	f381 8811 	msr	BASEPRI, r1
 8006b7a:	607b      	str	r3, [r7, #4]
 8006b7c:	4807      	ldr	r0, [pc, #28]	@ (8006b9c <SEGGER_SYSVIEW_OnIdle+0x34>)
 8006b7e:	f7fe fc84 	bl	800548a <_PreparePacket>
 8006b82:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8006b84:	2211      	movs	r2, #17
 8006b86:	6839      	ldr	r1, [r7, #0]
 8006b88:	6838      	ldr	r0, [r7, #0]
 8006b8a:	f7fe fd6d 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f383 8811 	msr	BASEPRI, r3
}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2004c7cc 	.word	0x2004c7cc

08006ba0 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b088      	sub	sp, #32
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006ba8:	f3ef 8311 	mrs	r3, BASEPRI
 8006bac:	f04f 0120 	mov.w	r1, #32
 8006bb0:	f381 8811 	msr	BASEPRI, r1
 8006bb4:	617b      	str	r3, [r7, #20]
 8006bb6:	4819      	ldr	r0, [pc, #100]	@ (8006c1c <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8006bb8:	f7fe fc67 	bl	800548a <_PreparePacket>
 8006bbc:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006bbe:	693b      	ldr	r3, [r7, #16]
 8006bc0:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006bc2:	4b17      	ldr	r3, [pc, #92]	@ (8006c20 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	687a      	ldr	r2, [r7, #4]
 8006bc8:	1ad3      	subs	r3, r2, r3
 8006bca:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	61fb      	str	r3, [r7, #28]
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	61bb      	str	r3, [r7, #24]
 8006bd4:	e00b      	b.n	8006bee <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	b2da      	uxtb	r2, r3
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	1c59      	adds	r1, r3, #1
 8006bde:	61f9      	str	r1, [r7, #28]
 8006be0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006be4:	b2d2      	uxtb	r2, r2
 8006be6:	701a      	strb	r2, [r3, #0]
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	09db      	lsrs	r3, r3, #7
 8006bec:	61bb      	str	r3, [r7, #24]
 8006bee:	69bb      	ldr	r3, [r7, #24]
 8006bf0:	2b7f      	cmp	r3, #127	@ 0x7f
 8006bf2:	d8f0      	bhi.n	8006bd6 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 8006bf4:	69fb      	ldr	r3, [r7, #28]
 8006bf6:	1c5a      	adds	r2, r3, #1
 8006bf8:	61fa      	str	r2, [r7, #28]
 8006bfa:	69ba      	ldr	r2, [r7, #24]
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 8006c04:	2208      	movs	r2, #8
 8006c06:	68f9      	ldr	r1, [r7, #12]
 8006c08:	6938      	ldr	r0, [r7, #16]
 8006c0a:	f7fe fd2d 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f383 8811 	msr	BASEPRI, r3
}
 8006c14:	bf00      	nop
 8006c16:	3720      	adds	r7, #32
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}
 8006c1c:	2004c7cc 	.word	0x2004c7cc
 8006c20:	2004c79c 	.word	0x2004c79c

08006c24 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 8006c24:	b580      	push	{r7, lr}
 8006c26:	b088      	sub	sp, #32
 8006c28:	af00      	add	r7, sp, #0
 8006c2a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006c2c:	f3ef 8311 	mrs	r3, BASEPRI
 8006c30:	f04f 0120 	mov.w	r1, #32
 8006c34:	f381 8811 	msr	BASEPRI, r1
 8006c38:	617b      	str	r3, [r7, #20]
 8006c3a:	4819      	ldr	r0, [pc, #100]	@ (8006ca0 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8006c3c:	f7fe fc25 	bl	800548a <_PreparePacket>
 8006c40:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006c46:	4b17      	ldr	r3, [pc, #92]	@ (8006ca4 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8006c48:	691b      	ldr	r3, [r3, #16]
 8006c4a:	687a      	ldr	r2, [r7, #4]
 8006c4c:	1ad3      	subs	r3, r2, r3
 8006c4e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	61fb      	str	r3, [r7, #28]
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	61bb      	str	r3, [r7, #24]
 8006c58:	e00b      	b.n	8006c72 <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8006c5a:	69bb      	ldr	r3, [r7, #24]
 8006c5c:	b2da      	uxtb	r2, r3
 8006c5e:	69fb      	ldr	r3, [r7, #28]
 8006c60:	1c59      	adds	r1, r3, #1
 8006c62:	61f9      	str	r1, [r7, #28]
 8006c64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006c68:	b2d2      	uxtb	r2, r2
 8006c6a:	701a      	strb	r2, [r3, #0]
 8006c6c:	69bb      	ldr	r3, [r7, #24]
 8006c6e:	09db      	lsrs	r3, r3, #7
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	69bb      	ldr	r3, [r7, #24]
 8006c74:	2b7f      	cmp	r3, #127	@ 0x7f
 8006c76:	d8f0      	bhi.n	8006c5a <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8006c78:	69fb      	ldr	r3, [r7, #28]
 8006c7a:	1c5a      	adds	r2, r3, #1
 8006c7c:	61fa      	str	r2, [r7, #28]
 8006c7e:	69ba      	ldr	r2, [r7, #24]
 8006c80:	b2d2      	uxtb	r2, r2
 8006c82:	701a      	strb	r2, [r3, #0]
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8006c88:	2204      	movs	r2, #4
 8006c8a:	68f9      	ldr	r1, [r7, #12]
 8006c8c:	6938      	ldr	r0, [r7, #16]
 8006c8e:	f7fe fceb 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	f383 8811 	msr	BASEPRI, r3
}
 8006c98:	bf00      	nop
 8006c9a:	3720      	adds	r7, #32
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}
 8006ca0:	2004c7cc 	.word	0x2004c7cc
 8006ca4:	2004c79c 	.word	0x2004c79c

08006ca8 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b088      	sub	sp, #32
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8006cb0:	f3ef 8311 	mrs	r3, BASEPRI
 8006cb4:	f04f 0120 	mov.w	r1, #32
 8006cb8:	f381 8811 	msr	BASEPRI, r1
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	4819      	ldr	r0, [pc, #100]	@ (8006d24 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 8006cc0:	f7fe fbe3 	bl	800548a <_PreparePacket>
 8006cc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8006cc6:	693b      	ldr	r3, [r7, #16]
 8006cc8:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8006cca:	4b17      	ldr	r3, [pc, #92]	@ (8006d28 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	1ad3      	subs	r3, r2, r3
 8006cd2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	61fb      	str	r3, [r7, #28]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	61bb      	str	r3, [r7, #24]
 8006cdc:	e00b      	b.n	8006cf6 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 8006cde:	69bb      	ldr	r3, [r7, #24]
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	69fb      	ldr	r3, [r7, #28]
 8006ce4:	1c59      	adds	r1, r3, #1
 8006ce6:	61f9      	str	r1, [r7, #28]
 8006ce8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006cec:	b2d2      	uxtb	r2, r2
 8006cee:	701a      	strb	r2, [r3, #0]
 8006cf0:	69bb      	ldr	r3, [r7, #24]
 8006cf2:	09db      	lsrs	r3, r3, #7
 8006cf4:	61bb      	str	r3, [r7, #24]
 8006cf6:	69bb      	ldr	r3, [r7, #24]
 8006cf8:	2b7f      	cmp	r3, #127	@ 0x7f
 8006cfa:	d8f0      	bhi.n	8006cde <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	1c5a      	adds	r2, r3, #1
 8006d00:	61fa      	str	r2, [r7, #28]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	b2d2      	uxtb	r2, r2
 8006d06:	701a      	strb	r2, [r3, #0]
 8006d08:	69fb      	ldr	r3, [r7, #28]
 8006d0a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 8006d0c:	2206      	movs	r2, #6
 8006d0e:	68f9      	ldr	r1, [r7, #12]
 8006d10:	6938      	ldr	r0, [r7, #16]
 8006d12:	f7fe fca9 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	f383 8811 	msr	BASEPRI, r3
}
 8006d1c:	bf00      	nop
 8006d1e:	3720      	adds	r7, #32
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}
 8006d24:	2004c7cc 	.word	0x2004c7cc
 8006d28:	2004c79c 	.word	0x2004c79c

08006d2c <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 8006d2c:	b480      	push	{r7}
 8006d2e:	b083      	sub	sp, #12
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8006d34:	4b04      	ldr	r3, [pc, #16]	@ (8006d48 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8006d36:	691b      	ldr	r3, [r3, #16]
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	1ad3      	subs	r3, r2, r3
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr
 8006d48:	2004c79c 	.word	0x2004c79c

08006d4c <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b08c      	sub	sp, #48	@ 0x30
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	4603      	mov	r3, r0
 8006d54:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8006d56:	4b3b      	ldr	r3, [pc, #236]	@ (8006e44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d06d      	beq.n	8006e3a <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 8006d5e:	4b39      	ldr	r3, [pc, #228]	@ (8006e44 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8006d64:	2300      	movs	r3, #0
 8006d66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d68:	e008      	b.n	8006d7c <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8006d6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 8006d70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d007      	beq.n	8006d86 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8006d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d78:	3301      	adds	r3, #1
 8006d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006d7c:	79fb      	ldrb	r3, [r7, #7]
 8006d7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d80:	429a      	cmp	r2, r3
 8006d82:	d3f2      	bcc.n	8006d6a <SEGGER_SYSVIEW_SendModule+0x1e>
 8006d84:	e000      	b.n	8006d88 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8006d86:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8006d88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d055      	beq.n	8006e3a <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006d8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006d92:	f04f 0120 	mov.w	r1, #32
 8006d96:	f381 8811 	msr	BASEPRI, r1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	482a      	ldr	r0, [pc, #168]	@ (8006e48 <SEGGER_SYSVIEW_SendModule+0xfc>)
 8006d9e:	f7fe fb74 	bl	800548a <_PreparePacket>
 8006da2:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dac:	79fb      	ldrb	r3, [r7, #7]
 8006dae:	623b      	str	r3, [r7, #32]
 8006db0:	e00b      	b.n	8006dca <SEGGER_SYSVIEW_SendModule+0x7e>
 8006db2:	6a3b      	ldr	r3, [r7, #32]
 8006db4:	b2da      	uxtb	r2, r3
 8006db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006db8:	1c59      	adds	r1, r3, #1
 8006dba:	6279      	str	r1, [r7, #36]	@ 0x24
 8006dbc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dc0:	b2d2      	uxtb	r2, r2
 8006dc2:	701a      	strb	r2, [r3, #0]
 8006dc4:	6a3b      	ldr	r3, [r7, #32]
 8006dc6:	09db      	lsrs	r3, r3, #7
 8006dc8:	623b      	str	r3, [r7, #32]
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	2b7f      	cmp	r3, #127	@ 0x7f
 8006dce:	d8f0      	bhi.n	8006db2 <SEGGER_SYSVIEW_SendModule+0x66>
 8006dd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dd2:	1c5a      	adds	r2, r3, #1
 8006dd4:	627a      	str	r2, [r7, #36]	@ 0x24
 8006dd6:	6a3a      	ldr	r2, [r7, #32]
 8006dd8:	b2d2      	uxtb	r2, r2
 8006dda:	701a      	strb	r2, [r3, #0]
 8006ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dde:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	61fb      	str	r3, [r7, #28]
 8006de4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	61bb      	str	r3, [r7, #24]
 8006dea:	e00b      	b.n	8006e04 <SEGGER_SYSVIEW_SendModule+0xb8>
 8006dec:	69bb      	ldr	r3, [r7, #24]
 8006dee:	b2da      	uxtb	r2, r3
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	1c59      	adds	r1, r3, #1
 8006df4:	61f9      	str	r1, [r7, #28]
 8006df6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	09db      	lsrs	r3, r3, #7
 8006e02:	61bb      	str	r3, [r7, #24]
 8006e04:	69bb      	ldr	r3, [r7, #24]
 8006e06:	2b7f      	cmp	r3, #127	@ 0x7f
 8006e08:	d8f0      	bhi.n	8006dec <SEGGER_SYSVIEW_SendModule+0xa0>
 8006e0a:	69fb      	ldr	r3, [r7, #28]
 8006e0c:	1c5a      	adds	r2, r3, #1
 8006e0e:	61fa      	str	r2, [r7, #28]
 8006e10:	69ba      	ldr	r2, [r7, #24]
 8006e12:	b2d2      	uxtb	r2, r2
 8006e14:	701a      	strb	r2, [r3, #0]
 8006e16:	69fb      	ldr	r3, [r7, #28]
 8006e18:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	2280      	movs	r2, #128	@ 0x80
 8006e20:	4619      	mov	r1, r3
 8006e22:	68f8      	ldr	r0, [r7, #12]
 8006e24:	f7fe fae4 	bl	80053f0 <_EncodeStr>
 8006e28:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 8006e2a:	2216      	movs	r2, #22
 8006e2c:	68f9      	ldr	r1, [r7, #12]
 8006e2e:	6938      	ldr	r0, [r7, #16]
 8006e30:	f7fe fc1a 	bl	8005668 <_SendPacket>
      RECORD_END();
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8006e3a:	bf00      	nop
 8006e3c:	3730      	adds	r7, #48	@ 0x30
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}
 8006e42:	bf00      	nop
 8006e44:	2004c7c4 	.word	0x2004c7c4
 8006e48:	2004c7cc 	.word	0x2004c7cc

08006e4c <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b082      	sub	sp, #8
 8006e50:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 8006e52:	4b0c      	ldr	r3, [pc, #48]	@ (8006e84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00f      	beq.n	8006e7a <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8006e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e84 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	68db      	ldr	r3, [r3, #12]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d002      	beq.n	8006e6e <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68db      	ldr	r3, [r3, #12]
 8006e6c:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	691b      	ldr	r3, [r3, #16]
 8006e72:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1f2      	bne.n	8006e60 <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8006e7a:	bf00      	nop
 8006e7c:	3708      	adds	r7, #8
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}
 8006e82:	bf00      	nop
 8006e84:	2004c7c4 	.word	0x2004c7c4

08006e88 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b086      	sub	sp, #24
 8006e8c:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 8006e8e:	f3ef 8311 	mrs	r3, BASEPRI
 8006e92:	f04f 0120 	mov.w	r1, #32
 8006e96:	f381 8811 	msr	BASEPRI, r1
 8006e9a:	60fb      	str	r3, [r7, #12]
 8006e9c:	4817      	ldr	r0, [pc, #92]	@ (8006efc <SEGGER_SYSVIEW_SendNumModules+0x74>)
 8006e9e:	f7fe faf4 	bl	800548a <_PreparePacket>
 8006ea2:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	617b      	str	r3, [r7, #20]
 8006eac:	4b14      	ldr	r3, [pc, #80]	@ (8006f00 <SEGGER_SYSVIEW_SendNumModules+0x78>)
 8006eae:	781b      	ldrb	r3, [r3, #0]
 8006eb0:	613b      	str	r3, [r7, #16]
 8006eb2:	e00b      	b.n	8006ecc <SEGGER_SYSVIEW_SendNumModules+0x44>
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	b2da      	uxtb	r2, r3
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	1c59      	adds	r1, r3, #1
 8006ebc:	6179      	str	r1, [r7, #20]
 8006ebe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006ec2:	b2d2      	uxtb	r2, r2
 8006ec4:	701a      	strb	r2, [r3, #0]
 8006ec6:	693b      	ldr	r3, [r7, #16]
 8006ec8:	09db      	lsrs	r3, r3, #7
 8006eca:	613b      	str	r3, [r7, #16]
 8006ecc:	693b      	ldr	r3, [r7, #16]
 8006ece:	2b7f      	cmp	r3, #127	@ 0x7f
 8006ed0:	d8f0      	bhi.n	8006eb4 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	1c5a      	adds	r2, r3, #1
 8006ed6:	617a      	str	r2, [r7, #20]
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	b2d2      	uxtb	r2, r2
 8006edc:	701a      	strb	r2, [r3, #0]
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 8006ee2:	221b      	movs	r2, #27
 8006ee4:	6879      	ldr	r1, [r7, #4]
 8006ee6:	68b8      	ldr	r0, [r7, #8]
 8006ee8:	f7fe fbbe 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f383 8811 	msr	BASEPRI, r3
}
 8006ef2:	bf00      	nop
 8006ef4:	3718      	adds	r7, #24
 8006ef6:	46bd      	mov	sp, r7
 8006ef8:	bd80      	pop	{r7, pc}
 8006efa:	bf00      	nop
 8006efc:	2004c7cc 	.word	0x2004c7cc
 8006f00:	2004c7c8 	.word	0x2004c7c8

08006f04 <SEGGER_SYSVIEW_PrintfTarget>:
*    the host.
*
*  Parameters
*    s        - String to be formatted.
*/
void SEGGER_SYSVIEW_PrintfTarget(const char* s, ...) {
 8006f04:	b40f      	push	{r0, r1, r2, r3}
 8006f06:	b580      	push	{r7, lr}
 8006f08:	b082      	sub	sp, #8
 8006f0a:	af00      	add	r7, sp, #0
  va_list ParamList;

  va_start(ParamList, s);
 8006f0c:	f107 0314 	add.w	r3, r7, #20
 8006f10:	607b      	str	r3, [r7, #4]
  _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
 8006f12:	1d3b      	adds	r3, r7, #4
 8006f14:	461a      	mov	r2, r3
 8006f16:	2100      	movs	r1, #0
 8006f18:	6938      	ldr	r0, [r7, #16]
 8006f1a:	f7fe fe2d 	bl	8005b78 <_VPrintTarget>
  va_end(ParamList);
}
 8006f1e:	bf00      	nop
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006f28:	b004      	add	sp, #16
 8006f2a:	4770      	bx	lr

08006f2c <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 8006f2c:	b580      	push	{r7, lr}
 8006f2e:	b08a      	sub	sp, #40	@ 0x28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f34:	f3ef 8311 	mrs	r3, BASEPRI
 8006f38:	f04f 0120 	mov.w	r1, #32
 8006f3c:	f381 8811 	msr	BASEPRI, r1
 8006f40:	617b      	str	r3, [r7, #20]
 8006f42:	4827      	ldr	r0, [pc, #156]	@ (8006fe0 <SEGGER_SYSVIEW_Warn+0xb4>)
 8006f44:	f7fe faa1 	bl	800548a <_PreparePacket>
 8006f48:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 8006f4a:	2280      	movs	r2, #128	@ 0x80
 8006f4c:	6879      	ldr	r1, [r7, #4]
 8006f4e:	6938      	ldr	r0, [r7, #16]
 8006f50:	f7fe fa4e 	bl	80053f0 <_EncodeStr>
 8006f54:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f5a:	2301      	movs	r3, #1
 8006f5c:	623b      	str	r3, [r7, #32]
 8006f5e:	e00b      	b.n	8006f78 <SEGGER_SYSVIEW_Warn+0x4c>
 8006f60:	6a3b      	ldr	r3, [r7, #32]
 8006f62:	b2da      	uxtb	r2, r3
 8006f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f66:	1c59      	adds	r1, r3, #1
 8006f68:	6279      	str	r1, [r7, #36]	@ 0x24
 8006f6a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006f6e:	b2d2      	uxtb	r2, r2
 8006f70:	701a      	strb	r2, [r3, #0]
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	09db      	lsrs	r3, r3, #7
 8006f76:	623b      	str	r3, [r7, #32]
 8006f78:	6a3b      	ldr	r3, [r7, #32]
 8006f7a:	2b7f      	cmp	r3, #127	@ 0x7f
 8006f7c:	d8f0      	bhi.n	8006f60 <SEGGER_SYSVIEW_Warn+0x34>
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	1c5a      	adds	r2, r3, #1
 8006f82:	627a      	str	r2, [r7, #36]	@ 0x24
 8006f84:	6a3a      	ldr	r2, [r7, #32]
 8006f86:	b2d2      	uxtb	r2, r2
 8006f88:	701a      	strb	r2, [r3, #0]
 8006f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f8c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	61fb      	str	r3, [r7, #28]
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
 8006f96:	e00b      	b.n	8006fb0 <SEGGER_SYSVIEW_Warn+0x84>
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	1c59      	adds	r1, r3, #1
 8006fa0:	61f9      	str	r1, [r7, #28]
 8006fa2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8006fa6:	b2d2      	uxtb	r2, r2
 8006fa8:	701a      	strb	r2, [r3, #0]
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	09db      	lsrs	r3, r3, #7
 8006fae:	61bb      	str	r3, [r7, #24]
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b7f      	cmp	r3, #127	@ 0x7f
 8006fb4:	d8f0      	bhi.n	8006f98 <SEGGER_SYSVIEW_Warn+0x6c>
 8006fb6:	69fb      	ldr	r3, [r7, #28]
 8006fb8:	1c5a      	adds	r2, r3, #1
 8006fba:	61fa      	str	r2, [r7, #28]
 8006fbc:	69ba      	ldr	r2, [r7, #24]
 8006fbe:	b2d2      	uxtb	r2, r2
 8006fc0:	701a      	strb	r2, [r3, #0]
 8006fc2:	69fb      	ldr	r3, [r7, #28]
 8006fc4:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8006fc6:	221a      	movs	r2, #26
 8006fc8:	68f9      	ldr	r1, [r7, #12]
 8006fca:	6938      	ldr	r0, [r7, #16]
 8006fcc:	f7fe fb4c 	bl	8005668 <_SendPacket>
  RECORD_END();
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	f383 8811 	msr	BASEPRI, r3
}
 8006fd6:	bf00      	nop
 8006fd8:	3728      	adds	r7, #40	@ 0x28
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	2004c7cc 	.word	0x2004c7cc

08006fe4 <memcmp>:
 8006fe4:	b510      	push	{r4, lr}
 8006fe6:	3901      	subs	r1, #1
 8006fe8:	4402      	add	r2, r0
 8006fea:	4290      	cmp	r0, r2
 8006fec:	d101      	bne.n	8006ff2 <memcmp+0xe>
 8006fee:	2000      	movs	r0, #0
 8006ff0:	e005      	b.n	8006ffe <memcmp+0x1a>
 8006ff2:	7803      	ldrb	r3, [r0, #0]
 8006ff4:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8006ff8:	42a3      	cmp	r3, r4
 8006ffa:	d001      	beq.n	8007000 <memcmp+0x1c>
 8006ffc:	1b18      	subs	r0, r3, r4
 8006ffe:	bd10      	pop	{r4, pc}
 8007000:	3001      	adds	r0, #1
 8007002:	e7f2      	b.n	8006fea <memcmp+0x6>

08007004 <memset>:
 8007004:	4402      	add	r2, r0
 8007006:	4603      	mov	r3, r0
 8007008:	4293      	cmp	r3, r2
 800700a:	d100      	bne.n	800700e <memset+0xa>
 800700c:	4770      	bx	lr
 800700e:	f803 1b01 	strb.w	r1, [r3], #1
 8007012:	e7f9      	b.n	8007008 <memset+0x4>

08007014 <__libc_init_array>:
 8007014:	b570      	push	{r4, r5, r6, lr}
 8007016:	4d0d      	ldr	r5, [pc, #52]	@ (800704c <__libc_init_array+0x38>)
 8007018:	4c0d      	ldr	r4, [pc, #52]	@ (8007050 <__libc_init_array+0x3c>)
 800701a:	1b64      	subs	r4, r4, r5
 800701c:	10a4      	asrs	r4, r4, #2
 800701e:	2600      	movs	r6, #0
 8007020:	42a6      	cmp	r6, r4
 8007022:	d109      	bne.n	8007038 <__libc_init_array+0x24>
 8007024:	4d0b      	ldr	r5, [pc, #44]	@ (8007054 <__libc_init_array+0x40>)
 8007026:	4c0c      	ldr	r4, [pc, #48]	@ (8007058 <__libc_init_array+0x44>)
 8007028:	f000 f826 	bl	8007078 <_init>
 800702c:	1b64      	subs	r4, r4, r5
 800702e:	10a4      	asrs	r4, r4, #2
 8007030:	2600      	movs	r6, #0
 8007032:	42a6      	cmp	r6, r4
 8007034:	d105      	bne.n	8007042 <__libc_init_array+0x2e>
 8007036:	bd70      	pop	{r4, r5, r6, pc}
 8007038:	f855 3b04 	ldr.w	r3, [r5], #4
 800703c:	4798      	blx	r3
 800703e:	3601      	adds	r6, #1
 8007040:	e7ee      	b.n	8007020 <__libc_init_array+0xc>
 8007042:	f855 3b04 	ldr.w	r3, [r5], #4
 8007046:	4798      	blx	r3
 8007048:	3601      	adds	r6, #1
 800704a:	e7f2      	b.n	8007032 <__libc_init_array+0x1e>
 800704c:	08007260 	.word	0x08007260
 8007050:	08007260 	.word	0x08007260
 8007054:	08007260 	.word	0x08007260
 8007058:	08007264 	.word	0x08007264

0800705c <memcpy>:
 800705c:	440a      	add	r2, r1
 800705e:	4291      	cmp	r1, r2
 8007060:	f100 33ff 	add.w	r3, r0, #4294967295
 8007064:	d100      	bne.n	8007068 <memcpy+0xc>
 8007066:	4770      	bx	lr
 8007068:	b510      	push	{r4, lr}
 800706a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800706e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007072:	4291      	cmp	r1, r2
 8007074:	d1f9      	bne.n	800706a <memcpy+0xe>
 8007076:	bd10      	pop	{r4, pc}

08007078 <_init>:
 8007078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800707a:	bf00      	nop
 800707c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800707e:	bc08      	pop	{r3}
 8007080:	469e      	mov	lr, r3
 8007082:	4770      	bx	lr

08007084 <_fini>:
 8007084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007086:	bf00      	nop
 8007088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800708a:	bc08      	pop	{r3}
 800708c:	469e      	mov	lr, r3
 800708e:	4770      	bx	lr

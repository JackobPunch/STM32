
506Generating_signals2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08003484  08003484  00004484  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080034dc  080034dc  00006890  2**0
                  CONTENTS
  4 .ARM          00000008  080034dc  080034dc  000044dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080034e4  080034e4  00006890  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080034e4  080034e4  000044e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080034e8  080034e8  000044e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00001890  20000000  080034ec  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d0  20001890  08004d7c  00006890  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001a60  08004d7c  00006a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006890  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2a2  00000000  00000000  000068c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d4c  00000000  00000000  00011b62  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b98  00000000  00000000  000138b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008db  00000000  00000000  00014448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021fdf  00000000  00000000  00014d23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9a3  00000000  00000000  00036d02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cf05b  00000000  00000000  000446a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00113700  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000375c  00000000  00000000  00113744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00116ea0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20001890 	.word	0x20001890
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800346c 	.word	0x0800346c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20001894 	.word	0x20001894
 800021c:	0800346c 	.word	0x0800346c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <TIM6_DAC_IRQHandler>:
static void MX_DAC_Init(void);
static void MX_TIM6_Init(void);
/* USER CODE BEGIN PFP */

void TIM6_DAC_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
    HAL_TIM_IRQHandler(&htim6);
 80005b4:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <TIM6_DAC_IRQHandler+0x10>)
 80005b6:	f001 fd77 	bl	80020a8 <HAL_TIM_IRQHandler>
}
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	200018c0 	.word	0x200018c0

080005c4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b082      	sub	sp, #8
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
    static int index = 0;

    if (htim->Instance == TIM6) {
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4a14      	ldr	r2, [pc, #80]	@ (8000624 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80005d2:	4293      	cmp	r3, r2
 80005d4:	d121      	bne.n	800061a <HAL_TIM_PeriodElapsedCallback+0x56>
        // Update DAC channels
    	printf("%d", values1[index]);
 80005d6:	4b14      	ldr	r3, [pc, #80]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a14      	ldr	r2, [pc, #80]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005e0:	4619      	mov	r1, r3
 80005e2:	4813      	ldr	r0, [pc, #76]	@ (8000630 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80005e4:	f002 f876 	bl	80026d4 <iprintf>
    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, values1[index]);
 80005e8:	4b0f      	ldr	r3, [pc, #60]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a0f      	ldr	r2, [pc, #60]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x68>)
 80005ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80005f2:	2200      	movs	r2, #0
 80005f4:	2100      	movs	r1, #0
 80005f6:	480f      	ldr	r0, [pc, #60]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80005f8:	f000 fda3 	bl	8001142 <HAL_DAC_SetValue>
        HAL_DAC_SetValue(&hdac, DAC_CHANNEL_2, DAC_ALIGN_12B_R, values1[index]);
 80005fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	4a0a      	ldr	r2, [pc, #40]	@ (800062c <HAL_TIM_PeriodElapsedCallback+0x68>)
 8000602:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000606:	2200      	movs	r2, #0
 8000608:	2110      	movs	r1, #16
 800060a:	480a      	ldr	r0, [pc, #40]	@ (8000634 <HAL_TIM_PeriodElapsedCallback+0x70>)
 800060c:	f000 fd99 	bl	8001142 <HAL_DAC_SetValue>
        index++;
 8000610:	4b05      	ldr	r3, [pc, #20]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	3301      	adds	r3, #1
 8000616:	4a04      	ldr	r2, [pc, #16]	@ (8000628 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000618:	6013      	str	r3, [r2, #0]
    }
}
 800061a:	bf00      	nop
 800061c:	3708      	adds	r7, #8
 800061e:	46bd      	mov	sp, r7
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	40001000 	.word	0x40001000
 8000628:	20001908 	.word	0x20001908
 800062c:	20000000 	.word	0x20000000
 8000630:	08003484 	.word	0x08003484
 8000634:	200018ac 	.word	0x200018ac

08000638 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("start\r\n");
 800063c:	480c      	ldr	r0, [pc, #48]	@ (8000670 <main+0x38>)
 800063e:	f002 f8b1 	bl	80027a4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fbe1 	bl	8000e08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f819 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f8eb 	bl	8000824 <MX_GPIO_Init>
  MX_DAC_Init();
 800064e:	f000 f87f 	bl	8000750 <MX_DAC_Init>
  MX_TIM6_Init();
 8000652:	f000 f8b1 	bl	80007b8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000656:	2100      	movs	r1, #0
 8000658:	4806      	ldr	r0, [pc, #24]	@ (8000674 <main+0x3c>)
 800065a:	f000 fd1b 	bl	8001094 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 800065e:	2110      	movs	r1, #16
 8000660:	4804      	ldr	r0, [pc, #16]	@ (8000674 <main+0x3c>)
 8000662:	f000 fd17 	bl	8001094 <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000666:	4804      	ldr	r0, [pc, #16]	@ (8000678 <main+0x40>)
 8000668:	f001 fcae 	bl	8001fc8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	bf00      	nop
 800066e:	e7fd      	b.n	800066c <main+0x34>
 8000670:	08003488 	.word	0x08003488
 8000674:	200018ac 	.word	0x200018ac
 8000678:	200018c0 	.word	0x200018c0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 031c 	add.w	r3, r7, #28
 8000686:	2234      	movs	r2, #52	@ 0x34
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 f96a 	bl	8002964 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 0308 	add.w	r3, r7, #8
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b28      	ldr	r3, [pc, #160]	@ (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	@ (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	@ (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	4b22      	ldr	r3, [pc, #136]	@ (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	@ (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	@ (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 200;
 80006f0:	23c8      	movs	r3, #200	@ 0xc8
 80006f2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4618      	mov	r0, r3
 8000706:	f001 f98b 	bl	8001a20 <HAL_RCC_OscConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000710:	f000 f95c 	bl	80009cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000714:	230f      	movs	r3, #15
 8000716:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000718:	2302      	movs	r3, #2
 800071a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071c:	2300      	movs	r3, #0
 800071e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000720:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000724:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800072a:	f107 0308 	add.w	r3, r7, #8
 800072e:	2103      	movs	r1, #3
 8000730:	4618      	mov	r0, r3
 8000732:	f000 ff37 	bl	80015a4 <HAL_RCC_ClockConfig>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800073c:	f000 f946 	bl	80009cc <Error_Handler>
  }
}
 8000740:	bf00      	nop
 8000742:	3750      	adds	r7, #80	@ 0x50
 8000744:	46bd      	mov	sp, r7
 8000746:	bd80      	pop	{r7, pc}
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000756:	463b      	mov	r3, r7
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <MX_DAC_Init+0x60>)
 8000760:	4a14      	ldr	r2, [pc, #80]	@ (80007b4 <MX_DAC_Init+0x64>)
 8000762:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000764:	4812      	ldr	r0, [pc, #72]	@ (80007b0 <MX_DAC_Init+0x60>)
 8000766:	f000 fc73 	bl	8001050 <HAL_DAC_Init>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000770:	f000 f92c 	bl	80009cc <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000774:	2300      	movs	r3, #0
 8000776:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000778:	2300      	movs	r3, #0
 800077a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800077c:	463b      	mov	r3, r7
 800077e:	2200      	movs	r2, #0
 8000780:	4619      	mov	r1, r3
 8000782:	480b      	ldr	r0, [pc, #44]	@ (80007b0 <MX_DAC_Init+0x60>)
 8000784:	f000 fd07 	bl	8001196 <HAL_DAC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800078e:	f000 f91d 	bl	80009cc <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8000792:	463b      	mov	r3, r7
 8000794:	2210      	movs	r2, #16
 8000796:	4619      	mov	r1, r3
 8000798:	4805      	ldr	r0, [pc, #20]	@ (80007b0 <MX_DAC_Init+0x60>)
 800079a:	f000 fcfc 	bl	8001196 <HAL_DAC_ConfigChannel>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80007a4:	f000 f912 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80007a8:	bf00      	nop
 80007aa:	3708      	adds	r7, #8
 80007ac:	46bd      	mov	sp, r7
 80007ae:	bd80      	pop	{r7, pc}
 80007b0:	200018ac 	.word	0x200018ac
 80007b4:	40007400 	.word	0x40007400

080007b8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007be:	463b      	mov	r3, r7
 80007c0:	2200      	movs	r2, #0
 80007c2:	601a      	str	r2, [r3, #0]
 80007c4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80007c6:	4b15      	ldr	r3, [pc, #84]	@ (800081c <MX_TIM6_Init+0x64>)
 80007c8:	4a15      	ldr	r2, [pc, #84]	@ (8000820 <MX_TIM6_Init+0x68>)
 80007ca:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 8399;
 80007cc:	4b13      	ldr	r3, [pc, #76]	@ (800081c <MX_TIM6_Init+0x64>)
 80007ce:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80007d2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007d4:	4b11      	ldr	r3, [pc, #68]	@ (800081c <MX_TIM6_Init+0x64>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 80007da:	4b10      	ldr	r3, [pc, #64]	@ (800081c <MX_TIM6_Init+0x64>)
 80007dc:	2263      	movs	r2, #99	@ 0x63
 80007de:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007e0:	4b0e      	ldr	r3, [pc, #56]	@ (800081c <MX_TIM6_Init+0x64>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80007e6:	480d      	ldr	r0, [pc, #52]	@ (800081c <MX_TIM6_Init+0x64>)
 80007e8:	f001 fb9e 	bl	8001f28 <HAL_TIM_Base_Init>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 80007f2:	f000 f8eb 	bl	80009cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f6:	2300      	movs	r3, #0
 80007f8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	4619      	mov	r1, r3
 8000802:	4806      	ldr	r0, [pc, #24]	@ (800081c <MX_TIM6_Init+0x64>)
 8000804:	f001 fe14 	bl	8002430 <HAL_TIMEx_MasterConfigSynchronization>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800080e:	f000 f8dd 	bl	80009cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	3708      	adds	r7, #8
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	bf00      	nop
 800081c:	200018c0 	.word	0x200018c0
 8000820:	40001000 	.word	0x40001000

08000824 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b08c      	sub	sp, #48	@ 0x30
 8000828:	af00      	add	r7, sp, #0
	 GPIO_InitTypeDef GPIO_InitStruct = {0};
 800082a:	f107 031c 	add.w	r3, r7, #28
 800082e:	2200      	movs	r2, #0
 8000830:	601a      	str	r2, [r3, #0]
 8000832:	605a      	str	r2, [r3, #4]
 8000834:	609a      	str	r2, [r3, #8]
 8000836:	60da      	str	r2, [r3, #12]
 8000838:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	  /* GPIO Ports Clock Enable */
	  __HAL_RCC_GPIOC_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	61bb      	str	r3, [r7, #24]
 800083e:	4b5d      	ldr	r3, [pc, #372]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000842:	4a5c      	ldr	r2, [pc, #368]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000844:	f043 0304 	orr.w	r3, r3, #4
 8000848:	6313      	str	r3, [r2, #48]	@ 0x30
 800084a:	4b5a      	ldr	r3, [pc, #360]	@ (80009b4 <MX_GPIO_Init+0x190>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	f003 0304 	and.w	r3, r3, #4
 8000852:	61bb      	str	r3, [r7, #24]
 8000854:	69bb      	ldr	r3, [r7, #24]
	  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000856:	2300      	movs	r3, #0
 8000858:	617b      	str	r3, [r7, #20]
 800085a:	4b56      	ldr	r3, [pc, #344]	@ (80009b4 <MX_GPIO_Init+0x190>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085e:	4a55      	ldr	r2, [pc, #340]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000860:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000864:	6313      	str	r3, [r2, #48]	@ 0x30
 8000866:	4b53      	ldr	r3, [pc, #332]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800086a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800086e:	617b      	str	r3, [r7, #20]
 8000870:	697b      	ldr	r3, [r7, #20]
	  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b4f      	ldr	r3, [pc, #316]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a4e      	ldr	r2, [pc, #312]	@ (80009b4 <MX_GPIO_Init+0x190>)
 800087c:	f043 0301 	orr.w	r3, r3, #1
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b4c      	ldr	r3, [pc, #304]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0301 	and.w	r3, r3, #1
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b48      	ldr	r3, [pc, #288]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a47      	ldr	r2, [pc, #284]	@ (80009b4 <MX_GPIO_Init+0x190>)
 8000898:	f043 0302 	orr.w	r3, r3, #2
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b45      	ldr	r3, [pc, #276]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0302 	and.w	r3, r3, #2
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
	  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b41      	ldr	r3, [pc, #260]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a40      	ldr	r2, [pc, #256]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008b4:	f043 0308 	orr.w	r3, r3, #8
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b3e      	ldr	r3, [pc, #248]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0308 	and.w	r3, r3, #8
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
	  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b3a      	ldr	r3, [pc, #232]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a39      	ldr	r2, [pc, #228]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b37      	ldr	r3, [pc, #220]	@ (80009b4 <MX_GPIO_Init+0x190>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f244 0181 	movw	r1, #16513	@ 0x4081
 80008e8:	4833      	ldr	r0, [pc, #204]	@ (80009b8 <MX_GPIO_Init+0x194>)
 80008ea:	f000 fe41 	bl	8001570 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin Output Level */
	  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	2140      	movs	r1, #64	@ 0x40
 80008f2:	4832      	ldr	r0, [pc, #200]	@ (80009bc <MX_GPIO_Init+0x198>)
 80008f4:	f000 fe3c 	bl	8001570 <HAL_GPIO_WritePin>

	  /*Configure GPIO pin : USER_Btn_Pin */
	  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80008f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008fc:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008fe:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000902:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	482c      	ldr	r0, [pc, #176]	@ (80009c0 <MX_GPIO_Init+0x19c>)
 8000910:	f000 fc9a 	bl	8001248 <HAL_GPIO_Init>

	  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
	  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000914:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000918:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	4822      	ldr	r0, [pc, #136]	@ (80009b8 <MX_GPIO_Init+0x194>)
 800092e:	f000 fc8b 	bl	8001248 <HAL_GPIO_Init>

	  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
	  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000932:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000936:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000944:	2307      	movs	r3, #7
 8000946:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	@ (80009c4 <MX_GPIO_Init+0x1a0>)
 8000950:	f000 fc7a 	bl	8001248 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
	  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000954:	2340      	movs	r3, #64	@ 0x40
 8000956:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000958:	2301      	movs	r3, #1
 800095a:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000960:	2300      	movs	r3, #0
 8000962:	62bb      	str	r3, [r7, #40]	@ 0x28
	  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000964:	f107 031c 	add.w	r3, r7, #28
 8000968:	4619      	mov	r1, r3
 800096a:	4814      	ldr	r0, [pc, #80]	@ (80009bc <MX_GPIO_Init+0x198>)
 800096c:	f000 fc6c 	bl	8001248 <HAL_GPIO_Init>

	  /*Configure GPIO pin : USB_OverCurrent_Pin */
	  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000970:	2380      	movs	r3, #128	@ 0x80
 8000972:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000974:	2300      	movs	r3, #0
 8000976:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000978:	2300      	movs	r3, #0
 800097a:	627b      	str	r3, [r7, #36]	@ 0x24
	  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800097c:	f107 031c 	add.w	r3, r7, #28
 8000980:	4619      	mov	r1, r3
 8000982:	480e      	ldr	r0, [pc, #56]	@ (80009bc <MX_GPIO_Init+0x198>)
 8000984:	f000 fc60 	bl	8001248 <HAL_GPIO_Init>

	  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
	  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000988:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800098c:	61fb      	str	r3, [r7, #28]
	  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098e:	2302      	movs	r3, #2
 8000990:	623b      	str	r3, [r7, #32]
	  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000992:	2300      	movs	r3, #0
 8000994:	627b      	str	r3, [r7, #36]	@ 0x24
	  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	62bb      	str	r3, [r7, #40]	@ 0x28
	  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800099a:	230a      	movs	r3, #10
 800099c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099e:	f107 031c 	add.w	r3, r7, #28
 80009a2:	4619      	mov	r1, r3
 80009a4:	4808      	ldr	r0, [pc, #32]	@ (80009c8 <MX_GPIO_Init+0x1a4>)
 80009a6:	f000 fc4f 	bl	8001248 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 80009aa:	bf00      	nop
 80009ac:	3730      	adds	r7, #48	@ 0x30
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	40023800 	.word	0x40023800
 80009b8:	40020400 	.word	0x40020400
 80009bc:	40021800 	.word	0x40021800
 80009c0:	40020800 	.word	0x40020800
 80009c4:	40020c00 	.word	0x40020c00
 80009c8:	40020000 	.word	0x40020000

080009cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009d0:	b672      	cpsid	i
}
 80009d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
	__disable_irq();
  while (1)
 80009d4:	bf00      	nop
 80009d6:	e7fd      	b.n	80009d4 <Error_Handler+0x8>

080009d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009de:	2300      	movs	r3, #0
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	4b10      	ldr	r3, [pc, #64]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009e6:	4a0f      	ldr	r2, [pc, #60]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80009ee:	4b0d      	ldr	r3, [pc, #52]	@ (8000a24 <HAL_MspInit+0x4c>)
 80009f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009f6:	607b      	str	r3, [r7, #4]
 80009f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009fa:	2300      	movs	r3, #0
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b09      	ldr	r3, [pc, #36]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a02:	4a08      	ldr	r2, [pc, #32]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a0a:	4b06      	ldr	r3, [pc, #24]	@ (8000a24 <HAL_MspInit+0x4c>)
 8000a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a16:	bf00      	nop
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
 8000a22:	bf00      	nop
 8000a24:	40023800 	.word	0x40023800

08000a28 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b08a      	sub	sp, #40	@ 0x28
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	2200      	movs	r2, #0
 8000a36:	601a      	str	r2, [r3, #0]
 8000a38:	605a      	str	r2, [r3, #4]
 8000a3a:	609a      	str	r2, [r3, #8]
 8000a3c:	60da      	str	r2, [r3, #12]
 8000a3e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	4a17      	ldr	r2, [pc, #92]	@ (8000aa4 <HAL_DAC_MspInit+0x7c>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d127      	bne.n	8000a9a <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
 8000a4e:	4b16      	ldr	r3, [pc, #88]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a52:	4a15      	ldr	r2, [pc, #84]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a54:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8000a58:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a5a:	4b13      	ldr	r3, [pc, #76]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8000a62:	613b      	str	r3, [r7, #16]
 8000a64:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a66:	2300      	movs	r3, #0
 8000a68:	60fb      	str	r3, [r7, #12]
 8000a6a:	4b0f      	ldr	r3, [pc, #60]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6e:	4a0e      	ldr	r2, [pc, #56]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a70:	f043 0301 	orr.w	r3, r3, #1
 8000a74:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a76:	4b0c      	ldr	r3, [pc, #48]	@ (8000aa8 <HAL_DAC_MspInit+0x80>)
 8000a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a7a:	f003 0301 	and.w	r3, r3, #1
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000a82:	2330      	movs	r3, #48	@ 0x30
 8000a84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a86:	2303      	movs	r3, #3
 8000a88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a8e:	f107 0314 	add.w	r3, r7, #20
 8000a92:	4619      	mov	r1, r3
 8000a94:	4805      	ldr	r0, [pc, #20]	@ (8000aac <HAL_DAC_MspInit+0x84>)
 8000a96:	f000 fbd7 	bl	8001248 <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8000a9a:	bf00      	nop
 8000a9c:	3728      	adds	r7, #40	@ 0x28
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40007400 	.word	0x40007400
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b085      	sub	sp, #20
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	4a0b      	ldr	r2, [pc, #44]	@ (8000aec <HAL_TIM_Base_MspInit+0x3c>)
 8000abe:	4293      	cmp	r3, r2
 8000ac0:	d10d      	bne.n	8000ade <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	60fb      	str	r3, [r7, #12]
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000ac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000aca:	4a09      	ldr	r2, [pc, #36]	@ (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000acc:	f043 0310 	orr.w	r3, r3, #16
 8000ad0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ad2:	4b07      	ldr	r3, [pc, #28]	@ (8000af0 <HAL_TIM_Base_MspInit+0x40>)
 8000ad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad6:	f003 0310 	and.w	r3, r3, #16
 8000ada:	60fb      	str	r3, [r7, #12]
 8000adc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8000ade:	bf00      	nop
 8000ae0:	3714      	adds	r7, #20
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	40001000 	.word	0x40001000
 8000af0:	40023800 	.word	0x40023800

08000af4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b08e      	sub	sp, #56	@ 0x38
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	4b33      	ldr	r3, [pc, #204]	@ (8000bd8 <HAL_InitTick+0xe4>)
 8000b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b0c:	4a32      	ldr	r2, [pc, #200]	@ (8000bd8 <HAL_InitTick+0xe4>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b14:	4b30      	ldr	r3, [pc, #192]	@ (8000bd8 <HAL_InitTick+0xe4>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b18:	f003 0310 	and.w	r3, r3, #16
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b20:	f107 0210 	add.w	r2, r7, #16
 8000b24:	f107 0314 	add.w	r3, r7, #20
 8000b28:	4611      	mov	r1, r2
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	f000 ff46 	bl	80019bc <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b30:	6a3b      	ldr	r3, [r7, #32]
 8000b32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d103      	bne.n	8000b42 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b3a:	f000 ff2b 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8000b3e:	6378      	str	r0, [r7, #52]	@ 0x34
 8000b40:	e004      	b.n	8000b4c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b42:	f000 ff27 	bl	8001994 <HAL_RCC_GetPCLK1Freq>
 8000b46:	4603      	mov	r3, r0
 8000b48:	005b      	lsls	r3, r3, #1
 8000b4a:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000b4e:	4a23      	ldr	r2, [pc, #140]	@ (8000bdc <HAL_InitTick+0xe8>)
 8000b50:	fba2 2303 	umull	r2, r3, r2, r3
 8000b54:	0c9b      	lsrs	r3, r3, #18
 8000b56:	3b01      	subs	r3, #1
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b5a:	4b21      	ldr	r3, [pc, #132]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b5c:	4a21      	ldr	r2, [pc, #132]	@ (8000be4 <HAL_InitTick+0xf0>)
 8000b5e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b60:	4b1f      	ldr	r3, [pc, #124]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b62:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000b66:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b68:	4a1d      	ldr	r2, [pc, #116]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000b6c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b6e:	4b1c      	ldr	r3, [pc, #112]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b74:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b7a:	4b19      	ldr	r3, [pc, #100]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b80:	4817      	ldr	r0, [pc, #92]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b82:	f001 f9d1 	bl	8001f28 <HAL_TIM_Base_Init>
 8000b86:	4603      	mov	r3, r0
 8000b88:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000b8c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d11b      	bne.n	8000bcc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b94:	4812      	ldr	r0, [pc, #72]	@ (8000be0 <HAL_InitTick+0xec>)
 8000b96:	f001 fa17 	bl	8001fc8 <HAL_TIM_Base_Start_IT>
 8000b9a:	4603      	mov	r3, r0
 8000b9c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000ba0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d111      	bne.n	8000bcc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ba8:	2036      	movs	r0, #54	@ 0x36
 8000baa:	f000 fa43 	bl	8001034 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2b0f      	cmp	r3, #15
 8000bb2:	d808      	bhi.n	8000bc6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	2036      	movs	r0, #54	@ 0x36
 8000bba:	f000 fa1f 	bl	8000ffc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bbe:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_InitTick+0xf4>)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	6013      	str	r3, [r2, #0]
 8000bc4:	e002      	b.n	8000bcc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	3738      	adds	r7, #56	@ 0x38
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	bd80      	pop	{r7, pc}
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	431bde83 	.word	0x431bde83
 8000be0:	200018c0 	.word	0x200018c0
 8000be4:	40001000 	.word	0x40001000
 8000be8:	2000182c 	.word	0x2000182c

08000bec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf0:	bf00      	nop
 8000bf2:	e7fd      	b.n	8000bf0 <NMI_Handler+0x4>

08000bf4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bf8:	bf00      	nop
 8000bfa:	e7fd      	b.n	8000bf8 <HardFault_Handler+0x4>

08000bfc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c00:	bf00      	nop
 8000c02:	e7fd      	b.n	8000c00 <MemManage_Handler+0x4>

08000c04 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c08:	bf00      	nop
 8000c0a:	e7fd      	b.n	8000c08 <BusFault_Handler+0x4>

08000c0c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c10:	bf00      	nop
 8000c12:	e7fd      	b.n	8000c10 <UsageFault_Handler+0x4>

08000c14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c20:	4770      	bx	lr

08000c22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c26:	bf00      	nop
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr

08000c30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c34:	bf00      	nop
 8000c36:	46bd      	mov	sp, r7
 8000c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3c:	4770      	bx	lr

08000c3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c42:	f000 f903 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c46:	bf00      	nop
 8000c48:	bd80      	pop	{r7, pc}

08000c4a <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b086      	sub	sp, #24
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	60f8      	str	r0, [r7, #12]
 8000c52:	60b9      	str	r1, [r7, #8]
 8000c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
 8000c5a:	e00a      	b.n	8000c72 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c5c:	f3af 8000 	nop.w
 8000c60:	4601      	mov	r1, r0
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1c5a      	adds	r2, r3, #1
 8000c66:	60ba      	str	r2, [r7, #8]
 8000c68:	b2ca      	uxtb	r2, r1
 8000c6a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c6c:	697b      	ldr	r3, [r7, #20]
 8000c6e:	3301      	adds	r3, #1
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	697a      	ldr	r2, [r7, #20]
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	429a      	cmp	r2, r3
 8000c78:	dbf0      	blt.n	8000c5c <_read+0x12>
  }

  return len;
 8000c7a:	687b      	ldr	r3, [r7, #4]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3718      	adds	r7, #24
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}

08000c84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e009      	b.n	8000caa <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000c96:	68bb      	ldr	r3, [r7, #8]
 8000c98:	1c5a      	adds	r2, r3, #1
 8000c9a:	60ba      	str	r2, [r7, #8]
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	3301      	adds	r3, #1
 8000ca8:	617b      	str	r3, [r7, #20]
 8000caa:	697a      	ldr	r2, [r7, #20]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	429a      	cmp	r2, r3
 8000cb0:	dbf1      	blt.n	8000c96 <_write+0x12>
  }
  return len;
 8000cb2:	687b      	ldr	r3, [r7, #4]
}
 8000cb4:	4618      	mov	r0, r3
 8000cb6:	3718      	adds	r7, #24
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <_close>:

int _close(int file)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000cc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cc8:	4618      	mov	r0, r3
 8000cca:	370c      	adds	r7, #12
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
 8000cdc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000ce4:	605a      	str	r2, [r3, #4]
  return 0;
 8000ce6:	2300      	movs	r3, #0
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <_isatty>:

int _isatty(int file)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000cfc:	2301      	movs	r3, #1
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	60f8      	str	r0, [r7, #12]
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d16:	2300      	movs	r3, #0
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3714      	adds	r7, #20
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b086      	sub	sp, #24
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d2c:	4a14      	ldr	r2, [pc, #80]	@ (8000d80 <_sbrk+0x5c>)
 8000d2e:	4b15      	ldr	r3, [pc, #84]	@ (8000d84 <_sbrk+0x60>)
 8000d30:	1ad3      	subs	r3, r2, r3
 8000d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d34:	697b      	ldr	r3, [r7, #20]
 8000d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <_sbrk+0x64>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d102      	bne.n	8000d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d40:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <_sbrk+0x64>)
 8000d42:	4a12      	ldr	r2, [pc, #72]	@ (8000d8c <_sbrk+0x68>)
 8000d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d46:	4b10      	ldr	r3, [pc, #64]	@ (8000d88 <_sbrk+0x64>)
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	4413      	add	r3, r2
 8000d4e:	693a      	ldr	r2, [r7, #16]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d207      	bcs.n	8000d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d54:	f001 fe54 	bl	8002a00 <__errno>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	220c      	movs	r2, #12
 8000d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000d62:	e009      	b.n	8000d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d64:	4b08      	ldr	r3, [pc, #32]	@ (8000d88 <_sbrk+0x64>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d6a:	4b07      	ldr	r3, [pc, #28]	@ (8000d88 <_sbrk+0x64>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	4a05      	ldr	r2, [pc, #20]	@ (8000d88 <_sbrk+0x64>)
 8000d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d76:	68fb      	ldr	r3, [r7, #12]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	3718      	adds	r7, #24
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	bd80      	pop	{r7, pc}
 8000d80:	20050000 	.word	0x20050000
 8000d84:	00000400 	.word	0x00000400
 8000d88:	2000190c 	.word	0x2000190c
 8000d8c:	20001a60 	.word	0x20001a60

08000d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d94:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <SystemInit+0x20>)
 8000d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d9a:	4a05      	ldr	r2, [pc, #20]	@ (8000db0 <SystemInit+0x20>)
 8000d9c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000da0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	e000ed00 	.word	0xe000ed00

08000db4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000db4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000dec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000db8:	f7ff ffea 	bl	8000d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dbc:	480c      	ldr	r0, [pc, #48]	@ (8000df0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000dbe:	490d      	ldr	r1, [pc, #52]	@ (8000df4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000dc0:	4a0d      	ldr	r2, [pc, #52]	@ (8000df8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000dc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dc4:	e002      	b.n	8000dcc <LoopCopyDataInit>

08000dc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dca:	3304      	adds	r3, #4

08000dcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd0:	d3f9      	bcc.n	8000dc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dd2:	4a0a      	ldr	r2, [pc, #40]	@ (8000dfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8000e00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000dd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dd8:	e001      	b.n	8000dde <LoopFillZerobss>

08000dda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ddc:	3204      	adds	r2, #4

08000dde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de0:	d3fb      	bcc.n	8000dda <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000de2:	f001 fe13 	bl	8002a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000de6:	f7ff fc27 	bl	8000638 <main>
  bx  lr    
 8000dea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000dec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000df0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000df4:	20001890 	.word	0x20001890
  ldr r2, =_sidata
 8000df8:	080034ec 	.word	0x080034ec
  ldr r2, =_sbss
 8000dfc:	20001890 	.word	0x20001890
  ldr r4, =_ebss
 8000e00:	20001a60 	.word	0x20001a60

08000e04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e04:	e7fe      	b.n	8000e04 <ADC_IRQHandler>
	...

08000e08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e0c:	4b0e      	ldr	r3, [pc, #56]	@ (8000e48 <HAL_Init+0x40>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	4a0d      	ldr	r2, [pc, #52]	@ (8000e48 <HAL_Init+0x40>)
 8000e12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e18:	4b0b      	ldr	r3, [pc, #44]	@ (8000e48 <HAL_Init+0x40>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <HAL_Init+0x40>)
 8000e1e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e24:	4b08      	ldr	r3, [pc, #32]	@ (8000e48 <HAL_Init+0x40>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a07      	ldr	r2, [pc, #28]	@ (8000e48 <HAL_Init+0x40>)
 8000e2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e30:	2003      	movs	r0, #3
 8000e32:	f000 f8d8 	bl	8000fe6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e36:	2000      	movs	r0, #0
 8000e38:	f7ff fe5c 	bl	8000af4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e3c:	f7ff fdcc 	bl	80009d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e40:	2300      	movs	r3, #0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	40023c00 	.word	0x40023c00

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	@ (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20001830 	.word	0x20001830
 8000e70:	20001910 	.word	0x20001910

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	@ (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	20001910 	.word	0x20001910

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	@ (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	@ (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	@ (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	@ (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	@ (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	@ 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	@ 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr

08000fe6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe6:	b580      	push	{r7, lr}
 8000fe8:	b082      	sub	sp, #8
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fee:	6878      	ldr	r0, [r7, #4]
 8000ff0:	f7ff ff4c 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b086      	sub	sp, #24
 8001000:	af00      	add	r7, sp, #0
 8001002:	4603      	mov	r3, r0
 8001004:	60b9      	str	r1, [r7, #8]
 8001006:	607a      	str	r2, [r7, #4]
 8001008:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800100e:	f7ff ff61 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001012:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001014:	687a      	ldr	r2, [r7, #4]
 8001016:	68b9      	ldr	r1, [r7, #8]
 8001018:	6978      	ldr	r0, [r7, #20]
 800101a:	f7ff ffb1 	bl	8000f80 <NVIC_EncodePriority>
 800101e:	4602      	mov	r2, r0
 8001020:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001024:	4611      	mov	r1, r2
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff80 	bl	8000f2c <__NVIC_SetPriority>
}
 800102c:	bf00      	nop
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
 800103a:	4603      	mov	r3, r0
 800103c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800103e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001042:	4618      	mov	r0, r3
 8001044:	f7ff ff54 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 8001048:	bf00      	nop
 800104a:	3708      	adds	r7, #8
 800104c:	46bd      	mov	sp, r7
 800104e:	bd80      	pop	{r7, pc}

08001050 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e014      	b.n	800108c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	791b      	ldrb	r3, [r3, #4]
 8001066:	b2db      	uxtb	r3, r3
 8001068:	2b00      	cmp	r3, #0
 800106a:	d105      	bne.n	8001078 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2200      	movs	r2, #0
 8001070:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fcd8 	bl	8000a28 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2202      	movs	r2, #2
 800107c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2201      	movs	r2, #1
 8001088:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800108a:	2300      	movs	r3, #0
}
 800108c:	4618      	mov	r0, r3
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}

08001094 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001094:	b480      	push	{r7}
 8001096:	b083      	sub	sp, #12
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
 800109c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d101      	bne.n	80010a8 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e046      	b.n	8001136 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	795b      	ldrb	r3, [r3, #5]
 80010ac:	2b01      	cmp	r3, #1
 80010ae:	d101      	bne.n	80010b4 <HAL_DAC_Start+0x20>
 80010b0:	2302      	movs	r3, #2
 80010b2:	e040      	b.n	8001136 <HAL_DAC_Start+0xa2>
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	2201      	movs	r2, #1
 80010b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	2202      	movs	r2, #2
 80010be:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	6819      	ldr	r1, [r3, #0]
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	f003 0310 	and.w	r3, r3, #16
 80010cc:	2201      	movs	r2, #1
 80010ce:	409a      	lsls	r2, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d10f      	bne.n	80010fe <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 80010e8:	2b3c      	cmp	r3, #60	@ 0x3c
 80010ea:	d11d      	bne.n	8001128 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	685a      	ldr	r2, [r3, #4]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f042 0201 	orr.w	r2, r2, #1
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	e014      	b.n	8001128 <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	f003 0310 	and.w	r3, r3, #16
 800110e:	213c      	movs	r1, #60	@ 0x3c
 8001110:	fa01 f303 	lsl.w	r3, r1, r3
 8001114:	429a      	cmp	r2, r3
 8001116:	d107      	bne.n	8001128 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f042 0202 	orr.w	r2, r2, #2
 8001126:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	370c      	adds	r7, #12
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001142:	b480      	push	{r7}
 8001144:	b087      	sub	sp, #28
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
 800114e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001150:	2300      	movs	r3, #0
 8001152:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8001154:	68fb      	ldr	r3, [r7, #12]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d101      	bne.n	800115e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e015      	b.n	800118a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d105      	bne.n	8001176 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800116a:	697a      	ldr	r2, [r7, #20]
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	4413      	add	r3, r2
 8001170:	3308      	adds	r3, #8
 8001172:	617b      	str	r3, [r7, #20]
 8001174:	e004      	b.n	8001180 <HAL_DAC_SetValue+0x3e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001176:	697a      	ldr	r2, [r7, #20]
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4413      	add	r3, r2
 800117c:	3314      	adds	r3, #20
 800117e:	617b      	str	r3, [r7, #20]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	461a      	mov	r2, r3
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001188:	2300      	movs	r3, #0
}
 800118a:	4618      	mov	r0, r3
 800118c:	371c      	adds	r7, #28
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001196:	b480      	push	{r7}
 8001198:	b089      	sub	sp, #36	@ 0x24
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011a2:	2300      	movs	r3, #0
 80011a4:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d002      	beq.n	80011b2 <HAL_DAC_ConfigChannel+0x1c>
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d101      	bne.n	80011b6 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 80011b2:	2301      	movs	r3, #1
 80011b4:	e042      	b.n	800123c <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	795b      	ldrb	r3, [r3, #5]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d101      	bne.n	80011c2 <HAL_DAC_ConfigChannel+0x2c>
 80011be:	2302      	movs	r3, #2
 80011c0:	e03c      	b.n	800123c <HAL_DAC_ConfigChannel+0xa6>
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	2201      	movs	r2, #1
 80011c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	2202      	movs	r2, #2
 80011cc:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	f003 0310 	and.w	r3, r3, #16
 80011dc:	f640 72fe 	movw	r2, #4094	@ 0xffe
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80011e4:	43db      	mvns	r3, r3
 80011e6:	69ba      	ldr	r2, [r7, #24]
 80011e8:	4013      	ands	r3, r2
 80011ea:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80011ec:	68bb      	ldr	r3, [r7, #8]
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	68bb      	ldr	r3, [r7, #8]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	4313      	orrs	r3, r2
 80011f6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0310 	and.w	r3, r3, #16
 80011fe:	697a      	ldr	r2, [r7, #20]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	6819      	ldr	r1, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f003 0310 	and.w	r3, r3, #16
 800121e:	22c0      	movs	r2, #192	@ 0xc0
 8001220:	fa02 f303 	lsl.w	r3, r2, r3
 8001224:	43da      	mvns	r2, r3
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	400a      	ands	r2, r1
 800122c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	2201      	movs	r2, #1
 8001232:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800123a:	7ffb      	ldrb	r3, [r7, #31]
}
 800123c:	4618      	mov	r0, r3
 800123e:	3724      	adds	r7, #36	@ 0x24
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001248:	b480      	push	{r7}
 800124a:	b089      	sub	sp, #36	@ 0x24
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001256:	2300      	movs	r3, #0
 8001258:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800125e:	2300      	movs	r3, #0
 8001260:	61fb      	str	r3, [r7, #28]
 8001262:	e165      	b.n	8001530 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001264:	2201      	movs	r2, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800126e:	683b      	ldr	r3, [r7, #0]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	697a      	ldr	r2, [r7, #20]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001278:	693a      	ldr	r2, [r7, #16]
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	429a      	cmp	r2, r3
 800127e:	f040 8154 	bne.w	800152a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	2b01      	cmp	r3, #1
 800128c:	d005      	beq.n	800129a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001296:	2b02      	cmp	r3, #2
 8001298:	d130      	bne.n	80012fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	2203      	movs	r2, #3
 80012a6:	fa02 f303 	lsl.w	r3, r2, r3
 80012aa:	43db      	mvns	r3, r3
 80012ac:	69ba      	ldr	r2, [r7, #24]
 80012ae:	4013      	ands	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	68da      	ldr	r2, [r3, #12]
 80012b6:	69fb      	ldr	r3, [r7, #28]
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	fa02 f303 	lsl.w	r3, r2, r3
 80012be:	69ba      	ldr	r2, [r7, #24]
 80012c0:	4313      	orrs	r3, r2
 80012c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012d0:	2201      	movs	r2, #1
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	fa02 f303 	lsl.w	r3, r2, r3
 80012d8:	43db      	mvns	r3, r3
 80012da:	69ba      	ldr	r2, [r7, #24]
 80012dc:	4013      	ands	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 0201 	and.w	r2, r3, #1
 80012ea:	69fb      	ldr	r3, [r7, #28]
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	69ba      	ldr	r2, [r7, #24]
 80012fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	2b03      	cmp	r3, #3
 8001306:	d017      	beq.n	8001338 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	689a      	ldr	r2, [r3, #8]
 8001324:	69fb      	ldr	r3, [r7, #28]
 8001326:	005b      	lsls	r3, r3, #1
 8001328:	fa02 f303 	lsl.w	r3, r2, r3
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4313      	orrs	r3, r2
 8001330:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	69ba      	ldr	r2, [r7, #24]
 8001336:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	685b      	ldr	r3, [r3, #4]
 800133c:	f003 0303 	and.w	r3, r3, #3
 8001340:	2b02      	cmp	r3, #2
 8001342:	d123      	bne.n	800138c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	08da      	lsrs	r2, r3, #3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	3208      	adds	r2, #8
 800134c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001350:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	f003 0307 	and.w	r3, r3, #7
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	220f      	movs	r2, #15
 800135c:	fa02 f303 	lsl.w	r3, r2, r3
 8001360:	43db      	mvns	r3, r3
 8001362:	69ba      	ldr	r2, [r7, #24]
 8001364:	4013      	ands	r3, r2
 8001366:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	691a      	ldr	r2, [r3, #16]
 800136c:	69fb      	ldr	r3, [r7, #28]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	fa02 f303 	lsl.w	r3, r2, r3
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	4313      	orrs	r3, r2
 800137c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800137e:	69fb      	ldr	r3, [r7, #28]
 8001380:	08da      	lsrs	r2, r3, #3
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3208      	adds	r2, #8
 8001386:	69b9      	ldr	r1, [r7, #24]
 8001388:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001392:	69fb      	ldr	r3, [r7, #28]
 8001394:	005b      	lsls	r3, r3, #1
 8001396:	2203      	movs	r2, #3
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	43db      	mvns	r3, r3
 800139e:	69ba      	ldr	r2, [r7, #24]
 80013a0:	4013      	ands	r3, r2
 80013a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f003 0203 	and.w	r2, r3, #3
 80013ac:	69fb      	ldr	r3, [r7, #28]
 80013ae:	005b      	lsls	r3, r3, #1
 80013b0:	fa02 f303 	lsl.w	r3, r2, r3
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	4313      	orrs	r3, r2
 80013b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	685b      	ldr	r3, [r3, #4]
 80013c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	f000 80ae 	beq.w	800152a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b5d      	ldr	r3, [pc, #372]	@ (8001548 <HAL_GPIO_Init+0x300>)
 80013d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013d6:	4a5c      	ldr	r2, [pc, #368]	@ (8001548 <HAL_GPIO_Init+0x300>)
 80013d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80013de:	4b5a      	ldr	r3, [pc, #360]	@ (8001548 <HAL_GPIO_Init+0x300>)
 80013e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013ea:	4a58      	ldr	r2, [pc, #352]	@ (800154c <HAL_GPIO_Init+0x304>)
 80013ec:	69fb      	ldr	r3, [r7, #28]
 80013ee:	089b      	lsrs	r3, r3, #2
 80013f0:	3302      	adds	r3, #2
 80013f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	f003 0303 	and.w	r3, r3, #3
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	220f      	movs	r2, #15
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	4a4f      	ldr	r2, [pc, #316]	@ (8001550 <HAL_GPIO_Init+0x308>)
 8001412:	4293      	cmp	r3, r2
 8001414:	d025      	beq.n	8001462 <HAL_GPIO_Init+0x21a>
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	4a4e      	ldr	r2, [pc, #312]	@ (8001554 <HAL_GPIO_Init+0x30c>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d01f      	beq.n	800145e <HAL_GPIO_Init+0x216>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	4a4d      	ldr	r2, [pc, #308]	@ (8001558 <HAL_GPIO_Init+0x310>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d019      	beq.n	800145a <HAL_GPIO_Init+0x212>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	4a4c      	ldr	r2, [pc, #304]	@ (800155c <HAL_GPIO_Init+0x314>)
 800142a:	4293      	cmp	r3, r2
 800142c:	d013      	beq.n	8001456 <HAL_GPIO_Init+0x20e>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	4a4b      	ldr	r2, [pc, #300]	@ (8001560 <HAL_GPIO_Init+0x318>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d00d      	beq.n	8001452 <HAL_GPIO_Init+0x20a>
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	4a4a      	ldr	r2, [pc, #296]	@ (8001564 <HAL_GPIO_Init+0x31c>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d007      	beq.n	800144e <HAL_GPIO_Init+0x206>
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	4a49      	ldr	r2, [pc, #292]	@ (8001568 <HAL_GPIO_Init+0x320>)
 8001442:	4293      	cmp	r3, r2
 8001444:	d101      	bne.n	800144a <HAL_GPIO_Init+0x202>
 8001446:	2306      	movs	r3, #6
 8001448:	e00c      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 800144a:	2307      	movs	r3, #7
 800144c:	e00a      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 800144e:	2305      	movs	r3, #5
 8001450:	e008      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 8001452:	2304      	movs	r3, #4
 8001454:	e006      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 8001456:	2303      	movs	r3, #3
 8001458:	e004      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 800145a:	2302      	movs	r3, #2
 800145c:	e002      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 800145e:	2301      	movs	r3, #1
 8001460:	e000      	b.n	8001464 <HAL_GPIO_Init+0x21c>
 8001462:	2300      	movs	r3, #0
 8001464:	69fa      	ldr	r2, [r7, #28]
 8001466:	f002 0203 	and.w	r2, r2, #3
 800146a:	0092      	lsls	r2, r2, #2
 800146c:	4093      	lsls	r3, r2
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001474:	4935      	ldr	r1, [pc, #212]	@ (800154c <HAL_GPIO_Init+0x304>)
 8001476:	69fb      	ldr	r3, [r7, #28]
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	3302      	adds	r3, #2
 800147c:	69ba      	ldr	r2, [r7, #24]
 800147e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001482:	4b3a      	ldr	r3, [pc, #232]	@ (800156c <HAL_GPIO_Init+0x324>)
 8001484:	689b      	ldr	r3, [r3, #8]
 8001486:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	43db      	mvns	r3, r3
 800148c:	69ba      	ldr	r2, [r7, #24]
 800148e:	4013      	ands	r3, r2
 8001490:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800149a:	2b00      	cmp	r3, #0
 800149c:	d003      	beq.n	80014a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	693b      	ldr	r3, [r7, #16]
 80014a2:	4313      	orrs	r3, r2
 80014a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80014a6:	4a31      	ldr	r2, [pc, #196]	@ (800156c <HAL_GPIO_Init+0x324>)
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80014ac:	4b2f      	ldr	r3, [pc, #188]	@ (800156c <HAL_GPIO_Init+0x324>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	43db      	mvns	r3, r3
 80014b6:	69ba      	ldr	r2, [r7, #24]
 80014b8:	4013      	ands	r3, r2
 80014ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d003      	beq.n	80014d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80014c8:	69ba      	ldr	r2, [r7, #24]
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80014d0:	4a26      	ldr	r2, [pc, #152]	@ (800156c <HAL_GPIO_Init+0x324>)
 80014d2:	69bb      	ldr	r3, [r7, #24]
 80014d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80014d6:	4b25      	ldr	r3, [pc, #148]	@ (800156c <HAL_GPIO_Init+0x324>)
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	43db      	mvns	r3, r3
 80014e0:	69ba      	ldr	r2, [r7, #24]
 80014e2:	4013      	ands	r3, r2
 80014e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d003      	beq.n	80014fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80014f2:	69ba      	ldr	r2, [r7, #24]
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80014fa:	4a1c      	ldr	r2, [pc, #112]	@ (800156c <HAL_GPIO_Init+0x324>)
 80014fc:	69bb      	ldr	r3, [r7, #24]
 80014fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001500:	4b1a      	ldr	r3, [pc, #104]	@ (800156c <HAL_GPIO_Init+0x324>)
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	43db      	mvns	r3, r3
 800150a:	69ba      	ldr	r2, [r7, #24]
 800150c:	4013      	ands	r3, r2
 800150e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001518:	2b00      	cmp	r3, #0
 800151a:	d003      	beq.n	8001524 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800151c:	69ba      	ldr	r2, [r7, #24]
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001524:	4a11      	ldr	r2, [pc, #68]	@ (800156c <HAL_GPIO_Init+0x324>)
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3301      	adds	r3, #1
 800152e:	61fb      	str	r3, [r7, #28]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	2b0f      	cmp	r3, #15
 8001534:	f67f ae96 	bls.w	8001264 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001538:	bf00      	nop
 800153a:	bf00      	nop
 800153c:	3724      	adds	r7, #36	@ 0x24
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40023800 	.word	0x40023800
 800154c:	40013800 	.word	0x40013800
 8001550:	40020000 	.word	0x40020000
 8001554:	40020400 	.word	0x40020400
 8001558:	40020800 	.word	0x40020800
 800155c:	40020c00 	.word	0x40020c00
 8001560:	40021000 	.word	0x40021000
 8001564:	40021400 	.word	0x40021400
 8001568:	40021800 	.word	0x40021800
 800156c:	40013c00 	.word	0x40013c00

08001570 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
 8001578:	460b      	mov	r3, r1
 800157a:	807b      	strh	r3, [r7, #2]
 800157c:	4613      	mov	r3, r2
 800157e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001580:	787b      	ldrb	r3, [r7, #1]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d003      	beq.n	800158e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001586:	887a      	ldrh	r2, [r7, #2]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800158c:	e003      	b.n	8001596 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800158e:	887b      	ldrh	r3, [r7, #2]
 8001590:	041a      	lsls	r2, r3, #16
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	619a      	str	r2, [r3, #24]
}
 8001596:	bf00      	nop
 8001598:	370c      	adds	r7, #12
 800159a:	46bd      	mov	sp, r7
 800159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a0:	4770      	bx	lr
	...

080015a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b084      	sub	sp, #16
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80015b4:	2301      	movs	r3, #1
 80015b6:	e0cc      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80015b8:	4b68      	ldr	r3, [pc, #416]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d90c      	bls.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015c6:	4b65      	ldr	r3, [pc, #404]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015c8:	683a      	ldr	r2, [r7, #0]
 80015ca:	b2d2      	uxtb	r2, r2
 80015cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80015ce:	4b63      	ldr	r3, [pc, #396]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0307 	and.w	r3, r3, #7
 80015d6:	683a      	ldr	r2, [r7, #0]
 80015d8:	429a      	cmp	r2, r3
 80015da:	d001      	beq.n	80015e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e0b8      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	f003 0302 	and.w	r3, r3, #2
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d020      	beq.n	800162e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f003 0304 	and.w	r3, r3, #4
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d005      	beq.n	8001604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015f8:	4b59      	ldr	r3, [pc, #356]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	4a58      	ldr	r2, [pc, #352]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80015fe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001602:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f003 0308 	and.w	r3, r3, #8
 800160c:	2b00      	cmp	r3, #0
 800160e:	d005      	beq.n	800161c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001610:	4b53      	ldr	r3, [pc, #332]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001612:	689b      	ldr	r3, [r3, #8]
 8001614:	4a52      	ldr	r2, [pc, #328]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001616:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800161a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800161c:	4b50      	ldr	r3, [pc, #320]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	494d      	ldr	r1, [pc, #308]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 800162a:	4313      	orrs	r3, r2
 800162c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	2b00      	cmp	r3, #0
 8001638:	d044      	beq.n	80016c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d107      	bne.n	8001652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001642:	4b47      	ldr	r3, [pc, #284]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800164a:	2b00      	cmp	r3, #0
 800164c:	d119      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e07f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	2b02      	cmp	r3, #2
 8001658:	d003      	beq.n	8001662 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800165e:	2b03      	cmp	r3, #3
 8001660:	d107      	bne.n	8001672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001662:	4b3f      	ldr	r3, [pc, #252]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800166a:	2b00      	cmp	r3, #0
 800166c:	d109      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800166e:	2301      	movs	r3, #1
 8001670:	e06f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001672:	4b3b      	ldr	r3, [pc, #236]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0302 	and.w	r3, r3, #2
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e067      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001682:	4b37      	ldr	r3, [pc, #220]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001684:	689b      	ldr	r3, [r3, #8]
 8001686:	f023 0203 	bic.w	r2, r3, #3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	685b      	ldr	r3, [r3, #4]
 800168e:	4934      	ldr	r1, [pc, #208]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001690:	4313      	orrs	r3, r2
 8001692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001694:	f7ff fbee 	bl	8000e74 <HAL_GetTick>
 8001698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800169a:	e00a      	b.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff fbea 	bl	8000e74 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e04f      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016b2:	4b2b      	ldr	r3, [pc, #172]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 020c 	and.w	r2, r3, #12
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	685b      	ldr	r3, [r3, #4]
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	429a      	cmp	r2, r3
 80016c2:	d1eb      	bne.n	800169c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016c4:	4b25      	ldr	r3, [pc, #148]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d20c      	bcs.n	80016ec <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016d2:	4b22      	ldr	r3, [pc, #136]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016d4:	683a      	ldr	r2, [r7, #0]
 80016d6:	b2d2      	uxtb	r2, r2
 80016d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016da:	4b20      	ldr	r3, [pc, #128]	@ (800175c <HAL_RCC_ClockConfig+0x1b8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0307 	and.w	r3, r3, #7
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	d001      	beq.n	80016ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016e8:	2301      	movs	r3, #1
 80016ea:	e032      	b.n	8001752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d008      	beq.n	800170a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016f8:	4b19      	ldr	r3, [pc, #100]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 80016fa:	689b      	ldr	r3, [r3, #8]
 80016fc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	68db      	ldr	r3, [r3, #12]
 8001704:	4916      	ldr	r1, [pc, #88]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001706:	4313      	orrs	r3, r2
 8001708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f003 0308 	and.w	r3, r3, #8
 8001712:	2b00      	cmp	r3, #0
 8001714:	d009      	beq.n	800172a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001716:	4b12      	ldr	r3, [pc, #72]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001718:	689b      	ldr	r3, [r3, #8]
 800171a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	490e      	ldr	r1, [pc, #56]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001726:	4313      	orrs	r3, r2
 8001728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800172a:	f000 f821 	bl	8001770 <HAL_RCC_GetSysClockFreq>
 800172e:	4602      	mov	r2, r0
 8001730:	4b0b      	ldr	r3, [pc, #44]	@ (8001760 <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	689b      	ldr	r3, [r3, #8]
 8001734:	091b      	lsrs	r3, r3, #4
 8001736:	f003 030f 	and.w	r3, r3, #15
 800173a:	490a      	ldr	r1, [pc, #40]	@ (8001764 <HAL_RCC_ClockConfig+0x1c0>)
 800173c:	5ccb      	ldrb	r3, [r1, r3]
 800173e:	fa22 f303 	lsr.w	r3, r2, r3
 8001742:	4a09      	ldr	r2, [pc, #36]	@ (8001768 <HAL_RCC_ClockConfig+0x1c4>)
 8001744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001746:	4b09      	ldr	r3, [pc, #36]	@ (800176c <HAL_RCC_ClockConfig+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff f9d2 	bl	8000af4 <HAL_InitTick>

  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	3710      	adds	r7, #16
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023c00 	.word	0x40023c00
 8001760:	40023800 	.word	0x40023800
 8001764:	08003490 	.word	0x08003490
 8001768:	20001828 	.word	0x20001828
 800176c:	2000182c 	.word	0x2000182c

08001770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001774:	b094      	sub	sp, #80	@ 0x50
 8001776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001778:	2300      	movs	r3, #0
 800177a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800177c:	2300      	movs	r3, #0
 800177e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001788:	4b79      	ldr	r3, [pc, #484]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 030c 	and.w	r3, r3, #12
 8001790:	2b08      	cmp	r3, #8
 8001792:	d00d      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x40>
 8001794:	2b08      	cmp	r3, #8
 8001796:	f200 80e1 	bhi.w	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
 800179a:	2b00      	cmp	r3, #0
 800179c:	d002      	beq.n	80017a4 <HAL_RCC_GetSysClockFreq+0x34>
 800179e:	2b04      	cmp	r3, #4
 80017a0:	d003      	beq.n	80017aa <HAL_RCC_GetSysClockFreq+0x3a>
 80017a2:	e0db      	b.n	800195c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017a4:	4b73      	ldr	r3, [pc, #460]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 80017a6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017a8:	e0db      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80017aa:	4b73      	ldr	r3, [pc, #460]	@ (8001978 <HAL_RCC_GetSysClockFreq+0x208>)
 80017ac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80017ae:	e0d8      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80017b0:	4b6f      	ldr	r3, [pc, #444]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80017b8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017ba:	4b6d      	ldr	r3, [pc, #436]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d063      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017c6:	4b6a      	ldr	r3, [pc, #424]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	099b      	lsrs	r3, r3, #6
 80017cc:	2200      	movs	r2, #0
 80017ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80017d0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80017d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80017d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
 80017de:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80017e2:	4622      	mov	r2, r4
 80017e4:	462b      	mov	r3, r5
 80017e6:	f04f 0000 	mov.w	r0, #0
 80017ea:	f04f 0100 	mov.w	r1, #0
 80017ee:	0159      	lsls	r1, r3, #5
 80017f0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f4:	0150      	lsls	r0, r2, #5
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4621      	mov	r1, r4
 80017fc:	1a51      	subs	r1, r2, r1
 80017fe:	6139      	str	r1, [r7, #16]
 8001800:	4629      	mov	r1, r5
 8001802:	eb63 0301 	sbc.w	r3, r3, r1
 8001806:	617b      	str	r3, [r7, #20]
 8001808:	f04f 0200 	mov.w	r2, #0
 800180c:	f04f 0300 	mov.w	r3, #0
 8001810:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001814:	4659      	mov	r1, fp
 8001816:	018b      	lsls	r3, r1, #6
 8001818:	4651      	mov	r1, sl
 800181a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800181e:	4651      	mov	r1, sl
 8001820:	018a      	lsls	r2, r1, #6
 8001822:	4651      	mov	r1, sl
 8001824:	ebb2 0801 	subs.w	r8, r2, r1
 8001828:	4659      	mov	r1, fp
 800182a:	eb63 0901 	sbc.w	r9, r3, r1
 800182e:	f04f 0200 	mov.w	r2, #0
 8001832:	f04f 0300 	mov.w	r3, #0
 8001836:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800183a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800183e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001842:	4690      	mov	r8, r2
 8001844:	4699      	mov	r9, r3
 8001846:	4623      	mov	r3, r4
 8001848:	eb18 0303 	adds.w	r3, r8, r3
 800184c:	60bb      	str	r3, [r7, #8]
 800184e:	462b      	mov	r3, r5
 8001850:	eb49 0303 	adc.w	r3, r9, r3
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	f04f 0200 	mov.w	r2, #0
 800185a:	f04f 0300 	mov.w	r3, #0
 800185e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001862:	4629      	mov	r1, r5
 8001864:	024b      	lsls	r3, r1, #9
 8001866:	4621      	mov	r1, r4
 8001868:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800186c:	4621      	mov	r1, r4
 800186e:	024a      	lsls	r2, r1, #9
 8001870:	4610      	mov	r0, r2
 8001872:	4619      	mov	r1, r3
 8001874:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001876:	2200      	movs	r2, #0
 8001878:	62bb      	str	r3, [r7, #40]	@ 0x28
 800187a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800187c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001880:	f7fe fd1e 	bl	80002c0 <__aeabi_uldivmod>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4613      	mov	r3, r2
 800188a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800188c:	e058      	b.n	8001940 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800188e:	4b38      	ldr	r3, [pc, #224]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001890:	685b      	ldr	r3, [r3, #4]
 8001892:	099b      	lsrs	r3, r3, #6
 8001894:	2200      	movs	r2, #0
 8001896:	4618      	mov	r0, r3
 8001898:	4611      	mov	r1, r2
 800189a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800189e:	623b      	str	r3, [r7, #32]
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80018a4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80018a8:	4642      	mov	r2, r8
 80018aa:	464b      	mov	r3, r9
 80018ac:	f04f 0000 	mov.w	r0, #0
 80018b0:	f04f 0100 	mov.w	r1, #0
 80018b4:	0159      	lsls	r1, r3, #5
 80018b6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80018ba:	0150      	lsls	r0, r2, #5
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4641      	mov	r1, r8
 80018c2:	ebb2 0a01 	subs.w	sl, r2, r1
 80018c6:	4649      	mov	r1, r9
 80018c8:	eb63 0b01 	sbc.w	fp, r3, r1
 80018cc:	f04f 0200 	mov.w	r2, #0
 80018d0:	f04f 0300 	mov.w	r3, #0
 80018d4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80018d8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80018dc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80018e0:	ebb2 040a 	subs.w	r4, r2, sl
 80018e4:	eb63 050b 	sbc.w	r5, r3, fp
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	00eb      	lsls	r3, r5, #3
 80018f2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018f6:	00e2      	lsls	r2, r4, #3
 80018f8:	4614      	mov	r4, r2
 80018fa:	461d      	mov	r5, r3
 80018fc:	4643      	mov	r3, r8
 80018fe:	18e3      	adds	r3, r4, r3
 8001900:	603b      	str	r3, [r7, #0]
 8001902:	464b      	mov	r3, r9
 8001904:	eb45 0303 	adc.w	r3, r5, r3
 8001908:	607b      	str	r3, [r7, #4]
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	f04f 0300 	mov.w	r3, #0
 8001912:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001916:	4629      	mov	r1, r5
 8001918:	028b      	lsls	r3, r1, #10
 800191a:	4621      	mov	r1, r4
 800191c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001920:	4621      	mov	r1, r4
 8001922:	028a      	lsls	r2, r1, #10
 8001924:	4610      	mov	r0, r2
 8001926:	4619      	mov	r1, r3
 8001928:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800192a:	2200      	movs	r2, #0
 800192c:	61bb      	str	r3, [r7, #24]
 800192e:	61fa      	str	r2, [r7, #28]
 8001930:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001934:	f7fe fcc4 	bl	80002c0 <__aeabi_uldivmod>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4613      	mov	r3, r2
 800193e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001940:	4b0b      	ldr	r3, [pc, #44]	@ (8001970 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	0c1b      	lsrs	r3, r3, #16
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	3301      	adds	r3, #1
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001950:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001952:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001954:	fbb2 f3f3 	udiv	r3, r2, r3
 8001958:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800195a:	e002      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800195c:	4b05      	ldr	r3, [pc, #20]	@ (8001974 <HAL_RCC_GetSysClockFreq+0x204>)
 800195e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001960:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001962:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001964:	4618      	mov	r0, r3
 8001966:	3750      	adds	r7, #80	@ 0x50
 8001968:	46bd      	mov	sp, r7
 800196a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	00f42400 	.word	0x00f42400
 8001978:	007a1200 	.word	0x007a1200

0800197c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001980:	4b03      	ldr	r3, [pc, #12]	@ (8001990 <HAL_RCC_GetHCLKFreq+0x14>)
 8001982:	681b      	ldr	r3, [r3, #0]
}
 8001984:	4618      	mov	r0, r3
 8001986:	46bd      	mov	sp, r7
 8001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198c:	4770      	bx	lr
 800198e:	bf00      	nop
 8001990:	20001828 	.word	0x20001828

08001994 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001998:	f7ff fff0 	bl	800197c <HAL_RCC_GetHCLKFreq>
 800199c:	4602      	mov	r2, r0
 800199e:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80019a0:	689b      	ldr	r3, [r3, #8]
 80019a2:	0a9b      	lsrs	r3, r3, #10
 80019a4:	f003 0307 	and.w	r3, r3, #7
 80019a8:	4903      	ldr	r1, [pc, #12]	@ (80019b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80019aa:	5ccb      	ldrb	r3, [r1, r3]
 80019ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80019b0:	4618      	mov	r0, r3
 80019b2:	bd80      	pop	{r7, pc}
 80019b4:	40023800 	.word	0x40023800
 80019b8:	080034a0 	.word	0x080034a0

080019bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	220f      	movs	r2, #15
 80019ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80019cc:	4b12      	ldr	r3, [pc, #72]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019ce:	689b      	ldr	r3, [r3, #8]
 80019d0:	f003 0203 	and.w	r2, r3, #3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80019d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019da:	689b      	ldr	r3, [r3, #8]
 80019dc:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80019e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80019f0:	4b09      	ldr	r3, [pc, #36]	@ (8001a18 <HAL_RCC_GetClockConfig+0x5c>)
 80019f2:	689b      	ldr	r3, [r3, #8]
 80019f4:	08db      	lsrs	r3, r3, #3
 80019f6:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80019fe:	4b07      	ldr	r3, [pc, #28]	@ (8001a1c <HAL_RCC_GetClockConfig+0x60>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0207 	and.w	r2, r3, #7
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	601a      	str	r2, [r3, #0]
}
 8001a0a:	bf00      	nop
 8001a0c:	370c      	adds	r7, #12
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	40023c00 	.word	0x40023c00

08001a20 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b086      	sub	sp, #24
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d101      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a2e:	2301      	movs	r3, #1
 8001a30:	e273      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d075      	beq.n	8001b2a <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001a3e:	4b88      	ldr	r3, [pc, #544]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 030c 	and.w	r3, r3, #12
 8001a46:	2b04      	cmp	r3, #4
 8001a48:	d00c      	beq.n	8001a64 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a4a:	4b85      	ldr	r3, [pc, #532]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a4c:	689b      	ldr	r3, [r3, #8]
 8001a4e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001a52:	2b08      	cmp	r3, #8
 8001a54:	d112      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a56:	4b82      	ldr	r3, [pc, #520]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001a62:	d10b      	bne.n	8001a7c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a64:	4b7e      	ldr	r3, [pc, #504]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d05b      	beq.n	8001b28 <HAL_RCC_OscConfig+0x108>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d157      	bne.n	8001b28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e24e      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a84:	d106      	bne.n	8001a94 <HAL_RCC_OscConfig+0x74>
 8001a86:	4b76      	ldr	r3, [pc, #472]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a75      	ldr	r2, [pc, #468]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001a8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001a90:	6013      	str	r3, [r2, #0]
 8001a92:	e01d      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x98>
 8001a9e:	4b70      	ldr	r3, [pc, #448]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6f      	ldr	r2, [pc, #444]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aa4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	4b6d      	ldr	r3, [pc, #436]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a6c      	ldr	r2, [pc, #432]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001ab0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ab4:	6013      	str	r3, [r2, #0]
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0xb0>
 8001ab8:	4b69      	ldr	r3, [pc, #420]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a68      	ldr	r2, [pc, #416]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b66      	ldr	r3, [pc, #408]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a65      	ldr	r2, [pc, #404]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff f9cc 	bl	8000e74 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff f9c8 	bl	8000e74 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	@ 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e213      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001af2:	4b5b      	ldr	r3, [pc, #364]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0xc0>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff f9b8 	bl	8000e74 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff f9b4 	bl	8000e74 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	@ 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e1ff      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b1a:	4b51      	ldr	r3, [pc, #324]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0xe8>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d063      	beq.n	8001bfe <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b36:	4b4a      	ldr	r3, [pc, #296]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d00b      	beq.n	8001b5a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b42:	4b47      	ldr	r3, [pc, #284]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 030c 	and.w	r3, r3, #12
        || \
 8001b4a:	2b08      	cmp	r3, #8
 8001b4c:	d11c      	bne.n	8001b88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001b4e:	4b44      	ldr	r3, [pc, #272]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d116      	bne.n	8001b88 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b5a:	4b41      	ldr	r3, [pc, #260]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 0302 	and.w	r3, r3, #2
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_RCC_OscConfig+0x152>
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	68db      	ldr	r3, [r3, #12]
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d001      	beq.n	8001b72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e1d3      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b72:	4b3b      	ldr	r3, [pc, #236]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	4937      	ldr	r1, [pc, #220]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001b82:	4313      	orrs	r3, r2
 8001b84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b86:	e03a      	b.n	8001bfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d020      	beq.n	8001bd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b90:	4b34      	ldr	r3, [pc, #208]	@ (8001c64 <HAL_RCC_OscConfig+0x244>)
 8001b92:	2201      	movs	r2, #1
 8001b94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b96:	f7ff f96d 	bl	8000e74 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b9e:	f7ff f969 	bl	8000e74 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e1b4      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d0f0      	beq.n	8001b9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bbc:	4b28      	ldr	r3, [pc, #160]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	00db      	lsls	r3, r3, #3
 8001bca:	4925      	ldr	r1, [pc, #148]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	600b      	str	r3, [r1, #0]
 8001bd0:	e015      	b.n	8001bfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bd2:	4b24      	ldr	r3, [pc, #144]	@ (8001c64 <HAL_RCC_OscConfig+0x244>)
 8001bd4:	2200      	movs	r2, #0
 8001bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd8:	f7ff f94c 	bl	8000e74 <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001be0:	f7ff f948 	bl	8000e74 <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e193      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bf2:	4b1b      	ldr	r3, [pc, #108]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d1f0      	bne.n	8001be0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0308 	and.w	r3, r3, #8
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d036      	beq.n	8001c78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	695b      	ldr	r3, [r3, #20]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d016      	beq.n	8001c40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c12:	4b15      	ldr	r3, [pc, #84]	@ (8001c68 <HAL_RCC_OscConfig+0x248>)
 8001c14:	2201      	movs	r2, #1
 8001c16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c18:	f7ff f92c 	bl	8000e74 <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c1e:	e008      	b.n	8001c32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c20:	f7ff f928 	bl	8000e74 <HAL_GetTick>
 8001c24:	4602      	mov	r2, r0
 8001c26:	693b      	ldr	r3, [r7, #16]
 8001c28:	1ad3      	subs	r3, r2, r3
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d901      	bls.n	8001c32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001c2e:	2303      	movs	r3, #3
 8001c30:	e173      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c32:	4b0b      	ldr	r3, [pc, #44]	@ (8001c60 <HAL_RCC_OscConfig+0x240>)
 8001c34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c36:	f003 0302 	and.w	r3, r3, #2
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d0f0      	beq.n	8001c20 <HAL_RCC_OscConfig+0x200>
 8001c3e:	e01b      	b.n	8001c78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c40:	4b09      	ldr	r3, [pc, #36]	@ (8001c68 <HAL_RCC_OscConfig+0x248>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c46:	f7ff f915 	bl	8000e74 <HAL_GetTick>
 8001c4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c4c:	e00e      	b.n	8001c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c4e:	f7ff f911 	bl	8000e74 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	2b02      	cmp	r3, #2
 8001c5a:	d907      	bls.n	8001c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001c5c:	2303      	movs	r3, #3
 8001c5e:	e15c      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
 8001c60:	40023800 	.word	0x40023800
 8001c64:	42470000 	.word	0x42470000
 8001c68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c6c:	4b8a      	ldr	r3, [pc, #552]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001c6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1ea      	bne.n	8001c4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 0304 	and.w	r3, r3, #4
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8097 	beq.w	8001db4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c8a:	4b83      	ldr	r3, [pc, #524]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10f      	bne.n	8001cb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
 8001c9a:	4b7f      	ldr	r3, [pc, #508]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9e:	4a7e      	ldr	r2, [pc, #504]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001ca0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ca4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ca6:	4b7c      	ldr	r3, [pc, #496]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cae:	60bb      	str	r3, [r7, #8]
 8001cb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cb6:	4b79      	ldr	r3, [pc, #484]	@ (8001e9c <HAL_RCC_OscConfig+0x47c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d118      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cc2:	4b76      	ldr	r3, [pc, #472]	@ (8001e9c <HAL_RCC_OscConfig+0x47c>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a75      	ldr	r2, [pc, #468]	@ (8001e9c <HAL_RCC_OscConfig+0x47c>)
 8001cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001ccc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cce:	f7ff f8d1 	bl	8000e74 <HAL_GetTick>
 8001cd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd6:	f7ff f8cd 	bl	8000e74 <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	693b      	ldr	r3, [r7, #16]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e118      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce8:	4b6c      	ldr	r3, [pc, #432]	@ (8001e9c <HAL_RCC_OscConfig+0x47c>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d0f0      	beq.n	8001cd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d106      	bne.n	8001d0a <HAL_RCC_OscConfig+0x2ea>
 8001cfc:	4b66      	ldr	r3, [pc, #408]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001cfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d00:	4a65      	ldr	r2, [pc, #404]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d08:	e01c      	b.n	8001d44 <HAL_RCC_OscConfig+0x324>
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	689b      	ldr	r3, [r3, #8]
 8001d0e:	2b05      	cmp	r3, #5
 8001d10:	d10c      	bne.n	8001d2c <HAL_RCC_OscConfig+0x30c>
 8001d12:	4b61      	ldr	r3, [pc, #388]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d16:	4a60      	ldr	r2, [pc, #384]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d18:	f043 0304 	orr.w	r3, r3, #4
 8001d1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d22:	4a5d      	ldr	r2, [pc, #372]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d2a:	e00b      	b.n	8001d44 <HAL_RCC_OscConfig+0x324>
 8001d2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d30:	4a59      	ldr	r2, [pc, #356]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d32:	f023 0301 	bic.w	r3, r3, #1
 8001d36:	6713      	str	r3, [r2, #112]	@ 0x70
 8001d38:	4b57      	ldr	r3, [pc, #348]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d3c:	4a56      	ldr	r2, [pc, #344]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d3e:	f023 0304 	bic.w	r3, r3, #4
 8001d42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d015      	beq.n	8001d78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4c:	f7ff f892 	bl	8000e74 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d52:	e00a      	b.n	8001d6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d54:	f7ff f88e 	bl	8000e74 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d901      	bls.n	8001d6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001d66:	2303      	movs	r3, #3
 8001d68:	e0d7      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6a:	4b4b      	ldr	r3, [pc, #300]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d0ee      	beq.n	8001d54 <HAL_RCC_OscConfig+0x334>
 8001d76:	e014      	b.n	8001da2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d78:	f7ff f87c 	bl	8000e74 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7e:	e00a      	b.n	8001d96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d80:	f7ff f878 	bl	8000e74 <HAL_GetTick>
 8001d84:	4602      	mov	r2, r0
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	1ad3      	subs	r3, r2, r3
 8001d8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d901      	bls.n	8001d96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001d92:	2303      	movs	r3, #3
 8001d94:	e0c1      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d96:	4b40      	ldr	r3, [pc, #256]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001d98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d1ee      	bne.n	8001d80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001da2:	7dfb      	ldrb	r3, [r7, #23]
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d105      	bne.n	8001db4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001da8:	4b3b      	ldr	r3, [pc, #236]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001daa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dac:	4a3a      	ldr	r2, [pc, #232]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001dae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001db2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	699b      	ldr	r3, [r3, #24]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	f000 80ad 	beq.w	8001f18 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001dbe:	4b36      	ldr	r3, [pc, #216]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001dc0:	689b      	ldr	r3, [r3, #8]
 8001dc2:	f003 030c 	and.w	r3, r3, #12
 8001dc6:	2b08      	cmp	r3, #8
 8001dc8:	d060      	beq.n	8001e8c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d145      	bne.n	8001e5e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b33      	ldr	r3, [pc, #204]	@ (8001ea0 <HAL_RCC_OscConfig+0x480>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd8:	f7ff f84c 	bl	8000e74 <HAL_GetTick>
 8001ddc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001dde:	e008      	b.n	8001df2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de0:	f7ff f848 	bl	8000e74 <HAL_GetTick>
 8001de4:	4602      	mov	r2, r0
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	1ad3      	subs	r3, r2, r3
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d901      	bls.n	8001df2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001dee:	2303      	movs	r3, #3
 8001df0:	e093      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001df2:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d1f0      	bne.n	8001de0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	69da      	ldr	r2, [r3, #28]
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6a1b      	ldr	r3, [r3, #32]
 8001e06:	431a      	orrs	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e0c:	019b      	lsls	r3, r3, #6
 8001e0e:	431a      	orrs	r2, r3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001e14:	085b      	lsrs	r3, r3, #1
 8001e16:	3b01      	subs	r3, #1
 8001e18:	041b      	lsls	r3, r3, #16
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e20:	061b      	lsls	r3, r3, #24
 8001e22:	431a      	orrs	r2, r3
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e28:	071b      	lsls	r3, r3, #28
 8001e2a:	491b      	ldr	r1, [pc, #108]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e30:	4b1b      	ldr	r3, [pc, #108]	@ (8001ea0 <HAL_RCC_OscConfig+0x480>)
 8001e32:	2201      	movs	r2, #1
 8001e34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e36:	f7ff f81d 	bl	8000e74 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e3e:	f7ff f819 	bl	8000e74 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e064      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e50:	4b11      	ldr	r3, [pc, #68]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d0f0      	beq.n	8001e3e <HAL_RCC_OscConfig+0x41e>
 8001e5c:	e05c      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e5e:	4b10      	ldr	r3, [pc, #64]	@ (8001ea0 <HAL_RCC_OscConfig+0x480>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e64:	f7ff f806 	bl	8000e74 <HAL_GetTick>
 8001e68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e6a:	e008      	b.n	8001e7e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e6c:	f7ff f802 	bl	8000e74 <HAL_GetTick>
 8001e70:	4602      	mov	r2, r0
 8001e72:	693b      	ldr	r3, [r7, #16]
 8001e74:	1ad3      	subs	r3, r2, r3
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e04d      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e7e:	4b06      	ldr	r3, [pc, #24]	@ (8001e98 <HAL_RCC_OscConfig+0x478>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d1f0      	bne.n	8001e6c <HAL_RCC_OscConfig+0x44c>
 8001e8a:	e045      	b.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	2b01      	cmp	r3, #1
 8001e92:	d107      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e040      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40007000 	.word	0x40007000
 8001ea0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001ea4:	4b1f      	ldr	r3, [pc, #124]	@ (8001f24 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	699b      	ldr	r3, [r3, #24]
 8001eae:	2b01      	cmp	r3, #1
 8001eb0:	d030      	beq.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ebc:	429a      	cmp	r2, r3
 8001ebe:	d129      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eca:	429a      	cmp	r2, r3
 8001ecc:	d122      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ece:	68fa      	ldr	r2, [r7, #12]
 8001ed0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	687a      	ldr	r2, [r7, #4]
 8001ed8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001eda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d119      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eea:	085b      	lsrs	r3, r3, #1
 8001eec:	3b01      	subs	r3, #1
 8001eee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d10f      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001efe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d107      	bne.n	8001f14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d001      	beq.n	8001f18 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	e000      	b.n	8001f1a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001f18:	2300      	movs	r3, #0
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3718      	adds	r7, #24
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	40023800 	.word	0x40023800

08001f28 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e041      	b.n	8001fbe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d106      	bne.n	8001f54 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	2200      	movs	r2, #0
 8001f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f7fe fdae 	bl	8000ab0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2202      	movs	r2, #2
 8001f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3304      	adds	r3, #4
 8001f64:	4619      	mov	r1, r3
 8001f66:	4610      	mov	r0, r2
 8001f68:	f000 f9b6 	bl	80022d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2201      	movs	r2, #1
 8001f70:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2201      	movs	r2, #1
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2201      	movs	r2, #1
 8001f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2201      	movs	r2, #1
 8001fb0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2201      	movs	r2, #1
 8001fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3708      	adds	r7, #8
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
	...

08001fc8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	b085      	sub	sp, #20
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d001      	beq.n	8001fe0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e04e      	b.n	800207e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2202      	movs	r2, #2
 8001fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	68da      	ldr	r2, [r3, #12]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f042 0201 	orr.w	r2, r2, #1
 8001ff6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a23      	ldr	r2, [pc, #140]	@ (800208c <HAL_TIM_Base_Start_IT+0xc4>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d022      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800200a:	d01d      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	4a1f      	ldr	r2, [pc, #124]	@ (8002090 <HAL_TIM_Base_Start_IT+0xc8>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d018      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a1e      	ldr	r2, [pc, #120]	@ (8002094 <HAL_TIM_Base_Start_IT+0xcc>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d013      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4a1c      	ldr	r2, [pc, #112]	@ (8002098 <HAL_TIM_Base_Start_IT+0xd0>)
 8002026:	4293      	cmp	r3, r2
 8002028:	d00e      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a1b      	ldr	r2, [pc, #108]	@ (800209c <HAL_TIM_Base_Start_IT+0xd4>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d009      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a19      	ldr	r2, [pc, #100]	@ (80020a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d004      	beq.n	8002048 <HAL_TIM_Base_Start_IT+0x80>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a18      	ldr	r2, [pc, #96]	@ (80020a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d111      	bne.n	800206c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2b06      	cmp	r3, #6
 8002058:	d010      	beq.n	800207c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	f042 0201 	orr.w	r2, r2, #1
 8002068:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800206a:	e007      	b.n	800207c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f042 0201 	orr.w	r2, r2, #1
 800207a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	3714      	adds	r7, #20
 8002082:	46bd      	mov	sp, r7
 8002084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002088:	4770      	bx	lr
 800208a:	bf00      	nop
 800208c:	40010000 	.word	0x40010000
 8002090:	40000400 	.word	0x40000400
 8002094:	40000800 	.word	0x40000800
 8002098:	40000c00 	.word	0x40000c00
 800209c:	40010400 	.word	0x40010400
 80020a0:	40014000 	.word	0x40014000
 80020a4:	40001800 	.word	0x40001800

080020a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b084      	sub	sp, #16
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	691b      	ldr	r3, [r3, #16]
 80020be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d020      	beq.n	800210c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d01b      	beq.n	800210c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f06f 0202 	mvn.w	r2, #2
 80020dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2201      	movs	r2, #1
 80020e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	699b      	ldr	r3, [r3, #24]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d003      	beq.n	80020fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 f8d2 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 80020f8:	e005      	b.n	8002106 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	f000 f8c4 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002100:	6878      	ldr	r0, [r7, #4]
 8002102:	f000 f8d5 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	2200      	movs	r2, #0
 800210a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800210c:	68bb      	ldr	r3, [r7, #8]
 800210e:	f003 0304 	and.w	r3, r3, #4
 8002112:	2b00      	cmp	r3, #0
 8002114:	d020      	beq.n	8002158 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	f003 0304 	and.w	r3, r3, #4
 800211c:	2b00      	cmp	r3, #0
 800211e:	d01b      	beq.n	8002158 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f06f 0204 	mvn.w	r2, #4
 8002128:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2202      	movs	r2, #2
 800212e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f8ac 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8002144:	e005      	b.n	8002152 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002146:	6878      	ldr	r0, [r7, #4]
 8002148:	f000 f89e 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800214c:	6878      	ldr	r0, [r7, #4]
 800214e:	f000 f8af 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	f003 0308 	and.w	r3, r3, #8
 800215e:	2b00      	cmp	r3, #0
 8002160:	d020      	beq.n	80021a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	f003 0308 	and.w	r3, r3, #8
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01b      	beq.n	80021a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f06f 0208 	mvn.w	r2, #8
 8002174:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2204      	movs	r2, #4
 800217a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	69db      	ldr	r3, [r3, #28]
 8002182:	f003 0303 	and.w	r3, r3, #3
 8002186:	2b00      	cmp	r3, #0
 8002188:	d003      	beq.n	8002192 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f886 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 8002190:	e005      	b.n	800219e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002192:	6878      	ldr	r0, [r7, #4]
 8002194:	f000 f878 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002198:	6878      	ldr	r0, [r7, #4]
 800219a:	f000 f889 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	f003 0310 	and.w	r3, r3, #16
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d020      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d01b      	beq.n	80021f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0210 	mvn.w	r2, #16
 80021c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2208      	movs	r2, #8
 80021c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	69db      	ldr	r3, [r3, #28]
 80021ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 f860 	bl	800229c <HAL_TIM_IC_CaptureCallback>
 80021dc:	e005      	b.n	80021ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f000 f852 	bl	8002288 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021e4:	6878      	ldr	r0, [r7, #4]
 80021e6:	f000 f863 	bl	80022b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d00c      	beq.n	8002214 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b00      	cmp	r3, #0
 8002202:	d007      	beq.n	8002214 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0201 	mvn.w	r2, #1
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7fe f9d8 	bl	80005c4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800221a:	2b00      	cmp	r3, #0
 800221c:	d00c      	beq.n	8002238 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002224:	2b00      	cmp	r3, #0
 8002226:	d007      	beq.n	8002238 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 f982 	bl	800253c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800223e:	2b00      	cmp	r3, #0
 8002240:	d00c      	beq.n	800225c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002248:	2b00      	cmp	r3, #0
 800224a:	d007      	beq.n	800225c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f000 f834 	bl	80022c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	f003 0320 	and.w	r3, r3, #32
 8002262:	2b00      	cmp	r3, #0
 8002264:	d00c      	beq.n	8002280 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	f003 0320 	and.w	r3, r3, #32
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f06f 0220 	mvn.w	r2, #32
 8002278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 f954 	bl	8002528 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002280:	bf00      	nop
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002288:	b480      	push	{r7}
 800228a:	b083      	sub	sp, #12
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800229c:	b480      	push	{r7}
 800229e:	b083      	sub	sp, #12
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80022a4:	bf00      	nop
 80022a6:	370c      	adds	r7, #12
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr

080022b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80022b8:	bf00      	nop
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80022cc:	bf00      	nop
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	4a46      	ldr	r2, [pc, #280]	@ (8002404 <TIM_Base_SetConfig+0x12c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d013      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80022f6:	d00f      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	4a43      	ldr	r2, [pc, #268]	@ (8002408 <TIM_Base_SetConfig+0x130>)
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d00b      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	4a42      	ldr	r2, [pc, #264]	@ (800240c <TIM_Base_SetConfig+0x134>)
 8002304:	4293      	cmp	r3, r2
 8002306:	d007      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	4a41      	ldr	r2, [pc, #260]	@ (8002410 <TIM_Base_SetConfig+0x138>)
 800230c:	4293      	cmp	r3, r2
 800230e:	d003      	beq.n	8002318 <TIM_Base_SetConfig+0x40>
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	4a40      	ldr	r2, [pc, #256]	@ (8002414 <TIM_Base_SetConfig+0x13c>)
 8002314:	4293      	cmp	r3, r2
 8002316:	d108      	bne.n	800232a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800231e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	68fa      	ldr	r2, [r7, #12]
 8002326:	4313      	orrs	r3, r2
 8002328:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	4a35      	ldr	r2, [pc, #212]	@ (8002404 <TIM_Base_SetConfig+0x12c>)
 800232e:	4293      	cmp	r3, r2
 8002330:	d02b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002338:	d027      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4a32      	ldr	r2, [pc, #200]	@ (8002408 <TIM_Base_SetConfig+0x130>)
 800233e:	4293      	cmp	r3, r2
 8002340:	d023      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	4a31      	ldr	r2, [pc, #196]	@ (800240c <TIM_Base_SetConfig+0x134>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d01f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a30      	ldr	r2, [pc, #192]	@ (8002410 <TIM_Base_SetConfig+0x138>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d01b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	4a2f      	ldr	r2, [pc, #188]	@ (8002414 <TIM_Base_SetConfig+0x13c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d017      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	4a2e      	ldr	r2, [pc, #184]	@ (8002418 <TIM_Base_SetConfig+0x140>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d013      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a2d      	ldr	r2, [pc, #180]	@ (800241c <TIM_Base_SetConfig+0x144>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d00f      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	4a2c      	ldr	r2, [pc, #176]	@ (8002420 <TIM_Base_SetConfig+0x148>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d00b      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	4a2b      	ldr	r2, [pc, #172]	@ (8002424 <TIM_Base_SetConfig+0x14c>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d007      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	4a2a      	ldr	r2, [pc, #168]	@ (8002428 <TIM_Base_SetConfig+0x150>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d003      	beq.n	800238a <TIM_Base_SetConfig+0xb2>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	4a29      	ldr	r2, [pc, #164]	@ (800242c <TIM_Base_SetConfig+0x154>)
 8002386:	4293      	cmp	r3, r2
 8002388:	d108      	bne.n	800239c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002390:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	68db      	ldr	r3, [r3, #12]
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4313      	orrs	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	695b      	ldr	r3, [r3, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	689a      	ldr	r2, [r3, #8]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	4a10      	ldr	r2, [pc, #64]	@ (8002404 <TIM_Base_SetConfig+0x12c>)
 80023c4:	4293      	cmp	r3, r2
 80023c6:	d003      	beq.n	80023d0 <TIM_Base_SetConfig+0xf8>
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	4a12      	ldr	r2, [pc, #72]	@ (8002414 <TIM_Base_SetConfig+0x13c>)
 80023cc:	4293      	cmp	r3, r2
 80023ce:	d103      	bne.n	80023d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2201      	movs	r2, #1
 80023dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	691b      	ldr	r3, [r3, #16]
 80023e2:	f003 0301 	and.w	r3, r3, #1
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d105      	bne.n	80023f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	691b      	ldr	r3, [r3, #16]
 80023ee:	f023 0201 	bic.w	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	611a      	str	r2, [r3, #16]
  }
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	40010000 	.word	0x40010000
 8002408:	40000400 	.word	0x40000400
 800240c:	40000800 	.word	0x40000800
 8002410:	40000c00 	.word	0x40000c00
 8002414:	40010400 	.word	0x40010400
 8002418:	40014000 	.word	0x40014000
 800241c:	40014400 	.word	0x40014400
 8002420:	40014800 	.word	0x40014800
 8002424:	40001800 	.word	0x40001800
 8002428:	40001c00 	.word	0x40001c00
 800242c:	40002000 	.word	0x40002000

08002430 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
 8002438:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002440:	2b01      	cmp	r3, #1
 8002442:	d101      	bne.n	8002448 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002444:	2302      	movs	r3, #2
 8002446:	e05a      	b.n	80024fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2201      	movs	r2, #1
 800244c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2202      	movs	r2, #2
 8002454:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	685b      	ldr	r3, [r3, #4]
 800245e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800246e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	68fa      	ldr	r2, [r7, #12]
 8002476:	4313      	orrs	r3, r2
 8002478:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	68fa      	ldr	r2, [r7, #12]
 8002480:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a21      	ldr	r2, [pc, #132]	@ (800250c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8002488:	4293      	cmp	r3, r2
 800248a:	d022      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002494:	d01d      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a1d      	ldr	r2, [pc, #116]	@ (8002510 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d018      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002514 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d013      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a1a      	ldr	r2, [pc, #104]	@ (8002518 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d00e      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a18      	ldr	r2, [pc, #96]	@ (800251c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d009      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a17      	ldr	r2, [pc, #92]	@ (8002520 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d004      	beq.n	80024d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a15      	ldr	r2, [pc, #84]	@ (8002524 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d10c      	bne.n	80024ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80024d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	68ba      	ldr	r2, [r7, #8]
 80024ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	2201      	movs	r2, #1
 80024f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2200      	movs	r2, #0
 80024f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80024fc:	2300      	movs	r3, #0
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3714      	adds	r7, #20
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
 800250a:	bf00      	nop
 800250c:	40010000 	.word	0x40010000
 8002510:	40000400 	.word	0x40000400
 8002514:	40000800 	.word	0x40000800
 8002518:	40000c00 	.word	0x40000c00
 800251c:	40010400 	.word	0x40010400
 8002520:	40014000 	.word	0x40014000
 8002524:	40001800 	.word	0x40001800

08002528 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002530:	bf00      	nop
 8002532:	370c      	adds	r7, #12
 8002534:	46bd      	mov	sp, r7
 8002536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253a:	4770      	bx	lr

0800253c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800253c:	b480      	push	{r7}
 800253e:	b083      	sub	sp, #12
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002544:	bf00      	nop
 8002546:	370c      	adds	r7, #12
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr

08002550 <std>:
 8002550:	2300      	movs	r3, #0
 8002552:	b510      	push	{r4, lr}
 8002554:	4604      	mov	r4, r0
 8002556:	e9c0 3300 	strd	r3, r3, [r0]
 800255a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800255e:	6083      	str	r3, [r0, #8]
 8002560:	8181      	strh	r1, [r0, #12]
 8002562:	6643      	str	r3, [r0, #100]	@ 0x64
 8002564:	81c2      	strh	r2, [r0, #14]
 8002566:	6183      	str	r3, [r0, #24]
 8002568:	4619      	mov	r1, r3
 800256a:	2208      	movs	r2, #8
 800256c:	305c      	adds	r0, #92	@ 0x5c
 800256e:	f000 f9f9 	bl	8002964 <memset>
 8002572:	4b0d      	ldr	r3, [pc, #52]	@ (80025a8 <std+0x58>)
 8002574:	6263      	str	r3, [r4, #36]	@ 0x24
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <std+0x5c>)
 8002578:	62a3      	str	r3, [r4, #40]	@ 0x28
 800257a:	4b0d      	ldr	r3, [pc, #52]	@ (80025b0 <std+0x60>)
 800257c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800257e:	4b0d      	ldr	r3, [pc, #52]	@ (80025b4 <std+0x64>)
 8002580:	6323      	str	r3, [r4, #48]	@ 0x30
 8002582:	4b0d      	ldr	r3, [pc, #52]	@ (80025b8 <std+0x68>)
 8002584:	6224      	str	r4, [r4, #32]
 8002586:	429c      	cmp	r4, r3
 8002588:	d006      	beq.n	8002598 <std+0x48>
 800258a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800258e:	4294      	cmp	r4, r2
 8002590:	d002      	beq.n	8002598 <std+0x48>
 8002592:	33d0      	adds	r3, #208	@ 0xd0
 8002594:	429c      	cmp	r4, r3
 8002596:	d105      	bne.n	80025a4 <std+0x54>
 8002598:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800259c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025a0:	f000 ba58 	b.w	8002a54 <__retarget_lock_init_recursive>
 80025a4:	bd10      	pop	{r4, pc}
 80025a6:	bf00      	nop
 80025a8:	080027b5 	.word	0x080027b5
 80025ac:	080027d7 	.word	0x080027d7
 80025b0:	0800280f 	.word	0x0800280f
 80025b4:	08002833 	.word	0x08002833
 80025b8:	20001914 	.word	0x20001914

080025bc <stdio_exit_handler>:
 80025bc:	4a02      	ldr	r2, [pc, #8]	@ (80025c8 <stdio_exit_handler+0xc>)
 80025be:	4903      	ldr	r1, [pc, #12]	@ (80025cc <stdio_exit_handler+0x10>)
 80025c0:	4803      	ldr	r0, [pc, #12]	@ (80025d0 <stdio_exit_handler+0x14>)
 80025c2:	f000 b869 	b.w	8002698 <_fwalk_sglue>
 80025c6:	bf00      	nop
 80025c8:	20001834 	.word	0x20001834
 80025cc:	080032f5 	.word	0x080032f5
 80025d0:	20001844 	.word	0x20001844

080025d4 <cleanup_stdio>:
 80025d4:	6841      	ldr	r1, [r0, #4]
 80025d6:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <cleanup_stdio+0x34>)
 80025d8:	4299      	cmp	r1, r3
 80025da:	b510      	push	{r4, lr}
 80025dc:	4604      	mov	r4, r0
 80025de:	d001      	beq.n	80025e4 <cleanup_stdio+0x10>
 80025e0:	f000 fe88 	bl	80032f4 <_fflush_r>
 80025e4:	68a1      	ldr	r1, [r4, #8]
 80025e6:	4b09      	ldr	r3, [pc, #36]	@ (800260c <cleanup_stdio+0x38>)
 80025e8:	4299      	cmp	r1, r3
 80025ea:	d002      	beq.n	80025f2 <cleanup_stdio+0x1e>
 80025ec:	4620      	mov	r0, r4
 80025ee:	f000 fe81 	bl	80032f4 <_fflush_r>
 80025f2:	68e1      	ldr	r1, [r4, #12]
 80025f4:	4b06      	ldr	r3, [pc, #24]	@ (8002610 <cleanup_stdio+0x3c>)
 80025f6:	4299      	cmp	r1, r3
 80025f8:	d004      	beq.n	8002604 <cleanup_stdio+0x30>
 80025fa:	4620      	mov	r0, r4
 80025fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002600:	f000 be78 	b.w	80032f4 <_fflush_r>
 8002604:	bd10      	pop	{r4, pc}
 8002606:	bf00      	nop
 8002608:	20001914 	.word	0x20001914
 800260c:	2000197c 	.word	0x2000197c
 8002610:	200019e4 	.word	0x200019e4

08002614 <global_stdio_init.part.0>:
 8002614:	b510      	push	{r4, lr}
 8002616:	4b0b      	ldr	r3, [pc, #44]	@ (8002644 <global_stdio_init.part.0+0x30>)
 8002618:	4c0b      	ldr	r4, [pc, #44]	@ (8002648 <global_stdio_init.part.0+0x34>)
 800261a:	4a0c      	ldr	r2, [pc, #48]	@ (800264c <global_stdio_init.part.0+0x38>)
 800261c:	601a      	str	r2, [r3, #0]
 800261e:	4620      	mov	r0, r4
 8002620:	2200      	movs	r2, #0
 8002622:	2104      	movs	r1, #4
 8002624:	f7ff ff94 	bl	8002550 <std>
 8002628:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800262c:	2201      	movs	r2, #1
 800262e:	2109      	movs	r1, #9
 8002630:	f7ff ff8e 	bl	8002550 <std>
 8002634:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002638:	2202      	movs	r2, #2
 800263a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800263e:	2112      	movs	r1, #18
 8002640:	f7ff bf86 	b.w	8002550 <std>
 8002644:	20001a4c 	.word	0x20001a4c
 8002648:	20001914 	.word	0x20001914
 800264c:	080025bd 	.word	0x080025bd

08002650 <__sfp_lock_acquire>:
 8002650:	4801      	ldr	r0, [pc, #4]	@ (8002658 <__sfp_lock_acquire+0x8>)
 8002652:	f000 ba00 	b.w	8002a56 <__retarget_lock_acquire_recursive>
 8002656:	bf00      	nop
 8002658:	20001a55 	.word	0x20001a55

0800265c <__sfp_lock_release>:
 800265c:	4801      	ldr	r0, [pc, #4]	@ (8002664 <__sfp_lock_release+0x8>)
 800265e:	f000 b9fb 	b.w	8002a58 <__retarget_lock_release_recursive>
 8002662:	bf00      	nop
 8002664:	20001a55 	.word	0x20001a55

08002668 <__sinit>:
 8002668:	b510      	push	{r4, lr}
 800266a:	4604      	mov	r4, r0
 800266c:	f7ff fff0 	bl	8002650 <__sfp_lock_acquire>
 8002670:	6a23      	ldr	r3, [r4, #32]
 8002672:	b11b      	cbz	r3, 800267c <__sinit+0x14>
 8002674:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002678:	f7ff bff0 	b.w	800265c <__sfp_lock_release>
 800267c:	4b04      	ldr	r3, [pc, #16]	@ (8002690 <__sinit+0x28>)
 800267e:	6223      	str	r3, [r4, #32]
 8002680:	4b04      	ldr	r3, [pc, #16]	@ (8002694 <__sinit+0x2c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d1f5      	bne.n	8002674 <__sinit+0xc>
 8002688:	f7ff ffc4 	bl	8002614 <global_stdio_init.part.0>
 800268c:	e7f2      	b.n	8002674 <__sinit+0xc>
 800268e:	bf00      	nop
 8002690:	080025d5 	.word	0x080025d5
 8002694:	20001a4c 	.word	0x20001a4c

08002698 <_fwalk_sglue>:
 8002698:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800269c:	4607      	mov	r7, r0
 800269e:	4688      	mov	r8, r1
 80026a0:	4614      	mov	r4, r2
 80026a2:	2600      	movs	r6, #0
 80026a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80026a8:	f1b9 0901 	subs.w	r9, r9, #1
 80026ac:	d505      	bpl.n	80026ba <_fwalk_sglue+0x22>
 80026ae:	6824      	ldr	r4, [r4, #0]
 80026b0:	2c00      	cmp	r4, #0
 80026b2:	d1f7      	bne.n	80026a4 <_fwalk_sglue+0xc>
 80026b4:	4630      	mov	r0, r6
 80026b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80026ba:	89ab      	ldrh	r3, [r5, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d907      	bls.n	80026d0 <_fwalk_sglue+0x38>
 80026c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80026c4:	3301      	adds	r3, #1
 80026c6:	d003      	beq.n	80026d0 <_fwalk_sglue+0x38>
 80026c8:	4629      	mov	r1, r5
 80026ca:	4638      	mov	r0, r7
 80026cc:	47c0      	blx	r8
 80026ce:	4306      	orrs	r6, r0
 80026d0:	3568      	adds	r5, #104	@ 0x68
 80026d2:	e7e9      	b.n	80026a8 <_fwalk_sglue+0x10>

080026d4 <iprintf>:
 80026d4:	b40f      	push	{r0, r1, r2, r3}
 80026d6:	b507      	push	{r0, r1, r2, lr}
 80026d8:	4906      	ldr	r1, [pc, #24]	@ (80026f4 <iprintf+0x20>)
 80026da:	ab04      	add	r3, sp, #16
 80026dc:	6808      	ldr	r0, [r1, #0]
 80026de:	f853 2b04 	ldr.w	r2, [r3], #4
 80026e2:	6881      	ldr	r1, [r0, #8]
 80026e4:	9301      	str	r3, [sp, #4]
 80026e6:	f000 fadb 	bl	8002ca0 <_vfiprintf_r>
 80026ea:	b003      	add	sp, #12
 80026ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80026f0:	b004      	add	sp, #16
 80026f2:	4770      	bx	lr
 80026f4:	20001840 	.word	0x20001840

080026f8 <_puts_r>:
 80026f8:	6a03      	ldr	r3, [r0, #32]
 80026fa:	b570      	push	{r4, r5, r6, lr}
 80026fc:	6884      	ldr	r4, [r0, #8]
 80026fe:	4605      	mov	r5, r0
 8002700:	460e      	mov	r6, r1
 8002702:	b90b      	cbnz	r3, 8002708 <_puts_r+0x10>
 8002704:	f7ff ffb0 	bl	8002668 <__sinit>
 8002708:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800270a:	07db      	lsls	r3, r3, #31
 800270c:	d405      	bmi.n	800271a <_puts_r+0x22>
 800270e:	89a3      	ldrh	r3, [r4, #12]
 8002710:	0598      	lsls	r0, r3, #22
 8002712:	d402      	bmi.n	800271a <_puts_r+0x22>
 8002714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002716:	f000 f99e 	bl	8002a56 <__retarget_lock_acquire_recursive>
 800271a:	89a3      	ldrh	r3, [r4, #12]
 800271c:	0719      	lsls	r1, r3, #28
 800271e:	d502      	bpl.n	8002726 <_puts_r+0x2e>
 8002720:	6923      	ldr	r3, [r4, #16]
 8002722:	2b00      	cmp	r3, #0
 8002724:	d135      	bne.n	8002792 <_puts_r+0x9a>
 8002726:	4621      	mov	r1, r4
 8002728:	4628      	mov	r0, r5
 800272a:	f000 f8c5 	bl	80028b8 <__swsetup_r>
 800272e:	b380      	cbz	r0, 8002792 <_puts_r+0x9a>
 8002730:	f04f 35ff 	mov.w	r5, #4294967295
 8002734:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002736:	07da      	lsls	r2, r3, #31
 8002738:	d405      	bmi.n	8002746 <_puts_r+0x4e>
 800273a:	89a3      	ldrh	r3, [r4, #12]
 800273c:	059b      	lsls	r3, r3, #22
 800273e:	d402      	bmi.n	8002746 <_puts_r+0x4e>
 8002740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002742:	f000 f989 	bl	8002a58 <__retarget_lock_release_recursive>
 8002746:	4628      	mov	r0, r5
 8002748:	bd70      	pop	{r4, r5, r6, pc}
 800274a:	2b00      	cmp	r3, #0
 800274c:	da04      	bge.n	8002758 <_puts_r+0x60>
 800274e:	69a2      	ldr	r2, [r4, #24]
 8002750:	429a      	cmp	r2, r3
 8002752:	dc17      	bgt.n	8002784 <_puts_r+0x8c>
 8002754:	290a      	cmp	r1, #10
 8002756:	d015      	beq.n	8002784 <_puts_r+0x8c>
 8002758:	6823      	ldr	r3, [r4, #0]
 800275a:	1c5a      	adds	r2, r3, #1
 800275c:	6022      	str	r2, [r4, #0]
 800275e:	7019      	strb	r1, [r3, #0]
 8002760:	68a3      	ldr	r3, [r4, #8]
 8002762:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002766:	3b01      	subs	r3, #1
 8002768:	60a3      	str	r3, [r4, #8]
 800276a:	2900      	cmp	r1, #0
 800276c:	d1ed      	bne.n	800274a <_puts_r+0x52>
 800276e:	2b00      	cmp	r3, #0
 8002770:	da11      	bge.n	8002796 <_puts_r+0x9e>
 8002772:	4622      	mov	r2, r4
 8002774:	210a      	movs	r1, #10
 8002776:	4628      	mov	r0, r5
 8002778:	f000 f85f 	bl	800283a <__swbuf_r>
 800277c:	3001      	adds	r0, #1
 800277e:	d0d7      	beq.n	8002730 <_puts_r+0x38>
 8002780:	250a      	movs	r5, #10
 8002782:	e7d7      	b.n	8002734 <_puts_r+0x3c>
 8002784:	4622      	mov	r2, r4
 8002786:	4628      	mov	r0, r5
 8002788:	f000 f857 	bl	800283a <__swbuf_r>
 800278c:	3001      	adds	r0, #1
 800278e:	d1e7      	bne.n	8002760 <_puts_r+0x68>
 8002790:	e7ce      	b.n	8002730 <_puts_r+0x38>
 8002792:	3e01      	subs	r6, #1
 8002794:	e7e4      	b.n	8002760 <_puts_r+0x68>
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	1c5a      	adds	r2, r3, #1
 800279a:	6022      	str	r2, [r4, #0]
 800279c:	220a      	movs	r2, #10
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e7ee      	b.n	8002780 <_puts_r+0x88>
	...

080027a4 <puts>:
 80027a4:	4b02      	ldr	r3, [pc, #8]	@ (80027b0 <puts+0xc>)
 80027a6:	4601      	mov	r1, r0
 80027a8:	6818      	ldr	r0, [r3, #0]
 80027aa:	f7ff bfa5 	b.w	80026f8 <_puts_r>
 80027ae:	bf00      	nop
 80027b0:	20001840 	.word	0x20001840

080027b4 <__sread>:
 80027b4:	b510      	push	{r4, lr}
 80027b6:	460c      	mov	r4, r1
 80027b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027bc:	f000 f8fc 	bl	80029b8 <_read_r>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	bfab      	itete	ge
 80027c4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80027c6:	89a3      	ldrhlt	r3, [r4, #12]
 80027c8:	181b      	addge	r3, r3, r0
 80027ca:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80027ce:	bfac      	ite	ge
 80027d0:	6563      	strge	r3, [r4, #84]	@ 0x54
 80027d2:	81a3      	strhlt	r3, [r4, #12]
 80027d4:	bd10      	pop	{r4, pc}

080027d6 <__swrite>:
 80027d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027da:	461f      	mov	r7, r3
 80027dc:	898b      	ldrh	r3, [r1, #12]
 80027de:	05db      	lsls	r3, r3, #23
 80027e0:	4605      	mov	r5, r0
 80027e2:	460c      	mov	r4, r1
 80027e4:	4616      	mov	r6, r2
 80027e6:	d505      	bpl.n	80027f4 <__swrite+0x1e>
 80027e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027ec:	2302      	movs	r3, #2
 80027ee:	2200      	movs	r2, #0
 80027f0:	f000 f8d0 	bl	8002994 <_lseek_r>
 80027f4:	89a3      	ldrh	r3, [r4, #12]
 80027f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80027fa:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80027fe:	81a3      	strh	r3, [r4, #12]
 8002800:	4632      	mov	r2, r6
 8002802:	463b      	mov	r3, r7
 8002804:	4628      	mov	r0, r5
 8002806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800280a:	f000 b8e7 	b.w	80029dc <_write_r>

0800280e <__sseek>:
 800280e:	b510      	push	{r4, lr}
 8002810:	460c      	mov	r4, r1
 8002812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002816:	f000 f8bd 	bl	8002994 <_lseek_r>
 800281a:	1c43      	adds	r3, r0, #1
 800281c:	89a3      	ldrh	r3, [r4, #12]
 800281e:	bf15      	itete	ne
 8002820:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002822:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002826:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800282a:	81a3      	strheq	r3, [r4, #12]
 800282c:	bf18      	it	ne
 800282e:	81a3      	strhne	r3, [r4, #12]
 8002830:	bd10      	pop	{r4, pc}

08002832 <__sclose>:
 8002832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002836:	f000 b89d 	b.w	8002974 <_close_r>

0800283a <__swbuf_r>:
 800283a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800283c:	460e      	mov	r6, r1
 800283e:	4614      	mov	r4, r2
 8002840:	4605      	mov	r5, r0
 8002842:	b118      	cbz	r0, 800284c <__swbuf_r+0x12>
 8002844:	6a03      	ldr	r3, [r0, #32]
 8002846:	b90b      	cbnz	r3, 800284c <__swbuf_r+0x12>
 8002848:	f7ff ff0e 	bl	8002668 <__sinit>
 800284c:	69a3      	ldr	r3, [r4, #24]
 800284e:	60a3      	str	r3, [r4, #8]
 8002850:	89a3      	ldrh	r3, [r4, #12]
 8002852:	071a      	lsls	r2, r3, #28
 8002854:	d501      	bpl.n	800285a <__swbuf_r+0x20>
 8002856:	6923      	ldr	r3, [r4, #16]
 8002858:	b943      	cbnz	r3, 800286c <__swbuf_r+0x32>
 800285a:	4621      	mov	r1, r4
 800285c:	4628      	mov	r0, r5
 800285e:	f000 f82b 	bl	80028b8 <__swsetup_r>
 8002862:	b118      	cbz	r0, 800286c <__swbuf_r+0x32>
 8002864:	f04f 37ff 	mov.w	r7, #4294967295
 8002868:	4638      	mov	r0, r7
 800286a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800286c:	6823      	ldr	r3, [r4, #0]
 800286e:	6922      	ldr	r2, [r4, #16]
 8002870:	1a98      	subs	r0, r3, r2
 8002872:	6963      	ldr	r3, [r4, #20]
 8002874:	b2f6      	uxtb	r6, r6
 8002876:	4283      	cmp	r3, r0
 8002878:	4637      	mov	r7, r6
 800287a:	dc05      	bgt.n	8002888 <__swbuf_r+0x4e>
 800287c:	4621      	mov	r1, r4
 800287e:	4628      	mov	r0, r5
 8002880:	f000 fd38 	bl	80032f4 <_fflush_r>
 8002884:	2800      	cmp	r0, #0
 8002886:	d1ed      	bne.n	8002864 <__swbuf_r+0x2a>
 8002888:	68a3      	ldr	r3, [r4, #8]
 800288a:	3b01      	subs	r3, #1
 800288c:	60a3      	str	r3, [r4, #8]
 800288e:	6823      	ldr	r3, [r4, #0]
 8002890:	1c5a      	adds	r2, r3, #1
 8002892:	6022      	str	r2, [r4, #0]
 8002894:	701e      	strb	r6, [r3, #0]
 8002896:	6962      	ldr	r2, [r4, #20]
 8002898:	1c43      	adds	r3, r0, #1
 800289a:	429a      	cmp	r2, r3
 800289c:	d004      	beq.n	80028a8 <__swbuf_r+0x6e>
 800289e:	89a3      	ldrh	r3, [r4, #12]
 80028a0:	07db      	lsls	r3, r3, #31
 80028a2:	d5e1      	bpl.n	8002868 <__swbuf_r+0x2e>
 80028a4:	2e0a      	cmp	r6, #10
 80028a6:	d1df      	bne.n	8002868 <__swbuf_r+0x2e>
 80028a8:	4621      	mov	r1, r4
 80028aa:	4628      	mov	r0, r5
 80028ac:	f000 fd22 	bl	80032f4 <_fflush_r>
 80028b0:	2800      	cmp	r0, #0
 80028b2:	d0d9      	beq.n	8002868 <__swbuf_r+0x2e>
 80028b4:	e7d6      	b.n	8002864 <__swbuf_r+0x2a>
	...

080028b8 <__swsetup_r>:
 80028b8:	b538      	push	{r3, r4, r5, lr}
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <__swsetup_r+0xa8>)
 80028bc:	4605      	mov	r5, r0
 80028be:	6818      	ldr	r0, [r3, #0]
 80028c0:	460c      	mov	r4, r1
 80028c2:	b118      	cbz	r0, 80028cc <__swsetup_r+0x14>
 80028c4:	6a03      	ldr	r3, [r0, #32]
 80028c6:	b90b      	cbnz	r3, 80028cc <__swsetup_r+0x14>
 80028c8:	f7ff fece 	bl	8002668 <__sinit>
 80028cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80028d0:	0719      	lsls	r1, r3, #28
 80028d2:	d422      	bmi.n	800291a <__swsetup_r+0x62>
 80028d4:	06da      	lsls	r2, r3, #27
 80028d6:	d407      	bmi.n	80028e8 <__swsetup_r+0x30>
 80028d8:	2209      	movs	r2, #9
 80028da:	602a      	str	r2, [r5, #0]
 80028dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80028e0:	81a3      	strh	r3, [r4, #12]
 80028e2:	f04f 30ff 	mov.w	r0, #4294967295
 80028e6:	e033      	b.n	8002950 <__swsetup_r+0x98>
 80028e8:	0758      	lsls	r0, r3, #29
 80028ea:	d512      	bpl.n	8002912 <__swsetup_r+0x5a>
 80028ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80028ee:	b141      	cbz	r1, 8002902 <__swsetup_r+0x4a>
 80028f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80028f4:	4299      	cmp	r1, r3
 80028f6:	d002      	beq.n	80028fe <__swsetup_r+0x46>
 80028f8:	4628      	mov	r0, r5
 80028fa:	f000 f8af 	bl	8002a5c <_free_r>
 80028fe:	2300      	movs	r3, #0
 8002900:	6363      	str	r3, [r4, #52]	@ 0x34
 8002902:	89a3      	ldrh	r3, [r4, #12]
 8002904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002908:	81a3      	strh	r3, [r4, #12]
 800290a:	2300      	movs	r3, #0
 800290c:	6063      	str	r3, [r4, #4]
 800290e:	6923      	ldr	r3, [r4, #16]
 8002910:	6023      	str	r3, [r4, #0]
 8002912:	89a3      	ldrh	r3, [r4, #12]
 8002914:	f043 0308 	orr.w	r3, r3, #8
 8002918:	81a3      	strh	r3, [r4, #12]
 800291a:	6923      	ldr	r3, [r4, #16]
 800291c:	b94b      	cbnz	r3, 8002932 <__swsetup_r+0x7a>
 800291e:	89a3      	ldrh	r3, [r4, #12]
 8002920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002928:	d003      	beq.n	8002932 <__swsetup_r+0x7a>
 800292a:	4621      	mov	r1, r4
 800292c:	4628      	mov	r0, r5
 800292e:	f000 fd2f 	bl	8003390 <__smakebuf_r>
 8002932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002936:	f013 0201 	ands.w	r2, r3, #1
 800293a:	d00a      	beq.n	8002952 <__swsetup_r+0x9a>
 800293c:	2200      	movs	r2, #0
 800293e:	60a2      	str	r2, [r4, #8]
 8002940:	6962      	ldr	r2, [r4, #20]
 8002942:	4252      	negs	r2, r2
 8002944:	61a2      	str	r2, [r4, #24]
 8002946:	6922      	ldr	r2, [r4, #16]
 8002948:	b942      	cbnz	r2, 800295c <__swsetup_r+0xa4>
 800294a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800294e:	d1c5      	bne.n	80028dc <__swsetup_r+0x24>
 8002950:	bd38      	pop	{r3, r4, r5, pc}
 8002952:	0799      	lsls	r1, r3, #30
 8002954:	bf58      	it	pl
 8002956:	6962      	ldrpl	r2, [r4, #20]
 8002958:	60a2      	str	r2, [r4, #8]
 800295a:	e7f4      	b.n	8002946 <__swsetup_r+0x8e>
 800295c:	2000      	movs	r0, #0
 800295e:	e7f7      	b.n	8002950 <__swsetup_r+0x98>
 8002960:	20001840 	.word	0x20001840

08002964 <memset>:
 8002964:	4402      	add	r2, r0
 8002966:	4603      	mov	r3, r0
 8002968:	4293      	cmp	r3, r2
 800296a:	d100      	bne.n	800296e <memset+0xa>
 800296c:	4770      	bx	lr
 800296e:	f803 1b01 	strb.w	r1, [r3], #1
 8002972:	e7f9      	b.n	8002968 <memset+0x4>

08002974 <_close_r>:
 8002974:	b538      	push	{r3, r4, r5, lr}
 8002976:	4d06      	ldr	r5, [pc, #24]	@ (8002990 <_close_r+0x1c>)
 8002978:	2300      	movs	r3, #0
 800297a:	4604      	mov	r4, r0
 800297c:	4608      	mov	r0, r1
 800297e:	602b      	str	r3, [r5, #0]
 8002980:	f7fe f99c 	bl	8000cbc <_close>
 8002984:	1c43      	adds	r3, r0, #1
 8002986:	d102      	bne.n	800298e <_close_r+0x1a>
 8002988:	682b      	ldr	r3, [r5, #0]
 800298a:	b103      	cbz	r3, 800298e <_close_r+0x1a>
 800298c:	6023      	str	r3, [r4, #0]
 800298e:	bd38      	pop	{r3, r4, r5, pc}
 8002990:	20001a50 	.word	0x20001a50

08002994 <_lseek_r>:
 8002994:	b538      	push	{r3, r4, r5, lr}
 8002996:	4d07      	ldr	r5, [pc, #28]	@ (80029b4 <_lseek_r+0x20>)
 8002998:	4604      	mov	r4, r0
 800299a:	4608      	mov	r0, r1
 800299c:	4611      	mov	r1, r2
 800299e:	2200      	movs	r2, #0
 80029a0:	602a      	str	r2, [r5, #0]
 80029a2:	461a      	mov	r2, r3
 80029a4:	f7fe f9b1 	bl	8000d0a <_lseek>
 80029a8:	1c43      	adds	r3, r0, #1
 80029aa:	d102      	bne.n	80029b2 <_lseek_r+0x1e>
 80029ac:	682b      	ldr	r3, [r5, #0]
 80029ae:	b103      	cbz	r3, 80029b2 <_lseek_r+0x1e>
 80029b0:	6023      	str	r3, [r4, #0]
 80029b2:	bd38      	pop	{r3, r4, r5, pc}
 80029b4:	20001a50 	.word	0x20001a50

080029b8 <_read_r>:
 80029b8:	b538      	push	{r3, r4, r5, lr}
 80029ba:	4d07      	ldr	r5, [pc, #28]	@ (80029d8 <_read_r+0x20>)
 80029bc:	4604      	mov	r4, r0
 80029be:	4608      	mov	r0, r1
 80029c0:	4611      	mov	r1, r2
 80029c2:	2200      	movs	r2, #0
 80029c4:	602a      	str	r2, [r5, #0]
 80029c6:	461a      	mov	r2, r3
 80029c8:	f7fe f93f 	bl	8000c4a <_read>
 80029cc:	1c43      	adds	r3, r0, #1
 80029ce:	d102      	bne.n	80029d6 <_read_r+0x1e>
 80029d0:	682b      	ldr	r3, [r5, #0]
 80029d2:	b103      	cbz	r3, 80029d6 <_read_r+0x1e>
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	bd38      	pop	{r3, r4, r5, pc}
 80029d8:	20001a50 	.word	0x20001a50

080029dc <_write_r>:
 80029dc:	b538      	push	{r3, r4, r5, lr}
 80029de:	4d07      	ldr	r5, [pc, #28]	@ (80029fc <_write_r+0x20>)
 80029e0:	4604      	mov	r4, r0
 80029e2:	4608      	mov	r0, r1
 80029e4:	4611      	mov	r1, r2
 80029e6:	2200      	movs	r2, #0
 80029e8:	602a      	str	r2, [r5, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	f7fe f94a 	bl	8000c84 <_write>
 80029f0:	1c43      	adds	r3, r0, #1
 80029f2:	d102      	bne.n	80029fa <_write_r+0x1e>
 80029f4:	682b      	ldr	r3, [r5, #0]
 80029f6:	b103      	cbz	r3, 80029fa <_write_r+0x1e>
 80029f8:	6023      	str	r3, [r4, #0]
 80029fa:	bd38      	pop	{r3, r4, r5, pc}
 80029fc:	20001a50 	.word	0x20001a50

08002a00 <__errno>:
 8002a00:	4b01      	ldr	r3, [pc, #4]	@ (8002a08 <__errno+0x8>)
 8002a02:	6818      	ldr	r0, [r3, #0]
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	20001840 	.word	0x20001840

08002a0c <__libc_init_array>:
 8002a0c:	b570      	push	{r4, r5, r6, lr}
 8002a0e:	4d0d      	ldr	r5, [pc, #52]	@ (8002a44 <__libc_init_array+0x38>)
 8002a10:	4c0d      	ldr	r4, [pc, #52]	@ (8002a48 <__libc_init_array+0x3c>)
 8002a12:	1b64      	subs	r4, r4, r5
 8002a14:	10a4      	asrs	r4, r4, #2
 8002a16:	2600      	movs	r6, #0
 8002a18:	42a6      	cmp	r6, r4
 8002a1a:	d109      	bne.n	8002a30 <__libc_init_array+0x24>
 8002a1c:	4d0b      	ldr	r5, [pc, #44]	@ (8002a4c <__libc_init_array+0x40>)
 8002a1e:	4c0c      	ldr	r4, [pc, #48]	@ (8002a50 <__libc_init_array+0x44>)
 8002a20:	f000 fd24 	bl	800346c <_init>
 8002a24:	1b64      	subs	r4, r4, r5
 8002a26:	10a4      	asrs	r4, r4, #2
 8002a28:	2600      	movs	r6, #0
 8002a2a:	42a6      	cmp	r6, r4
 8002a2c:	d105      	bne.n	8002a3a <__libc_init_array+0x2e>
 8002a2e:	bd70      	pop	{r4, r5, r6, pc}
 8002a30:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a34:	4798      	blx	r3
 8002a36:	3601      	adds	r6, #1
 8002a38:	e7ee      	b.n	8002a18 <__libc_init_array+0xc>
 8002a3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a3e:	4798      	blx	r3
 8002a40:	3601      	adds	r6, #1
 8002a42:	e7f2      	b.n	8002a2a <__libc_init_array+0x1e>
 8002a44:	080034e4 	.word	0x080034e4
 8002a48:	080034e4 	.word	0x080034e4
 8002a4c:	080034e4 	.word	0x080034e4
 8002a50:	080034e8 	.word	0x080034e8

08002a54 <__retarget_lock_init_recursive>:
 8002a54:	4770      	bx	lr

08002a56 <__retarget_lock_acquire_recursive>:
 8002a56:	4770      	bx	lr

08002a58 <__retarget_lock_release_recursive>:
 8002a58:	4770      	bx	lr
	...

08002a5c <_free_r>:
 8002a5c:	b538      	push	{r3, r4, r5, lr}
 8002a5e:	4605      	mov	r5, r0
 8002a60:	2900      	cmp	r1, #0
 8002a62:	d041      	beq.n	8002ae8 <_free_r+0x8c>
 8002a64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a68:	1f0c      	subs	r4, r1, #4
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	bfb8      	it	lt
 8002a6e:	18e4      	addlt	r4, r4, r3
 8002a70:	f000 f8e0 	bl	8002c34 <__malloc_lock>
 8002a74:	4a1d      	ldr	r2, [pc, #116]	@ (8002aec <_free_r+0x90>)
 8002a76:	6813      	ldr	r3, [r2, #0]
 8002a78:	b933      	cbnz	r3, 8002a88 <_free_r+0x2c>
 8002a7a:	6063      	str	r3, [r4, #4]
 8002a7c:	6014      	str	r4, [r2, #0]
 8002a7e:	4628      	mov	r0, r5
 8002a80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002a84:	f000 b8dc 	b.w	8002c40 <__malloc_unlock>
 8002a88:	42a3      	cmp	r3, r4
 8002a8a:	d908      	bls.n	8002a9e <_free_r+0x42>
 8002a8c:	6820      	ldr	r0, [r4, #0]
 8002a8e:	1821      	adds	r1, r4, r0
 8002a90:	428b      	cmp	r3, r1
 8002a92:	bf01      	itttt	eq
 8002a94:	6819      	ldreq	r1, [r3, #0]
 8002a96:	685b      	ldreq	r3, [r3, #4]
 8002a98:	1809      	addeq	r1, r1, r0
 8002a9a:	6021      	streq	r1, [r4, #0]
 8002a9c:	e7ed      	b.n	8002a7a <_free_r+0x1e>
 8002a9e:	461a      	mov	r2, r3
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	b10b      	cbz	r3, 8002aa8 <_free_r+0x4c>
 8002aa4:	42a3      	cmp	r3, r4
 8002aa6:	d9fa      	bls.n	8002a9e <_free_r+0x42>
 8002aa8:	6811      	ldr	r1, [r2, #0]
 8002aaa:	1850      	adds	r0, r2, r1
 8002aac:	42a0      	cmp	r0, r4
 8002aae:	d10b      	bne.n	8002ac8 <_free_r+0x6c>
 8002ab0:	6820      	ldr	r0, [r4, #0]
 8002ab2:	4401      	add	r1, r0
 8002ab4:	1850      	adds	r0, r2, r1
 8002ab6:	4283      	cmp	r3, r0
 8002ab8:	6011      	str	r1, [r2, #0]
 8002aba:	d1e0      	bne.n	8002a7e <_free_r+0x22>
 8002abc:	6818      	ldr	r0, [r3, #0]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	6053      	str	r3, [r2, #4]
 8002ac2:	4408      	add	r0, r1
 8002ac4:	6010      	str	r0, [r2, #0]
 8002ac6:	e7da      	b.n	8002a7e <_free_r+0x22>
 8002ac8:	d902      	bls.n	8002ad0 <_free_r+0x74>
 8002aca:	230c      	movs	r3, #12
 8002acc:	602b      	str	r3, [r5, #0]
 8002ace:	e7d6      	b.n	8002a7e <_free_r+0x22>
 8002ad0:	6820      	ldr	r0, [r4, #0]
 8002ad2:	1821      	adds	r1, r4, r0
 8002ad4:	428b      	cmp	r3, r1
 8002ad6:	bf04      	itt	eq
 8002ad8:	6819      	ldreq	r1, [r3, #0]
 8002ada:	685b      	ldreq	r3, [r3, #4]
 8002adc:	6063      	str	r3, [r4, #4]
 8002ade:	bf04      	itt	eq
 8002ae0:	1809      	addeq	r1, r1, r0
 8002ae2:	6021      	streq	r1, [r4, #0]
 8002ae4:	6054      	str	r4, [r2, #4]
 8002ae6:	e7ca      	b.n	8002a7e <_free_r+0x22>
 8002ae8:	bd38      	pop	{r3, r4, r5, pc}
 8002aea:	bf00      	nop
 8002aec:	20001a5c 	.word	0x20001a5c

08002af0 <sbrk_aligned>:
 8002af0:	b570      	push	{r4, r5, r6, lr}
 8002af2:	4e0f      	ldr	r6, [pc, #60]	@ (8002b30 <sbrk_aligned+0x40>)
 8002af4:	460c      	mov	r4, r1
 8002af6:	6831      	ldr	r1, [r6, #0]
 8002af8:	4605      	mov	r5, r0
 8002afa:	b911      	cbnz	r1, 8002b02 <sbrk_aligned+0x12>
 8002afc:	f000 fca6 	bl	800344c <_sbrk_r>
 8002b00:	6030      	str	r0, [r6, #0]
 8002b02:	4621      	mov	r1, r4
 8002b04:	4628      	mov	r0, r5
 8002b06:	f000 fca1 	bl	800344c <_sbrk_r>
 8002b0a:	1c43      	adds	r3, r0, #1
 8002b0c:	d103      	bne.n	8002b16 <sbrk_aligned+0x26>
 8002b0e:	f04f 34ff 	mov.w	r4, #4294967295
 8002b12:	4620      	mov	r0, r4
 8002b14:	bd70      	pop	{r4, r5, r6, pc}
 8002b16:	1cc4      	adds	r4, r0, #3
 8002b18:	f024 0403 	bic.w	r4, r4, #3
 8002b1c:	42a0      	cmp	r0, r4
 8002b1e:	d0f8      	beq.n	8002b12 <sbrk_aligned+0x22>
 8002b20:	1a21      	subs	r1, r4, r0
 8002b22:	4628      	mov	r0, r5
 8002b24:	f000 fc92 	bl	800344c <_sbrk_r>
 8002b28:	3001      	adds	r0, #1
 8002b2a:	d1f2      	bne.n	8002b12 <sbrk_aligned+0x22>
 8002b2c:	e7ef      	b.n	8002b0e <sbrk_aligned+0x1e>
 8002b2e:	bf00      	nop
 8002b30:	20001a58 	.word	0x20001a58

08002b34 <_malloc_r>:
 8002b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002b38:	1ccd      	adds	r5, r1, #3
 8002b3a:	f025 0503 	bic.w	r5, r5, #3
 8002b3e:	3508      	adds	r5, #8
 8002b40:	2d0c      	cmp	r5, #12
 8002b42:	bf38      	it	cc
 8002b44:	250c      	movcc	r5, #12
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	4606      	mov	r6, r0
 8002b4a:	db01      	blt.n	8002b50 <_malloc_r+0x1c>
 8002b4c:	42a9      	cmp	r1, r5
 8002b4e:	d904      	bls.n	8002b5a <_malloc_r+0x26>
 8002b50:	230c      	movs	r3, #12
 8002b52:	6033      	str	r3, [r6, #0]
 8002b54:	2000      	movs	r0, #0
 8002b56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002b5a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002c30 <_malloc_r+0xfc>
 8002b5e:	f000 f869 	bl	8002c34 <__malloc_lock>
 8002b62:	f8d8 3000 	ldr.w	r3, [r8]
 8002b66:	461c      	mov	r4, r3
 8002b68:	bb44      	cbnz	r4, 8002bbc <_malloc_r+0x88>
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	4630      	mov	r0, r6
 8002b6e:	f7ff ffbf 	bl	8002af0 <sbrk_aligned>
 8002b72:	1c43      	adds	r3, r0, #1
 8002b74:	4604      	mov	r4, r0
 8002b76:	d158      	bne.n	8002c2a <_malloc_r+0xf6>
 8002b78:	f8d8 4000 	ldr.w	r4, [r8]
 8002b7c:	4627      	mov	r7, r4
 8002b7e:	2f00      	cmp	r7, #0
 8002b80:	d143      	bne.n	8002c0a <_malloc_r+0xd6>
 8002b82:	2c00      	cmp	r4, #0
 8002b84:	d04b      	beq.n	8002c1e <_malloc_r+0xea>
 8002b86:	6823      	ldr	r3, [r4, #0]
 8002b88:	4639      	mov	r1, r7
 8002b8a:	4630      	mov	r0, r6
 8002b8c:	eb04 0903 	add.w	r9, r4, r3
 8002b90:	f000 fc5c 	bl	800344c <_sbrk_r>
 8002b94:	4581      	cmp	r9, r0
 8002b96:	d142      	bne.n	8002c1e <_malloc_r+0xea>
 8002b98:	6821      	ldr	r1, [r4, #0]
 8002b9a:	1a6d      	subs	r5, r5, r1
 8002b9c:	4629      	mov	r1, r5
 8002b9e:	4630      	mov	r0, r6
 8002ba0:	f7ff ffa6 	bl	8002af0 <sbrk_aligned>
 8002ba4:	3001      	adds	r0, #1
 8002ba6:	d03a      	beq.n	8002c1e <_malloc_r+0xea>
 8002ba8:	6823      	ldr	r3, [r4, #0]
 8002baa:	442b      	add	r3, r5
 8002bac:	6023      	str	r3, [r4, #0]
 8002bae:	f8d8 3000 	ldr.w	r3, [r8]
 8002bb2:	685a      	ldr	r2, [r3, #4]
 8002bb4:	bb62      	cbnz	r2, 8002c10 <_malloc_r+0xdc>
 8002bb6:	f8c8 7000 	str.w	r7, [r8]
 8002bba:	e00f      	b.n	8002bdc <_malloc_r+0xa8>
 8002bbc:	6822      	ldr	r2, [r4, #0]
 8002bbe:	1b52      	subs	r2, r2, r5
 8002bc0:	d420      	bmi.n	8002c04 <_malloc_r+0xd0>
 8002bc2:	2a0b      	cmp	r2, #11
 8002bc4:	d917      	bls.n	8002bf6 <_malloc_r+0xc2>
 8002bc6:	1961      	adds	r1, r4, r5
 8002bc8:	42a3      	cmp	r3, r4
 8002bca:	6025      	str	r5, [r4, #0]
 8002bcc:	bf18      	it	ne
 8002bce:	6059      	strne	r1, [r3, #4]
 8002bd0:	6863      	ldr	r3, [r4, #4]
 8002bd2:	bf08      	it	eq
 8002bd4:	f8c8 1000 	streq.w	r1, [r8]
 8002bd8:	5162      	str	r2, [r4, r5]
 8002bda:	604b      	str	r3, [r1, #4]
 8002bdc:	4630      	mov	r0, r6
 8002bde:	f000 f82f 	bl	8002c40 <__malloc_unlock>
 8002be2:	f104 000b 	add.w	r0, r4, #11
 8002be6:	1d23      	adds	r3, r4, #4
 8002be8:	f020 0007 	bic.w	r0, r0, #7
 8002bec:	1ac2      	subs	r2, r0, r3
 8002bee:	bf1c      	itt	ne
 8002bf0:	1a1b      	subne	r3, r3, r0
 8002bf2:	50a3      	strne	r3, [r4, r2]
 8002bf4:	e7af      	b.n	8002b56 <_malloc_r+0x22>
 8002bf6:	6862      	ldr	r2, [r4, #4]
 8002bf8:	42a3      	cmp	r3, r4
 8002bfa:	bf0c      	ite	eq
 8002bfc:	f8c8 2000 	streq.w	r2, [r8]
 8002c00:	605a      	strne	r2, [r3, #4]
 8002c02:	e7eb      	b.n	8002bdc <_malloc_r+0xa8>
 8002c04:	4623      	mov	r3, r4
 8002c06:	6864      	ldr	r4, [r4, #4]
 8002c08:	e7ae      	b.n	8002b68 <_malloc_r+0x34>
 8002c0a:	463c      	mov	r4, r7
 8002c0c:	687f      	ldr	r7, [r7, #4]
 8002c0e:	e7b6      	b.n	8002b7e <_malloc_r+0x4a>
 8002c10:	461a      	mov	r2, r3
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	42a3      	cmp	r3, r4
 8002c16:	d1fb      	bne.n	8002c10 <_malloc_r+0xdc>
 8002c18:	2300      	movs	r3, #0
 8002c1a:	6053      	str	r3, [r2, #4]
 8002c1c:	e7de      	b.n	8002bdc <_malloc_r+0xa8>
 8002c1e:	230c      	movs	r3, #12
 8002c20:	6033      	str	r3, [r6, #0]
 8002c22:	4630      	mov	r0, r6
 8002c24:	f000 f80c 	bl	8002c40 <__malloc_unlock>
 8002c28:	e794      	b.n	8002b54 <_malloc_r+0x20>
 8002c2a:	6005      	str	r5, [r0, #0]
 8002c2c:	e7d6      	b.n	8002bdc <_malloc_r+0xa8>
 8002c2e:	bf00      	nop
 8002c30:	20001a5c 	.word	0x20001a5c

08002c34 <__malloc_lock>:
 8002c34:	4801      	ldr	r0, [pc, #4]	@ (8002c3c <__malloc_lock+0x8>)
 8002c36:	f7ff bf0e 	b.w	8002a56 <__retarget_lock_acquire_recursive>
 8002c3a:	bf00      	nop
 8002c3c:	20001a54 	.word	0x20001a54

08002c40 <__malloc_unlock>:
 8002c40:	4801      	ldr	r0, [pc, #4]	@ (8002c48 <__malloc_unlock+0x8>)
 8002c42:	f7ff bf09 	b.w	8002a58 <__retarget_lock_release_recursive>
 8002c46:	bf00      	nop
 8002c48:	20001a54 	.word	0x20001a54

08002c4c <__sfputc_r>:
 8002c4c:	6893      	ldr	r3, [r2, #8]
 8002c4e:	3b01      	subs	r3, #1
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	b410      	push	{r4}
 8002c54:	6093      	str	r3, [r2, #8]
 8002c56:	da08      	bge.n	8002c6a <__sfputc_r+0x1e>
 8002c58:	6994      	ldr	r4, [r2, #24]
 8002c5a:	42a3      	cmp	r3, r4
 8002c5c:	db01      	blt.n	8002c62 <__sfputc_r+0x16>
 8002c5e:	290a      	cmp	r1, #10
 8002c60:	d103      	bne.n	8002c6a <__sfputc_r+0x1e>
 8002c62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c66:	f7ff bde8 	b.w	800283a <__swbuf_r>
 8002c6a:	6813      	ldr	r3, [r2, #0]
 8002c6c:	1c58      	adds	r0, r3, #1
 8002c6e:	6010      	str	r0, [r2, #0]
 8002c70:	7019      	strb	r1, [r3, #0]
 8002c72:	4608      	mov	r0, r1
 8002c74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <__sfputs_r>:
 8002c7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c7c:	4606      	mov	r6, r0
 8002c7e:	460f      	mov	r7, r1
 8002c80:	4614      	mov	r4, r2
 8002c82:	18d5      	adds	r5, r2, r3
 8002c84:	42ac      	cmp	r4, r5
 8002c86:	d101      	bne.n	8002c8c <__sfputs_r+0x12>
 8002c88:	2000      	movs	r0, #0
 8002c8a:	e007      	b.n	8002c9c <__sfputs_r+0x22>
 8002c8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002c90:	463a      	mov	r2, r7
 8002c92:	4630      	mov	r0, r6
 8002c94:	f7ff ffda 	bl	8002c4c <__sfputc_r>
 8002c98:	1c43      	adds	r3, r0, #1
 8002c9a:	d1f3      	bne.n	8002c84 <__sfputs_r+0xa>
 8002c9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002ca0 <_vfiprintf_r>:
 8002ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002ca4:	460d      	mov	r5, r1
 8002ca6:	b09d      	sub	sp, #116	@ 0x74
 8002ca8:	4614      	mov	r4, r2
 8002caa:	4698      	mov	r8, r3
 8002cac:	4606      	mov	r6, r0
 8002cae:	b118      	cbz	r0, 8002cb8 <_vfiprintf_r+0x18>
 8002cb0:	6a03      	ldr	r3, [r0, #32]
 8002cb2:	b90b      	cbnz	r3, 8002cb8 <_vfiprintf_r+0x18>
 8002cb4:	f7ff fcd8 	bl	8002668 <__sinit>
 8002cb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002cba:	07d9      	lsls	r1, r3, #31
 8002cbc:	d405      	bmi.n	8002cca <_vfiprintf_r+0x2a>
 8002cbe:	89ab      	ldrh	r3, [r5, #12]
 8002cc0:	059a      	lsls	r2, r3, #22
 8002cc2:	d402      	bmi.n	8002cca <_vfiprintf_r+0x2a>
 8002cc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cc6:	f7ff fec6 	bl	8002a56 <__retarget_lock_acquire_recursive>
 8002cca:	89ab      	ldrh	r3, [r5, #12]
 8002ccc:	071b      	lsls	r3, r3, #28
 8002cce:	d501      	bpl.n	8002cd4 <_vfiprintf_r+0x34>
 8002cd0:	692b      	ldr	r3, [r5, #16]
 8002cd2:	b99b      	cbnz	r3, 8002cfc <_vfiprintf_r+0x5c>
 8002cd4:	4629      	mov	r1, r5
 8002cd6:	4630      	mov	r0, r6
 8002cd8:	f7ff fdee 	bl	80028b8 <__swsetup_r>
 8002cdc:	b170      	cbz	r0, 8002cfc <_vfiprintf_r+0x5c>
 8002cde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002ce0:	07dc      	lsls	r4, r3, #31
 8002ce2:	d504      	bpl.n	8002cee <_vfiprintf_r+0x4e>
 8002ce4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ce8:	b01d      	add	sp, #116	@ 0x74
 8002cea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002cee:	89ab      	ldrh	r3, [r5, #12]
 8002cf0:	0598      	lsls	r0, r3, #22
 8002cf2:	d4f7      	bmi.n	8002ce4 <_vfiprintf_r+0x44>
 8002cf4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002cf6:	f7ff feaf 	bl	8002a58 <__retarget_lock_release_recursive>
 8002cfa:	e7f3      	b.n	8002ce4 <_vfiprintf_r+0x44>
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	9309      	str	r3, [sp, #36]	@ 0x24
 8002d00:	2320      	movs	r3, #32
 8002d02:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002d06:	f8cd 800c 	str.w	r8, [sp, #12]
 8002d0a:	2330      	movs	r3, #48	@ 0x30
 8002d0c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8002ebc <_vfiprintf_r+0x21c>
 8002d10:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002d14:	f04f 0901 	mov.w	r9, #1
 8002d18:	4623      	mov	r3, r4
 8002d1a:	469a      	mov	sl, r3
 8002d1c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002d20:	b10a      	cbz	r2, 8002d26 <_vfiprintf_r+0x86>
 8002d22:	2a25      	cmp	r2, #37	@ 0x25
 8002d24:	d1f9      	bne.n	8002d1a <_vfiprintf_r+0x7a>
 8002d26:	ebba 0b04 	subs.w	fp, sl, r4
 8002d2a:	d00b      	beq.n	8002d44 <_vfiprintf_r+0xa4>
 8002d2c:	465b      	mov	r3, fp
 8002d2e:	4622      	mov	r2, r4
 8002d30:	4629      	mov	r1, r5
 8002d32:	4630      	mov	r0, r6
 8002d34:	f7ff ffa1 	bl	8002c7a <__sfputs_r>
 8002d38:	3001      	adds	r0, #1
 8002d3a:	f000 80a7 	beq.w	8002e8c <_vfiprintf_r+0x1ec>
 8002d3e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8002d40:	445a      	add	r2, fp
 8002d42:	9209      	str	r2, [sp, #36]	@ 0x24
 8002d44:	f89a 3000 	ldrb.w	r3, [sl]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 809f 	beq.w	8002e8c <_vfiprintf_r+0x1ec>
 8002d4e:	2300      	movs	r3, #0
 8002d50:	f04f 32ff 	mov.w	r2, #4294967295
 8002d54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002d58:	f10a 0a01 	add.w	sl, sl, #1
 8002d5c:	9304      	str	r3, [sp, #16]
 8002d5e:	9307      	str	r3, [sp, #28]
 8002d60:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002d64:	931a      	str	r3, [sp, #104]	@ 0x68
 8002d66:	4654      	mov	r4, sl
 8002d68:	2205      	movs	r2, #5
 8002d6a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d6e:	4853      	ldr	r0, [pc, #332]	@ (8002ebc <_vfiprintf_r+0x21c>)
 8002d70:	f7fd fa56 	bl	8000220 <memchr>
 8002d74:	9a04      	ldr	r2, [sp, #16]
 8002d76:	b9d8      	cbnz	r0, 8002db0 <_vfiprintf_r+0x110>
 8002d78:	06d1      	lsls	r1, r2, #27
 8002d7a:	bf44      	itt	mi
 8002d7c:	2320      	movmi	r3, #32
 8002d7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d82:	0713      	lsls	r3, r2, #28
 8002d84:	bf44      	itt	mi
 8002d86:	232b      	movmi	r3, #43	@ 0x2b
 8002d88:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002d8c:	f89a 3000 	ldrb.w	r3, [sl]
 8002d90:	2b2a      	cmp	r3, #42	@ 0x2a
 8002d92:	d015      	beq.n	8002dc0 <_vfiprintf_r+0x120>
 8002d94:	9a07      	ldr	r2, [sp, #28]
 8002d96:	4654      	mov	r4, sl
 8002d98:	2000      	movs	r0, #0
 8002d9a:	f04f 0c0a 	mov.w	ip, #10
 8002d9e:	4621      	mov	r1, r4
 8002da0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002da4:	3b30      	subs	r3, #48	@ 0x30
 8002da6:	2b09      	cmp	r3, #9
 8002da8:	d94b      	bls.n	8002e42 <_vfiprintf_r+0x1a2>
 8002daa:	b1b0      	cbz	r0, 8002dda <_vfiprintf_r+0x13a>
 8002dac:	9207      	str	r2, [sp, #28]
 8002dae:	e014      	b.n	8002dda <_vfiprintf_r+0x13a>
 8002db0:	eba0 0308 	sub.w	r3, r0, r8
 8002db4:	fa09 f303 	lsl.w	r3, r9, r3
 8002db8:	4313      	orrs	r3, r2
 8002dba:	9304      	str	r3, [sp, #16]
 8002dbc:	46a2      	mov	sl, r4
 8002dbe:	e7d2      	b.n	8002d66 <_vfiprintf_r+0xc6>
 8002dc0:	9b03      	ldr	r3, [sp, #12]
 8002dc2:	1d19      	adds	r1, r3, #4
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	9103      	str	r1, [sp, #12]
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	bfbb      	ittet	lt
 8002dcc:	425b      	neglt	r3, r3
 8002dce:	f042 0202 	orrlt.w	r2, r2, #2
 8002dd2:	9307      	strge	r3, [sp, #28]
 8002dd4:	9307      	strlt	r3, [sp, #28]
 8002dd6:	bfb8      	it	lt
 8002dd8:	9204      	strlt	r2, [sp, #16]
 8002dda:	7823      	ldrb	r3, [r4, #0]
 8002ddc:	2b2e      	cmp	r3, #46	@ 0x2e
 8002dde:	d10a      	bne.n	8002df6 <_vfiprintf_r+0x156>
 8002de0:	7863      	ldrb	r3, [r4, #1]
 8002de2:	2b2a      	cmp	r3, #42	@ 0x2a
 8002de4:	d132      	bne.n	8002e4c <_vfiprintf_r+0x1ac>
 8002de6:	9b03      	ldr	r3, [sp, #12]
 8002de8:	1d1a      	adds	r2, r3, #4
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	9203      	str	r2, [sp, #12]
 8002dee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002df2:	3402      	adds	r4, #2
 8002df4:	9305      	str	r3, [sp, #20]
 8002df6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8002ecc <_vfiprintf_r+0x22c>
 8002dfa:	7821      	ldrb	r1, [r4, #0]
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	4650      	mov	r0, sl
 8002e00:	f7fd fa0e 	bl	8000220 <memchr>
 8002e04:	b138      	cbz	r0, 8002e16 <_vfiprintf_r+0x176>
 8002e06:	9b04      	ldr	r3, [sp, #16]
 8002e08:	eba0 000a 	sub.w	r0, r0, sl
 8002e0c:	2240      	movs	r2, #64	@ 0x40
 8002e0e:	4082      	lsls	r2, r0
 8002e10:	4313      	orrs	r3, r2
 8002e12:	3401      	adds	r4, #1
 8002e14:	9304      	str	r3, [sp, #16]
 8002e16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002e1a:	4829      	ldr	r0, [pc, #164]	@ (8002ec0 <_vfiprintf_r+0x220>)
 8002e1c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002e20:	2206      	movs	r2, #6
 8002e22:	f7fd f9fd 	bl	8000220 <memchr>
 8002e26:	2800      	cmp	r0, #0
 8002e28:	d03f      	beq.n	8002eaa <_vfiprintf_r+0x20a>
 8002e2a:	4b26      	ldr	r3, [pc, #152]	@ (8002ec4 <_vfiprintf_r+0x224>)
 8002e2c:	bb1b      	cbnz	r3, 8002e76 <_vfiprintf_r+0x1d6>
 8002e2e:	9b03      	ldr	r3, [sp, #12]
 8002e30:	3307      	adds	r3, #7
 8002e32:	f023 0307 	bic.w	r3, r3, #7
 8002e36:	3308      	adds	r3, #8
 8002e38:	9303      	str	r3, [sp, #12]
 8002e3a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002e3c:	443b      	add	r3, r7
 8002e3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8002e40:	e76a      	b.n	8002d18 <_vfiprintf_r+0x78>
 8002e42:	fb0c 3202 	mla	r2, ip, r2, r3
 8002e46:	460c      	mov	r4, r1
 8002e48:	2001      	movs	r0, #1
 8002e4a:	e7a8      	b.n	8002d9e <_vfiprintf_r+0xfe>
 8002e4c:	2300      	movs	r3, #0
 8002e4e:	3401      	adds	r4, #1
 8002e50:	9305      	str	r3, [sp, #20]
 8002e52:	4619      	mov	r1, r3
 8002e54:	f04f 0c0a 	mov.w	ip, #10
 8002e58:	4620      	mov	r0, r4
 8002e5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002e5e:	3a30      	subs	r2, #48	@ 0x30
 8002e60:	2a09      	cmp	r2, #9
 8002e62:	d903      	bls.n	8002e6c <_vfiprintf_r+0x1cc>
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d0c6      	beq.n	8002df6 <_vfiprintf_r+0x156>
 8002e68:	9105      	str	r1, [sp, #20]
 8002e6a:	e7c4      	b.n	8002df6 <_vfiprintf_r+0x156>
 8002e6c:	fb0c 2101 	mla	r1, ip, r1, r2
 8002e70:	4604      	mov	r4, r0
 8002e72:	2301      	movs	r3, #1
 8002e74:	e7f0      	b.n	8002e58 <_vfiprintf_r+0x1b8>
 8002e76:	ab03      	add	r3, sp, #12
 8002e78:	9300      	str	r3, [sp, #0]
 8002e7a:	462a      	mov	r2, r5
 8002e7c:	4b12      	ldr	r3, [pc, #72]	@ (8002ec8 <_vfiprintf_r+0x228>)
 8002e7e:	a904      	add	r1, sp, #16
 8002e80:	4630      	mov	r0, r6
 8002e82:	f3af 8000 	nop.w
 8002e86:	4607      	mov	r7, r0
 8002e88:	1c78      	adds	r0, r7, #1
 8002e8a:	d1d6      	bne.n	8002e3a <_vfiprintf_r+0x19a>
 8002e8c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002e8e:	07d9      	lsls	r1, r3, #31
 8002e90:	d405      	bmi.n	8002e9e <_vfiprintf_r+0x1fe>
 8002e92:	89ab      	ldrh	r3, [r5, #12]
 8002e94:	059a      	lsls	r2, r3, #22
 8002e96:	d402      	bmi.n	8002e9e <_vfiprintf_r+0x1fe>
 8002e98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002e9a:	f7ff fddd 	bl	8002a58 <__retarget_lock_release_recursive>
 8002e9e:	89ab      	ldrh	r3, [r5, #12]
 8002ea0:	065b      	lsls	r3, r3, #25
 8002ea2:	f53f af1f 	bmi.w	8002ce4 <_vfiprintf_r+0x44>
 8002ea6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002ea8:	e71e      	b.n	8002ce8 <_vfiprintf_r+0x48>
 8002eaa:	ab03      	add	r3, sp, #12
 8002eac:	9300      	str	r3, [sp, #0]
 8002eae:	462a      	mov	r2, r5
 8002eb0:	4b05      	ldr	r3, [pc, #20]	@ (8002ec8 <_vfiprintf_r+0x228>)
 8002eb2:	a904      	add	r1, sp, #16
 8002eb4:	4630      	mov	r0, r6
 8002eb6:	f000 f879 	bl	8002fac <_printf_i>
 8002eba:	e7e4      	b.n	8002e86 <_vfiprintf_r+0x1e6>
 8002ebc:	080034a8 	.word	0x080034a8
 8002ec0:	080034b2 	.word	0x080034b2
 8002ec4:	00000000 	.word	0x00000000
 8002ec8:	08002c7b 	.word	0x08002c7b
 8002ecc:	080034ae 	.word	0x080034ae

08002ed0 <_printf_common>:
 8002ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002ed4:	4616      	mov	r6, r2
 8002ed6:	4698      	mov	r8, r3
 8002ed8:	688a      	ldr	r2, [r1, #8]
 8002eda:	690b      	ldr	r3, [r1, #16]
 8002edc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	bfb8      	it	lt
 8002ee4:	4613      	movlt	r3, r2
 8002ee6:	6033      	str	r3, [r6, #0]
 8002ee8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002eec:	4607      	mov	r7, r0
 8002eee:	460c      	mov	r4, r1
 8002ef0:	b10a      	cbz	r2, 8002ef6 <_printf_common+0x26>
 8002ef2:	3301      	adds	r3, #1
 8002ef4:	6033      	str	r3, [r6, #0]
 8002ef6:	6823      	ldr	r3, [r4, #0]
 8002ef8:	0699      	lsls	r1, r3, #26
 8002efa:	bf42      	ittt	mi
 8002efc:	6833      	ldrmi	r3, [r6, #0]
 8002efe:	3302      	addmi	r3, #2
 8002f00:	6033      	strmi	r3, [r6, #0]
 8002f02:	6825      	ldr	r5, [r4, #0]
 8002f04:	f015 0506 	ands.w	r5, r5, #6
 8002f08:	d106      	bne.n	8002f18 <_printf_common+0x48>
 8002f0a:	f104 0a19 	add.w	sl, r4, #25
 8002f0e:	68e3      	ldr	r3, [r4, #12]
 8002f10:	6832      	ldr	r2, [r6, #0]
 8002f12:	1a9b      	subs	r3, r3, r2
 8002f14:	42ab      	cmp	r3, r5
 8002f16:	dc26      	bgt.n	8002f66 <_printf_common+0x96>
 8002f18:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	3b00      	subs	r3, #0
 8002f20:	bf18      	it	ne
 8002f22:	2301      	movne	r3, #1
 8002f24:	0692      	lsls	r2, r2, #26
 8002f26:	d42b      	bmi.n	8002f80 <_printf_common+0xb0>
 8002f28:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002f2c:	4641      	mov	r1, r8
 8002f2e:	4638      	mov	r0, r7
 8002f30:	47c8      	blx	r9
 8002f32:	3001      	adds	r0, #1
 8002f34:	d01e      	beq.n	8002f74 <_printf_common+0xa4>
 8002f36:	6823      	ldr	r3, [r4, #0]
 8002f38:	6922      	ldr	r2, [r4, #16]
 8002f3a:	f003 0306 	and.w	r3, r3, #6
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	bf02      	ittt	eq
 8002f42:	68e5      	ldreq	r5, [r4, #12]
 8002f44:	6833      	ldreq	r3, [r6, #0]
 8002f46:	1aed      	subeq	r5, r5, r3
 8002f48:	68a3      	ldr	r3, [r4, #8]
 8002f4a:	bf0c      	ite	eq
 8002f4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002f50:	2500      	movne	r5, #0
 8002f52:	4293      	cmp	r3, r2
 8002f54:	bfc4      	itt	gt
 8002f56:	1a9b      	subgt	r3, r3, r2
 8002f58:	18ed      	addgt	r5, r5, r3
 8002f5a:	2600      	movs	r6, #0
 8002f5c:	341a      	adds	r4, #26
 8002f5e:	42b5      	cmp	r5, r6
 8002f60:	d11a      	bne.n	8002f98 <_printf_common+0xc8>
 8002f62:	2000      	movs	r0, #0
 8002f64:	e008      	b.n	8002f78 <_printf_common+0xa8>
 8002f66:	2301      	movs	r3, #1
 8002f68:	4652      	mov	r2, sl
 8002f6a:	4641      	mov	r1, r8
 8002f6c:	4638      	mov	r0, r7
 8002f6e:	47c8      	blx	r9
 8002f70:	3001      	adds	r0, #1
 8002f72:	d103      	bne.n	8002f7c <_printf_common+0xac>
 8002f74:	f04f 30ff 	mov.w	r0, #4294967295
 8002f78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002f7c:	3501      	adds	r5, #1
 8002f7e:	e7c6      	b.n	8002f0e <_printf_common+0x3e>
 8002f80:	18e1      	adds	r1, r4, r3
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	2030      	movs	r0, #48	@ 0x30
 8002f86:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002f8a:	4422      	add	r2, r4
 8002f8c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002f90:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002f94:	3302      	adds	r3, #2
 8002f96:	e7c7      	b.n	8002f28 <_printf_common+0x58>
 8002f98:	2301      	movs	r3, #1
 8002f9a:	4622      	mov	r2, r4
 8002f9c:	4641      	mov	r1, r8
 8002f9e:	4638      	mov	r0, r7
 8002fa0:	47c8      	blx	r9
 8002fa2:	3001      	adds	r0, #1
 8002fa4:	d0e6      	beq.n	8002f74 <_printf_common+0xa4>
 8002fa6:	3601      	adds	r6, #1
 8002fa8:	e7d9      	b.n	8002f5e <_printf_common+0x8e>
	...

08002fac <_printf_i>:
 8002fac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002fb0:	7e0f      	ldrb	r7, [r1, #24]
 8002fb2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002fb4:	2f78      	cmp	r7, #120	@ 0x78
 8002fb6:	4691      	mov	r9, r2
 8002fb8:	4680      	mov	r8, r0
 8002fba:	460c      	mov	r4, r1
 8002fbc:	469a      	mov	sl, r3
 8002fbe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002fc2:	d807      	bhi.n	8002fd4 <_printf_i+0x28>
 8002fc4:	2f62      	cmp	r7, #98	@ 0x62
 8002fc6:	d80a      	bhi.n	8002fde <_printf_i+0x32>
 8002fc8:	2f00      	cmp	r7, #0
 8002fca:	f000 80d2 	beq.w	8003172 <_printf_i+0x1c6>
 8002fce:	2f58      	cmp	r7, #88	@ 0x58
 8002fd0:	f000 80b9 	beq.w	8003146 <_printf_i+0x19a>
 8002fd4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002fd8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002fdc:	e03a      	b.n	8003054 <_printf_i+0xa8>
 8002fde:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002fe2:	2b15      	cmp	r3, #21
 8002fe4:	d8f6      	bhi.n	8002fd4 <_printf_i+0x28>
 8002fe6:	a101      	add	r1, pc, #4	@ (adr r1, 8002fec <_printf_i+0x40>)
 8002fe8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002fec:	08003045 	.word	0x08003045
 8002ff0:	08003059 	.word	0x08003059
 8002ff4:	08002fd5 	.word	0x08002fd5
 8002ff8:	08002fd5 	.word	0x08002fd5
 8002ffc:	08002fd5 	.word	0x08002fd5
 8003000:	08002fd5 	.word	0x08002fd5
 8003004:	08003059 	.word	0x08003059
 8003008:	08002fd5 	.word	0x08002fd5
 800300c:	08002fd5 	.word	0x08002fd5
 8003010:	08002fd5 	.word	0x08002fd5
 8003014:	08002fd5 	.word	0x08002fd5
 8003018:	08003159 	.word	0x08003159
 800301c:	08003083 	.word	0x08003083
 8003020:	08003113 	.word	0x08003113
 8003024:	08002fd5 	.word	0x08002fd5
 8003028:	08002fd5 	.word	0x08002fd5
 800302c:	0800317b 	.word	0x0800317b
 8003030:	08002fd5 	.word	0x08002fd5
 8003034:	08003083 	.word	0x08003083
 8003038:	08002fd5 	.word	0x08002fd5
 800303c:	08002fd5 	.word	0x08002fd5
 8003040:	0800311b 	.word	0x0800311b
 8003044:	6833      	ldr	r3, [r6, #0]
 8003046:	1d1a      	adds	r2, r3, #4
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	6032      	str	r2, [r6, #0]
 800304c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003050:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003054:	2301      	movs	r3, #1
 8003056:	e09d      	b.n	8003194 <_printf_i+0x1e8>
 8003058:	6833      	ldr	r3, [r6, #0]
 800305a:	6820      	ldr	r0, [r4, #0]
 800305c:	1d19      	adds	r1, r3, #4
 800305e:	6031      	str	r1, [r6, #0]
 8003060:	0606      	lsls	r6, r0, #24
 8003062:	d501      	bpl.n	8003068 <_printf_i+0xbc>
 8003064:	681d      	ldr	r5, [r3, #0]
 8003066:	e003      	b.n	8003070 <_printf_i+0xc4>
 8003068:	0645      	lsls	r5, r0, #25
 800306a:	d5fb      	bpl.n	8003064 <_printf_i+0xb8>
 800306c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003070:	2d00      	cmp	r5, #0
 8003072:	da03      	bge.n	800307c <_printf_i+0xd0>
 8003074:	232d      	movs	r3, #45	@ 0x2d
 8003076:	426d      	negs	r5, r5
 8003078:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800307c:	4859      	ldr	r0, [pc, #356]	@ (80031e4 <_printf_i+0x238>)
 800307e:	230a      	movs	r3, #10
 8003080:	e011      	b.n	80030a6 <_printf_i+0xfa>
 8003082:	6821      	ldr	r1, [r4, #0]
 8003084:	6833      	ldr	r3, [r6, #0]
 8003086:	0608      	lsls	r0, r1, #24
 8003088:	f853 5b04 	ldr.w	r5, [r3], #4
 800308c:	d402      	bmi.n	8003094 <_printf_i+0xe8>
 800308e:	0649      	lsls	r1, r1, #25
 8003090:	bf48      	it	mi
 8003092:	b2ad      	uxthmi	r5, r5
 8003094:	2f6f      	cmp	r7, #111	@ 0x6f
 8003096:	4853      	ldr	r0, [pc, #332]	@ (80031e4 <_printf_i+0x238>)
 8003098:	6033      	str	r3, [r6, #0]
 800309a:	bf14      	ite	ne
 800309c:	230a      	movne	r3, #10
 800309e:	2308      	moveq	r3, #8
 80030a0:	2100      	movs	r1, #0
 80030a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80030a6:	6866      	ldr	r6, [r4, #4]
 80030a8:	60a6      	str	r6, [r4, #8]
 80030aa:	2e00      	cmp	r6, #0
 80030ac:	bfa2      	ittt	ge
 80030ae:	6821      	ldrge	r1, [r4, #0]
 80030b0:	f021 0104 	bicge.w	r1, r1, #4
 80030b4:	6021      	strge	r1, [r4, #0]
 80030b6:	b90d      	cbnz	r5, 80030bc <_printf_i+0x110>
 80030b8:	2e00      	cmp	r6, #0
 80030ba:	d04b      	beq.n	8003154 <_printf_i+0x1a8>
 80030bc:	4616      	mov	r6, r2
 80030be:	fbb5 f1f3 	udiv	r1, r5, r3
 80030c2:	fb03 5711 	mls	r7, r3, r1, r5
 80030c6:	5dc7      	ldrb	r7, [r0, r7]
 80030c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80030cc:	462f      	mov	r7, r5
 80030ce:	42bb      	cmp	r3, r7
 80030d0:	460d      	mov	r5, r1
 80030d2:	d9f4      	bls.n	80030be <_printf_i+0x112>
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d10b      	bne.n	80030f0 <_printf_i+0x144>
 80030d8:	6823      	ldr	r3, [r4, #0]
 80030da:	07df      	lsls	r7, r3, #31
 80030dc:	d508      	bpl.n	80030f0 <_printf_i+0x144>
 80030de:	6923      	ldr	r3, [r4, #16]
 80030e0:	6861      	ldr	r1, [r4, #4]
 80030e2:	4299      	cmp	r1, r3
 80030e4:	bfde      	ittt	le
 80030e6:	2330      	movle	r3, #48	@ 0x30
 80030e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80030ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80030f0:	1b92      	subs	r2, r2, r6
 80030f2:	6122      	str	r2, [r4, #16]
 80030f4:	f8cd a000 	str.w	sl, [sp]
 80030f8:	464b      	mov	r3, r9
 80030fa:	aa03      	add	r2, sp, #12
 80030fc:	4621      	mov	r1, r4
 80030fe:	4640      	mov	r0, r8
 8003100:	f7ff fee6 	bl	8002ed0 <_printf_common>
 8003104:	3001      	adds	r0, #1
 8003106:	d14a      	bne.n	800319e <_printf_i+0x1f2>
 8003108:	f04f 30ff 	mov.w	r0, #4294967295
 800310c:	b004      	add	sp, #16
 800310e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003112:	6823      	ldr	r3, [r4, #0]
 8003114:	f043 0320 	orr.w	r3, r3, #32
 8003118:	6023      	str	r3, [r4, #0]
 800311a:	4833      	ldr	r0, [pc, #204]	@ (80031e8 <_printf_i+0x23c>)
 800311c:	2778      	movs	r7, #120	@ 0x78
 800311e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003122:	6823      	ldr	r3, [r4, #0]
 8003124:	6831      	ldr	r1, [r6, #0]
 8003126:	061f      	lsls	r7, r3, #24
 8003128:	f851 5b04 	ldr.w	r5, [r1], #4
 800312c:	d402      	bmi.n	8003134 <_printf_i+0x188>
 800312e:	065f      	lsls	r7, r3, #25
 8003130:	bf48      	it	mi
 8003132:	b2ad      	uxthmi	r5, r5
 8003134:	6031      	str	r1, [r6, #0]
 8003136:	07d9      	lsls	r1, r3, #31
 8003138:	bf44      	itt	mi
 800313a:	f043 0320 	orrmi.w	r3, r3, #32
 800313e:	6023      	strmi	r3, [r4, #0]
 8003140:	b11d      	cbz	r5, 800314a <_printf_i+0x19e>
 8003142:	2310      	movs	r3, #16
 8003144:	e7ac      	b.n	80030a0 <_printf_i+0xf4>
 8003146:	4827      	ldr	r0, [pc, #156]	@ (80031e4 <_printf_i+0x238>)
 8003148:	e7e9      	b.n	800311e <_printf_i+0x172>
 800314a:	6823      	ldr	r3, [r4, #0]
 800314c:	f023 0320 	bic.w	r3, r3, #32
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	e7f6      	b.n	8003142 <_printf_i+0x196>
 8003154:	4616      	mov	r6, r2
 8003156:	e7bd      	b.n	80030d4 <_printf_i+0x128>
 8003158:	6833      	ldr	r3, [r6, #0]
 800315a:	6825      	ldr	r5, [r4, #0]
 800315c:	6961      	ldr	r1, [r4, #20]
 800315e:	1d18      	adds	r0, r3, #4
 8003160:	6030      	str	r0, [r6, #0]
 8003162:	062e      	lsls	r6, r5, #24
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	d501      	bpl.n	800316c <_printf_i+0x1c0>
 8003168:	6019      	str	r1, [r3, #0]
 800316a:	e002      	b.n	8003172 <_printf_i+0x1c6>
 800316c:	0668      	lsls	r0, r5, #25
 800316e:	d5fb      	bpl.n	8003168 <_printf_i+0x1bc>
 8003170:	8019      	strh	r1, [r3, #0]
 8003172:	2300      	movs	r3, #0
 8003174:	6123      	str	r3, [r4, #16]
 8003176:	4616      	mov	r6, r2
 8003178:	e7bc      	b.n	80030f4 <_printf_i+0x148>
 800317a:	6833      	ldr	r3, [r6, #0]
 800317c:	1d1a      	adds	r2, r3, #4
 800317e:	6032      	str	r2, [r6, #0]
 8003180:	681e      	ldr	r6, [r3, #0]
 8003182:	6862      	ldr	r2, [r4, #4]
 8003184:	2100      	movs	r1, #0
 8003186:	4630      	mov	r0, r6
 8003188:	f7fd f84a 	bl	8000220 <memchr>
 800318c:	b108      	cbz	r0, 8003192 <_printf_i+0x1e6>
 800318e:	1b80      	subs	r0, r0, r6
 8003190:	6060      	str	r0, [r4, #4]
 8003192:	6863      	ldr	r3, [r4, #4]
 8003194:	6123      	str	r3, [r4, #16]
 8003196:	2300      	movs	r3, #0
 8003198:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800319c:	e7aa      	b.n	80030f4 <_printf_i+0x148>
 800319e:	6923      	ldr	r3, [r4, #16]
 80031a0:	4632      	mov	r2, r6
 80031a2:	4649      	mov	r1, r9
 80031a4:	4640      	mov	r0, r8
 80031a6:	47d0      	blx	sl
 80031a8:	3001      	adds	r0, #1
 80031aa:	d0ad      	beq.n	8003108 <_printf_i+0x15c>
 80031ac:	6823      	ldr	r3, [r4, #0]
 80031ae:	079b      	lsls	r3, r3, #30
 80031b0:	d413      	bmi.n	80031da <_printf_i+0x22e>
 80031b2:	68e0      	ldr	r0, [r4, #12]
 80031b4:	9b03      	ldr	r3, [sp, #12]
 80031b6:	4298      	cmp	r0, r3
 80031b8:	bfb8      	it	lt
 80031ba:	4618      	movlt	r0, r3
 80031bc:	e7a6      	b.n	800310c <_printf_i+0x160>
 80031be:	2301      	movs	r3, #1
 80031c0:	4632      	mov	r2, r6
 80031c2:	4649      	mov	r1, r9
 80031c4:	4640      	mov	r0, r8
 80031c6:	47d0      	blx	sl
 80031c8:	3001      	adds	r0, #1
 80031ca:	d09d      	beq.n	8003108 <_printf_i+0x15c>
 80031cc:	3501      	adds	r5, #1
 80031ce:	68e3      	ldr	r3, [r4, #12]
 80031d0:	9903      	ldr	r1, [sp, #12]
 80031d2:	1a5b      	subs	r3, r3, r1
 80031d4:	42ab      	cmp	r3, r5
 80031d6:	dcf2      	bgt.n	80031be <_printf_i+0x212>
 80031d8:	e7eb      	b.n	80031b2 <_printf_i+0x206>
 80031da:	2500      	movs	r5, #0
 80031dc:	f104 0619 	add.w	r6, r4, #25
 80031e0:	e7f5      	b.n	80031ce <_printf_i+0x222>
 80031e2:	bf00      	nop
 80031e4:	080034b9 	.word	0x080034b9
 80031e8:	080034ca 	.word	0x080034ca

080031ec <__sflush_r>:
 80031ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80031f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80031f4:	0716      	lsls	r6, r2, #28
 80031f6:	4605      	mov	r5, r0
 80031f8:	460c      	mov	r4, r1
 80031fa:	d454      	bmi.n	80032a6 <__sflush_r+0xba>
 80031fc:	684b      	ldr	r3, [r1, #4]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	dc02      	bgt.n	8003208 <__sflush_r+0x1c>
 8003202:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003204:	2b00      	cmp	r3, #0
 8003206:	dd48      	ble.n	800329a <__sflush_r+0xae>
 8003208:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800320a:	2e00      	cmp	r6, #0
 800320c:	d045      	beq.n	800329a <__sflush_r+0xae>
 800320e:	2300      	movs	r3, #0
 8003210:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003214:	682f      	ldr	r7, [r5, #0]
 8003216:	6a21      	ldr	r1, [r4, #32]
 8003218:	602b      	str	r3, [r5, #0]
 800321a:	d030      	beq.n	800327e <__sflush_r+0x92>
 800321c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800321e:	89a3      	ldrh	r3, [r4, #12]
 8003220:	0759      	lsls	r1, r3, #29
 8003222:	d505      	bpl.n	8003230 <__sflush_r+0x44>
 8003224:	6863      	ldr	r3, [r4, #4]
 8003226:	1ad2      	subs	r2, r2, r3
 8003228:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800322a:	b10b      	cbz	r3, 8003230 <__sflush_r+0x44>
 800322c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800322e:	1ad2      	subs	r2, r2, r3
 8003230:	2300      	movs	r3, #0
 8003232:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003234:	6a21      	ldr	r1, [r4, #32]
 8003236:	4628      	mov	r0, r5
 8003238:	47b0      	blx	r6
 800323a:	1c43      	adds	r3, r0, #1
 800323c:	89a3      	ldrh	r3, [r4, #12]
 800323e:	d106      	bne.n	800324e <__sflush_r+0x62>
 8003240:	6829      	ldr	r1, [r5, #0]
 8003242:	291d      	cmp	r1, #29
 8003244:	d82b      	bhi.n	800329e <__sflush_r+0xb2>
 8003246:	4a2a      	ldr	r2, [pc, #168]	@ (80032f0 <__sflush_r+0x104>)
 8003248:	410a      	asrs	r2, r1
 800324a:	07d6      	lsls	r6, r2, #31
 800324c:	d427      	bmi.n	800329e <__sflush_r+0xb2>
 800324e:	2200      	movs	r2, #0
 8003250:	6062      	str	r2, [r4, #4]
 8003252:	04d9      	lsls	r1, r3, #19
 8003254:	6922      	ldr	r2, [r4, #16]
 8003256:	6022      	str	r2, [r4, #0]
 8003258:	d504      	bpl.n	8003264 <__sflush_r+0x78>
 800325a:	1c42      	adds	r2, r0, #1
 800325c:	d101      	bne.n	8003262 <__sflush_r+0x76>
 800325e:	682b      	ldr	r3, [r5, #0]
 8003260:	b903      	cbnz	r3, 8003264 <__sflush_r+0x78>
 8003262:	6560      	str	r0, [r4, #84]	@ 0x54
 8003264:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003266:	602f      	str	r7, [r5, #0]
 8003268:	b1b9      	cbz	r1, 800329a <__sflush_r+0xae>
 800326a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800326e:	4299      	cmp	r1, r3
 8003270:	d002      	beq.n	8003278 <__sflush_r+0x8c>
 8003272:	4628      	mov	r0, r5
 8003274:	f7ff fbf2 	bl	8002a5c <_free_r>
 8003278:	2300      	movs	r3, #0
 800327a:	6363      	str	r3, [r4, #52]	@ 0x34
 800327c:	e00d      	b.n	800329a <__sflush_r+0xae>
 800327e:	2301      	movs	r3, #1
 8003280:	4628      	mov	r0, r5
 8003282:	47b0      	blx	r6
 8003284:	4602      	mov	r2, r0
 8003286:	1c50      	adds	r0, r2, #1
 8003288:	d1c9      	bne.n	800321e <__sflush_r+0x32>
 800328a:	682b      	ldr	r3, [r5, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d0c6      	beq.n	800321e <__sflush_r+0x32>
 8003290:	2b1d      	cmp	r3, #29
 8003292:	d001      	beq.n	8003298 <__sflush_r+0xac>
 8003294:	2b16      	cmp	r3, #22
 8003296:	d11e      	bne.n	80032d6 <__sflush_r+0xea>
 8003298:	602f      	str	r7, [r5, #0]
 800329a:	2000      	movs	r0, #0
 800329c:	e022      	b.n	80032e4 <__sflush_r+0xf8>
 800329e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032a2:	b21b      	sxth	r3, r3
 80032a4:	e01b      	b.n	80032de <__sflush_r+0xf2>
 80032a6:	690f      	ldr	r7, [r1, #16]
 80032a8:	2f00      	cmp	r7, #0
 80032aa:	d0f6      	beq.n	800329a <__sflush_r+0xae>
 80032ac:	0793      	lsls	r3, r2, #30
 80032ae:	680e      	ldr	r6, [r1, #0]
 80032b0:	bf08      	it	eq
 80032b2:	694b      	ldreq	r3, [r1, #20]
 80032b4:	600f      	str	r7, [r1, #0]
 80032b6:	bf18      	it	ne
 80032b8:	2300      	movne	r3, #0
 80032ba:	eba6 0807 	sub.w	r8, r6, r7
 80032be:	608b      	str	r3, [r1, #8]
 80032c0:	f1b8 0f00 	cmp.w	r8, #0
 80032c4:	dde9      	ble.n	800329a <__sflush_r+0xae>
 80032c6:	6a21      	ldr	r1, [r4, #32]
 80032c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80032ca:	4643      	mov	r3, r8
 80032cc:	463a      	mov	r2, r7
 80032ce:	4628      	mov	r0, r5
 80032d0:	47b0      	blx	r6
 80032d2:	2800      	cmp	r0, #0
 80032d4:	dc08      	bgt.n	80032e8 <__sflush_r+0xfc>
 80032d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032de:	81a3      	strh	r3, [r4, #12]
 80032e0:	f04f 30ff 	mov.w	r0, #4294967295
 80032e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80032e8:	4407      	add	r7, r0
 80032ea:	eba8 0800 	sub.w	r8, r8, r0
 80032ee:	e7e7      	b.n	80032c0 <__sflush_r+0xd4>
 80032f0:	dfbffffe 	.word	0xdfbffffe

080032f4 <_fflush_r>:
 80032f4:	b538      	push	{r3, r4, r5, lr}
 80032f6:	690b      	ldr	r3, [r1, #16]
 80032f8:	4605      	mov	r5, r0
 80032fa:	460c      	mov	r4, r1
 80032fc:	b913      	cbnz	r3, 8003304 <_fflush_r+0x10>
 80032fe:	2500      	movs	r5, #0
 8003300:	4628      	mov	r0, r5
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	b118      	cbz	r0, 800330e <_fflush_r+0x1a>
 8003306:	6a03      	ldr	r3, [r0, #32]
 8003308:	b90b      	cbnz	r3, 800330e <_fflush_r+0x1a>
 800330a:	f7ff f9ad 	bl	8002668 <__sinit>
 800330e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d0f3      	beq.n	80032fe <_fflush_r+0xa>
 8003316:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003318:	07d0      	lsls	r0, r2, #31
 800331a:	d404      	bmi.n	8003326 <_fflush_r+0x32>
 800331c:	0599      	lsls	r1, r3, #22
 800331e:	d402      	bmi.n	8003326 <_fflush_r+0x32>
 8003320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003322:	f7ff fb98 	bl	8002a56 <__retarget_lock_acquire_recursive>
 8003326:	4628      	mov	r0, r5
 8003328:	4621      	mov	r1, r4
 800332a:	f7ff ff5f 	bl	80031ec <__sflush_r>
 800332e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003330:	07da      	lsls	r2, r3, #31
 8003332:	4605      	mov	r5, r0
 8003334:	d4e4      	bmi.n	8003300 <_fflush_r+0xc>
 8003336:	89a3      	ldrh	r3, [r4, #12]
 8003338:	059b      	lsls	r3, r3, #22
 800333a:	d4e1      	bmi.n	8003300 <_fflush_r+0xc>
 800333c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800333e:	f7ff fb8b 	bl	8002a58 <__retarget_lock_release_recursive>
 8003342:	e7dd      	b.n	8003300 <_fflush_r+0xc>

08003344 <__swhatbuf_r>:
 8003344:	b570      	push	{r4, r5, r6, lr}
 8003346:	460c      	mov	r4, r1
 8003348:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800334c:	2900      	cmp	r1, #0
 800334e:	b096      	sub	sp, #88	@ 0x58
 8003350:	4615      	mov	r5, r2
 8003352:	461e      	mov	r6, r3
 8003354:	da0d      	bge.n	8003372 <__swhatbuf_r+0x2e>
 8003356:	89a3      	ldrh	r3, [r4, #12]
 8003358:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800335c:	f04f 0100 	mov.w	r1, #0
 8003360:	bf14      	ite	ne
 8003362:	2340      	movne	r3, #64	@ 0x40
 8003364:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003368:	2000      	movs	r0, #0
 800336a:	6031      	str	r1, [r6, #0]
 800336c:	602b      	str	r3, [r5, #0]
 800336e:	b016      	add	sp, #88	@ 0x58
 8003370:	bd70      	pop	{r4, r5, r6, pc}
 8003372:	466a      	mov	r2, sp
 8003374:	f000 f848 	bl	8003408 <_fstat_r>
 8003378:	2800      	cmp	r0, #0
 800337a:	dbec      	blt.n	8003356 <__swhatbuf_r+0x12>
 800337c:	9901      	ldr	r1, [sp, #4]
 800337e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003382:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003386:	4259      	negs	r1, r3
 8003388:	4159      	adcs	r1, r3
 800338a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800338e:	e7eb      	b.n	8003368 <__swhatbuf_r+0x24>

08003390 <__smakebuf_r>:
 8003390:	898b      	ldrh	r3, [r1, #12]
 8003392:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003394:	079d      	lsls	r5, r3, #30
 8003396:	4606      	mov	r6, r0
 8003398:	460c      	mov	r4, r1
 800339a:	d507      	bpl.n	80033ac <__smakebuf_r+0x1c>
 800339c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80033a0:	6023      	str	r3, [r4, #0]
 80033a2:	6123      	str	r3, [r4, #16]
 80033a4:	2301      	movs	r3, #1
 80033a6:	6163      	str	r3, [r4, #20]
 80033a8:	b003      	add	sp, #12
 80033aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80033ac:	ab01      	add	r3, sp, #4
 80033ae:	466a      	mov	r2, sp
 80033b0:	f7ff ffc8 	bl	8003344 <__swhatbuf_r>
 80033b4:	9f00      	ldr	r7, [sp, #0]
 80033b6:	4605      	mov	r5, r0
 80033b8:	4639      	mov	r1, r7
 80033ba:	4630      	mov	r0, r6
 80033bc:	f7ff fbba 	bl	8002b34 <_malloc_r>
 80033c0:	b948      	cbnz	r0, 80033d6 <__smakebuf_r+0x46>
 80033c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80033c6:	059a      	lsls	r2, r3, #22
 80033c8:	d4ee      	bmi.n	80033a8 <__smakebuf_r+0x18>
 80033ca:	f023 0303 	bic.w	r3, r3, #3
 80033ce:	f043 0302 	orr.w	r3, r3, #2
 80033d2:	81a3      	strh	r3, [r4, #12]
 80033d4:	e7e2      	b.n	800339c <__smakebuf_r+0xc>
 80033d6:	89a3      	ldrh	r3, [r4, #12]
 80033d8:	6020      	str	r0, [r4, #0]
 80033da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80033de:	81a3      	strh	r3, [r4, #12]
 80033e0:	9b01      	ldr	r3, [sp, #4]
 80033e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80033e6:	b15b      	cbz	r3, 8003400 <__smakebuf_r+0x70>
 80033e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80033ec:	4630      	mov	r0, r6
 80033ee:	f000 f81d 	bl	800342c <_isatty_r>
 80033f2:	b128      	cbz	r0, 8003400 <__smakebuf_r+0x70>
 80033f4:	89a3      	ldrh	r3, [r4, #12]
 80033f6:	f023 0303 	bic.w	r3, r3, #3
 80033fa:	f043 0301 	orr.w	r3, r3, #1
 80033fe:	81a3      	strh	r3, [r4, #12]
 8003400:	89a3      	ldrh	r3, [r4, #12]
 8003402:	431d      	orrs	r5, r3
 8003404:	81a5      	strh	r5, [r4, #12]
 8003406:	e7cf      	b.n	80033a8 <__smakebuf_r+0x18>

08003408 <_fstat_r>:
 8003408:	b538      	push	{r3, r4, r5, lr}
 800340a:	4d07      	ldr	r5, [pc, #28]	@ (8003428 <_fstat_r+0x20>)
 800340c:	2300      	movs	r3, #0
 800340e:	4604      	mov	r4, r0
 8003410:	4608      	mov	r0, r1
 8003412:	4611      	mov	r1, r2
 8003414:	602b      	str	r3, [r5, #0]
 8003416:	f7fd fc5d 	bl	8000cd4 <_fstat>
 800341a:	1c43      	adds	r3, r0, #1
 800341c:	d102      	bne.n	8003424 <_fstat_r+0x1c>
 800341e:	682b      	ldr	r3, [r5, #0]
 8003420:	b103      	cbz	r3, 8003424 <_fstat_r+0x1c>
 8003422:	6023      	str	r3, [r4, #0]
 8003424:	bd38      	pop	{r3, r4, r5, pc}
 8003426:	bf00      	nop
 8003428:	20001a50 	.word	0x20001a50

0800342c <_isatty_r>:
 800342c:	b538      	push	{r3, r4, r5, lr}
 800342e:	4d06      	ldr	r5, [pc, #24]	@ (8003448 <_isatty_r+0x1c>)
 8003430:	2300      	movs	r3, #0
 8003432:	4604      	mov	r4, r0
 8003434:	4608      	mov	r0, r1
 8003436:	602b      	str	r3, [r5, #0]
 8003438:	f7fd fc5c 	bl	8000cf4 <_isatty>
 800343c:	1c43      	adds	r3, r0, #1
 800343e:	d102      	bne.n	8003446 <_isatty_r+0x1a>
 8003440:	682b      	ldr	r3, [r5, #0]
 8003442:	b103      	cbz	r3, 8003446 <_isatty_r+0x1a>
 8003444:	6023      	str	r3, [r4, #0]
 8003446:	bd38      	pop	{r3, r4, r5, pc}
 8003448:	20001a50 	.word	0x20001a50

0800344c <_sbrk_r>:
 800344c:	b538      	push	{r3, r4, r5, lr}
 800344e:	4d06      	ldr	r5, [pc, #24]	@ (8003468 <_sbrk_r+0x1c>)
 8003450:	2300      	movs	r3, #0
 8003452:	4604      	mov	r4, r0
 8003454:	4608      	mov	r0, r1
 8003456:	602b      	str	r3, [r5, #0]
 8003458:	f7fd fc64 	bl	8000d24 <_sbrk>
 800345c:	1c43      	adds	r3, r0, #1
 800345e:	d102      	bne.n	8003466 <_sbrk_r+0x1a>
 8003460:	682b      	ldr	r3, [r5, #0]
 8003462:	b103      	cbz	r3, 8003466 <_sbrk_r+0x1a>
 8003464:	6023      	str	r3, [r4, #0]
 8003466:	bd38      	pop	{r3, r4, r5, pc}
 8003468:	20001a50 	.word	0x20001a50

0800346c <_init>:
 800346c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800346e:	bf00      	nop
 8003470:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003472:	bc08      	pop	{r3}
 8003474:	469e      	mov	lr, r3
 8003476:	4770      	bx	lr

08003478 <_fini>:
 8003478:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800347a:	bf00      	nop
 800347c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800347e:	bc08      	pop	{r3}
 8003480:	469e      	mov	lr, r3
 8003482:	4770      	bx	lr

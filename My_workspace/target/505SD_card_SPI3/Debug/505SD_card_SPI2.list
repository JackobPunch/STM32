
505SD_card_SPI2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fe4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  080081c4  080081c4  000091c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080087d0  080087d0  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  080087d0  080087d0  000097d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080087d8  080087d8  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080087d8  080087d8  000097d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080087dc  080087dc  000097dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080087e0  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000468  20000080  08008860  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08008860  0000a4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   000109e4  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a5a  00000000  00000000  0001aa94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001140  00000000  00000000  0001d4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3f  00000000  00000000  0001e630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024154  00000000  00000000  0001f36f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017053  00000000  00000000  000434c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d2b81  00000000  00000000  0005a516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012d097  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005044  00000000  00000000  0012d0dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  00132120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	080081ac 	.word	0x080081ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	080081ac 	.word	0x080081ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bc6:	4804      	ldr	r0, [pc, #16]	@ (8000bd8 <SELECT+0x1c>)
 8000bc8:	f001 fdfc 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bcc:	2001      	movs	r0, #1
 8000bce:	f001 fa89 	bl	80020e4 <HAL_Delay>
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020400 	.word	0x40020400

08000bdc <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000be0:	2201      	movs	r2, #1
 8000be2:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000be6:	4804      	ldr	r0, [pc, #16]	@ (8000bf8 <DESELECT+0x1c>)
 8000be8:	f001 fdec 	bl	80027c4 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bec:	2001      	movs	r0, #1
 8000bee:	f001 fa79 	bl	80020e4 <HAL_Delay>
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	40020400 	.word	0x40020400

08000bfc <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b082      	sub	sp, #8
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	4603      	mov	r3, r0
 8000c04:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c06:	bf00      	nop
 8000c08:	4b08      	ldr	r3, [pc, #32]	@ (8000c2c <SPI_TxByte+0x30>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	689b      	ldr	r3, [r3, #8]
 8000c0e:	f003 0302 	and.w	r3, r3, #2
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d1f8      	bne.n	8000c08 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c16:	1df9      	adds	r1, r7, #7
 8000c18:	2364      	movs	r3, #100	@ 0x64
 8000c1a:	2201      	movs	r2, #1
 8000c1c:	4803      	ldr	r0, [pc, #12]	@ (8000c2c <SPI_TxByte+0x30>)
 8000c1e:	f002 fae4 	bl	80031ea <HAL_SPI_Transmit>
}
 8000c22:	bf00      	nop
 8000c24:	3708      	adds	r7, #8
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	200000b8 	.word	0x200000b8

08000c30 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
 8000c38:	460b      	mov	r3, r1
 8000c3a:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c3c:	bf00      	nop
 8000c3e:	4b08      	ldr	r3, [pc, #32]	@ (8000c60 <SPI_TxBuffer+0x30>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	689b      	ldr	r3, [r3, #8]
 8000c44:	f003 0302 	and.w	r3, r3, #2
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d1f8      	bne.n	8000c3e <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c4c:	887a      	ldrh	r2, [r7, #2]
 8000c4e:	2364      	movs	r3, #100	@ 0x64
 8000c50:	6879      	ldr	r1, [r7, #4]
 8000c52:	4803      	ldr	r0, [pc, #12]	@ (8000c60 <SPI_TxBuffer+0x30>)
 8000c54:	f002 fac9 	bl	80031ea <HAL_SPI_Transmit>
}
 8000c58:	bf00      	nop
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	200000b8 	.word	0x200000b8

08000c64 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c6a:	23ff      	movs	r3, #255	@ 0xff
 8000c6c:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c6e:	bf00      	nop
 8000c70:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <SPI_RxByte+0x34>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	f003 0302 	and.w	r3, r3, #2
 8000c7a:	2b02      	cmp	r3, #2
 8000c7c:	d1f8      	bne.n	8000c70 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c7e:	1dba      	adds	r2, r7, #6
 8000c80:	1df9      	adds	r1, r7, #7
 8000c82:	2364      	movs	r3, #100	@ 0x64
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	2301      	movs	r3, #1
 8000c88:	4803      	ldr	r0, [pc, #12]	@ (8000c98 <SPI_RxByte+0x34>)
 8000c8a:	f002 fbf2 	bl	8003472 <HAL_SPI_TransmitReceive>

  return data;
 8000c8e:	79bb      	ldrb	r3, [r7, #6]
}
 8000c90:	4618      	mov	r0, r3
 8000c92:	3708      	adds	r7, #8
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	200000b8 	.word	0x200000b8

08000c9c <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000ca4:	f7ff ffde 	bl	8000c64 <SPI_RxByte>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	461a      	mov	r2, r3
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	701a      	strb	r2, [r3, #0]
}
 8000cb0:	bf00      	nop
 8000cb2:	3708      	adds	r7, #8
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce8 <SD_ReadyWait+0x30>)
 8000cc0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000cc4:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000cc6:	f7ff ffcd 	bl	8000c64 <SPI_RxByte>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	2bff      	cmp	r3, #255	@ 0xff
 8000cd2:	d003      	beq.n	8000cdc <SD_ReadyWait+0x24>
 8000cd4:	4b04      	ldr	r3, [pc, #16]	@ (8000ce8 <SD_ReadyWait+0x30>)
 8000cd6:	881b      	ldrh	r3, [r3, #0]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d1f4      	bne.n	8000cc6 <SD_ReadyWait+0xe>

  return res;
 8000cdc:	79fb      	ldrb	r3, [r7, #7]
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	2000009e 	.word	0x2000009e

08000cec <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000cf2:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cf6:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000cf8:	f7ff ff70 	bl	8000bdc <DESELECT>
  for(int i = 0; i < 10; i++)
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	60bb      	str	r3, [r7, #8]
 8000d00:	e005      	b.n	8000d0e <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000d02:	20ff      	movs	r0, #255	@ 0xff
 8000d04:	f7ff ff7a 	bl	8000bfc <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	ddf6      	ble.n	8000d02 <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000d14:	f7ff ff52 	bl	8000bbc <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000d18:	2340      	movs	r3, #64	@ 0x40
 8000d1a:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000d2c:	2395      	movs	r3, #149	@ 0x95
 8000d2e:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000d30:	463b      	mov	r3, r7
 8000d32:	2106      	movs	r1, #6
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff7b 	bl	8000c30 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d3a:	e002      	b.n	8000d42 <SD_PowerOn+0x56>
  {
    cnt--;
 8000d3c:	68fb      	ldr	r3, [r7, #12]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d42:	f7ff ff8f 	bl	8000c64 <SPI_RxByte>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b01      	cmp	r3, #1
 8000d4a:	d002      	beq.n	8000d52 <SD_PowerOn+0x66>
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f4      	bne.n	8000d3c <SD_PowerOn+0x50>
  }

  DESELECT();
 8000d52:	f7ff ff43 	bl	8000bdc <DESELECT>
  SPI_TxByte(0XFF);
 8000d56:	20ff      	movs	r0, #255	@ 0xff
 8000d58:	f7ff ff50 	bl	8000bfc <SPI_TxByte>

  PowerFlag = 1;
 8000d5c:	4b03      	ldr	r3, [pc, #12]	@ (8000d6c <SD_PowerOn+0x80>)
 8000d5e:	2201      	movs	r2, #1
 8000d60:	701a      	strb	r2, [r3, #0]
}
 8000d62:	bf00      	nop
 8000d64:	3710      	adds	r7, #16
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	200000a1 	.word	0x200000a1

08000d70 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d74:	4b03      	ldr	r3, [pc, #12]	@ (8000d84 <SD_PowerOff+0x14>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	701a      	strb	r2, [r3, #0]
}
 8000d7a:	bf00      	nop
 8000d7c:	46bd      	mov	sp, r7
 8000d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d82:	4770      	bx	lr
 8000d84:	200000a1 	.word	0x200000a1

08000d88 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000d8c:	4b03      	ldr	r3, [pc, #12]	@ (8000d9c <SD_CheckPower+0x14>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	200000a1 	.word	0x200000a1

08000da0 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000daa:	4b13      	ldr	r3, [pc, #76]	@ (8000df8 <SD_RxDataBlock+0x58>)
 8000dac:	22c8      	movs	r2, #200	@ 0xc8
 8000dae:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000db0:	f7ff ff58 	bl	8000c64 <SPI_RxByte>
 8000db4:	4603      	mov	r3, r0
 8000db6:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
 8000dba:	2bff      	cmp	r3, #255	@ 0xff
 8000dbc:	d103      	bne.n	8000dc6 <SD_RxDataBlock+0x26>
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <SD_RxDataBlock+0x58>)
 8000dc0:	881b      	ldrh	r3, [r3, #0]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d1f4      	bne.n	8000db0 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dca:	d001      	beq.n	8000dd0 <SD_RxDataBlock+0x30>
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e00f      	b.n	8000df0 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	1c5a      	adds	r2, r3, #1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	4618      	mov	r0, r3
 8000dd8:	f7ff ff60 	bl	8000c9c <SPI_RxBytePtr>
  } while(len--);
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	1e5a      	subs	r2, r3, #1
 8000de0:	603a      	str	r2, [r7, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d1f4      	bne.n	8000dd0 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000de6:	f7ff ff3d 	bl	8000c64 <SPI_RxByte>
  SPI_RxByte();
 8000dea:	f7ff ff3b 	bl	8000c64 <SPI_RxByte>

  return TRUE;
 8000dee:	2301      	movs	r3, #1
}
 8000df0:	4618      	mov	r0, r3
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	2000009c 	.word	0x2000009c

08000dfc <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b084      	sub	sp, #16
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
 8000e04:	460b      	mov	r3, r1
 8000e06:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e0c:	f7ff ff54 	bl	8000cb8 <SD_ReadyWait>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2bff      	cmp	r3, #255	@ 0xff
 8000e14:	d001      	beq.n	8000e1a <SD_TxDataBlock+0x1e>
 8000e16:	2300      	movs	r3, #0
 8000e18:	e02f      	b.n	8000e7a <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff feed 	bl	8000bfc <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000e22:	78fb      	ldrb	r3, [r7, #3]
 8000e24:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e26:	d020      	beq.n	8000e6a <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000e28:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff feff 	bl	8000c30 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000e32:	f7ff ff17 	bl	8000c64 <SPI_RxByte>
    SPI_RxByte();
 8000e36:	f7ff ff15 	bl	8000c64 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000e3a:	e00b      	b.n	8000e54 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000e3c:	f7ff ff12 	bl	8000c64 <SPI_RxByte>
 8000e40:	4603      	mov	r3, r0
 8000e42:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000e44:	7bfb      	ldrb	r3, [r7, #15]
 8000e46:	f003 031f 	and.w	r3, r3, #31
 8000e4a:	2b05      	cmp	r3, #5
 8000e4c:	d006      	beq.n	8000e5c <SD_TxDataBlock+0x60>
      i++;
 8000e4e:	7bbb      	ldrb	r3, [r7, #14]
 8000e50:	3301      	adds	r3, #1
 8000e52:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000e54:	7bbb      	ldrb	r3, [r7, #14]
 8000e56:	2b40      	cmp	r3, #64	@ 0x40
 8000e58:	d9f0      	bls.n	8000e3c <SD_TxDataBlock+0x40>
 8000e5a:	e000      	b.n	8000e5e <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000e5c:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000e5e:	bf00      	nop
 8000e60:	f7ff ff00 	bl	8000c64 <SPI_RxByte>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d0fa      	beq.n	8000e60 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000e6a:	7bfb      	ldrb	r3, [r7, #15]
 8000e6c:	f003 031f 	and.w	r3, r3, #31
 8000e70:	2b05      	cmp	r3, #5
 8000e72:	d101      	bne.n	8000e78 <SD_TxDataBlock+0x7c>
 8000e74:	2301      	movs	r3, #1
 8000e76:	e000      	b.n	8000e7a <SD_TxDataBlock+0x7e>

  return FALSE;
 8000e78:	2300      	movs	r3, #0
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3710      	adds	r7, #16
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b084      	sub	sp, #16
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	4603      	mov	r3, r0
 8000e8a:	6039      	str	r1, [r7, #0]
 8000e8c:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e8e:	f7ff ff13 	bl	8000cb8 <SD_ReadyWait>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2bff      	cmp	r3, #255	@ 0xff
 8000e96:	d001      	beq.n	8000e9c <SD_SendCmd+0x1a>
 8000e98:	23ff      	movs	r3, #255	@ 0xff
 8000e9a:	e042      	b.n	8000f22 <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	f7ff feac 	bl	8000bfc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	0e1b      	lsrs	r3, r3, #24
 8000ea8:	b2db      	uxtb	r3, r3
 8000eaa:	4618      	mov	r0, r3
 8000eac:	f7ff fea6 	bl	8000bfc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	0c1b      	lsrs	r3, r3, #16
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f7ff fea0 	bl	8000bfc <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000ebc:	683b      	ldr	r3, [r7, #0]
 8000ebe:	0a1b      	lsrs	r3, r3, #8
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff fe9a 	bl	8000bfc <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	b2db      	uxtb	r3, r3
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f7ff fe95 	bl	8000bfc <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	2b40      	cmp	r3, #64	@ 0x40
 8000ed6:	d102      	bne.n	8000ede <SD_SendCmd+0x5c>
 8000ed8:	2395      	movs	r3, #149	@ 0x95
 8000eda:	73fb      	strb	r3, [r7, #15]
 8000edc:	e007      	b.n	8000eee <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000ede:	79fb      	ldrb	r3, [r7, #7]
 8000ee0:	2b48      	cmp	r3, #72	@ 0x48
 8000ee2:	d102      	bne.n	8000eea <SD_SendCmd+0x68>
 8000ee4:	2387      	movs	r3, #135	@ 0x87
 8000ee6:	73fb      	strb	r3, [r7, #15]
 8000ee8:	e001      	b.n	8000eee <SD_SendCmd+0x6c>
  else crc = 1;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000eee:	7bfb      	ldrb	r3, [r7, #15]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fe83 	bl	8000bfc <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b4c      	cmp	r3, #76	@ 0x4c
 8000efa:	d101      	bne.n	8000f00 <SD_SendCmd+0x7e>
 8000efc:	f7ff feb2 	bl	8000c64 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000f00:	230a      	movs	r3, #10
 8000f02:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000f04:	f7ff feae 	bl	8000c64 <SPI_RxByte>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f0c:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	da05      	bge.n	8000f20 <SD_SendCmd+0x9e>
 8000f14:	7bbb      	ldrb	r3, [r7, #14]
 8000f16:	3b01      	subs	r3, #1
 8000f18:	73bb      	strb	r3, [r7, #14]
 8000f1a:	7bbb      	ldrb	r3, [r7, #14]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d1f1      	bne.n	8000f04 <SD_SendCmd+0x82>

  return res;
 8000f20:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3710      	adds	r7, #16
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
	...

08000f2c <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f2c:	b590      	push	{r4, r7, lr}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <SD_disk_initialize+0x14>
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e0d1      	b.n	80010e4 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000f40:	4b6a      	ldr	r3, [pc, #424]	@ (80010ec <SD_disk_initialize+0x1c0>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	f003 0302 	and.w	r3, r3, #2
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d003      	beq.n	8000f56 <SD_disk_initialize+0x2a>
 8000f4e:	4b67      	ldr	r3, [pc, #412]	@ (80010ec <SD_disk_initialize+0x1c0>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	e0c6      	b.n	80010e4 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000f56:	f7ff fec9 	bl	8000cec <SD_PowerOn>

  /* slave select */
  SELECT();
 8000f5a:	f7ff fe2f 	bl	8000bbc <SELECT>

  /* check disk type */
  type = 0;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f62:	2100      	movs	r1, #0
 8000f64:	2040      	movs	r0, #64	@ 0x40
 8000f66:	f7ff ff8c 	bl	8000e82 <SD_SendCmd>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b01      	cmp	r3, #1
 8000f6e:	f040 80a1 	bne.w	80010b4 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000f72:	4b5f      	ldr	r3, [pc, #380]	@ (80010f0 <SD_disk_initialize+0x1c4>)
 8000f74:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f78:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f7a:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f7e:	2048      	movs	r0, #72	@ 0x48
 8000f80:	f7ff ff7f 	bl	8000e82 <SD_SendCmd>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b01      	cmp	r3, #1
 8000f88:	d155      	bne.n	8001036 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	73fb      	strb	r3, [r7, #15]
 8000f8e:	e00c      	b.n	8000faa <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000f90:	7bfc      	ldrb	r4, [r7, #15]
 8000f92:	f7ff fe67 	bl	8000c64 <SPI_RxByte>
 8000f96:	4603      	mov	r3, r0
 8000f98:	461a      	mov	r2, r3
 8000f9a:	f104 0310 	add.w	r3, r4, #16
 8000f9e:	443b      	add	r3, r7
 8000fa0:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	3301      	adds	r3, #1
 8000fa8:	73fb      	strb	r3, [r7, #15]
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	2b03      	cmp	r3, #3
 8000fae:	d9ef      	bls.n	8000f90 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fb0:	7abb      	ldrb	r3, [r7, #10]
 8000fb2:	2b01      	cmp	r3, #1
 8000fb4:	d17e      	bne.n	80010b4 <SD_disk_initialize+0x188>
 8000fb6:	7afb      	ldrb	r3, [r7, #11]
 8000fb8:	2baa      	cmp	r3, #170	@ 0xaa
 8000fba:	d17b      	bne.n	80010b4 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	2077      	movs	r0, #119	@ 0x77
 8000fc0:	f7ff ff5f 	bl	8000e82 <SD_SendCmd>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d807      	bhi.n	8000fda <SD_disk_initialize+0xae>
 8000fca:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fce:	2069      	movs	r0, #105	@ 0x69
 8000fd0:	f7ff ff57 	bl	8000e82 <SD_SendCmd>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d004      	beq.n	8000fe4 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000fda:	4b45      	ldr	r3, [pc, #276]	@ (80010f0 <SD_disk_initialize+0x1c4>)
 8000fdc:	881b      	ldrh	r3, [r3, #0]
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1ec      	bne.n	8000fbc <SD_disk_initialize+0x90>
 8000fe2:	e000      	b.n	8000fe6 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fe4:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fe6:	4b42      	ldr	r3, [pc, #264]	@ (80010f0 <SD_disk_initialize+0x1c4>)
 8000fe8:	881b      	ldrh	r3, [r3, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d062      	beq.n	80010b4 <SD_disk_initialize+0x188>
 8000fee:	2100      	movs	r1, #0
 8000ff0:	207a      	movs	r0, #122	@ 0x7a
 8000ff2:	f7ff ff46 	bl	8000e82 <SD_SendCmd>
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d15b      	bne.n	80010b4 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	73fb      	strb	r3, [r7, #15]
 8001000:	e00c      	b.n	800101c <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8001002:	7bfc      	ldrb	r4, [r7, #15]
 8001004:	f7ff fe2e 	bl	8000c64 <SPI_RxByte>
 8001008:	4603      	mov	r3, r0
 800100a:	461a      	mov	r2, r3
 800100c:	f104 0310 	add.w	r3, r4, #16
 8001010:	443b      	add	r3, r7
 8001012:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8001016:	7bfb      	ldrb	r3, [r7, #15]
 8001018:	3301      	adds	r3, #1
 800101a:	73fb      	strb	r3, [r7, #15]
 800101c:	7bfb      	ldrb	r3, [r7, #15]
 800101e:	2b03      	cmp	r3, #3
 8001020:	d9ef      	bls.n	8001002 <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 8001022:	7a3b      	ldrb	r3, [r7, #8]
 8001024:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SD_disk_initialize+0x104>
 800102c:	230c      	movs	r3, #12
 800102e:	e000      	b.n	8001032 <SD_disk_initialize+0x106>
 8001030:	2304      	movs	r3, #4
 8001032:	73bb      	strb	r3, [r7, #14]
 8001034:	e03e      	b.n	80010b4 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 8001036:	2100      	movs	r1, #0
 8001038:	2077      	movs	r0, #119	@ 0x77
 800103a:	f7ff ff22 	bl	8000e82 <SD_SendCmd>
 800103e:	4603      	mov	r3, r0
 8001040:	2b01      	cmp	r3, #1
 8001042:	d808      	bhi.n	8001056 <SD_disk_initialize+0x12a>
 8001044:	2100      	movs	r1, #0
 8001046:	2069      	movs	r0, #105	@ 0x69
 8001048:	f7ff ff1b 	bl	8000e82 <SD_SendCmd>
 800104c:	4603      	mov	r3, r0
 800104e:	2b01      	cmp	r3, #1
 8001050:	d801      	bhi.n	8001056 <SD_disk_initialize+0x12a>
 8001052:	2302      	movs	r3, #2
 8001054:	e000      	b.n	8001058 <SD_disk_initialize+0x12c>
 8001056:	2301      	movs	r3, #1
 8001058:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 800105a:	7bbb      	ldrb	r3, [r7, #14]
 800105c:	2b02      	cmp	r3, #2
 800105e:	d10e      	bne.n	800107e <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001060:	2100      	movs	r1, #0
 8001062:	2077      	movs	r0, #119	@ 0x77
 8001064:	f7ff ff0d 	bl	8000e82 <SD_SendCmd>
 8001068:	4603      	mov	r3, r0
 800106a:	2b01      	cmp	r3, #1
 800106c:	d80e      	bhi.n	800108c <SD_disk_initialize+0x160>
 800106e:	2100      	movs	r1, #0
 8001070:	2069      	movs	r0, #105	@ 0x69
 8001072:	f7ff ff06 	bl	8000e82 <SD_SendCmd>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d107      	bne.n	800108c <SD_disk_initialize+0x160>
 800107c:	e00c      	b.n	8001098 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800107e:	2100      	movs	r1, #0
 8001080:	2041      	movs	r0, #65	@ 0x41
 8001082:	f7ff fefe 	bl	8000e82 <SD_SendCmd>
 8001086:	4603      	mov	r3, r0
 8001088:	2b00      	cmp	r3, #0
 800108a:	d004      	beq.n	8001096 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 800108c:	4b18      	ldr	r3, [pc, #96]	@ (80010f0 <SD_disk_initialize+0x1c4>)
 800108e:	881b      	ldrh	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d1e2      	bne.n	800105a <SD_disk_initialize+0x12e>
 8001094:	e000      	b.n	8001098 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001096:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001098:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <SD_disk_initialize+0x1c4>)
 800109a:	881b      	ldrh	r3, [r3, #0]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <SD_disk_initialize+0x184>
 80010a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80010a4:	2050      	movs	r0, #80	@ 0x50
 80010a6:	f7ff feec 	bl	8000e82 <SD_SendCmd>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <SD_disk_initialize+0x188>
 80010b0:	2300      	movs	r3, #0
 80010b2:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80010b4:	4a0f      	ldr	r2, [pc, #60]	@ (80010f4 <SD_disk_initialize+0x1c8>)
 80010b6:	7bbb      	ldrb	r3, [r7, #14]
 80010b8:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80010ba:	f7ff fd8f 	bl	8000bdc <DESELECT>
  SPI_RxByte();
 80010be:	f7ff fdd1 	bl	8000c64 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80010c2:	7bbb      	ldrb	r3, [r7, #14]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d008      	beq.n	80010da <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <SD_disk_initialize+0x1c0>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	f023 0301 	bic.w	r3, r3, #1
 80010d2:	b2da      	uxtb	r2, r3
 80010d4:	4b05      	ldr	r3, [pc, #20]	@ (80010ec <SD_disk_initialize+0x1c0>)
 80010d6:	701a      	strb	r2, [r3, #0]
 80010d8:	e001      	b.n	80010de <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010da:	f7ff fe49 	bl	8000d70 <SD_PowerOff>
  }

  return Stat;
 80010de:	4b03      	ldr	r3, [pc, #12]	@ (80010ec <SD_disk_initialize+0x1c0>)
 80010e0:	781b      	ldrb	r3, [r3, #0]
 80010e2:	b2db      	uxtb	r3, r3
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	3714      	adds	r7, #20
 80010e8:	46bd      	mov	sp, r7
 80010ea:	bd90      	pop	{r4, r7, pc}
 80010ec:	20000000 	.word	0x20000000
 80010f0:	2000009c 	.word	0x2000009c
 80010f4:	200000a0 	.word	0x200000a0

080010f8 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80010f8:	b480      	push	{r7}
 80010fa:	b083      	sub	sp, #12
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	4603      	mov	r3, r0
 8001100:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8001102:	79fb      	ldrb	r3, [r7, #7]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <SD_disk_status+0x14>
 8001108:	2301      	movs	r3, #1
 800110a:	e002      	b.n	8001112 <SD_disk_status+0x1a>
  return Stat;
 800110c:	4b04      	ldr	r3, [pc, #16]	@ (8001120 <SD_disk_status+0x28>)
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	b2db      	uxtb	r3, r3
}
 8001112:	4618      	mov	r0, r3
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	20000000 	.word	0x20000000

08001124 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b084      	sub	sp, #16
 8001128:	af00      	add	r7, sp, #0
 800112a:	60b9      	str	r1, [r7, #8]
 800112c:	607a      	str	r2, [r7, #4]
 800112e:	603b      	str	r3, [r7, #0]
 8001130:	4603      	mov	r3, r0
 8001132:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001134:	7bfb      	ldrb	r3, [r7, #15]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d102      	bne.n	8001140 <SD_disk_read+0x1c>
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d101      	bne.n	8001144 <SD_disk_read+0x20>
 8001140:	2304      	movs	r3, #4
 8001142:	e051      	b.n	80011e8 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001144:	4b2a      	ldr	r3, [pc, #168]	@ (80011f0 <SD_disk_read+0xcc>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	f003 0301 	and.w	r3, r3, #1
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SD_disk_read+0x32>
 8001152:	2303      	movs	r3, #3
 8001154:	e048      	b.n	80011e8 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001156:	4b27      	ldr	r3, [pc, #156]	@ (80011f4 <SD_disk_read+0xd0>)
 8001158:	781b      	ldrb	r3, [r3, #0]
 800115a:	f003 0304 	and.w	r3, r3, #4
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <SD_disk_read+0x44>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	025b      	lsls	r3, r3, #9
 8001166:	607b      	str	r3, [r7, #4]

  SELECT();
 8001168:	f7ff fd28 	bl	8000bbc <SELECT>

  if (count == 1)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	2b01      	cmp	r3, #1
 8001170:	d111      	bne.n	8001196 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8001172:	6879      	ldr	r1, [r7, #4]
 8001174:	2051      	movs	r0, #81	@ 0x51
 8001176:	f7ff fe84 	bl	8000e82 <SD_SendCmd>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d129      	bne.n	80011d4 <SD_disk_read+0xb0>
 8001180:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001184:	68b8      	ldr	r0, [r7, #8]
 8001186:	f7ff fe0b 	bl	8000da0 <SD_RxDataBlock>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d021      	beq.n	80011d4 <SD_disk_read+0xb0>
 8001190:	2300      	movs	r3, #0
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	e01e      	b.n	80011d4 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	2052      	movs	r0, #82	@ 0x52
 800119a:	f7ff fe72 	bl	8000e82 <SD_SendCmd>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d117      	bne.n	80011d4 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 80011a4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a8:	68b8      	ldr	r0, [r7, #8]
 80011aa:	f7ff fdf9 	bl	8000da0 <SD_RxDataBlock>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00a      	beq.n	80011ca <SD_disk_read+0xa6>
        buff += 512;
 80011b4:	68bb      	ldr	r3, [r7, #8]
 80011b6:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011ba:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	3b01      	subs	r3, #1
 80011c0:	603b      	str	r3, [r7, #0]
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d1ed      	bne.n	80011a4 <SD_disk_read+0x80>
 80011c8:	e000      	b.n	80011cc <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80011ca:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80011cc:	2100      	movs	r1, #0
 80011ce:	204c      	movs	r0, #76	@ 0x4c
 80011d0:	f7ff fe57 	bl	8000e82 <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80011d4:	f7ff fd02 	bl	8000bdc <DESELECT>
  SPI_RxByte();
 80011d8:	f7ff fd44 	bl	8000c64 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	bf14      	ite	ne
 80011e2:	2301      	movne	r3, #1
 80011e4:	2300      	moveq	r3, #0
 80011e6:	b2db      	uxtb	r3, r3
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	3710      	adds	r7, #16
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000000 	.word	0x20000000
 80011f4:	200000a0 	.word	0x200000a0

080011f8 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60b9      	str	r1, [r7, #8]
 8001200:	607a      	str	r2, [r7, #4]
 8001202:	603b      	str	r3, [r7, #0]
 8001204:	4603      	mov	r3, r0
 8001206:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001208:	7bfb      	ldrb	r3, [r7, #15]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d102      	bne.n	8001214 <SD_disk_write+0x1c>
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	2b00      	cmp	r3, #0
 8001212:	d101      	bne.n	8001218 <SD_disk_write+0x20>
 8001214:	2304      	movs	r3, #4
 8001216:	e06b      	b.n	80012f0 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001218:	4b37      	ldr	r3, [pc, #220]	@ (80012f8 <SD_disk_write+0x100>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	b2db      	uxtb	r3, r3
 800121e:	f003 0301 	and.w	r3, r3, #1
 8001222:	2b00      	cmp	r3, #0
 8001224:	d001      	beq.n	800122a <SD_disk_write+0x32>
 8001226:	2303      	movs	r3, #3
 8001228:	e062      	b.n	80012f0 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 800122a:	4b33      	ldr	r3, [pc, #204]	@ (80012f8 <SD_disk_write+0x100>)
 800122c:	781b      	ldrb	r3, [r3, #0]
 800122e:	b2db      	uxtb	r3, r3
 8001230:	f003 0304 	and.w	r3, r3, #4
 8001234:	2b00      	cmp	r3, #0
 8001236:	d001      	beq.n	800123c <SD_disk_write+0x44>
 8001238:	2302      	movs	r3, #2
 800123a:	e059      	b.n	80012f0 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800123c:	4b2f      	ldr	r3, [pc, #188]	@ (80012fc <SD_disk_write+0x104>)
 800123e:	781b      	ldrb	r3, [r3, #0]
 8001240:	f003 0304 	and.w	r3, r3, #4
 8001244:	2b00      	cmp	r3, #0
 8001246:	d102      	bne.n	800124e <SD_disk_write+0x56>
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	025b      	lsls	r3, r3, #9
 800124c:	607b      	str	r3, [r7, #4]

  SELECT();
 800124e:	f7ff fcb5 	bl	8000bbc <SELECT>

  if (count == 1)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d110      	bne.n	800127a <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001258:	6879      	ldr	r1, [r7, #4]
 800125a:	2058      	movs	r0, #88	@ 0x58
 800125c:	f7ff fe11 	bl	8000e82 <SD_SendCmd>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d13a      	bne.n	80012dc <SD_disk_write+0xe4>
 8001266:	21fe      	movs	r1, #254	@ 0xfe
 8001268:	68b8      	ldr	r0, [r7, #8]
 800126a:	f7ff fdc7 	bl	8000dfc <SD_TxDataBlock>
 800126e:	4603      	mov	r3, r0
 8001270:	2b00      	cmp	r3, #0
 8001272:	d033      	beq.n	80012dc <SD_disk_write+0xe4>
      count = 0;
 8001274:	2300      	movs	r3, #0
 8001276:	603b      	str	r3, [r7, #0]
 8001278:	e030      	b.n	80012dc <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 800127a:	4b20      	ldr	r3, [pc, #128]	@ (80012fc <SD_disk_write+0x104>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d007      	beq.n	8001296 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8001286:	2100      	movs	r1, #0
 8001288:	2077      	movs	r0, #119	@ 0x77
 800128a:	f7ff fdfa 	bl	8000e82 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 800128e:	6839      	ldr	r1, [r7, #0]
 8001290:	2057      	movs	r0, #87	@ 0x57
 8001292:	f7ff fdf6 	bl	8000e82 <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8001296:	6879      	ldr	r1, [r7, #4]
 8001298:	2059      	movs	r0, #89	@ 0x59
 800129a:	f7ff fdf2 	bl	8000e82 <SD_SendCmd>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d11b      	bne.n	80012dc <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012a4:	21fc      	movs	r1, #252	@ 0xfc
 80012a6:	68b8      	ldr	r0, [r7, #8]
 80012a8:	f7ff fda8 	bl	8000dfc <SD_TxDataBlock>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d00a      	beq.n	80012c8 <SD_disk_write+0xd0>
        buff += 512;
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012b8:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	3b01      	subs	r3, #1
 80012be:	603b      	str	r3, [r7, #0]
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1ee      	bne.n	80012a4 <SD_disk_write+0xac>
 80012c6:	e000      	b.n	80012ca <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012c8:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80012ca:	21fd      	movs	r1, #253	@ 0xfd
 80012cc:	2000      	movs	r0, #0
 80012ce:	f7ff fd95 	bl	8000dfc <SD_TxDataBlock>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d101      	bne.n	80012dc <SD_disk_write+0xe4>
      {
        count = 1;
 80012d8:	2301      	movs	r3, #1
 80012da:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80012dc:	f7ff fc7e 	bl	8000bdc <DESELECT>
  SPI_RxByte();
 80012e0:	f7ff fcc0 	bl	8000c64 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	bf14      	ite	ne
 80012ea:	2301      	movne	r3, #1
 80012ec:	2300      	moveq	r3, #0
 80012ee:	b2db      	uxtb	r3, r3
}
 80012f0:	4618      	mov	r0, r3
 80012f2:	3710      	adds	r7, #16
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	20000000 	.word	0x20000000
 80012fc:	200000a0 	.word	0x200000a0

08001300 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8001300:	b590      	push	{r4, r7, lr}
 8001302:	b08b      	sub	sp, #44	@ 0x2c
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	603a      	str	r2, [r7, #0]
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	460b      	mov	r3, r1
 800130e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8001314:	79fb      	ldrb	r3, [r7, #7]
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <SD_disk_ioctl+0x1e>
 800131a:	2304      	movs	r3, #4
 800131c:	e113      	b.n	8001546 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8001324:	79bb      	ldrb	r3, [r7, #6]
 8001326:	2b05      	cmp	r3, #5
 8001328:	d124      	bne.n	8001374 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 800132a:	6a3b      	ldr	r3, [r7, #32]
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	2b02      	cmp	r3, #2
 8001330:	d012      	beq.n	8001358 <SD_disk_ioctl+0x58>
 8001332:	2b02      	cmp	r3, #2
 8001334:	dc1a      	bgt.n	800136c <SD_disk_ioctl+0x6c>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d002      	beq.n	8001340 <SD_disk_ioctl+0x40>
 800133a:	2b01      	cmp	r3, #1
 800133c:	d006      	beq.n	800134c <SD_disk_ioctl+0x4c>
 800133e:	e015      	b.n	800136c <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001340:	f7ff fd16 	bl	8000d70 <SD_PowerOff>
      res = RES_OK;
 8001344:	2300      	movs	r3, #0
 8001346:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800134a:	e0fa      	b.n	8001542 <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 800134c:	f7ff fcce 	bl	8000cec <SD_PowerOn>
      res = RES_OK;
 8001350:	2300      	movs	r3, #0
 8001352:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001356:	e0f4      	b.n	8001542 <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001358:	6a3b      	ldr	r3, [r7, #32]
 800135a:	1c5c      	adds	r4, r3, #1
 800135c:	f7ff fd14 	bl	8000d88 <SD_CheckPower>
 8001360:	4603      	mov	r3, r0
 8001362:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8001364:	2300      	movs	r3, #0
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800136a:	e0ea      	b.n	8001542 <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 800136c:	2304      	movs	r3, #4
 800136e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001372:	e0e6      	b.n	8001542 <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001374:	4b76      	ldr	r3, [pc, #472]	@ (8001550 <SD_disk_ioctl+0x250>)
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b2db      	uxtb	r3, r3
 800137a:	f003 0301 	and.w	r3, r3, #1
 800137e:	2b00      	cmp	r3, #0
 8001380:	d001      	beq.n	8001386 <SD_disk_ioctl+0x86>
 8001382:	2303      	movs	r3, #3
 8001384:	e0df      	b.n	8001546 <SD_disk_ioctl+0x246>

    SELECT();
 8001386:	f7ff fc19 	bl	8000bbc <SELECT>

    switch (ctrl)
 800138a:	79bb      	ldrb	r3, [r7, #6]
 800138c:	2b0d      	cmp	r3, #13
 800138e:	f200 80c9 	bhi.w	8001524 <SD_disk_ioctl+0x224>
 8001392:	a201      	add	r2, pc, #4	@ (adr r2, 8001398 <SD_disk_ioctl+0x98>)
 8001394:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001398:	0800148f 	.word	0x0800148f
 800139c:	080013d1 	.word	0x080013d1
 80013a0:	0800147f 	.word	0x0800147f
 80013a4:	08001525 	.word	0x08001525
 80013a8:	08001525 	.word	0x08001525
 80013ac:	08001525 	.word	0x08001525
 80013b0:	08001525 	.word	0x08001525
 80013b4:	08001525 	.word	0x08001525
 80013b8:	08001525 	.word	0x08001525
 80013bc:	08001525 	.word	0x08001525
 80013c0:	08001525 	.word	0x08001525
 80013c4:	080014a1 	.word	0x080014a1
 80013c8:	080014c5 	.word	0x080014c5
 80013cc:	080014e9 	.word	0x080014e9
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013d0:	2100      	movs	r1, #0
 80013d2:	2049      	movs	r0, #73	@ 0x49
 80013d4:	f7ff fd55 	bl	8000e82 <SD_SendCmd>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	f040 80a6 	bne.w	800152c <SD_disk_ioctl+0x22c>
 80013e0:	f107 030c 	add.w	r3, r7, #12
 80013e4:	2110      	movs	r1, #16
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fcda 	bl	8000da0 <SD_RxDataBlock>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 809c 	beq.w	800152c <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80013f4:	7b3b      	ldrb	r3, [r7, #12]
 80013f6:	099b      	lsrs	r3, r3, #6
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d10d      	bne.n	800141a <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013fe:	7d7b      	ldrb	r3, [r7, #21]
 8001400:	461a      	mov	r2, r3
 8001402:	7d3b      	ldrb	r3, [r7, #20]
 8001404:	021b      	lsls	r3, r3, #8
 8001406:	b29b      	uxth	r3, r3
 8001408:	4413      	add	r3, r2
 800140a:	b29b      	uxth	r3, r3
 800140c:	3301      	adds	r3, #1
 800140e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001410:	8bfb      	ldrh	r3, [r7, #30]
 8001412:	029a      	lsls	r2, r3, #10
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	601a      	str	r2, [r3, #0]
 8001418:	e02d      	b.n	8001476 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800141a:	7c7b      	ldrb	r3, [r7, #17]
 800141c:	f003 030f 	and.w	r3, r3, #15
 8001420:	b2da      	uxtb	r2, r3
 8001422:	7dbb      	ldrb	r3, [r7, #22]
 8001424:	09db      	lsrs	r3, r3, #7
 8001426:	b2db      	uxtb	r3, r3
 8001428:	4413      	add	r3, r2
 800142a:	b2da      	uxtb	r2, r3
 800142c:	7d7b      	ldrb	r3, [r7, #21]
 800142e:	005b      	lsls	r3, r3, #1
 8001430:	b2db      	uxtb	r3, r3
 8001432:	f003 0306 	and.w	r3, r3, #6
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4413      	add	r3, r2
 800143a:	b2db      	uxtb	r3, r3
 800143c:	3302      	adds	r3, #2
 800143e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8001442:	7d3b      	ldrb	r3, [r7, #20]
 8001444:	099b      	lsrs	r3, r3, #6
 8001446:	b2db      	uxtb	r3, r3
 8001448:	461a      	mov	r2, r3
 800144a:	7cfb      	ldrb	r3, [r7, #19]
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	b29b      	uxth	r3, r3
 8001450:	4413      	add	r3, r2
 8001452:	b29a      	uxth	r2, r3
 8001454:	7cbb      	ldrb	r3, [r7, #18]
 8001456:	029b      	lsls	r3, r3, #10
 8001458:	b29b      	uxth	r3, r3
 800145a:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800145e:	b29b      	uxth	r3, r3
 8001460:	4413      	add	r3, r2
 8001462:	b29b      	uxth	r3, r3
 8001464:	3301      	adds	r3, #1
 8001466:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001468:	8bfa      	ldrh	r2, [r7, #30]
 800146a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800146e:	3b09      	subs	r3, #9
 8001470:	409a      	lsls	r2, r3
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8001476:	2300      	movs	r3, #0
 8001478:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 800147c:	e056      	b.n	800152c <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001484:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8001486:	2300      	movs	r3, #0
 8001488:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800148c:	e055      	b.n	800153a <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 800148e:	f7ff fc13 	bl	8000cb8 <SD_ReadyWait>
 8001492:	4603      	mov	r3, r0
 8001494:	2bff      	cmp	r3, #255	@ 0xff
 8001496:	d14b      	bne.n	8001530 <SD_disk_ioctl+0x230>
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800149e:	e047      	b.n	8001530 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014a0:	2100      	movs	r1, #0
 80014a2:	2049      	movs	r0, #73	@ 0x49
 80014a4:	f7ff fced 	bl	8000e82 <SD_SendCmd>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d142      	bne.n	8001534 <SD_disk_ioctl+0x234>
 80014ae:	2110      	movs	r1, #16
 80014b0:	6a38      	ldr	r0, [r7, #32]
 80014b2:	f7ff fc75 	bl	8000da0 <SD_RxDataBlock>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d03b      	beq.n	8001534 <SD_disk_ioctl+0x234>
 80014bc:	2300      	movs	r3, #0
 80014be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014c2:	e037      	b.n	8001534 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014c4:	2100      	movs	r1, #0
 80014c6:	204a      	movs	r0, #74	@ 0x4a
 80014c8:	f7ff fcdb 	bl	8000e82 <SD_SendCmd>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d132      	bne.n	8001538 <SD_disk_ioctl+0x238>
 80014d2:	2110      	movs	r1, #16
 80014d4:	6a38      	ldr	r0, [r7, #32]
 80014d6:	f7ff fc63 	bl	8000da0 <SD_RxDataBlock>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d02b      	beq.n	8001538 <SD_disk_ioctl+0x238>
 80014e0:	2300      	movs	r3, #0
 80014e2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014e6:	e027      	b.n	8001538 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014e8:	2100      	movs	r1, #0
 80014ea:	207a      	movs	r0, #122	@ 0x7a
 80014ec:	f7ff fcc9 	bl	8000e82 <SD_SendCmd>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d116      	bne.n	8001524 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80014f6:	2300      	movs	r3, #0
 80014f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014fc:	e00b      	b.n	8001516 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80014fe:	6a3c      	ldr	r4, [r7, #32]
 8001500:	1c63      	adds	r3, r4, #1
 8001502:	623b      	str	r3, [r7, #32]
 8001504:	f7ff fbae 	bl	8000c64 <SPI_RxByte>
 8001508:	4603      	mov	r3, r0
 800150a:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 800150c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001510:	3301      	adds	r3, #1
 8001512:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8001516:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800151a:	2b03      	cmp	r3, #3
 800151c:	d9ef      	bls.n	80014fe <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8001524:	2304      	movs	r3, #4
 8001526:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800152a:	e006      	b.n	800153a <SD_disk_ioctl+0x23a>
      break;
 800152c:	bf00      	nop
 800152e:	e004      	b.n	800153a <SD_disk_ioctl+0x23a>
      break;
 8001530:	bf00      	nop
 8001532:	e002      	b.n	800153a <SD_disk_ioctl+0x23a>
      break;
 8001534:	bf00      	nop
 8001536:	e000      	b.n	800153a <SD_disk_ioctl+0x23a>
      break;
 8001538:	bf00      	nop
    }

    DESELECT();
 800153a:	f7ff fb4f 	bl	8000bdc <DESELECT>
    SPI_RxByte();
 800153e:	f7ff fb91 	bl	8000c64 <SPI_RxByte>
  }

  return res;
 8001542:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001546:	4618      	mov	r0, r3
 8001548:	372c      	adds	r7, #44	@ 0x2c
 800154a:	46bd      	mov	sp, r7
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	bf00      	nop
 8001550:	20000000 	.word	0x20000000

08001554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("start\r\n");
 8001558:	480f      	ldr	r0, [pc, #60]	@ (8001598 <main+0x44>)
 800155a:	f005 ffc3 	bl	80074e4 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800155e:	f000 fd4f 	bl	8002000 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001562:	f000 f81f 	bl	80015a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001566:	f000 f91b 	bl	80017a0 <MX_GPIO_Init>
  MX_SPI2_Init();
 800156a:	f000 f8ad 	bl	80016c8 <MX_SPI2_Init>
  MX_FATFS_Init();
 800156e:	f002 fbed 	bl	8003d4c <MX_FATFS_Init>
  MX_DAC_Init();
 8001572:	f000 f875 	bl	8001660 <MX_DAC_Init>
  MX_TIM6_Init();
 8001576:	f000 f8dd 	bl	8001734 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 800157a:	f000 f9e5 	bl	8001948 <process_SD_card>

  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 800157e:	2100      	movs	r1, #0
 8001580:	4806      	ldr	r0, [pc, #24]	@ (800159c <main+0x48>)
 8001582:	f000 feda 	bl	800233a <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8001586:	2110      	movs	r1, #16
 8001588:	4804      	ldr	r0, [pc, #16]	@ (800159c <main+0x48>)
 800158a:	f000 fed6 	bl	800233a <HAL_DAC_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 800158e:	4804      	ldr	r0, [pc, #16]	@ (80015a0 <main+0x4c>)
 8001590:	f002 fa44 	bl	8003a1c <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001594:	bf00      	nop
 8001596:	e7fd      	b.n	8001594 <main+0x40>
 8001598:	080081c4 	.word	0x080081c4
 800159c:	200000a4 	.word	0x200000a4
 80015a0:	20000110 	.word	0x20000110

080015a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b094      	sub	sp, #80	@ 0x50
 80015a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015aa:	f107 031c 	add.w	r3, r7, #28
 80015ae:	2234      	movs	r2, #52	@ 0x34
 80015b0:	2100      	movs	r1, #0
 80015b2:	4618      	mov	r0, r3
 80015b4:	f006 f876 	bl	80076a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b8:	f107 0308 	add.w	r3, r7, #8
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
 80015c2:	609a      	str	r2, [r3, #8]
 80015c4:	60da      	str	r2, [r3, #12]
 80015c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	4b22      	ldr	r3, [pc, #136]	@ (8001658 <SystemClock_Config+0xb4>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d0:	4a21      	ldr	r2, [pc, #132]	@ (8001658 <SystemClock_Config+0xb4>)
 80015d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d8:	4b1f      	ldr	r3, [pc, #124]	@ (8001658 <SystemClock_Config+0xb4>)
 80015da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e0:	607b      	str	r3, [r7, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015e4:	2300      	movs	r3, #0
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	4b1c      	ldr	r3, [pc, #112]	@ (800165c <SystemClock_Config+0xb8>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a1b      	ldr	r2, [pc, #108]	@ (800165c <SystemClock_Config+0xb8>)
 80015ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b19      	ldr	r3, [pc, #100]	@ (800165c <SystemClock_Config+0xb8>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800160c:	2300      	movs	r3, #0
 800160e:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 031c 	add.w	r3, r7, #28
 8001614:	4618      	mov	r0, r3
 8001616:	f001 fadb 	bl	8002bd0 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001620:	f000 faa2 	bl	8001b68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001628:	2300      	movs	r3, #0
 800162a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001630:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001634:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001636:	2300      	movs	r3, #0
 8001638:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800163a:	f107 0308 	add.w	r3, r7, #8
 800163e:	2100      	movs	r1, #0
 8001640:	4618      	mov	r0, r3
 8001642:	f001 f8d9 	bl	80027f8 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xac>
  {
    Error_Handler();
 800164c:	f000 fa8c 	bl	8001b68 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3750      	adds	r7, #80	@ 0x50
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000

08001660 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001666:	463b      	mov	r3, r7
 8001668:	2200      	movs	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
 800166c:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800166e:	4b14      	ldr	r3, [pc, #80]	@ (80016c0 <MX_DAC_Init+0x60>)
 8001670:	4a14      	ldr	r2, [pc, #80]	@ (80016c4 <MX_DAC_Init+0x64>)
 8001672:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001674:	4812      	ldr	r0, [pc, #72]	@ (80016c0 <MX_DAC_Init+0x60>)
 8001676:	f000 fe3e 	bl	80022f6 <HAL_DAC_Init>
 800167a:	4603      	mov	r3, r0
 800167c:	2b00      	cmp	r3, #0
 800167e:	d001      	beq.n	8001684 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001680:	f000 fa72 	bl	8001b68 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001684:	2300      	movs	r3, #0
 8001686:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800168c:	463b      	mov	r3, r7
 800168e:	2200      	movs	r2, #0
 8001690:	4619      	mov	r1, r3
 8001692:	480b      	ldr	r0, [pc, #44]	@ (80016c0 <MX_DAC_Init+0x60>)
 8001694:	f000 fea8 	bl	80023e8 <HAL_DAC_ConfigChannel>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800169e:	f000 fa63 	bl	8001b68 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80016a2:	463b      	mov	r3, r7
 80016a4:	2210      	movs	r2, #16
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	@ (80016c0 <MX_DAC_Init+0x60>)
 80016aa:	f000 fe9d 	bl	80023e8 <HAL_DAC_ConfigChannel>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_DAC_Init+0x58>
  {
    Error_Handler();
 80016b4:	f000 fa58 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3708      	adds	r7, #8
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000a4 	.word	0x200000a4
 80016c4:	40007400 	.word	0x40007400

080016c8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80016cc:	4b17      	ldr	r3, [pc, #92]	@ (800172c <MX_SPI2_Init+0x64>)
 80016ce:	4a18      	ldr	r2, [pc, #96]	@ (8001730 <MX_SPI2_Init+0x68>)
 80016d0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80016d2:	4b16      	ldr	r3, [pc, #88]	@ (800172c <MX_SPI2_Init+0x64>)
 80016d4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016d8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80016da:	4b14      	ldr	r3, [pc, #80]	@ (800172c <MX_SPI2_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <MX_SPI2_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016e6:	4b11      	ldr	r3, [pc, #68]	@ (800172c <MX_SPI2_Init+0x64>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	@ (800172c <MX_SPI2_Init+0x64>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <MX_SPI2_Init+0x64>)
 80016f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016f8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80016fa:	4b0c      	ldr	r3, [pc, #48]	@ (800172c <MX_SPI2_Init+0x64>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001700:	4b0a      	ldr	r3, [pc, #40]	@ (800172c <MX_SPI2_Init+0x64>)
 8001702:	2200      	movs	r2, #0
 8001704:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001706:	4b09      	ldr	r3, [pc, #36]	@ (800172c <MX_SPI2_Init+0x64>)
 8001708:	2200      	movs	r2, #0
 800170a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	@ (800172c <MX_SPI2_Init+0x64>)
 800170e:	2200      	movs	r2, #0
 8001710:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <MX_SPI2_Init+0x64>)
 8001714:	220a      	movs	r2, #10
 8001716:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	@ (800172c <MX_SPI2_Init+0x64>)
 800171a:	f001 fcdd 	bl	80030d8 <HAL_SPI_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001724:	f000 fa20 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	200000b8 	.word	0x200000b8
 8001730:	40003800 	.word	0x40003800

08001734 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800173a:	463b      	mov	r3, r7
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001742:	4b15      	ldr	r3, [pc, #84]	@ (8001798 <MX_TIM6_Init+0x64>)
 8001744:	4a15      	ldr	r2, [pc, #84]	@ (800179c <MX_TIM6_Init+0x68>)
 8001746:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8001748:	4b13      	ldr	r3, [pc, #76]	@ (8001798 <MX_TIM6_Init+0x64>)
 800174a:	2200      	movs	r2, #0
 800174c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800174e:	4b12      	ldr	r3, [pc, #72]	@ (8001798 <MX_TIM6_Init+0x64>)
 8001750:	2200      	movs	r2, #0
 8001752:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001754:	4b10      	ldr	r3, [pc, #64]	@ (8001798 <MX_TIM6_Init+0x64>)
 8001756:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800175a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175c:	4b0e      	ldr	r3, [pc, #56]	@ (8001798 <MX_TIM6_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001762:	480d      	ldr	r0, [pc, #52]	@ (8001798 <MX_TIM6_Init+0x64>)
 8001764:	f002 f90a 	bl	800397c <HAL_TIM_Base_Init>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 800176e:	f000 f9fb 	bl	8001b68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001772:	2300      	movs	r3, #0
 8001774:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800177a:	463b      	mov	r3, r7
 800177c:	4619      	mov	r1, r3
 800177e:	4806      	ldr	r0, [pc, #24]	@ (8001798 <MX_TIM6_Init+0x64>)
 8001780:	f002 fa68 	bl	8003c54 <HAL_TIMEx_MasterConfigSynchronization>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800178a:	f000 f9ed 	bl	8001b68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800178e:	bf00      	nop
 8001790:	3708      	adds	r7, #8
 8001792:	46bd      	mov	sp, r7
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000110 	.word	0x20000110
 800179c:	40001000 	.word	0x40001000

080017a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b08c      	sub	sp, #48	@ 0x30
 80017a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a6:	f107 031c 	add.w	r3, r7, #28
 80017aa:	2200      	movs	r2, #0
 80017ac:	601a      	str	r2, [r3, #0]
 80017ae:	605a      	str	r2, [r3, #4]
 80017b0:	609a      	str	r2, [r3, #8]
 80017b2:	60da      	str	r2, [r3, #12]
 80017b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	61bb      	str	r3, [r7, #24]
 80017ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017be:	4a5c      	ldr	r2, [pc, #368]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	61bb      	str	r3, [r7, #24]
 80017d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
 80017d6:	4b56      	ldr	r3, [pc, #344]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a55      	ldr	r2, [pc, #340]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b53      	ldr	r3, [pc, #332]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ea:	617b      	str	r3, [r7, #20]
 80017ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001930 <MX_GPIO_Init+0x190>)
 80017f8:	f043 0301 	orr.w	r3, r3, #1
 80017fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80017fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	4b48      	ldr	r3, [pc, #288]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	4a47      	ldr	r2, [pc, #284]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001814:	f043 0302 	orr.w	r3, r3, #2
 8001818:	6313      	str	r3, [r2, #48]	@ 0x30
 800181a:	4b45      	ldr	r3, [pc, #276]	@ (8001930 <MX_GPIO_Init+0x190>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800181e:	f003 0302 	and.w	r3, r3, #2
 8001822:	60fb      	str	r3, [r7, #12]
 8001824:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60bb      	str	r3, [r7, #8]
 800182a:	4b41      	ldr	r3, [pc, #260]	@ (8001930 <MX_GPIO_Init+0x190>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800182e:	4a40      	ldr	r2, [pc, #256]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001830:	f043 0308 	orr.w	r3, r3, #8
 8001834:	6313      	str	r3, [r2, #48]	@ 0x30
 8001836:	4b3e      	ldr	r3, [pc, #248]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183a:	f003 0308 	and.w	r3, r3, #8
 800183e:	60bb      	str	r3, [r7, #8]
 8001840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001842:	2300      	movs	r3, #0
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	4b3a      	ldr	r3, [pc, #232]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	4a39      	ldr	r2, [pc, #228]	@ (8001930 <MX_GPIO_Init+0x190>)
 800184c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001850:	6313      	str	r3, [r2, #48]	@ 0x30
 8001852:	4b37      	ldr	r3, [pc, #220]	@ (8001930 <MX_GPIO_Init+0x190>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800185a:	607b      	str	r3, [r7, #4]
 800185c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_15|LD2_Pin, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f24c 0181 	movw	r1, #49281	@ 0xc081
 8001864:	4833      	ldr	r0, [pc, #204]	@ (8001934 <MX_GPIO_Init+0x194>)
 8001866:	f000 ffad 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800186a:	2200      	movs	r2, #0
 800186c:	2140      	movs	r1, #64	@ 0x40
 800186e:	4832      	ldr	r0, [pc, #200]	@ (8001938 <MX_GPIO_Init+0x198>)
 8001870:	f000 ffa8 	bl	80027c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001874:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001878:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800187a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800187e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001884:	f107 031c 	add.w	r3, r7, #28
 8001888:	4619      	mov	r1, r3
 800188a:	482c      	ldr	r0, [pc, #176]	@ (800193c <MX_GPIO_Init+0x19c>)
 800188c:	f000 fe06 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB15 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_15|LD2_Pin;
 8001890:	f24c 0381 	movw	r3, #49281	@ 0xc081
 8001894:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001896:	2301      	movs	r3, #1
 8001898:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189a:	2300      	movs	r3, #0
 800189c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800189e:	2300      	movs	r3, #0
 80018a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a2:	f107 031c 	add.w	r3, r7, #28
 80018a6:	4619      	mov	r1, r3
 80018a8:	4822      	ldr	r0, [pc, #136]	@ (8001934 <MX_GPIO_Init+0x194>)
 80018aa:	f000 fdf7 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80018ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	2302      	movs	r3, #2
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018bc:	2303      	movs	r3, #3
 80018be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80018c0:	2307      	movs	r3, #7
 80018c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018c4:	f107 031c 	add.w	r3, r7, #28
 80018c8:	4619      	mov	r1, r3
 80018ca:	481d      	ldr	r0, [pc, #116]	@ (8001940 <MX_GPIO_Init+0x1a0>)
 80018cc:	f000 fde6 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80018d0:	2340      	movs	r3, #64	@ 0x40
 80018d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80018d4:	2301      	movs	r3, #1
 80018d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d8:	2300      	movs	r3, #0
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018dc:	2300      	movs	r3, #0
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80018e0:	f107 031c 	add.w	r3, r7, #28
 80018e4:	4619      	mov	r1, r3
 80018e6:	4814      	ldr	r0, [pc, #80]	@ (8001938 <MX_GPIO_Init+0x198>)
 80018e8:	f000 fdd8 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80018ec:	2380      	movs	r3, #128	@ 0x80
 80018ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018f0:	2300      	movs	r3, #0
 80018f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f4:	2300      	movs	r3, #0
 80018f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018f8:	f107 031c 	add.w	r3, r7, #28
 80018fc:	4619      	mov	r1, r3
 80018fe:	480e      	ldr	r0, [pc, #56]	@ (8001938 <MX_GPIO_Init+0x198>)
 8001900:	f000 fdcc 	bl	800249c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001904:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001908:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190a:	2302      	movs	r3, #2
 800190c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800190e:	2300      	movs	r3, #0
 8001910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001912:	2303      	movs	r3, #3
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001916:	230a      	movs	r3, #10
 8001918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191a:	f107 031c 	add.w	r3, r7, #28
 800191e:	4619      	mov	r1, r3
 8001920:	4808      	ldr	r0, [pc, #32]	@ (8001944 <MX_GPIO_Init+0x1a4>)
 8001922:	f000 fdbb 	bl	800249c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001926:	bf00      	nop
 8001928:	3730      	adds	r7, #48	@ 0x30
 800192a:	46bd      	mov	sp, r7
 800192c:	bd80      	pop	{r7, pc}
 800192e:	bf00      	nop
 8001930:	40023800 	.word	0x40023800
 8001934:	40020400 	.word	0x40020400
 8001938:	40021800 	.word	0x40021800
 800193c:	40020800 	.word	0x40020800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40020000 	.word	0x40020000

08001948 <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 8001948:	b580      	push	{r7, lr}
 800194a:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 800194e:	b088      	sub	sp, #32
 8001950:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001952:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001956:	3b04      	subs	r3, #4
 8001958:	2201      	movs	r2, #1
 800195a:	4976      	ldr	r1, [pc, #472]	@ (8001b34 <process_SD_card+0x1ec>)
 800195c:	4618      	mov	r0, r3
 800195e:	f004 fc3d 	bl	80061dc <f_mount>
 8001962:	4603      	mov	r3, r0
 8001964:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001968:	f102 021f 	add.w	r2, r2, #31
 800196c:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 800196e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001972:	f103 031f 	add.w	r3, r3, #31
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d009      	beq.n	8001990 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 800197c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001980:	f103 031f 	add.w	r3, r3, #31
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	4619      	mov	r1, r3
 8001988:	486b      	ldr	r0, [pc, #428]	@ (8001b38 <process_SD_card+0x1f0>)
 800198a:	f005 fd43 	bl	8007414 <iprintf>
      break;
 800198e:	e0c2      	b.n	8001b16 <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001990:	486a      	ldr	r0, [pc, #424]	@ (8001b3c <process_SD_card+0x1f4>)
 8001992:	f005 fda7 	bl	80074e4 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 8001996:	f107 0220 	add.w	r2, r7, #32
 800199a:	3a1c      	subs	r2, #28
 800199c:	f107 0320 	add.w	r3, r7, #32
 80019a0:	3b20      	subs	r3, #32
 80019a2:	4619      	mov	r1, r3
 80019a4:	4863      	ldr	r0, [pc, #396]	@ (8001b34 <process_SD_card+0x1ec>)
 80019a6:	f005 f9c2 	bl	8006d2e <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80019aa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80019ae:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80019b2:	69db      	ldr	r3, [r3, #28]
 80019b4:	3b02      	subs	r3, #2
 80019b6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80019ba:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 80019be:	8952      	ldrh	r2, [r2, #10]
 80019c0:	fb02 f303 	mul.w	r3, r2, r3
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fee7 	bl	8000798 <__aeabi_ui2d>
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001b40 <process_SD_card+0x1f8>)
 80019d0:	f7fe fc76 	bl	80002c0 <__aeabi_dmul>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7fe ff56 	bl	800088c <__aeabi_d2uiz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80019e6:	f102 0218 	add.w	r2, r2, #24
 80019ea:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80019ec:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80019f0:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80019f4:	895b      	ldrh	r3, [r3, #10]
 80019f6:	461a      	mov	r2, r3
 80019f8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80019fc:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001a00:	fb02 f303 	mul.w	r3, r2, r3
 8001a04:	4618      	mov	r0, r3
 8001a06:	f7fe fec7 	bl	8000798 <__aeabi_ui2d>
 8001a0a:	f04f 0200 	mov.w	r2, #0
 8001a0e:	4b4c      	ldr	r3, [pc, #304]	@ (8001b40 <process_SD_card+0x1f8>)
 8001a10:	f7fe fc56 	bl	80002c0 <__aeabi_dmul>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f7fe ff36 	bl	800088c <__aeabi_d2uiz>
 8001a20:	4603      	mov	r3, r0
 8001a22:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001a26:	f102 0214 	add.w	r2, r2, #20
 8001a2a:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8001a2c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a30:	f103 0314 	add.w	r3, r3, #20
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a3a:	f103 0318 	add.w	r3, r3, #24
 8001a3e:	6819      	ldr	r1, [r3, #0]
 8001a40:	4840      	ldr	r0, [pc, #256]	@ (8001b44 <process_SD_card+0x1fc>)
 8001a42:	f005 fce7 	bl	8007414 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001a46:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a4a:	3b34      	subs	r3, #52	@ 0x34
 8001a4c:	220b      	movs	r2, #11
 8001a4e:	493e      	ldr	r1, [pc, #248]	@ (8001b48 <process_SD_card+0x200>)
 8001a50:	4618      	mov	r0, r3
 8001a52:	f004 fc09 	bl	8006268 <f_open>
 8001a56:	4603      	mov	r3, r0
 8001a58:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001a5c:	f102 021f 	add.w	r2, r2, #31
 8001a60:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001a62:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a66:	f103 031f 	add.w	r3, r3, #31
 8001a6a:	781b      	ldrb	r3, [r3, #0]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d009      	beq.n	8001a84 <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001a70:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001a74:	f103 031f 	add.w	r3, r3, #31
 8001a78:	781b      	ldrb	r3, [r3, #0]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4833      	ldr	r0, [pc, #204]	@ (8001b4c <process_SD_card+0x204>)
 8001a7e:	f005 fcc9 	bl	8007414 <iprintf>
      break;
 8001a82:	e048      	b.n	8001b16 <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 8001a84:	4832      	ldr	r0, [pc, #200]	@ (8001b50 <process_SD_card+0x208>)
 8001a86:	f005 fd2d 	bl	80074e4 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 8001a8a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a8e:	3b34      	subs	r3, #52	@ 0x34
 8001a90:	4619      	mov	r1, r3
 8001a92:	4830      	ldr	r0, [pc, #192]	@ (8001b54 <process_SD_card+0x20c>)
 8001a94:	f005 fab5 	bl	8007002 <f_puts>

    //close your file
    f_close(&fil);
 8001a98:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a9c:	3b34      	subs	r3, #52	@ 0x34
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f005 f91b 	bl	8006cda <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001aa4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001aa8:	3b34      	subs	r3, #52	@ 0x34
 8001aaa:	2201      	movs	r2, #1
 8001aac:	4926      	ldr	r1, [pc, #152]	@ (8001b48 <process_SD_card+0x200>)
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f004 fbda 	bl	8006268 <f_open>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001aba:	f102 021f 	add.w	r2, r2, #31
 8001abe:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001ac0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001ac4:	f103 031f 	add.w	r3, r3, #31
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d009      	beq.n	8001ae2 <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 8001ace:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001ad2:	f103 031f 	add.w	r3, r3, #31
 8001ad6:	781b      	ldrb	r3, [r3, #0]
 8001ad8:	4619      	mov	r1, r3
 8001ada:	481f      	ldr	r0, [pc, #124]	@ (8001b58 <process_SD_card+0x210>)
 8001adc:	f005 fc9a 	bl	8007414 <iprintf>
      break;
 8001ae0:	e019      	b.n	8001b16 <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 8001ae2:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 8001ae6:	3a34      	subs	r2, #52	@ 0x34
 8001ae8:	f107 0320 	add.w	r3, r7, #32
 8001aec:	3b18      	subs	r3, #24
 8001aee:	2164      	movs	r1, #100	@ 0x64
 8001af0:	4618      	mov	r0, r3
 8001af2:	f005 f9d1 	bl	8006e98 <f_gets>

    printf("Read Data : %s\n", buf);
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	3b18      	subs	r3, #24
 8001afc:	4619      	mov	r1, r3
 8001afe:	4817      	ldr	r0, [pc, #92]	@ (8001b5c <process_SD_card+0x214>)
 8001b00:	f005 fc88 	bl	8007414 <iprintf>

    //close your file
    f_close(&fil);
 8001b04:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001b08:	3b34      	subs	r3, #52	@ 0x34
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f005 f8e5 	bl	8006cda <f_close>
    printf("Closing File!!!\r\n");
 8001b10:	4813      	ldr	r0, [pc, #76]	@ (8001b60 <process_SD_card+0x218>)
 8001b12:	f005 fce7 	bl	80074e4 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001b16:	2200      	movs	r2, #0
 8001b18:	4906      	ldr	r1, [pc, #24]	@ (8001b34 <process_SD_card+0x1ec>)
 8001b1a:	2000      	movs	r0, #0
 8001b1c:	f004 fb5e 	bl	80061dc <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8001b20:	4810      	ldr	r0, [pc, #64]	@ (8001b64 <process_SD_card+0x21c>)
 8001b22:	f005 fcdf 	bl	80074e4 <puts>
}
 8001b26:	bf00      	nop
 8001b28:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8001b2c:	3720      	adds	r7, #32
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	080081cc 	.word	0x080081cc
 8001b38:	080081d0 	.word	0x080081d0
 8001b3c:	080081ec 	.word	0x080081ec
 8001b40:	3fe00000 	.word	0x3fe00000
 8001b44:	08008210 	.word	0x08008210
 8001b48:	08008240 	.word	0x08008240
 8001b4c:	08008250 	.word	0x08008250
 8001b50:	08008274 	.word	0x08008274
 8001b54:	08008288 	.word	0x08008288
 8001b58:	080082a0 	.word	0x080082a0
 8001b5c:	080082bc 	.word	0x080082bc
 8001b60:	080082cc 	.word	0x080082cc
 8001b64:	080082e0 	.word	0x080082e0

08001b68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b6c:	b672      	cpsid	i
}
 8001b6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <Error_Handler+0x8>

08001b74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	607b      	str	r3, [r7, #4]
 8001b7e:	4b10      	ldr	r3, [pc, #64]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b82:	4a0f      	ldr	r2, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b92:	607b      	str	r3, [r7, #4]
 8001b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	603b      	str	r3, [r7, #0]
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001b9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x4c>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40023800 	.word	0x40023800

08001bc4 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b08a      	sub	sp, #40	@ 0x28
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 0314 	add.w	r3, r7, #20
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a17      	ldr	r2, [pc, #92]	@ (8001c40 <HAL_DAC_MspInit+0x7c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d127      	bne.n	8001c36 <HAL_DAC_MspInit+0x72>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	613b      	str	r3, [r7, #16]
 8001bea:	4b16      	ldr	r3, [pc, #88]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bee:	4a15      	ldr	r2, [pc, #84]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001bf0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001bf6:	4b13      	ldr	r3, [pc, #76]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001bfa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001bfe:	613b      	str	r3, [r7, #16]
 8001c00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	60fb      	str	r3, [r7, #12]
 8001c06:	4b0f      	ldr	r3, [pc, #60]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c0a:	4a0e      	ldr	r2, [pc, #56]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001c0c:	f043 0301 	orr.w	r3, r3, #1
 8001c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c12:	4b0c      	ldr	r3, [pc, #48]	@ (8001c44 <HAL_DAC_MspInit+0x80>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c16:	f003 0301 	and.w	r3, r3, #1
 8001c1a:	60fb      	str	r3, [r7, #12]
 8001c1c:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001c1e:	2330      	movs	r3, #48	@ 0x30
 8001c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001c22:	2303      	movs	r3, #3
 8001c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4805      	ldr	r0, [pc, #20]	@ (8001c48 <HAL_DAC_MspInit+0x84>)
 8001c32:	f000 fc33 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE END DAC_MspInit 1 */

  }

}
 8001c36:	bf00      	nop
 8001c38:	3728      	adds	r7, #40	@ 0x28
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40007400 	.word	0x40007400
 8001c44:	40023800 	.word	0x40023800
 8001c48:	40020000 	.word	0x40020000

08001c4c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b08a      	sub	sp, #40	@ 0x28
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c54:	f107 0314 	add.w	r3, r7, #20
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
 8001c5c:	605a      	str	r2, [r3, #4]
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	60da      	str	r2, [r3, #12]
 8001c62:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a28      	ldr	r2, [pc, #160]	@ (8001d0c <HAL_SPI_MspInit+0xc0>)
 8001c6a:	4293      	cmp	r3, r2
 8001c6c:	d14a      	bne.n	8001d04 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	4a26      	ldr	r2, [pc, #152]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c86:	613b      	str	r3, [r7, #16]
 8001c88:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	60fb      	str	r3, [r7, #12]
 8001c8e:	4b20      	ldr	r3, [pc, #128]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c92:	4a1f      	ldr	r2, [pc, #124]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c94:	f043 0304 	orr.w	r3, r3, #4
 8001c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c9a:	4b1d      	ldr	r3, [pc, #116]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	60fb      	str	r3, [r7, #12]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	60bb      	str	r3, [r7, #8]
 8001caa:	4b19      	ldr	r3, [pc, #100]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cae:	4a18      	ldr	r2, [pc, #96]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cb0:	f043 0302 	orr.w	r3, r3, #2
 8001cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cb6:	4b16      	ldr	r3, [pc, #88]	@ (8001d10 <HAL_SPI_MspInit+0xc4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60bb      	str	r3, [r7, #8]
 8001cc0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001cc2:	230c      	movs	r3, #12
 8001cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cc6:	2302      	movs	r3, #2
 8001cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cce:	2303      	movs	r3, #3
 8001cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cd2:	2305      	movs	r3, #5
 8001cd4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001cd6:	f107 0314 	add.w	r3, r7, #20
 8001cda:	4619      	mov	r1, r3
 8001cdc:	480d      	ldr	r0, [pc, #52]	@ (8001d14 <HAL_SPI_MspInit+0xc8>)
 8001cde:	f000 fbdd 	bl	800249c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ce2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ce6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cec:	2300      	movs	r3, #0
 8001cee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cf0:	2303      	movs	r3, #3
 8001cf2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001cf4:	2305      	movs	r3, #5
 8001cf6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4806      	ldr	r0, [pc, #24]	@ (8001d18 <HAL_SPI_MspInit+0xcc>)
 8001d00:	f000 fbcc 	bl	800249c <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001d04:	bf00      	nop
 8001d06:	3728      	adds	r7, #40	@ 0x28
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	bd80      	pop	{r7, pc}
 8001d0c:	40003800 	.word	0x40003800
 8001d10:	40023800 	.word	0x40023800
 8001d14:	40020800 	.word	0x40020800
 8001d18:	40020400 	.word	0x40020400

08001d1c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b085      	sub	sp, #20
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a0b      	ldr	r2, [pc, #44]	@ (8001d58 <HAL_TIM_Base_MspInit+0x3c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d10d      	bne.n	8001d4a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b0a      	ldr	r3, [pc, #40]	@ (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d36:	4a09      	ldr	r2, [pc, #36]	@ (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d38:	f043 0310 	orr.w	r3, r3, #16
 8001d3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001d3e:	4b07      	ldr	r3, [pc, #28]	@ (8001d5c <HAL_TIM_Base_MspInit+0x40>)
 8001d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d42:	f003 0310 	and.w	r3, r3, #16
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM6_MspInit 1 */

  }

}
 8001d4a:	bf00      	nop
 8001d4c:	3714      	adds	r7, #20
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr
 8001d56:	bf00      	nop
 8001d58:	40001000 	.word	0x40001000
 8001d5c:	40023800 	.word	0x40023800

08001d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d64:	bf00      	nop
 8001d66:	e7fd      	b.n	8001d64 <NMI_Handler+0x4>

08001d68 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <HardFault_Handler+0x4>

08001d70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d74:	bf00      	nop
 8001d76:	e7fd      	b.n	8001d74 <MemManage_Handler+0x4>

08001d78 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d7c:	bf00      	nop
 8001d7e:	e7fd      	b.n	8001d7c <BusFault_Handler+0x4>

08001d80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d80:	b480      	push	{r7}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d84:	bf00      	nop
 8001d86:	e7fd      	b.n	8001d84 <UsageFault_Handler+0x4>

08001d88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d96:	b480      	push	{r7}
 8001d98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr

08001da4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001da4:	b480      	push	{r7}
 8001da6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001da8:	bf00      	nop
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001db8:	4b0b      	ldr	r3, [pc, #44]	@ (8001de8 <SysTick_Handler+0x34>)
 8001dba:	881b      	ldrh	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d005      	beq.n	8001dcc <SysTick_Handler+0x18>
	  Timer1--;
 8001dc0:	4b09      	ldr	r3, [pc, #36]	@ (8001de8 <SysTick_Handler+0x34>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	b29a      	uxth	r2, r3
 8001dc8:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <SysTick_Handler+0x34>)
 8001dca:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001dcc:	4b07      	ldr	r3, [pc, #28]	@ (8001dec <SysTick_Handler+0x38>)
 8001dce:	881b      	ldrh	r3, [r3, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <SysTick_Handler+0x2c>
	  Timer2--;
 8001dd4:	4b05      	ldr	r3, [pc, #20]	@ (8001dec <SysTick_Handler+0x38>)
 8001dd6:	881b      	ldrh	r3, [r3, #0]
 8001dd8:	3b01      	subs	r3, #1
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	4b03      	ldr	r3, [pc, #12]	@ (8001dec <SysTick_Handler+0x38>)
 8001dde:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001de0:	f000 f960 	bl	80020a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001de4:	bf00      	nop
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	2000009c 	.word	0x2000009c
 8001dec:	2000009e 	.word	0x2000009e

08001df0 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001dfa:	4b0f      	ldr	r3, [pc, #60]	@ (8001e38 <ITM_SendChar+0x48>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a0e      	ldr	r2, [pc, #56]	@ (8001e38 <ITM_SendChar+0x48>)
 8001e00:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001e04:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001e06:	4b0d      	ldr	r3, [pc, #52]	@ (8001e3c <ITM_SendChar+0x4c>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a0c      	ldr	r2, [pc, #48]	@ (8001e3c <ITM_SendChar+0x4c>)
 8001e0c:	f043 0301 	orr.w	r3, r3, #1
 8001e10:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001e12:	bf00      	nop
 8001e14:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d0f8      	beq.n	8001e14 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001e22:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001e26:	79fb      	ldrb	r3, [r7, #7]
 8001e28:	6013      	str	r3, [r2, #0]
}
 8001e2a:	bf00      	nop
 8001e2c:	370c      	adds	r7, #12
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	e000edfc 	.word	0xe000edfc
 8001e3c:	e0000e00 	.word	0xe0000e00

08001e40 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	60f8      	str	r0, [r7, #12]
 8001e48:	60b9      	str	r1, [r7, #8]
 8001e4a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]
 8001e50:	e00a      	b.n	8001e68 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e52:	f3af 8000 	nop.w
 8001e56:	4601      	mov	r1, r0
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	1c5a      	adds	r2, r3, #1
 8001e5c:	60ba      	str	r2, [r7, #8]
 8001e5e:	b2ca      	uxtb	r2, r1
 8001e60:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	3301      	adds	r3, #1
 8001e66:	617b      	str	r3, [r7, #20]
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	dbf0      	blt.n	8001e52 <_read+0x12>
  }

  return len;
 8001e70:	687b      	ldr	r3, [r7, #4]
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}

08001e7a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e7a:	b580      	push	{r7, lr}
 8001e7c:	b086      	sub	sp, #24
 8001e7e:	af00      	add	r7, sp, #0
 8001e80:	60f8      	str	r0, [r7, #12]
 8001e82:	60b9      	str	r1, [r7, #8]
 8001e84:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e86:	2300      	movs	r3, #0
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	e009      	b.n	8001ea0 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001e8c:	68bb      	ldr	r3, [r7, #8]
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	60ba      	str	r2, [r7, #8]
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff ffab 	bl	8001df0 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	617b      	str	r3, [r7, #20]
 8001ea0:	697a      	ldr	r2, [r7, #20]
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	dbf1      	blt.n	8001e8c <_write+0x12>
  }
  return len;
 8001ea8:	687b      	ldr	r3, [r7, #4]
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	3718      	adds	r7, #24
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}

08001eb2 <_close>:

int _close(int file)
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b083      	sub	sp, #12
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001eba:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr

08001eca <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eca:	b480      	push	{r7}
 8001ecc:	b083      	sub	sp, #12
 8001ece:	af00      	add	r7, sp, #0
 8001ed0:	6078      	str	r0, [r7, #4]
 8001ed2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001eda:	605a      	str	r2, [r3, #4]
  return 0;
 8001edc:	2300      	movs	r3, #0
}
 8001ede:	4618      	mov	r0, r3
 8001ee0:	370c      	adds	r7, #12
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee8:	4770      	bx	lr

08001eea <_isatty>:

int _isatty(int file)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ef2:	2301      	movs	r3, #1
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b085      	sub	sp, #20
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	60b9      	str	r1, [r7, #8]
 8001f0a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f0c:	2300      	movs	r3, #0
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	3714      	adds	r7, #20
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f24:	4a14      	ldr	r2, [pc, #80]	@ (8001f78 <_sbrk+0x5c>)
 8001f26:	4b15      	ldr	r3, [pc, #84]	@ (8001f7c <_sbrk+0x60>)
 8001f28:	1ad3      	subs	r3, r2, r3
 8001f2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f30:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <_sbrk+0x64>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d102      	bne.n	8001f3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <_sbrk+0x64>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <_sbrk+0x68>)
 8001f3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <_sbrk+0x64>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	4413      	add	r3, r2
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	429a      	cmp	r2, r3
 8001f4a:	d207      	bcs.n	8001f5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f4c:	f005 fbf8 	bl	8007740 <__errno>
 8001f50:	4603      	mov	r3, r0
 8001f52:	220c      	movs	r2, #12
 8001f54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f56:	f04f 33ff 	mov.w	r3, #4294967295
 8001f5a:	e009      	b.n	8001f70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f5c:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <_sbrk+0x64>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f62:	4b07      	ldr	r3, [pc, #28]	@ (8001f80 <_sbrk+0x64>)
 8001f64:	681a      	ldr	r2, [r3, #0]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4413      	add	r3, r2
 8001f6a:	4a05      	ldr	r2, [pc, #20]	@ (8001f80 <_sbrk+0x64>)
 8001f6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f6e:	68fb      	ldr	r3, [r7, #12]
}
 8001f70:	4618      	mov	r0, r3
 8001f72:	3718      	adds	r7, #24
 8001f74:	46bd      	mov	sp, r7
 8001f76:	bd80      	pop	{r7, pc}
 8001f78:	20050000 	.word	0x20050000
 8001f7c:	00000400 	.word	0x00000400
 8001f80:	20000158 	.word	0x20000158
 8001f84:	200004e8 	.word	0x200004e8

08001f88 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001f8c:	4b06      	ldr	r3, [pc, #24]	@ (8001fa8 <SystemInit+0x20>)
 8001f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f92:	4a05      	ldr	r2, [pc, #20]	@ (8001fa8 <SystemInit+0x20>)
 8001f94:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f98:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f9c:	bf00      	nop
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr
 8001fa6:	bf00      	nop
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001fac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001fe4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001fb0:	f7ff ffea 	bl	8001f88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fb6:	490d      	ldr	r1, [pc, #52]	@ (8001fec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fb8:	4a0d      	ldr	r2, [pc, #52]	@ (8001ff0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fbc:	e002      	b.n	8001fc4 <LoopCopyDataInit>

08001fbe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fbe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fc2:	3304      	adds	r3, #4

08001fc4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fc4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fc6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fc8:	d3f9      	bcc.n	8001fbe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fca:	4a0a      	ldr	r2, [pc, #40]	@ (8001ff4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fcc:	4c0a      	ldr	r4, [pc, #40]	@ (8001ff8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fce:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd0:	e001      	b.n	8001fd6 <LoopFillZerobss>

08001fd2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fd2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fd4:	3204      	adds	r2, #4

08001fd6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fd6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fd8:	d3fb      	bcc.n	8001fd2 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001fda:	f005 fbb7 	bl	800774c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fde:	f7ff fab9 	bl	8001554 <main>
  bx  lr    
 8001fe2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001fe4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001fe8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fec:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001ff0:	080087e0 	.word	0x080087e0
  ldr r2, =_sbss
 8001ff4:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001ff8:	200004e8 	.word	0x200004e8

08001ffc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ffc:	e7fe      	b.n	8001ffc <ADC_IRQHandler>
	...

08002000 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002004:	4b0e      	ldr	r3, [pc, #56]	@ (8002040 <HAL_Init+0x40>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	4a0d      	ldr	r2, [pc, #52]	@ (8002040 <HAL_Init+0x40>)
 800200a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800200e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002010:	4b0b      	ldr	r3, [pc, #44]	@ (8002040 <HAL_Init+0x40>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0a      	ldr	r2, [pc, #40]	@ (8002040 <HAL_Init+0x40>)
 8002016:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800201a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800201c:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <HAL_Init+0x40>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	4a07      	ldr	r2, [pc, #28]	@ (8002040 <HAL_Init+0x40>)
 8002022:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002026:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002028:	2003      	movs	r0, #3
 800202a:	f000 f931 	bl	8002290 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800202e:	2000      	movs	r0, #0
 8002030:	f000 f808 	bl	8002044 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002034:	f7ff fd9e 	bl	8001b74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40023c00 	.word	0x40023c00

08002044 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800204c:	4b12      	ldr	r3, [pc, #72]	@ (8002098 <HAL_InitTick+0x54>)
 800204e:	681a      	ldr	r2, [r3, #0]
 8002050:	4b12      	ldr	r3, [pc, #72]	@ (800209c <HAL_InitTick+0x58>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800205a:	fbb3 f3f1 	udiv	r3, r3, r1
 800205e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002062:	4618      	mov	r0, r3
 8002064:	f000 f93b 	bl	80022de <HAL_SYSTICK_Config>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d001      	beq.n	8002072 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e00e      	b.n	8002090 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b0f      	cmp	r3, #15
 8002076:	d80a      	bhi.n	800208e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002078:	2200      	movs	r2, #0
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	f04f 30ff 	mov.w	r0, #4294967295
 8002080:	f000 f911 	bl	80022a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002084:	4a06      	ldr	r2, [pc, #24]	@ (80020a0 <HAL_InitTick+0x5c>)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	e000      	b.n	8002090 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
}
 8002090:	4618      	mov	r0, r3
 8002092:	3708      	adds	r7, #8
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}
 8002098:	20000004 	.word	0x20000004
 800209c:	2000000c 	.word	0x2000000c
 80020a0:	20000008 	.word	0x20000008

080020a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020a4:	b480      	push	{r7}
 80020a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020a8:	4b06      	ldr	r3, [pc, #24]	@ (80020c4 <HAL_IncTick+0x20>)
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	461a      	mov	r2, r3
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4413      	add	r3, r2
 80020b4:	4a04      	ldr	r2, [pc, #16]	@ (80020c8 <HAL_IncTick+0x24>)
 80020b6:	6013      	str	r3, [r2, #0]
}
 80020b8:	bf00      	nop
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	2000000c 	.word	0x2000000c
 80020c8:	2000015c 	.word	0x2000015c

080020cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  return uwTick;
 80020d0:	4b03      	ldr	r3, [pc, #12]	@ (80020e0 <HAL_GetTick+0x14>)
 80020d2:	681b      	ldr	r3, [r3, #0]
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	2000015c 	.word	0x2000015c

080020e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	b084      	sub	sp, #16
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80020ec:	f7ff ffee 	bl	80020cc <HAL_GetTick>
 80020f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020fc:	d005      	beq.n	800210a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80020fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002128 <HAL_Delay+0x44>)
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	4413      	add	r3, r2
 8002108:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800210a:	bf00      	nop
 800210c:	f7ff ffde 	bl	80020cc <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	68fa      	ldr	r2, [r7, #12]
 8002118:	429a      	cmp	r2, r3
 800211a:	d8f7      	bhi.n	800210c <HAL_Delay+0x28>
  {
  }
}
 800211c:	bf00      	nop
 800211e:	bf00      	nop
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	2000000c 	.word	0x2000000c

0800212c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800213c:	4b0c      	ldr	r3, [pc, #48]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 800213e:	68db      	ldr	r3, [r3, #12]
 8002140:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002142:	68ba      	ldr	r2, [r7, #8]
 8002144:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002148:	4013      	ands	r3, r2
 800214a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002154:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002158:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800215c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800215e:	4a04      	ldr	r2, [pc, #16]	@ (8002170 <__NVIC_SetPriorityGrouping+0x44>)
 8002160:	68bb      	ldr	r3, [r7, #8]
 8002162:	60d3      	str	r3, [r2, #12]
}
 8002164:	bf00      	nop
 8002166:	3714      	adds	r7, #20
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	e000ed00 	.word	0xe000ed00

08002174 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002174:	b480      	push	{r7}
 8002176:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002178:	4b04      	ldr	r3, [pc, #16]	@ (800218c <__NVIC_GetPriorityGrouping+0x18>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	f003 0307 	and.w	r3, r3, #7
}
 8002182:	4618      	mov	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218a:	4770      	bx	lr
 800218c:	e000ed00 	.word	0xe000ed00

08002190 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002190:	b480      	push	{r7}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	4603      	mov	r3, r0
 8002198:	6039      	str	r1, [r7, #0]
 800219a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800219c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	db0a      	blt.n	80021ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	490c      	ldr	r1, [pc, #48]	@ (80021dc <__NVIC_SetPriority+0x4c>)
 80021aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ae:	0112      	lsls	r2, r2, #4
 80021b0:	b2d2      	uxtb	r2, r2
 80021b2:	440b      	add	r3, r1
 80021b4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021b8:	e00a      	b.n	80021d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	b2da      	uxtb	r2, r3
 80021be:	4908      	ldr	r1, [pc, #32]	@ (80021e0 <__NVIC_SetPriority+0x50>)
 80021c0:	79fb      	ldrb	r3, [r7, #7]
 80021c2:	f003 030f 	and.w	r3, r3, #15
 80021c6:	3b04      	subs	r3, #4
 80021c8:	0112      	lsls	r2, r2, #4
 80021ca:	b2d2      	uxtb	r2, r2
 80021cc:	440b      	add	r3, r1
 80021ce:	761a      	strb	r2, [r3, #24]
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr
 80021dc:	e000e100 	.word	0xe000e100
 80021e0:	e000ed00 	.word	0xe000ed00

080021e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b089      	sub	sp, #36	@ 0x24
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	f003 0307 	and.w	r3, r3, #7
 80021f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f1c3 0307 	rsb	r3, r3, #7
 80021fe:	2b04      	cmp	r3, #4
 8002200:	bf28      	it	cs
 8002202:	2304      	movcs	r3, #4
 8002204:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002206:	69fb      	ldr	r3, [r7, #28]
 8002208:	3304      	adds	r3, #4
 800220a:	2b06      	cmp	r3, #6
 800220c:	d902      	bls.n	8002214 <NVIC_EncodePriority+0x30>
 800220e:	69fb      	ldr	r3, [r7, #28]
 8002210:	3b03      	subs	r3, #3
 8002212:	e000      	b.n	8002216 <NVIC_EncodePriority+0x32>
 8002214:	2300      	movs	r3, #0
 8002216:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002218:	f04f 32ff 	mov.w	r2, #4294967295
 800221c:	69bb      	ldr	r3, [r7, #24]
 800221e:	fa02 f303 	lsl.w	r3, r2, r3
 8002222:	43da      	mvns	r2, r3
 8002224:	68bb      	ldr	r3, [r7, #8]
 8002226:	401a      	ands	r2, r3
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	fa01 f303 	lsl.w	r3, r1, r3
 8002236:	43d9      	mvns	r1, r3
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	4313      	orrs	r3, r2
         );
}
 800223e:	4618      	mov	r0, r3
 8002240:	3724      	adds	r7, #36	@ 0x24
 8002242:	46bd      	mov	sp, r7
 8002244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002248:	4770      	bx	lr
	...

0800224c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	b082      	sub	sp, #8
 8002250:	af00      	add	r7, sp, #0
 8002252:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	3b01      	subs	r3, #1
 8002258:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800225c:	d301      	bcc.n	8002262 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800225e:	2301      	movs	r3, #1
 8002260:	e00f      	b.n	8002282 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002262:	4a0a      	ldr	r2, [pc, #40]	@ (800228c <SysTick_Config+0x40>)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3b01      	subs	r3, #1
 8002268:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800226a:	210f      	movs	r1, #15
 800226c:	f04f 30ff 	mov.w	r0, #4294967295
 8002270:	f7ff ff8e 	bl	8002190 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002274:	4b05      	ldr	r3, [pc, #20]	@ (800228c <SysTick_Config+0x40>)
 8002276:	2200      	movs	r2, #0
 8002278:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800227a:	4b04      	ldr	r3, [pc, #16]	@ (800228c <SysTick_Config+0x40>)
 800227c:	2207      	movs	r2, #7
 800227e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3708      	adds	r7, #8
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	e000e010 	.word	0xe000e010

08002290 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ff47 	bl	800212c <__NVIC_SetPriorityGrouping>
}
 800229e:	bf00      	nop
 80022a0:	3708      	adds	r7, #8
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}

080022a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022a6:	b580      	push	{r7, lr}
 80022a8:	b086      	sub	sp, #24
 80022aa:	af00      	add	r7, sp, #0
 80022ac:	4603      	mov	r3, r0
 80022ae:	60b9      	str	r1, [r7, #8]
 80022b0:	607a      	str	r2, [r7, #4]
 80022b2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022b4:	2300      	movs	r3, #0
 80022b6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022b8:	f7ff ff5c 	bl	8002174 <__NVIC_GetPriorityGrouping>
 80022bc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	68b9      	ldr	r1, [r7, #8]
 80022c2:	6978      	ldr	r0, [r7, #20]
 80022c4:	f7ff ff8e 	bl	80021e4 <NVIC_EncodePriority>
 80022c8:	4602      	mov	r2, r0
 80022ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022ce:	4611      	mov	r1, r2
 80022d0:	4618      	mov	r0, r3
 80022d2:	f7ff ff5d 	bl	8002190 <__NVIC_SetPriority>
}
 80022d6:	bf00      	nop
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}

080022de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80022de:	b580      	push	{r7, lr}
 80022e0:	b082      	sub	sp, #8
 80022e2:	af00      	add	r7, sp, #0
 80022e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff ffb0 	bl	800224c <SysTick_Config>
 80022ec:	4603      	mov	r3, r0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}

080022f6 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80022f6:	b580      	push	{r7, lr}
 80022f8:	b082      	sub	sp, #8
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d101      	bne.n	8002308 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002304:	2301      	movs	r3, #1
 8002306:	e014      	b.n	8002332 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	791b      	ldrb	r3, [r3, #4]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	2b00      	cmp	r3, #0
 8002310:	d105      	bne.n	800231e <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2200      	movs	r2, #0
 8002316:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff fc53 	bl	8001bc4 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	2202      	movs	r2, #2
 8002322:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2200      	movs	r2, #0
 8002328:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	2201      	movs	r2, #1
 800232e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}

0800233a <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800233a:	b480      	push	{r7}
 800233c:	b083      	sub	sp, #12
 800233e:	af00      	add	r7, sp, #0
 8002340:	6078      	str	r0, [r7, #4]
 8002342:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d101      	bne.n	800234e <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	e046      	b.n	80023dc <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	795b      	ldrb	r3, [r3, #5]
 8002352:	2b01      	cmp	r3, #1
 8002354:	d101      	bne.n	800235a <HAL_DAC_Start+0x20>
 8002356:	2302      	movs	r3, #2
 8002358:	e040      	b.n	80023dc <HAL_DAC_Start+0xa2>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2201      	movs	r2, #1
 800235e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2202      	movs	r2, #2
 8002364:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	6819      	ldr	r1, [r3, #0]
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	f003 0310 	and.w	r3, r3, #16
 8002372:	2201      	movs	r2, #1
 8002374:	409a      	lsls	r2, r3
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d10f      	bne.n	80023a4 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800238e:	2b3c      	cmp	r3, #60	@ 0x3c
 8002390:	d11d      	bne.n	80023ce <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	685a      	ldr	r2, [r3, #4]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f042 0201 	orr.w	r2, r2, #1
 80023a0:	605a      	str	r2, [r3, #4]
 80023a2:	e014      	b.n	80023ce <HAL_DAC_Start+0x94>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	f003 0310 	and.w	r3, r3, #16
 80023b4:	213c      	movs	r1, #60	@ 0x3c
 80023b6:	fa01 f303 	lsl.w	r3, r1, r3
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d107      	bne.n	80023ce <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f042 0202 	orr.w	r2, r2, #2
 80023cc:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2201      	movs	r2, #1
 80023d2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80023da:	2300      	movs	r3, #0
}
 80023dc:	4618      	mov	r0, r3
 80023de:	370c      	adds	r7, #12
 80023e0:	46bd      	mov	sp, r7
 80023e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e6:	4770      	bx	lr

080023e8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b089      	sub	sp, #36	@ 0x24
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d002      	beq.n	8002404 <HAL_DAC_ConfigChannel+0x1c>
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e042      	b.n	800248e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	795b      	ldrb	r3, [r3, #5]
 800240c:	2b01      	cmp	r3, #1
 800240e:	d101      	bne.n	8002414 <HAL_DAC_ConfigChannel+0x2c>
 8002410:	2302      	movs	r3, #2
 8002412:	e03c      	b.n	800248e <HAL_DAC_ConfigChannel+0xa6>
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2202      	movs	r2, #2
 800241e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	f003 0310 	and.w	r3, r3, #16
 800242e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8002432:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8002436:	43db      	mvns	r3, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4013      	ands	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	681a      	ldr	r2, [r3, #0]
 8002442:	68bb      	ldr	r3, [r7, #8]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	4313      	orrs	r3, r2
 8002448:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	f003 0310 	and.w	r3, r3, #16
 8002450:	697a      	ldr	r2, [r7, #20]
 8002452:	fa02 f303 	lsl.w	r3, r2, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4313      	orrs	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6819      	ldr	r1, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f003 0310 	and.w	r3, r3, #16
 8002470:	22c0      	movs	r2, #192	@ 0xc0
 8002472:	fa02 f303 	lsl.w	r3, r2, r3
 8002476:	43da      	mvns	r2, r3
 8002478:	68fb      	ldr	r3, [r7, #12]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	400a      	ands	r2, r1
 800247e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	2201      	movs	r2, #1
 8002484:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800248c:	7ffb      	ldrb	r3, [r7, #31]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3724      	adds	r7, #36	@ 0x24
 8002492:	46bd      	mov	sp, r7
 8002494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002498:	4770      	bx	lr
	...

0800249c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800249c:	b480      	push	{r7}
 800249e:	b089      	sub	sp, #36	@ 0x24
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024a6:	2300      	movs	r3, #0
 80024a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024b2:	2300      	movs	r3, #0
 80024b4:	61fb      	str	r3, [r7, #28]
 80024b6:	e165      	b.n	8002784 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024b8:	2201      	movs	r2, #1
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	697a      	ldr	r2, [r7, #20]
 80024c8:	4013      	ands	r3, r2
 80024ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024cc:	693a      	ldr	r2, [r7, #16]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	f040 8154 	bne.w	800277e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f003 0303 	and.w	r3, r3, #3
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d005      	beq.n	80024ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d130      	bne.n	8002550 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	005b      	lsls	r3, r3, #1
 80024f8:	2203      	movs	r2, #3
 80024fa:	fa02 f303 	lsl.w	r3, r2, r3
 80024fe:	43db      	mvns	r3, r3
 8002500:	69ba      	ldr	r2, [r7, #24]
 8002502:	4013      	ands	r3, r2
 8002504:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	68da      	ldr	r2, [r3, #12]
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	005b      	lsls	r3, r3, #1
 800250e:	fa02 f303 	lsl.w	r3, r2, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4313      	orrs	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002524:	2201      	movs	r2, #1
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	fa02 f303 	lsl.w	r3, r2, r3
 800252c:	43db      	mvns	r3, r3
 800252e:	69ba      	ldr	r2, [r7, #24]
 8002530:	4013      	ands	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 0201 	and.w	r2, r3, #1
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	fa02 f303 	lsl.w	r3, r2, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	69ba      	ldr	r2, [r7, #24]
 800254e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f003 0303 	and.w	r3, r3, #3
 8002558:	2b03      	cmp	r3, #3
 800255a:	d017      	beq.n	800258c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	68db      	ldr	r3, [r3, #12]
 8002560:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	2203      	movs	r2, #3
 8002568:	fa02 f303 	lsl.w	r3, r2, r3
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	689a      	ldr	r2, [r3, #8]
 8002578:	69fb      	ldr	r3, [r7, #28]
 800257a:	005b      	lsls	r3, r3, #1
 800257c:	fa02 f303 	lsl.w	r3, r2, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4313      	orrs	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	69ba      	ldr	r2, [r7, #24]
 800258a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 0303 	and.w	r3, r3, #3
 8002594:	2b02      	cmp	r3, #2
 8002596:	d123      	bne.n	80025e0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	08da      	lsrs	r2, r3, #3
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	3208      	adds	r2, #8
 80025a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025a6:	69fb      	ldr	r3, [r7, #28]
 80025a8:	f003 0307 	and.w	r3, r3, #7
 80025ac:	009b      	lsls	r3, r3, #2
 80025ae:	220f      	movs	r2, #15
 80025b0:	fa02 f303 	lsl.w	r3, r2, r3
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	691a      	ldr	r2, [r3, #16]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	f003 0307 	and.w	r3, r3, #7
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	fa02 f303 	lsl.w	r3, r2, r3
 80025cc:	69ba      	ldr	r2, [r7, #24]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025d2:	69fb      	ldr	r3, [r7, #28]
 80025d4:	08da      	lsrs	r2, r3, #3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	3208      	adds	r2, #8
 80025da:	69b9      	ldr	r1, [r7, #24]
 80025dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025e6:	69fb      	ldr	r3, [r7, #28]
 80025e8:	005b      	lsls	r3, r3, #1
 80025ea:	2203      	movs	r2, #3
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	43db      	mvns	r3, r3
 80025f2:	69ba      	ldr	r2, [r7, #24]
 80025f4:	4013      	ands	r3, r2
 80025f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	685b      	ldr	r3, [r3, #4]
 80025fc:	f003 0203 	and.w	r2, r3, #3
 8002600:	69fb      	ldr	r3, [r7, #28]
 8002602:	005b      	lsls	r3, r3, #1
 8002604:	fa02 f303 	lsl.w	r3, r2, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4313      	orrs	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800261c:	2b00      	cmp	r3, #0
 800261e:	f000 80ae 	beq.w	800277e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002622:	2300      	movs	r3, #0
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	4b5d      	ldr	r3, [pc, #372]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800262a:	4a5c      	ldr	r2, [pc, #368]	@ (800279c <HAL_GPIO_Init+0x300>)
 800262c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002630:	6453      	str	r3, [r2, #68]	@ 0x44
 8002632:	4b5a      	ldr	r3, [pc, #360]	@ (800279c <HAL_GPIO_Init+0x300>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002636:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800263a:	60fb      	str	r3, [r7, #12]
 800263c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800263e:	4a58      	ldr	r2, [pc, #352]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 8002640:	69fb      	ldr	r3, [r7, #28]
 8002642:	089b      	lsrs	r3, r3, #2
 8002644:	3302      	adds	r3, #2
 8002646:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f003 0303 	and.w	r3, r3, #3
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	220f      	movs	r2, #15
 8002656:	fa02 f303 	lsl.w	r3, r2, r3
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a4f      	ldr	r2, [pc, #316]	@ (80027a4 <HAL_GPIO_Init+0x308>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d025      	beq.n	80026b6 <HAL_GPIO_Init+0x21a>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a4e      	ldr	r2, [pc, #312]	@ (80027a8 <HAL_GPIO_Init+0x30c>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d01f      	beq.n	80026b2 <HAL_GPIO_Init+0x216>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a4d      	ldr	r2, [pc, #308]	@ (80027ac <HAL_GPIO_Init+0x310>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d019      	beq.n	80026ae <HAL_GPIO_Init+0x212>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a4c      	ldr	r2, [pc, #304]	@ (80027b0 <HAL_GPIO_Init+0x314>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_GPIO_Init+0x20e>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a4b      	ldr	r2, [pc, #300]	@ (80027b4 <HAL_GPIO_Init+0x318>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d00d      	beq.n	80026a6 <HAL_GPIO_Init+0x20a>
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4a4a      	ldr	r2, [pc, #296]	@ (80027b8 <HAL_GPIO_Init+0x31c>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d007      	beq.n	80026a2 <HAL_GPIO_Init+0x206>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	4a49      	ldr	r2, [pc, #292]	@ (80027bc <HAL_GPIO_Init+0x320>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d101      	bne.n	800269e <HAL_GPIO_Init+0x202>
 800269a:	2306      	movs	r3, #6
 800269c:	e00c      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 800269e:	2307      	movs	r3, #7
 80026a0:	e00a      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a2:	2305      	movs	r3, #5
 80026a4:	e008      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026a6:	2304      	movs	r3, #4
 80026a8:	e006      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026aa:	2303      	movs	r3, #3
 80026ac:	e004      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026ae:	2302      	movs	r3, #2
 80026b0:	e002      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b2:	2301      	movs	r3, #1
 80026b4:	e000      	b.n	80026b8 <HAL_GPIO_Init+0x21c>
 80026b6:	2300      	movs	r3, #0
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	f002 0203 	and.w	r2, r2, #3
 80026be:	0092      	lsls	r2, r2, #2
 80026c0:	4093      	lsls	r3, r2
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026c8:	4935      	ldr	r1, [pc, #212]	@ (80027a0 <HAL_GPIO_Init+0x304>)
 80026ca:	69fb      	ldr	r3, [r7, #28]
 80026cc:	089b      	lsrs	r3, r3, #2
 80026ce:	3302      	adds	r3, #2
 80026d0:	69ba      	ldr	r2, [r7, #24]
 80026d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026d6:	4b3a      	ldr	r3, [pc, #232]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026dc:	693b      	ldr	r3, [r7, #16]
 80026de:	43db      	mvns	r3, r3
 80026e0:	69ba      	ldr	r2, [r7, #24]
 80026e2:	4013      	ands	r3, r2
 80026e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	685b      	ldr	r3, [r3, #4]
 80026ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d003      	beq.n	80026fa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80026f2:	69ba      	ldr	r2, [r7, #24]
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026fa:	4a31      	ldr	r2, [pc, #196]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 80026fc:	69bb      	ldr	r3, [r7, #24]
 80026fe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002700:	4b2f      	ldr	r3, [pc, #188]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	43db      	mvns	r3, r3
 800270a:	69ba      	ldr	r2, [r7, #24]
 800270c:	4013      	ands	r3, r2
 800270e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800271c:	69ba      	ldr	r2, [r7, #24]
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	4313      	orrs	r3, r2
 8002722:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002724:	4a26      	ldr	r2, [pc, #152]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800272a:	4b25      	ldr	r3, [pc, #148]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	43db      	mvns	r3, r3
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	4013      	ands	r3, r2
 8002738:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002746:	69ba      	ldr	r2, [r7, #24]
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4313      	orrs	r3, r2
 800274c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800274e:	4a1c      	ldr	r2, [pc, #112]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002750:	69bb      	ldr	r3, [r7, #24]
 8002752:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002754:	4b1a      	ldr	r3, [pc, #104]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d003      	beq.n	8002778 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002770:	69ba      	ldr	r2, [r7, #24]
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	4313      	orrs	r3, r2
 8002776:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002778:	4a11      	ldr	r2, [pc, #68]	@ (80027c0 <HAL_GPIO_Init+0x324>)
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800277e:	69fb      	ldr	r3, [r7, #28]
 8002780:	3301      	adds	r3, #1
 8002782:	61fb      	str	r3, [r7, #28]
 8002784:	69fb      	ldr	r3, [r7, #28]
 8002786:	2b0f      	cmp	r3, #15
 8002788:	f67f ae96 	bls.w	80024b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800278c:	bf00      	nop
 800278e:	bf00      	nop
 8002790:	3724      	adds	r7, #36	@ 0x24
 8002792:	46bd      	mov	sp, r7
 8002794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002798:	4770      	bx	lr
 800279a:	bf00      	nop
 800279c:	40023800 	.word	0x40023800
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40020000 	.word	0x40020000
 80027a8:	40020400 	.word	0x40020400
 80027ac:	40020800 	.word	0x40020800
 80027b0:	40020c00 	.word	0x40020c00
 80027b4:	40021000 	.word	0x40021000
 80027b8:	40021400 	.word	0x40021400
 80027bc:	40021800 	.word	0x40021800
 80027c0:	40013c00 	.word	0x40013c00

080027c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80027c4:	b480      	push	{r7}
 80027c6:	b083      	sub	sp, #12
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	460b      	mov	r3, r1
 80027ce:	807b      	strh	r3, [r7, #2]
 80027d0:	4613      	mov	r3, r2
 80027d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80027d4:	787b      	ldrb	r3, [r7, #1]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d003      	beq.n	80027e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80027da:	887a      	ldrh	r2, [r7, #2]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80027e0:	e003      	b.n	80027ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80027e2:	887b      	ldrh	r3, [r7, #2]
 80027e4:	041a      	lsls	r2, r3, #16
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	619a      	str	r2, [r3, #24]
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
	...

080027f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0cc      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800280c:	4b68      	ldr	r3, [pc, #416]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0307 	and.w	r3, r3, #7
 8002814:	683a      	ldr	r2, [r7, #0]
 8002816:	429a      	cmp	r2, r3
 8002818:	d90c      	bls.n	8002834 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800281a:	4b65      	ldr	r3, [pc, #404]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	b2d2      	uxtb	r2, r2
 8002820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002822:	4b63      	ldr	r3, [pc, #396]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0307 	and.w	r3, r3, #7
 800282a:	683a      	ldr	r2, [r7, #0]
 800282c:	429a      	cmp	r2, r3
 800282e:	d001      	beq.n	8002834 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e0b8      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d020      	beq.n	8002882 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b59      	ldr	r3, [pc, #356]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a58      	ldr	r2, [pc, #352]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002852:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002856:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d005      	beq.n	8002870 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002864:	4b53      	ldr	r3, [pc, #332]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	4a52      	ldr	r2, [pc, #328]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800286a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800286e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002870:	4b50      	ldr	r3, [pc, #320]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002872:	689b      	ldr	r3, [r3, #8]
 8002874:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	494d      	ldr	r1, [pc, #308]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800287e:	4313      	orrs	r3, r2
 8002880:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d044      	beq.n	8002918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	2b01      	cmp	r3, #1
 8002894:	d107      	bne.n	80028a6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	4b47      	ldr	r3, [pc, #284]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d119      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e07f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	2b02      	cmp	r3, #2
 80028ac:	d003      	beq.n	80028b6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80028b2:	2b03      	cmp	r3, #3
 80028b4:	d107      	bne.n	80028c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80028b6:	4b3f      	ldr	r3, [pc, #252]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e06f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028c6:	4b3b      	ldr	r3, [pc, #236]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f003 0302 	and.w	r3, r3, #2
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d101      	bne.n	80028d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
 80028d4:	e067      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028d6:	4b37      	ldr	r3, [pc, #220]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	f023 0203 	bic.w	r2, r3, #3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	4934      	ldr	r1, [pc, #208]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 80028e4:	4313      	orrs	r3, r2
 80028e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028e8:	f7ff fbf0 	bl	80020cc <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ee:	e00a      	b.n	8002906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028f0:	f7ff fbec 	bl	80020cc <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d901      	bls.n	8002906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	e04f      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002906:	4b2b      	ldr	r3, [pc, #172]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002908:	689b      	ldr	r3, [r3, #8]
 800290a:	f003 020c 	and.w	r2, r3, #12
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	009b      	lsls	r3, r3, #2
 8002914:	429a      	cmp	r2, r3
 8002916:	d1eb      	bne.n	80028f0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002918:	4b25      	ldr	r3, [pc, #148]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f003 0307 	and.w	r3, r3, #7
 8002920:	683a      	ldr	r2, [r7, #0]
 8002922:	429a      	cmp	r2, r3
 8002924:	d20c      	bcs.n	8002940 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002926:	4b22      	ldr	r3, [pc, #136]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800292e:	4b20      	ldr	r3, [pc, #128]	@ (80029b0 <HAL_RCC_ClockConfig+0x1b8>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0307 	and.w	r3, r3, #7
 8002936:	683a      	ldr	r2, [r7, #0]
 8002938:	429a      	cmp	r2, r3
 800293a:	d001      	beq.n	8002940 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e032      	b.n	80029a6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f003 0304 	and.w	r3, r3, #4
 8002948:	2b00      	cmp	r3, #0
 800294a:	d008      	beq.n	800295e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800294c:	4b19      	ldr	r3, [pc, #100]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	68db      	ldr	r3, [r3, #12]
 8002958:	4916      	ldr	r1, [pc, #88]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	4313      	orrs	r3, r2
 800295c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 0308 	and.w	r3, r3, #8
 8002966:	2b00      	cmp	r3, #0
 8002968:	d009      	beq.n	800297e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800296a:	4b12      	ldr	r3, [pc, #72]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800296c:	689b      	ldr	r3, [r3, #8]
 800296e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	691b      	ldr	r3, [r3, #16]
 8002976:	00db      	lsls	r3, r3, #3
 8002978:	490e      	ldr	r1, [pc, #56]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 800297a:	4313      	orrs	r3, r2
 800297c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800297e:	f000 f821 	bl	80029c4 <HAL_RCC_GetSysClockFreq>
 8002982:	4602      	mov	r2, r0
 8002984:	4b0b      	ldr	r3, [pc, #44]	@ (80029b4 <HAL_RCC_ClockConfig+0x1bc>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	091b      	lsrs	r3, r3, #4
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	490a      	ldr	r1, [pc, #40]	@ (80029b8 <HAL_RCC_ClockConfig+0x1c0>)
 8002990:	5ccb      	ldrb	r3, [r1, r3]
 8002992:	fa22 f303 	lsr.w	r3, r2, r3
 8002996:	4a09      	ldr	r2, [pc, #36]	@ (80029bc <HAL_RCC_ClockConfig+0x1c4>)
 8002998:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800299a:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <HAL_RCC_ClockConfig+0x1c8>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7ff fb50 	bl	8002044 <HAL_InitTick>

  return HAL_OK;
 80029a4:	2300      	movs	r3, #0
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3710      	adds	r7, #16
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	40023c00 	.word	0x40023c00
 80029b4:	40023800 	.word	0x40023800
 80029b8:	0800834c 	.word	0x0800834c
 80029bc:	20000004 	.word	0x20000004
 80029c0:	20000008 	.word	0x20000008

080029c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029c8:	b094      	sub	sp, #80	@ 0x50
 80029ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80029cc:	2300      	movs	r3, #0
 80029ce:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80029d8:	2300      	movs	r3, #0
 80029da:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029dc:	4b79      	ldr	r3, [pc, #484]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 80029de:	689b      	ldr	r3, [r3, #8]
 80029e0:	f003 030c 	and.w	r3, r3, #12
 80029e4:	2b08      	cmp	r3, #8
 80029e6:	d00d      	beq.n	8002a04 <HAL_RCC_GetSysClockFreq+0x40>
 80029e8:	2b08      	cmp	r3, #8
 80029ea:	f200 80e1 	bhi.w	8002bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d002      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x34>
 80029f2:	2b04      	cmp	r3, #4
 80029f4:	d003      	beq.n	80029fe <HAL_RCC_GetSysClockFreq+0x3a>
 80029f6:	e0db      	b.n	8002bb0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029f8:	4b73      	ldr	r3, [pc, #460]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 80029fa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80029fc:	e0db      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029fe:	4b73      	ldr	r3, [pc, #460]	@ (8002bcc <HAL_RCC_GetSysClockFreq+0x208>)
 8002a00:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002a02:	e0d8      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002a04:	4b6f      	ldr	r3, [pc, #444]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002a0c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002a0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a10:	685b      	ldr	r3, [r3, #4]
 8002a12:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d063      	beq.n	8002ae2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a1a:	4b6a      	ldr	r3, [pc, #424]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	099b      	lsrs	r3, r3, #6
 8002a20:	2200      	movs	r2, #0
 8002a22:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a24:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a28:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002a2c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a2e:	2300      	movs	r3, #0
 8002a30:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a32:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a36:	4622      	mov	r2, r4
 8002a38:	462b      	mov	r3, r5
 8002a3a:	f04f 0000 	mov.w	r0, #0
 8002a3e:	f04f 0100 	mov.w	r1, #0
 8002a42:	0159      	lsls	r1, r3, #5
 8002a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a48:	0150      	lsls	r0, r2, #5
 8002a4a:	4602      	mov	r2, r0
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	4621      	mov	r1, r4
 8002a50:	1a51      	subs	r1, r2, r1
 8002a52:	6139      	str	r1, [r7, #16]
 8002a54:	4629      	mov	r1, r5
 8002a56:	eb63 0301 	sbc.w	r3, r3, r1
 8002a5a:	617b      	str	r3, [r7, #20]
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a68:	4659      	mov	r1, fp
 8002a6a:	018b      	lsls	r3, r1, #6
 8002a6c:	4651      	mov	r1, sl
 8002a6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a72:	4651      	mov	r1, sl
 8002a74:	018a      	lsls	r2, r1, #6
 8002a76:	4651      	mov	r1, sl
 8002a78:	ebb2 0801 	subs.w	r8, r2, r1
 8002a7c:	4659      	mov	r1, fp
 8002a7e:	eb63 0901 	sbc.w	r9, r3, r1
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002a8e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002a92:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002a96:	4690      	mov	r8, r2
 8002a98:	4699      	mov	r9, r3
 8002a9a:	4623      	mov	r3, r4
 8002a9c:	eb18 0303 	adds.w	r3, r8, r3
 8002aa0:	60bb      	str	r3, [r7, #8]
 8002aa2:	462b      	mov	r3, r5
 8002aa4:	eb49 0303 	adc.w	r3, r9, r3
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	f04f 0200 	mov.w	r2, #0
 8002aae:	f04f 0300 	mov.w	r3, #0
 8002ab2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ab6:	4629      	mov	r1, r5
 8002ab8:	024b      	lsls	r3, r1, #9
 8002aba:	4621      	mov	r1, r4
 8002abc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002ac0:	4621      	mov	r1, r4
 8002ac2:	024a      	lsls	r2, r1, #9
 8002ac4:	4610      	mov	r0, r2
 8002ac6:	4619      	mov	r1, r3
 8002ac8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002aca:	2200      	movs	r2, #0
 8002acc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ace:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002ad0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ad4:	f7fd fefa 	bl	80008cc <__aeabi_uldivmod>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4613      	mov	r3, r2
 8002ade:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002ae0:	e058      	b.n	8002b94 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002ae2:	4b38      	ldr	r3, [pc, #224]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ae4:	685b      	ldr	r3, [r3, #4]
 8002ae6:	099b      	lsrs	r3, r3, #6
 8002ae8:	2200      	movs	r2, #0
 8002aea:	4618      	mov	r0, r3
 8002aec:	4611      	mov	r1, r2
 8002aee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002af2:	623b      	str	r3, [r7, #32]
 8002af4:	2300      	movs	r3, #0
 8002af6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002af8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002afc:	4642      	mov	r2, r8
 8002afe:	464b      	mov	r3, r9
 8002b00:	f04f 0000 	mov.w	r0, #0
 8002b04:	f04f 0100 	mov.w	r1, #0
 8002b08:	0159      	lsls	r1, r3, #5
 8002b0a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b0e:	0150      	lsls	r0, r2, #5
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4641      	mov	r1, r8
 8002b16:	ebb2 0a01 	subs.w	sl, r2, r1
 8002b1a:	4649      	mov	r1, r9
 8002b1c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002b20:	f04f 0200 	mov.w	r2, #0
 8002b24:	f04f 0300 	mov.w	r3, #0
 8002b28:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002b2c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002b30:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002b34:	ebb2 040a 	subs.w	r4, r2, sl
 8002b38:	eb63 050b 	sbc.w	r5, r3, fp
 8002b3c:	f04f 0200 	mov.w	r2, #0
 8002b40:	f04f 0300 	mov.w	r3, #0
 8002b44:	00eb      	lsls	r3, r5, #3
 8002b46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b4a:	00e2      	lsls	r2, r4, #3
 8002b4c:	4614      	mov	r4, r2
 8002b4e:	461d      	mov	r5, r3
 8002b50:	4643      	mov	r3, r8
 8002b52:	18e3      	adds	r3, r4, r3
 8002b54:	603b      	str	r3, [r7, #0]
 8002b56:	464b      	mov	r3, r9
 8002b58:	eb45 0303 	adc.w	r3, r5, r3
 8002b5c:	607b      	str	r3, [r7, #4]
 8002b5e:	f04f 0200 	mov.w	r2, #0
 8002b62:	f04f 0300 	mov.w	r3, #0
 8002b66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002b6a:	4629      	mov	r1, r5
 8002b6c:	028b      	lsls	r3, r1, #10
 8002b6e:	4621      	mov	r1, r4
 8002b70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002b74:	4621      	mov	r1, r4
 8002b76:	028a      	lsls	r2, r1, #10
 8002b78:	4610      	mov	r0, r2
 8002b7a:	4619      	mov	r1, r3
 8002b7c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002b7e:	2200      	movs	r2, #0
 8002b80:	61bb      	str	r3, [r7, #24]
 8002b82:	61fa      	str	r2, [r7, #28]
 8002b84:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002b88:	f7fd fea0 	bl	80008cc <__aeabi_uldivmod>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4613      	mov	r3, r2
 8002b92:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002b94:	4b0b      	ldr	r3, [pc, #44]	@ (8002bc4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	0c1b      	lsrs	r3, r3, #16
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	3301      	adds	r3, #1
 8002ba0:	005b      	lsls	r3, r3, #1
 8002ba2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002ba4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002ba6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ba8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bac:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002bb0:	4b05      	ldr	r3, [pc, #20]	@ (8002bc8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002bb4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002bb6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3750      	adds	r7, #80	@ 0x50
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002bc2:	bf00      	nop
 8002bc4:	40023800 	.word	0x40023800
 8002bc8:	00f42400 	.word	0x00f42400
 8002bcc:	007a1200 	.word	0x007a1200

08002bd0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b086      	sub	sp, #24
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e273      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d075      	beq.n	8002cda <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002bee:	4b88      	ldr	r3, [pc, #544]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bf0:	689b      	ldr	r3, [r3, #8]
 8002bf2:	f003 030c 	and.w	r3, r3, #12
 8002bf6:	2b04      	cmp	r3, #4
 8002bf8:	d00c      	beq.n	8002c14 <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfa:	4b85      	ldr	r3, [pc, #532]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c02:	2b08      	cmp	r3, #8
 8002c04:	d112      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c06:	4b82      	ldr	r3, [pc, #520]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c12:	d10b      	bne.n	8002c2c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c14:	4b7e      	ldr	r3, [pc, #504]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d05b      	beq.n	8002cd8 <HAL_RCC_OscConfig+0x108>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d157      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e24e      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c34:	d106      	bne.n	8002c44 <HAL_RCC_OscConfig+0x74>
 8002c36:	4b76      	ldr	r3, [pc, #472]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4a75      	ldr	r2, [pc, #468]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c40:	6013      	str	r3, [r2, #0]
 8002c42:	e01d      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c4c:	d10c      	bne.n	8002c68 <HAL_RCC_OscConfig+0x98>
 8002c4e:	4b70      	ldr	r3, [pc, #448]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a6f      	ldr	r2, [pc, #444]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c58:	6013      	str	r3, [r2, #0]
 8002c5a:	4b6d      	ldr	r3, [pc, #436]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4a6c      	ldr	r2, [pc, #432]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c64:	6013      	str	r3, [r2, #0]
 8002c66:	e00b      	b.n	8002c80 <HAL_RCC_OscConfig+0xb0>
 8002c68:	4b69      	ldr	r3, [pc, #420]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a68      	ldr	r2, [pc, #416]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c72:	6013      	str	r3, [r2, #0]
 8002c74:	4b66      	ldr	r3, [pc, #408]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a65      	ldr	r2, [pc, #404]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d013      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7ff fa20 	bl	80020cc <HAL_GetTick>
 8002c8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c8e:	e008      	b.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c90:	f7ff fa1c 	bl	80020cc <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	2b64      	cmp	r3, #100	@ 0x64
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e213      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0f0      	beq.n	8002c90 <HAL_RCC_OscConfig+0xc0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff fa0c 	bl	80020cc <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb8:	f7ff fa08 	bl	80020cc <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b64      	cmp	r3, #100	@ 0x64
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e1ff      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cca:	4b51      	ldr	r3, [pc, #324]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0xe8>
 8002cd6:	e000      	b.n	8002cda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d063      	beq.n	8002dae <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ce6:	4b4a      	ldr	r3, [pc, #296]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	f003 030c 	and.w	r3, r3, #12
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d00b      	beq.n	8002d0a <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf2:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	689b      	ldr	r3, [r3, #8]
 8002cf6:	f003 030c 	and.w	r3, r3, #12
        || \
 8002cfa:	2b08      	cmp	r3, #8
 8002cfc:	d11c      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cfe:	4b44      	ldr	r3, [pc, #272]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d116      	bne.n	8002d38 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d0a:	4b41      	ldr	r3, [pc, #260]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0302 	and.w	r3, r3, #2
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d005      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	68db      	ldr	r3, [r3, #12]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d001      	beq.n	8002d22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e1d3      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d22:	4b3b      	ldr	r3, [pc, #236]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	691b      	ldr	r3, [r3, #16]
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4937      	ldr	r1, [pc, #220]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d36:	e03a      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d020      	beq.n	8002d82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d40:	4b34      	ldr	r3, [pc, #208]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d42:	2201      	movs	r2, #1
 8002d44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d46:	f7ff f9c1 	bl	80020cc <HAL_GetTick>
 8002d4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d4c:	e008      	b.n	8002d60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d4e:	f7ff f9bd 	bl	80020cc <HAL_GetTick>
 8002d52:	4602      	mov	r2, r0
 8002d54:	693b      	ldr	r3, [r7, #16]
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	2b02      	cmp	r3, #2
 8002d5a:	d901      	bls.n	8002d60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d5c:	2303      	movs	r3, #3
 8002d5e:	e1b4      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d60:	4b2b      	ldr	r3, [pc, #172]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0302 	and.w	r3, r3, #2
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d0f0      	beq.n	8002d4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d6c:	4b28      	ldr	r3, [pc, #160]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4925      	ldr	r1, [pc, #148]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	600b      	str	r3, [r1, #0]
 8002d80:	e015      	b.n	8002dae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d82:	4b24      	ldr	r3, [pc, #144]	@ (8002e14 <HAL_RCC_OscConfig+0x244>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d88:	f7ff f9a0 	bl	80020cc <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d8e:	e008      	b.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d90:	f7ff f99c 	bl	80020cc <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d901      	bls.n	8002da2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e193      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002da2:	4b1b      	ldr	r3, [pc, #108]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0302 	and.w	r3, r3, #2
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f0      	bne.n	8002d90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0308 	and.w	r3, r3, #8
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d036      	beq.n	8002e28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d016      	beq.n	8002df0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dc2:	4b15      	ldr	r3, [pc, #84]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc8:	f7ff f980 	bl	80020cc <HAL_GetTick>
 8002dcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dce:	e008      	b.n	8002de2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dd0:	f7ff f97c 	bl	80020cc <HAL_GetTick>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	693b      	ldr	r3, [r7, #16]
 8002dd8:	1ad3      	subs	r3, r2, r3
 8002dda:	2b02      	cmp	r3, #2
 8002ddc:	d901      	bls.n	8002de2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dde:	2303      	movs	r3, #3
 8002de0:	e173      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002de2:	4b0b      	ldr	r3, [pc, #44]	@ (8002e10 <HAL_RCC_OscConfig+0x240>)
 8002de4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002de6:	f003 0302 	and.w	r3, r3, #2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0f0      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x200>
 8002dee:	e01b      	b.n	8002e28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002df0:	4b09      	ldr	r3, [pc, #36]	@ (8002e18 <HAL_RCC_OscConfig+0x248>)
 8002df2:	2200      	movs	r2, #0
 8002df4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002df6:	f7ff f969 	bl	80020cc <HAL_GetTick>
 8002dfa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002dfc:	e00e      	b.n	8002e1c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dfe:	f7ff f965 	bl	80020cc <HAL_GetTick>
 8002e02:	4602      	mov	r2, r0
 8002e04:	693b      	ldr	r3, [r7, #16]
 8002e06:	1ad3      	subs	r3, r2, r3
 8002e08:	2b02      	cmp	r3, #2
 8002e0a:	d907      	bls.n	8002e1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e0c:	2303      	movs	r3, #3
 8002e0e:	e15c      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
 8002e10:	40023800 	.word	0x40023800
 8002e14:	42470000 	.word	0x42470000
 8002e18:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e1c:	4b8a      	ldr	r3, [pc, #552]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e1e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e20:	f003 0302 	and.w	r3, r3, #2
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1ea      	bne.n	8002dfe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f003 0304 	and.w	r3, r3, #4
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	f000 8097 	beq.w	8002f64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e3a:	4b83      	ldr	r3, [pc, #524]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e3e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10f      	bne.n	8002e66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e46:	2300      	movs	r3, #0
 8002e48:	60bb      	str	r3, [r7, #8]
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e50:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e54:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e56:	4b7c      	ldr	r3, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e5e:	60bb      	str	r3, [r7, #8]
 8002e60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e62:	2301      	movs	r3, #1
 8002e64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e66:	4b79      	ldr	r3, [pc, #484]	@ (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d118      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e72:	4b76      	ldr	r3, [pc, #472]	@ (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a75      	ldr	r2, [pc, #468]	@ (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e7e:	f7ff f925 	bl	80020cc <HAL_GetTick>
 8002e82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e84:	e008      	b.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e86:	f7ff f921 	bl	80020cc <HAL_GetTick>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	1ad3      	subs	r3, r2, r3
 8002e90:	2b02      	cmp	r3, #2
 8002e92:	d901      	bls.n	8002e98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e94:	2303      	movs	r3, #3
 8002e96:	e118      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e98:	4b6c      	ldr	r3, [pc, #432]	@ (800304c <HAL_RCC_OscConfig+0x47c>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d0f0      	beq.n	8002e86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d106      	bne.n	8002eba <HAL_RCC_OscConfig+0x2ea>
 8002eac:	4b66      	ldr	r3, [pc, #408]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eb0:	4a65      	ldr	r2, [pc, #404]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eb2:	f043 0301 	orr.w	r3, r3, #1
 8002eb6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb8:	e01c      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	2b05      	cmp	r3, #5
 8002ec0:	d10c      	bne.n	8002edc <HAL_RCC_OscConfig+0x30c>
 8002ec2:	4b61      	ldr	r3, [pc, #388]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ec6:	4a60      	ldr	r2, [pc, #384]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ece:	4b5e      	ldr	r3, [pc, #376]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed2:	4a5d      	ldr	r2, [pc, #372]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ed4:	f043 0301 	orr.w	r3, r3, #1
 8002ed8:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eda:	e00b      	b.n	8002ef4 <HAL_RCC_OscConfig+0x324>
 8002edc:	4b5a      	ldr	r3, [pc, #360]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ede:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee0:	4a59      	ldr	r2, [pc, #356]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002ee2:	f023 0301 	bic.w	r3, r3, #1
 8002ee6:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee8:	4b57      	ldr	r3, [pc, #348]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eec:	4a56      	ldr	r2, [pc, #344]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002eee:	f023 0304 	bic.w	r3, r3, #4
 8002ef2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d015      	beq.n	8002f28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002efc:	f7ff f8e6 	bl	80020cc <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f02:	e00a      	b.n	8002f1a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f04:	f7ff f8e2 	bl	80020cc <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e0d7      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f1a:	4b4b      	ldr	r3, [pc, #300]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f1e:	f003 0302 	and.w	r3, r3, #2
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0ee      	beq.n	8002f04 <HAL_RCC_OscConfig+0x334>
 8002f26:	e014      	b.n	8002f52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f28:	f7ff f8d0 	bl	80020cc <HAL_GetTick>
 8002f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f2e:	e00a      	b.n	8002f46 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f30:	f7ff f8cc 	bl	80020cc <HAL_GetTick>
 8002f34:	4602      	mov	r2, r0
 8002f36:	693b      	ldr	r3, [r7, #16]
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d901      	bls.n	8002f46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f42:	2303      	movs	r3, #3
 8002f44:	e0c1      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f46:	4b40      	ldr	r3, [pc, #256]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	f003 0302 	and.w	r3, r3, #2
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d1ee      	bne.n	8002f30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f52:	7dfb      	ldrb	r3, [r7, #23]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d105      	bne.n	8002f64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f58:	4b3b      	ldr	r3, [pc, #236]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5c:	4a3a      	ldr	r2, [pc, #232]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f5e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f62:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	699b      	ldr	r3, [r3, #24]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	f000 80ad 	beq.w	80030c8 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f6e:	4b36      	ldr	r3, [pc, #216]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	f003 030c 	and.w	r3, r3, #12
 8002f76:	2b08      	cmp	r3, #8
 8002f78:	d060      	beq.n	800303c <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	699b      	ldr	r3, [r3, #24]
 8002f7e:	2b02      	cmp	r3, #2
 8002f80:	d145      	bne.n	800300e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b33      	ldr	r3, [pc, #204]	@ (8003050 <HAL_RCC_OscConfig+0x480>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7ff f8a0 	bl	80020cc <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f90:	f7ff f89c 	bl	80020cc <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e093      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b29      	ldr	r3, [pc, #164]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	69da      	ldr	r2, [r3, #28]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fbc:	019b      	lsls	r3, r3, #6
 8002fbe:	431a      	orrs	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fc4:	085b      	lsrs	r3, r3, #1
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	041b      	lsls	r3, r3, #16
 8002fca:	431a      	orrs	r2, r3
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd0:	061b      	lsls	r3, r3, #24
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd8:	071b      	lsls	r3, r3, #28
 8002fda:	491b      	ldr	r1, [pc, #108]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fe0:	4b1b      	ldr	r3, [pc, #108]	@ (8003050 <HAL_RCC_OscConfig+0x480>)
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fe6:	f7ff f871 	bl	80020cc <HAL_GetTick>
 8002fea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fec:	e008      	b.n	8003000 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fee:	f7ff f86d 	bl	80020cc <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d901      	bls.n	8003000 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e064      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCC_OscConfig+0x41e>
 800300c:	e05c      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800300e:	4b10      	ldr	r3, [pc, #64]	@ (8003050 <HAL_RCC_OscConfig+0x480>)
 8003010:	2200      	movs	r2, #0
 8003012:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003014:	f7ff f85a 	bl	80020cc <HAL_GetTick>
 8003018:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	e008      	b.n	800302e <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800301c:	f7ff f856 	bl	80020cc <HAL_GetTick>
 8003020:	4602      	mov	r2, r0
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e04d      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800302e:	4b06      	ldr	r3, [pc, #24]	@ (8003048 <HAL_RCC_OscConfig+0x478>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003036:	2b00      	cmp	r3, #0
 8003038:	d1f0      	bne.n	800301c <HAL_RCC_OscConfig+0x44c>
 800303a:	e045      	b.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	699b      	ldr	r3, [r3, #24]
 8003040:	2b01      	cmp	r3, #1
 8003042:	d107      	bne.n	8003054 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e040      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
 8003048:	40023800 	.word	0x40023800
 800304c:	40007000 	.word	0x40007000
 8003050:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003054:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <HAL_RCC_OscConfig+0x504>)
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d030      	beq.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800306c:	429a      	cmp	r2, r3
 800306e:	d129      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800307a:	429a      	cmp	r2, r3
 800307c:	d122      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800307e:	68fa      	ldr	r2, [r7, #12]
 8003080:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003084:	4013      	ands	r3, r2
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800308a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800308c:	4293      	cmp	r3, r2
 800308e:	d119      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	085b      	lsrs	r3, r3, #1
 800309c:	3b01      	subs	r3, #1
 800309e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d10f      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030b0:	429a      	cmp	r2, r3
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80030c0:	429a      	cmp	r2, r3
 80030c2:	d001      	beq.n	80030c8 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e000      	b.n	80030ca <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}
 80030d2:	bf00      	nop
 80030d4:	40023800 	.word	0x40023800

080030d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d101      	bne.n	80030ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e07b      	b.n	80031e2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d108      	bne.n	8003104 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030fa:	d009      	beq.n	8003110 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2200      	movs	r2, #0
 8003100:	61da      	str	r2, [r3, #28]
 8003102:	e005      	b.n	8003110 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2200      	movs	r2, #0
 8003108:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	2200      	movs	r2, #0
 800310e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2200      	movs	r2, #0
 8003114:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	d106      	bne.n	8003130 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f7fe fd8e 	bl	8001c4c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003146:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003158:	431a      	orrs	r2, r3
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003162:	431a      	orrs	r2, r3
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	431a      	orrs	r2, r3
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	f003 0301 	and.w	r3, r3, #1
 8003176:	431a      	orrs	r2, r3
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003180:	431a      	orrs	r2, r3
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800318a:	431a      	orrs	r2, r3
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003194:	ea42 0103 	orr.w	r1, r2, r3
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	430a      	orrs	r2, r1
 80031a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	0c1b      	lsrs	r3, r3, #16
 80031ae:	f003 0104 	and.w	r1, r3, #4
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031b6:	f003 0210 	and.w	r2, r3, #16
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	69da      	ldr	r2, [r3, #28]
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80031d0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2201      	movs	r2, #1
 80031dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b088      	sub	sp, #32
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	60f8      	str	r0, [r7, #12]
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	603b      	str	r3, [r7, #0]
 80031f6:	4613      	mov	r3, r2
 80031f8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80031fa:	f7fe ff67 	bl	80020cc <HAL_GetTick>
 80031fe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8003200:	88fb      	ldrh	r3, [r7, #6]
 8003202:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800320a:	b2db      	uxtb	r3, r3
 800320c:	2b01      	cmp	r3, #1
 800320e:	d001      	beq.n	8003214 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003210:	2302      	movs	r3, #2
 8003212:	e12a      	b.n	800346a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_Transmit+0x36>
 800321a:	88fb      	ldrh	r3, [r7, #6]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d101      	bne.n	8003224 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	e122      	b.n	800346a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800322a:	2b01      	cmp	r3, #1
 800322c:	d101      	bne.n	8003232 <HAL_SPI_Transmit+0x48>
 800322e:	2302      	movs	r3, #2
 8003230:	e11b      	b.n	800346a <HAL_SPI_Transmit+0x280>
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2203      	movs	r2, #3
 800323e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2200      	movs	r2, #0
 8003246:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	88fa      	ldrh	r2, [r7, #6]
 8003252:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	88fa      	ldrh	r2, [r7, #6]
 8003258:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2200      	movs	r2, #0
 8003264:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	2200      	movs	r2, #0
 8003270:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2200      	movs	r2, #0
 8003276:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003280:	d10f      	bne.n	80032a2 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003290:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032a0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032ac:	2b40      	cmp	r3, #64	@ 0x40
 80032ae:	d007      	beq.n	80032c0 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80032be:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80032c8:	d152      	bne.n	8003370 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d002      	beq.n	80032d8 <HAL_SPI_Transmit+0xee>
 80032d2:	8b7b      	ldrh	r3, [r7, #26]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d145      	bne.n	8003364 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032dc:	881a      	ldrh	r2, [r3, #0]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e8:	1c9a      	adds	r2, r3, #2
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	3b01      	subs	r3, #1
 80032f6:	b29a      	uxth	r2, r3
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80032fc:	e032      	b.n	8003364 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0302 	and.w	r3, r3, #2
 8003308:	2b02      	cmp	r3, #2
 800330a:	d112      	bne.n	8003332 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	881a      	ldrh	r2, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	1c9a      	adds	r2, r3, #2
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003330:	e018      	b.n	8003364 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003332:	f7fe fecb 	bl	80020cc <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	69fb      	ldr	r3, [r7, #28]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	683a      	ldr	r2, [r7, #0]
 800333e:	429a      	cmp	r2, r3
 8003340:	d803      	bhi.n	800334a <HAL_SPI_Transmit+0x160>
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003348:	d102      	bne.n	8003350 <HAL_SPI_Transmit+0x166>
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d109      	bne.n	8003364 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2201      	movs	r2, #1
 8003354:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003360:	2303      	movs	r3, #3
 8003362:	e082      	b.n	800346a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1c7      	bne.n	80032fe <HAL_SPI_Transmit+0x114>
 800336e:	e053      	b.n	8003418 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d002      	beq.n	800337e <HAL_SPI_Transmit+0x194>
 8003378:	8b7b      	ldrh	r3, [r7, #26]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d147      	bne.n	800340e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	330c      	adds	r3, #12
 8003388:	7812      	ldrb	r2, [r2, #0]
 800338a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339a:	b29b      	uxth	r3, r3
 800339c:	3b01      	subs	r3, #1
 800339e:	b29a      	uxth	r2, r3
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033a4:	e033      	b.n	800340e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	689b      	ldr	r3, [r3, #8]
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b02      	cmp	r3, #2
 80033b2:	d113      	bne.n	80033dc <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	330c      	adds	r3, #12
 80033be:	7812      	ldrb	r2, [r2, #0]
 80033c0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033c6:	1c5a      	adds	r2, r3, #1
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033d0:	b29b      	uxth	r3, r3
 80033d2:	3b01      	subs	r3, #1
 80033d4:	b29a      	uxth	r2, r3
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80033da:	e018      	b.n	800340e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80033dc:	f7fe fe76 	bl	80020cc <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	683a      	ldr	r2, [r7, #0]
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d803      	bhi.n	80033f4 <HAL_SPI_Transmit+0x20a>
 80033ec:	683b      	ldr	r3, [r7, #0]
 80033ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033f2:	d102      	bne.n	80033fa <HAL_SPI_Transmit+0x210>
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d109      	bne.n	800340e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	2200      	movs	r2, #0
 8003406:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e02d      	b.n	800346a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d1c6      	bne.n	80033a6 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003418:	69fa      	ldr	r2, [r7, #28]
 800341a:	6839      	ldr	r1, [r7, #0]
 800341c:	68f8      	ldr	r0, [r7, #12]
 800341e:	f000 fa59 	bl	80038d4 <SPI_EndRxTxTransaction>
 8003422:	4603      	mov	r3, r0
 8003424:	2b00      	cmp	r3, #0
 8003426:	d002      	beq.n	800342e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2220      	movs	r2, #32
 800342c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10a      	bne.n	800344c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003436:	2300      	movs	r3, #0
 8003438:	617b      	str	r3, [r7, #20]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	617b      	str	r3, [r7, #20]
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	689b      	ldr	r3, [r3, #8]
 8003448:	617b      	str	r3, [r7, #20]
 800344a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003460:	2b00      	cmp	r3, #0
 8003462:	d001      	beq.n	8003468 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	e000      	b.n	800346a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003468:	2300      	movs	r3, #0
  }
}
 800346a:	4618      	mov	r0, r3
 800346c:	3720      	adds	r7, #32
 800346e:	46bd      	mov	sp, r7
 8003470:	bd80      	pop	{r7, pc}

08003472 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003472:	b580      	push	{r7, lr}
 8003474:	b08a      	sub	sp, #40	@ 0x28
 8003476:	af00      	add	r7, sp, #0
 8003478:	60f8      	str	r0, [r7, #12]
 800347a:	60b9      	str	r1, [r7, #8]
 800347c:	607a      	str	r2, [r7, #4]
 800347e:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003480:	2301      	movs	r3, #1
 8003482:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003484:	f7fe fe22 	bl	80020cc <HAL_GetTick>
 8003488:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003490:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003498:	887b      	ldrh	r3, [r7, #2]
 800349a:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800349c:	7ffb      	ldrb	r3, [r7, #31]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d00c      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x4a>
 80034a2:	69bb      	ldr	r3, [r7, #24]
 80034a4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034a8:	d106      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d102      	bne.n	80034b8 <HAL_SPI_TransmitReceive+0x46>
 80034b2:	7ffb      	ldrb	r3, [r7, #31]
 80034b4:	2b04      	cmp	r3, #4
 80034b6:	d001      	beq.n	80034bc <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80034b8:	2302      	movs	r3, #2
 80034ba:	e17f      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d005      	beq.n	80034ce <HAL_SPI_TransmitReceive+0x5c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d002      	beq.n	80034ce <HAL_SPI_TransmitReceive+0x5c>
 80034c8:	887b      	ldrh	r3, [r7, #2]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e174      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034d8:	2b01      	cmp	r3, #1
 80034da:	d101      	bne.n	80034e0 <HAL_SPI_TransmitReceive+0x6e>
 80034dc:	2302      	movs	r3, #2
 80034de:	e16d      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	2b04      	cmp	r3, #4
 80034f2:	d003      	beq.n	80034fc <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2205      	movs	r2, #5
 80034f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	887a      	ldrh	r2, [r7, #2]
 800350c:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	887a      	ldrh	r2, [r7, #2]
 8003512:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	68ba      	ldr	r2, [r7, #8]
 8003518:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	887a      	ldrh	r2, [r7, #2]
 800351e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	887a      	ldrh	r2, [r7, #2]
 8003524:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800353c:	2b40      	cmp	r3, #64	@ 0x40
 800353e:	d007      	beq.n	8003550 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800354e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003558:	d17e      	bne.n	8003658 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d002      	beq.n	8003568 <HAL_SPI_TransmitReceive+0xf6>
 8003562:	8afb      	ldrh	r3, [r7, #22]
 8003564:	2b01      	cmp	r3, #1
 8003566:	d16c      	bne.n	8003642 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	881a      	ldrh	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003578:	1c9a      	adds	r2, r3, #2
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003582:	b29b      	uxth	r3, r3
 8003584:	3b01      	subs	r3, #1
 8003586:	b29a      	uxth	r2, r3
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800358c:	e059      	b.n	8003642 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b02      	cmp	r3, #2
 800359a:	d11b      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x162>
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d016      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x162>
 80035a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d113      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035bc:	1c9a      	adds	r2, r3, #2
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c6:	b29b      	uxth	r3, r3
 80035c8:	3b01      	subs	r3, #1
 80035ca:	b29a      	uxth	r2, r3
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035d0:	2300      	movs	r3, #0
 80035d2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	f003 0301 	and.w	r3, r3, #1
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d119      	bne.n	8003616 <HAL_SPI_TransmitReceive+0x1a4>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80035e6:	b29b      	uxth	r3, r3
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d014      	beq.n	8003616 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035f6:	b292      	uxth	r2, r2
 80035f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80035fe:	1c9a      	adds	r2, r3, #2
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003608:	b29b      	uxth	r3, r3
 800360a:	3b01      	subs	r3, #1
 800360c:	b29a      	uxth	r2, r3
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003612:	2301      	movs	r3, #1
 8003614:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003616:	f7fe fd59 	bl	80020cc <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	6a3b      	ldr	r3, [r7, #32]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003622:	429a      	cmp	r2, r3
 8003624:	d80d      	bhi.n	8003642 <HAL_SPI_TransmitReceive+0x1d0>
 8003626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800362c:	d009      	beq.n	8003642 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2201      	movs	r2, #1
 8003632:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e0bc      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003646:	b29b      	uxth	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1a0      	bne.n	800358e <HAL_SPI_TransmitReceive+0x11c>
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d19b      	bne.n	800358e <HAL_SPI_TransmitReceive+0x11c>
 8003656:	e082      	b.n	800375e <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d002      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x1f4>
 8003660:	8afb      	ldrh	r3, [r7, #22]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d171      	bne.n	800374a <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	330c      	adds	r3, #12
 8003670:	7812      	ldrb	r2, [r2, #0]
 8003672:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800368c:	e05d      	b.n	800374a <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b02      	cmp	r3, #2
 800369a:	d11c      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x264>
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a0:	b29b      	uxth	r3, r3
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d017      	beq.n	80036d6 <HAL_SPI_TransmitReceive+0x264>
 80036a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d114      	bne.n	80036d6 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036d2:	2300      	movs	r3, #0
 80036d4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d119      	bne.n	8003718 <HAL_SPI_TransmitReceive+0x2a6>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80036e8:	b29b      	uxth	r3, r3
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d014      	beq.n	8003718 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003700:	1c5a      	adds	r2, r3, #1
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370a:	b29b      	uxth	r3, r3
 800370c:	3b01      	subs	r3, #1
 800370e:	b29a      	uxth	r2, r3
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003714:	2301      	movs	r3, #1
 8003716:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003718:	f7fe fcd8 	bl	80020cc <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	6a3b      	ldr	r3, [r7, #32]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003724:	429a      	cmp	r2, r3
 8003726:	d803      	bhi.n	8003730 <HAL_SPI_TransmitReceive+0x2be>
 8003728:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800372a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372e:	d102      	bne.n	8003736 <HAL_SPI_TransmitReceive+0x2c4>
 8003730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003732:	2b00      	cmp	r3, #0
 8003734:	d109      	bne.n	800374a <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	2200      	movs	r2, #0
 8003742:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e038      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	2b00      	cmp	r3, #0
 8003752:	d19c      	bne.n	800368e <HAL_SPI_TransmitReceive+0x21c>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003758:	b29b      	uxth	r3, r3
 800375a:	2b00      	cmp	r3, #0
 800375c:	d197      	bne.n	800368e <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003762:	68f8      	ldr	r0, [r7, #12]
 8003764:	f000 f8b6 	bl	80038d4 <SPI_EndRxTxTransaction>
 8003768:	4603      	mov	r3, r0
 800376a:	2b00      	cmp	r3, #0
 800376c:	d008      	beq.n	8003780 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2220      	movs	r2, #32
 8003772:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2200      	movs	r2, #0
 8003778:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e01d      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10a      	bne.n	800379e <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003788:	2300      	movs	r3, #0
 800378a:	613b      	str	r3, [r7, #16]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68db      	ldr	r3, [r3, #12]
 8003792:	613b      	str	r3, [r7, #16]
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	689b      	ldr	r3, [r3, #8]
 800379a:	613b      	str	r3, [r7, #16]
 800379c:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2200      	movs	r2, #0
 80037aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037ba:	2300      	movs	r3, #0
  }
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3728      	adds	r7, #40	@ 0x28
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b088      	sub	sp, #32
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	603b      	str	r3, [r7, #0]
 80037d0:	4613      	mov	r3, r2
 80037d2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037d4:	f7fe fc7a 	bl	80020cc <HAL_GetTick>
 80037d8:	4602      	mov	r2, r0
 80037da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037dc:	1a9b      	subs	r3, r3, r2
 80037de:	683a      	ldr	r2, [r7, #0]
 80037e0:	4413      	add	r3, r2
 80037e2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80037e4:	f7fe fc72 	bl	80020cc <HAL_GetTick>
 80037e8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80037ea:	4b39      	ldr	r3, [pc, #228]	@ (80038d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	015b      	lsls	r3, r3, #5
 80037f0:	0d1b      	lsrs	r3, r3, #20
 80037f2:	69fa      	ldr	r2, [r7, #28]
 80037f4:	fb02 f303 	mul.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037fa:	e054      	b.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003802:	d050      	beq.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003804:	f7fe fc62 	bl	80020cc <HAL_GetTick>
 8003808:	4602      	mov	r2, r0
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	1ad3      	subs	r3, r2, r3
 800380e:	69fa      	ldr	r2, [r7, #28]
 8003810:	429a      	cmp	r2, r3
 8003812:	d902      	bls.n	800381a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003814:	69fb      	ldr	r3, [r7, #28]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d13d      	bne.n	8003896 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003828:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003832:	d111      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800383c:	d004      	beq.n	8003848 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003846:	d107      	bne.n	8003858 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003856:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800385c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003860:	d10f      	bne.n	8003882 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	681a      	ldr	r2, [r3, #0]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003870:	601a      	str	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003880:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2201      	movs	r2, #1
 8003886:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e017      	b.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003896:	697b      	ldr	r3, [r7, #20]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d101      	bne.n	80038a0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	689a      	ldr	r2, [r3, #8]
 80038ac:	68bb      	ldr	r3, [r7, #8]
 80038ae:	4013      	ands	r3, r2
 80038b0:	68ba      	ldr	r2, [r7, #8]
 80038b2:	429a      	cmp	r2, r3
 80038b4:	bf0c      	ite	eq
 80038b6:	2301      	moveq	r3, #1
 80038b8:	2300      	movne	r3, #0
 80038ba:	b2db      	uxtb	r3, r3
 80038bc:	461a      	mov	r2, r3
 80038be:	79fb      	ldrb	r3, [r7, #7]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d19b      	bne.n	80037fc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80038c4:	2300      	movs	r3, #0
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3720      	adds	r7, #32
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	20000004 	.word	0x20000004

080038d4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b088      	sub	sp, #32
 80038d8:	af02      	add	r7, sp, #8
 80038da:	60f8      	str	r0, [r7, #12]
 80038dc:	60b9      	str	r1, [r7, #8]
 80038de:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	2201      	movs	r2, #1
 80038e8:	2102      	movs	r1, #2
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f7ff ff6a 	bl	80037c4 <SPI_WaitFlagStateUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d007      	beq.n	8003906 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e032      	b.n	800396c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003906:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <SPI_EndRxTxTransaction+0xa0>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1b      	ldr	r2, [pc, #108]	@ (8003978 <SPI_EndRxTxTransaction+0xa4>)
 800390c:	fba2 2303 	umull	r2, r3, r2, r3
 8003910:	0d5b      	lsrs	r3, r3, #21
 8003912:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003924:	d112      	bne.n	800394c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	9300      	str	r3, [sp, #0]
 800392a:	68bb      	ldr	r3, [r7, #8]
 800392c:	2200      	movs	r2, #0
 800392e:	2180      	movs	r1, #128	@ 0x80
 8003930:	68f8      	ldr	r0, [r7, #12]
 8003932:	f7ff ff47 	bl	80037c4 <SPI_WaitFlagStateUntilTimeout>
 8003936:	4603      	mov	r3, r0
 8003938:	2b00      	cmp	r3, #0
 800393a:	d016      	beq.n	800396a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003940:	f043 0220 	orr.w	r2, r3, #32
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003948:	2303      	movs	r3, #3
 800394a:	e00f      	b.n	800396c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	2b00      	cmp	r3, #0
 8003950:	d00a      	beq.n	8003968 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	3b01      	subs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003962:	2b80      	cmp	r3, #128	@ 0x80
 8003964:	d0f2      	beq.n	800394c <SPI_EndRxTxTransaction+0x78>
 8003966:	e000      	b.n	800396a <SPI_EndRxTxTransaction+0x96>
        break;
 8003968:	bf00      	nop
  }

  return HAL_OK;
 800396a:	2300      	movs	r3, #0
}
 800396c:	4618      	mov	r0, r3
 800396e:	3718      	adds	r7, #24
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	20000004 	.word	0x20000004
 8003978:	165e9f81 	.word	0x165e9f81

0800397c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2b00      	cmp	r3, #0
 8003988:	d101      	bne.n	800398e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	e041      	b.n	8003a12 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003994:	b2db      	uxtb	r3, r3
 8003996:	2b00      	cmp	r3, #0
 8003998:	d106      	bne.n	80039a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2200      	movs	r2, #0
 800399e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039a2:	6878      	ldr	r0, [r7, #4]
 80039a4:	f7fe f9ba 	bl	8001d1c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2202      	movs	r2, #2
 80039ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681a      	ldr	r2, [r3, #0]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	3304      	adds	r3, #4
 80039b8:	4619      	mov	r1, r3
 80039ba:	4610      	mov	r0, r2
 80039bc:	f000 f89e 	bl	8003afc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a10:	2300      	movs	r3, #0
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
	...

08003a1c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b085      	sub	sp, #20
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	2b01      	cmp	r3, #1
 8003a2e:	d001      	beq.n	8003a34 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	e04e      	b.n	8003ad2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	68da      	ldr	r2, [r3, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f042 0201 	orr.w	r2, r2, #1
 8003a4a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a23      	ldr	r2, [pc, #140]	@ (8003ae0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d022      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a5e:	d01d      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a1f      	ldr	r2, [pc, #124]	@ (8003ae4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d018      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a1e      	ldr	r2, [pc, #120]	@ (8003ae8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d013      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4a1c      	ldr	r2, [pc, #112]	@ (8003aec <HAL_TIM_Base_Start_IT+0xd0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00e      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a1b      	ldr	r2, [pc, #108]	@ (8003af0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d009      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a19      	ldr	r2, [pc, #100]	@ (8003af4 <HAL_TIM_Base_Start_IT+0xd8>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d004      	beq.n	8003a9c <HAL_TIM_Base_Start_IT+0x80>
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a18      	ldr	r2, [pc, #96]	@ (8003af8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003a98:	4293      	cmp	r3, r2
 8003a9a:	d111      	bne.n	8003ac0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f003 0307 	and.w	r3, r3, #7
 8003aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	2b06      	cmp	r3, #6
 8003aac:	d010      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	e007      	b.n	8003ad0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000
 8003ae4:	40000400 	.word	0x40000400
 8003ae8:	40000800 	.word	0x40000800
 8003aec:	40000c00 	.word	0x40000c00
 8003af0:	40010400 	.word	0x40010400
 8003af4:	40014000 	.word	0x40014000
 8003af8:	40001800 	.word	0x40001800

08003afc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a46      	ldr	r2, [pc, #280]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d013      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b1a:	d00f      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a43      	ldr	r2, [pc, #268]	@ (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d00b      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	4a42      	ldr	r2, [pc, #264]	@ (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d007      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	4a41      	ldr	r2, [pc, #260]	@ (8003c34 <TIM_Base_SetConfig+0x138>)
 8003b30:	4293      	cmp	r3, r2
 8003b32:	d003      	beq.n	8003b3c <TIM_Base_SetConfig+0x40>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	4a40      	ldr	r2, [pc, #256]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d108      	bne.n	8003b4e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b42:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	68fa      	ldr	r2, [r7, #12]
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a35      	ldr	r2, [pc, #212]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d02b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b5c:	d027      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a32      	ldr	r2, [pc, #200]	@ (8003c2c <TIM_Base_SetConfig+0x130>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d023      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a31      	ldr	r2, [pc, #196]	@ (8003c30 <TIM_Base_SetConfig+0x134>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d01f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a30      	ldr	r2, [pc, #192]	@ (8003c34 <TIM_Base_SetConfig+0x138>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d01b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a2f      	ldr	r2, [pc, #188]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d017      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a2e      	ldr	r2, [pc, #184]	@ (8003c3c <TIM_Base_SetConfig+0x140>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d013      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a2d      	ldr	r2, [pc, #180]	@ (8003c40 <TIM_Base_SetConfig+0x144>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d00f      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a2c      	ldr	r2, [pc, #176]	@ (8003c44 <TIM_Base_SetConfig+0x148>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d00b      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a2b      	ldr	r2, [pc, #172]	@ (8003c48 <TIM_Base_SetConfig+0x14c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d007      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a2a      	ldr	r2, [pc, #168]	@ (8003c4c <TIM_Base_SetConfig+0x150>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d003      	beq.n	8003bae <TIM_Base_SetConfig+0xb2>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a29      	ldr	r2, [pc, #164]	@ (8003c50 <TIM_Base_SetConfig+0x154>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d108      	bne.n	8003bc0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003bb4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	68fa      	ldr	r2, [r7, #12]
 8003bbc:	4313      	orrs	r3, r2
 8003bbe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003bc6:	683b      	ldr	r3, [r7, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	68fa      	ldr	r2, [r7, #12]
 8003bd2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a10      	ldr	r2, [pc, #64]	@ (8003c28 <TIM_Base_SetConfig+0x12c>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0xf8>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a12      	ldr	r2, [pc, #72]	@ (8003c38 <TIM_Base_SetConfig+0x13c>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d103      	bne.n	8003bfc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	691b      	ldr	r3, [r3, #16]
 8003c06:	f003 0301 	and.w	r3, r3, #1
 8003c0a:	2b01      	cmp	r3, #1
 8003c0c:	d105      	bne.n	8003c1a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	f023 0201 	bic.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	611a      	str	r2, [r3, #16]
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40010400 	.word	0x40010400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40014400 	.word	0x40014400
 8003c44:	40014800 	.word	0x40014800
 8003c48:	40001800 	.word	0x40001800
 8003c4c:	40001c00 	.word	0x40001c00
 8003c50:	40002000 	.word	0x40002000

08003c54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c64:	2b01      	cmp	r3, #1
 8003c66:	d101      	bne.n	8003c6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c68:	2302      	movs	r3, #2
 8003c6a:	e05a      	b.n	8003d22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2202      	movs	r2, #2
 8003c78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	68fa      	ldr	r2, [r7, #12]
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68fa      	ldr	r2, [r7, #12]
 8003ca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	4a21      	ldr	r2, [pc, #132]	@ (8003d30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d022      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cb8:	d01d      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a1d      	ldr	r2, [pc, #116]	@ (8003d34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d018      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a1b      	ldr	r2, [pc, #108]	@ (8003d38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d013      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4a1a      	ldr	r2, [pc, #104]	@ (8003d3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00e      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a18      	ldr	r2, [pc, #96]	@ (8003d40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d009      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a17      	ldr	r2, [pc, #92]	@ (8003d44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d004      	beq.n	8003cf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	@ (8003d48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d10c      	bne.n	8003d10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003cfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003cfe:	683b      	ldr	r3, [r7, #0]
 8003d00:	685b      	ldr	r3, [r3, #4]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	4313      	orrs	r3, r2
 8003d06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	68ba      	ldr	r2, [r7, #8]
 8003d0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
 8003d2e:	bf00      	nop
 8003d30:	40010000 	.word	0x40010000
 8003d34:	40000400 	.word	0x40000400
 8003d38:	40000800 	.word	0x40000800
 8003d3c:	40000c00 	.word	0x40000c00
 8003d40:	40010400 	.word	0x40010400
 8003d44:	40014000 	.word	0x40014000
 8003d48:	40001800 	.word	0x40001800

08003d4c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8003d50:	4904      	ldr	r1, [pc, #16]	@ (8003d64 <MX_FATFS_Init+0x18>)
 8003d52:	4805      	ldr	r0, [pc, #20]	@ (8003d68 <MX_FATFS_Init+0x1c>)
 8003d54:	f003 f9c6 	bl	80070e4 <FATFS_LinkDriver>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	461a      	mov	r2, r3
 8003d5c:	4b03      	ldr	r3, [pc, #12]	@ (8003d6c <MX_FATFS_Init+0x20>)
 8003d5e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003d60:	bf00      	nop
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	20000164 	.word	0x20000164
 8003d68:	20000010 	.word	0x20000010
 8003d6c:	20000160 	.word	0x20000160

08003d70 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003d70:	b480      	push	{r7}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003d74:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7e:	4770      	bx	lr

08003d80 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	4603      	mov	r3, r0
 8003d88:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8003d8a:	79fb      	ldrb	r3, [r7, #7]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f7fd f8cd 	bl	8000f2c <SD_disk_initialize>
 8003d92:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003d94:	4618      	mov	r0, r3
 8003d96:	3708      	adds	r7, #8
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	bd80      	pop	{r7, pc}

08003d9c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	b082      	sub	sp, #8
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
	return SD_disk_status(pdrv);
 8003da6:	79fb      	ldrb	r3, [r7, #7]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fd f9a5 	bl	80010f8 <SD_disk_status>
 8003dae:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	60b9      	str	r1, [r7, #8]
 8003dc0:	607a      	str	r2, [r7, #4]
 8003dc2:	603b      	str	r3, [r7, #0]
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
	return SD_disk_read(pdrv, buff, sector, count);
 8003dc8:	7bf8      	ldrb	r0, [r7, #15]
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	687a      	ldr	r2, [r7, #4]
 8003dce:	68b9      	ldr	r1, [r7, #8]
 8003dd0:	f7fd f9a8 	bl	8001124 <SD_disk_read>
 8003dd4:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3710      	adds	r7, #16
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
 8003dea:	4603      	mov	r3, r0
 8003dec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	return SD_disk_write(pdrv, buff, sector, count);
 8003dee:	7bf8      	ldrb	r0, [r7, #15]
 8003df0:	683b      	ldr	r3, [r7, #0]
 8003df2:	687a      	ldr	r2, [r7, #4]
 8003df4:	68b9      	ldr	r1, [r7, #8]
 8003df6:	f7fd f9ff 	bl	80011f8 <SD_disk_write>
 8003dfa:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	3710      	adds	r7, #16
 8003e00:	46bd      	mov	sp, r7
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b082      	sub	sp, #8
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	603a      	str	r2, [r7, #0]
 8003e0e:	71fb      	strb	r3, [r7, #7]
 8003e10:	460b      	mov	r3, r1
 8003e12:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003e14:	79b9      	ldrb	r1, [r7, #6]
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	683a      	ldr	r2, [r7, #0]
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7fd fa70 	bl	8001300 <SD_disk_ioctl>
 8003e20:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3708      	adds	r7, #8
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b084      	sub	sp, #16
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003e36:	79fb      	ldrb	r3, [r7, #7]
 8003e38:	4a08      	ldr	r2, [pc, #32]	@ (8003e5c <disk_status+0x30>)
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	4413      	add	r3, r2
 8003e3e:	685b      	ldr	r3, [r3, #4]
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	79fa      	ldrb	r2, [r7, #7]
 8003e44:	4905      	ldr	r1, [pc, #20]	@ (8003e5c <disk_status+0x30>)
 8003e46:	440a      	add	r2, r1
 8003e48:	7a12      	ldrb	r2, [r2, #8]
 8003e4a:	4610      	mov	r0, r2
 8003e4c:	4798      	blx	r3
 8003e4e:	4603      	mov	r3, r0
 8003e50:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003e52:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3710      	adds	r7, #16
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	bd80      	pop	{r7, pc}
 8003e5c:	20000390 	.word	0x20000390

08003e60 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8003e60:	b580      	push	{r7, lr}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	4603      	mov	r3, r0
 8003e68:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8003e6e:	79fb      	ldrb	r3, [r7, #7]
 8003e70:	4a0e      	ldr	r2, [pc, #56]	@ (8003eac <disk_initialize+0x4c>)
 8003e72:	5cd3      	ldrb	r3, [r2, r3]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d114      	bne.n	8003ea2 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003e78:	79fb      	ldrb	r3, [r7, #7]
 8003e7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003eac <disk_initialize+0x4c>)
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4413      	add	r3, r2
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	79fa      	ldrb	r2, [r7, #7]
 8003e86:	4909      	ldr	r1, [pc, #36]	@ (8003eac <disk_initialize+0x4c>)
 8003e88:	440a      	add	r2, r1
 8003e8a:	7a12      	ldrb	r2, [r2, #8]
 8003e8c:	4610      	mov	r0, r2
 8003e8e:	4798      	blx	r3
 8003e90:	4603      	mov	r3, r0
 8003e92:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003e94:	7bfb      	ldrb	r3, [r7, #15]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d103      	bne.n	8003ea2 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003e9a:	79fb      	ldrb	r3, [r7, #7]
 8003e9c:	4a03      	ldr	r2, [pc, #12]	@ (8003eac <disk_initialize+0x4c>)
 8003e9e:	2101      	movs	r1, #1
 8003ea0:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	3710      	adds	r7, #16
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	bd80      	pop	{r7, pc}
 8003eac:	20000390 	.word	0x20000390

08003eb0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
 8003eba:	603b      	str	r3, [r7, #0]
 8003ebc:	4603      	mov	r3, r0
 8003ebe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003ec0:	7bfb      	ldrb	r3, [r7, #15]
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <disk_read+0x3c>)
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	4413      	add	r3, r2
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	689c      	ldr	r4, [r3, #8]
 8003ecc:	7bfb      	ldrb	r3, [r7, #15]
 8003ece:	4a07      	ldr	r2, [pc, #28]	@ (8003eec <disk_read+0x3c>)
 8003ed0:	4413      	add	r3, r2
 8003ed2:	7a18      	ldrb	r0, [r3, #8]
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68b9      	ldr	r1, [r7, #8]
 8003eda:	47a0      	blx	r4
 8003edc:	4603      	mov	r3, r0
 8003ede:	75fb      	strb	r3, [r7, #23]
  return res;
 8003ee0:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	371c      	adds	r7, #28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd90      	pop	{r4, r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000390 	.word	0x20000390

08003ef0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003ef0:	b590      	push	{r4, r7, lr}
 8003ef2:	b087      	sub	sp, #28
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	603b      	str	r3, [r7, #0]
 8003efc:	4603      	mov	r3, r0
 8003efe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003f00:	7bfb      	ldrb	r3, [r7, #15]
 8003f02:	4a0a      	ldr	r2, [pc, #40]	@ (8003f2c <disk_write+0x3c>)
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	4413      	add	r3, r2
 8003f08:	685b      	ldr	r3, [r3, #4]
 8003f0a:	68dc      	ldr	r4, [r3, #12]
 8003f0c:	7bfb      	ldrb	r3, [r7, #15]
 8003f0e:	4a07      	ldr	r2, [pc, #28]	@ (8003f2c <disk_write+0x3c>)
 8003f10:	4413      	add	r3, r2
 8003f12:	7a18      	ldrb	r0, [r3, #8]
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	687a      	ldr	r2, [r7, #4]
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	47a0      	blx	r4
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003f20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd90      	pop	{r4, r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	20000390 	.word	0x20000390

08003f30 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8003f30:	b580      	push	{r7, lr}
 8003f32:	b084      	sub	sp, #16
 8003f34:	af00      	add	r7, sp, #0
 8003f36:	4603      	mov	r3, r0
 8003f38:	603a      	str	r2, [r7, #0]
 8003f3a:	71fb      	strb	r3, [r7, #7]
 8003f3c:	460b      	mov	r3, r1
 8003f3e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8003f40:	79fb      	ldrb	r3, [r7, #7]
 8003f42:	4a09      	ldr	r2, [pc, #36]	@ (8003f68 <disk_ioctl+0x38>)
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4413      	add	r3, r2
 8003f48:	685b      	ldr	r3, [r3, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	79fa      	ldrb	r2, [r7, #7]
 8003f4e:	4906      	ldr	r1, [pc, #24]	@ (8003f68 <disk_ioctl+0x38>)
 8003f50:	440a      	add	r2, r1
 8003f52:	7a10      	ldrb	r0, [r2, #8]
 8003f54:	79b9      	ldrb	r1, [r7, #6]
 8003f56:	683a      	ldr	r2, [r7, #0]
 8003f58:	4798      	blx	r3
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	73fb      	strb	r3, [r7, #15]
  return res;
 8003f5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3710      	adds	r7, #16
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}
 8003f68:	20000390 	.word	0x20000390

08003f6c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b085      	sub	sp, #20
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	3301      	adds	r3, #1
 8003f78:	781b      	ldrb	r3, [r3, #0]
 8003f7a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003f7c:	89fb      	ldrh	r3, [r7, #14]
 8003f7e:	021b      	lsls	r3, r3, #8
 8003f80:	b21a      	sxth	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	b21b      	sxth	r3, r3
 8003f8c:	81fb      	strh	r3, [r7, #14]
	return rv;
 8003f8e:	89fb      	ldrh	r3, [r7, #14]
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	3714      	adds	r7, #20
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003f9c:	b480      	push	{r7}
 8003f9e:	b085      	sub	sp, #20
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	3303      	adds	r3, #3
 8003fa8:	781b      	ldrb	r3, [r3, #0]
 8003faa:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	687a      	ldr	r2, [r7, #4]
 8003fb2:	3202      	adds	r2, #2
 8003fb4:	7812      	ldrb	r2, [r2, #0]
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	021b      	lsls	r3, r3, #8
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	3201      	adds	r2, #1
 8003fc2:	7812      	ldrb	r2, [r2, #0]
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	021b      	lsls	r3, r3, #8
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	7812      	ldrb	r2, [r2, #0]
 8003fd0:	4313      	orrs	r3, r2
 8003fd2:	60fb      	str	r3, [r7, #12]
	return rv;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3714      	adds	r7, #20
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr

08003fe2 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003fe2:	b480      	push	{r7}
 8003fe4:	b083      	sub	sp, #12
 8003fe6:	af00      	add	r7, sp, #0
 8003fe8:	6078      	str	r0, [r7, #4]
 8003fea:	460b      	mov	r3, r1
 8003fec:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	1c5a      	adds	r2, r3, #1
 8003ff2:	607a      	str	r2, [r7, #4]
 8003ff4:	887a      	ldrh	r2, [r7, #2]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]
 8003ffa:	887b      	ldrh	r3, [r7, #2]
 8003ffc:	0a1b      	lsrs	r3, r3, #8
 8003ffe:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	1c5a      	adds	r2, r3, #1
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	887a      	ldrh	r2, [r7, #2]
 8004008:	b2d2      	uxtb	r2, r2
 800400a:	701a      	strb	r2, [r3, #0]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr

08004018 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
 8004020:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	1c5a      	adds	r2, r3, #1
 8004026:	607a      	str	r2, [r7, #4]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	0a1b      	lsrs	r3, r3, #8
 8004032:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	607a      	str	r2, [r7, #4]
 800403a:	683a      	ldr	r2, [r7, #0]
 800403c:	b2d2      	uxtb	r2, r2
 800403e:	701a      	strb	r2, [r3, #0]
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	0a1b      	lsrs	r3, r3, #8
 8004044:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	607a      	str	r2, [r7, #4]
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	0a1b      	lsrs	r3, r3, #8
 8004056:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	1c5a      	adds	r2, r3, #1
 800405c:	607a      	str	r2, [r7, #4]
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	b2d2      	uxtb	r2, r2
 8004062:	701a      	strb	r2, [r3, #0]
}
 8004064:	bf00      	nop
 8004066:	370c      	adds	r7, #12
 8004068:	46bd      	mov	sp, r7
 800406a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406e:	4770      	bx	lr

08004070 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8004070:	b480      	push	{r7}
 8004072:	b087      	sub	sp, #28
 8004074:	af00      	add	r7, sp, #0
 8004076:	60f8      	str	r0, [r7, #12]
 8004078:	60b9      	str	r1, [r7, #8]
 800407a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d00d      	beq.n	80040a6 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800408a:	693a      	ldr	r2, [r7, #16]
 800408c:	1c53      	adds	r3, r2, #1
 800408e:	613b      	str	r3, [r7, #16]
 8004090:	697b      	ldr	r3, [r7, #20]
 8004092:	1c59      	adds	r1, r3, #1
 8004094:	6179      	str	r1, [r7, #20]
 8004096:	7812      	ldrb	r2, [r2, #0]
 8004098:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	3b01      	subs	r3, #1
 800409e:	607b      	str	r3, [r7, #4]
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d1f1      	bne.n	800408a <mem_cpy+0x1a>
	}
}
 80040a6:	bf00      	nop
 80040a8:	371c      	adds	r7, #28
 80040aa:	46bd      	mov	sp, r7
 80040ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b0:	4770      	bx	lr

080040b2 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80040b2:	b480      	push	{r7}
 80040b4:	b087      	sub	sp, #28
 80040b6:	af00      	add	r7, sp, #0
 80040b8:	60f8      	str	r0, [r7, #12]
 80040ba:	60b9      	str	r1, [r7, #8]
 80040bc:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	1c5a      	adds	r2, r3, #1
 80040c6:	617a      	str	r2, [r7, #20]
 80040c8:	68ba      	ldr	r2, [r7, #8]
 80040ca:	b2d2      	uxtb	r2, r2
 80040cc:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	3b01      	subs	r3, #1
 80040d2:	607b      	str	r3, [r7, #4]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d1f3      	bne.n	80040c2 <mem_set+0x10>
}
 80040da:	bf00      	nop
 80040dc:	bf00      	nop
 80040de:	371c      	adds	r7, #28
 80040e0:	46bd      	mov	sp, r7
 80040e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e6:	4770      	bx	lr

080040e8 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	@ 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	60f8      	str	r0, [r7, #12]
 80040f0:	60b9      	str	r1, [r7, #8]
 80040f2:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	61fb      	str	r3, [r7, #28]
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8004100:	69fb      	ldr	r3, [r7, #28]
 8004102:	1c5a      	adds	r2, r3, #1
 8004104:	61fa      	str	r2, [r7, #28]
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4619      	mov	r1, r3
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	61ba      	str	r2, [r7, #24]
 8004110:	781b      	ldrb	r3, [r3, #0]
 8004112:	1acb      	subs	r3, r1, r3
 8004114:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	3b01      	subs	r3, #1
 800411a:	607b      	str	r3, [r7, #4]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d002      	beq.n	8004128 <mem_cmp+0x40>
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d0eb      	beq.n	8004100 <mem_cmp+0x18>

	return r;
 8004128:	697b      	ldr	r3, [r7, #20]
}
 800412a:	4618      	mov	r0, r3
 800412c:	3724      	adds	r7, #36	@ 0x24
 800412e:	46bd      	mov	sp, r7
 8004130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004134:	4770      	bx	lr

08004136 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8004136:	b480      	push	{r7}
 8004138:	b083      	sub	sp, #12
 800413a:	af00      	add	r7, sp, #0
 800413c:	6078      	str	r0, [r7, #4]
 800413e:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8004140:	e002      	b.n	8004148 <chk_chr+0x12>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	3301      	adds	r3, #1
 8004146:	607b      	str	r3, [r7, #4]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	781b      	ldrb	r3, [r3, #0]
 800414c:	2b00      	cmp	r3, #0
 800414e:	d005      	beq.n	800415c <chk_chr+0x26>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	781b      	ldrb	r3, [r3, #0]
 8004154:	461a      	mov	r2, r3
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	4293      	cmp	r3, r2
 800415a:	d1f2      	bne.n	8004142 <chk_chr+0xc>
	return *str;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	781b      	ldrb	r3, [r3, #0]
}
 8004160:	4618      	mov	r0, r3
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
 8004174:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8004176:	2300      	movs	r3, #0
 8004178:	60bb      	str	r3, [r7, #8]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	60fb      	str	r3, [r7, #12]
 800417e:	e029      	b.n	80041d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8004180:	4a27      	ldr	r2, [pc, #156]	@ (8004220 <chk_lock+0xb4>)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	4413      	add	r3, r2
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d01d      	beq.n	80041ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800418e:	4a24      	ldr	r2, [pc, #144]	@ (8004220 <chk_lock+0xb4>)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	011b      	lsls	r3, r3, #4
 8004194:	4413      	add	r3, r2
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	429a      	cmp	r2, r3
 800419e:	d116      	bne.n	80041ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80041a0:	4a1f      	ldr	r2, [pc, #124]	@ (8004220 <chk_lock+0xb4>)
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	011b      	lsls	r3, r3, #4
 80041a6:	4413      	add	r3, r2
 80041a8:	3304      	adds	r3, #4
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d10c      	bne.n	80041ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041b4:	4a1a      	ldr	r2, [pc, #104]	@ (8004220 <chk_lock+0xb4>)
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	011b      	lsls	r3, r3, #4
 80041ba:	4413      	add	r3, r2
 80041bc:	3308      	adds	r3, #8
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d102      	bne.n	80041ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80041c8:	e007      	b.n	80041da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 80041ca:	2301      	movs	r3, #1
 80041cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	3301      	adds	r3, #1
 80041d2:	60fb      	str	r3, [r7, #12]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d9d2      	bls.n	8004180 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d109      	bne.n	80041f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d102      	bne.n	80041ec <chk_lock+0x80>
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	2b02      	cmp	r3, #2
 80041ea:	d101      	bne.n	80041f0 <chk_lock+0x84>
 80041ec:	2300      	movs	r3, #0
 80041ee:	e010      	b.n	8004212 <chk_lock+0xa6>
 80041f0:	2312      	movs	r3, #18
 80041f2:	e00e      	b.n	8004212 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d108      	bne.n	800420c <chk_lock+0xa0>
 80041fa:	4a09      	ldr	r2, [pc, #36]	@ (8004220 <chk_lock+0xb4>)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	011b      	lsls	r3, r3, #4
 8004200:	4413      	add	r3, r2
 8004202:	330c      	adds	r3, #12
 8004204:	881b      	ldrh	r3, [r3, #0]
 8004206:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800420a:	d101      	bne.n	8004210 <chk_lock+0xa4>
 800420c:	2310      	movs	r3, #16
 800420e:	e000      	b.n	8004212 <chk_lock+0xa6>
 8004210:	2300      	movs	r3, #0
}
 8004212:	4618      	mov	r0, r3
 8004214:	3714      	adds	r7, #20
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr
 800421e:	bf00      	nop
 8004220:	20000170 	.word	0x20000170

08004224 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800422a:	2300      	movs	r3, #0
 800422c:	607b      	str	r3, [r7, #4]
 800422e:	e002      	b.n	8004236 <enq_lock+0x12>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	3301      	adds	r3, #1
 8004234:	607b      	str	r3, [r7, #4]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2b01      	cmp	r3, #1
 800423a:	d806      	bhi.n	800424a <enq_lock+0x26>
 800423c:	4a09      	ldr	r2, [pc, #36]	@ (8004264 <enq_lock+0x40>)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	011b      	lsls	r3, r3, #4
 8004242:	4413      	add	r3, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d1f2      	bne.n	8004230 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	2b02      	cmp	r3, #2
 800424e:	bf14      	ite	ne
 8004250:	2301      	movne	r3, #1
 8004252:	2300      	moveq	r3, #0
 8004254:	b2db      	uxtb	r3, r3
}
 8004256:	4618      	mov	r0, r3
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr
 8004262:	bf00      	nop
 8004264:	20000170 	.word	0x20000170

08004268 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8004268:	b480      	push	{r7}
 800426a:	b085      	sub	sp, #20
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8004272:	2300      	movs	r3, #0
 8004274:	60fb      	str	r3, [r7, #12]
 8004276:	e01f      	b.n	80042b8 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8004278:	4a41      	ldr	r2, [pc, #260]	@ (8004380 <inc_lock+0x118>)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	011b      	lsls	r3, r3, #4
 800427e:	4413      	add	r3, r2
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	429a      	cmp	r2, r3
 8004288:	d113      	bne.n	80042b2 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800428a:	4a3d      	ldr	r2, [pc, #244]	@ (8004380 <inc_lock+0x118>)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	011b      	lsls	r3, r3, #4
 8004290:	4413      	add	r3, r2
 8004292:	3304      	adds	r3, #4
 8004294:	681a      	ldr	r2, [r3, #0]
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800429a:	429a      	cmp	r2, r3
 800429c:	d109      	bne.n	80042b2 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800429e:	4a38      	ldr	r2, [pc, #224]	@ (8004380 <inc_lock+0x118>)
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	4413      	add	r3, r2
 80042a6:	3308      	adds	r3, #8
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d006      	beq.n	80042c0 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	3301      	adds	r3, #1
 80042b6:	60fb      	str	r3, [r7, #12]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d9dc      	bls.n	8004278 <inc_lock+0x10>
 80042be:	e000      	b.n	80042c2 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80042c0:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d132      	bne.n	800432e <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80042c8:	2300      	movs	r3, #0
 80042ca:	60fb      	str	r3, [r7, #12]
 80042cc:	e002      	b.n	80042d4 <inc_lock+0x6c>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3301      	adds	r3, #1
 80042d2:	60fb      	str	r3, [r7, #12]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d806      	bhi.n	80042e8 <inc_lock+0x80>
 80042da:	4a29      	ldr	r2, [pc, #164]	@ (8004380 <inc_lock+0x118>)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	4413      	add	r3, r2
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1f2      	bne.n	80042ce <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	2b02      	cmp	r3, #2
 80042ec:	d101      	bne.n	80042f2 <inc_lock+0x8a>
 80042ee:	2300      	movs	r3, #0
 80042f0:	e040      	b.n	8004374 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	4922      	ldr	r1, [pc, #136]	@ (8004380 <inc_lock+0x118>)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	440b      	add	r3, r1
 80042fe:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	491e      	ldr	r1, [pc, #120]	@ (8004380 <inc_lock+0x118>)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	011b      	lsls	r3, r3, #4
 800430a:	440b      	add	r3, r1
 800430c:	3304      	adds	r3, #4
 800430e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	695a      	ldr	r2, [r3, #20]
 8004314:	491a      	ldr	r1, [pc, #104]	@ (8004380 <inc_lock+0x118>)
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	011b      	lsls	r3, r3, #4
 800431a:	440b      	add	r3, r1
 800431c:	3308      	adds	r3, #8
 800431e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8004320:	4a17      	ldr	r2, [pc, #92]	@ (8004380 <inc_lock+0x118>)
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	011b      	lsls	r3, r3, #4
 8004326:	4413      	add	r3, r2
 8004328:	330c      	adds	r3, #12
 800432a:	2200      	movs	r2, #0
 800432c:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d009      	beq.n	8004348 <inc_lock+0xe0>
 8004334:	4a12      	ldr	r2, [pc, #72]	@ (8004380 <inc_lock+0x118>)
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	4413      	add	r3, r2
 800433c:	330c      	adds	r3, #12
 800433e:	881b      	ldrh	r3, [r3, #0]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d001      	beq.n	8004348 <inc_lock+0xe0>
 8004344:	2300      	movs	r3, #0
 8004346:	e015      	b.n	8004374 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d108      	bne.n	8004360 <inc_lock+0xf8>
 800434e:	4a0c      	ldr	r2, [pc, #48]	@ (8004380 <inc_lock+0x118>)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	4413      	add	r3, r2
 8004356:	330c      	adds	r3, #12
 8004358:	881b      	ldrh	r3, [r3, #0]
 800435a:	3301      	adds	r3, #1
 800435c:	b29a      	uxth	r2, r3
 800435e:	e001      	b.n	8004364 <inc_lock+0xfc>
 8004360:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004364:	4906      	ldr	r1, [pc, #24]	@ (8004380 <inc_lock+0x118>)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	011b      	lsls	r3, r3, #4
 800436a:	440b      	add	r3, r1
 800436c:	330c      	adds	r3, #12
 800436e:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	20000170 	.word	0x20000170

08004384 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8004384:	b480      	push	{r7}
 8004386:	b085      	sub	sp, #20
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	3b01      	subs	r3, #1
 8004390:	607b      	str	r3, [r7, #4]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b01      	cmp	r3, #1
 8004396:	d825      	bhi.n	80043e4 <dec_lock+0x60>
		n = Files[i].ctr;
 8004398:	4a17      	ldr	r2, [pc, #92]	@ (80043f8 <dec_lock+0x74>)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	011b      	lsls	r3, r3, #4
 800439e:	4413      	add	r3, r2
 80043a0:	330c      	adds	r3, #12
 80043a2:	881b      	ldrh	r3, [r3, #0]
 80043a4:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80043a6:	89fb      	ldrh	r3, [r7, #14]
 80043a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043ac:	d101      	bne.n	80043b2 <dec_lock+0x2e>
 80043ae:	2300      	movs	r3, #0
 80043b0:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d002      	beq.n	80043be <dec_lock+0x3a>
 80043b8:	89fb      	ldrh	r3, [r7, #14]
 80043ba:	3b01      	subs	r3, #1
 80043bc:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80043be:	4a0e      	ldr	r2, [pc, #56]	@ (80043f8 <dec_lock+0x74>)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	011b      	lsls	r3, r3, #4
 80043c4:	4413      	add	r3, r2
 80043c6:	330c      	adds	r3, #12
 80043c8:	89fa      	ldrh	r2, [r7, #14]
 80043ca:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80043cc:	89fb      	ldrh	r3, [r7, #14]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d105      	bne.n	80043de <dec_lock+0x5a>
 80043d2:	4a09      	ldr	r2, [pc, #36]	@ (80043f8 <dec_lock+0x74>)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	4413      	add	r3, r2
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80043de:	2300      	movs	r3, #0
 80043e0:	737b      	strb	r3, [r7, #13]
 80043e2:	e001      	b.n	80043e8 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80043e4:	2302      	movs	r3, #2
 80043e6:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80043e8:	7b7b      	ldrb	r3, [r7, #13]
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr
 80043f6:	bf00      	nop
 80043f8:	20000170 	.word	0x20000170

080043fc <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80043fc:	b480      	push	{r7}
 80043fe:	b085      	sub	sp, #20
 8004400:	af00      	add	r7, sp, #0
 8004402:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8004404:	2300      	movs	r3, #0
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	e010      	b.n	800442c <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800440a:	4a0d      	ldr	r2, [pc, #52]	@ (8004440 <clear_lock+0x44>)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	4413      	add	r3, r2
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	429a      	cmp	r2, r3
 8004418:	d105      	bne.n	8004426 <clear_lock+0x2a>
 800441a:	4a09      	ldr	r2, [pc, #36]	@ (8004440 <clear_lock+0x44>)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	4413      	add	r3, r2
 8004422:	2200      	movs	r2, #0
 8004424:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	3301      	adds	r3, #1
 800442a:	60fb      	str	r3, [r7, #12]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b01      	cmp	r3, #1
 8004430:	d9eb      	bls.n	800440a <clear_lock+0xe>
	}
}
 8004432:	bf00      	nop
 8004434:	bf00      	nop
 8004436:	3714      	adds	r7, #20
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr
 8004440:	20000170 	.word	0x20000170

08004444 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8004444:	b580      	push	{r7, lr}
 8004446:	b086      	sub	sp, #24
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800444c:	2300      	movs	r3, #0
 800444e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	78db      	ldrb	r3, [r3, #3]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d034      	beq.n	80044c2 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800445c:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	7858      	ldrb	r0, [r3, #1]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004468:	2301      	movs	r3, #1
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	f7ff fd40 	bl	8003ef0 <disk_write>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d002      	beq.n	800447c <sync_window+0x38>
			res = FR_DISK_ERR;
 8004476:	2301      	movs	r3, #1
 8004478:	73fb      	strb	r3, [r7, #15]
 800447a:	e022      	b.n	80044c2 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004486:	697a      	ldr	r2, [r7, #20]
 8004488:	1ad2      	subs	r2, r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6a1b      	ldr	r3, [r3, #32]
 800448e:	429a      	cmp	r2, r3
 8004490:	d217      	bcs.n	80044c2 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	789b      	ldrb	r3, [r3, #2]
 8004496:	613b      	str	r3, [r7, #16]
 8004498:	e010      	b.n	80044bc <sync_window+0x78>
					wsect += fs->fsize;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	4413      	add	r3, r2
 80044a2:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	7858      	ldrb	r0, [r3, #1]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80044ae:	2301      	movs	r3, #1
 80044b0:	697a      	ldr	r2, [r7, #20]
 80044b2:	f7ff fd1d 	bl	8003ef0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	3b01      	subs	r3, #1
 80044ba:	613b      	str	r3, [r7, #16]
 80044bc:	693b      	ldr	r3, [r7, #16]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d8eb      	bhi.n	800449a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80044c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3718      	adds	r7, #24
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b084      	sub	sp, #16
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80044d6:	2300      	movs	r3, #0
 80044d8:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044de:	683a      	ldr	r2, [r7, #0]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d01b      	beq.n	800451c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80044e4:	6878      	ldr	r0, [r7, #4]
 80044e6:	f7ff ffad 	bl	8004444 <sync_window>
 80044ea:	4603      	mov	r3, r0
 80044ec:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80044ee:	7bfb      	ldrb	r3, [r7, #15]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d113      	bne.n	800451c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	7858      	ldrb	r0, [r3, #1]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80044fe:	2301      	movs	r3, #1
 8004500:	683a      	ldr	r2, [r7, #0]
 8004502:	f7ff fcd5 	bl	8003eb0 <disk_read>
 8004506:	4603      	mov	r3, r0
 8004508:	2b00      	cmp	r3, #0
 800450a:	d004      	beq.n	8004516 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800450c:	f04f 33ff 	mov.w	r3, #4294967295
 8004510:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8004512:	2301      	movs	r3, #1
 8004514:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	683a      	ldr	r2, [r7, #0]
 800451a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 800451c:	7bfb      	ldrb	r3, [r7, #15]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3710      	adds	r7, #16
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004530:	6878      	ldr	r0, [r7, #4]
 8004532:	f7ff ff87 	bl	8004444 <sync_window>
 8004536:	4603      	mov	r3, r0
 8004538:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800453a:	7bfb      	ldrb	r3, [r7, #15]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d159      	bne.n	80045f4 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	781b      	ldrb	r3, [r3, #0]
 8004544:	2b03      	cmp	r3, #3
 8004546:	d149      	bne.n	80045dc <sync_fs+0xb4>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	791b      	ldrb	r3, [r3, #4]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d145      	bne.n	80045dc <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	899b      	ldrh	r3, [r3, #12]
 800455a:	461a      	mov	r2, r3
 800455c:	2100      	movs	r1, #0
 800455e:	f7ff fda8 	bl	80040b2 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	3338      	adds	r3, #56	@ 0x38
 8004566:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800456a:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800456e:	4618      	mov	r0, r3
 8004570:	f7ff fd37 	bl	8003fe2 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	3338      	adds	r3, #56	@ 0x38
 8004578:	4921      	ldr	r1, [pc, #132]	@ (8004600 <sync_fs+0xd8>)
 800457a:	4618      	mov	r0, r3
 800457c:	f7ff fd4c 	bl	8004018 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	3338      	adds	r3, #56	@ 0x38
 8004584:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8004588:	491e      	ldr	r1, [pc, #120]	@ (8004604 <sync_fs+0xdc>)
 800458a:	4618      	mov	r0, r3
 800458c:	f7ff fd44 	bl	8004018 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3338      	adds	r3, #56	@ 0x38
 8004594:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	4619      	mov	r1, r3
 800459e:	4610      	mov	r0, r2
 80045a0:	f7ff fd3a 	bl	8004018 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	3338      	adds	r3, #56	@ 0x38
 80045a8:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	695b      	ldr	r3, [r3, #20]
 80045b0:	4619      	mov	r1, r3
 80045b2:	4610      	mov	r0, r2
 80045b4:	f7ff fd30 	bl	8004018 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	7858      	ldrb	r0, [r3, #1]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045d0:	2301      	movs	r3, #1
 80045d2:	f7ff fc8d 	bl	8003ef0 <disk_write>
			fs->fsi_flag = 0;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	785b      	ldrb	r3, [r3, #1]
 80045e0:	2200      	movs	r2, #0
 80045e2:	2100      	movs	r1, #0
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fca3 	bl	8003f30 <disk_ioctl>
 80045ea:	4603      	mov	r3, r0
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d001      	beq.n	80045f4 <sync_fs+0xcc>
 80045f0:	2301      	movs	r3, #1
 80045f2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80045f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	3710      	adds	r7, #16
 80045fa:	46bd      	mov	sp, r7
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	bf00      	nop
 8004600:	41615252 	.word	0x41615252
 8004604:	61417272 	.word	0x61417272

08004608 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	3b02      	subs	r3, #2
 8004616:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	69db      	ldr	r3, [r3, #28]
 800461c:	3b02      	subs	r3, #2
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d301      	bcc.n	8004628 <clust2sect+0x20>
 8004624:	2300      	movs	r3, #0
 8004626:	e008      	b.n	800463a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	895b      	ldrh	r3, [r3, #10]
 800462c:	461a      	mov	r2, r3
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	fb03 f202 	mul.w	r2, r3, r2
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004638:	4413      	add	r3, r2
}
 800463a:	4618      	mov	r0, r3
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr

08004646 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8004646:	b580      	push	{r7, lr}
 8004648:	b086      	sub	sp, #24
 800464a:	af00      	add	r7, sp, #0
 800464c:	6078      	str	r0, [r7, #4]
 800464e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	2b01      	cmp	r3, #1
 800465a:	d904      	bls.n	8004666 <get_fat+0x20>
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	69db      	ldr	r3, [r3, #28]
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d302      	bcc.n	800466c <get_fat+0x26>
		val = 1;	/* Internal error */
 8004666:	2301      	movs	r3, #1
 8004668:	617b      	str	r3, [r7, #20]
 800466a:	e0ba      	b.n	80047e2 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800466c:	f04f 33ff 	mov.w	r3, #4294967295
 8004670:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b03      	cmp	r3, #3
 8004678:	f000 8082 	beq.w	8004780 <get_fat+0x13a>
 800467c:	2b03      	cmp	r3, #3
 800467e:	f300 80a6 	bgt.w	80047ce <get_fat+0x188>
 8004682:	2b01      	cmp	r3, #1
 8004684:	d002      	beq.n	800468c <get_fat+0x46>
 8004686:	2b02      	cmp	r3, #2
 8004688:	d055      	beq.n	8004736 <get_fat+0xf0>
 800468a:	e0a0      	b.n	80047ce <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	60fb      	str	r3, [r7, #12]
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	085b      	lsrs	r3, r3, #1
 8004694:	68fa      	ldr	r2, [r7, #12]
 8004696:	4413      	add	r3, r2
 8004698:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800469e:	693b      	ldr	r3, [r7, #16]
 80046a0:	899b      	ldrh	r3, [r3, #12]
 80046a2:	4619      	mov	r1, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046aa:	4413      	add	r3, r2
 80046ac:	4619      	mov	r1, r3
 80046ae:	6938      	ldr	r0, [r7, #16]
 80046b0:	f7ff ff0c 	bl	80044cc <move_window>
 80046b4:	4603      	mov	r3, r0
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	f040 808c 	bne.w	80047d4 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	1c5a      	adds	r2, r3, #1
 80046c0:	60fa      	str	r2, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	8992      	ldrh	r2, [r2, #12]
 80046c6:	fbb3 f1f2 	udiv	r1, r3, r2
 80046ca:	fb01 f202 	mul.w	r2, r1, r2
 80046ce:	1a9b      	subs	r3, r3, r2
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	4413      	add	r3, r2
 80046d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80046d8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80046de:	693b      	ldr	r3, [r7, #16]
 80046e0:	899b      	ldrh	r3, [r3, #12]
 80046e2:	4619      	mov	r1, r3
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80046ea:	4413      	add	r3, r2
 80046ec:	4619      	mov	r1, r3
 80046ee:	6938      	ldr	r0, [r7, #16]
 80046f0:	f7ff feec 	bl	80044cc <move_window>
 80046f4:	4603      	mov	r3, r0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d16e      	bne.n	80047d8 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80046fa:	693b      	ldr	r3, [r7, #16]
 80046fc:	899b      	ldrh	r3, [r3, #12]
 80046fe:	461a      	mov	r2, r3
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	fbb3 f1f2 	udiv	r1, r3, r2
 8004706:	fb01 f202 	mul.w	r2, r1, r2
 800470a:	1a9b      	subs	r3, r3, r2
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	4413      	add	r3, r2
 8004710:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004714:	021b      	lsls	r3, r3, #8
 8004716:	68ba      	ldr	r2, [r7, #8]
 8004718:	4313      	orrs	r3, r2
 800471a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	f003 0301 	and.w	r3, r3, #1
 8004722:	2b00      	cmp	r3, #0
 8004724:	d002      	beq.n	800472c <get_fat+0xe6>
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	091b      	lsrs	r3, r3, #4
 800472a:	e002      	b.n	8004732 <get_fat+0xec>
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004732:	617b      	str	r3, [r7, #20]
			break;
 8004734:	e055      	b.n	80047e2 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	899b      	ldrh	r3, [r3, #12]
 800473e:	085b      	lsrs	r3, r3, #1
 8004740:	b29b      	uxth	r3, r3
 8004742:	4619      	mov	r1, r3
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	fbb3 f3f1 	udiv	r3, r3, r1
 800474a:	4413      	add	r3, r2
 800474c:	4619      	mov	r1, r3
 800474e:	6938      	ldr	r0, [r7, #16]
 8004750:	f7ff febc 	bl	80044cc <move_window>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d140      	bne.n	80047dc <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	8992      	ldrh	r2, [r2, #12]
 8004768:	fbb3 f0f2 	udiv	r0, r3, r2
 800476c:	fb00 f202 	mul.w	r2, r0, r2
 8004770:	1a9b      	subs	r3, r3, r2
 8004772:	440b      	add	r3, r1
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fbf9 	bl	8003f6c <ld_word>
 800477a:	4603      	mov	r3, r0
 800477c:	617b      	str	r3, [r7, #20]
			break;
 800477e:	e030      	b.n	80047e2 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	899b      	ldrh	r3, [r3, #12]
 8004788:	089b      	lsrs	r3, r3, #2
 800478a:	b29b      	uxth	r3, r3
 800478c:	4619      	mov	r1, r3
 800478e:	683b      	ldr	r3, [r7, #0]
 8004790:	fbb3 f3f1 	udiv	r3, r3, r1
 8004794:	4413      	add	r3, r2
 8004796:	4619      	mov	r1, r3
 8004798:	6938      	ldr	r0, [r7, #16]
 800479a:	f7ff fe97 	bl	80044cc <move_window>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d11d      	bne.n	80047e0 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80047a4:	693b      	ldr	r3, [r7, #16]
 80047a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	009b      	lsls	r3, r3, #2
 80047ae:	693a      	ldr	r2, [r7, #16]
 80047b0:	8992      	ldrh	r2, [r2, #12]
 80047b2:	fbb3 f0f2 	udiv	r0, r3, r2
 80047b6:	fb00 f202 	mul.w	r2, r0, r2
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	440b      	add	r3, r1
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fbec 	bl	8003f9c <ld_dword>
 80047c4:	4603      	mov	r3, r0
 80047c6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80047ca:	617b      	str	r3, [r7, #20]
			break;
 80047cc:	e009      	b.n	80047e2 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80047ce:	2301      	movs	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	e006      	b.n	80047e2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047d4:	bf00      	nop
 80047d6:	e004      	b.n	80047e2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80047d8:	bf00      	nop
 80047da:	e002      	b.n	80047e2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80047dc:	bf00      	nop
 80047de:	e000      	b.n	80047e2 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80047e0:	bf00      	nop
		}
	}

	return val;
 80047e2:	697b      	ldr	r3, [r7, #20]
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3718      	adds	r7, #24
 80047e8:	46bd      	mov	sp, r7
 80047ea:	bd80      	pop	{r7, pc}

080047ec <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80047ec:	b590      	push	{r4, r7, lr}
 80047ee:	b089      	sub	sp, #36	@ 0x24
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80047f8:	2302      	movs	r3, #2
 80047fa:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b01      	cmp	r3, #1
 8004800:	f240 8109 	bls.w	8004a16 <put_fat+0x22a>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	69db      	ldr	r3, [r3, #28]
 8004808:	68ba      	ldr	r2, [r7, #8]
 800480a:	429a      	cmp	r2, r3
 800480c:	f080 8103 	bcs.w	8004a16 <put_fat+0x22a>
		switch (fs->fs_type) {
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b03      	cmp	r3, #3
 8004816:	f000 80b6 	beq.w	8004986 <put_fat+0x19a>
 800481a:	2b03      	cmp	r3, #3
 800481c:	f300 80fb 	bgt.w	8004a16 <put_fat+0x22a>
 8004820:	2b01      	cmp	r3, #1
 8004822:	d003      	beq.n	800482c <put_fat+0x40>
 8004824:	2b02      	cmp	r3, #2
 8004826:	f000 8083 	beq.w	8004930 <put_fat+0x144>
 800482a:	e0f4      	b.n	8004a16 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800482c:	68bb      	ldr	r3, [r7, #8]
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	085b      	lsrs	r3, r3, #1
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	4413      	add	r3, r2
 8004838:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	899b      	ldrh	r3, [r3, #12]
 8004842:	4619      	mov	r1, r3
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	fbb3 f3f1 	udiv	r3, r3, r1
 800484a:	4413      	add	r3, r2
 800484c:	4619      	mov	r1, r3
 800484e:	68f8      	ldr	r0, [r7, #12]
 8004850:	f7ff fe3c 	bl	80044cc <move_window>
 8004854:	4603      	mov	r3, r0
 8004856:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004858:	7ffb      	ldrb	r3, [r7, #31]
 800485a:	2b00      	cmp	r3, #0
 800485c:	f040 80d4 	bne.w	8004a08 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004866:	69bb      	ldr	r3, [r7, #24]
 8004868:	1c5a      	adds	r2, r3, #1
 800486a:	61ba      	str	r2, [r7, #24]
 800486c:	68fa      	ldr	r2, [r7, #12]
 800486e:	8992      	ldrh	r2, [r2, #12]
 8004870:	fbb3 f0f2 	udiv	r0, r3, r2
 8004874:	fb00 f202 	mul.w	r2, r0, r2
 8004878:	1a9b      	subs	r3, r3, r2
 800487a:	440b      	add	r3, r1
 800487c:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	2b00      	cmp	r3, #0
 8004886:	d00d      	beq.n	80048a4 <put_fat+0xb8>
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b25b      	sxtb	r3, r3
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	b25a      	sxtb	r2, r3
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	b2db      	uxtb	r3, r3
 8004898:	011b      	lsls	r3, r3, #4
 800489a:	b25b      	sxtb	r3, r3
 800489c:	4313      	orrs	r3, r2
 800489e:	b25b      	sxtb	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	e001      	b.n	80048a8 <put_fat+0xbc>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	b2db      	uxtb	r3, r3
 80048a8:	697a      	ldr	r2, [r7, #20]
 80048aa:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	2201      	movs	r2, #1
 80048b0:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	899b      	ldrh	r3, [r3, #12]
 80048ba:	4619      	mov	r1, r3
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	fbb3 f3f1 	udiv	r3, r3, r1
 80048c2:	4413      	add	r3, r2
 80048c4:	4619      	mov	r1, r3
 80048c6:	68f8      	ldr	r0, [r7, #12]
 80048c8:	f7ff fe00 	bl	80044cc <move_window>
 80048cc:	4603      	mov	r3, r0
 80048ce:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80048d0:	7ffb      	ldrb	r3, [r7, #31]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	f040 809a 	bne.w	8004a0c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	899b      	ldrh	r3, [r3, #12]
 80048e2:	461a      	mov	r2, r3
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80048ea:	fb00 f202 	mul.w	r2, r0, r2
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	440b      	add	r3, r1
 80048f2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	f003 0301 	and.w	r3, r3, #1
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <put_fat+0x11a>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	091b      	lsrs	r3, r3, #4
 8004902:	b2db      	uxtb	r3, r3
 8004904:	e00e      	b.n	8004924 <put_fat+0x138>
 8004906:	697b      	ldr	r3, [r7, #20]
 8004908:	781b      	ldrb	r3, [r3, #0]
 800490a:	b25b      	sxtb	r3, r3
 800490c:	f023 030f 	bic.w	r3, r3, #15
 8004910:	b25a      	sxtb	r2, r3
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	0a1b      	lsrs	r3, r3, #8
 8004916:	b25b      	sxtb	r3, r3
 8004918:	f003 030f 	and.w	r3, r3, #15
 800491c:	b25b      	sxtb	r3, r3
 800491e:	4313      	orrs	r3, r2
 8004920:	b25b      	sxtb	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	697a      	ldr	r2, [r7, #20]
 8004926:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	70da      	strb	r2, [r3, #3]
			break;
 800492e:	e072      	b.n	8004a16 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	899b      	ldrh	r3, [r3, #12]
 8004938:	085b      	lsrs	r3, r3, #1
 800493a:	b29b      	uxth	r3, r3
 800493c:	4619      	mov	r1, r3
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	fbb3 f3f1 	udiv	r3, r3, r1
 8004944:	4413      	add	r3, r2
 8004946:	4619      	mov	r1, r3
 8004948:	68f8      	ldr	r0, [r7, #12]
 800494a:	f7ff fdbf 	bl	80044cc <move_window>
 800494e:	4603      	mov	r3, r0
 8004950:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004952:	7ffb      	ldrb	r3, [r7, #31]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d15b      	bne.n	8004a10 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	8992      	ldrh	r2, [r2, #12]
 8004966:	fbb3 f0f2 	udiv	r0, r3, r2
 800496a:	fb00 f202 	mul.w	r2, r0, r2
 800496e:	1a9b      	subs	r3, r3, r2
 8004970:	440b      	add	r3, r1
 8004972:	687a      	ldr	r2, [r7, #4]
 8004974:	b292      	uxth	r2, r2
 8004976:	4611      	mov	r1, r2
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fb32 	bl	8003fe2 <st_word>
			fs->wflag = 1;
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2201      	movs	r2, #1
 8004982:	70da      	strb	r2, [r3, #3]
			break;
 8004984:	e047      	b.n	8004a16 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	899b      	ldrh	r3, [r3, #12]
 800498e:	089b      	lsrs	r3, r3, #2
 8004990:	b29b      	uxth	r3, r3
 8004992:	4619      	mov	r1, r3
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	fbb3 f3f1 	udiv	r3, r3, r1
 800499a:	4413      	add	r3, r2
 800499c:	4619      	mov	r1, r3
 800499e:	68f8      	ldr	r0, [r7, #12]
 80049a0:	f7ff fd94 	bl	80044cc <move_window>
 80049a4:	4603      	mov	r3, r0
 80049a6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80049a8:	7ffb      	ldrb	r3, [r7, #31]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d132      	bne.n	8004a14 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	8992      	ldrh	r2, [r2, #12]
 80049c2:	fbb3 f0f2 	udiv	r0, r3, r2
 80049c6:	fb00 f202 	mul.w	r2, r0, r2
 80049ca:	1a9b      	subs	r3, r3, r2
 80049cc:	440b      	add	r3, r1
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7ff fae4 	bl	8003f9c <ld_dword>
 80049d4:	4603      	mov	r3, r0
 80049d6:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80049da:	4323      	orrs	r3, r4
 80049dc:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	68fa      	ldr	r2, [r7, #12]
 80049ea:	8992      	ldrh	r2, [r2, #12]
 80049ec:	fbb3 f0f2 	udiv	r0, r3, r2
 80049f0:	fb00 f202 	mul.w	r2, r0, r2
 80049f4:	1a9b      	subs	r3, r3, r2
 80049f6:	440b      	add	r3, r1
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f7ff fb0c 	bl	8004018 <st_dword>
			fs->wflag = 1;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	2201      	movs	r2, #1
 8004a04:	70da      	strb	r2, [r3, #3]
			break;
 8004a06:	e006      	b.n	8004a16 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a08:	bf00      	nop
 8004a0a:	e004      	b.n	8004a16 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a0c:	bf00      	nop
 8004a0e:	e002      	b.n	8004a16 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a10:	bf00      	nop
 8004a12:	e000      	b.n	8004a16 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004a14:	bf00      	nop
		}
	}
	return res;
 8004a16:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3724      	adds	r7, #36	@ 0x24
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd90      	pop	{r4, r7, pc}

08004a20 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8004a20:	b580      	push	{r7, lr}
 8004a22:	b088      	sub	sp, #32
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	60f8      	str	r0, [r7, #12]
 8004a28:	60b9      	str	r1, [r7, #8]
 8004a2a:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	2b01      	cmp	r3, #1
 8004a3a:	d904      	bls.n	8004a46 <remove_chain+0x26>
 8004a3c:	69bb      	ldr	r3, [r7, #24]
 8004a3e:	69db      	ldr	r3, [r3, #28]
 8004a40:	68ba      	ldr	r2, [r7, #8]
 8004a42:	429a      	cmp	r2, r3
 8004a44:	d301      	bcc.n	8004a4a <remove_chain+0x2a>
 8004a46:	2302      	movs	r3, #2
 8004a48:	e04b      	b.n	8004ae2 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00c      	beq.n	8004a6a <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8004a50:	f04f 32ff 	mov.w	r2, #4294967295
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	69b8      	ldr	r0, [r7, #24]
 8004a58:	f7ff fec8 	bl	80047ec <put_fat>
 8004a5c:	4603      	mov	r3, r0
 8004a5e:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8004a60:	7ffb      	ldrb	r3, [r7, #31]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d001      	beq.n	8004a6a <remove_chain+0x4a>
 8004a66:	7ffb      	ldrb	r3, [r7, #31]
 8004a68:	e03b      	b.n	8004ae2 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8004a6a:	68b9      	ldr	r1, [r7, #8]
 8004a6c:	68f8      	ldr	r0, [r7, #12]
 8004a6e:	f7ff fdea 	bl	8004646 <get_fat>
 8004a72:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d031      	beq.n	8004ade <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004a7a:	697b      	ldr	r3, [r7, #20]
 8004a7c:	2b01      	cmp	r3, #1
 8004a7e:	d101      	bne.n	8004a84 <remove_chain+0x64>
 8004a80:	2302      	movs	r3, #2
 8004a82:	e02e      	b.n	8004ae2 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004a84:	697b      	ldr	r3, [r7, #20]
 8004a86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a8a:	d101      	bne.n	8004a90 <remove_chain+0x70>
 8004a8c:	2301      	movs	r3, #1
 8004a8e:	e028      	b.n	8004ae2 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004a90:	2200      	movs	r2, #0
 8004a92:	68b9      	ldr	r1, [r7, #8]
 8004a94:	69b8      	ldr	r0, [r7, #24]
 8004a96:	f7ff fea9 	bl	80047ec <put_fat>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8004a9e:	7ffb      	ldrb	r3, [r7, #31]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d001      	beq.n	8004aa8 <remove_chain+0x88>
 8004aa4:	7ffb      	ldrb	r3, [r7, #31]
 8004aa6:	e01c      	b.n	8004ae2 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004aa8:	69bb      	ldr	r3, [r7, #24]
 8004aaa:	699a      	ldr	r2, [r3, #24]
 8004aac:	69bb      	ldr	r3, [r7, #24]
 8004aae:	69db      	ldr	r3, [r3, #28]
 8004ab0:	3b02      	subs	r3, #2
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20b      	bcs.n	8004ace <remove_chain+0xae>
			fs->free_clst++;
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	699b      	ldr	r3, [r3, #24]
 8004aba:	1c5a      	adds	r2, r3, #1
 8004abc:	69bb      	ldr	r3, [r7, #24]
 8004abe:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004ac0:	69bb      	ldr	r3, [r7, #24]
 8004ac2:	791b      	ldrb	r3, [r3, #4]
 8004ac4:	f043 0301 	orr.w	r3, r3, #1
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	69bb      	ldr	r3, [r7, #24]
 8004acc:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004ad2:	69bb      	ldr	r3, [r7, #24]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d3c6      	bcc.n	8004a6a <remove_chain+0x4a>
 8004adc:	e000      	b.n	8004ae0 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8004ade:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004ae0:	2300      	movs	r3, #0
}
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	3720      	adds	r7, #32
 8004ae6:	46bd      	mov	sp, r7
 8004ae8:	bd80      	pop	{r7, pc}

08004aea <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004aea:	b580      	push	{r7, lr}
 8004aec:	b088      	sub	sp, #32
 8004aee:	af00      	add	r7, sp, #0
 8004af0:	6078      	str	r0, [r7, #4]
 8004af2:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d10d      	bne.n	8004b1c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004b00:	693b      	ldr	r3, [r7, #16]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004b06:	69bb      	ldr	r3, [r7, #24]
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d004      	beq.n	8004b16 <create_chain+0x2c>
 8004b0c:	693b      	ldr	r3, [r7, #16]
 8004b0e:	69db      	ldr	r3, [r3, #28]
 8004b10:	69ba      	ldr	r2, [r7, #24]
 8004b12:	429a      	cmp	r2, r3
 8004b14:	d31b      	bcc.n	8004b4e <create_chain+0x64>
 8004b16:	2301      	movs	r3, #1
 8004b18:	61bb      	str	r3, [r7, #24]
 8004b1a:	e018      	b.n	8004b4e <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8004b1c:	6839      	ldr	r1, [r7, #0]
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7ff fd91 	bl	8004646 <get_fat>
 8004b24:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	d801      	bhi.n	8004b30 <create_chain+0x46>
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e070      	b.n	8004c12 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b36:	d101      	bne.n	8004b3c <create_chain+0x52>
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	e06a      	b.n	8004c12 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	69db      	ldr	r3, [r3, #28]
 8004b40:	68fa      	ldr	r2, [r7, #12]
 8004b42:	429a      	cmp	r2, r3
 8004b44:	d201      	bcs.n	8004b4a <create_chain+0x60>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	e063      	b.n	8004c12 <create_chain+0x128>
		scl = clst;
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8004b58:	693b      	ldr	r3, [r7, #16]
 8004b5a:	69db      	ldr	r3, [r3, #28]
 8004b5c:	69fa      	ldr	r2, [r7, #28]
 8004b5e:	429a      	cmp	r2, r3
 8004b60:	d307      	bcc.n	8004b72 <create_chain+0x88>
				ncl = 2;
 8004b62:	2302      	movs	r3, #2
 8004b64:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8004b66:	69fa      	ldr	r2, [r7, #28]
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	429a      	cmp	r2, r3
 8004b6c:	d901      	bls.n	8004b72 <create_chain+0x88>
 8004b6e:	2300      	movs	r3, #0
 8004b70:	e04f      	b.n	8004c12 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8004b72:	69f9      	ldr	r1, [r7, #28]
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f7ff fd66 	bl	8004646 <get_fat>
 8004b7a:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d00e      	beq.n	8004ba0 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	2b01      	cmp	r3, #1
 8004b86:	d003      	beq.n	8004b90 <create_chain+0xa6>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8e:	d101      	bne.n	8004b94 <create_chain+0xaa>
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	e03e      	b.n	8004c12 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004b94:	69fa      	ldr	r2, [r7, #28]
 8004b96:	69bb      	ldr	r3, [r7, #24]
 8004b98:	429a      	cmp	r2, r3
 8004b9a:	d1da      	bne.n	8004b52 <create_chain+0x68>
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	e038      	b.n	8004c12 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004ba0:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ba6:	69f9      	ldr	r1, [r7, #28]
 8004ba8:	6938      	ldr	r0, [r7, #16]
 8004baa:	f7ff fe1f 	bl	80047ec <put_fat>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004bb2:	7dfb      	ldrb	r3, [r7, #23]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d109      	bne.n	8004bcc <create_chain+0xe2>
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d006      	beq.n	8004bcc <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004bbe:	69fa      	ldr	r2, [r7, #28]
 8004bc0:	6839      	ldr	r1, [r7, #0]
 8004bc2:	6938      	ldr	r0, [r7, #16]
 8004bc4:	f7ff fe12 	bl	80047ec <put_fat>
 8004bc8:	4603      	mov	r3, r0
 8004bca:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004bcc:	7dfb      	ldrb	r3, [r7, #23]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d116      	bne.n	8004c00 <create_chain+0x116>
		fs->last_clst = ncl;
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	69fa      	ldr	r2, [r7, #28]
 8004bd6:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004bd8:	693b      	ldr	r3, [r7, #16]
 8004bda:	699a      	ldr	r2, [r3, #24]
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	69db      	ldr	r3, [r3, #28]
 8004be0:	3b02      	subs	r3, #2
 8004be2:	429a      	cmp	r2, r3
 8004be4:	d804      	bhi.n	8004bf0 <create_chain+0x106>
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	699b      	ldr	r3, [r3, #24]
 8004bea:	1e5a      	subs	r2, r3, #1
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	791b      	ldrb	r3, [r3, #4]
 8004bf4:	f043 0301 	orr.w	r3, r3, #1
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	711a      	strb	r2, [r3, #4]
 8004bfe:	e007      	b.n	8004c10 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004c00:	7dfb      	ldrb	r3, [r7, #23]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d102      	bne.n	8004c0c <create_chain+0x122>
 8004c06:	f04f 33ff 	mov.w	r3, #4294967295
 8004c0a:	e000      	b.n	8004c0e <create_chain+0x124>
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004c10:	69fb      	ldr	r3, [r7, #28]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3720      	adds	r7, #32
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}

08004c1a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b087      	sub	sp, #28
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
 8004c22:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c2e:	3304      	adds	r3, #4
 8004c30:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	899b      	ldrh	r3, [r3, #12]
 8004c36:	461a      	mov	r2, r3
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c3e:	68fa      	ldr	r2, [r7, #12]
 8004c40:	8952      	ldrh	r2, [r2, #10]
 8004c42:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c46:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	1d1a      	adds	r2, r3, #4
 8004c4c:	613a      	str	r2, [r7, #16]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d101      	bne.n	8004c5c <clmt_clust+0x42>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	e010      	b.n	8004c7e <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8004c5c:	697a      	ldr	r2, [r7, #20]
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d307      	bcc.n	8004c74 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8004c64:	697a      	ldr	r2, [r7, #20]
 8004c66:	68bb      	ldr	r3, [r7, #8]
 8004c68:	1ad3      	subs	r3, r2, r3
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	3304      	adds	r3, #4
 8004c70:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8004c72:	e7e9      	b.n	8004c48 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004c74:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	681a      	ldr	r2, [r3, #0]
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	4413      	add	r3, r2
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	371c      	adds	r7, #28
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr

08004c8a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004c8a:	b580      	push	{r7, lr}
 8004c8c:	b086      	sub	sp, #24
 8004c8e:	af00      	add	r7, sp, #0
 8004c90:	6078      	str	r0, [r7, #4]
 8004c92:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004ca0:	d204      	bcs.n	8004cac <dir_sdi+0x22>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	f003 031f 	and.w	r3, r3, #31
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d001      	beq.n	8004cb0 <dir_sdi+0x26>
		return FR_INT_ERR;
 8004cac:	2302      	movs	r3, #2
 8004cae:	e071      	b.n	8004d94 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	683a      	ldr	r2, [r7, #0]
 8004cb4:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d106      	bne.n	8004cd0 <dir_sdi+0x46>
 8004cc2:	693b      	ldr	r3, [r7, #16]
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	2b02      	cmp	r3, #2
 8004cc8:	d902      	bls.n	8004cd0 <dir_sdi+0x46>
		clst = fs->dirbase;
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cce:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004cd0:	697b      	ldr	r3, [r7, #20]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d10c      	bne.n	8004cf0 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	095b      	lsrs	r3, r3, #5
 8004cda:	693a      	ldr	r2, [r7, #16]
 8004cdc:	8912      	ldrh	r2, [r2, #8]
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d301      	bcc.n	8004ce6 <dir_sdi+0x5c>
 8004ce2:	2302      	movs	r3, #2
 8004ce4:	e056      	b.n	8004d94 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	61da      	str	r2, [r3, #28]
 8004cee:	e02d      	b.n	8004d4c <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	895b      	ldrh	r3, [r3, #10]
 8004cf4:	461a      	mov	r2, r3
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	899b      	ldrh	r3, [r3, #12]
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d00:	e019      	b.n	8004d36 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6979      	ldr	r1, [r7, #20]
 8004d06:	4618      	mov	r0, r3
 8004d08:	f7ff fc9d 	bl	8004646 <get_fat>
 8004d0c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d14:	d101      	bne.n	8004d1a <dir_sdi+0x90>
 8004d16:	2301      	movs	r3, #1
 8004d18:	e03c      	b.n	8004d94 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	2b01      	cmp	r3, #1
 8004d1e:	d904      	bls.n	8004d2a <dir_sdi+0xa0>
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	69db      	ldr	r3, [r3, #28]
 8004d24:	697a      	ldr	r2, [r7, #20]
 8004d26:	429a      	cmp	r2, r3
 8004d28:	d301      	bcc.n	8004d2e <dir_sdi+0xa4>
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	e032      	b.n	8004d94 <dir_sdi+0x10a>
			ofs -= csz;
 8004d2e:	683a      	ldr	r2, [r7, #0]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d2e1      	bcs.n	8004d02 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8004d3e:	6979      	ldr	r1, [r7, #20]
 8004d40:	6938      	ldr	r0, [r7, #16]
 8004d42:	f7ff fc61 	bl	8004608 <clust2sect>
 8004d46:	4602      	mov	r2, r0
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	69db      	ldr	r3, [r3, #28]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d101      	bne.n	8004d5e <dir_sdi+0xd4>
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	e01a      	b.n	8004d94 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	69da      	ldr	r2, [r3, #28]
 8004d62:	693b      	ldr	r3, [r7, #16]
 8004d64:	899b      	ldrh	r3, [r3, #12]
 8004d66:	4619      	mov	r1, r3
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004d6e:	441a      	add	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004d74:	693b      	ldr	r3, [r7, #16]
 8004d76:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	899b      	ldrh	r3, [r3, #12]
 8004d7e:	461a      	mov	r2, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	fbb3 f0f2 	udiv	r0, r3, r2
 8004d86:	fb00 f202 	mul.w	r2, r0, r2
 8004d8a:	1a9b      	subs	r3, r3, r2
 8004d8c:	18ca      	adds	r2, r1, r3
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004d92:	2300      	movs	r3, #0
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b086      	sub	sp, #24
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
 8004da4:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	695b      	ldr	r3, [r3, #20]
 8004db0:	3320      	adds	r3, #32
 8004db2:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	69db      	ldr	r3, [r3, #28]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d003      	beq.n	8004dc4 <dir_next+0x28>
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc2:	d301      	bcc.n	8004dc8 <dir_next+0x2c>
 8004dc4:	2304      	movs	r3, #4
 8004dc6:	e0bb      	b.n	8004f40 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	899b      	ldrh	r3, [r3, #12]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004dd4:	fb01 f202 	mul.w	r2, r1, r2
 8004dd8:	1a9b      	subs	r3, r3, r2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	f040 809d 	bne.w	8004f1a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	1c5a      	adds	r2, r3, #1
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	699b      	ldr	r3, [r3, #24]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d10b      	bne.n	8004e0a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004df2:	68bb      	ldr	r3, [r7, #8]
 8004df4:	095b      	lsrs	r3, r3, #5
 8004df6:	68fa      	ldr	r2, [r7, #12]
 8004df8:	8912      	ldrh	r2, [r2, #8]
 8004dfa:	4293      	cmp	r3, r2
 8004dfc:	f0c0 808d 	bcc.w	8004f1a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	61da      	str	r2, [r3, #28]
 8004e06:	2304      	movs	r3, #4
 8004e08:	e09a      	b.n	8004f40 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	899b      	ldrh	r3, [r3, #12]
 8004e0e:	461a      	mov	r2, r3
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e16:	68fa      	ldr	r2, [r7, #12]
 8004e18:	8952      	ldrh	r2, [r2, #10]
 8004e1a:	3a01      	subs	r2, #1
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d17b      	bne.n	8004f1a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	699b      	ldr	r3, [r3, #24]
 8004e28:	4619      	mov	r1, r3
 8004e2a:	4610      	mov	r0, r2
 8004e2c:	f7ff fc0b 	bl	8004646 <get_fat>
 8004e30:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d801      	bhi.n	8004e3c <dir_next+0xa0>
 8004e38:	2302      	movs	r3, #2
 8004e3a:	e081      	b.n	8004f40 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e42:	d101      	bne.n	8004e48 <dir_next+0xac>
 8004e44:	2301      	movs	r3, #1
 8004e46:	e07b      	b.n	8004f40 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	69db      	ldr	r3, [r3, #28]
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d359      	bcc.n	8004f06 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d104      	bne.n	8004e62 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	61da      	str	r2, [r3, #28]
 8004e5e:	2304      	movs	r3, #4
 8004e60:	e06e      	b.n	8004f40 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	699b      	ldr	r3, [r3, #24]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	4610      	mov	r0, r2
 8004e6c:	f7ff fe3d 	bl	8004aea <create_chain>
 8004e70:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d101      	bne.n	8004e7c <dir_next+0xe0>
 8004e78:	2307      	movs	r3, #7
 8004e7a:	e061      	b.n	8004f40 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b01      	cmp	r3, #1
 8004e80:	d101      	bne.n	8004e86 <dir_next+0xea>
 8004e82:	2302      	movs	r3, #2
 8004e84:	e05c      	b.n	8004f40 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e8c:	d101      	bne.n	8004e92 <dir_next+0xf6>
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e056      	b.n	8004f40 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004e92:	68f8      	ldr	r0, [r7, #12]
 8004e94:	f7ff fad6 	bl	8004444 <sync_window>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d001      	beq.n	8004ea2 <dir_next+0x106>
 8004e9e:	2301      	movs	r3, #1
 8004ea0:	e04e      	b.n	8004f40 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	899b      	ldrh	r3, [r3, #12]
 8004eac:	461a      	mov	r2, r3
 8004eae:	2100      	movs	r1, #0
 8004eb0:	f7ff f8ff 	bl	80040b2 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	6979      	ldr	r1, [r7, #20]
 8004eba:	68f8      	ldr	r0, [r7, #12]
 8004ebc:	f7ff fba4 	bl	8004608 <clust2sect>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004ec6:	e012      	b.n	8004eee <dir_next+0x152>
						fs->wflag = 1;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8004ece:	68f8      	ldr	r0, [r7, #12]
 8004ed0:	f7ff fab8 	bl	8004444 <sync_window>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <dir_next+0x142>
 8004eda:	2301      	movs	r3, #1
 8004edc:	e030      	b.n	8004f40 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004ede:	693b      	ldr	r3, [r7, #16]
 8004ee0:	3301      	adds	r3, #1
 8004ee2:	613b      	str	r3, [r7, #16]
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	635a      	str	r2, [r3, #52]	@ 0x34
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	895b      	ldrh	r3, [r3, #10]
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d3e6      	bcc.n	8004ec8 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004efe:	693b      	ldr	r3, [r7, #16]
 8004f00:	1ad2      	subs	r2, r2, r3
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	697a      	ldr	r2, [r7, #20]
 8004f0a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004f0c:	6979      	ldr	r1, [r7, #20]
 8004f0e:	68f8      	ldr	r0, [r7, #12]
 8004f10:	f7ff fb7a 	bl	8004608 <clust2sect>
 8004f14:	4602      	mov	r2, r0
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	899b      	ldrh	r3, [r3, #12]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004f32:	fb00 f202 	mul.w	r2, r0, r2
 8004f36:	1a9b      	subs	r3, r3, r2
 8004f38:	18ca      	adds	r2, r1, r3
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004f3e:	2300      	movs	r3, #0
}
 8004f40:	4618      	mov	r0, r3
 8004f42:	3718      	adds	r7, #24
 8004f44:	46bd      	mov	sp, r7
 8004f46:	bd80      	pop	{r7, pc}

08004f48 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b086      	sub	sp, #24
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004f58:	2100      	movs	r1, #0
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7ff fe95 	bl	8004c8a <dir_sdi>
 8004f60:	4603      	mov	r3, r0
 8004f62:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004f64:	7dfb      	ldrb	r3, [r7, #23]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d12b      	bne.n	8004fc2 <dir_alloc+0x7a>
		n = 0;
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	4619      	mov	r1, r3
 8004f74:	68f8      	ldr	r0, [r7, #12]
 8004f76:	f7ff faa9 	bl	80044cc <move_window>
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8004f7e:	7dfb      	ldrb	r3, [r7, #23]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d11d      	bne.n	8004fc0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a1b      	ldr	r3, [r3, #32]
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2be5      	cmp	r3, #229	@ 0xe5
 8004f8c:	d004      	beq.n	8004f98 <dir_alloc+0x50>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d107      	bne.n	8004fa8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004f98:	693b      	ldr	r3, [r7, #16]
 8004f9a:	3301      	adds	r3, #1
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693a      	ldr	r2, [r7, #16]
 8004fa0:	683b      	ldr	r3, [r7, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d102      	bne.n	8004fac <dir_alloc+0x64>
 8004fa6:	e00c      	b.n	8004fc2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004fa8:	2300      	movs	r3, #0
 8004faa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004fac:	2101      	movs	r1, #1
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff fef4 	bl	8004d9c <dir_next>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004fb8:	7dfb      	ldrb	r3, [r7, #23]
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d0d7      	beq.n	8004f6e <dir_alloc+0x26>
 8004fbe:	e000      	b.n	8004fc2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004fc0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004fc2:	7dfb      	ldrb	r3, [r7, #23]
 8004fc4:	2b04      	cmp	r3, #4
 8004fc6:	d101      	bne.n	8004fcc <dir_alloc+0x84>
 8004fc8:	2307      	movs	r3, #7
 8004fca:	75fb      	strb	r3, [r7, #23]
	return res;
 8004fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004fce:	4618      	mov	r0, r3
 8004fd0:	3718      	adds	r7, #24
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	bd80      	pop	{r7, pc}

08004fd6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004fd6:	b580      	push	{r7, lr}
 8004fd8:	b084      	sub	sp, #16
 8004fda:	af00      	add	r7, sp, #0
 8004fdc:	6078      	str	r0, [r7, #4]
 8004fde:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	331a      	adds	r3, #26
 8004fe4:	4618      	mov	r0, r3
 8004fe6:	f7fe ffc1 	bl	8003f6c <ld_word>
 8004fea:	4603      	mov	r3, r0
 8004fec:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	781b      	ldrb	r3, [r3, #0]
 8004ff2:	2b03      	cmp	r3, #3
 8004ff4:	d109      	bne.n	800500a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	3314      	adds	r3, #20
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f7fe ffb6 	bl	8003f6c <ld_word>
 8005000:	4603      	mov	r3, r0
 8005002:	041b      	lsls	r3, r3, #16
 8005004:	68fa      	ldr	r2, [r7, #12]
 8005006:	4313      	orrs	r3, r2
 8005008:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800500a:	68fb      	ldr	r3, [r7, #12]
}
 800500c:	4618      	mov	r0, r3
 800500e:	3710      	adds	r7, #16
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	60f8      	str	r0, [r7, #12]
 800501c:	60b9      	str	r1, [r7, #8]
 800501e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	331a      	adds	r3, #26
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	b292      	uxth	r2, r2
 8005028:	4611      	mov	r1, r2
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe ffd9 	bl	8003fe2 <st_word>
	if (fs->fs_type == FS_FAT32) {
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	781b      	ldrb	r3, [r3, #0]
 8005034:	2b03      	cmp	r3, #3
 8005036:	d109      	bne.n	800504c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f103 0214 	add.w	r2, r3, #20
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	0c1b      	lsrs	r3, r3, #16
 8005042:	b29b      	uxth	r3, r3
 8005044:	4619      	mov	r1, r3
 8005046:	4610      	mov	r0, r2
 8005048:	f7fe ffcb 	bl	8003fe2 <st_word>
	}
}
 800504c:	bf00      	nop
 800504e:	3710      	adds	r7, #16
 8005050:	46bd      	mov	sp, r7
 8005052:	bd80      	pop	{r7, pc}

08005054 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8005054:	b590      	push	{r4, r7, lr}
 8005056:	b087      	sub	sp, #28
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
 800505c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	331a      	adds	r3, #26
 8005062:	4618      	mov	r0, r3
 8005064:	f7fe ff82 	bl	8003f6c <ld_word>
 8005068:	4603      	mov	r3, r0
 800506a:	2b00      	cmp	r3, #0
 800506c:	d001      	beq.n	8005072 <cmp_lfn+0x1e>
 800506e:	2300      	movs	r3, #0
 8005070:	e059      	b.n	8005126 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800507a:	1e5a      	subs	r2, r3, #1
 800507c:	4613      	mov	r3, r2
 800507e:	005b      	lsls	r3, r3, #1
 8005080:	4413      	add	r3, r2
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	4413      	add	r3, r2
 8005086:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8005088:	2301      	movs	r3, #1
 800508a:	81fb      	strh	r3, [r7, #14]
 800508c:	2300      	movs	r3, #0
 800508e:	613b      	str	r3, [r7, #16]
 8005090:	e033      	b.n	80050fa <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8005092:	4a27      	ldr	r2, [pc, #156]	@ (8005130 <cmp_lfn+0xdc>)
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4413      	add	r3, r2
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	4413      	add	r3, r2
 80050a0:	4618      	mov	r0, r3
 80050a2:	f7fe ff63 	bl	8003f6c <ld_word>
 80050a6:	4603      	mov	r3, r0
 80050a8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80050aa:	89fb      	ldrh	r3, [r7, #14]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d01a      	beq.n	80050e6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80050b0:	697b      	ldr	r3, [r7, #20]
 80050b2:	2bfe      	cmp	r3, #254	@ 0xfe
 80050b4:	d812      	bhi.n	80050dc <cmp_lfn+0x88>
 80050b6:	89bb      	ldrh	r3, [r7, #12]
 80050b8:	4618      	mov	r0, r3
 80050ba:	f002 f85f 	bl	800717c <ff_wtoupper>
 80050be:	4603      	mov	r3, r0
 80050c0:	461c      	mov	r4, r3
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	617a      	str	r2, [r7, #20]
 80050c8:	005b      	lsls	r3, r3, #1
 80050ca:	687a      	ldr	r2, [r7, #4]
 80050cc:	4413      	add	r3, r2
 80050ce:	881b      	ldrh	r3, [r3, #0]
 80050d0:	4618      	mov	r0, r3
 80050d2:	f002 f853 	bl	800717c <ff_wtoupper>
 80050d6:	4603      	mov	r3, r0
 80050d8:	429c      	cmp	r4, r3
 80050da:	d001      	beq.n	80050e0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80050dc:	2300      	movs	r3, #0
 80050de:	e022      	b.n	8005126 <cmp_lfn+0xd2>
			}
			wc = uc;
 80050e0:	89bb      	ldrh	r3, [r7, #12]
 80050e2:	81fb      	strh	r3, [r7, #14]
 80050e4:	e006      	b.n	80050f4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80050e6:	89bb      	ldrh	r3, [r7, #12]
 80050e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80050ec:	4293      	cmp	r3, r2
 80050ee:	d001      	beq.n	80050f4 <cmp_lfn+0xa0>
 80050f0:	2300      	movs	r3, #0
 80050f2:	e018      	b.n	8005126 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80050f4:	693b      	ldr	r3, [r7, #16]
 80050f6:	3301      	adds	r3, #1
 80050f8:	613b      	str	r3, [r7, #16]
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	2b0c      	cmp	r3, #12
 80050fe:	d9c8      	bls.n	8005092 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <cmp_lfn+0xd0>
 800510c:	89fb      	ldrh	r3, [r7, #14]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d008      	beq.n	8005124 <cmp_lfn+0xd0>
 8005112:	697b      	ldr	r3, [r7, #20]
 8005114:	005b      	lsls	r3, r3, #1
 8005116:	687a      	ldr	r2, [r7, #4]
 8005118:	4413      	add	r3, r2
 800511a:	881b      	ldrh	r3, [r3, #0]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d001      	beq.n	8005124 <cmp_lfn+0xd0>
 8005120:	2300      	movs	r3, #0
 8005122:	e000      	b.n	8005126 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8005124:	2301      	movs	r3, #1
}
 8005126:	4618      	mov	r0, r3
 8005128:	371c      	adds	r7, #28
 800512a:	46bd      	mov	sp, r7
 800512c:	bd90      	pop	{r4, r7, pc}
 800512e:	bf00      	nop
 8005130:	080083dc 	.word	0x080083dc

08005134 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b088      	sub	sp, #32
 8005138:	af00      	add	r7, sp, #0
 800513a:	60f8      	str	r0, [r7, #12]
 800513c:	60b9      	str	r1, [r7, #8]
 800513e:	4611      	mov	r1, r2
 8005140:	461a      	mov	r2, r3
 8005142:	460b      	mov	r3, r1
 8005144:	71fb      	strb	r3, [r7, #7]
 8005146:	4613      	mov	r3, r2
 8005148:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	330d      	adds	r3, #13
 800514e:	79ba      	ldrb	r2, [r7, #6]
 8005150:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	330b      	adds	r3, #11
 8005156:	220f      	movs	r2, #15
 8005158:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	330c      	adds	r3, #12
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8005162:	68bb      	ldr	r3, [r7, #8]
 8005164:	331a      	adds	r3, #26
 8005166:	2100      	movs	r1, #0
 8005168:	4618      	mov	r0, r3
 800516a:	f7fe ff3a 	bl	8003fe2 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800516e:	79fb      	ldrb	r3, [r7, #7]
 8005170:	1e5a      	subs	r2, r3, #1
 8005172:	4613      	mov	r3, r2
 8005174:	005b      	lsls	r3, r3, #1
 8005176:	4413      	add	r3, r2
 8005178:	009b      	lsls	r3, r3, #2
 800517a:	4413      	add	r3, r2
 800517c:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800517e:	2300      	movs	r3, #0
 8005180:	82fb      	strh	r3, [r7, #22]
 8005182:	2300      	movs	r3, #0
 8005184:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8005186:	8afb      	ldrh	r3, [r7, #22]
 8005188:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800518c:	4293      	cmp	r3, r2
 800518e:	d007      	beq.n	80051a0 <put_lfn+0x6c>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	61fa      	str	r2, [r7, #28]
 8005196:	005b      	lsls	r3, r3, #1
 8005198:	68fa      	ldr	r2, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	881b      	ldrh	r3, [r3, #0]
 800519e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80051a0:	4a17      	ldr	r2, [pc, #92]	@ (8005200 <put_lfn+0xcc>)
 80051a2:	69bb      	ldr	r3, [r7, #24]
 80051a4:	4413      	add	r3, r2
 80051a6:	781b      	ldrb	r3, [r3, #0]
 80051a8:	461a      	mov	r2, r3
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	4413      	add	r3, r2
 80051ae:	8afa      	ldrh	r2, [r7, #22]
 80051b0:	4611      	mov	r1, r2
 80051b2:	4618      	mov	r0, r3
 80051b4:	f7fe ff15 	bl	8003fe2 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80051b8:	8afb      	ldrh	r3, [r7, #22]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d102      	bne.n	80051c4 <put_lfn+0x90>
 80051be:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80051c2:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	3301      	adds	r3, #1
 80051c8:	61bb      	str	r3, [r7, #24]
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b0c      	cmp	r3, #12
 80051ce:	d9da      	bls.n	8005186 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80051d0:	8afb      	ldrh	r3, [r7, #22]
 80051d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d006      	beq.n	80051e8 <put_lfn+0xb4>
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	005b      	lsls	r3, r3, #1
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	4413      	add	r3, r2
 80051e2:	881b      	ldrh	r3, [r3, #0]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d103      	bne.n	80051f0 <put_lfn+0xbc>
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051ee:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	79fa      	ldrb	r2, [r7, #7]
 80051f4:	701a      	strb	r2, [r3, #0]
}
 80051f6:	bf00      	nop
 80051f8:	3720      	adds	r7, #32
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	bf00      	nop
 8005200:	080083dc 	.word	0x080083dc

08005204 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8005204:	b580      	push	{r7, lr}
 8005206:	b08c      	sub	sp, #48	@ 0x30
 8005208:	af00      	add	r7, sp, #0
 800520a:	60f8      	str	r0, [r7, #12]
 800520c:	60b9      	str	r1, [r7, #8]
 800520e:	607a      	str	r2, [r7, #4]
 8005210:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8005212:	220b      	movs	r2, #11
 8005214:	68b9      	ldr	r1, [r7, #8]
 8005216:	68f8      	ldr	r0, [r7, #12]
 8005218:	f7fe ff2a 	bl	8004070 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b05      	cmp	r3, #5
 8005220:	d92b      	bls.n	800527a <gen_numname+0x76>
		sr = seq;
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8005226:	e022      	b.n	800526e <gen_numname+0x6a>
			wc = *lfn++;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	1c9a      	adds	r2, r3, #2
 800522c:	607a      	str	r2, [r7, #4]
 800522e:	881b      	ldrh	r3, [r3, #0]
 8005230:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8005232:	2300      	movs	r3, #0
 8005234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005236:	e017      	b.n	8005268 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8005238:	69fb      	ldr	r3, [r7, #28]
 800523a:	005a      	lsls	r2, r3, #1
 800523c:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800523e:	f003 0301 	and.w	r3, r3, #1
 8005242:	4413      	add	r3, r2
 8005244:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8005246:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8005248:	085b      	lsrs	r3, r3, #1
 800524a:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d005      	beq.n	8005262 <gen_numname+0x5e>
 8005256:	69fb      	ldr	r3, [r7, #28]
 8005258:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 800525c:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8005260:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8005262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005264:	3301      	adds	r3, #1
 8005266:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005268:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800526a:	2b0f      	cmp	r3, #15
 800526c:	d9e4      	bls.n	8005238 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	881b      	ldrh	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d1d8      	bne.n	8005228 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800527a:	2307      	movs	r3, #7
 800527c:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	b2db      	uxtb	r3, r3
 8005282:	f003 030f 	and.w	r3, r3, #15
 8005286:	b2db      	uxtb	r3, r3
 8005288:	3330      	adds	r3, #48	@ 0x30
 800528a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800528e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005292:	2b39      	cmp	r3, #57	@ 0x39
 8005294:	d904      	bls.n	80052a0 <gen_numname+0x9c>
 8005296:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800529a:	3307      	adds	r3, #7
 800529c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 80052a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052a2:	1e5a      	subs	r2, r3, #1
 80052a4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052a6:	3330      	adds	r3, #48	@ 0x30
 80052a8:	443b      	add	r3, r7
 80052aa:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80052ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	091b      	lsrs	r3, r3, #4
 80052b6:	603b      	str	r3, [r7, #0]
	} while (seq);
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d1df      	bne.n	800527e <gen_numname+0x7a>
	ns[i] = '~';
 80052be:	f107 0214 	add.w	r2, r7, #20
 80052c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c4:	4413      	add	r3, r2
 80052c6:	227e      	movs	r2, #126	@ 0x7e
 80052c8:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80052ca:	2300      	movs	r3, #0
 80052cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80052ce:	e002      	b.n	80052d6 <gen_numname+0xd2>
 80052d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d2:	3301      	adds	r3, #1
 80052d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80052d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052da:	429a      	cmp	r2, r3
 80052dc:	d205      	bcs.n	80052ea <gen_numname+0xe6>
 80052de:	68fa      	ldr	r2, [r7, #12]
 80052e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e2:	4413      	add	r3, r2
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b20      	cmp	r3, #32
 80052e8:	d1f2      	bne.n	80052d0 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80052ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ec:	2b07      	cmp	r3, #7
 80052ee:	d807      	bhi.n	8005300 <gen_numname+0xfc>
 80052f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052f6:	3330      	adds	r3, #48	@ 0x30
 80052f8:	443b      	add	r3, r7
 80052fa:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80052fe:	e000      	b.n	8005302 <gen_numname+0xfe>
 8005300:	2120      	movs	r1, #32
 8005302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005304:	1c5a      	adds	r2, r3, #1
 8005306:	627a      	str	r2, [r7, #36]	@ 0x24
 8005308:	68fa      	ldr	r2, [r7, #12]
 800530a:	4413      	add	r3, r2
 800530c:	460a      	mov	r2, r1
 800530e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8005310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005312:	2b07      	cmp	r3, #7
 8005314:	d9e9      	bls.n	80052ea <gen_numname+0xe6>
}
 8005316:	bf00      	nop
 8005318:	bf00      	nop
 800531a:	3730      	adds	r7, #48	@ 0x30
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8005328:	2300      	movs	r3, #0
 800532a:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800532c:	230b      	movs	r3, #11
 800532e:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8005330:	7bfb      	ldrb	r3, [r7, #15]
 8005332:	b2da      	uxtb	r2, r3
 8005334:	0852      	lsrs	r2, r2, #1
 8005336:	01db      	lsls	r3, r3, #7
 8005338:	4313      	orrs	r3, r2
 800533a:	b2da      	uxtb	r2, r3
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	1c59      	adds	r1, r3, #1
 8005340:	6079      	str	r1, [r7, #4]
 8005342:	781b      	ldrb	r3, [r3, #0]
 8005344:	4413      	add	r3, r2
 8005346:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8005348:	68bb      	ldr	r3, [r7, #8]
 800534a:	3b01      	subs	r3, #1
 800534c:	60bb      	str	r3, [r7, #8]
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d1ed      	bne.n	8005330 <sum_sfn+0x10>
	return sum;
 8005354:	7bfb      	ldrb	r3, [r7, #15]
}
 8005356:	4618      	mov	r0, r3
 8005358:	3714      	adds	r7, #20
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b086      	sub	sp, #24
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8005370:	2100      	movs	r1, #0
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f7ff fc89 	bl	8004c8a <dir_sdi>
 8005378:	4603      	mov	r3, r0
 800537a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d001      	beq.n	8005386 <dir_find+0x24>
 8005382:	7dfb      	ldrb	r3, [r7, #23]
 8005384:	e0a9      	b.n	80054da <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8005386:	23ff      	movs	r3, #255	@ 0xff
 8005388:	753b      	strb	r3, [r7, #20]
 800538a:	7d3b      	ldrb	r3, [r7, #20]
 800538c:	757b      	strb	r3, [r7, #21]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f04f 32ff 	mov.w	r2, #4294967295
 8005394:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4619      	mov	r1, r3
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7ff f895 	bl	80044cc <move_window>
 80053a2:	4603      	mov	r3, r0
 80053a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	f040 8090 	bne.w	80054ce <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	6a1b      	ldr	r3, [r3, #32]
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80053b6:	7dbb      	ldrb	r3, [r7, #22]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <dir_find+0x60>
 80053bc:	2304      	movs	r3, #4
 80053be:	75fb      	strb	r3, [r7, #23]
 80053c0:	e08a      	b.n	80054d8 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	330b      	adds	r3, #11
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053ce:	73fb      	strb	r3, [r7, #15]
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	7bfa      	ldrb	r2, [r7, #15]
 80053d4:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80053d6:	7dbb      	ldrb	r3, [r7, #22]
 80053d8:	2be5      	cmp	r3, #229	@ 0xe5
 80053da:	d007      	beq.n	80053ec <dir_find+0x8a>
 80053dc:	7bfb      	ldrb	r3, [r7, #15]
 80053de:	f003 0308 	and.w	r3, r3, #8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d009      	beq.n	80053fa <dir_find+0x98>
 80053e6:	7bfb      	ldrb	r3, [r7, #15]
 80053e8:	2b0f      	cmp	r3, #15
 80053ea:	d006      	beq.n	80053fa <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80053ec:	23ff      	movs	r3, #255	@ 0xff
 80053ee:	757b      	strb	r3, [r7, #21]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	f04f 32ff 	mov.w	r2, #4294967295
 80053f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80053f8:	e05e      	b.n	80054b8 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80053fa:	7bfb      	ldrb	r3, [r7, #15]
 80053fc:	2b0f      	cmp	r3, #15
 80053fe:	d136      	bne.n	800546e <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800540a:	2b00      	cmp	r3, #0
 800540c:	d154      	bne.n	80054b8 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800540e:	7dbb      	ldrb	r3, [r7, #22]
 8005410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005414:	2b00      	cmp	r3, #0
 8005416:	d00d      	beq.n	8005434 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	7b5b      	ldrb	r3, [r3, #13]
 800541e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8005420:	7dbb      	ldrb	r3, [r7, #22]
 8005422:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005426:	75bb      	strb	r3, [r7, #22]
 8005428:	7dbb      	ldrb	r3, [r7, #22]
 800542a:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	695a      	ldr	r2, [r3, #20]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8005434:	7dba      	ldrb	r2, [r7, #22]
 8005436:	7d7b      	ldrb	r3, [r7, #21]
 8005438:	429a      	cmp	r2, r3
 800543a:	d115      	bne.n	8005468 <dir_find+0x106>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6a1b      	ldr	r3, [r3, #32]
 8005440:	330d      	adds	r3, #13
 8005442:	781b      	ldrb	r3, [r3, #0]
 8005444:	7d3a      	ldrb	r2, [r7, #20]
 8005446:	429a      	cmp	r2, r3
 8005448:	d10e      	bne.n	8005468 <dir_find+0x106>
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	691a      	ldr	r2, [r3, #16]
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	6a1b      	ldr	r3, [r3, #32]
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7ff fdfd 	bl	8005054 <cmp_lfn>
 800545a:	4603      	mov	r3, r0
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <dir_find+0x106>
 8005460:	7d7b      	ldrb	r3, [r7, #21]
 8005462:	3b01      	subs	r3, #1
 8005464:	b2db      	uxtb	r3, r3
 8005466:	e000      	b.n	800546a <dir_find+0x108>
 8005468:	23ff      	movs	r3, #255	@ 0xff
 800546a:	757b      	strb	r3, [r7, #21]
 800546c:	e024      	b.n	80054b8 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800546e:	7d7b      	ldrb	r3, [r7, #21]
 8005470:	2b00      	cmp	r3, #0
 8005472:	d109      	bne.n	8005488 <dir_find+0x126>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a1b      	ldr	r3, [r3, #32]
 8005478:	4618      	mov	r0, r3
 800547a:	f7ff ff51 	bl	8005320 <sum_sfn>
 800547e:	4603      	mov	r3, r0
 8005480:	461a      	mov	r2, r3
 8005482:	7d3b      	ldrb	r3, [r7, #20]
 8005484:	4293      	cmp	r3, r2
 8005486:	d024      	beq.n	80054d2 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d10a      	bne.n	80054ac <dir_find+0x14a>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6a18      	ldr	r0, [r3, #32]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	3324      	adds	r3, #36	@ 0x24
 800549e:	220b      	movs	r2, #11
 80054a0:	4619      	mov	r1, r3
 80054a2:	f7fe fe21 	bl	80040e8 <mem_cmp>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d014      	beq.n	80054d6 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80054ac:	23ff      	movs	r3, #255	@ 0xff
 80054ae:	757b      	strb	r3, [r7, #21]
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	f04f 32ff 	mov.w	r2, #4294967295
 80054b6:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80054b8:	2100      	movs	r1, #0
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f7ff fc6e 	bl	8004d9c <dir_next>
 80054c0:	4603      	mov	r3, r0
 80054c2:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80054c4:	7dfb      	ldrb	r3, [r7, #23]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	f43f af65 	beq.w	8005396 <dir_find+0x34>
 80054cc:	e004      	b.n	80054d8 <dir_find+0x176>
		if (res != FR_OK) break;
 80054ce:	bf00      	nop
 80054d0:	e002      	b.n	80054d8 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80054d2:	bf00      	nop
 80054d4:	e000      	b.n	80054d8 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80054d6:	bf00      	nop

	return res;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	@ 0x30
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80054f8:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d001      	beq.n	8005504 <dir_register+0x20>
 8005500:	2306      	movs	r3, #6
 8005502:	e0e0      	b.n	80056c6 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8005504:	2300      	movs	r3, #0
 8005506:	627b      	str	r3, [r7, #36]	@ 0x24
 8005508:	e002      	b.n	8005510 <dir_register+0x2c>
 800550a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550c:	3301      	adds	r3, #1
 800550e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	691a      	ldr	r2, [r3, #16]
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
 800551a:	881b      	ldrh	r3, [r3, #0]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d1f4      	bne.n	800550a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8005526:	f107 030c 	add.w	r3, r7, #12
 800552a:	220c      	movs	r2, #12
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe fd9f 	bl	8004070 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8005532:	7dfb      	ldrb	r3, [r7, #23]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b00      	cmp	r3, #0
 800553a:	d032      	beq.n	80055a2 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2240      	movs	r2, #64	@ 0x40
 8005540:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8005544:	2301      	movs	r3, #1
 8005546:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005548:	e016      	b.n	8005578 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	691a      	ldr	r2, [r3, #16]
 8005554:	f107 010c 	add.w	r1, r7, #12
 8005558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800555a:	f7ff fe53 	bl	8005204 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800555e:	6878      	ldr	r0, [r7, #4]
 8005560:	f7ff feff 	bl	8005362 <dir_find>
 8005564:	4603      	mov	r3, r0
 8005566:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 800556a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800556e:	2b00      	cmp	r3, #0
 8005570:	d106      	bne.n	8005580 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8005572:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005574:	3301      	adds	r3, #1
 8005576:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800557a:	2b63      	cmp	r3, #99	@ 0x63
 800557c:	d9e5      	bls.n	800554a <dir_register+0x66>
 800557e:	e000      	b.n	8005582 <dir_register+0x9e>
			if (res != FR_OK) break;
 8005580:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8005582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005584:	2b64      	cmp	r3, #100	@ 0x64
 8005586:	d101      	bne.n	800558c <dir_register+0xa8>
 8005588:	2307      	movs	r3, #7
 800558a:	e09c      	b.n	80056c6 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800558c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005590:	2b04      	cmp	r3, #4
 8005592:	d002      	beq.n	800559a <dir_register+0xb6>
 8005594:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005598:	e095      	b.n	80056c6 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800559a:	7dfa      	ldrb	r2, [r7, #23]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 80055a2:	7dfb      	ldrb	r3, [r7, #23]
 80055a4:	f003 0302 	and.w	r3, r3, #2
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d007      	beq.n	80055bc <dir_register+0xd8>
 80055ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055ae:	330c      	adds	r3, #12
 80055b0:	4a47      	ldr	r2, [pc, #284]	@ (80056d0 <dir_register+0x1ec>)
 80055b2:	fba2 2303 	umull	r2, r3, r2, r3
 80055b6:	089b      	lsrs	r3, r3, #2
 80055b8:	3301      	adds	r3, #1
 80055ba:	e000      	b.n	80055be <dir_register+0xda>
 80055bc:	2301      	movs	r3, #1
 80055be:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80055c0:	6a39      	ldr	r1, [r7, #32]
 80055c2:	6878      	ldr	r0, [r7, #4]
 80055c4:	f7ff fcc0 	bl	8004f48 <dir_alloc>
 80055c8:	4603      	mov	r3, r0
 80055ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80055ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d148      	bne.n	8005668 <dir_register+0x184>
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	3b01      	subs	r3, #1
 80055da:	623b      	str	r3, [r7, #32]
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d042      	beq.n	8005668 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	695a      	ldr	r2, [r3, #20]
 80055e6:	6a3b      	ldr	r3, [r7, #32]
 80055e8:	015b      	lsls	r3, r3, #5
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	4619      	mov	r1, r3
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f7ff fb4b 	bl	8004c8a <dir_sdi>
 80055f4:	4603      	mov	r3, r0
 80055f6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80055fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d132      	bne.n	8005668 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	3324      	adds	r3, #36	@ 0x24
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff fe8a 	bl	8005320 <sum_sfn>
 800560c:	4603      	mov	r3, r0
 800560e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	69db      	ldr	r3, [r3, #28]
 8005614:	4619      	mov	r1, r3
 8005616:	69f8      	ldr	r0, [r7, #28]
 8005618:	f7fe ff58 	bl	80044cc <move_window>
 800561c:	4603      	mov	r3, r0
 800561e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8005622:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005626:	2b00      	cmp	r3, #0
 8005628:	d11d      	bne.n	8005666 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	6918      	ldr	r0, [r3, #16]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	6a19      	ldr	r1, [r3, #32]
 8005632:	6a3b      	ldr	r3, [r7, #32]
 8005634:	b2da      	uxtb	r2, r3
 8005636:	7efb      	ldrb	r3, [r7, #27]
 8005638:	f7ff fd7c 	bl	8005134 <put_lfn>
				fs->wflag = 1;
 800563c:	69fb      	ldr	r3, [r7, #28]
 800563e:	2201      	movs	r2, #1
 8005640:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8005642:	2100      	movs	r1, #0
 8005644:	6878      	ldr	r0, [r7, #4]
 8005646:	f7ff fba9 	bl	8004d9c <dir_next>
 800564a:	4603      	mov	r3, r0
 800564c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8005650:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005654:	2b00      	cmp	r3, #0
 8005656:	d107      	bne.n	8005668 <dir_register+0x184>
 8005658:	6a3b      	ldr	r3, [r7, #32]
 800565a:	3b01      	subs	r3, #1
 800565c:	623b      	str	r3, [r7, #32]
 800565e:	6a3b      	ldr	r3, [r7, #32]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d1d5      	bne.n	8005610 <dir_register+0x12c>
 8005664:	e000      	b.n	8005668 <dir_register+0x184>
				if (res != FR_OK) break;
 8005666:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8005668:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800566c:	2b00      	cmp	r3, #0
 800566e:	d128      	bne.n	80056c2 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	69db      	ldr	r3, [r3, #28]
 8005674:	4619      	mov	r1, r3
 8005676:	69f8      	ldr	r0, [r7, #28]
 8005678:	f7fe ff28 	bl	80044cc <move_window>
 800567c:	4603      	mov	r3, r0
 800567e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8005682:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005686:	2b00      	cmp	r3, #0
 8005688:	d11b      	bne.n	80056c2 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a1b      	ldr	r3, [r3, #32]
 800568e:	2220      	movs	r2, #32
 8005690:	2100      	movs	r1, #0
 8005692:	4618      	mov	r0, r3
 8005694:	f7fe fd0d 	bl	80040b2 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	6a18      	ldr	r0, [r3, #32]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	3324      	adds	r3, #36	@ 0x24
 80056a0:	220b      	movs	r2, #11
 80056a2:	4619      	mov	r1, r3
 80056a4:	f7fe fce4 	bl	8004070 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6a1b      	ldr	r3, [r3, #32]
 80056b2:	330c      	adds	r3, #12
 80056b4:	f002 0218 	and.w	r2, r2, #24
 80056b8:	b2d2      	uxtb	r2, r2
 80056ba:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80056bc:	69fb      	ldr	r3, [r7, #28]
 80056be:	2201      	movs	r2, #1
 80056c0:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80056c2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80056c6:	4618      	mov	r0, r3
 80056c8:	3730      	adds	r7, #48	@ 0x30
 80056ca:	46bd      	mov	sp, r7
 80056cc:	bd80      	pop	{r7, pc}
 80056ce:	bf00      	nop
 80056d0:	4ec4ec4f 	.word	0x4ec4ec4f

080056d4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b08a      	sub	sp, #40	@ 0x28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	613b      	str	r3, [r7, #16]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	60fb      	str	r3, [r7, #12]
 80056ec:	2300      	movs	r3, #0
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80056f4:	69bb      	ldr	r3, [r7, #24]
 80056f6:	1c5a      	adds	r2, r3, #1
 80056f8:	61ba      	str	r2, [r7, #24]
 80056fa:	693a      	ldr	r2, [r7, #16]
 80056fc:	4413      	add	r3, r2
 80056fe:	781b      	ldrb	r3, [r3, #0]
 8005700:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8005702:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005704:	2b1f      	cmp	r3, #31
 8005706:	d940      	bls.n	800578a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8005708:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800570a:	2b2f      	cmp	r3, #47	@ 0x2f
 800570c:	d006      	beq.n	800571c <create_name+0x48>
 800570e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005710:	2b5c      	cmp	r3, #92	@ 0x5c
 8005712:	d110      	bne.n	8005736 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8005714:	e002      	b.n	800571c <create_name+0x48>
 8005716:	69bb      	ldr	r3, [r7, #24]
 8005718:	3301      	adds	r3, #1
 800571a:	61bb      	str	r3, [r7, #24]
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	69bb      	ldr	r3, [r7, #24]
 8005720:	4413      	add	r3, r2
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	2b2f      	cmp	r3, #47	@ 0x2f
 8005726:	d0f6      	beq.n	8005716 <create_name+0x42>
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	69bb      	ldr	r3, [r7, #24]
 800572c:	4413      	add	r3, r2
 800572e:	781b      	ldrb	r3, [r3, #0]
 8005730:	2b5c      	cmp	r3, #92	@ 0x5c
 8005732:	d0f0      	beq.n	8005716 <create_name+0x42>
			break;
 8005734:	e02a      	b.n	800578c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8005736:	697b      	ldr	r3, [r7, #20]
 8005738:	2bfe      	cmp	r3, #254	@ 0xfe
 800573a:	d901      	bls.n	8005740 <create_name+0x6c>
 800573c:	2306      	movs	r3, #6
 800573e:	e17d      	b.n	8005a3c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8005740:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005742:	b2db      	uxtb	r3, r3
 8005744:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8005746:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005748:	2101      	movs	r1, #1
 800574a:	4618      	mov	r0, r3
 800574c:	f001 fcda 	bl	8007104 <ff_convert>
 8005750:	4603      	mov	r3, r0
 8005752:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8005754:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005756:	2b00      	cmp	r3, #0
 8005758:	d101      	bne.n	800575e <create_name+0x8a>
 800575a:	2306      	movs	r3, #6
 800575c:	e16e      	b.n	8005a3c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800575e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005760:	2b7f      	cmp	r3, #127	@ 0x7f
 8005762:	d809      	bhi.n	8005778 <create_name+0xa4>
 8005764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005766:	4619      	mov	r1, r3
 8005768:	488d      	ldr	r0, [pc, #564]	@ (80059a0 <create_name+0x2cc>)
 800576a:	f7fe fce4 	bl	8004136 <chk_chr>
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <create_name+0xa4>
 8005774:	2306      	movs	r3, #6
 8005776:	e161      	b.n	8005a3c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005778:	697b      	ldr	r3, [r7, #20]
 800577a:	1c5a      	adds	r2, r3, #1
 800577c:	617a      	str	r2, [r7, #20]
 800577e:	005b      	lsls	r3, r3, #1
 8005780:	68fa      	ldr	r2, [r7, #12]
 8005782:	4413      	add	r3, r2
 8005784:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005786:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005788:	e7b4      	b.n	80056f4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800578a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800578c:	693a      	ldr	r2, [r7, #16]
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	441a      	add	r2, r3
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005796:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005798:	2b1f      	cmp	r3, #31
 800579a:	d801      	bhi.n	80057a0 <create_name+0xcc>
 800579c:	2304      	movs	r3, #4
 800579e:	e000      	b.n	80057a2 <create_name+0xce>
 80057a0:	2300      	movs	r3, #0
 80057a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057a6:	e011      	b.n	80057cc <create_name+0xf8>
		w = lfn[di - 1];
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80057ae:	3b01      	subs	r3, #1
 80057b0:	005b      	lsls	r3, r3, #1
 80057b2:	68fa      	ldr	r2, [r7, #12]
 80057b4:	4413      	add	r3, r2
 80057b6:	881b      	ldrh	r3, [r3, #0]
 80057b8:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80057ba:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d002      	beq.n	80057c6 <create_name+0xf2>
 80057c0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80057c2:	2b2e      	cmp	r3, #46	@ 0x2e
 80057c4:	d106      	bne.n	80057d4 <create_name+0x100>
		di--;
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	3b01      	subs	r3, #1
 80057ca:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80057cc:	697b      	ldr	r3, [r7, #20]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d1ea      	bne.n	80057a8 <create_name+0xd4>
 80057d2:	e000      	b.n	80057d6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80057d4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	005b      	lsls	r3, r3, #1
 80057da:	68fa      	ldr	r2, [r7, #12]
 80057dc:	4413      	add	r3, r2
 80057de:	2200      	movs	r2, #0
 80057e0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d101      	bne.n	80057ec <create_name+0x118>
 80057e8:	2306      	movs	r3, #6
 80057ea:	e127      	b.n	8005a3c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3324      	adds	r3, #36	@ 0x24
 80057f0:	220b      	movs	r2, #11
 80057f2:	2120      	movs	r1, #32
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fe fc5c 	bl	80040b2 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80057fa:	2300      	movs	r3, #0
 80057fc:	61bb      	str	r3, [r7, #24]
 80057fe:	e002      	b.n	8005806 <create_name+0x132>
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	3301      	adds	r3, #1
 8005804:	61bb      	str	r3, [r7, #24]
 8005806:	69bb      	ldr	r3, [r7, #24]
 8005808:	005b      	lsls	r3, r3, #1
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4413      	add	r3, r2
 800580e:	881b      	ldrh	r3, [r3, #0]
 8005810:	2b20      	cmp	r3, #32
 8005812:	d0f5      	beq.n	8005800 <create_name+0x12c>
 8005814:	69bb      	ldr	r3, [r7, #24]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	68fa      	ldr	r2, [r7, #12]
 800581a:	4413      	add	r3, r2
 800581c:	881b      	ldrh	r3, [r3, #0]
 800581e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005820:	d0ee      	beq.n	8005800 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d009      	beq.n	800583c <create_name+0x168>
 8005828:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800582c:	f043 0303 	orr.w	r3, r3, #3
 8005830:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8005834:	e002      	b.n	800583c <create_name+0x168>
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	3b01      	subs	r3, #1
 800583a:	617b      	str	r3, [r7, #20]
 800583c:	697b      	ldr	r3, [r7, #20]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d009      	beq.n	8005856 <create_name+0x182>
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8005848:	3b01      	subs	r3, #1
 800584a:	005b      	lsls	r3, r3, #1
 800584c:	68fa      	ldr	r2, [r7, #12]
 800584e:	4413      	add	r3, r2
 8005850:	881b      	ldrh	r3, [r3, #0]
 8005852:	2b2e      	cmp	r3, #46	@ 0x2e
 8005854:	d1ef      	bne.n	8005836 <create_name+0x162>

	i = b = 0; ni = 8;
 8005856:	2300      	movs	r3, #0
 8005858:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800585c:	2300      	movs	r3, #0
 800585e:	623b      	str	r3, [r7, #32]
 8005860:	2308      	movs	r3, #8
 8005862:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8005864:	69bb      	ldr	r3, [r7, #24]
 8005866:	1c5a      	adds	r2, r3, #1
 8005868:	61ba      	str	r2, [r7, #24]
 800586a:	005b      	lsls	r3, r3, #1
 800586c:	68fa      	ldr	r2, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	881b      	ldrh	r3, [r3, #0]
 8005872:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005874:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005876:	2b00      	cmp	r3, #0
 8005878:	f000 8090 	beq.w	800599c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800587c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800587e:	2b20      	cmp	r3, #32
 8005880:	d006      	beq.n	8005890 <create_name+0x1bc>
 8005882:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005884:	2b2e      	cmp	r3, #46	@ 0x2e
 8005886:	d10a      	bne.n	800589e <create_name+0x1ca>
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	429a      	cmp	r2, r3
 800588e:	d006      	beq.n	800589e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005890:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005894:	f043 0303 	orr.w	r3, r3, #3
 8005898:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800589c:	e07d      	b.n	800599a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800589e:	6a3a      	ldr	r2, [r7, #32]
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d203      	bcs.n	80058ae <create_name+0x1da>
 80058a6:	69ba      	ldr	r2, [r7, #24]
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	429a      	cmp	r2, r3
 80058ac:	d123      	bne.n	80058f6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80058ae:	69fb      	ldr	r3, [r7, #28]
 80058b0:	2b0b      	cmp	r3, #11
 80058b2:	d106      	bne.n	80058c2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80058b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058b8:	f043 0303 	orr.w	r3, r3, #3
 80058bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80058c0:	e075      	b.n	80059ae <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80058c2:	69ba      	ldr	r2, [r7, #24]
 80058c4:	697b      	ldr	r3, [r7, #20]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d005      	beq.n	80058d6 <create_name+0x202>
 80058ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80058ce:	f043 0303 	orr.w	r3, r3, #3
 80058d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80058d6:	69ba      	ldr	r2, [r7, #24]
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d866      	bhi.n	80059ac <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	61bb      	str	r3, [r7, #24]
 80058e2:	2308      	movs	r3, #8
 80058e4:	623b      	str	r3, [r7, #32]
 80058e6:	230b      	movs	r3, #11
 80058e8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80058ea:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80058ee:	009b      	lsls	r3, r3, #2
 80058f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80058f4:	e051      	b.n	800599a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80058f6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80058fa:	d914      	bls.n	8005926 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80058fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80058fe:	2100      	movs	r1, #0
 8005900:	4618      	mov	r0, r3
 8005902:	f001 fbff 	bl	8007104 <ff_convert>
 8005906:	4603      	mov	r3, r0
 8005908:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800590a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <create_name+0x246>
 8005910:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005912:	3b80      	subs	r3, #128	@ 0x80
 8005914:	4a23      	ldr	r2, [pc, #140]	@ (80059a4 <create_name+0x2d0>)
 8005916:	5cd3      	ldrb	r3, [r2, r3]
 8005918:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800591a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800591e:	f043 0302 	orr.w	r3, r3, #2
 8005922:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8005926:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005928:	2b00      	cmp	r3, #0
 800592a:	d007      	beq.n	800593c <create_name+0x268>
 800592c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800592e:	4619      	mov	r1, r3
 8005930:	481d      	ldr	r0, [pc, #116]	@ (80059a8 <create_name+0x2d4>)
 8005932:	f7fe fc00 	bl	8004136 <chk_chr>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d008      	beq.n	800594e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800593c:	235f      	movs	r3, #95	@ 0x5f
 800593e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8005940:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005944:	f043 0303 	orr.w	r3, r3, #3
 8005948:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800594c:	e01b      	b.n	8005986 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800594e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005950:	2b40      	cmp	r3, #64	@ 0x40
 8005952:	d909      	bls.n	8005968 <create_name+0x294>
 8005954:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005956:	2b5a      	cmp	r3, #90	@ 0x5a
 8005958:	d806      	bhi.n	8005968 <create_name+0x294>
					b |= 2;
 800595a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800595e:	f043 0302 	orr.w	r3, r3, #2
 8005962:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005966:	e00e      	b.n	8005986 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8005968:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800596a:	2b60      	cmp	r3, #96	@ 0x60
 800596c:	d90b      	bls.n	8005986 <create_name+0x2b2>
 800596e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005970:	2b7a      	cmp	r3, #122	@ 0x7a
 8005972:	d808      	bhi.n	8005986 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005974:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005980:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005982:	3b20      	subs	r3, #32
 8005984:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	623a      	str	r2, [r7, #32]
 800598c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800598e:	b2d1      	uxtb	r1, r2
 8005990:	687a      	ldr	r2, [r7, #4]
 8005992:	4413      	add	r3, r2
 8005994:	460a      	mov	r2, r1
 8005996:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800599a:	e763      	b.n	8005864 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800599c:	bf00      	nop
 800599e:	e006      	b.n	80059ae <create_name+0x2da>
 80059a0:	08008304 	.word	0x08008304
 80059a4:	0800835c 	.word	0x0800835c
 80059a8:	08008310 	.word	0x08008310
			if (si > di) break;			/* No extension */
 80059ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80059b4:	2be5      	cmp	r3, #229	@ 0xe5
 80059b6:	d103      	bne.n	80059c0 <create_name+0x2ec>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2205      	movs	r2, #5
 80059bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80059c0:	69fb      	ldr	r3, [r7, #28]
 80059c2:	2b08      	cmp	r3, #8
 80059c4:	d104      	bne.n	80059d0 <create_name+0x2fc>
 80059c6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059ca:	009b      	lsls	r3, r3, #2
 80059cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80059d0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059d4:	f003 030c 	and.w	r3, r3, #12
 80059d8:	2b0c      	cmp	r3, #12
 80059da:	d005      	beq.n	80059e8 <create_name+0x314>
 80059dc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80059e0:	f003 0303 	and.w	r3, r3, #3
 80059e4:	2b03      	cmp	r3, #3
 80059e6:	d105      	bne.n	80059f4 <create_name+0x320>
 80059e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059ec:	f043 0302 	orr.w	r3, r3, #2
 80059f0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80059f4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80059f8:	f003 0302 	and.w	r3, r3, #2
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d117      	bne.n	8005a30 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005a00:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a04:	f003 0303 	and.w	r3, r3, #3
 8005a08:	2b01      	cmp	r3, #1
 8005a0a:	d105      	bne.n	8005a18 <create_name+0x344>
 8005a0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a10:	f043 0310 	orr.w	r3, r3, #16
 8005a14:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005a18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005a1c:	f003 030c 	and.w	r3, r3, #12
 8005a20:	2b04      	cmp	r3, #4
 8005a22:	d105      	bne.n	8005a30 <create_name+0x35c>
 8005a24:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005a28:	f043 0308 	orr.w	r3, r3, #8
 8005a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8005a36:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8005a3a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3728      	adds	r7, #40	@ 0x28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b086      	sub	sp, #24
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8005a52:	693b      	ldr	r3, [r7, #16]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8005a58:	e002      	b.n	8005a60 <follow_path+0x1c>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	3301      	adds	r3, #1
 8005a5e:	603b      	str	r3, [r7, #0]
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b2f      	cmp	r3, #47	@ 0x2f
 8005a66:	d0f8      	beq.n	8005a5a <follow_path+0x16>
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a6e:	d0f4      	beq.n	8005a5a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	2200      	movs	r2, #0
 8005a74:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005a76:	683b      	ldr	r3, [r7, #0]
 8005a78:	781b      	ldrb	r3, [r3, #0]
 8005a7a:	2b1f      	cmp	r3, #31
 8005a7c:	d80a      	bhi.n	8005a94 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2280      	movs	r2, #128	@ 0x80
 8005a82:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005a86:	2100      	movs	r1, #0
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f7ff f8fe 	bl	8004c8a <dir_sdi>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	75fb      	strb	r3, [r7, #23]
 8005a92:	e048      	b.n	8005b26 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005a94:	463b      	mov	r3, r7
 8005a96:	4619      	mov	r1, r3
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff fe1b 	bl	80056d4 <create_name>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005aa2:	7dfb      	ldrb	r3, [r7, #23]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d139      	bne.n	8005b1c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005aa8:	6878      	ldr	r0, [r7, #4]
 8005aaa:	f7ff fc5a 	bl	8005362 <dir_find>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005ab8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005aba:	7dfb      	ldrb	r3, [r7, #23]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d00a      	beq.n	8005ad6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005ac0:	7dfb      	ldrb	r3, [r7, #23]
 8005ac2:	2b04      	cmp	r3, #4
 8005ac4:	d12c      	bne.n	8005b20 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005ac6:	7afb      	ldrb	r3, [r7, #11]
 8005ac8:	f003 0304 	and.w	r3, r3, #4
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d127      	bne.n	8005b20 <follow_path+0xdc>
 8005ad0:	2305      	movs	r3, #5
 8005ad2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005ad4:	e024      	b.n	8005b20 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005ad6:	7afb      	ldrb	r3, [r7, #11]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d121      	bne.n	8005b24 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005ae0:	693b      	ldr	r3, [r7, #16]
 8005ae2:	799b      	ldrb	r3, [r3, #6]
 8005ae4:	f003 0310 	and.w	r3, r3, #16
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d102      	bne.n	8005af2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005aec:	2305      	movs	r3, #5
 8005aee:	75fb      	strb	r3, [r7, #23]
 8005af0:	e019      	b.n	8005b26 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	695b      	ldr	r3, [r3, #20]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	8992      	ldrh	r2, [r2, #12]
 8005b00:	fbb3 f0f2 	udiv	r0, r3, r2
 8005b04:	fb00 f202 	mul.w	r2, r0, r2
 8005b08:	1a9b      	subs	r3, r3, r2
 8005b0a:	440b      	add	r3, r1
 8005b0c:	4619      	mov	r1, r3
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f7ff fa61 	bl	8004fd6 <ld_clust>
 8005b14:	4602      	mov	r2, r0
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005b1a:	e7bb      	b.n	8005a94 <follow_path+0x50>
			if (res != FR_OK) break;
 8005b1c:	bf00      	nop
 8005b1e:	e002      	b.n	8005b26 <follow_path+0xe2>
				break;
 8005b20:	bf00      	nop
 8005b22:	e000      	b.n	8005b26 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005b24:	bf00      	nop
			}
		}
	}

	return res;
 8005b26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b28:	4618      	mov	r0, r3
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bd80      	pop	{r7, pc}

08005b30 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8005b38:	f04f 33ff 	mov.w	r3, #4294967295
 8005b3c:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d031      	beq.n	8005baa <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	617b      	str	r3, [r7, #20]
 8005b4c:	e002      	b.n	8005b54 <get_ldnumber+0x24>
 8005b4e:	697b      	ldr	r3, [r7, #20]
 8005b50:	3301      	adds	r3, #1
 8005b52:	617b      	str	r3, [r7, #20]
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	781b      	ldrb	r3, [r3, #0]
 8005b58:	2b1f      	cmp	r3, #31
 8005b5a:	d903      	bls.n	8005b64 <get_ldnumber+0x34>
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b62:	d1f4      	bne.n	8005b4e <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b3a      	cmp	r3, #58	@ 0x3a
 8005b6a:	d11c      	bne.n	8005ba6 <get_ldnumber+0x76>
			tp = *path;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	60fa      	str	r2, [r7, #12]
 8005b78:	781b      	ldrb	r3, [r3, #0]
 8005b7a:	3b30      	subs	r3, #48	@ 0x30
 8005b7c:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8005b7e:	68bb      	ldr	r3, [r7, #8]
 8005b80:	2b09      	cmp	r3, #9
 8005b82:	d80e      	bhi.n	8005ba2 <get_ldnumber+0x72>
 8005b84:	68fa      	ldr	r2, [r7, #12]
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d10a      	bne.n	8005ba2 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d107      	bne.n	8005ba2 <get_ldnumber+0x72>
					vol = (int)i;
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005b96:	697b      	ldr	r3, [r7, #20]
 8005b98:	3301      	adds	r3, #1
 8005b9a:	617b      	str	r3, [r7, #20]
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	e002      	b.n	8005bac <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005baa:	693b      	ldr	r3, [r7, #16]
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	371c      	adds	r7, #28
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb6:	4770      	bx	lr

08005bb8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	70da      	strb	r2, [r3, #3]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f04f 32ff 	mov.w	r2, #4294967295
 8005bce:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005bd0:	6839      	ldr	r1, [r7, #0]
 8005bd2:	6878      	ldr	r0, [r7, #4]
 8005bd4:	f7fe fc7a 	bl	80044cc <move_window>
 8005bd8:	4603      	mov	r3, r0
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d001      	beq.n	8005be2 <check_fs+0x2a>
 8005bde:	2304      	movs	r3, #4
 8005be0:	e038      	b.n	8005c54 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	3338      	adds	r3, #56	@ 0x38
 8005be6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe f9be 	bl	8003f6c <ld_word>
 8005bf0:	4603      	mov	r3, r0
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d001      	beq.n	8005c00 <check_fs+0x48>
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e029      	b.n	8005c54 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c06:	2be9      	cmp	r3, #233	@ 0xe9
 8005c08:	d009      	beq.n	8005c1e <check_fs+0x66>
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005c10:	2beb      	cmp	r3, #235	@ 0xeb
 8005c12:	d11e      	bne.n	8005c52 <check_fs+0x9a>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8005c1a:	2b90      	cmp	r3, #144	@ 0x90
 8005c1c:	d119      	bne.n	8005c52 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	3338      	adds	r3, #56	@ 0x38
 8005c22:	3336      	adds	r3, #54	@ 0x36
 8005c24:	4618      	mov	r0, r3
 8005c26:	f7fe f9b9 	bl	8003f9c <ld_dword>
 8005c2a:	4603      	mov	r3, r0
 8005c2c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8005c30:	4a0a      	ldr	r2, [pc, #40]	@ (8005c5c <check_fs+0xa4>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d101      	bne.n	8005c3a <check_fs+0x82>
 8005c36:	2300      	movs	r3, #0
 8005c38:	e00c      	b.n	8005c54 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	3338      	adds	r3, #56	@ 0x38
 8005c3e:	3352      	adds	r3, #82	@ 0x52
 8005c40:	4618      	mov	r0, r3
 8005c42:	f7fe f9ab 	bl	8003f9c <ld_dword>
 8005c46:	4603      	mov	r3, r0
 8005c48:	4a05      	ldr	r2, [pc, #20]	@ (8005c60 <check_fs+0xa8>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d101      	bne.n	8005c52 <check_fs+0x9a>
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e000      	b.n	8005c54 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8005c52:	2302      	movs	r3, #2
}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3708      	adds	r7, #8
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	00544146 	.word	0x00544146
 8005c60:	33544146 	.word	0x33544146

08005c64 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b096      	sub	sp, #88	@ 0x58
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	60f8      	str	r0, [r7, #12]
 8005c6c:	60b9      	str	r1, [r7, #8]
 8005c6e:	4613      	mov	r3, r2
 8005c70:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	2200      	movs	r2, #0
 8005c76:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005c78:	68f8      	ldr	r0, [r7, #12]
 8005c7a:	f7ff ff59 	bl	8005b30 <get_ldnumber>
 8005c7e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005c80:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	da01      	bge.n	8005c8a <find_volume+0x26>
 8005c86:	230b      	movs	r3, #11
 8005c88:	e265      	b.n	8006156 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005c8a:	4a9f      	ldr	r2, [pc, #636]	@ (8005f08 <find_volume+0x2a4>)
 8005c8c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005c92:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d101      	bne.n	8005c9e <find_volume+0x3a>
 8005c9a:	230c      	movs	r3, #12
 8005c9c:	e25b      	b.n	8006156 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8005c9e:	68bb      	ldr	r3, [r7, #8]
 8005ca0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ca2:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005ca4:	79fb      	ldrb	r3, [r7, #7]
 8005ca6:	f023 0301 	bic.w	r3, r3, #1
 8005caa:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005cac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cae:	781b      	ldrb	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d01a      	beq.n	8005cea <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	4618      	mov	r0, r3
 8005cba:	f7fe f8b7 	bl	8003e2c <disk_status>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005cc4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d10c      	bne.n	8005cea <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005cd0:	79fb      	ldrb	r3, [r7, #7]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d007      	beq.n	8005ce6 <find_volume+0x82>
 8005cd6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005cda:	f003 0304 	and.w	r3, r3, #4
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005ce2:	230a      	movs	r3, #10
 8005ce4:	e237      	b.n	8006156 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	e235      	b.n	8006156 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005cea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cec:	2200      	movs	r2, #0
 8005cee:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005cf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005cf2:	b2da      	uxtb	r2, r3
 8005cf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cf6:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cfa:	785b      	ldrb	r3, [r3, #1]
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	f7fe f8af 	bl	8003e60 <disk_initialize>
 8005d02:	4603      	mov	r3, r0
 8005d04:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005d08:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d0c:	f003 0301 	and.w	r3, r3, #1
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d001      	beq.n	8005d18 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005d14:	2303      	movs	r3, #3
 8005d16:	e21e      	b.n	8006156 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005d18:	79fb      	ldrb	r3, [r7, #7]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d007      	beq.n	8005d2e <find_volume+0xca>
 8005d1e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005d22:	f003 0304 	and.w	r3, r3, #4
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d001      	beq.n	8005d2e <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8005d2a:	230a      	movs	r3, #10
 8005d2c:	e213      	b.n	8006156 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8005d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d30:	7858      	ldrb	r0, [r3, #1]
 8005d32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d34:	330c      	adds	r3, #12
 8005d36:	461a      	mov	r2, r3
 8005d38:	2102      	movs	r1, #2
 8005d3a:	f7fe f8f9 	bl	8003f30 <disk_ioctl>
 8005d3e:	4603      	mov	r3, r0
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d001      	beq.n	8005d48 <find_volume+0xe4>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e206      	b.n	8006156 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8005d48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d4a:	899b      	ldrh	r3, [r3, #12]
 8005d4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d50:	d80d      	bhi.n	8005d6e <find_volume+0x10a>
 8005d52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d54:	899b      	ldrh	r3, [r3, #12]
 8005d56:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005d5a:	d308      	bcc.n	8005d6e <find_volume+0x10a>
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d5e:	899b      	ldrh	r3, [r3, #12]
 8005d60:	461a      	mov	r2, r3
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d64:	899b      	ldrh	r3, [r3, #12]
 8005d66:	3b01      	subs	r3, #1
 8005d68:	4013      	ands	r3, r2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d001      	beq.n	8005d72 <find_volume+0x10e>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e1f1      	b.n	8006156 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8005d72:	2300      	movs	r3, #0
 8005d74:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005d76:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d78:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d7a:	f7ff ff1d 	bl	8005bb8 <check_fs>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005d84:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d149      	bne.n	8005e20 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005d90:	e01e      	b.n	8005dd0 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005d92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d94:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005da0:	4413      	add	r3, r2
 8005da2:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005da4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005da6:	3304      	adds	r3, #4
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d006      	beq.n	8005dbc <find_volume+0x158>
 8005dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db0:	3308      	adds	r3, #8
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe f8f2 	bl	8003f9c <ld_dword>
 8005db8:	4602      	mov	r2, r0
 8005dba:	e000      	b.n	8005dbe <find_volume+0x15a>
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dc0:	009b      	lsls	r3, r3, #2
 8005dc2:	3358      	adds	r3, #88	@ 0x58
 8005dc4:	443b      	add	r3, r7
 8005dc6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005dca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dcc:	3301      	adds	r3, #1
 8005dce:	643b      	str	r3, [r7, #64]	@ 0x40
 8005dd0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005dd2:	2b03      	cmp	r3, #3
 8005dd4:	d9dd      	bls.n	8005d92 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005dda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d002      	beq.n	8005de6 <find_volume+0x182>
 8005de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de2:	3b01      	subs	r3, #1
 8005de4:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005de8:	009b      	lsls	r3, r3, #2
 8005dea:	3358      	adds	r3, #88	@ 0x58
 8005dec:	443b      	add	r3, r7
 8005dee:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005df2:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d005      	beq.n	8005e06 <find_volume+0x1a2>
 8005dfa:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005dfc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005dfe:	f7ff fedb 	bl	8005bb8 <check_fs>
 8005e02:	4603      	mov	r3, r0
 8005e04:	e000      	b.n	8005e08 <find_volume+0x1a4>
 8005e06:	2303      	movs	r3, #3
 8005e08:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005e0c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e10:	2b01      	cmp	r3, #1
 8005e12:	d905      	bls.n	8005e20 <find_volume+0x1bc>
 8005e14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e16:	3301      	adds	r3, #1
 8005e18:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e1a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005e1c:	2b03      	cmp	r3, #3
 8005e1e:	d9e2      	bls.n	8005de6 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005e20:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	d101      	bne.n	8005e2c <find_volume+0x1c8>
 8005e28:	2301      	movs	r3, #1
 8005e2a:	e194      	b.n	8006156 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8005e2c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d901      	bls.n	8005e38 <find_volume+0x1d4>
 8005e34:	230d      	movs	r3, #13
 8005e36:	e18e      	b.n	8006156 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005e38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e3a:	3338      	adds	r3, #56	@ 0x38
 8005e3c:	330b      	adds	r3, #11
 8005e3e:	4618      	mov	r0, r3
 8005e40:	f7fe f894 	bl	8003f6c <ld_word>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e4a:	899b      	ldrh	r3, [r3, #12]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d001      	beq.n	8005e54 <find_volume+0x1f0>
 8005e50:	230d      	movs	r3, #13
 8005e52:	e180      	b.n	8006156 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8005e54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e56:	3338      	adds	r3, #56	@ 0x38
 8005e58:	3316      	adds	r3, #22
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fe f886 	bl	8003f6c <ld_word>
 8005e60:	4603      	mov	r3, r0
 8005e62:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8005e64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d106      	bne.n	8005e78 <find_volume+0x214>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e6c:	3338      	adds	r3, #56	@ 0x38
 8005e6e:	3324      	adds	r3, #36	@ 0x24
 8005e70:	4618      	mov	r0, r3
 8005e72:	f7fe f893 	bl	8003f9c <ld_dword>
 8005e76:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e7a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005e7c:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8005e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e80:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005e84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e86:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005e88:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e8a:	789b      	ldrb	r3, [r3, #2]
 8005e8c:	2b01      	cmp	r3, #1
 8005e8e:	d005      	beq.n	8005e9c <find_volume+0x238>
 8005e90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e92:	789b      	ldrb	r3, [r3, #2]
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d001      	beq.n	8005e9c <find_volume+0x238>
 8005e98:	230d      	movs	r3, #13
 8005e9a:	e15c      	b.n	8006156 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005e9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e9e:	789b      	ldrb	r3, [r3, #2]
 8005ea0:	461a      	mov	r2, r3
 8005ea2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea4:	fb02 f303 	mul.w	r3, r2, r3
 8005ea8:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eac:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb4:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eb8:	895b      	ldrh	r3, [r3, #10]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d008      	beq.n	8005ed0 <find_volume+0x26c>
 8005ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec0:	895b      	ldrh	r3, [r3, #10]
 8005ec2:	461a      	mov	r2, r3
 8005ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ec6:	895b      	ldrh	r3, [r3, #10]
 8005ec8:	3b01      	subs	r3, #1
 8005eca:	4013      	ands	r3, r2
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d001      	beq.n	8005ed4 <find_volume+0x270>
 8005ed0:	230d      	movs	r3, #13
 8005ed2:	e140      	b.n	8006156 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005ed4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ed6:	3338      	adds	r3, #56	@ 0x38
 8005ed8:	3311      	adds	r3, #17
 8005eda:	4618      	mov	r0, r3
 8005edc:	f7fe f846 	bl	8003f6c <ld_word>
 8005ee0:	4603      	mov	r3, r0
 8005ee2:	461a      	mov	r2, r3
 8005ee4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ee6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eea:	891b      	ldrh	r3, [r3, #8]
 8005eec:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005eee:	8992      	ldrh	r2, [r2, #12]
 8005ef0:	0952      	lsrs	r2, r2, #5
 8005ef2:	b292      	uxth	r2, r2
 8005ef4:	fbb3 f1f2 	udiv	r1, r3, r2
 8005ef8:	fb01 f202 	mul.w	r2, r1, r2
 8005efc:	1a9b      	subs	r3, r3, r2
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d003      	beq.n	8005f0c <find_volume+0x2a8>
 8005f04:	230d      	movs	r3, #13
 8005f06:	e126      	b.n	8006156 <find_volume+0x4f2>
 8005f08:	20000168 	.word	0x20000168

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005f0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f0e:	3338      	adds	r3, #56	@ 0x38
 8005f10:	3313      	adds	r3, #19
 8005f12:	4618      	mov	r0, r3
 8005f14:	f7fe f82a 	bl	8003f6c <ld_word>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8005f1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d106      	bne.n	8005f30 <find_volume+0x2cc>
 8005f22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f24:	3338      	adds	r3, #56	@ 0x38
 8005f26:	3320      	adds	r3, #32
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f7fe f837 	bl	8003f9c <ld_dword>
 8005f2e:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8005f30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005f32:	3338      	adds	r3, #56	@ 0x38
 8005f34:	330e      	adds	r3, #14
 8005f36:	4618      	mov	r0, r3
 8005f38:	f7fe f818 	bl	8003f6c <ld_word>
 8005f3c:	4603      	mov	r3, r0
 8005f3e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8005f40:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d101      	bne.n	8005f4a <find_volume+0x2e6>
 8005f46:	230d      	movs	r3, #13
 8005f48:	e105      	b.n	8006156 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8005f4a:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005f4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005f4e:	4413      	add	r3, r2
 8005f50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f52:	8911      	ldrh	r1, [r2, #8]
 8005f54:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f56:	8992      	ldrh	r2, [r2, #12]
 8005f58:	0952      	lsrs	r2, r2, #5
 8005f5a:	b292      	uxth	r2, r2
 8005f5c:	fbb1 f2f2 	udiv	r2, r1, r2
 8005f60:	b292      	uxth	r2, r2
 8005f62:	4413      	add	r3, r2
 8005f64:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8005f66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d201      	bcs.n	8005f72 <find_volume+0x30e>
 8005f6e:	230d      	movs	r3, #13
 8005f70:	e0f1      	b.n	8006156 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8005f72:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005f74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f76:	1ad3      	subs	r3, r2, r3
 8005f78:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005f7a:	8952      	ldrh	r2, [r2, #10]
 8005f7c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f80:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d101      	bne.n	8005f8c <find_volume+0x328>
 8005f88:	230d      	movs	r3, #13
 8005f8a:	e0e4      	b.n	8006156 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005f8c:	2303      	movs	r3, #3
 8005f8e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f94:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d802      	bhi.n	8005fa2 <find_volume+0x33e>
 8005f9c:	2302      	movs	r3, #2
 8005f9e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa4:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d802      	bhi.n	8005fb2 <find_volume+0x34e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fb4:	1c9a      	adds	r2, r3, #2
 8005fb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fb8:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005fba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fbc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fbe:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005fc0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005fc2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005fc4:	441a      	add	r2, r3
 8005fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fc8:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005fca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	441a      	add	r2, r3
 8005fd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fd2:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005fd4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005fd8:	2b03      	cmp	r3, #3
 8005fda:	d11e      	bne.n	800601a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005fdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005fde:	3338      	adds	r3, #56	@ 0x38
 8005fe0:	332a      	adds	r3, #42	@ 0x2a
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	f7fd ffc2 	bl	8003f6c <ld_word>
 8005fe8:	4603      	mov	r3, r0
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d001      	beq.n	8005ff2 <find_volume+0x38e>
 8005fee:	230d      	movs	r3, #13
 8005ff0:	e0b1      	b.n	8006156 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ff4:	891b      	ldrh	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d001      	beq.n	8005ffe <find_volume+0x39a>
 8005ffa:	230d      	movs	r3, #13
 8005ffc:	e0ab      	b.n	8006156 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006000:	3338      	adds	r3, #56	@ 0x38
 8006002:	332c      	adds	r3, #44	@ 0x2c
 8006004:	4618      	mov	r0, r3
 8006006:	f7fd ffc9 	bl	8003f9c <ld_dword>
 800600a:	4602      	mov	r2, r0
 800600c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800600e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8006010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006012:	69db      	ldr	r3, [r3, #28]
 8006014:	009b      	lsls	r3, r3, #2
 8006016:	647b      	str	r3, [r7, #68]	@ 0x44
 8006018:	e01f      	b.n	800605a <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800601a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800601c:	891b      	ldrh	r3, [r3, #8]
 800601e:	2b00      	cmp	r3, #0
 8006020:	d101      	bne.n	8006026 <find_volume+0x3c2>
 8006022:	230d      	movs	r3, #13
 8006024:	e097      	b.n	8006156 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8006026:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006028:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800602a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800602c:	441a      	add	r2, r3
 800602e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006030:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8006032:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006036:	2b02      	cmp	r3, #2
 8006038:	d103      	bne.n	8006042 <find_volume+0x3de>
 800603a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	005b      	lsls	r3, r3, #1
 8006040:	e00a      	b.n	8006058 <find_volume+0x3f4>
 8006042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006044:	69da      	ldr	r2, [r3, #28]
 8006046:	4613      	mov	r3, r2
 8006048:	005b      	lsls	r3, r3, #1
 800604a:	4413      	add	r3, r2
 800604c:	085a      	lsrs	r2, r3, #1
 800604e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006050:	69db      	ldr	r3, [r3, #28]
 8006052:	f003 0301 	and.w	r3, r3, #1
 8006056:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8006058:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800605a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800605c:	6a1a      	ldr	r2, [r3, #32]
 800605e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006060:	899b      	ldrh	r3, [r3, #12]
 8006062:	4619      	mov	r1, r3
 8006064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006066:	440b      	add	r3, r1
 8006068:	3b01      	subs	r3, #1
 800606a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800606c:	8989      	ldrh	r1, [r1, #12]
 800606e:	fbb3 f3f1 	udiv	r3, r3, r1
 8006072:	429a      	cmp	r2, r3
 8006074:	d201      	bcs.n	800607a <find_volume+0x416>
 8006076:	230d      	movs	r3, #13
 8006078:	e06d      	b.n	8006156 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800607a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800607c:	f04f 32ff 	mov.w	r2, #4294967295
 8006080:	619a      	str	r2, [r3, #24]
 8006082:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006084:	699a      	ldr	r2, [r3, #24]
 8006086:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006088:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800608a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800608c:	2280      	movs	r2, #128	@ 0x80
 800608e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8006090:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006094:	2b03      	cmp	r3, #3
 8006096:	d149      	bne.n	800612c <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8006098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800609a:	3338      	adds	r3, #56	@ 0x38
 800609c:	3330      	adds	r3, #48	@ 0x30
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fd ff64 	bl	8003f6c <ld_word>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d140      	bne.n	800612c <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 80060aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80060ac:	3301      	adds	r3, #1
 80060ae:	4619      	mov	r1, r3
 80060b0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060b2:	f7fe fa0b 	bl	80044cc <move_window>
 80060b6:	4603      	mov	r3, r0
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d137      	bne.n	800612c <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 80060bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060be:	2200      	movs	r2, #0
 80060c0:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80060c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060c4:	3338      	adds	r3, #56	@ 0x38
 80060c6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fd ff4e 	bl	8003f6c <ld_word>
 80060d0:	4603      	mov	r3, r0
 80060d2:	461a      	mov	r2, r3
 80060d4:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80060d8:	429a      	cmp	r2, r3
 80060da:	d127      	bne.n	800612c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 80060dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060de:	3338      	adds	r3, #56	@ 0x38
 80060e0:	4618      	mov	r0, r3
 80060e2:	f7fd ff5b 	bl	8003f9c <ld_dword>
 80060e6:	4603      	mov	r3, r0
 80060e8:	4a1d      	ldr	r2, [pc, #116]	@ (8006160 <find_volume+0x4fc>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d11e      	bne.n	800612c <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 80060ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060f0:	3338      	adds	r3, #56	@ 0x38
 80060f2:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 80060f6:	4618      	mov	r0, r3
 80060f8:	f7fd ff50 	bl	8003f9c <ld_dword>
 80060fc:	4603      	mov	r3, r0
 80060fe:	4a19      	ldr	r2, [pc, #100]	@ (8006164 <find_volume+0x500>)
 8006100:	4293      	cmp	r3, r2
 8006102:	d113      	bne.n	800612c <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	3338      	adds	r3, #56	@ 0x38
 8006108:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800610c:	4618      	mov	r0, r3
 800610e:	f7fd ff45 	bl	8003f9c <ld_dword>
 8006112:	4602      	mov	r2, r0
 8006114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006116:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8006118:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800611a:	3338      	adds	r3, #56	@ 0x38
 800611c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8006120:	4618      	mov	r0, r3
 8006122:	f7fd ff3b 	bl	8003f9c <ld_dword>
 8006126:	4602      	mov	r2, r0
 8006128:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612a:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800612c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800612e:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8006132:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8006134:	4b0c      	ldr	r3, [pc, #48]	@ (8006168 <find_volume+0x504>)
 8006136:	881b      	ldrh	r3, [r3, #0]
 8006138:	3301      	adds	r3, #1
 800613a:	b29a      	uxth	r2, r3
 800613c:	4b0a      	ldr	r3, [pc, #40]	@ (8006168 <find_volume+0x504>)
 800613e:	801a      	strh	r2, [r3, #0]
 8006140:	4b09      	ldr	r3, [pc, #36]	@ (8006168 <find_volume+0x504>)
 8006142:	881a      	ldrh	r2, [r3, #0]
 8006144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006146:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8006148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800614a:	4a08      	ldr	r2, [pc, #32]	@ (800616c <find_volume+0x508>)
 800614c:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800614e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006150:	f7fe f954 	bl	80043fc <clear_lock>
#endif
	return FR_OK;
 8006154:	2300      	movs	r3, #0
}
 8006156:	4618      	mov	r0, r3
 8006158:	3758      	adds	r7, #88	@ 0x58
 800615a:	46bd      	mov	sp, r7
 800615c:	bd80      	pop	{r7, pc}
 800615e:	bf00      	nop
 8006160:	41615252 	.word	0x41615252
 8006164:	61417272 	.word	0x61417272
 8006168:	2000016c 	.word	0x2000016c
 800616c:	20000190 	.word	0x20000190

08006170 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800617a:	2309      	movs	r3, #9
 800617c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d01c      	beq.n	80061be <validate+0x4e>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	2b00      	cmp	r3, #0
 800618a:	d018      	beq.n	80061be <validate+0x4e>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	781b      	ldrb	r3, [r3, #0]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d013      	beq.n	80061be <validate+0x4e>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	889a      	ldrh	r2, [r3, #4]
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	88db      	ldrh	r3, [r3, #6]
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d10c      	bne.n	80061be <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	785b      	ldrb	r3, [r3, #1]
 80061aa:	4618      	mov	r0, r3
 80061ac:	f7fd fe3e 	bl	8003e2c <disk_status>
 80061b0:	4603      	mov	r3, r0
 80061b2:	f003 0301 	and.w	r3, r3, #1
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d101      	bne.n	80061be <validate+0x4e>
			res = FR_OK;
 80061ba:	2300      	movs	r3, #0
 80061bc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 80061be:	7bfb      	ldrb	r3, [r7, #15]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d102      	bne.n	80061ca <validate+0x5a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	e000      	b.n	80061cc <validate+0x5c>
 80061ca:	2300      	movs	r3, #0
 80061cc:	683a      	ldr	r2, [r7, #0]
 80061ce:	6013      	str	r3, [r2, #0]
	return res;
 80061d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3710      	adds	r7, #16
 80061d6:	46bd      	mov	sp, r7
 80061d8:	bd80      	pop	{r7, pc}
	...

080061dc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	4613      	mov	r3, r2
 80061e8:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 80061ee:	f107 0310 	add.w	r3, r7, #16
 80061f2:	4618      	mov	r0, r3
 80061f4:	f7ff fc9c 	bl	8005b30 <get_ldnumber>
 80061f8:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	da01      	bge.n	8006204 <f_mount+0x28>
 8006200:	230b      	movs	r3, #11
 8006202:	e02b      	b.n	800625c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8006204:	4a17      	ldr	r2, [pc, #92]	@ (8006264 <f_mount+0x88>)
 8006206:	69fb      	ldr	r3, [r7, #28]
 8006208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800620c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800620e:	69bb      	ldr	r3, [r7, #24]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d005      	beq.n	8006220 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8006214:	69b8      	ldr	r0, [r7, #24]
 8006216:	f7fe f8f1 	bl	80043fc <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800621a:	69bb      	ldr	r3, [r7, #24]
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d002      	beq.n	800622c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	2200      	movs	r2, #0
 800622a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800622c:	68fa      	ldr	r2, [r7, #12]
 800622e:	490d      	ldr	r1, [pc, #52]	@ (8006264 <f_mount+0x88>)
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d002      	beq.n	8006242 <f_mount+0x66>
 800623c:	79fb      	ldrb	r3, [r7, #7]
 800623e:	2b01      	cmp	r3, #1
 8006240:	d001      	beq.n	8006246 <f_mount+0x6a>
 8006242:	2300      	movs	r3, #0
 8006244:	e00a      	b.n	800625c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8006246:	f107 010c 	add.w	r1, r7, #12
 800624a:	f107 0308 	add.w	r3, r7, #8
 800624e:	2200      	movs	r2, #0
 8006250:	4618      	mov	r0, r3
 8006252:	f7ff fd07 	bl	8005c64 <find_volume>
 8006256:	4603      	mov	r3, r0
 8006258:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800625a:	7dfb      	ldrb	r3, [r7, #23]
}
 800625c:	4618      	mov	r0, r3
 800625e:	3720      	adds	r7, #32
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}
 8006264:	20000168 	.word	0x20000168

08006268 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b09a      	sub	sp, #104	@ 0x68
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	4613      	mov	r3, r2
 8006274:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d101      	bne.n	8006280 <f_open+0x18>
 800627c:	2309      	movs	r3, #9
 800627e:	e1b7      	b.n	80065f0 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8006280:	79fb      	ldrb	r3, [r7, #7]
 8006282:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006286:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8006288:	79fa      	ldrb	r2, [r7, #7]
 800628a:	f107 0114 	add.w	r1, r7, #20
 800628e:	f107 0308 	add.w	r3, r7, #8
 8006292:	4618      	mov	r0, r3
 8006294:	f7ff fce6 	bl	8005c64 <find_volume>
 8006298:	4603      	mov	r3, r0
 800629a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800629e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f040 819b 	bne.w	80065de <f_open+0x376>
		dj.obj.fs = fs;
 80062a8:	697b      	ldr	r3, [r7, #20]
 80062aa:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	f107 0318 	add.w	r3, r7, #24
 80062b2:	4611      	mov	r1, r2
 80062b4:	4618      	mov	r0, r3
 80062b6:	f7ff fbc5 	bl	8005a44 <follow_path>
 80062ba:	4603      	mov	r3, r0
 80062bc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80062c0:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d118      	bne.n	80062fa <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80062c8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80062cc:	b25b      	sxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	da03      	bge.n	80062da <f_open+0x72>
				res = FR_INVALID_NAME;
 80062d2:	2306      	movs	r3, #6
 80062d4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80062d8:	e00f      	b.n	80062fa <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80062da:	79fb      	ldrb	r3, [r7, #7]
 80062dc:	2b01      	cmp	r3, #1
 80062de:	bf8c      	ite	hi
 80062e0:	2301      	movhi	r3, #1
 80062e2:	2300      	movls	r3, #0
 80062e4:	b2db      	uxtb	r3, r3
 80062e6:	461a      	mov	r2, r3
 80062e8:	f107 0318 	add.w	r3, r7, #24
 80062ec:	4611      	mov	r1, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fd ff3c 	bl	800416c <chk_lock>
 80062f4:	4603      	mov	r3, r0
 80062f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80062fa:	79fb      	ldrb	r3, [r7, #7]
 80062fc:	f003 031c 	and.w	r3, r3, #28
 8006300:	2b00      	cmp	r3, #0
 8006302:	d07f      	beq.n	8006404 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8006304:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006308:	2b00      	cmp	r3, #0
 800630a:	d017      	beq.n	800633c <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800630c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006310:	2b04      	cmp	r3, #4
 8006312:	d10e      	bne.n	8006332 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8006314:	f7fd ff86 	bl	8004224 <enq_lock>
 8006318:	4603      	mov	r3, r0
 800631a:	2b00      	cmp	r3, #0
 800631c:	d006      	beq.n	800632c <f_open+0xc4>
 800631e:	f107 0318 	add.w	r3, r7, #24
 8006322:	4618      	mov	r0, r3
 8006324:	f7ff f8de 	bl	80054e4 <dir_register>
 8006328:	4603      	mov	r3, r0
 800632a:	e000      	b.n	800632e <f_open+0xc6>
 800632c:	2312      	movs	r3, #18
 800632e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8006332:	79fb      	ldrb	r3, [r7, #7]
 8006334:	f043 0308 	orr.w	r3, r3, #8
 8006338:	71fb      	strb	r3, [r7, #7]
 800633a:	e010      	b.n	800635e <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800633c:	7fbb      	ldrb	r3, [r7, #30]
 800633e:	f003 0311 	and.w	r3, r3, #17
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <f_open+0xe6>
					res = FR_DENIED;
 8006346:	2307      	movs	r3, #7
 8006348:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800634c:	e007      	b.n	800635e <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800634e:	79fb      	ldrb	r3, [r7, #7]
 8006350:	f003 0304 	and.w	r3, r3, #4
 8006354:	2b00      	cmp	r3, #0
 8006356:	d002      	beq.n	800635e <f_open+0xf6>
 8006358:	2308      	movs	r3, #8
 800635a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800635e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006362:	2b00      	cmp	r3, #0
 8006364:	d168      	bne.n	8006438 <f_open+0x1d0>
 8006366:	79fb      	ldrb	r3, [r7, #7]
 8006368:	f003 0308 	and.w	r3, r3, #8
 800636c:	2b00      	cmp	r3, #0
 800636e:	d063      	beq.n	8006438 <f_open+0x1d0>
				dw = GET_FATTIME();
 8006370:	f7fd fcfe 	bl	8003d70 <get_fattime>
 8006374:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8006376:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006378:	330e      	adds	r3, #14
 800637a:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 800637c:	4618      	mov	r0, r3
 800637e:	f7fd fe4b 	bl	8004018 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8006382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006384:	3316      	adds	r3, #22
 8006386:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8006388:	4618      	mov	r0, r3
 800638a:	f7fd fe45 	bl	8004018 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800638e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006390:	330b      	adds	r3, #11
 8006392:	2220      	movs	r2, #32
 8006394:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800639a:	4611      	mov	r1, r2
 800639c:	4618      	mov	r0, r3
 800639e:	f7fe fe1a 	bl	8004fd6 <ld_clust>
 80063a2:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80063a4:	697b      	ldr	r3, [r7, #20]
 80063a6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80063a8:	2200      	movs	r2, #0
 80063aa:	4618      	mov	r0, r3
 80063ac:	f7fe fe32 	bl	8005014 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80063b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80063b2:	331c      	adds	r3, #28
 80063b4:	2100      	movs	r1, #0
 80063b6:	4618      	mov	r0, r3
 80063b8:	f7fd fe2e 	bl	8004018 <st_dword>
					fs->wflag = 1;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	2201      	movs	r2, #1
 80063c0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80063c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d037      	beq.n	8006438 <f_open+0x1d0>
						dw = fs->winsect;
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063cc:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80063ce:	f107 0318 	add.w	r3, r7, #24
 80063d2:	2200      	movs	r2, #0
 80063d4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80063d6:	4618      	mov	r0, r3
 80063d8:	f7fe fb22 	bl	8004a20 <remove_chain>
 80063dc:	4603      	mov	r3, r0
 80063de:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80063e2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d126      	bne.n	8006438 <f_open+0x1d0>
							res = move_window(fs, dw);
 80063ea:	697b      	ldr	r3, [r7, #20]
 80063ec:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80063ee:	4618      	mov	r0, r3
 80063f0:	f7fe f86c 	bl	80044cc <move_window>
 80063f4:	4603      	mov	r3, r0
 80063f6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80063fe:	3a01      	subs	r2, #1
 8006400:	615a      	str	r2, [r3, #20]
 8006402:	e019      	b.n	8006438 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8006404:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006408:	2b00      	cmp	r3, #0
 800640a:	d115      	bne.n	8006438 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800640c:	7fbb      	ldrb	r3, [r7, #30]
 800640e:	f003 0310 	and.w	r3, r3, #16
 8006412:	2b00      	cmp	r3, #0
 8006414:	d003      	beq.n	800641e <f_open+0x1b6>
					res = FR_NO_FILE;
 8006416:	2304      	movs	r3, #4
 8006418:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800641c:	e00c      	b.n	8006438 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800641e:	79fb      	ldrb	r3, [r7, #7]
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d007      	beq.n	8006438 <f_open+0x1d0>
 8006428:	7fbb      	ldrb	r3, [r7, #30]
 800642a:	f003 0301 	and.w	r3, r3, #1
 800642e:	2b00      	cmp	r3, #0
 8006430:	d002      	beq.n	8006438 <f_open+0x1d0>
						res = FR_DENIED;
 8006432:	2307      	movs	r3, #7
 8006434:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8006438:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800643c:	2b00      	cmp	r3, #0
 800643e:	d126      	bne.n	800648e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	f003 0308 	and.w	r3, r3, #8
 8006446:	2b00      	cmp	r3, #0
 8006448:	d003      	beq.n	8006452 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 800644a:	79fb      	ldrb	r3, [r7, #7]
 800644c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006450:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8006452:	697b      	ldr	r3, [r7, #20]
 8006454:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 800645a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	2b01      	cmp	r3, #1
 8006464:	bf8c      	ite	hi
 8006466:	2301      	movhi	r3, #1
 8006468:	2300      	movls	r3, #0
 800646a:	b2db      	uxtb	r3, r3
 800646c:	461a      	mov	r2, r3
 800646e:	f107 0318 	add.w	r3, r7, #24
 8006472:	4611      	mov	r1, r2
 8006474:	4618      	mov	r0, r3
 8006476:	f7fd fef7 	bl	8004268 <inc_lock>
 800647a:	4602      	mov	r2, r0
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	691b      	ldr	r3, [r3, #16]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d102      	bne.n	800648e <f_open+0x226>
 8006488:	2302      	movs	r3, #2
 800648a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800648e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006492:	2b00      	cmp	r3, #0
 8006494:	f040 80a3 	bne.w	80065de <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8006498:	697b      	ldr	r3, [r7, #20]
 800649a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800649c:	4611      	mov	r1, r2
 800649e:	4618      	mov	r0, r3
 80064a0:	f7fe fd99 	bl	8004fd6 <ld_clust>
 80064a4:	4602      	mov	r2, r0
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80064aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ac:	331c      	adds	r3, #28
 80064ae:	4618      	mov	r0, r3
 80064b0:	f7fd fd74 	bl	8003f9c <ld_dword>
 80064b4:	4602      	mov	r2, r0
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2200      	movs	r2, #0
 80064be:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80064c0:	697a      	ldr	r2, [r7, #20]
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	88da      	ldrh	r2, [r3, #6]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	79fa      	ldrb	r2, [r7, #7]
 80064d2:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	2200      	movs	r2, #0
 80064d8:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	3330      	adds	r3, #48	@ 0x30
 80064ea:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80064ee:	2100      	movs	r1, #0
 80064f0:	4618      	mov	r0, r3
 80064f2:	f7fd fdde 	bl	80040b2 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	f003 0320 	and.w	r3, r3, #32
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d06e      	beq.n	80065de <f_open+0x376>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d06a      	beq.n	80065de <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	68da      	ldr	r2, [r3, #12]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	895b      	ldrh	r3, [r3, #10]
 8006514:	461a      	mov	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	899b      	ldrh	r3, [r3, #12]
 800651a:	fb02 f303 	mul.w	r3, r2, r3
 800651e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	689b      	ldr	r3, [r3, #8]
 8006524:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	68db      	ldr	r3, [r3, #12]
 800652a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800652c:	e016      	b.n	800655c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006532:	4618      	mov	r0, r3
 8006534:	f7fe f887 	bl	8004646 <get_fat>
 8006538:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 800653a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800653c:	2b01      	cmp	r3, #1
 800653e:	d802      	bhi.n	8006546 <f_open+0x2de>
 8006540:	2302      	movs	r3, #2
 8006542:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8006546:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006548:	f1b3 3fff 	cmp.w	r3, #4294967295
 800654c:	d102      	bne.n	8006554 <f_open+0x2ec>
 800654e:	2301      	movs	r3, #1
 8006550:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8006554:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006556:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006558:	1ad3      	subs	r3, r2, r3
 800655a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800655c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006560:	2b00      	cmp	r3, #0
 8006562:	d103      	bne.n	800656c <f_open+0x304>
 8006564:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8006566:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006568:	429a      	cmp	r2, r3
 800656a:	d8e0      	bhi.n	800652e <f_open+0x2c6>
				}
				fp->clust = clst;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006570:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8006572:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8006576:	2b00      	cmp	r3, #0
 8006578:	d131      	bne.n	80065de <f_open+0x376>
 800657a:	697b      	ldr	r3, [r7, #20]
 800657c:	899b      	ldrh	r3, [r3, #12]
 800657e:	461a      	mov	r2, r3
 8006580:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006582:	fbb3 f1f2 	udiv	r1, r3, r2
 8006586:	fb01 f202 	mul.w	r2, r1, r2
 800658a:	1a9b      	subs	r3, r3, r2
 800658c:	2b00      	cmp	r3, #0
 800658e:	d026      	beq.n	80065de <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8006590:	697b      	ldr	r3, [r7, #20]
 8006592:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8006594:	4618      	mov	r0, r3
 8006596:	f7fe f837 	bl	8004608 <clust2sect>
 800659a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 800659c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d103      	bne.n	80065aa <f_open+0x342>
						res = FR_INT_ERR;
 80065a2:	2302      	movs	r3, #2
 80065a4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80065a8:	e019      	b.n	80065de <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	899b      	ldrh	r3, [r3, #12]
 80065ae:	461a      	mov	r2, r3
 80065b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065b2:	fbb3 f2f2 	udiv	r2, r3, r2
 80065b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80065b8:	441a      	add	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	7858      	ldrb	r0, [r3, #1]
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	6a1a      	ldr	r2, [r3, #32]
 80065cc:	2301      	movs	r3, #1
 80065ce:	f7fd fc6f 	bl	8003eb0 <disk_read>
 80065d2:	4603      	mov	r3, r0
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d002      	beq.n	80065de <f_open+0x376>
 80065d8:	2301      	movs	r3, #1
 80065da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80065de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d002      	beq.n	80065ec <f_open+0x384>
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2200      	movs	r2, #0
 80065ea:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80065ec:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3768      	adds	r7, #104	@ 0x68
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}

080065f8 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b08e      	sub	sp, #56	@ 0x38
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	60f8      	str	r0, [r7, #12]
 8006600:	60b9      	str	r1, [r7, #8]
 8006602:	607a      	str	r2, [r7, #4]
 8006604:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	2200      	movs	r2, #0
 800660e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f107 0214 	add.w	r2, r7, #20
 8006616:	4611      	mov	r1, r2
 8006618:	4618      	mov	r0, r3
 800661a:	f7ff fda9 	bl	8006170 <validate>
 800661e:	4603      	mov	r3, r0
 8006620:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006624:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006628:	2b00      	cmp	r3, #0
 800662a:	d107      	bne.n	800663c <f_read+0x44>
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	7d5b      	ldrb	r3, [r3, #21]
 8006630:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8006634:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006638:	2b00      	cmp	r3, #0
 800663a:	d002      	beq.n	8006642 <f_read+0x4a>
 800663c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006640:	e135      	b.n	80068ae <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	7d1b      	ldrb	r3, [r3, #20]
 8006646:	f003 0301 	and.w	r3, r3, #1
 800664a:	2b00      	cmp	r3, #0
 800664c:	d101      	bne.n	8006652 <f_read+0x5a>
 800664e:	2307      	movs	r3, #7
 8006650:	e12d      	b.n	80068ae <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	68da      	ldr	r2, [r3, #12]
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800665e:	687a      	ldr	r2, [r7, #4]
 8006660:	6a3b      	ldr	r3, [r7, #32]
 8006662:	429a      	cmp	r2, r3
 8006664:	f240 811e 	bls.w	80068a4 <f_read+0x2ac>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800666c:	e11a      	b.n	80068a4 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	699b      	ldr	r3, [r3, #24]
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	8992      	ldrh	r2, [r2, #12]
 8006676:	fbb3 f1f2 	udiv	r1, r3, r2
 800667a:	fb01 f202 	mul.w	r2, r1, r2
 800667e:	1a9b      	subs	r3, r3, r2
 8006680:	2b00      	cmp	r3, #0
 8006682:	f040 80d5 	bne.w	8006830 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	699b      	ldr	r3, [r3, #24]
 800668a:	697a      	ldr	r2, [r7, #20]
 800668c:	8992      	ldrh	r2, [r2, #12]
 800668e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	8952      	ldrh	r2, [r2, #10]
 8006696:	3a01      	subs	r2, #1
 8006698:	4013      	ands	r3, r2
 800669a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800669c:	69fb      	ldr	r3, [r7, #28]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d12f      	bne.n	8006702 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	699b      	ldr	r3, [r3, #24]
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d103      	bne.n	80066b2 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b0:	e013      	b.n	80066da <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	699b      	ldr	r3, [r3, #24]
 80066be:	4619      	mov	r1, r3
 80066c0:	68f8      	ldr	r0, [r7, #12]
 80066c2:	f7fe faaa 	bl	8004c1a <clmt_clust>
 80066c6:	6338      	str	r0, [r7, #48]	@ 0x30
 80066c8:	e007      	b.n	80066da <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80066ca:	68fa      	ldr	r2, [r7, #12]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	69db      	ldr	r3, [r3, #28]
 80066d0:	4619      	mov	r1, r3
 80066d2:	4610      	mov	r0, r2
 80066d4:	f7fd ffb7 	bl	8004646 <get_fat>
 80066d8:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80066da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066dc:	2b01      	cmp	r3, #1
 80066de:	d804      	bhi.n	80066ea <f_read+0xf2>
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	2202      	movs	r2, #2
 80066e4:	755a      	strb	r2, [r3, #21]
 80066e6:	2302      	movs	r3, #2
 80066e8:	e0e1      	b.n	80068ae <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80066ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f0:	d104      	bne.n	80066fc <f_read+0x104>
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2201      	movs	r2, #1
 80066f6:	755a      	strb	r2, [r3, #21]
 80066f8:	2301      	movs	r3, #1
 80066fa:	e0d8      	b.n	80068ae <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006700:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006702:	697a      	ldr	r2, [r7, #20]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	69db      	ldr	r3, [r3, #28]
 8006708:	4619      	mov	r1, r3
 800670a:	4610      	mov	r0, r2
 800670c:	f7fd ff7c 	bl	8004608 <clust2sect>
 8006710:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d104      	bne.n	8006722 <f_read+0x12a>
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2202      	movs	r2, #2
 800671c:	755a      	strb	r2, [r3, #21]
 800671e:	2302      	movs	r3, #2
 8006720:	e0c5      	b.n	80068ae <f_read+0x2b6>
			sect += csect;
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	69fb      	ldr	r3, [r7, #28]
 8006726:	4413      	add	r3, r2
 8006728:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800672a:	697b      	ldr	r3, [r7, #20]
 800672c:	899b      	ldrh	r3, [r3, #12]
 800672e:	461a      	mov	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	fbb3 f3f2 	udiv	r3, r3, r2
 8006736:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8006738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800673a:	2b00      	cmp	r3, #0
 800673c:	d041      	beq.n	80067c2 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800673e:	69fa      	ldr	r2, [r7, #28]
 8006740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006742:	4413      	add	r3, r2
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	8952      	ldrh	r2, [r2, #10]
 8006748:	4293      	cmp	r3, r2
 800674a:	d905      	bls.n	8006758 <f_read+0x160>
					cc = fs->csize - csect;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	895b      	ldrh	r3, [r3, #10]
 8006750:	461a      	mov	r2, r3
 8006752:	69fb      	ldr	r3, [r7, #28]
 8006754:	1ad3      	subs	r3, r2, r3
 8006756:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	7858      	ldrb	r0, [r3, #1]
 800675c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800675e:	69ba      	ldr	r2, [r7, #24]
 8006760:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006762:	f7fd fba5 	bl	8003eb0 <disk_read>
 8006766:	4603      	mov	r3, r0
 8006768:	2b00      	cmp	r3, #0
 800676a:	d004      	beq.n	8006776 <f_read+0x17e>
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2201      	movs	r2, #1
 8006770:	755a      	strb	r2, [r3, #21]
 8006772:	2301      	movs	r3, #1
 8006774:	e09b      	b.n	80068ae <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	7d1b      	ldrb	r3, [r3, #20]
 800677a:	b25b      	sxtb	r3, r3
 800677c:	2b00      	cmp	r3, #0
 800677e:	da18      	bge.n	80067b2 <f_read+0x1ba>
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6a1a      	ldr	r2, [r3, #32]
 8006784:	69bb      	ldr	r3, [r7, #24]
 8006786:	1ad3      	subs	r3, r2, r3
 8006788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800678a:	429a      	cmp	r2, r3
 800678c:	d911      	bls.n	80067b2 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	6a1a      	ldr	r2, [r3, #32]
 8006792:	69bb      	ldr	r3, [r7, #24]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	697a      	ldr	r2, [r7, #20]
 8006798:	8992      	ldrh	r2, [r2, #12]
 800679a:	fb02 f303 	mul.w	r3, r2, r3
 800679e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067a0:	18d0      	adds	r0, r2, r3
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067a8:	697b      	ldr	r3, [r7, #20]
 80067aa:	899b      	ldrh	r3, [r3, #12]
 80067ac:	461a      	mov	r2, r3
 80067ae:	f7fd fc5f 	bl	8004070 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 80067b2:	697b      	ldr	r3, [r7, #20]
 80067b4:	899b      	ldrh	r3, [r3, #12]
 80067b6:	461a      	mov	r2, r3
 80067b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80067ba:	fb02 f303 	mul.w	r3, r2, r3
 80067be:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 80067c0:	e05c      	b.n	800687c <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	6a1b      	ldr	r3, [r3, #32]
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d02e      	beq.n	800682a <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	7d1b      	ldrb	r3, [r3, #20]
 80067d0:	b25b      	sxtb	r3, r3
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	da18      	bge.n	8006808 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	7858      	ldrb	r0, [r3, #1]
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	6a1a      	ldr	r2, [r3, #32]
 80067e4:	2301      	movs	r3, #1
 80067e6:	f7fd fb83 	bl	8003ef0 <disk_write>
 80067ea:	4603      	mov	r3, r0
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d004      	beq.n	80067fa <f_read+0x202>
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2201      	movs	r2, #1
 80067f4:	755a      	strb	r2, [r3, #21]
 80067f6:	2301      	movs	r3, #1
 80067f8:	e059      	b.n	80068ae <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	7d1b      	ldrb	r3, [r3, #20]
 80067fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006802:	b2da      	uxtb	r2, r3
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006808:	697b      	ldr	r3, [r7, #20]
 800680a:	7858      	ldrb	r0, [r3, #1]
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006812:	2301      	movs	r3, #1
 8006814:	69ba      	ldr	r2, [r7, #24]
 8006816:	f7fd fb4b 	bl	8003eb0 <disk_read>
 800681a:	4603      	mov	r3, r0
 800681c:	2b00      	cmp	r3, #0
 800681e:	d004      	beq.n	800682a <f_read+0x232>
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	2201      	movs	r2, #1
 8006824:	755a      	strb	r2, [r3, #21]
 8006826:	2301      	movs	r3, #1
 8006828:	e041      	b.n	80068ae <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	69ba      	ldr	r2, [r7, #24]
 800682e:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	899b      	ldrh	r3, [r3, #12]
 8006834:	4618      	mov	r0, r3
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	699b      	ldr	r3, [r3, #24]
 800683a:	697a      	ldr	r2, [r7, #20]
 800683c:	8992      	ldrh	r2, [r2, #12]
 800683e:	fbb3 f1f2 	udiv	r1, r3, r2
 8006842:	fb01 f202 	mul.w	r2, r1, r2
 8006846:	1a9b      	subs	r3, r3, r2
 8006848:	1ac3      	subs	r3, r0, r3
 800684a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800684c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	429a      	cmp	r2, r3
 8006852:	d901      	bls.n	8006858 <f_read+0x260>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	8992      	ldrh	r2, [r2, #12]
 8006866:	fbb3 f0f2 	udiv	r0, r3, r2
 800686a:	fb00 f202 	mul.w	r2, r0, r2
 800686e:	1a9b      	subs	r3, r3, r2
 8006870:	440b      	add	r3, r1
 8006872:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006874:	4619      	mov	r1, r3
 8006876:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006878:	f7fd fbfa 	bl	8004070 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800687c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800687e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006880:	4413      	add	r3, r2
 8006882:	627b      	str	r3, [r7, #36]	@ 0x24
 8006884:	68fb      	ldr	r3, [r7, #12]
 8006886:	699a      	ldr	r2, [r3, #24]
 8006888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800688a:	441a      	add	r2, r3
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	619a      	str	r2, [r3, #24]
 8006890:	683b      	ldr	r3, [r7, #0]
 8006892:	681a      	ldr	r2, [r3, #0]
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006896:	441a      	add	r2, r3
 8006898:	683b      	ldr	r3, [r7, #0]
 800689a:	601a      	str	r2, [r3, #0]
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	f47f aee1 	bne.w	800666e <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 80068ac:	2300      	movs	r3, #0
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	3738      	adds	r7, #56	@ 0x38
 80068b2:	46bd      	mov	sp, r7
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80068b6:	b580      	push	{r7, lr}
 80068b8:	b08c      	sub	sp, #48	@ 0x30
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	60f8      	str	r0, [r7, #12]
 80068be:	60b9      	str	r1, [r7, #8]
 80068c0:	607a      	str	r2, [r7, #4]
 80068c2:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80068c4:	68bb      	ldr	r3, [r7, #8]
 80068c6:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2200      	movs	r2, #0
 80068cc:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f107 0210 	add.w	r2, r7, #16
 80068d4:	4611      	mov	r1, r2
 80068d6:	4618      	mov	r0, r3
 80068d8:	f7ff fc4a 	bl	8006170 <validate>
 80068dc:	4603      	mov	r3, r0
 80068de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 80068e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d107      	bne.n	80068fa <f_write+0x44>
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	7d5b      	ldrb	r3, [r3, #21]
 80068ee:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80068f2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d002      	beq.n	8006900 <f_write+0x4a>
 80068fa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80068fe:	e16a      	b.n	8006bd6 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	7d1b      	ldrb	r3, [r3, #20]
 8006904:	f003 0302 	and.w	r3, r3, #2
 8006908:	2b00      	cmp	r3, #0
 800690a:	d101      	bne.n	8006910 <f_write+0x5a>
 800690c:	2307      	movs	r3, #7
 800690e:	e162      	b.n	8006bd6 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	699a      	ldr	r2, [r3, #24]
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	441a      	add	r2, r3
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	699b      	ldr	r3, [r3, #24]
 800691c:	429a      	cmp	r2, r3
 800691e:	f080 814c 	bcs.w	8006bba <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	699b      	ldr	r3, [r3, #24]
 8006926:	43db      	mvns	r3, r3
 8006928:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 800692a:	e146      	b.n	8006bba <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	699b      	ldr	r3, [r3, #24]
 8006930:	693a      	ldr	r2, [r7, #16]
 8006932:	8992      	ldrh	r2, [r2, #12]
 8006934:	fbb3 f1f2 	udiv	r1, r3, r2
 8006938:	fb01 f202 	mul.w	r2, r1, r2
 800693c:	1a9b      	subs	r3, r3, r2
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 80f1 	bne.w	8006b26 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	693a      	ldr	r2, [r7, #16]
 800694a:	8992      	ldrh	r2, [r2, #12]
 800694c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006950:	693a      	ldr	r2, [r7, #16]
 8006952:	8952      	ldrh	r2, [r2, #10]
 8006954:	3a01      	subs	r2, #1
 8006956:	4013      	ands	r3, r2
 8006958:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d143      	bne.n	80069e8 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	699b      	ldr	r3, [r3, #24]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d10c      	bne.n	8006982 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	689b      	ldr	r3, [r3, #8]
 800696c:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 800696e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006970:	2b00      	cmp	r3, #0
 8006972:	d11a      	bne.n	80069aa <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2100      	movs	r1, #0
 8006978:	4618      	mov	r0, r3
 800697a:	f7fe f8b6 	bl	8004aea <create_chain>
 800697e:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006980:	e013      	b.n	80069aa <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	2b00      	cmp	r3, #0
 8006988:	d007      	beq.n	800699a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	699b      	ldr	r3, [r3, #24]
 800698e:	4619      	mov	r1, r3
 8006990:	68f8      	ldr	r0, [r7, #12]
 8006992:	f7fe f942 	bl	8004c1a <clmt_clust>
 8006996:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006998:	e007      	b.n	80069aa <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800699a:	68fa      	ldr	r2, [r7, #12]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	69db      	ldr	r3, [r3, #28]
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe f8a1 	bl	8004aea <create_chain>
 80069a8:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80069aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	f000 8109 	beq.w	8006bc4 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80069b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069b4:	2b01      	cmp	r3, #1
 80069b6:	d104      	bne.n	80069c2 <f_write+0x10c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2202      	movs	r2, #2
 80069bc:	755a      	strb	r2, [r3, #21]
 80069be:	2302      	movs	r3, #2
 80069c0:	e109      	b.n	8006bd6 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80069c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80069c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069c8:	d104      	bne.n	80069d4 <f_write+0x11e>
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2201      	movs	r2, #1
 80069ce:	755a      	strb	r2, [r3, #21]
 80069d0:	2301      	movs	r3, #1
 80069d2:	e100      	b.n	8006bd6 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069d8:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	689b      	ldr	r3, [r3, #8]
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d102      	bne.n	80069e8 <f_write+0x132>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80069e6:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	7d1b      	ldrb	r3, [r3, #20]
 80069ec:	b25b      	sxtb	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	da18      	bge.n	8006a24 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	7858      	ldrb	r0, [r3, #1]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	6a1a      	ldr	r2, [r3, #32]
 8006a00:	2301      	movs	r3, #1
 8006a02:	f7fd fa75 	bl	8003ef0 <disk_write>
 8006a06:	4603      	mov	r3, r0
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d004      	beq.n	8006a16 <f_write+0x160>
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	755a      	strb	r2, [r3, #21]
 8006a12:	2301      	movs	r3, #1
 8006a14:	e0df      	b.n	8006bd6 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	7d1b      	ldrb	r3, [r3, #20]
 8006a1a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	69db      	ldr	r3, [r3, #28]
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	4610      	mov	r0, r2
 8006a2e:	f7fd fdeb 	bl	8004608 <clust2sect>
 8006a32:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d104      	bne.n	8006a44 <f_write+0x18e>
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	2202      	movs	r2, #2
 8006a3e:	755a      	strb	r2, [r3, #21]
 8006a40:	2302      	movs	r3, #2
 8006a42:	e0c8      	b.n	8006bd6 <f_write+0x320>
			sect += csect;
 8006a44:	697a      	ldr	r2, [r7, #20]
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	4413      	add	r3, r2
 8006a4a:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8006a4c:	693b      	ldr	r3, [r7, #16]
 8006a4e:	899b      	ldrh	r3, [r3, #12]
 8006a50:	461a      	mov	r2, r3
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a58:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d043      	beq.n	8006ae8 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8006a60:	69ba      	ldr	r2, [r7, #24]
 8006a62:	6a3b      	ldr	r3, [r7, #32]
 8006a64:	4413      	add	r3, r2
 8006a66:	693a      	ldr	r2, [r7, #16]
 8006a68:	8952      	ldrh	r2, [r2, #10]
 8006a6a:	4293      	cmp	r3, r2
 8006a6c:	d905      	bls.n	8006a7a <f_write+0x1c4>
					cc = fs->csize - csect;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	895b      	ldrh	r3, [r3, #10]
 8006a72:	461a      	mov	r2, r3
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	7858      	ldrb	r0, [r3, #1]
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	697a      	ldr	r2, [r7, #20]
 8006a82:	69f9      	ldr	r1, [r7, #28]
 8006a84:	f7fd fa34 	bl	8003ef0 <disk_write>
 8006a88:	4603      	mov	r3, r0
 8006a8a:	2b00      	cmp	r3, #0
 8006a8c:	d004      	beq.n	8006a98 <f_write+0x1e2>
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2201      	movs	r2, #1
 8006a92:	755a      	strb	r2, [r3, #21]
 8006a94:	2301      	movs	r3, #1
 8006a96:	e09e      	b.n	8006bd6 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a1a      	ldr	r2, [r3, #32]
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	1ad3      	subs	r3, r2, r3
 8006aa0:	6a3a      	ldr	r2, [r7, #32]
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d918      	bls.n	8006ad8 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	6a1a      	ldr	r2, [r3, #32]
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	8992      	ldrh	r2, [r2, #12]
 8006ab8:	fb02 f303 	mul.w	r3, r2, r3
 8006abc:	69fa      	ldr	r2, [r7, #28]
 8006abe:	18d1      	adds	r1, r2, r3
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	899b      	ldrh	r3, [r3, #12]
 8006ac4:	461a      	mov	r2, r3
 8006ac6:	f7fd fad3 	bl	8004070 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	7d1b      	ldrb	r3, [r3, #20]
 8006ace:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006ad2:	b2da      	uxtb	r2, r3
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	899b      	ldrh	r3, [r3, #12]
 8006adc:	461a      	mov	r2, r3
 8006ade:	6a3b      	ldr	r3, [r7, #32]
 8006ae0:	fb02 f303 	mul.w	r3, r2, r3
 8006ae4:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006ae6:	e04b      	b.n	8006b80 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	6a1b      	ldr	r3, [r3, #32]
 8006aec:	697a      	ldr	r2, [r7, #20]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d016      	beq.n	8006b20 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	699a      	ldr	r2, [r3, #24]
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006afa:	429a      	cmp	r2, r3
 8006afc:	d210      	bcs.n	8006b20 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8006afe:	693b      	ldr	r3, [r7, #16]
 8006b00:	7858      	ldrb	r0, [r3, #1]
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b08:	2301      	movs	r3, #1
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	f7fd f9d0 	bl	8003eb0 <disk_read>
 8006b10:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d004      	beq.n	8006b20 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	755a      	strb	r2, [r3, #21]
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e05a      	b.n	8006bd6 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	697a      	ldr	r2, [r7, #20]
 8006b24:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	899b      	ldrh	r3, [r3, #12]
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	693a      	ldr	r2, [r7, #16]
 8006b32:	8992      	ldrh	r2, [r2, #12]
 8006b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8006b38:	fb01 f202 	mul.w	r2, r1, r2
 8006b3c:	1a9b      	subs	r3, r3, r2
 8006b3e:	1ac3      	subs	r3, r0, r3
 8006b40:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8006b42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	429a      	cmp	r2, r3
 8006b48:	d901      	bls.n	8006b4e <f_write+0x298>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	693a      	ldr	r2, [r7, #16]
 8006b5a:	8992      	ldrh	r2, [r2, #12]
 8006b5c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b60:	fb00 f202 	mul.w	r2, r0, r2
 8006b64:	1a9b      	subs	r3, r3, r2
 8006b66:	440b      	add	r3, r1
 8006b68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006b6a:	69f9      	ldr	r1, [r7, #28]
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	f7fd fa7f 	bl	8004070 <mem_cpy>
		fp->flag |= FA_DIRTY;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	7d1b      	ldrb	r3, [r3, #20]
 8006b76:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006b80:	69fa      	ldr	r2, [r7, #28]
 8006b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b84:	4413      	add	r3, r2
 8006b86:	61fb      	str	r3, [r7, #28]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	699a      	ldr	r2, [r3, #24]
 8006b8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b8e:	441a      	add	r2, r3
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	619a      	str	r2, [r3, #24]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	68da      	ldr	r2, [r3, #12]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	bf38      	it	cc
 8006ba0:	461a      	movcc	r2, r3
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	60da      	str	r2, [r3, #12]
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	681a      	ldr	r2, [r3, #0]
 8006baa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bac:	441a      	add	r2, r3
 8006bae:	683b      	ldr	r3, [r7, #0]
 8006bb0:	601a      	str	r2, [r3, #0]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	f47f aeb5 	bne.w	800692c <f_write+0x76>
 8006bc2:	e000      	b.n	8006bc6 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006bc4:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	7d1b      	ldrb	r3, [r3, #20]
 8006bca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3730      	adds	r7, #48	@ 0x30
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b086      	sub	sp, #24
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	f107 0208 	add.w	r2, r7, #8
 8006bec:	4611      	mov	r1, r2
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7ff fabe 	bl	8006170 <validate>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006bf8:	7dfb      	ldrb	r3, [r7, #23]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d168      	bne.n	8006cd0 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	7d1b      	ldrb	r3, [r3, #20]
 8006c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d062      	beq.n	8006cd0 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	7d1b      	ldrb	r3, [r3, #20]
 8006c0e:	b25b      	sxtb	r3, r3
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	da15      	bge.n	8006c40 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006c14:	68bb      	ldr	r3, [r7, #8]
 8006c16:	7858      	ldrb	r0, [r3, #1]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6a1a      	ldr	r2, [r3, #32]
 8006c22:	2301      	movs	r3, #1
 8006c24:	f7fd f964 	bl	8003ef0 <disk_write>
 8006c28:	4603      	mov	r3, r0
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d001      	beq.n	8006c32 <f_sync+0x54>
 8006c2e:	2301      	movs	r3, #1
 8006c30:	e04f      	b.n	8006cd2 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	7d1b      	ldrb	r3, [r3, #20]
 8006c36:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006c3a:	b2da      	uxtb	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8006c40:	f7fd f896 	bl	8003d70 <get_fattime>
 8006c44:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8006c46:	68ba      	ldr	r2, [r7, #8]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c4c:	4619      	mov	r1, r3
 8006c4e:	4610      	mov	r0, r2
 8006c50:	f7fd fc3c 	bl	80044cc <move_window>
 8006c54:	4603      	mov	r3, r0
 8006c56:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8006c58:	7dfb      	ldrb	r3, [r7, #23]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d138      	bne.n	8006cd0 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c62:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	330b      	adds	r3, #11
 8006c68:	781a      	ldrb	r2, [r3, #0]
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	330b      	adds	r3, #11
 8006c6e:	f042 0220 	orr.w	r2, r2, #32
 8006c72:	b2d2      	uxtb	r2, r2
 8006c74:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6818      	ldr	r0, [r3, #0]
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	689b      	ldr	r3, [r3, #8]
 8006c7e:	461a      	mov	r2, r3
 8006c80:	68f9      	ldr	r1, [r7, #12]
 8006c82:	f7fe f9c7 	bl	8005014 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f103 021c 	add.w	r2, r3, #28
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	68db      	ldr	r3, [r3, #12]
 8006c90:	4619      	mov	r1, r3
 8006c92:	4610      	mov	r0, r2
 8006c94:	f7fd f9c0 	bl	8004018 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	3316      	adds	r3, #22
 8006c9c:	6939      	ldr	r1, [r7, #16]
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fd f9ba 	bl	8004018 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	3312      	adds	r3, #18
 8006ca8:	2100      	movs	r1, #0
 8006caa:	4618      	mov	r0, r3
 8006cac:	f7fd f999 	bl	8003fe2 <st_word>
					fs->wflag = 1;
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	2201      	movs	r2, #1
 8006cb4:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006cb6:	68bb      	ldr	r3, [r7, #8]
 8006cb8:	4618      	mov	r0, r3
 8006cba:	f7fd fc35 	bl	8004528 <sync_fs>
 8006cbe:	4603      	mov	r3, r0
 8006cc0:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	7d1b      	ldrb	r3, [r3, #20]
 8006cc6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006cca:	b2da      	uxtb	r2, r3
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	3718      	adds	r7, #24
 8006cd6:	46bd      	mov	sp, r7
 8006cd8:	bd80      	pop	{r7, pc}

08006cda <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006cda:	b580      	push	{r7, lr}
 8006cdc:	b084      	sub	sp, #16
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f7ff ff7b 	bl	8006bde <f_sync>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d118      	bne.n	8006d24 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f107 0208 	add.w	r2, r7, #8
 8006cf8:	4611      	mov	r1, r2
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f7ff fa38 	bl	8006170 <validate>
 8006d00:	4603      	mov	r3, r0
 8006d02:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006d04:	7bfb      	ldrb	r3, [r7, #15]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d10c      	bne.n	8006d24 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	691b      	ldr	r3, [r3, #16]
 8006d0e:	4618      	mov	r0, r3
 8006d10:	f7fd fb38 	bl	8004384 <dec_lock>
 8006d14:	4603      	mov	r3, r0
 8006d16:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006d18:	7bfb      	ldrb	r3, [r7, #15]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d102      	bne.n	8006d24 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d26:	4618      	mov	r0, r3
 8006d28:	3710      	adds	r7, #16
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}

08006d2e <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 8006d2e:	b580      	push	{r7, lr}
 8006d30:	b092      	sub	sp, #72	@ 0x48
 8006d32:	af00      	add	r7, sp, #0
 8006d34:	60f8      	str	r0, [r7, #12]
 8006d36:	60b9      	str	r1, [r7, #8]
 8006d38:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8006d3a:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8006d3e:	f107 030c 	add.w	r3, r7, #12
 8006d42:	2200      	movs	r2, #0
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7fe ff8d 	bl	8005c64 <find_volume>
 8006d4a:	4603      	mov	r3, r0
 8006d4c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 8006d50:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	f040 8099 	bne.w	8006e8c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8006d5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 8006d60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d62:	699a      	ldr	r2, [r3, #24]
 8006d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d66:	69db      	ldr	r3, [r3, #28]
 8006d68:	3b02      	subs	r3, #2
 8006d6a:	429a      	cmp	r2, r3
 8006d6c:	d804      	bhi.n	8006d78 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 8006d6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d70:	699a      	ldr	r2, [r3, #24]
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	601a      	str	r2, [r3, #0]
 8006d76:	e089      	b.n	8006e8c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d128      	bne.n	8006dd6 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006d84:	2302      	movs	r3, #2
 8006d86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d8a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006d8c:	f107 0314 	add.w	r3, r7, #20
 8006d90:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006d92:	4618      	mov	r0, r3
 8006d94:	f7fd fc57 	bl	8004646 <get_fat>
 8006d98:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006d9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006da0:	d103      	bne.n	8006daa <f_getfree+0x7c>
 8006da2:	2301      	movs	r3, #1
 8006da4:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006da8:	e063      	b.n	8006e72 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dac:	2b01      	cmp	r3, #1
 8006dae:	d103      	bne.n	8006db8 <f_getfree+0x8a>
 8006db0:	2302      	movs	r3, #2
 8006db2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006db6:	e05c      	b.n	8006e72 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006db8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d102      	bne.n	8006dc4 <f_getfree+0x96>
 8006dbe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006dc4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dcc:	69db      	ldr	r3, [r3, #28]
 8006dce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d3db      	bcc.n	8006d8c <f_getfree+0x5e>
 8006dd4:	e04d      	b.n	8006e72 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006dd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dd8:	69db      	ldr	r3, [r3, #28]
 8006dda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006de0:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8006de2:	2300      	movs	r3, #0
 8006de4:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de6:	2300      	movs	r3, #0
 8006de8:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006dea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d113      	bne.n	8006e18 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006df0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006df4:	1c5a      	adds	r2, r3, #1
 8006df6:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006df8:	4619      	mov	r1, r3
 8006dfa:	f7fd fb67 	bl	80044cc <move_window>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8006e04:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d131      	bne.n	8006e70 <f_getfree+0x142>
							p = fs->win;
 8006e0c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e0e:	3338      	adds	r3, #56	@ 0x38
 8006e10:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8006e12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e14:	899b      	ldrh	r3, [r3, #12]
 8006e16:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006e18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e1a:	781b      	ldrb	r3, [r3, #0]
 8006e1c:	2b02      	cmp	r3, #2
 8006e1e:	d10f      	bne.n	8006e40 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 8006e20:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e22:	f7fd f8a3 	bl	8003f6c <ld_word>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d102      	bne.n	8006e32 <f_getfree+0x104>
 8006e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e2e:	3301      	adds	r3, #1
 8006e30:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8006e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e34:	3302      	adds	r3, #2
 8006e36:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e3a:	3b02      	subs	r3, #2
 8006e3c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006e3e:	e010      	b.n	8006e62 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 8006e40:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006e42:	f7fd f8ab 	bl	8003f9c <ld_dword>
 8006e46:	4603      	mov	r3, r0
 8006e48:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d102      	bne.n	8006e56 <f_getfree+0x128>
 8006e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e52:	3301      	adds	r3, #1
 8006e54:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8006e56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e58:	3304      	adds	r3, #4
 8006e5a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e5e:	3b04      	subs	r3, #4
 8006e60:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 8006e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e64:	3b01      	subs	r3, #1
 8006e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006e68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1bd      	bne.n	8006dea <f_getfree+0xbc>
 8006e6e:	e000      	b.n	8006e72 <f_getfree+0x144>
							if (res != FR_OK) break;
 8006e70:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e76:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006e78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006e7c:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 8006e7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e80:	791a      	ldrb	r2, [r3, #4]
 8006e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e84:	f042 0201 	orr.w	r2, r2, #1
 8006e88:	b2d2      	uxtb	r2, r2
 8006e8a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006e8c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3748      	adds	r7, #72	@ 0x48
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}

08006e98 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b088      	sub	sp, #32
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006eac:	e01c      	b.n	8006ee8 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 8006eae:	f107 0310 	add.w	r3, r7, #16
 8006eb2:	f107 0114 	add.w	r1, r7, #20
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	6878      	ldr	r0, [r7, #4]
 8006eba:	f7ff fb9d 	bl	80065f8 <f_read>
		if (rc != 1) break;
 8006ebe:	693b      	ldr	r3, [r7, #16]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d117      	bne.n	8006ef4 <f_gets+0x5c>
		c = s[0];
 8006ec4:	7d3b      	ldrb	r3, [r7, #20]
 8006ec6:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006ec8:	7dfb      	ldrb	r3, [r7, #23]
 8006eca:	2b0d      	cmp	r3, #13
 8006ecc:	d00b      	beq.n	8006ee6 <f_gets+0x4e>
		*p++ = c;
 8006ece:	69bb      	ldr	r3, [r7, #24]
 8006ed0:	1c5a      	adds	r2, r3, #1
 8006ed2:	61ba      	str	r2, [r7, #24]
 8006ed4:	7dfa      	ldrb	r2, [r7, #23]
 8006ed6:	701a      	strb	r2, [r3, #0]
		n++;
 8006ed8:	69fb      	ldr	r3, [r7, #28]
 8006eda:	3301      	adds	r3, #1
 8006edc:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 8006ede:	7dfb      	ldrb	r3, [r7, #23]
 8006ee0:	2b0a      	cmp	r3, #10
 8006ee2:	d009      	beq.n	8006ef8 <f_gets+0x60>
 8006ee4:	e000      	b.n	8006ee8 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006ee6:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3b01      	subs	r3, #1
 8006eec:	69fa      	ldr	r2, [r7, #28]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	dbdd      	blt.n	8006eae <f_gets+0x16>
 8006ef2:	e002      	b.n	8006efa <f_gets+0x62>
		if (rc != 1) break;
 8006ef4:	bf00      	nop
 8006ef6:	e000      	b.n	8006efa <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006ef8:	bf00      	nop
	}
	*p = 0;
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	2200      	movs	r2, #0
 8006efe:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006f00:	69fb      	ldr	r3, [r7, #28]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <f_gets+0x72>
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	e000      	b.n	8006f0c <f_gets+0x74>
 8006f0a:	2300      	movs	r3, #0
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	3720      	adds	r7, #32
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	2b0a      	cmp	r3, #10
 8006f24:	d103      	bne.n	8006f2e <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 8006f26:	210d      	movs	r1, #13
 8006f28:	6878      	ldr	r0, [r7, #4]
 8006f2a:	f7ff fff3 	bl	8006f14 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	db25      	blt.n	8006f86 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	60fa      	str	r2, [r7, #12]
 8006f40:	687a      	ldr	r2, [r7, #4]
 8006f42:	4413      	add	r3, r2
 8006f44:	78fa      	ldrb	r2, [r7, #3]
 8006f46:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2b3c      	cmp	r3, #60	@ 0x3c
 8006f4c:	dd12      	ble.n	8006f74 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	6818      	ldr	r0, [r3, #0]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f103 010c 	add.w	r1, r3, #12
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	f107 0308 	add.w	r3, r7, #8
 8006f5e:	f7ff fcaa 	bl	80068b6 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8006f62:	68ba      	ldr	r2, [r7, #8]
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d101      	bne.n	8006f6e <putc_bfd+0x5a>
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e001      	b.n	8006f72 <putc_bfd+0x5e>
 8006f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f72:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	68fa      	ldr	r2, [r7, #12]
 8006f78:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	689b      	ldr	r3, [r3, #8]
 8006f7e:	1c5a      	adds	r2, r3, #1
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	e000      	b.n	8006f88 <putc_bfd+0x74>
	if (i < 0) return;
 8006f86:	bf00      	nop
}
 8006f88:	3710      	adds	r7, #16
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	db16      	blt.n	8006fcc <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f103 010c 	add.w	r1, r3, #12
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	685b      	ldr	r3, [r3, #4]
 8006fac:	461a      	mov	r2, r3
 8006fae:	f107 030c 	add.w	r3, r7, #12
 8006fb2:	f7ff fc80 	bl	80068b6 <f_write>
 8006fb6:	4603      	mov	r3, r0
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d107      	bne.n	8006fcc <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	68fa      	ldr	r2, [r7, #12]
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d102      	bne.n	8006fcc <putc_flush+0x3e>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	e001      	b.n	8006fd0 <putc_flush+0x42>
	return EOF;
 8006fcc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	3710      	adds	r7, #16
 8006fd4:	46bd      	mov	sp, r7
 8006fd6:	bd80      	pop	{r7, pc}

08006fd8 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006fd8:	b480      	push	{r7}
 8006fda:	b083      	sub	sp, #12
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	683a      	ldr	r2, [r7, #0]
 8006fe6:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	605a      	str	r2, [r3, #4]
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	685a      	ldr	r2, [r3, #4]
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	609a      	str	r2, [r3, #8]
}
 8006ff6:	bf00      	nop
 8006ff8:	370c      	adds	r7, #12
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007000:	4770      	bx	lr

08007002 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8007002:	b580      	push	{r7, lr}
 8007004:	b096      	sub	sp, #88	@ 0x58
 8007006:	af00      	add	r7, sp, #0
 8007008:	6078      	str	r0, [r7, #4]
 800700a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800700c:	f107 030c 	add.w	r3, r7, #12
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	4618      	mov	r0, r3
 8007014:	f7ff ffe0 	bl	8006fd8 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8007018:	e009      	b.n	800702e <f_puts+0x2c>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	1c5a      	adds	r2, r3, #1
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	781a      	ldrb	r2, [r3, #0]
 8007022:	f107 030c 	add.w	r3, r7, #12
 8007026:	4611      	mov	r1, r2
 8007028:	4618      	mov	r0, r3
 800702a:	f7ff ff73 	bl	8006f14 <putc_bfd>
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	781b      	ldrb	r3, [r3, #0]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d1f1      	bne.n	800701a <f_puts+0x18>
	return putc_flush(&pb);
 8007036:	f107 030c 	add.w	r3, r7, #12
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff ffa7 	bl	8006f8e <putc_flush>
 8007040:	4603      	mov	r3, r0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3758      	adds	r7, #88	@ 0x58
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800704c:	b480      	push	{r7}
 800704e:	b087      	sub	sp, #28
 8007050:	af00      	add	r7, sp, #0
 8007052:	60f8      	str	r0, [r7, #12]
 8007054:	60b9      	str	r1, [r7, #8]
 8007056:	4613      	mov	r3, r2
 8007058:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800705a:	2301      	movs	r3, #1
 800705c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800705e:	2300      	movs	r3, #0
 8007060:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007062:	4b1f      	ldr	r3, [pc, #124]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 8007064:	7a5b      	ldrb	r3, [r3, #9]
 8007066:	b2db      	uxtb	r3, r3
 8007068:	2b00      	cmp	r3, #0
 800706a:	d131      	bne.n	80070d0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800706c:	4b1c      	ldr	r3, [pc, #112]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 800706e:	7a5b      	ldrb	r3, [r3, #9]
 8007070:	b2db      	uxtb	r3, r3
 8007072:	461a      	mov	r2, r3
 8007074:	4b1a      	ldr	r3, [pc, #104]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 8007076:	2100      	movs	r1, #0
 8007078:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800707a:	4b19      	ldr	r3, [pc, #100]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 800707c:	7a5b      	ldrb	r3, [r3, #9]
 800707e:	b2db      	uxtb	r3, r3
 8007080:	4a17      	ldr	r2, [pc, #92]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 8007082:	009b      	lsls	r3, r3, #2
 8007084:	4413      	add	r3, r2
 8007086:	68fa      	ldr	r2, [r7, #12]
 8007088:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800708a:	4b15      	ldr	r3, [pc, #84]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 800708c:	7a5b      	ldrb	r3, [r3, #9]
 800708e:	b2db      	uxtb	r3, r3
 8007090:	461a      	mov	r2, r3
 8007092:	4b13      	ldr	r3, [pc, #76]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 8007094:	4413      	add	r3, r2
 8007096:	79fa      	ldrb	r2, [r7, #7]
 8007098:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800709a:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 800709c:	7a5b      	ldrb	r3, [r3, #9]
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	1c5a      	adds	r2, r3, #1
 80070a2:	b2d1      	uxtb	r1, r2
 80070a4:	4a0e      	ldr	r2, [pc, #56]	@ (80070e0 <FATFS_LinkDriverEx+0x94>)
 80070a6:	7251      	strb	r1, [r2, #9]
 80070a8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80070aa:	7dbb      	ldrb	r3, [r7, #22]
 80070ac:	3330      	adds	r3, #48	@ 0x30
 80070ae:	b2da      	uxtb	r2, r3
 80070b0:	68bb      	ldr	r3, [r7, #8]
 80070b2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80070b4:	68bb      	ldr	r3, [r7, #8]
 80070b6:	3301      	adds	r3, #1
 80070b8:	223a      	movs	r2, #58	@ 0x3a
 80070ba:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	3302      	adds	r3, #2
 80070c0:	222f      	movs	r2, #47	@ 0x2f
 80070c2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80070c4:	68bb      	ldr	r3, [r7, #8]
 80070c6:	3303      	adds	r3, #3
 80070c8:	2200      	movs	r2, #0
 80070ca:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80070cc:	2300      	movs	r3, #0
 80070ce:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80070d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	371c      	adds	r7, #28
 80070d6:	46bd      	mov	sp, r7
 80070d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070dc:	4770      	bx	lr
 80070de:	bf00      	nop
 80070e0:	20000390 	.word	0x20000390

080070e4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b082      	sub	sp, #8
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]
 80070ec:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80070ee:	2200      	movs	r2, #0
 80070f0:	6839      	ldr	r1, [r7, #0]
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7ff ffaa 	bl	800704c <FATFS_LinkDriverEx>
 80070f8:	4603      	mov	r3, r0
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3708      	adds	r7, #8
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
	...

08007104 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007104:	b480      	push	{r7}
 8007106:	b085      	sub	sp, #20
 8007108:	af00      	add	r7, sp, #0
 800710a:	4603      	mov	r3, r0
 800710c:	6039      	str	r1, [r7, #0]
 800710e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007110:	88fb      	ldrh	r3, [r7, #6]
 8007112:	2b7f      	cmp	r3, #127	@ 0x7f
 8007114:	d802      	bhi.n	800711c <ff_convert+0x18>
		c = chr;
 8007116:	88fb      	ldrh	r3, [r7, #6]
 8007118:	81fb      	strh	r3, [r7, #14]
 800711a:	e025      	b.n	8007168 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800711c:	683b      	ldr	r3, [r7, #0]
 800711e:	2b00      	cmp	r3, #0
 8007120:	d00b      	beq.n	800713a <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007122:	88fb      	ldrh	r3, [r7, #6]
 8007124:	2bff      	cmp	r3, #255	@ 0xff
 8007126:	d805      	bhi.n	8007134 <ff_convert+0x30>
 8007128:	88fb      	ldrh	r3, [r7, #6]
 800712a:	3b80      	subs	r3, #128	@ 0x80
 800712c:	4a12      	ldr	r2, [pc, #72]	@ (8007178 <ff_convert+0x74>)
 800712e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007132:	e000      	b.n	8007136 <ff_convert+0x32>
 8007134:	2300      	movs	r3, #0
 8007136:	81fb      	strh	r3, [r7, #14]
 8007138:	e016      	b.n	8007168 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 800713a:	2300      	movs	r3, #0
 800713c:	81fb      	strh	r3, [r7, #14]
 800713e:	e009      	b.n	8007154 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007140:	89fb      	ldrh	r3, [r7, #14]
 8007142:	4a0d      	ldr	r2, [pc, #52]	@ (8007178 <ff_convert+0x74>)
 8007144:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007148:	88fa      	ldrh	r2, [r7, #6]
 800714a:	429a      	cmp	r2, r3
 800714c:	d006      	beq.n	800715c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 800714e:	89fb      	ldrh	r3, [r7, #14]
 8007150:	3301      	adds	r3, #1
 8007152:	81fb      	strh	r3, [r7, #14]
 8007154:	89fb      	ldrh	r3, [r7, #14]
 8007156:	2b7f      	cmp	r3, #127	@ 0x7f
 8007158:	d9f2      	bls.n	8007140 <ff_convert+0x3c>
 800715a:	e000      	b.n	800715e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 800715c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 800715e:	89fb      	ldrh	r3, [r7, #14]
 8007160:	3380      	adds	r3, #128	@ 0x80
 8007162:	b29b      	uxth	r3, r3
 8007164:	b2db      	uxtb	r3, r3
 8007166:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007168:	89fb      	ldrh	r3, [r7, #14]
}
 800716a:	4618      	mov	r0, r3
 800716c:	3714      	adds	r7, #20
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	080083ec 	.word	0x080083ec

0800717c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 800717c:	b480      	push	{r7}
 800717e:	b087      	sub	sp, #28
 8007180:	af00      	add	r7, sp, #0
 8007182:	4603      	mov	r3, r0
 8007184:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8007186:	88fb      	ldrh	r3, [r7, #6]
 8007188:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800718c:	d201      	bcs.n	8007192 <ff_wtoupper+0x16>
 800718e:	4b3e      	ldr	r3, [pc, #248]	@ (8007288 <ff_wtoupper+0x10c>)
 8007190:	e000      	b.n	8007194 <ff_wtoupper+0x18>
 8007192:	4b3e      	ldr	r3, [pc, #248]	@ (800728c <ff_wtoupper+0x110>)
 8007194:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8007196:	697b      	ldr	r3, [r7, #20]
 8007198:	1c9a      	adds	r2, r3, #2
 800719a:	617a      	str	r2, [r7, #20]
 800719c:	881b      	ldrh	r3, [r3, #0]
 800719e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 80071a0:	8a7b      	ldrh	r3, [r7, #18]
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d068      	beq.n	8007278 <ff_wtoupper+0xfc>
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	8a7b      	ldrh	r3, [r7, #18]
 80071aa:	429a      	cmp	r2, r3
 80071ac:	d364      	bcc.n	8007278 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	1c9a      	adds	r2, r3, #2
 80071b2:	617a      	str	r2, [r7, #20]
 80071b4:	881b      	ldrh	r3, [r3, #0]
 80071b6:	823b      	strh	r3, [r7, #16]
 80071b8:	8a3b      	ldrh	r3, [r7, #16]
 80071ba:	0a1b      	lsrs	r3, r3, #8
 80071bc:	81fb      	strh	r3, [r7, #14]
 80071be:	8a3b      	ldrh	r3, [r7, #16]
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 80071c4:	88fa      	ldrh	r2, [r7, #6]
 80071c6:	8a79      	ldrh	r1, [r7, #18]
 80071c8:	8a3b      	ldrh	r3, [r7, #16]
 80071ca:	440b      	add	r3, r1
 80071cc:	429a      	cmp	r2, r3
 80071ce:	da49      	bge.n	8007264 <ff_wtoupper+0xe8>
			switch (cmd) {
 80071d0:	89fb      	ldrh	r3, [r7, #14]
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d84f      	bhi.n	8007276 <ff_wtoupper+0xfa>
 80071d6:	a201      	add	r2, pc, #4	@ (adr r2, 80071dc <ff_wtoupper+0x60>)
 80071d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071dc:	08007201 	.word	0x08007201
 80071e0:	08007213 	.word	0x08007213
 80071e4:	08007229 	.word	0x08007229
 80071e8:	08007231 	.word	0x08007231
 80071ec:	08007239 	.word	0x08007239
 80071f0:	08007241 	.word	0x08007241
 80071f4:	08007249 	.word	0x08007249
 80071f8:	08007251 	.word	0x08007251
 80071fc:	08007259 	.word	0x08007259
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8007200:	88fa      	ldrh	r2, [r7, #6]
 8007202:	8a7b      	ldrh	r3, [r7, #18]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	005b      	lsls	r3, r3, #1
 8007208:	697a      	ldr	r2, [r7, #20]
 800720a:	4413      	add	r3, r2
 800720c:	881b      	ldrh	r3, [r3, #0]
 800720e:	80fb      	strh	r3, [r7, #6]
 8007210:	e027      	b.n	8007262 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8007212:	88fa      	ldrh	r2, [r7, #6]
 8007214:	8a7b      	ldrh	r3, [r7, #18]
 8007216:	1ad3      	subs	r3, r2, r3
 8007218:	b29b      	uxth	r3, r3
 800721a:	f003 0301 	and.w	r3, r3, #1
 800721e:	b29b      	uxth	r3, r3
 8007220:	88fa      	ldrh	r2, [r7, #6]
 8007222:	1ad3      	subs	r3, r2, r3
 8007224:	80fb      	strh	r3, [r7, #6]
 8007226:	e01c      	b.n	8007262 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8007228:	88fb      	ldrh	r3, [r7, #6]
 800722a:	3b10      	subs	r3, #16
 800722c:	80fb      	strh	r3, [r7, #6]
 800722e:	e018      	b.n	8007262 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8007230:	88fb      	ldrh	r3, [r7, #6]
 8007232:	3b20      	subs	r3, #32
 8007234:	80fb      	strh	r3, [r7, #6]
 8007236:	e014      	b.n	8007262 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8007238:	88fb      	ldrh	r3, [r7, #6]
 800723a:	3b30      	subs	r3, #48	@ 0x30
 800723c:	80fb      	strh	r3, [r7, #6]
 800723e:	e010      	b.n	8007262 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8007240:	88fb      	ldrh	r3, [r7, #6]
 8007242:	3b1a      	subs	r3, #26
 8007244:	80fb      	strh	r3, [r7, #6]
 8007246:	e00c      	b.n	8007262 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8007248:	88fb      	ldrh	r3, [r7, #6]
 800724a:	3308      	adds	r3, #8
 800724c:	80fb      	strh	r3, [r7, #6]
 800724e:	e008      	b.n	8007262 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8007250:	88fb      	ldrh	r3, [r7, #6]
 8007252:	3b50      	subs	r3, #80	@ 0x50
 8007254:	80fb      	strh	r3, [r7, #6]
 8007256:	e004      	b.n	8007262 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8007258:	88fb      	ldrh	r3, [r7, #6]
 800725a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 800725e:	80fb      	strh	r3, [r7, #6]
 8007260:	bf00      	nop
			}
			break;
 8007262:	e008      	b.n	8007276 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8007264:	89fb      	ldrh	r3, [r7, #14]
 8007266:	2b00      	cmp	r3, #0
 8007268:	d195      	bne.n	8007196 <ff_wtoupper+0x1a>
 800726a:	8a3b      	ldrh	r3, [r7, #16]
 800726c:	005b      	lsls	r3, r3, #1
 800726e:	697a      	ldr	r2, [r7, #20]
 8007270:	4413      	add	r3, r2
 8007272:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8007274:	e78f      	b.n	8007196 <ff_wtoupper+0x1a>
			break;
 8007276:	bf00      	nop
	}

	return chr;
 8007278:	88fb      	ldrh	r3, [r7, #6]
}
 800727a:	4618      	mov	r0, r3
 800727c:	371c      	adds	r7, #28
 800727e:	46bd      	mov	sp, r7
 8007280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007284:	4770      	bx	lr
 8007286:	bf00      	nop
 8007288:	080084ec 	.word	0x080084ec
 800728c:	080086e0 	.word	0x080086e0

08007290 <std>:
 8007290:	2300      	movs	r3, #0
 8007292:	b510      	push	{r4, lr}
 8007294:	4604      	mov	r4, r0
 8007296:	e9c0 3300 	strd	r3, r3, [r0]
 800729a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800729e:	6083      	str	r3, [r0, #8]
 80072a0:	8181      	strh	r1, [r0, #12]
 80072a2:	6643      	str	r3, [r0, #100]	@ 0x64
 80072a4:	81c2      	strh	r2, [r0, #14]
 80072a6:	6183      	str	r3, [r0, #24]
 80072a8:	4619      	mov	r1, r3
 80072aa:	2208      	movs	r2, #8
 80072ac:	305c      	adds	r0, #92	@ 0x5c
 80072ae:	f000 f9f9 	bl	80076a4 <memset>
 80072b2:	4b0d      	ldr	r3, [pc, #52]	@ (80072e8 <std+0x58>)
 80072b4:	6263      	str	r3, [r4, #36]	@ 0x24
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <std+0x5c>)
 80072b8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80072ba:	4b0d      	ldr	r3, [pc, #52]	@ (80072f0 <std+0x60>)
 80072bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80072be:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <std+0x64>)
 80072c0:	6323      	str	r3, [r4, #48]	@ 0x30
 80072c2:	4b0d      	ldr	r3, [pc, #52]	@ (80072f8 <std+0x68>)
 80072c4:	6224      	str	r4, [r4, #32]
 80072c6:	429c      	cmp	r4, r3
 80072c8:	d006      	beq.n	80072d8 <std+0x48>
 80072ca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80072ce:	4294      	cmp	r4, r2
 80072d0:	d002      	beq.n	80072d8 <std+0x48>
 80072d2:	33d0      	adds	r3, #208	@ 0xd0
 80072d4:	429c      	cmp	r4, r3
 80072d6:	d105      	bne.n	80072e4 <std+0x54>
 80072d8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80072dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072e0:	f000 ba58 	b.w	8007794 <__retarget_lock_init_recursive>
 80072e4:	bd10      	pop	{r4, pc}
 80072e6:	bf00      	nop
 80072e8:	080074f5 	.word	0x080074f5
 80072ec:	08007517 	.word	0x08007517
 80072f0:	0800754f 	.word	0x0800754f
 80072f4:	08007573 	.word	0x08007573
 80072f8:	2000039c 	.word	0x2000039c

080072fc <stdio_exit_handler>:
 80072fc:	4a02      	ldr	r2, [pc, #8]	@ (8007308 <stdio_exit_handler+0xc>)
 80072fe:	4903      	ldr	r1, [pc, #12]	@ (800730c <stdio_exit_handler+0x10>)
 8007300:	4803      	ldr	r0, [pc, #12]	@ (8007310 <stdio_exit_handler+0x14>)
 8007302:	f000 b869 	b.w	80073d8 <_fwalk_sglue>
 8007306:	bf00      	nop
 8007308:	20000024 	.word	0x20000024
 800730c:	08008035 	.word	0x08008035
 8007310:	20000034 	.word	0x20000034

08007314 <cleanup_stdio>:
 8007314:	6841      	ldr	r1, [r0, #4]
 8007316:	4b0c      	ldr	r3, [pc, #48]	@ (8007348 <cleanup_stdio+0x34>)
 8007318:	4299      	cmp	r1, r3
 800731a:	b510      	push	{r4, lr}
 800731c:	4604      	mov	r4, r0
 800731e:	d001      	beq.n	8007324 <cleanup_stdio+0x10>
 8007320:	f000 fe88 	bl	8008034 <_fflush_r>
 8007324:	68a1      	ldr	r1, [r4, #8]
 8007326:	4b09      	ldr	r3, [pc, #36]	@ (800734c <cleanup_stdio+0x38>)
 8007328:	4299      	cmp	r1, r3
 800732a:	d002      	beq.n	8007332 <cleanup_stdio+0x1e>
 800732c:	4620      	mov	r0, r4
 800732e:	f000 fe81 	bl	8008034 <_fflush_r>
 8007332:	68e1      	ldr	r1, [r4, #12]
 8007334:	4b06      	ldr	r3, [pc, #24]	@ (8007350 <cleanup_stdio+0x3c>)
 8007336:	4299      	cmp	r1, r3
 8007338:	d004      	beq.n	8007344 <cleanup_stdio+0x30>
 800733a:	4620      	mov	r0, r4
 800733c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007340:	f000 be78 	b.w	8008034 <_fflush_r>
 8007344:	bd10      	pop	{r4, pc}
 8007346:	bf00      	nop
 8007348:	2000039c 	.word	0x2000039c
 800734c:	20000404 	.word	0x20000404
 8007350:	2000046c 	.word	0x2000046c

08007354 <global_stdio_init.part.0>:
 8007354:	b510      	push	{r4, lr}
 8007356:	4b0b      	ldr	r3, [pc, #44]	@ (8007384 <global_stdio_init.part.0+0x30>)
 8007358:	4c0b      	ldr	r4, [pc, #44]	@ (8007388 <global_stdio_init.part.0+0x34>)
 800735a:	4a0c      	ldr	r2, [pc, #48]	@ (800738c <global_stdio_init.part.0+0x38>)
 800735c:	601a      	str	r2, [r3, #0]
 800735e:	4620      	mov	r0, r4
 8007360:	2200      	movs	r2, #0
 8007362:	2104      	movs	r1, #4
 8007364:	f7ff ff94 	bl	8007290 <std>
 8007368:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800736c:	2201      	movs	r2, #1
 800736e:	2109      	movs	r1, #9
 8007370:	f7ff ff8e 	bl	8007290 <std>
 8007374:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007378:	2202      	movs	r2, #2
 800737a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800737e:	2112      	movs	r1, #18
 8007380:	f7ff bf86 	b.w	8007290 <std>
 8007384:	200004d4 	.word	0x200004d4
 8007388:	2000039c 	.word	0x2000039c
 800738c:	080072fd 	.word	0x080072fd

08007390 <__sfp_lock_acquire>:
 8007390:	4801      	ldr	r0, [pc, #4]	@ (8007398 <__sfp_lock_acquire+0x8>)
 8007392:	f000 ba00 	b.w	8007796 <__retarget_lock_acquire_recursive>
 8007396:	bf00      	nop
 8007398:	200004dd 	.word	0x200004dd

0800739c <__sfp_lock_release>:
 800739c:	4801      	ldr	r0, [pc, #4]	@ (80073a4 <__sfp_lock_release+0x8>)
 800739e:	f000 b9fb 	b.w	8007798 <__retarget_lock_release_recursive>
 80073a2:	bf00      	nop
 80073a4:	200004dd 	.word	0x200004dd

080073a8 <__sinit>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	4604      	mov	r4, r0
 80073ac:	f7ff fff0 	bl	8007390 <__sfp_lock_acquire>
 80073b0:	6a23      	ldr	r3, [r4, #32]
 80073b2:	b11b      	cbz	r3, 80073bc <__sinit+0x14>
 80073b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073b8:	f7ff bff0 	b.w	800739c <__sfp_lock_release>
 80073bc:	4b04      	ldr	r3, [pc, #16]	@ (80073d0 <__sinit+0x28>)
 80073be:	6223      	str	r3, [r4, #32]
 80073c0:	4b04      	ldr	r3, [pc, #16]	@ (80073d4 <__sinit+0x2c>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d1f5      	bne.n	80073b4 <__sinit+0xc>
 80073c8:	f7ff ffc4 	bl	8007354 <global_stdio_init.part.0>
 80073cc:	e7f2      	b.n	80073b4 <__sinit+0xc>
 80073ce:	bf00      	nop
 80073d0:	08007315 	.word	0x08007315
 80073d4:	200004d4 	.word	0x200004d4

080073d8 <_fwalk_sglue>:
 80073d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073dc:	4607      	mov	r7, r0
 80073de:	4688      	mov	r8, r1
 80073e0:	4614      	mov	r4, r2
 80073e2:	2600      	movs	r6, #0
 80073e4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80073e8:	f1b9 0901 	subs.w	r9, r9, #1
 80073ec:	d505      	bpl.n	80073fa <_fwalk_sglue+0x22>
 80073ee:	6824      	ldr	r4, [r4, #0]
 80073f0:	2c00      	cmp	r4, #0
 80073f2:	d1f7      	bne.n	80073e4 <_fwalk_sglue+0xc>
 80073f4:	4630      	mov	r0, r6
 80073f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80073fa:	89ab      	ldrh	r3, [r5, #12]
 80073fc:	2b01      	cmp	r3, #1
 80073fe:	d907      	bls.n	8007410 <_fwalk_sglue+0x38>
 8007400:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007404:	3301      	adds	r3, #1
 8007406:	d003      	beq.n	8007410 <_fwalk_sglue+0x38>
 8007408:	4629      	mov	r1, r5
 800740a:	4638      	mov	r0, r7
 800740c:	47c0      	blx	r8
 800740e:	4306      	orrs	r6, r0
 8007410:	3568      	adds	r5, #104	@ 0x68
 8007412:	e7e9      	b.n	80073e8 <_fwalk_sglue+0x10>

08007414 <iprintf>:
 8007414:	b40f      	push	{r0, r1, r2, r3}
 8007416:	b507      	push	{r0, r1, r2, lr}
 8007418:	4906      	ldr	r1, [pc, #24]	@ (8007434 <iprintf+0x20>)
 800741a:	ab04      	add	r3, sp, #16
 800741c:	6808      	ldr	r0, [r1, #0]
 800741e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007422:	6881      	ldr	r1, [r0, #8]
 8007424:	9301      	str	r3, [sp, #4]
 8007426:	f000 fadb 	bl	80079e0 <_vfiprintf_r>
 800742a:	b003      	add	sp, #12
 800742c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007430:	b004      	add	sp, #16
 8007432:	4770      	bx	lr
 8007434:	20000030 	.word	0x20000030

08007438 <_puts_r>:
 8007438:	6a03      	ldr	r3, [r0, #32]
 800743a:	b570      	push	{r4, r5, r6, lr}
 800743c:	6884      	ldr	r4, [r0, #8]
 800743e:	4605      	mov	r5, r0
 8007440:	460e      	mov	r6, r1
 8007442:	b90b      	cbnz	r3, 8007448 <_puts_r+0x10>
 8007444:	f7ff ffb0 	bl	80073a8 <__sinit>
 8007448:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800744a:	07db      	lsls	r3, r3, #31
 800744c:	d405      	bmi.n	800745a <_puts_r+0x22>
 800744e:	89a3      	ldrh	r3, [r4, #12]
 8007450:	0598      	lsls	r0, r3, #22
 8007452:	d402      	bmi.n	800745a <_puts_r+0x22>
 8007454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007456:	f000 f99e 	bl	8007796 <__retarget_lock_acquire_recursive>
 800745a:	89a3      	ldrh	r3, [r4, #12]
 800745c:	0719      	lsls	r1, r3, #28
 800745e:	d502      	bpl.n	8007466 <_puts_r+0x2e>
 8007460:	6923      	ldr	r3, [r4, #16]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d135      	bne.n	80074d2 <_puts_r+0x9a>
 8007466:	4621      	mov	r1, r4
 8007468:	4628      	mov	r0, r5
 800746a:	f000 f8c5 	bl	80075f8 <__swsetup_r>
 800746e:	b380      	cbz	r0, 80074d2 <_puts_r+0x9a>
 8007470:	f04f 35ff 	mov.w	r5, #4294967295
 8007474:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007476:	07da      	lsls	r2, r3, #31
 8007478:	d405      	bmi.n	8007486 <_puts_r+0x4e>
 800747a:	89a3      	ldrh	r3, [r4, #12]
 800747c:	059b      	lsls	r3, r3, #22
 800747e:	d402      	bmi.n	8007486 <_puts_r+0x4e>
 8007480:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007482:	f000 f989 	bl	8007798 <__retarget_lock_release_recursive>
 8007486:	4628      	mov	r0, r5
 8007488:	bd70      	pop	{r4, r5, r6, pc}
 800748a:	2b00      	cmp	r3, #0
 800748c:	da04      	bge.n	8007498 <_puts_r+0x60>
 800748e:	69a2      	ldr	r2, [r4, #24]
 8007490:	429a      	cmp	r2, r3
 8007492:	dc17      	bgt.n	80074c4 <_puts_r+0x8c>
 8007494:	290a      	cmp	r1, #10
 8007496:	d015      	beq.n	80074c4 <_puts_r+0x8c>
 8007498:	6823      	ldr	r3, [r4, #0]
 800749a:	1c5a      	adds	r2, r3, #1
 800749c:	6022      	str	r2, [r4, #0]
 800749e:	7019      	strb	r1, [r3, #0]
 80074a0:	68a3      	ldr	r3, [r4, #8]
 80074a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80074a6:	3b01      	subs	r3, #1
 80074a8:	60a3      	str	r3, [r4, #8]
 80074aa:	2900      	cmp	r1, #0
 80074ac:	d1ed      	bne.n	800748a <_puts_r+0x52>
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	da11      	bge.n	80074d6 <_puts_r+0x9e>
 80074b2:	4622      	mov	r2, r4
 80074b4:	210a      	movs	r1, #10
 80074b6:	4628      	mov	r0, r5
 80074b8:	f000 f85f 	bl	800757a <__swbuf_r>
 80074bc:	3001      	adds	r0, #1
 80074be:	d0d7      	beq.n	8007470 <_puts_r+0x38>
 80074c0:	250a      	movs	r5, #10
 80074c2:	e7d7      	b.n	8007474 <_puts_r+0x3c>
 80074c4:	4622      	mov	r2, r4
 80074c6:	4628      	mov	r0, r5
 80074c8:	f000 f857 	bl	800757a <__swbuf_r>
 80074cc:	3001      	adds	r0, #1
 80074ce:	d1e7      	bne.n	80074a0 <_puts_r+0x68>
 80074d0:	e7ce      	b.n	8007470 <_puts_r+0x38>
 80074d2:	3e01      	subs	r6, #1
 80074d4:	e7e4      	b.n	80074a0 <_puts_r+0x68>
 80074d6:	6823      	ldr	r3, [r4, #0]
 80074d8:	1c5a      	adds	r2, r3, #1
 80074da:	6022      	str	r2, [r4, #0]
 80074dc:	220a      	movs	r2, #10
 80074de:	701a      	strb	r2, [r3, #0]
 80074e0:	e7ee      	b.n	80074c0 <_puts_r+0x88>
	...

080074e4 <puts>:
 80074e4:	4b02      	ldr	r3, [pc, #8]	@ (80074f0 <puts+0xc>)
 80074e6:	4601      	mov	r1, r0
 80074e8:	6818      	ldr	r0, [r3, #0]
 80074ea:	f7ff bfa5 	b.w	8007438 <_puts_r>
 80074ee:	bf00      	nop
 80074f0:	20000030 	.word	0x20000030

080074f4 <__sread>:
 80074f4:	b510      	push	{r4, lr}
 80074f6:	460c      	mov	r4, r1
 80074f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074fc:	f000 f8fc 	bl	80076f8 <_read_r>
 8007500:	2800      	cmp	r0, #0
 8007502:	bfab      	itete	ge
 8007504:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007506:	89a3      	ldrhlt	r3, [r4, #12]
 8007508:	181b      	addge	r3, r3, r0
 800750a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800750e:	bfac      	ite	ge
 8007510:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007512:	81a3      	strhlt	r3, [r4, #12]
 8007514:	bd10      	pop	{r4, pc}

08007516 <__swrite>:
 8007516:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751a:	461f      	mov	r7, r3
 800751c:	898b      	ldrh	r3, [r1, #12]
 800751e:	05db      	lsls	r3, r3, #23
 8007520:	4605      	mov	r5, r0
 8007522:	460c      	mov	r4, r1
 8007524:	4616      	mov	r6, r2
 8007526:	d505      	bpl.n	8007534 <__swrite+0x1e>
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	2302      	movs	r3, #2
 800752e:	2200      	movs	r2, #0
 8007530:	f000 f8d0 	bl	80076d4 <_lseek_r>
 8007534:	89a3      	ldrh	r3, [r4, #12]
 8007536:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800753a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800753e:	81a3      	strh	r3, [r4, #12]
 8007540:	4632      	mov	r2, r6
 8007542:	463b      	mov	r3, r7
 8007544:	4628      	mov	r0, r5
 8007546:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800754a:	f000 b8e7 	b.w	800771c <_write_r>

0800754e <__sseek>:
 800754e:	b510      	push	{r4, lr}
 8007550:	460c      	mov	r4, r1
 8007552:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007556:	f000 f8bd 	bl	80076d4 <_lseek_r>
 800755a:	1c43      	adds	r3, r0, #1
 800755c:	89a3      	ldrh	r3, [r4, #12]
 800755e:	bf15      	itete	ne
 8007560:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007562:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007566:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800756a:	81a3      	strheq	r3, [r4, #12]
 800756c:	bf18      	it	ne
 800756e:	81a3      	strhne	r3, [r4, #12]
 8007570:	bd10      	pop	{r4, pc}

08007572 <__sclose>:
 8007572:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007576:	f000 b89d 	b.w	80076b4 <_close_r>

0800757a <__swbuf_r>:
 800757a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757c:	460e      	mov	r6, r1
 800757e:	4614      	mov	r4, r2
 8007580:	4605      	mov	r5, r0
 8007582:	b118      	cbz	r0, 800758c <__swbuf_r+0x12>
 8007584:	6a03      	ldr	r3, [r0, #32]
 8007586:	b90b      	cbnz	r3, 800758c <__swbuf_r+0x12>
 8007588:	f7ff ff0e 	bl	80073a8 <__sinit>
 800758c:	69a3      	ldr	r3, [r4, #24]
 800758e:	60a3      	str	r3, [r4, #8]
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	071a      	lsls	r2, r3, #28
 8007594:	d501      	bpl.n	800759a <__swbuf_r+0x20>
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	b943      	cbnz	r3, 80075ac <__swbuf_r+0x32>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f82b 	bl	80075f8 <__swsetup_r>
 80075a2:	b118      	cbz	r0, 80075ac <__swbuf_r+0x32>
 80075a4:	f04f 37ff 	mov.w	r7, #4294967295
 80075a8:	4638      	mov	r0, r7
 80075aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ac:	6823      	ldr	r3, [r4, #0]
 80075ae:	6922      	ldr	r2, [r4, #16]
 80075b0:	1a98      	subs	r0, r3, r2
 80075b2:	6963      	ldr	r3, [r4, #20]
 80075b4:	b2f6      	uxtb	r6, r6
 80075b6:	4283      	cmp	r3, r0
 80075b8:	4637      	mov	r7, r6
 80075ba:	dc05      	bgt.n	80075c8 <__swbuf_r+0x4e>
 80075bc:	4621      	mov	r1, r4
 80075be:	4628      	mov	r0, r5
 80075c0:	f000 fd38 	bl	8008034 <_fflush_r>
 80075c4:	2800      	cmp	r0, #0
 80075c6:	d1ed      	bne.n	80075a4 <__swbuf_r+0x2a>
 80075c8:	68a3      	ldr	r3, [r4, #8]
 80075ca:	3b01      	subs	r3, #1
 80075cc:	60a3      	str	r3, [r4, #8]
 80075ce:	6823      	ldr	r3, [r4, #0]
 80075d0:	1c5a      	adds	r2, r3, #1
 80075d2:	6022      	str	r2, [r4, #0]
 80075d4:	701e      	strb	r6, [r3, #0]
 80075d6:	6962      	ldr	r2, [r4, #20]
 80075d8:	1c43      	adds	r3, r0, #1
 80075da:	429a      	cmp	r2, r3
 80075dc:	d004      	beq.n	80075e8 <__swbuf_r+0x6e>
 80075de:	89a3      	ldrh	r3, [r4, #12]
 80075e0:	07db      	lsls	r3, r3, #31
 80075e2:	d5e1      	bpl.n	80075a8 <__swbuf_r+0x2e>
 80075e4:	2e0a      	cmp	r6, #10
 80075e6:	d1df      	bne.n	80075a8 <__swbuf_r+0x2e>
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 fd22 	bl	8008034 <_fflush_r>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	d0d9      	beq.n	80075a8 <__swbuf_r+0x2e>
 80075f4:	e7d6      	b.n	80075a4 <__swbuf_r+0x2a>
	...

080075f8 <__swsetup_r>:
 80075f8:	b538      	push	{r3, r4, r5, lr}
 80075fa:	4b29      	ldr	r3, [pc, #164]	@ (80076a0 <__swsetup_r+0xa8>)
 80075fc:	4605      	mov	r5, r0
 80075fe:	6818      	ldr	r0, [r3, #0]
 8007600:	460c      	mov	r4, r1
 8007602:	b118      	cbz	r0, 800760c <__swsetup_r+0x14>
 8007604:	6a03      	ldr	r3, [r0, #32]
 8007606:	b90b      	cbnz	r3, 800760c <__swsetup_r+0x14>
 8007608:	f7ff fece 	bl	80073a8 <__sinit>
 800760c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007610:	0719      	lsls	r1, r3, #28
 8007612:	d422      	bmi.n	800765a <__swsetup_r+0x62>
 8007614:	06da      	lsls	r2, r3, #27
 8007616:	d407      	bmi.n	8007628 <__swsetup_r+0x30>
 8007618:	2209      	movs	r2, #9
 800761a:	602a      	str	r2, [r5, #0]
 800761c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007620:	81a3      	strh	r3, [r4, #12]
 8007622:	f04f 30ff 	mov.w	r0, #4294967295
 8007626:	e033      	b.n	8007690 <__swsetup_r+0x98>
 8007628:	0758      	lsls	r0, r3, #29
 800762a:	d512      	bpl.n	8007652 <__swsetup_r+0x5a>
 800762c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800762e:	b141      	cbz	r1, 8007642 <__swsetup_r+0x4a>
 8007630:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007634:	4299      	cmp	r1, r3
 8007636:	d002      	beq.n	800763e <__swsetup_r+0x46>
 8007638:	4628      	mov	r0, r5
 800763a:	f000 f8af 	bl	800779c <_free_r>
 800763e:	2300      	movs	r3, #0
 8007640:	6363      	str	r3, [r4, #52]	@ 0x34
 8007642:	89a3      	ldrh	r3, [r4, #12]
 8007644:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007648:	81a3      	strh	r3, [r4, #12]
 800764a:	2300      	movs	r3, #0
 800764c:	6063      	str	r3, [r4, #4]
 800764e:	6923      	ldr	r3, [r4, #16]
 8007650:	6023      	str	r3, [r4, #0]
 8007652:	89a3      	ldrh	r3, [r4, #12]
 8007654:	f043 0308 	orr.w	r3, r3, #8
 8007658:	81a3      	strh	r3, [r4, #12]
 800765a:	6923      	ldr	r3, [r4, #16]
 800765c:	b94b      	cbnz	r3, 8007672 <__swsetup_r+0x7a>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007664:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007668:	d003      	beq.n	8007672 <__swsetup_r+0x7a>
 800766a:	4621      	mov	r1, r4
 800766c:	4628      	mov	r0, r5
 800766e:	f000 fd2f 	bl	80080d0 <__smakebuf_r>
 8007672:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007676:	f013 0201 	ands.w	r2, r3, #1
 800767a:	d00a      	beq.n	8007692 <__swsetup_r+0x9a>
 800767c:	2200      	movs	r2, #0
 800767e:	60a2      	str	r2, [r4, #8]
 8007680:	6962      	ldr	r2, [r4, #20]
 8007682:	4252      	negs	r2, r2
 8007684:	61a2      	str	r2, [r4, #24]
 8007686:	6922      	ldr	r2, [r4, #16]
 8007688:	b942      	cbnz	r2, 800769c <__swsetup_r+0xa4>
 800768a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800768e:	d1c5      	bne.n	800761c <__swsetup_r+0x24>
 8007690:	bd38      	pop	{r3, r4, r5, pc}
 8007692:	0799      	lsls	r1, r3, #30
 8007694:	bf58      	it	pl
 8007696:	6962      	ldrpl	r2, [r4, #20]
 8007698:	60a2      	str	r2, [r4, #8]
 800769a:	e7f4      	b.n	8007686 <__swsetup_r+0x8e>
 800769c:	2000      	movs	r0, #0
 800769e:	e7f7      	b.n	8007690 <__swsetup_r+0x98>
 80076a0:	20000030 	.word	0x20000030

080076a4 <memset>:
 80076a4:	4402      	add	r2, r0
 80076a6:	4603      	mov	r3, r0
 80076a8:	4293      	cmp	r3, r2
 80076aa:	d100      	bne.n	80076ae <memset+0xa>
 80076ac:	4770      	bx	lr
 80076ae:	f803 1b01 	strb.w	r1, [r3], #1
 80076b2:	e7f9      	b.n	80076a8 <memset+0x4>

080076b4 <_close_r>:
 80076b4:	b538      	push	{r3, r4, r5, lr}
 80076b6:	4d06      	ldr	r5, [pc, #24]	@ (80076d0 <_close_r+0x1c>)
 80076b8:	2300      	movs	r3, #0
 80076ba:	4604      	mov	r4, r0
 80076bc:	4608      	mov	r0, r1
 80076be:	602b      	str	r3, [r5, #0]
 80076c0:	f7fa fbf7 	bl	8001eb2 <_close>
 80076c4:	1c43      	adds	r3, r0, #1
 80076c6:	d102      	bne.n	80076ce <_close_r+0x1a>
 80076c8:	682b      	ldr	r3, [r5, #0]
 80076ca:	b103      	cbz	r3, 80076ce <_close_r+0x1a>
 80076cc:	6023      	str	r3, [r4, #0]
 80076ce:	bd38      	pop	{r3, r4, r5, pc}
 80076d0:	200004d8 	.word	0x200004d8

080076d4 <_lseek_r>:
 80076d4:	b538      	push	{r3, r4, r5, lr}
 80076d6:	4d07      	ldr	r5, [pc, #28]	@ (80076f4 <_lseek_r+0x20>)
 80076d8:	4604      	mov	r4, r0
 80076da:	4608      	mov	r0, r1
 80076dc:	4611      	mov	r1, r2
 80076de:	2200      	movs	r2, #0
 80076e0:	602a      	str	r2, [r5, #0]
 80076e2:	461a      	mov	r2, r3
 80076e4:	f7fa fc0c 	bl	8001f00 <_lseek>
 80076e8:	1c43      	adds	r3, r0, #1
 80076ea:	d102      	bne.n	80076f2 <_lseek_r+0x1e>
 80076ec:	682b      	ldr	r3, [r5, #0]
 80076ee:	b103      	cbz	r3, 80076f2 <_lseek_r+0x1e>
 80076f0:	6023      	str	r3, [r4, #0]
 80076f2:	bd38      	pop	{r3, r4, r5, pc}
 80076f4:	200004d8 	.word	0x200004d8

080076f8 <_read_r>:
 80076f8:	b538      	push	{r3, r4, r5, lr}
 80076fa:	4d07      	ldr	r5, [pc, #28]	@ (8007718 <_read_r+0x20>)
 80076fc:	4604      	mov	r4, r0
 80076fe:	4608      	mov	r0, r1
 8007700:	4611      	mov	r1, r2
 8007702:	2200      	movs	r2, #0
 8007704:	602a      	str	r2, [r5, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	f7fa fb9a 	bl	8001e40 <_read>
 800770c:	1c43      	adds	r3, r0, #1
 800770e:	d102      	bne.n	8007716 <_read_r+0x1e>
 8007710:	682b      	ldr	r3, [r5, #0]
 8007712:	b103      	cbz	r3, 8007716 <_read_r+0x1e>
 8007714:	6023      	str	r3, [r4, #0]
 8007716:	bd38      	pop	{r3, r4, r5, pc}
 8007718:	200004d8 	.word	0x200004d8

0800771c <_write_r>:
 800771c:	b538      	push	{r3, r4, r5, lr}
 800771e:	4d07      	ldr	r5, [pc, #28]	@ (800773c <_write_r+0x20>)
 8007720:	4604      	mov	r4, r0
 8007722:	4608      	mov	r0, r1
 8007724:	4611      	mov	r1, r2
 8007726:	2200      	movs	r2, #0
 8007728:	602a      	str	r2, [r5, #0]
 800772a:	461a      	mov	r2, r3
 800772c:	f7fa fba5 	bl	8001e7a <_write>
 8007730:	1c43      	adds	r3, r0, #1
 8007732:	d102      	bne.n	800773a <_write_r+0x1e>
 8007734:	682b      	ldr	r3, [r5, #0]
 8007736:	b103      	cbz	r3, 800773a <_write_r+0x1e>
 8007738:	6023      	str	r3, [r4, #0]
 800773a:	bd38      	pop	{r3, r4, r5, pc}
 800773c:	200004d8 	.word	0x200004d8

08007740 <__errno>:
 8007740:	4b01      	ldr	r3, [pc, #4]	@ (8007748 <__errno+0x8>)
 8007742:	6818      	ldr	r0, [r3, #0]
 8007744:	4770      	bx	lr
 8007746:	bf00      	nop
 8007748:	20000030 	.word	0x20000030

0800774c <__libc_init_array>:
 800774c:	b570      	push	{r4, r5, r6, lr}
 800774e:	4d0d      	ldr	r5, [pc, #52]	@ (8007784 <__libc_init_array+0x38>)
 8007750:	4c0d      	ldr	r4, [pc, #52]	@ (8007788 <__libc_init_array+0x3c>)
 8007752:	1b64      	subs	r4, r4, r5
 8007754:	10a4      	asrs	r4, r4, #2
 8007756:	2600      	movs	r6, #0
 8007758:	42a6      	cmp	r6, r4
 800775a:	d109      	bne.n	8007770 <__libc_init_array+0x24>
 800775c:	4d0b      	ldr	r5, [pc, #44]	@ (800778c <__libc_init_array+0x40>)
 800775e:	4c0c      	ldr	r4, [pc, #48]	@ (8007790 <__libc_init_array+0x44>)
 8007760:	f000 fd24 	bl	80081ac <_init>
 8007764:	1b64      	subs	r4, r4, r5
 8007766:	10a4      	asrs	r4, r4, #2
 8007768:	2600      	movs	r6, #0
 800776a:	42a6      	cmp	r6, r4
 800776c:	d105      	bne.n	800777a <__libc_init_array+0x2e>
 800776e:	bd70      	pop	{r4, r5, r6, pc}
 8007770:	f855 3b04 	ldr.w	r3, [r5], #4
 8007774:	4798      	blx	r3
 8007776:	3601      	adds	r6, #1
 8007778:	e7ee      	b.n	8007758 <__libc_init_array+0xc>
 800777a:	f855 3b04 	ldr.w	r3, [r5], #4
 800777e:	4798      	blx	r3
 8007780:	3601      	adds	r6, #1
 8007782:	e7f2      	b.n	800776a <__libc_init_array+0x1e>
 8007784:	080087d8 	.word	0x080087d8
 8007788:	080087d8 	.word	0x080087d8
 800778c:	080087d8 	.word	0x080087d8
 8007790:	080087dc 	.word	0x080087dc

08007794 <__retarget_lock_init_recursive>:
 8007794:	4770      	bx	lr

08007796 <__retarget_lock_acquire_recursive>:
 8007796:	4770      	bx	lr

08007798 <__retarget_lock_release_recursive>:
 8007798:	4770      	bx	lr
	...

0800779c <_free_r>:
 800779c:	b538      	push	{r3, r4, r5, lr}
 800779e:	4605      	mov	r5, r0
 80077a0:	2900      	cmp	r1, #0
 80077a2:	d041      	beq.n	8007828 <_free_r+0x8c>
 80077a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077a8:	1f0c      	subs	r4, r1, #4
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bfb8      	it	lt
 80077ae:	18e4      	addlt	r4, r4, r3
 80077b0:	f000 f8e0 	bl	8007974 <__malloc_lock>
 80077b4:	4a1d      	ldr	r2, [pc, #116]	@ (800782c <_free_r+0x90>)
 80077b6:	6813      	ldr	r3, [r2, #0]
 80077b8:	b933      	cbnz	r3, 80077c8 <_free_r+0x2c>
 80077ba:	6063      	str	r3, [r4, #4]
 80077bc:	6014      	str	r4, [r2, #0]
 80077be:	4628      	mov	r0, r5
 80077c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80077c4:	f000 b8dc 	b.w	8007980 <__malloc_unlock>
 80077c8:	42a3      	cmp	r3, r4
 80077ca:	d908      	bls.n	80077de <_free_r+0x42>
 80077cc:	6820      	ldr	r0, [r4, #0]
 80077ce:	1821      	adds	r1, r4, r0
 80077d0:	428b      	cmp	r3, r1
 80077d2:	bf01      	itttt	eq
 80077d4:	6819      	ldreq	r1, [r3, #0]
 80077d6:	685b      	ldreq	r3, [r3, #4]
 80077d8:	1809      	addeq	r1, r1, r0
 80077da:	6021      	streq	r1, [r4, #0]
 80077dc:	e7ed      	b.n	80077ba <_free_r+0x1e>
 80077de:	461a      	mov	r2, r3
 80077e0:	685b      	ldr	r3, [r3, #4]
 80077e2:	b10b      	cbz	r3, 80077e8 <_free_r+0x4c>
 80077e4:	42a3      	cmp	r3, r4
 80077e6:	d9fa      	bls.n	80077de <_free_r+0x42>
 80077e8:	6811      	ldr	r1, [r2, #0]
 80077ea:	1850      	adds	r0, r2, r1
 80077ec:	42a0      	cmp	r0, r4
 80077ee:	d10b      	bne.n	8007808 <_free_r+0x6c>
 80077f0:	6820      	ldr	r0, [r4, #0]
 80077f2:	4401      	add	r1, r0
 80077f4:	1850      	adds	r0, r2, r1
 80077f6:	4283      	cmp	r3, r0
 80077f8:	6011      	str	r1, [r2, #0]
 80077fa:	d1e0      	bne.n	80077be <_free_r+0x22>
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	685b      	ldr	r3, [r3, #4]
 8007800:	6053      	str	r3, [r2, #4]
 8007802:	4408      	add	r0, r1
 8007804:	6010      	str	r0, [r2, #0]
 8007806:	e7da      	b.n	80077be <_free_r+0x22>
 8007808:	d902      	bls.n	8007810 <_free_r+0x74>
 800780a:	230c      	movs	r3, #12
 800780c:	602b      	str	r3, [r5, #0]
 800780e:	e7d6      	b.n	80077be <_free_r+0x22>
 8007810:	6820      	ldr	r0, [r4, #0]
 8007812:	1821      	adds	r1, r4, r0
 8007814:	428b      	cmp	r3, r1
 8007816:	bf04      	itt	eq
 8007818:	6819      	ldreq	r1, [r3, #0]
 800781a:	685b      	ldreq	r3, [r3, #4]
 800781c:	6063      	str	r3, [r4, #4]
 800781e:	bf04      	itt	eq
 8007820:	1809      	addeq	r1, r1, r0
 8007822:	6021      	streq	r1, [r4, #0]
 8007824:	6054      	str	r4, [r2, #4]
 8007826:	e7ca      	b.n	80077be <_free_r+0x22>
 8007828:	bd38      	pop	{r3, r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	200004e4 	.word	0x200004e4

08007830 <sbrk_aligned>:
 8007830:	b570      	push	{r4, r5, r6, lr}
 8007832:	4e0f      	ldr	r6, [pc, #60]	@ (8007870 <sbrk_aligned+0x40>)
 8007834:	460c      	mov	r4, r1
 8007836:	6831      	ldr	r1, [r6, #0]
 8007838:	4605      	mov	r5, r0
 800783a:	b911      	cbnz	r1, 8007842 <sbrk_aligned+0x12>
 800783c:	f000 fca6 	bl	800818c <_sbrk_r>
 8007840:	6030      	str	r0, [r6, #0]
 8007842:	4621      	mov	r1, r4
 8007844:	4628      	mov	r0, r5
 8007846:	f000 fca1 	bl	800818c <_sbrk_r>
 800784a:	1c43      	adds	r3, r0, #1
 800784c:	d103      	bne.n	8007856 <sbrk_aligned+0x26>
 800784e:	f04f 34ff 	mov.w	r4, #4294967295
 8007852:	4620      	mov	r0, r4
 8007854:	bd70      	pop	{r4, r5, r6, pc}
 8007856:	1cc4      	adds	r4, r0, #3
 8007858:	f024 0403 	bic.w	r4, r4, #3
 800785c:	42a0      	cmp	r0, r4
 800785e:	d0f8      	beq.n	8007852 <sbrk_aligned+0x22>
 8007860:	1a21      	subs	r1, r4, r0
 8007862:	4628      	mov	r0, r5
 8007864:	f000 fc92 	bl	800818c <_sbrk_r>
 8007868:	3001      	adds	r0, #1
 800786a:	d1f2      	bne.n	8007852 <sbrk_aligned+0x22>
 800786c:	e7ef      	b.n	800784e <sbrk_aligned+0x1e>
 800786e:	bf00      	nop
 8007870:	200004e0 	.word	0x200004e0

08007874 <_malloc_r>:
 8007874:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007878:	1ccd      	adds	r5, r1, #3
 800787a:	f025 0503 	bic.w	r5, r5, #3
 800787e:	3508      	adds	r5, #8
 8007880:	2d0c      	cmp	r5, #12
 8007882:	bf38      	it	cc
 8007884:	250c      	movcc	r5, #12
 8007886:	2d00      	cmp	r5, #0
 8007888:	4606      	mov	r6, r0
 800788a:	db01      	blt.n	8007890 <_malloc_r+0x1c>
 800788c:	42a9      	cmp	r1, r5
 800788e:	d904      	bls.n	800789a <_malloc_r+0x26>
 8007890:	230c      	movs	r3, #12
 8007892:	6033      	str	r3, [r6, #0]
 8007894:	2000      	movs	r0, #0
 8007896:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800789a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007970 <_malloc_r+0xfc>
 800789e:	f000 f869 	bl	8007974 <__malloc_lock>
 80078a2:	f8d8 3000 	ldr.w	r3, [r8]
 80078a6:	461c      	mov	r4, r3
 80078a8:	bb44      	cbnz	r4, 80078fc <_malloc_r+0x88>
 80078aa:	4629      	mov	r1, r5
 80078ac:	4630      	mov	r0, r6
 80078ae:	f7ff ffbf 	bl	8007830 <sbrk_aligned>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	4604      	mov	r4, r0
 80078b6:	d158      	bne.n	800796a <_malloc_r+0xf6>
 80078b8:	f8d8 4000 	ldr.w	r4, [r8]
 80078bc:	4627      	mov	r7, r4
 80078be:	2f00      	cmp	r7, #0
 80078c0:	d143      	bne.n	800794a <_malloc_r+0xd6>
 80078c2:	2c00      	cmp	r4, #0
 80078c4:	d04b      	beq.n	800795e <_malloc_r+0xea>
 80078c6:	6823      	ldr	r3, [r4, #0]
 80078c8:	4639      	mov	r1, r7
 80078ca:	4630      	mov	r0, r6
 80078cc:	eb04 0903 	add.w	r9, r4, r3
 80078d0:	f000 fc5c 	bl	800818c <_sbrk_r>
 80078d4:	4581      	cmp	r9, r0
 80078d6:	d142      	bne.n	800795e <_malloc_r+0xea>
 80078d8:	6821      	ldr	r1, [r4, #0]
 80078da:	1a6d      	subs	r5, r5, r1
 80078dc:	4629      	mov	r1, r5
 80078de:	4630      	mov	r0, r6
 80078e0:	f7ff ffa6 	bl	8007830 <sbrk_aligned>
 80078e4:	3001      	adds	r0, #1
 80078e6:	d03a      	beq.n	800795e <_malloc_r+0xea>
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	442b      	add	r3, r5
 80078ec:	6023      	str	r3, [r4, #0]
 80078ee:	f8d8 3000 	ldr.w	r3, [r8]
 80078f2:	685a      	ldr	r2, [r3, #4]
 80078f4:	bb62      	cbnz	r2, 8007950 <_malloc_r+0xdc>
 80078f6:	f8c8 7000 	str.w	r7, [r8]
 80078fa:	e00f      	b.n	800791c <_malloc_r+0xa8>
 80078fc:	6822      	ldr	r2, [r4, #0]
 80078fe:	1b52      	subs	r2, r2, r5
 8007900:	d420      	bmi.n	8007944 <_malloc_r+0xd0>
 8007902:	2a0b      	cmp	r2, #11
 8007904:	d917      	bls.n	8007936 <_malloc_r+0xc2>
 8007906:	1961      	adds	r1, r4, r5
 8007908:	42a3      	cmp	r3, r4
 800790a:	6025      	str	r5, [r4, #0]
 800790c:	bf18      	it	ne
 800790e:	6059      	strne	r1, [r3, #4]
 8007910:	6863      	ldr	r3, [r4, #4]
 8007912:	bf08      	it	eq
 8007914:	f8c8 1000 	streq.w	r1, [r8]
 8007918:	5162      	str	r2, [r4, r5]
 800791a:	604b      	str	r3, [r1, #4]
 800791c:	4630      	mov	r0, r6
 800791e:	f000 f82f 	bl	8007980 <__malloc_unlock>
 8007922:	f104 000b 	add.w	r0, r4, #11
 8007926:	1d23      	adds	r3, r4, #4
 8007928:	f020 0007 	bic.w	r0, r0, #7
 800792c:	1ac2      	subs	r2, r0, r3
 800792e:	bf1c      	itt	ne
 8007930:	1a1b      	subne	r3, r3, r0
 8007932:	50a3      	strne	r3, [r4, r2]
 8007934:	e7af      	b.n	8007896 <_malloc_r+0x22>
 8007936:	6862      	ldr	r2, [r4, #4]
 8007938:	42a3      	cmp	r3, r4
 800793a:	bf0c      	ite	eq
 800793c:	f8c8 2000 	streq.w	r2, [r8]
 8007940:	605a      	strne	r2, [r3, #4]
 8007942:	e7eb      	b.n	800791c <_malloc_r+0xa8>
 8007944:	4623      	mov	r3, r4
 8007946:	6864      	ldr	r4, [r4, #4]
 8007948:	e7ae      	b.n	80078a8 <_malloc_r+0x34>
 800794a:	463c      	mov	r4, r7
 800794c:	687f      	ldr	r7, [r7, #4]
 800794e:	e7b6      	b.n	80078be <_malloc_r+0x4a>
 8007950:	461a      	mov	r2, r3
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	42a3      	cmp	r3, r4
 8007956:	d1fb      	bne.n	8007950 <_malloc_r+0xdc>
 8007958:	2300      	movs	r3, #0
 800795a:	6053      	str	r3, [r2, #4]
 800795c:	e7de      	b.n	800791c <_malloc_r+0xa8>
 800795e:	230c      	movs	r3, #12
 8007960:	6033      	str	r3, [r6, #0]
 8007962:	4630      	mov	r0, r6
 8007964:	f000 f80c 	bl	8007980 <__malloc_unlock>
 8007968:	e794      	b.n	8007894 <_malloc_r+0x20>
 800796a:	6005      	str	r5, [r0, #0]
 800796c:	e7d6      	b.n	800791c <_malloc_r+0xa8>
 800796e:	bf00      	nop
 8007970:	200004e4 	.word	0x200004e4

08007974 <__malloc_lock>:
 8007974:	4801      	ldr	r0, [pc, #4]	@ (800797c <__malloc_lock+0x8>)
 8007976:	f7ff bf0e 	b.w	8007796 <__retarget_lock_acquire_recursive>
 800797a:	bf00      	nop
 800797c:	200004dc 	.word	0x200004dc

08007980 <__malloc_unlock>:
 8007980:	4801      	ldr	r0, [pc, #4]	@ (8007988 <__malloc_unlock+0x8>)
 8007982:	f7ff bf09 	b.w	8007798 <__retarget_lock_release_recursive>
 8007986:	bf00      	nop
 8007988:	200004dc 	.word	0x200004dc

0800798c <__sfputc_r>:
 800798c:	6893      	ldr	r3, [r2, #8]
 800798e:	3b01      	subs	r3, #1
 8007990:	2b00      	cmp	r3, #0
 8007992:	b410      	push	{r4}
 8007994:	6093      	str	r3, [r2, #8]
 8007996:	da08      	bge.n	80079aa <__sfputc_r+0x1e>
 8007998:	6994      	ldr	r4, [r2, #24]
 800799a:	42a3      	cmp	r3, r4
 800799c:	db01      	blt.n	80079a2 <__sfputc_r+0x16>
 800799e:	290a      	cmp	r1, #10
 80079a0:	d103      	bne.n	80079aa <__sfputc_r+0x1e>
 80079a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079a6:	f7ff bde8 	b.w	800757a <__swbuf_r>
 80079aa:	6813      	ldr	r3, [r2, #0]
 80079ac:	1c58      	adds	r0, r3, #1
 80079ae:	6010      	str	r0, [r2, #0]
 80079b0:	7019      	strb	r1, [r3, #0]
 80079b2:	4608      	mov	r0, r1
 80079b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80079b8:	4770      	bx	lr

080079ba <__sfputs_r>:
 80079ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079bc:	4606      	mov	r6, r0
 80079be:	460f      	mov	r7, r1
 80079c0:	4614      	mov	r4, r2
 80079c2:	18d5      	adds	r5, r2, r3
 80079c4:	42ac      	cmp	r4, r5
 80079c6:	d101      	bne.n	80079cc <__sfputs_r+0x12>
 80079c8:	2000      	movs	r0, #0
 80079ca:	e007      	b.n	80079dc <__sfputs_r+0x22>
 80079cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079d0:	463a      	mov	r2, r7
 80079d2:	4630      	mov	r0, r6
 80079d4:	f7ff ffda 	bl	800798c <__sfputc_r>
 80079d8:	1c43      	adds	r3, r0, #1
 80079da:	d1f3      	bne.n	80079c4 <__sfputs_r+0xa>
 80079dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080079e0 <_vfiprintf_r>:
 80079e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079e4:	460d      	mov	r5, r1
 80079e6:	b09d      	sub	sp, #116	@ 0x74
 80079e8:	4614      	mov	r4, r2
 80079ea:	4698      	mov	r8, r3
 80079ec:	4606      	mov	r6, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_vfiprintf_r+0x18>
 80079f0:	6a03      	ldr	r3, [r0, #32]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_vfiprintf_r+0x18>
 80079f4:	f7ff fcd8 	bl	80073a8 <__sinit>
 80079f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80079fa:	07d9      	lsls	r1, r3, #31
 80079fc:	d405      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 80079fe:	89ab      	ldrh	r3, [r5, #12]
 8007a00:	059a      	lsls	r2, r3, #22
 8007a02:	d402      	bmi.n	8007a0a <_vfiprintf_r+0x2a>
 8007a04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a06:	f7ff fec6 	bl	8007796 <__retarget_lock_acquire_recursive>
 8007a0a:	89ab      	ldrh	r3, [r5, #12]
 8007a0c:	071b      	lsls	r3, r3, #28
 8007a0e:	d501      	bpl.n	8007a14 <_vfiprintf_r+0x34>
 8007a10:	692b      	ldr	r3, [r5, #16]
 8007a12:	b99b      	cbnz	r3, 8007a3c <_vfiprintf_r+0x5c>
 8007a14:	4629      	mov	r1, r5
 8007a16:	4630      	mov	r0, r6
 8007a18:	f7ff fdee 	bl	80075f8 <__swsetup_r>
 8007a1c:	b170      	cbz	r0, 8007a3c <_vfiprintf_r+0x5c>
 8007a1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007a20:	07dc      	lsls	r4, r3, #31
 8007a22:	d504      	bpl.n	8007a2e <_vfiprintf_r+0x4e>
 8007a24:	f04f 30ff 	mov.w	r0, #4294967295
 8007a28:	b01d      	add	sp, #116	@ 0x74
 8007a2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a2e:	89ab      	ldrh	r3, [r5, #12]
 8007a30:	0598      	lsls	r0, r3, #22
 8007a32:	d4f7      	bmi.n	8007a24 <_vfiprintf_r+0x44>
 8007a34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007a36:	f7ff feaf 	bl	8007798 <__retarget_lock_release_recursive>
 8007a3a:	e7f3      	b.n	8007a24 <_vfiprintf_r+0x44>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a40:	2320      	movs	r3, #32
 8007a42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007a46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007a4a:	2330      	movs	r3, #48	@ 0x30
 8007a4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007bfc <_vfiprintf_r+0x21c>
 8007a50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007a54:	f04f 0901 	mov.w	r9, #1
 8007a58:	4623      	mov	r3, r4
 8007a5a:	469a      	mov	sl, r3
 8007a5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007a60:	b10a      	cbz	r2, 8007a66 <_vfiprintf_r+0x86>
 8007a62:	2a25      	cmp	r2, #37	@ 0x25
 8007a64:	d1f9      	bne.n	8007a5a <_vfiprintf_r+0x7a>
 8007a66:	ebba 0b04 	subs.w	fp, sl, r4
 8007a6a:	d00b      	beq.n	8007a84 <_vfiprintf_r+0xa4>
 8007a6c:	465b      	mov	r3, fp
 8007a6e:	4622      	mov	r2, r4
 8007a70:	4629      	mov	r1, r5
 8007a72:	4630      	mov	r0, r6
 8007a74:	f7ff ffa1 	bl	80079ba <__sfputs_r>
 8007a78:	3001      	adds	r0, #1
 8007a7a:	f000 80a7 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a80:	445a      	add	r2, fp
 8007a82:	9209      	str	r2, [sp, #36]	@ 0x24
 8007a84:	f89a 3000 	ldrb.w	r3, [sl]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	f000 809f 	beq.w	8007bcc <_vfiprintf_r+0x1ec>
 8007a8e:	2300      	movs	r3, #0
 8007a90:	f04f 32ff 	mov.w	r2, #4294967295
 8007a94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007a98:	f10a 0a01 	add.w	sl, sl, #1
 8007a9c:	9304      	str	r3, [sp, #16]
 8007a9e:	9307      	str	r3, [sp, #28]
 8007aa0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007aa4:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa6:	4654      	mov	r4, sl
 8007aa8:	2205      	movs	r2, #5
 8007aaa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007aae:	4853      	ldr	r0, [pc, #332]	@ (8007bfc <_vfiprintf_r+0x21c>)
 8007ab0:	f7f8 fbb6 	bl	8000220 <memchr>
 8007ab4:	9a04      	ldr	r2, [sp, #16]
 8007ab6:	b9d8      	cbnz	r0, 8007af0 <_vfiprintf_r+0x110>
 8007ab8:	06d1      	lsls	r1, r2, #27
 8007aba:	bf44      	itt	mi
 8007abc:	2320      	movmi	r3, #32
 8007abe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ac2:	0713      	lsls	r3, r2, #28
 8007ac4:	bf44      	itt	mi
 8007ac6:	232b      	movmi	r3, #43	@ 0x2b
 8007ac8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007acc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ad0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ad2:	d015      	beq.n	8007b00 <_vfiprintf_r+0x120>
 8007ad4:	9a07      	ldr	r2, [sp, #28]
 8007ad6:	4654      	mov	r4, sl
 8007ad8:	2000      	movs	r0, #0
 8007ada:	f04f 0c0a 	mov.w	ip, #10
 8007ade:	4621      	mov	r1, r4
 8007ae0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ae4:	3b30      	subs	r3, #48	@ 0x30
 8007ae6:	2b09      	cmp	r3, #9
 8007ae8:	d94b      	bls.n	8007b82 <_vfiprintf_r+0x1a2>
 8007aea:	b1b0      	cbz	r0, 8007b1a <_vfiprintf_r+0x13a>
 8007aec:	9207      	str	r2, [sp, #28]
 8007aee:	e014      	b.n	8007b1a <_vfiprintf_r+0x13a>
 8007af0:	eba0 0308 	sub.w	r3, r0, r8
 8007af4:	fa09 f303 	lsl.w	r3, r9, r3
 8007af8:	4313      	orrs	r3, r2
 8007afa:	9304      	str	r3, [sp, #16]
 8007afc:	46a2      	mov	sl, r4
 8007afe:	e7d2      	b.n	8007aa6 <_vfiprintf_r+0xc6>
 8007b00:	9b03      	ldr	r3, [sp, #12]
 8007b02:	1d19      	adds	r1, r3, #4
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	9103      	str	r1, [sp, #12]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	bfbb      	ittet	lt
 8007b0c:	425b      	neglt	r3, r3
 8007b0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007b12:	9307      	strge	r3, [sp, #28]
 8007b14:	9307      	strlt	r3, [sp, #28]
 8007b16:	bfb8      	it	lt
 8007b18:	9204      	strlt	r2, [sp, #16]
 8007b1a:	7823      	ldrb	r3, [r4, #0]
 8007b1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007b1e:	d10a      	bne.n	8007b36 <_vfiprintf_r+0x156>
 8007b20:	7863      	ldrb	r3, [r4, #1]
 8007b22:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b24:	d132      	bne.n	8007b8c <_vfiprintf_r+0x1ac>
 8007b26:	9b03      	ldr	r3, [sp, #12]
 8007b28:	1d1a      	adds	r2, r3, #4
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	9203      	str	r2, [sp, #12]
 8007b2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007b32:	3402      	adds	r4, #2
 8007b34:	9305      	str	r3, [sp, #20]
 8007b36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007c0c <_vfiprintf_r+0x22c>
 8007b3a:	7821      	ldrb	r1, [r4, #0]
 8007b3c:	2203      	movs	r2, #3
 8007b3e:	4650      	mov	r0, sl
 8007b40:	f7f8 fb6e 	bl	8000220 <memchr>
 8007b44:	b138      	cbz	r0, 8007b56 <_vfiprintf_r+0x176>
 8007b46:	9b04      	ldr	r3, [sp, #16]
 8007b48:	eba0 000a 	sub.w	r0, r0, sl
 8007b4c:	2240      	movs	r2, #64	@ 0x40
 8007b4e:	4082      	lsls	r2, r0
 8007b50:	4313      	orrs	r3, r2
 8007b52:	3401      	adds	r4, #1
 8007b54:	9304      	str	r3, [sp, #16]
 8007b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5a:	4829      	ldr	r0, [pc, #164]	@ (8007c00 <_vfiprintf_r+0x220>)
 8007b5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007b60:	2206      	movs	r2, #6
 8007b62:	f7f8 fb5d 	bl	8000220 <memchr>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	d03f      	beq.n	8007bea <_vfiprintf_r+0x20a>
 8007b6a:	4b26      	ldr	r3, [pc, #152]	@ (8007c04 <_vfiprintf_r+0x224>)
 8007b6c:	bb1b      	cbnz	r3, 8007bb6 <_vfiprintf_r+0x1d6>
 8007b6e:	9b03      	ldr	r3, [sp, #12]
 8007b70:	3307      	adds	r3, #7
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	3308      	adds	r3, #8
 8007b78:	9303      	str	r3, [sp, #12]
 8007b7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b7c:	443b      	add	r3, r7
 8007b7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b80:	e76a      	b.n	8007a58 <_vfiprintf_r+0x78>
 8007b82:	fb0c 3202 	mla	r2, ip, r2, r3
 8007b86:	460c      	mov	r4, r1
 8007b88:	2001      	movs	r0, #1
 8007b8a:	e7a8      	b.n	8007ade <_vfiprintf_r+0xfe>
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	3401      	adds	r4, #1
 8007b90:	9305      	str	r3, [sp, #20]
 8007b92:	4619      	mov	r1, r3
 8007b94:	f04f 0c0a 	mov.w	ip, #10
 8007b98:	4620      	mov	r0, r4
 8007b9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b9e:	3a30      	subs	r2, #48	@ 0x30
 8007ba0:	2a09      	cmp	r2, #9
 8007ba2:	d903      	bls.n	8007bac <_vfiprintf_r+0x1cc>
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d0c6      	beq.n	8007b36 <_vfiprintf_r+0x156>
 8007ba8:	9105      	str	r1, [sp, #20]
 8007baa:	e7c4      	b.n	8007b36 <_vfiprintf_r+0x156>
 8007bac:	fb0c 2101 	mla	r1, ip, r1, r2
 8007bb0:	4604      	mov	r4, r0
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	e7f0      	b.n	8007b98 <_vfiprintf_r+0x1b8>
 8007bb6:	ab03      	add	r3, sp, #12
 8007bb8:	9300      	str	r3, [sp, #0]
 8007bba:	462a      	mov	r2, r5
 8007bbc:	4b12      	ldr	r3, [pc, #72]	@ (8007c08 <_vfiprintf_r+0x228>)
 8007bbe:	a904      	add	r1, sp, #16
 8007bc0:	4630      	mov	r0, r6
 8007bc2:	f3af 8000 	nop.w
 8007bc6:	4607      	mov	r7, r0
 8007bc8:	1c78      	adds	r0, r7, #1
 8007bca:	d1d6      	bne.n	8007b7a <_vfiprintf_r+0x19a>
 8007bcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bce:	07d9      	lsls	r1, r3, #31
 8007bd0:	d405      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd2:	89ab      	ldrh	r3, [r5, #12]
 8007bd4:	059a      	lsls	r2, r3, #22
 8007bd6:	d402      	bmi.n	8007bde <_vfiprintf_r+0x1fe>
 8007bd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bda:	f7ff fddd 	bl	8007798 <__retarget_lock_release_recursive>
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	065b      	lsls	r3, r3, #25
 8007be2:	f53f af1f 	bmi.w	8007a24 <_vfiprintf_r+0x44>
 8007be6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007be8:	e71e      	b.n	8007a28 <_vfiprintf_r+0x48>
 8007bea:	ab03      	add	r3, sp, #12
 8007bec:	9300      	str	r3, [sp, #0]
 8007bee:	462a      	mov	r2, r5
 8007bf0:	4b05      	ldr	r3, [pc, #20]	@ (8007c08 <_vfiprintf_r+0x228>)
 8007bf2:	a904      	add	r1, sp, #16
 8007bf4:	4630      	mov	r0, r6
 8007bf6:	f000 f879 	bl	8007cec <_printf_i>
 8007bfa:	e7e4      	b.n	8007bc6 <_vfiprintf_r+0x1e6>
 8007bfc:	0800879c 	.word	0x0800879c
 8007c00:	080087a6 	.word	0x080087a6
 8007c04:	00000000 	.word	0x00000000
 8007c08:	080079bb 	.word	0x080079bb
 8007c0c:	080087a2 	.word	0x080087a2

08007c10 <_printf_common>:
 8007c10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c14:	4616      	mov	r6, r2
 8007c16:	4698      	mov	r8, r3
 8007c18:	688a      	ldr	r2, [r1, #8]
 8007c1a:	690b      	ldr	r3, [r1, #16]
 8007c1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007c20:	4293      	cmp	r3, r2
 8007c22:	bfb8      	it	lt
 8007c24:	4613      	movlt	r3, r2
 8007c26:	6033      	str	r3, [r6, #0]
 8007c28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007c2c:	4607      	mov	r7, r0
 8007c2e:	460c      	mov	r4, r1
 8007c30:	b10a      	cbz	r2, 8007c36 <_printf_common+0x26>
 8007c32:	3301      	adds	r3, #1
 8007c34:	6033      	str	r3, [r6, #0]
 8007c36:	6823      	ldr	r3, [r4, #0]
 8007c38:	0699      	lsls	r1, r3, #26
 8007c3a:	bf42      	ittt	mi
 8007c3c:	6833      	ldrmi	r3, [r6, #0]
 8007c3e:	3302      	addmi	r3, #2
 8007c40:	6033      	strmi	r3, [r6, #0]
 8007c42:	6825      	ldr	r5, [r4, #0]
 8007c44:	f015 0506 	ands.w	r5, r5, #6
 8007c48:	d106      	bne.n	8007c58 <_printf_common+0x48>
 8007c4a:	f104 0a19 	add.w	sl, r4, #25
 8007c4e:	68e3      	ldr	r3, [r4, #12]
 8007c50:	6832      	ldr	r2, [r6, #0]
 8007c52:	1a9b      	subs	r3, r3, r2
 8007c54:	42ab      	cmp	r3, r5
 8007c56:	dc26      	bgt.n	8007ca6 <_printf_common+0x96>
 8007c58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007c5c:	6822      	ldr	r2, [r4, #0]
 8007c5e:	3b00      	subs	r3, #0
 8007c60:	bf18      	it	ne
 8007c62:	2301      	movne	r3, #1
 8007c64:	0692      	lsls	r2, r2, #26
 8007c66:	d42b      	bmi.n	8007cc0 <_printf_common+0xb0>
 8007c68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007c6c:	4641      	mov	r1, r8
 8007c6e:	4638      	mov	r0, r7
 8007c70:	47c8      	blx	r9
 8007c72:	3001      	adds	r0, #1
 8007c74:	d01e      	beq.n	8007cb4 <_printf_common+0xa4>
 8007c76:	6823      	ldr	r3, [r4, #0]
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	f003 0306 	and.w	r3, r3, #6
 8007c7e:	2b04      	cmp	r3, #4
 8007c80:	bf02      	ittt	eq
 8007c82:	68e5      	ldreq	r5, [r4, #12]
 8007c84:	6833      	ldreq	r3, [r6, #0]
 8007c86:	1aed      	subeq	r5, r5, r3
 8007c88:	68a3      	ldr	r3, [r4, #8]
 8007c8a:	bf0c      	ite	eq
 8007c8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c90:	2500      	movne	r5, #0
 8007c92:	4293      	cmp	r3, r2
 8007c94:	bfc4      	itt	gt
 8007c96:	1a9b      	subgt	r3, r3, r2
 8007c98:	18ed      	addgt	r5, r5, r3
 8007c9a:	2600      	movs	r6, #0
 8007c9c:	341a      	adds	r4, #26
 8007c9e:	42b5      	cmp	r5, r6
 8007ca0:	d11a      	bne.n	8007cd8 <_printf_common+0xc8>
 8007ca2:	2000      	movs	r0, #0
 8007ca4:	e008      	b.n	8007cb8 <_printf_common+0xa8>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	4652      	mov	r2, sl
 8007caa:	4641      	mov	r1, r8
 8007cac:	4638      	mov	r0, r7
 8007cae:	47c8      	blx	r9
 8007cb0:	3001      	adds	r0, #1
 8007cb2:	d103      	bne.n	8007cbc <_printf_common+0xac>
 8007cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8007cb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cbc:	3501      	adds	r5, #1
 8007cbe:	e7c6      	b.n	8007c4e <_printf_common+0x3e>
 8007cc0:	18e1      	adds	r1, r4, r3
 8007cc2:	1c5a      	adds	r2, r3, #1
 8007cc4:	2030      	movs	r0, #48	@ 0x30
 8007cc6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007cca:	4422      	add	r2, r4
 8007ccc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007cd0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007cd4:	3302      	adds	r3, #2
 8007cd6:	e7c7      	b.n	8007c68 <_printf_common+0x58>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	4622      	mov	r2, r4
 8007cdc:	4641      	mov	r1, r8
 8007cde:	4638      	mov	r0, r7
 8007ce0:	47c8      	blx	r9
 8007ce2:	3001      	adds	r0, #1
 8007ce4:	d0e6      	beq.n	8007cb4 <_printf_common+0xa4>
 8007ce6:	3601      	adds	r6, #1
 8007ce8:	e7d9      	b.n	8007c9e <_printf_common+0x8e>
	...

08007cec <_printf_i>:
 8007cec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007cf0:	7e0f      	ldrb	r7, [r1, #24]
 8007cf2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007cf4:	2f78      	cmp	r7, #120	@ 0x78
 8007cf6:	4691      	mov	r9, r2
 8007cf8:	4680      	mov	r8, r0
 8007cfa:	460c      	mov	r4, r1
 8007cfc:	469a      	mov	sl, r3
 8007cfe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d02:	d807      	bhi.n	8007d14 <_printf_i+0x28>
 8007d04:	2f62      	cmp	r7, #98	@ 0x62
 8007d06:	d80a      	bhi.n	8007d1e <_printf_i+0x32>
 8007d08:	2f00      	cmp	r7, #0
 8007d0a:	f000 80d2 	beq.w	8007eb2 <_printf_i+0x1c6>
 8007d0e:	2f58      	cmp	r7, #88	@ 0x58
 8007d10:	f000 80b9 	beq.w	8007e86 <_printf_i+0x19a>
 8007d14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d1c:	e03a      	b.n	8007d94 <_printf_i+0xa8>
 8007d1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007d22:	2b15      	cmp	r3, #21
 8007d24:	d8f6      	bhi.n	8007d14 <_printf_i+0x28>
 8007d26:	a101      	add	r1, pc, #4	@ (adr r1, 8007d2c <_printf_i+0x40>)
 8007d28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d2c:	08007d85 	.word	0x08007d85
 8007d30:	08007d99 	.word	0x08007d99
 8007d34:	08007d15 	.word	0x08007d15
 8007d38:	08007d15 	.word	0x08007d15
 8007d3c:	08007d15 	.word	0x08007d15
 8007d40:	08007d15 	.word	0x08007d15
 8007d44:	08007d99 	.word	0x08007d99
 8007d48:	08007d15 	.word	0x08007d15
 8007d4c:	08007d15 	.word	0x08007d15
 8007d50:	08007d15 	.word	0x08007d15
 8007d54:	08007d15 	.word	0x08007d15
 8007d58:	08007e99 	.word	0x08007e99
 8007d5c:	08007dc3 	.word	0x08007dc3
 8007d60:	08007e53 	.word	0x08007e53
 8007d64:	08007d15 	.word	0x08007d15
 8007d68:	08007d15 	.word	0x08007d15
 8007d6c:	08007ebb 	.word	0x08007ebb
 8007d70:	08007d15 	.word	0x08007d15
 8007d74:	08007dc3 	.word	0x08007dc3
 8007d78:	08007d15 	.word	0x08007d15
 8007d7c:	08007d15 	.word	0x08007d15
 8007d80:	08007e5b 	.word	0x08007e5b
 8007d84:	6833      	ldr	r3, [r6, #0]
 8007d86:	1d1a      	adds	r2, r3, #4
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	6032      	str	r2, [r6, #0]
 8007d8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007d94:	2301      	movs	r3, #1
 8007d96:	e09d      	b.n	8007ed4 <_printf_i+0x1e8>
 8007d98:	6833      	ldr	r3, [r6, #0]
 8007d9a:	6820      	ldr	r0, [r4, #0]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	6031      	str	r1, [r6, #0]
 8007da0:	0606      	lsls	r6, r0, #24
 8007da2:	d501      	bpl.n	8007da8 <_printf_i+0xbc>
 8007da4:	681d      	ldr	r5, [r3, #0]
 8007da6:	e003      	b.n	8007db0 <_printf_i+0xc4>
 8007da8:	0645      	lsls	r5, r0, #25
 8007daa:	d5fb      	bpl.n	8007da4 <_printf_i+0xb8>
 8007dac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007db0:	2d00      	cmp	r5, #0
 8007db2:	da03      	bge.n	8007dbc <_printf_i+0xd0>
 8007db4:	232d      	movs	r3, #45	@ 0x2d
 8007db6:	426d      	negs	r5, r5
 8007db8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007dbc:	4859      	ldr	r0, [pc, #356]	@ (8007f24 <_printf_i+0x238>)
 8007dbe:	230a      	movs	r3, #10
 8007dc0:	e011      	b.n	8007de6 <_printf_i+0xfa>
 8007dc2:	6821      	ldr	r1, [r4, #0]
 8007dc4:	6833      	ldr	r3, [r6, #0]
 8007dc6:	0608      	lsls	r0, r1, #24
 8007dc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8007dcc:	d402      	bmi.n	8007dd4 <_printf_i+0xe8>
 8007dce:	0649      	lsls	r1, r1, #25
 8007dd0:	bf48      	it	mi
 8007dd2:	b2ad      	uxthmi	r5, r5
 8007dd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8007dd6:	4853      	ldr	r0, [pc, #332]	@ (8007f24 <_printf_i+0x238>)
 8007dd8:	6033      	str	r3, [r6, #0]
 8007dda:	bf14      	ite	ne
 8007ddc:	230a      	movne	r3, #10
 8007dde:	2308      	moveq	r3, #8
 8007de0:	2100      	movs	r1, #0
 8007de2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007de6:	6866      	ldr	r6, [r4, #4]
 8007de8:	60a6      	str	r6, [r4, #8]
 8007dea:	2e00      	cmp	r6, #0
 8007dec:	bfa2      	ittt	ge
 8007dee:	6821      	ldrge	r1, [r4, #0]
 8007df0:	f021 0104 	bicge.w	r1, r1, #4
 8007df4:	6021      	strge	r1, [r4, #0]
 8007df6:	b90d      	cbnz	r5, 8007dfc <_printf_i+0x110>
 8007df8:	2e00      	cmp	r6, #0
 8007dfa:	d04b      	beq.n	8007e94 <_printf_i+0x1a8>
 8007dfc:	4616      	mov	r6, r2
 8007dfe:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e02:	fb03 5711 	mls	r7, r3, r1, r5
 8007e06:	5dc7      	ldrb	r7, [r0, r7]
 8007e08:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e0c:	462f      	mov	r7, r5
 8007e0e:	42bb      	cmp	r3, r7
 8007e10:	460d      	mov	r5, r1
 8007e12:	d9f4      	bls.n	8007dfe <_printf_i+0x112>
 8007e14:	2b08      	cmp	r3, #8
 8007e16:	d10b      	bne.n	8007e30 <_printf_i+0x144>
 8007e18:	6823      	ldr	r3, [r4, #0]
 8007e1a:	07df      	lsls	r7, r3, #31
 8007e1c:	d508      	bpl.n	8007e30 <_printf_i+0x144>
 8007e1e:	6923      	ldr	r3, [r4, #16]
 8007e20:	6861      	ldr	r1, [r4, #4]
 8007e22:	4299      	cmp	r1, r3
 8007e24:	bfde      	ittt	le
 8007e26:	2330      	movle	r3, #48	@ 0x30
 8007e28:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007e2c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007e30:	1b92      	subs	r2, r2, r6
 8007e32:	6122      	str	r2, [r4, #16]
 8007e34:	f8cd a000 	str.w	sl, [sp]
 8007e38:	464b      	mov	r3, r9
 8007e3a:	aa03      	add	r2, sp, #12
 8007e3c:	4621      	mov	r1, r4
 8007e3e:	4640      	mov	r0, r8
 8007e40:	f7ff fee6 	bl	8007c10 <_printf_common>
 8007e44:	3001      	adds	r0, #1
 8007e46:	d14a      	bne.n	8007ede <_printf_i+0x1f2>
 8007e48:	f04f 30ff 	mov.w	r0, #4294967295
 8007e4c:	b004      	add	sp, #16
 8007e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	f043 0320 	orr.w	r3, r3, #32
 8007e58:	6023      	str	r3, [r4, #0]
 8007e5a:	4833      	ldr	r0, [pc, #204]	@ (8007f28 <_printf_i+0x23c>)
 8007e5c:	2778      	movs	r7, #120	@ 0x78
 8007e5e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007e62:	6823      	ldr	r3, [r4, #0]
 8007e64:	6831      	ldr	r1, [r6, #0]
 8007e66:	061f      	lsls	r7, r3, #24
 8007e68:	f851 5b04 	ldr.w	r5, [r1], #4
 8007e6c:	d402      	bmi.n	8007e74 <_printf_i+0x188>
 8007e6e:	065f      	lsls	r7, r3, #25
 8007e70:	bf48      	it	mi
 8007e72:	b2ad      	uxthmi	r5, r5
 8007e74:	6031      	str	r1, [r6, #0]
 8007e76:	07d9      	lsls	r1, r3, #31
 8007e78:	bf44      	itt	mi
 8007e7a:	f043 0320 	orrmi.w	r3, r3, #32
 8007e7e:	6023      	strmi	r3, [r4, #0]
 8007e80:	b11d      	cbz	r5, 8007e8a <_printf_i+0x19e>
 8007e82:	2310      	movs	r3, #16
 8007e84:	e7ac      	b.n	8007de0 <_printf_i+0xf4>
 8007e86:	4827      	ldr	r0, [pc, #156]	@ (8007f24 <_printf_i+0x238>)
 8007e88:	e7e9      	b.n	8007e5e <_printf_i+0x172>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	f023 0320 	bic.w	r3, r3, #32
 8007e90:	6023      	str	r3, [r4, #0]
 8007e92:	e7f6      	b.n	8007e82 <_printf_i+0x196>
 8007e94:	4616      	mov	r6, r2
 8007e96:	e7bd      	b.n	8007e14 <_printf_i+0x128>
 8007e98:	6833      	ldr	r3, [r6, #0]
 8007e9a:	6825      	ldr	r5, [r4, #0]
 8007e9c:	6961      	ldr	r1, [r4, #20]
 8007e9e:	1d18      	adds	r0, r3, #4
 8007ea0:	6030      	str	r0, [r6, #0]
 8007ea2:	062e      	lsls	r6, r5, #24
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	d501      	bpl.n	8007eac <_printf_i+0x1c0>
 8007ea8:	6019      	str	r1, [r3, #0]
 8007eaa:	e002      	b.n	8007eb2 <_printf_i+0x1c6>
 8007eac:	0668      	lsls	r0, r5, #25
 8007eae:	d5fb      	bpl.n	8007ea8 <_printf_i+0x1bc>
 8007eb0:	8019      	strh	r1, [r3, #0]
 8007eb2:	2300      	movs	r3, #0
 8007eb4:	6123      	str	r3, [r4, #16]
 8007eb6:	4616      	mov	r6, r2
 8007eb8:	e7bc      	b.n	8007e34 <_printf_i+0x148>
 8007eba:	6833      	ldr	r3, [r6, #0]
 8007ebc:	1d1a      	adds	r2, r3, #4
 8007ebe:	6032      	str	r2, [r6, #0]
 8007ec0:	681e      	ldr	r6, [r3, #0]
 8007ec2:	6862      	ldr	r2, [r4, #4]
 8007ec4:	2100      	movs	r1, #0
 8007ec6:	4630      	mov	r0, r6
 8007ec8:	f7f8 f9aa 	bl	8000220 <memchr>
 8007ecc:	b108      	cbz	r0, 8007ed2 <_printf_i+0x1e6>
 8007ece:	1b80      	subs	r0, r0, r6
 8007ed0:	6060      	str	r0, [r4, #4]
 8007ed2:	6863      	ldr	r3, [r4, #4]
 8007ed4:	6123      	str	r3, [r4, #16]
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007edc:	e7aa      	b.n	8007e34 <_printf_i+0x148>
 8007ede:	6923      	ldr	r3, [r4, #16]
 8007ee0:	4632      	mov	r2, r6
 8007ee2:	4649      	mov	r1, r9
 8007ee4:	4640      	mov	r0, r8
 8007ee6:	47d0      	blx	sl
 8007ee8:	3001      	adds	r0, #1
 8007eea:	d0ad      	beq.n	8007e48 <_printf_i+0x15c>
 8007eec:	6823      	ldr	r3, [r4, #0]
 8007eee:	079b      	lsls	r3, r3, #30
 8007ef0:	d413      	bmi.n	8007f1a <_printf_i+0x22e>
 8007ef2:	68e0      	ldr	r0, [r4, #12]
 8007ef4:	9b03      	ldr	r3, [sp, #12]
 8007ef6:	4298      	cmp	r0, r3
 8007ef8:	bfb8      	it	lt
 8007efa:	4618      	movlt	r0, r3
 8007efc:	e7a6      	b.n	8007e4c <_printf_i+0x160>
 8007efe:	2301      	movs	r3, #1
 8007f00:	4632      	mov	r2, r6
 8007f02:	4649      	mov	r1, r9
 8007f04:	4640      	mov	r0, r8
 8007f06:	47d0      	blx	sl
 8007f08:	3001      	adds	r0, #1
 8007f0a:	d09d      	beq.n	8007e48 <_printf_i+0x15c>
 8007f0c:	3501      	adds	r5, #1
 8007f0e:	68e3      	ldr	r3, [r4, #12]
 8007f10:	9903      	ldr	r1, [sp, #12]
 8007f12:	1a5b      	subs	r3, r3, r1
 8007f14:	42ab      	cmp	r3, r5
 8007f16:	dcf2      	bgt.n	8007efe <_printf_i+0x212>
 8007f18:	e7eb      	b.n	8007ef2 <_printf_i+0x206>
 8007f1a:	2500      	movs	r5, #0
 8007f1c:	f104 0619 	add.w	r6, r4, #25
 8007f20:	e7f5      	b.n	8007f0e <_printf_i+0x222>
 8007f22:	bf00      	nop
 8007f24:	080087ad 	.word	0x080087ad
 8007f28:	080087be 	.word	0x080087be

08007f2c <__sflush_r>:
 8007f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f34:	0716      	lsls	r6, r2, #28
 8007f36:	4605      	mov	r5, r0
 8007f38:	460c      	mov	r4, r1
 8007f3a:	d454      	bmi.n	8007fe6 <__sflush_r+0xba>
 8007f3c:	684b      	ldr	r3, [r1, #4]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	dc02      	bgt.n	8007f48 <__sflush_r+0x1c>
 8007f42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	dd48      	ble.n	8007fda <__sflush_r+0xae>
 8007f48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f4a:	2e00      	cmp	r6, #0
 8007f4c:	d045      	beq.n	8007fda <__sflush_r+0xae>
 8007f4e:	2300      	movs	r3, #0
 8007f50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007f54:	682f      	ldr	r7, [r5, #0]
 8007f56:	6a21      	ldr	r1, [r4, #32]
 8007f58:	602b      	str	r3, [r5, #0]
 8007f5a:	d030      	beq.n	8007fbe <__sflush_r+0x92>
 8007f5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007f5e:	89a3      	ldrh	r3, [r4, #12]
 8007f60:	0759      	lsls	r1, r3, #29
 8007f62:	d505      	bpl.n	8007f70 <__sflush_r+0x44>
 8007f64:	6863      	ldr	r3, [r4, #4]
 8007f66:	1ad2      	subs	r2, r2, r3
 8007f68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007f6a:	b10b      	cbz	r3, 8007f70 <__sflush_r+0x44>
 8007f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007f6e:	1ad2      	subs	r2, r2, r3
 8007f70:	2300      	movs	r3, #0
 8007f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007f74:	6a21      	ldr	r1, [r4, #32]
 8007f76:	4628      	mov	r0, r5
 8007f78:	47b0      	blx	r6
 8007f7a:	1c43      	adds	r3, r0, #1
 8007f7c:	89a3      	ldrh	r3, [r4, #12]
 8007f7e:	d106      	bne.n	8007f8e <__sflush_r+0x62>
 8007f80:	6829      	ldr	r1, [r5, #0]
 8007f82:	291d      	cmp	r1, #29
 8007f84:	d82b      	bhi.n	8007fde <__sflush_r+0xb2>
 8007f86:	4a2a      	ldr	r2, [pc, #168]	@ (8008030 <__sflush_r+0x104>)
 8007f88:	410a      	asrs	r2, r1
 8007f8a:	07d6      	lsls	r6, r2, #31
 8007f8c:	d427      	bmi.n	8007fde <__sflush_r+0xb2>
 8007f8e:	2200      	movs	r2, #0
 8007f90:	6062      	str	r2, [r4, #4]
 8007f92:	04d9      	lsls	r1, r3, #19
 8007f94:	6922      	ldr	r2, [r4, #16]
 8007f96:	6022      	str	r2, [r4, #0]
 8007f98:	d504      	bpl.n	8007fa4 <__sflush_r+0x78>
 8007f9a:	1c42      	adds	r2, r0, #1
 8007f9c:	d101      	bne.n	8007fa2 <__sflush_r+0x76>
 8007f9e:	682b      	ldr	r3, [r5, #0]
 8007fa0:	b903      	cbnz	r3, 8007fa4 <__sflush_r+0x78>
 8007fa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007fa6:	602f      	str	r7, [r5, #0]
 8007fa8:	b1b9      	cbz	r1, 8007fda <__sflush_r+0xae>
 8007faa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fae:	4299      	cmp	r1, r3
 8007fb0:	d002      	beq.n	8007fb8 <__sflush_r+0x8c>
 8007fb2:	4628      	mov	r0, r5
 8007fb4:	f7ff fbf2 	bl	800779c <_free_r>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fbc:	e00d      	b.n	8007fda <__sflush_r+0xae>
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	4628      	mov	r0, r5
 8007fc2:	47b0      	blx	r6
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	1c50      	adds	r0, r2, #1
 8007fc8:	d1c9      	bne.n	8007f5e <__sflush_r+0x32>
 8007fca:	682b      	ldr	r3, [r5, #0]
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d0c6      	beq.n	8007f5e <__sflush_r+0x32>
 8007fd0:	2b1d      	cmp	r3, #29
 8007fd2:	d001      	beq.n	8007fd8 <__sflush_r+0xac>
 8007fd4:	2b16      	cmp	r3, #22
 8007fd6:	d11e      	bne.n	8008016 <__sflush_r+0xea>
 8007fd8:	602f      	str	r7, [r5, #0]
 8007fda:	2000      	movs	r0, #0
 8007fdc:	e022      	b.n	8008024 <__sflush_r+0xf8>
 8007fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007fe2:	b21b      	sxth	r3, r3
 8007fe4:	e01b      	b.n	800801e <__sflush_r+0xf2>
 8007fe6:	690f      	ldr	r7, [r1, #16]
 8007fe8:	2f00      	cmp	r7, #0
 8007fea:	d0f6      	beq.n	8007fda <__sflush_r+0xae>
 8007fec:	0793      	lsls	r3, r2, #30
 8007fee:	680e      	ldr	r6, [r1, #0]
 8007ff0:	bf08      	it	eq
 8007ff2:	694b      	ldreq	r3, [r1, #20]
 8007ff4:	600f      	str	r7, [r1, #0]
 8007ff6:	bf18      	it	ne
 8007ff8:	2300      	movne	r3, #0
 8007ffa:	eba6 0807 	sub.w	r8, r6, r7
 8007ffe:	608b      	str	r3, [r1, #8]
 8008000:	f1b8 0f00 	cmp.w	r8, #0
 8008004:	dde9      	ble.n	8007fda <__sflush_r+0xae>
 8008006:	6a21      	ldr	r1, [r4, #32]
 8008008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800800a:	4643      	mov	r3, r8
 800800c:	463a      	mov	r2, r7
 800800e:	4628      	mov	r0, r5
 8008010:	47b0      	blx	r6
 8008012:	2800      	cmp	r0, #0
 8008014:	dc08      	bgt.n	8008028 <__sflush_r+0xfc>
 8008016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800801a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800801e:	81a3      	strh	r3, [r4, #12]
 8008020:	f04f 30ff 	mov.w	r0, #4294967295
 8008024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008028:	4407      	add	r7, r0
 800802a:	eba8 0800 	sub.w	r8, r8, r0
 800802e:	e7e7      	b.n	8008000 <__sflush_r+0xd4>
 8008030:	dfbffffe 	.word	0xdfbffffe

08008034 <_fflush_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	690b      	ldr	r3, [r1, #16]
 8008038:	4605      	mov	r5, r0
 800803a:	460c      	mov	r4, r1
 800803c:	b913      	cbnz	r3, 8008044 <_fflush_r+0x10>
 800803e:	2500      	movs	r5, #0
 8008040:	4628      	mov	r0, r5
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	b118      	cbz	r0, 800804e <_fflush_r+0x1a>
 8008046:	6a03      	ldr	r3, [r0, #32]
 8008048:	b90b      	cbnz	r3, 800804e <_fflush_r+0x1a>
 800804a:	f7ff f9ad 	bl	80073a8 <__sinit>
 800804e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d0f3      	beq.n	800803e <_fflush_r+0xa>
 8008056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008058:	07d0      	lsls	r0, r2, #31
 800805a:	d404      	bmi.n	8008066 <_fflush_r+0x32>
 800805c:	0599      	lsls	r1, r3, #22
 800805e:	d402      	bmi.n	8008066 <_fflush_r+0x32>
 8008060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008062:	f7ff fb98 	bl	8007796 <__retarget_lock_acquire_recursive>
 8008066:	4628      	mov	r0, r5
 8008068:	4621      	mov	r1, r4
 800806a:	f7ff ff5f 	bl	8007f2c <__sflush_r>
 800806e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008070:	07da      	lsls	r2, r3, #31
 8008072:	4605      	mov	r5, r0
 8008074:	d4e4      	bmi.n	8008040 <_fflush_r+0xc>
 8008076:	89a3      	ldrh	r3, [r4, #12]
 8008078:	059b      	lsls	r3, r3, #22
 800807a:	d4e1      	bmi.n	8008040 <_fflush_r+0xc>
 800807c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800807e:	f7ff fb8b 	bl	8007798 <__retarget_lock_release_recursive>
 8008082:	e7dd      	b.n	8008040 <_fflush_r+0xc>

08008084 <__swhatbuf_r>:
 8008084:	b570      	push	{r4, r5, r6, lr}
 8008086:	460c      	mov	r4, r1
 8008088:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800808c:	2900      	cmp	r1, #0
 800808e:	b096      	sub	sp, #88	@ 0x58
 8008090:	4615      	mov	r5, r2
 8008092:	461e      	mov	r6, r3
 8008094:	da0d      	bge.n	80080b2 <__swhatbuf_r+0x2e>
 8008096:	89a3      	ldrh	r3, [r4, #12]
 8008098:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800809c:	f04f 0100 	mov.w	r1, #0
 80080a0:	bf14      	ite	ne
 80080a2:	2340      	movne	r3, #64	@ 0x40
 80080a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80080a8:	2000      	movs	r0, #0
 80080aa:	6031      	str	r1, [r6, #0]
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	b016      	add	sp, #88	@ 0x58
 80080b0:	bd70      	pop	{r4, r5, r6, pc}
 80080b2:	466a      	mov	r2, sp
 80080b4:	f000 f848 	bl	8008148 <_fstat_r>
 80080b8:	2800      	cmp	r0, #0
 80080ba:	dbec      	blt.n	8008096 <__swhatbuf_r+0x12>
 80080bc:	9901      	ldr	r1, [sp, #4]
 80080be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80080c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80080c6:	4259      	negs	r1, r3
 80080c8:	4159      	adcs	r1, r3
 80080ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80080ce:	e7eb      	b.n	80080a8 <__swhatbuf_r+0x24>

080080d0 <__smakebuf_r>:
 80080d0:	898b      	ldrh	r3, [r1, #12]
 80080d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80080d4:	079d      	lsls	r5, r3, #30
 80080d6:	4606      	mov	r6, r0
 80080d8:	460c      	mov	r4, r1
 80080da:	d507      	bpl.n	80080ec <__smakebuf_r+0x1c>
 80080dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80080e0:	6023      	str	r3, [r4, #0]
 80080e2:	6123      	str	r3, [r4, #16]
 80080e4:	2301      	movs	r3, #1
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	b003      	add	sp, #12
 80080ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ec:	ab01      	add	r3, sp, #4
 80080ee:	466a      	mov	r2, sp
 80080f0:	f7ff ffc8 	bl	8008084 <__swhatbuf_r>
 80080f4:	9f00      	ldr	r7, [sp, #0]
 80080f6:	4605      	mov	r5, r0
 80080f8:	4639      	mov	r1, r7
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff fbba 	bl	8007874 <_malloc_r>
 8008100:	b948      	cbnz	r0, 8008116 <__smakebuf_r+0x46>
 8008102:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008106:	059a      	lsls	r2, r3, #22
 8008108:	d4ee      	bmi.n	80080e8 <__smakebuf_r+0x18>
 800810a:	f023 0303 	bic.w	r3, r3, #3
 800810e:	f043 0302 	orr.w	r3, r3, #2
 8008112:	81a3      	strh	r3, [r4, #12]
 8008114:	e7e2      	b.n	80080dc <__smakebuf_r+0xc>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	6020      	str	r0, [r4, #0]
 800811a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800811e:	81a3      	strh	r3, [r4, #12]
 8008120:	9b01      	ldr	r3, [sp, #4]
 8008122:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008126:	b15b      	cbz	r3, 8008140 <__smakebuf_r+0x70>
 8008128:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800812c:	4630      	mov	r0, r6
 800812e:	f000 f81d 	bl	800816c <_isatty_r>
 8008132:	b128      	cbz	r0, 8008140 <__smakebuf_r+0x70>
 8008134:	89a3      	ldrh	r3, [r4, #12]
 8008136:	f023 0303 	bic.w	r3, r3, #3
 800813a:	f043 0301 	orr.w	r3, r3, #1
 800813e:	81a3      	strh	r3, [r4, #12]
 8008140:	89a3      	ldrh	r3, [r4, #12]
 8008142:	431d      	orrs	r5, r3
 8008144:	81a5      	strh	r5, [r4, #12]
 8008146:	e7cf      	b.n	80080e8 <__smakebuf_r+0x18>

08008148 <_fstat_r>:
 8008148:	b538      	push	{r3, r4, r5, lr}
 800814a:	4d07      	ldr	r5, [pc, #28]	@ (8008168 <_fstat_r+0x20>)
 800814c:	2300      	movs	r3, #0
 800814e:	4604      	mov	r4, r0
 8008150:	4608      	mov	r0, r1
 8008152:	4611      	mov	r1, r2
 8008154:	602b      	str	r3, [r5, #0]
 8008156:	f7f9 feb8 	bl	8001eca <_fstat>
 800815a:	1c43      	adds	r3, r0, #1
 800815c:	d102      	bne.n	8008164 <_fstat_r+0x1c>
 800815e:	682b      	ldr	r3, [r5, #0]
 8008160:	b103      	cbz	r3, 8008164 <_fstat_r+0x1c>
 8008162:	6023      	str	r3, [r4, #0]
 8008164:	bd38      	pop	{r3, r4, r5, pc}
 8008166:	bf00      	nop
 8008168:	200004d8 	.word	0x200004d8

0800816c <_isatty_r>:
 800816c:	b538      	push	{r3, r4, r5, lr}
 800816e:	4d06      	ldr	r5, [pc, #24]	@ (8008188 <_isatty_r+0x1c>)
 8008170:	2300      	movs	r3, #0
 8008172:	4604      	mov	r4, r0
 8008174:	4608      	mov	r0, r1
 8008176:	602b      	str	r3, [r5, #0]
 8008178:	f7f9 feb7 	bl	8001eea <_isatty>
 800817c:	1c43      	adds	r3, r0, #1
 800817e:	d102      	bne.n	8008186 <_isatty_r+0x1a>
 8008180:	682b      	ldr	r3, [r5, #0]
 8008182:	b103      	cbz	r3, 8008186 <_isatty_r+0x1a>
 8008184:	6023      	str	r3, [r4, #0]
 8008186:	bd38      	pop	{r3, r4, r5, pc}
 8008188:	200004d8 	.word	0x200004d8

0800818c <_sbrk_r>:
 800818c:	b538      	push	{r3, r4, r5, lr}
 800818e:	4d06      	ldr	r5, [pc, #24]	@ (80081a8 <_sbrk_r+0x1c>)
 8008190:	2300      	movs	r3, #0
 8008192:	4604      	mov	r4, r0
 8008194:	4608      	mov	r0, r1
 8008196:	602b      	str	r3, [r5, #0]
 8008198:	f7f9 fec0 	bl	8001f1c <_sbrk>
 800819c:	1c43      	adds	r3, r0, #1
 800819e:	d102      	bne.n	80081a6 <_sbrk_r+0x1a>
 80081a0:	682b      	ldr	r3, [r5, #0]
 80081a2:	b103      	cbz	r3, 80081a6 <_sbrk_r+0x1a>
 80081a4:	6023      	str	r3, [r4, #0]
 80081a6:	bd38      	pop	{r3, r4, r5, pc}
 80081a8:	200004d8 	.word	0x200004d8

080081ac <_init>:
 80081ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ae:	bf00      	nop
 80081b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081b2:	bc08      	pop	{r3}
 80081b4:	469e      	mov	lr, r3
 80081b6:	4770      	bx	lr

080081b8 <_fini>:
 80081b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081ba:	bf00      	nop
 80081bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80081be:	bc08      	pop	{r3}
 80081c0:	469e      	mov	lr, r3
 80081c2:	4770      	bx	lr

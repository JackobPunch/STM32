
402LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005954  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005b34  08005b34  00006b34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005c10  08005c10  00007014  2**0
                  CONTENTS
  4 .ARM          00000008  08005c10  08005c10  00006c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005c18  08005c18  00007014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005c18  08005c18  00006c18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005c1c  08005c1c  00006c1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08005c20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0004b87c  20000014  08005c34  00007014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2004b890  08005c34  00007890  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142c0  00000000  00000000  00007044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fbd  00000000  00000000  0001b304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0001e2c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ed9  00000000  00000000  0001f610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023967  00000000  00000000  000204e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016484  00000000  00000000  00043e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000daea3  00000000  00000000  0005a2d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00135177  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050f8  00000000  00000000  001351bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000c9  00000000  00000000  0013a2b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000014 	.word	0x20000014
 80001fc:	00000000 	.word	0x00000000
 8000200:	08005b1c 	.word	0x08005b1c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000018 	.word	0x20000018
 800021c:	08005b1c 	.word	0x08005b1c

08000220 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 8000220:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 8000222:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000226:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 80002b0 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 800022a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 800022e:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 8000232:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 8000234:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 8000236:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 8000238:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 800023a:	d332      	bcc.n	80002a2 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 800023c:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 800023e:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 8000240:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 8000242:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 8000244:	d314      	bcc.n	8000270 <_CheckCase2>

08000246 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 8000246:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 8000248:	19d0      	adds	r0, r2, r7
 800024a:	bf00      	nop

0800024c <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 800024c:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000250:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000254:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000256:	d005      	beq.n	8000264 <_CSDone>
        LDRB     R3,[R1], #+1
 8000258:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800025c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000260:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000262:	d1f3      	bne.n	800024c <_LoopCopyStraight>

08000264 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000264:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000268:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800026a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800026c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800026e:	4770      	bx	lr

08000270 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000270:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000272:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000274:	d319      	bcc.n	80002aa <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000276:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000278:	1b12      	subs	r2, r2, r4

0800027a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800027a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800027e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000282:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000284:	d1f9      	bne.n	800027a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000286:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000288:	d005      	beq.n	8000296 <_No2ChunkNeeded>

0800028a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800028a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800028e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000292:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000294:	d1f9      	bne.n	800028a <_LoopCopyAfterWrapAround>

08000296 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000296:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800029a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800029c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800029e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 80002a0:	4770      	bx	lr

080002a2 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 80002a2:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 80002a4:	3801      	subs	r0, #1
        CMP      R0,R2
 80002a6:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 80002a8:	d2cd      	bcs.n	8000246 <_Case4>

080002aa <_Case3>:
_Case3:
        MOVS     R0,#+0
 80002aa:	2000      	movs	r0, #0
        POP      {R4-R7}
 80002ac:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 80002ae:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80002b0:	2004b2c4 	.word	0x2004b2c4

080002b4 <__aeabi_uldivmod>:
 80002b4:	b953      	cbnz	r3, 80002cc <__aeabi_uldivmod+0x18>
 80002b6:	b94a      	cbnz	r2, 80002cc <__aeabi_uldivmod+0x18>
 80002b8:	2900      	cmp	r1, #0
 80002ba:	bf08      	it	eq
 80002bc:	2800      	cmpeq	r0, #0
 80002be:	bf1c      	itt	ne
 80002c0:	f04f 31ff 	movne.w	r1, #4294967295
 80002c4:	f04f 30ff 	movne.w	r0, #4294967295
 80002c8:	f000 b96a 	b.w	80005a0 <__aeabi_idiv0>
 80002cc:	f1ad 0c08 	sub.w	ip, sp, #8
 80002d0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d4:	f000 f806 	bl	80002e4 <__udivmoddi4>
 80002d8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002e0:	b004      	add	sp, #16
 80002e2:	4770      	bx	lr

080002e4 <__udivmoddi4>:
 80002e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e8:	9d08      	ldr	r5, [sp, #32]
 80002ea:	460c      	mov	r4, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14e      	bne.n	800038e <__udivmoddi4+0xaa>
 80002f0:	4694      	mov	ip, r2
 80002f2:	458c      	cmp	ip, r1
 80002f4:	4686      	mov	lr, r0
 80002f6:	fab2 f282 	clz	r2, r2
 80002fa:	d962      	bls.n	80003c2 <__udivmoddi4+0xde>
 80002fc:	b14a      	cbz	r2, 8000312 <__udivmoddi4+0x2e>
 80002fe:	f1c2 0320 	rsb	r3, r2, #32
 8000302:	4091      	lsls	r1, r2
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	fa0c fc02 	lsl.w	ip, ip, r2
 800030c:	4319      	orrs	r1, r3
 800030e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000312:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000316:	fa1f f68c 	uxth.w	r6, ip
 800031a:	fbb1 f4f7 	udiv	r4, r1, r7
 800031e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000322:	fb07 1114 	mls	r1, r7, r4, r1
 8000326:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800032a:	fb04 f106 	mul.w	r1, r4, r6
 800032e:	4299      	cmp	r1, r3
 8000330:	d90a      	bls.n	8000348 <__udivmoddi4+0x64>
 8000332:	eb1c 0303 	adds.w	r3, ip, r3
 8000336:	f104 30ff 	add.w	r0, r4, #4294967295
 800033a:	f080 8112 	bcs.w	8000562 <__udivmoddi4+0x27e>
 800033e:	4299      	cmp	r1, r3
 8000340:	f240 810f 	bls.w	8000562 <__udivmoddi4+0x27e>
 8000344:	3c02      	subs	r4, #2
 8000346:	4463      	add	r3, ip
 8000348:	1a59      	subs	r1, r3, r1
 800034a:	fa1f f38e 	uxth.w	r3, lr
 800034e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000352:	fb07 1110 	mls	r1, r7, r0, r1
 8000356:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035a:	fb00 f606 	mul.w	r6, r0, r6
 800035e:	429e      	cmp	r6, r3
 8000360:	d90a      	bls.n	8000378 <__udivmoddi4+0x94>
 8000362:	eb1c 0303 	adds.w	r3, ip, r3
 8000366:	f100 31ff 	add.w	r1, r0, #4294967295
 800036a:	f080 80fc 	bcs.w	8000566 <__udivmoddi4+0x282>
 800036e:	429e      	cmp	r6, r3
 8000370:	f240 80f9 	bls.w	8000566 <__udivmoddi4+0x282>
 8000374:	4463      	add	r3, ip
 8000376:	3802      	subs	r0, #2
 8000378:	1b9b      	subs	r3, r3, r6
 800037a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800037e:	2100      	movs	r1, #0
 8000380:	b11d      	cbz	r5, 800038a <__udivmoddi4+0xa6>
 8000382:	40d3      	lsrs	r3, r2
 8000384:	2200      	movs	r2, #0
 8000386:	e9c5 3200 	strd	r3, r2, [r5]
 800038a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038e:	428b      	cmp	r3, r1
 8000390:	d905      	bls.n	800039e <__udivmoddi4+0xba>
 8000392:	b10d      	cbz	r5, 8000398 <__udivmoddi4+0xb4>
 8000394:	e9c5 0100 	strd	r0, r1, [r5]
 8000398:	2100      	movs	r1, #0
 800039a:	4608      	mov	r0, r1
 800039c:	e7f5      	b.n	800038a <__udivmoddi4+0xa6>
 800039e:	fab3 f183 	clz	r1, r3
 80003a2:	2900      	cmp	r1, #0
 80003a4:	d146      	bne.n	8000434 <__udivmoddi4+0x150>
 80003a6:	42a3      	cmp	r3, r4
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xcc>
 80003aa:	4290      	cmp	r0, r2
 80003ac:	f0c0 80f0 	bcc.w	8000590 <__udivmoddi4+0x2ac>
 80003b0:	1a86      	subs	r6, r0, r2
 80003b2:	eb64 0303 	sbc.w	r3, r4, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	2d00      	cmp	r5, #0
 80003ba:	d0e6      	beq.n	800038a <__udivmoddi4+0xa6>
 80003bc:	e9c5 6300 	strd	r6, r3, [r5]
 80003c0:	e7e3      	b.n	800038a <__udivmoddi4+0xa6>
 80003c2:	2a00      	cmp	r2, #0
 80003c4:	f040 8090 	bne.w	80004e8 <__udivmoddi4+0x204>
 80003c8:	eba1 040c 	sub.w	r4, r1, ip
 80003cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	2101      	movs	r1, #1
 80003d6:	fbb4 f6f8 	udiv	r6, r4, r8
 80003da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003de:	fb08 4416 	mls	r4, r8, r6, r4
 80003e2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003e6:	fb07 f006 	mul.w	r0, r7, r6
 80003ea:	4298      	cmp	r0, r3
 80003ec:	d908      	bls.n	8000400 <__udivmoddi4+0x11c>
 80003ee:	eb1c 0303 	adds.w	r3, ip, r3
 80003f2:	f106 34ff 	add.w	r4, r6, #4294967295
 80003f6:	d202      	bcs.n	80003fe <__udivmoddi4+0x11a>
 80003f8:	4298      	cmp	r0, r3
 80003fa:	f200 80cd 	bhi.w	8000598 <__udivmoddi4+0x2b4>
 80003fe:	4626      	mov	r6, r4
 8000400:	1a1c      	subs	r4, r3, r0
 8000402:	fa1f f38e 	uxth.w	r3, lr
 8000406:	fbb4 f0f8 	udiv	r0, r4, r8
 800040a:	fb08 4410 	mls	r4, r8, r0, r4
 800040e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000412:	fb00 f707 	mul.w	r7, r0, r7
 8000416:	429f      	cmp	r7, r3
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x148>
 800041a:	eb1c 0303 	adds.w	r3, ip, r3
 800041e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x146>
 8000424:	429f      	cmp	r7, r3
 8000426:	f200 80b0 	bhi.w	800058a <__udivmoddi4+0x2a6>
 800042a:	4620      	mov	r0, r4
 800042c:	1bdb      	subs	r3, r3, r7
 800042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000432:	e7a5      	b.n	8000380 <__udivmoddi4+0x9c>
 8000434:	f1c1 0620 	rsb	r6, r1, #32
 8000438:	408b      	lsls	r3, r1
 800043a:	fa22 f706 	lsr.w	r7, r2, r6
 800043e:	431f      	orrs	r7, r3
 8000440:	fa20 fc06 	lsr.w	ip, r0, r6
 8000444:	fa04 f301 	lsl.w	r3, r4, r1
 8000448:	ea43 030c 	orr.w	r3, r3, ip
 800044c:	40f4      	lsrs	r4, r6
 800044e:	fa00 f801 	lsl.w	r8, r0, r1
 8000452:	0c38      	lsrs	r0, r7, #16
 8000454:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000458:	fbb4 fef0 	udiv	lr, r4, r0
 800045c:	fa1f fc87 	uxth.w	ip, r7
 8000460:	fb00 441e 	mls	r4, r0, lr, r4
 8000464:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000468:	fb0e f90c 	mul.w	r9, lr, ip
 800046c:	45a1      	cmp	r9, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	d90a      	bls.n	800048a <__udivmoddi4+0x1a6>
 8000474:	193c      	adds	r4, r7, r4
 8000476:	f10e 3aff 	add.w	sl, lr, #4294967295
 800047a:	f080 8084 	bcs.w	8000586 <__udivmoddi4+0x2a2>
 800047e:	45a1      	cmp	r9, r4
 8000480:	f240 8081 	bls.w	8000586 <__udivmoddi4+0x2a2>
 8000484:	f1ae 0e02 	sub.w	lr, lr, #2
 8000488:	443c      	add	r4, r7
 800048a:	eba4 0409 	sub.w	r4, r4, r9
 800048e:	fa1f f983 	uxth.w	r9, r3
 8000492:	fbb4 f3f0 	udiv	r3, r4, r0
 8000496:	fb00 4413 	mls	r4, r0, r3, r4
 800049a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800049e:	fb03 fc0c 	mul.w	ip, r3, ip
 80004a2:	45a4      	cmp	ip, r4
 80004a4:	d907      	bls.n	80004b6 <__udivmoddi4+0x1d2>
 80004a6:	193c      	adds	r4, r7, r4
 80004a8:	f103 30ff 	add.w	r0, r3, #4294967295
 80004ac:	d267      	bcs.n	800057e <__udivmoddi4+0x29a>
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d965      	bls.n	800057e <__udivmoddi4+0x29a>
 80004b2:	3b02      	subs	r3, #2
 80004b4:	443c      	add	r4, r7
 80004b6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004ba:	fba0 9302 	umull	r9, r3, r0, r2
 80004be:	eba4 040c 	sub.w	r4, r4, ip
 80004c2:	429c      	cmp	r4, r3
 80004c4:	46ce      	mov	lr, r9
 80004c6:	469c      	mov	ip, r3
 80004c8:	d351      	bcc.n	800056e <__udivmoddi4+0x28a>
 80004ca:	d04e      	beq.n	800056a <__udivmoddi4+0x286>
 80004cc:	b155      	cbz	r5, 80004e4 <__udivmoddi4+0x200>
 80004ce:	ebb8 030e 	subs.w	r3, r8, lr
 80004d2:	eb64 040c 	sbc.w	r4, r4, ip
 80004d6:	fa04 f606 	lsl.w	r6, r4, r6
 80004da:	40cb      	lsrs	r3, r1
 80004dc:	431e      	orrs	r6, r3
 80004de:	40cc      	lsrs	r4, r1
 80004e0:	e9c5 6400 	strd	r6, r4, [r5]
 80004e4:	2100      	movs	r1, #0
 80004e6:	e750      	b.n	800038a <__udivmoddi4+0xa6>
 80004e8:	f1c2 0320 	rsb	r3, r2, #32
 80004ec:	fa20 f103 	lsr.w	r1, r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa24 f303 	lsr.w	r3, r4, r3
 80004f8:	4094      	lsls	r4, r2
 80004fa:	430c      	orrs	r4, r1
 80004fc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000500:	fa00 fe02 	lsl.w	lr, r0, r2
 8000504:	fa1f f78c 	uxth.w	r7, ip
 8000508:	fbb3 f0f8 	udiv	r0, r3, r8
 800050c:	fb08 3110 	mls	r1, r8, r0, r3
 8000510:	0c23      	lsrs	r3, r4, #16
 8000512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000516:	fb00 f107 	mul.w	r1, r0, r7
 800051a:	4299      	cmp	r1, r3
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x24c>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 36ff 	add.w	r6, r0, #4294967295
 8000526:	d22c      	bcs.n	8000582 <__udivmoddi4+0x29e>
 8000528:	4299      	cmp	r1, r3
 800052a:	d92a      	bls.n	8000582 <__udivmoddi4+0x29e>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1a5b      	subs	r3, r3, r1
 8000532:	b2a4      	uxth	r4, r4
 8000534:	fbb3 f1f8 	udiv	r1, r3, r8
 8000538:	fb08 3311 	mls	r3, r8, r1, r3
 800053c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000540:	fb01 f307 	mul.w	r3, r1, r7
 8000544:	42a3      	cmp	r3, r4
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x276>
 8000548:	eb1c 0404 	adds.w	r4, ip, r4
 800054c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000550:	d213      	bcs.n	800057a <__udivmoddi4+0x296>
 8000552:	42a3      	cmp	r3, r4
 8000554:	d911      	bls.n	800057a <__udivmoddi4+0x296>
 8000556:	3902      	subs	r1, #2
 8000558:	4464      	add	r4, ip
 800055a:	1ae4      	subs	r4, r4, r3
 800055c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000560:	e739      	b.n	80003d6 <__udivmoddi4+0xf2>
 8000562:	4604      	mov	r4, r0
 8000564:	e6f0      	b.n	8000348 <__udivmoddi4+0x64>
 8000566:	4608      	mov	r0, r1
 8000568:	e706      	b.n	8000378 <__udivmoddi4+0x94>
 800056a:	45c8      	cmp	r8, r9
 800056c:	d2ae      	bcs.n	80004cc <__udivmoddi4+0x1e8>
 800056e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000572:	eb63 0c07 	sbc.w	ip, r3, r7
 8000576:	3801      	subs	r0, #1
 8000578:	e7a8      	b.n	80004cc <__udivmoddi4+0x1e8>
 800057a:	4631      	mov	r1, r6
 800057c:	e7ed      	b.n	800055a <__udivmoddi4+0x276>
 800057e:	4603      	mov	r3, r0
 8000580:	e799      	b.n	80004b6 <__udivmoddi4+0x1d2>
 8000582:	4630      	mov	r0, r6
 8000584:	e7d4      	b.n	8000530 <__udivmoddi4+0x24c>
 8000586:	46d6      	mov	lr, sl
 8000588:	e77f      	b.n	800048a <__udivmoddi4+0x1a6>
 800058a:	4463      	add	r3, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e74d      	b.n	800042c <__udivmoddi4+0x148>
 8000590:	4606      	mov	r6, r0
 8000592:	4623      	mov	r3, r4
 8000594:	4608      	mov	r0, r1
 8000596:	e70f      	b.n	80003b8 <__udivmoddi4+0xd4>
 8000598:	3e02      	subs	r6, #2
 800059a:	4463      	add	r3, ip
 800059c:	e730      	b.n	8000400 <__udivmoddi4+0x11c>
 800059e:	bf00      	nop

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b08a      	sub	sp, #40	@ 0x28
 80005a8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005aa:	f000 faef 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ae:	f000 f86b 	bl	8000688 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005b2:	f000 f8c7 	bl	8000744 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  DWT_CTRL |= (1<<0);
 80005b6:	4b2d      	ldr	r3, [pc, #180]	@ (800066c <main+0xc8>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	4a2c      	ldr	r2, [pc, #176]	@ (800066c <main+0xc8>)
 80005bc:	f043 0301 	orr.w	r3, r3, #1
 80005c0:	6013      	str	r3, [r2, #0]

  status = xTaskCreate(led_green_handler, "LED_green_task", 200, NULL, 2, &task1_handle);
 80005c2:	f107 030c 	add.w	r3, r7, #12
 80005c6:	9301      	str	r3, [sp, #4]
 80005c8:	2302      	movs	r3, #2
 80005ca:	9300      	str	r3, [sp, #0]
 80005cc:	2300      	movs	r3, #0
 80005ce:	22c8      	movs	r2, #200	@ 0xc8
 80005d0:	4927      	ldr	r1, [pc, #156]	@ (8000670 <main+0xcc>)
 80005d2:	4828      	ldr	r0, [pc, #160]	@ (8000674 <main+0xd0>)
 80005d4:	f002 f916 	bl	8002804 <xTaskCreate>
 80005d8:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 80005da:	69fb      	ldr	r3, [r7, #28]
 80005dc:	2b01      	cmp	r3, #1
 80005de:	d00b      	beq.n	80005f8 <main+0x54>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80005e4:	f383 8811 	msr	BASEPRI, r3
 80005e8:	f3bf 8f6f 	isb	sy
 80005ec:	f3bf 8f4f 	dsb	sy
 80005f0:	61bb      	str	r3, [r7, #24]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	e7fd      	b.n	80005f4 <main+0x50>

  status = xTaskCreate(led_blue_handler, "LED_blue_task", 200, NULL, 2, &task2_handle);
 80005f8:	f107 0308 	add.w	r3, r7, #8
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2302      	movs	r3, #2
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	2300      	movs	r3, #0
 8000604:	22c8      	movs	r2, #200	@ 0xc8
 8000606:	491c      	ldr	r1, [pc, #112]	@ (8000678 <main+0xd4>)
 8000608:	481c      	ldr	r0, [pc, #112]	@ (800067c <main+0xd8>)
 800060a:	f002 f8fb 	bl	8002804 <xTaskCreate>
 800060e:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000610:	69fb      	ldr	r3, [r7, #28]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00b      	beq.n	800062e <main+0x8a>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	617b      	str	r3, [r7, #20]
    }
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	e7fd      	b.n	800062a <main+0x86>

  status = xTaskCreate(led_red_handler, "LED_red_task", 200, NULL, 2, &task3_handle);
 800062e:	1d3b      	adds	r3, r7, #4
 8000630:	9301      	str	r3, [sp, #4]
 8000632:	2302      	movs	r3, #2
 8000634:	9300      	str	r3, [sp, #0]
 8000636:	2300      	movs	r3, #0
 8000638:	22c8      	movs	r2, #200	@ 0xc8
 800063a:	4911      	ldr	r1, [pc, #68]	@ (8000680 <main+0xdc>)
 800063c:	4811      	ldr	r0, [pc, #68]	@ (8000684 <main+0xe0>)
 800063e:	f002 f8e1 	bl	8002804 <xTaskCreate>
 8000642:	61f8      	str	r0, [r7, #28]

  configASSERT(status == pdPASS);
 8000644:	69fb      	ldr	r3, [r7, #28]
 8000646:	2b01      	cmp	r3, #1
 8000648:	d00b      	beq.n	8000662 <main+0xbe>
        __asm volatile
 800064a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800064e:	f383 8811 	msr	BASEPRI, r3
 8000652:	f3bf 8f6f 	isb	sy
 8000656:	f3bf 8f4f 	dsb	sy
 800065a:	613b      	str	r3, [r7, #16]
    }
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	e7fd      	b.n	800065e <main+0xba>

  //Start the FreeRTOS scheduler
  vTaskStartScheduler();
 8000662:	f002 fa59 	bl	8002b18 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000666:	bf00      	nop
 8000668:	e7fd      	b.n	8000666 <main+0xc2>
 800066a:	bf00      	nop
 800066c:	e0001000 	.word	0xe0001000
 8000670:	08005b34 	.word	0x08005b34
 8000674:	080008ed 	.word	0x080008ed
 8000678:	08005b44 	.word	0x08005b44
 800067c:	0800090d 	.word	0x0800090d
 8000680:	08005b54 	.word	0x08005b54
 8000684:	0800092d 	.word	0x0800092d

08000688 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b094      	sub	sp, #80	@ 0x50
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	f107 031c 	add.w	r3, r7, #28
 8000692:	2234      	movs	r2, #52	@ 0x34
 8000694:	2100      	movs	r1, #0
 8000696:	4618      	mov	r0, r3
 8000698:	f005 fa06 	bl	8005aa8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069c:	f107 0308 	add.w	r3, r7, #8
 80006a0:	2200      	movs	r2, #0
 80006a2:	601a      	str	r2, [r3, #0]
 80006a4:	605a      	str	r2, [r3, #4]
 80006a6:	609a      	str	r2, [r3, #8]
 80006a8:	60da      	str	r2, [r3, #12]
 80006aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ac:	2300      	movs	r3, #0
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	4b22      	ldr	r3, [pc, #136]	@ (800073c <SystemClock_Config+0xb4>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	4a21      	ldr	r2, [pc, #132]	@ (800073c <SystemClock_Config+0xb4>)
 80006b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ba:	6413      	str	r3, [r2, #64]	@ 0x40
 80006bc:	4b1f      	ldr	r3, [pc, #124]	@ (800073c <SystemClock_Config+0xb4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006c4:	607b      	str	r3, [r7, #4]
 80006c6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c8:	2300      	movs	r3, #0
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <SystemClock_Config+0xb8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	4a1b      	ldr	r2, [pc, #108]	@ (8000740 <SystemClock_Config+0xb8>)
 80006d2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006d6:	6013      	str	r3, [r2, #0]
 80006d8:	4b19      	ldr	r3, [pc, #100]	@ (8000740 <SystemClock_Config+0xb8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006e0:	603b      	str	r3, [r7, #0]
 80006e2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e4:	2302      	movs	r3, #2
 80006e6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e8:	2301      	movs	r3, #1
 80006ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006ec:	2310      	movs	r3, #16
 80006ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006f0:	2300      	movs	r3, #0
 80006f2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006f4:	f107 031c 	add.w	r3, r7, #28
 80006f8:	4618      	mov	r0, r3
 80006fa:	f000 ff95 	bl	8001628 <HAL_RCC_OscConfig>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d001      	beq.n	8000708 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000704:	f000 f936 	bl	8000974 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000708:	230f      	movs	r3, #15
 800070a:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800070c:	2300      	movs	r3, #0
 800070e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000710:	2300      	movs	r3, #0
 8000712:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000718:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800071a:	2300      	movs	r3, #0
 800071c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800071e:	f107 0308 	add.w	r3, r7, #8
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f000 fd41 	bl	80011ac <HAL_RCC_ClockConfig>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8000730:	f000 f920 	bl	8000974 <Error_Handler>
  }
}
 8000734:	bf00      	nop
 8000736:	3750      	adds	r7, #80	@ 0x50
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	40023800 	.word	0x40023800
 8000740:	40007000 	.word	0x40007000

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b08c      	sub	sp, #48	@ 0x30
 8000748:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074a:	f107 031c 	add.w	r3, r7, #28
 800074e:	2200      	movs	r2, #0
 8000750:	601a      	str	r2, [r3, #0]
 8000752:	605a      	str	r2, [r3, #4]
 8000754:	609a      	str	r2, [r3, #8]
 8000756:	60da      	str	r2, [r3, #12]
 8000758:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	61bb      	str	r3, [r7, #24]
 800075e:	4b5d      	ldr	r3, [pc, #372]	@ (80008d4 <MX_GPIO_Init+0x190>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a5c      	ldr	r2, [pc, #368]	@ (80008d4 <MX_GPIO_Init+0x190>)
 8000764:	f043 0304 	orr.w	r3, r3, #4
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b5a      	ldr	r3, [pc, #360]	@ (80008d4 <MX_GPIO_Init+0x190>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f003 0304 	and.w	r3, r3, #4
 8000772:	61bb      	str	r3, [r7, #24]
 8000774:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	4b56      	ldr	r3, [pc, #344]	@ (80008d4 <MX_GPIO_Init+0x190>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800077e:	4a55      	ldr	r2, [pc, #340]	@ (80008d4 <MX_GPIO_Init+0x190>)
 8000780:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000784:	6313      	str	r3, [r2, #48]	@ 0x30
 8000786:	4b53      	ldr	r3, [pc, #332]	@ (80008d4 <MX_GPIO_Init+0x190>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800078a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	613b      	str	r3, [r7, #16]
 8000796:	4b4f      	ldr	r3, [pc, #316]	@ (80008d4 <MX_GPIO_Init+0x190>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800079a:	4a4e      	ldr	r2, [pc, #312]	@ (80008d4 <MX_GPIO_Init+0x190>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80007a2:	4b4c      	ldr	r3, [pc, #304]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	2300      	movs	r3, #0
 80007b0:	60fb      	str	r3, [r7, #12]
 80007b2:	4b48      	ldr	r3, [pc, #288]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007b6:	4a47      	ldr	r2, [pc, #284]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007b8:	f043 0308 	orr.w	r3, r3, #8
 80007bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80007be:	4b45      	ldr	r3, [pc, #276]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	f003 0308 	and.w	r3, r3, #8
 80007c6:	60fb      	str	r3, [r7, #12]
 80007c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ca:	2300      	movs	r3, #0
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	4b41      	ldr	r3, [pc, #260]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007d2:	4a40      	ldr	r2, [pc, #256]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007d4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80007d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007da:	4b3e      	ldr	r3, [pc, #248]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e2:	60bb      	str	r3, [r7, #8]
 80007e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2300      	movs	r3, #0
 80007e8:	607b      	str	r3, [r7, #4]
 80007ea:	4b3a      	ldr	r3, [pc, #232]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ee:	4a39      	ldr	r2, [pc, #228]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007f0:	f043 0301 	orr.w	r3, r3, #1
 80007f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007f6:	4b37      	ldr	r3, [pc, #220]	@ (80008d4 <MX_GPIO_Init+0x190>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	f003 0301 	and.w	r3, r3, #1
 80007fe:	607b      	str	r3, [r7, #4]
 8000800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000802:	2200      	movs	r2, #0
 8000804:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000808:	4833      	ldr	r0, [pc, #204]	@ (80008d8 <MX_GPIO_Init+0x194>)
 800080a:	f000 fc9b 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800080e:	2200      	movs	r2, #0
 8000810:	2140      	movs	r1, #64	@ 0x40
 8000812:	4832      	ldr	r0, [pc, #200]	@ (80008dc <MX_GPIO_Init+0x198>)
 8000814:	f000 fc96 	bl	8001144 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000818:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800081c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000828:	f107 031c 	add.w	r3, r7, #28
 800082c:	4619      	mov	r1, r3
 800082e:	482c      	ldr	r0, [pc, #176]	@ (80008e0 <MX_GPIO_Init+0x19c>)
 8000830:	f000 faf4 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000834:	f244 0381 	movw	r3, #16513	@ 0x4081
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800083a:	2301      	movs	r3, #1
 800083c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083e:	2300      	movs	r3, #0
 8000840:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000842:	2300      	movs	r3, #0
 8000844:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	4619      	mov	r1, r3
 800084c:	4822      	ldr	r0, [pc, #136]	@ (80008d8 <MX_GPIO_Init+0x194>)
 800084e:	f000 fae5 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000852:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000856:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000858:	2302      	movs	r3, #2
 800085a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085c:	2300      	movs	r3, #0
 800085e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000860:	2303      	movs	r3, #3
 8000862:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000864:	2307      	movs	r3, #7
 8000866:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000868:	f107 031c 	add.w	r3, r7, #28
 800086c:	4619      	mov	r1, r3
 800086e:	481d      	ldr	r0, [pc, #116]	@ (80008e4 <MX_GPIO_Init+0x1a0>)
 8000870:	f000 fad4 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000874:	2340      	movs	r3, #64	@ 0x40
 8000876:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000878:	2301      	movs	r3, #1
 800087a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087c:	2300      	movs	r3, #0
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000880:	2300      	movs	r3, #0
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000884:	f107 031c 	add.w	r3, r7, #28
 8000888:	4619      	mov	r1, r3
 800088a:	4814      	ldr	r0, [pc, #80]	@ (80008dc <MX_GPIO_Init+0x198>)
 800088c:	f000 fac6 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000890:	2380      	movs	r3, #128	@ 0x80
 8000892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000894:	2300      	movs	r3, #0
 8000896:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000898:	2300      	movs	r3, #0
 800089a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800089c:	f107 031c 	add.w	r3, r7, #28
 80008a0:	4619      	mov	r1, r3
 80008a2:	480e      	ldr	r0, [pc, #56]	@ (80008dc <MX_GPIO_Init+0x198>)
 80008a4:	f000 faba 	bl	8000e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008a8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80008ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ae:	2302      	movs	r3, #2
 80008b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008b2:	2300      	movs	r3, #0
 80008b4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008b6:	2303      	movs	r3, #3
 80008b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008ba:	230a      	movs	r3, #10
 80008bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008be:	f107 031c 	add.w	r3, r7, #28
 80008c2:	4619      	mov	r1, r3
 80008c4:	4808      	ldr	r0, [pc, #32]	@ (80008e8 <MX_GPIO_Init+0x1a4>)
 80008c6:	f000 faa9 	bl	8000e1c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ca:	bf00      	nop
 80008cc:	3730      	adds	r7, #48	@ 0x30
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	40023800 	.word	0x40023800
 80008d8:	40020400 	.word	0x40020400
 80008dc:	40021800 	.word	0x40021800
 80008e0:	40020800 	.word	0x40020800
 80008e4:	40020c00 	.word	0x40020c00
 80008e8:	40020000 	.word	0x40020000

080008ec <led_green_handler>:

/* USER CODE BEGIN 4 */
static void led_green_handler(void* parameters){
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	while(1){
		//SEGGER_SYSVIEW_PrintfTarget("Toggling green LED");
		HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 80008f4:	2101      	movs	r1, #1
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <led_green_handler+0x1c>)
 80008f8:	f000 fc3d 	bl	8001176 <HAL_GPIO_TogglePin>
		HAL_Delay(1000);
 80008fc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000900:	f000 f986 	bl	8000c10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,LD1_Pin);
 8000904:	bf00      	nop
 8000906:	e7f5      	b.n	80008f4 <led_green_handler+0x8>
 8000908:	40020400 	.word	0x40020400

0800090c <led_blue_handler>:
		//taskYIELD();
	}
}

static void led_blue_handler(void* parameters){
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	while(1){
		//SEGGER_SYSVIEW_PrintfTarget("Toggling blue LED");
		HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 8000914:	2180      	movs	r1, #128	@ 0x80
 8000916:	4804      	ldr	r0, [pc, #16]	@ (8000928 <led_blue_handler+0x1c>)
 8000918:	f000 fc2d 	bl	8001176 <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 800091c:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000920:	f000 f976 	bl	8000c10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,LD2_Pin);
 8000924:	bf00      	nop
 8000926:	e7f5      	b.n	8000914 <led_blue_handler+0x8>
 8000928:	40020400 	.word	0x40020400

0800092c <led_red_handler>:
		//taskYIELD();
	}
}

static void led_red_handler(void* parameters){
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	while(1){
		//SEGGER_SYSVIEW_PrintfTarget("Toggling red LED");
		HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
 8000934:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000938:	4804      	ldr	r0, [pc, #16]	@ (800094c <led_red_handler+0x20>)
 800093a:	f000 fc1c 	bl	8001176 <HAL_GPIO_TogglePin>
		HAL_Delay(400);
 800093e:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8000942:	f000 f965 	bl	8000c10 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB,LD3_Pin);
 8000946:	bf00      	nop
 8000948:	e7f4      	b.n	8000934 <led_red_handler+0x8>
 800094a:	bf00      	nop
 800094c:	40020400 	.word	0x40020400

08000950 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a04      	ldr	r2, [pc, #16]	@ (8000970 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800095e:	4293      	cmp	r3, r2
 8000960:	d101      	bne.n	8000966 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000962:	f000 f935 	bl	8000bd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40001000 	.word	0x40001000

08000974 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000978:	b672      	cpsid	i
}
 800097a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <Error_Handler+0x8>

08000980 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
 800098a:	4b10      	ldr	r3, [pc, #64]	@ (80009cc <HAL_MspInit+0x4c>)
 800098c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800098e:	4a0f      	ldr	r2, [pc, #60]	@ (80009cc <HAL_MspInit+0x4c>)
 8000990:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000994:	6453      	str	r3, [r2, #68]	@ 0x44
 8000996:	4b0d      	ldr	r3, [pc, #52]	@ (80009cc <HAL_MspInit+0x4c>)
 8000998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800099a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800099e:	607b      	str	r3, [r7, #4]
 80009a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	4b09      	ldr	r3, [pc, #36]	@ (80009cc <HAL_MspInit+0x4c>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009aa:	4a08      	ldr	r2, [pc, #32]	@ (80009cc <HAL_MspInit+0x4c>)
 80009ac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009b2:	4b06      	ldr	r3, [pc, #24]	@ (80009cc <HAL_MspInit+0x4c>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ba:	603b      	str	r3, [r7, #0]
 80009bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */
  vInitPrioGroupValue();
 80009be:	f003 fa95 	bl	8003eec <vInitPrioGroupValue>
  /* USER CODE END MspInit 1 */
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	40023800 	.word	0x40023800

080009d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b08e      	sub	sp, #56	@ 0x38
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80009d8:	2300      	movs	r3, #0
 80009da:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80009dc:	2300      	movs	r3, #0
 80009de:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	4b33      	ldr	r3, [pc, #204]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e8:	4a32      	ldr	r2, [pc, #200]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009ea:	f043 0310 	orr.w	r3, r3, #16
 80009ee:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f0:	4b30      	ldr	r3, [pc, #192]	@ (8000ab4 <HAL_InitTick+0xe4>)
 80009f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f4:	f003 0310 	and.w	r3, r3, #16
 80009f8:	60fb      	str	r3, [r7, #12]
 80009fa:	68fb      	ldr	r3, [r7, #12]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009fc:	f107 0210 	add.w	r2, r7, #16
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4611      	mov	r1, r2
 8000a06:	4618      	mov	r0, r3
 8000a08:	f000 fddc 	bl	80015c4 <HAL_RCC_GetClockConfig>
  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000a0c:	6a3b      	ldr	r3, [r7, #32]
 8000a0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000a10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d103      	bne.n	8000a1e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000a16:	f000 fdc1 	bl	800159c <HAL_RCC_GetPCLK1Freq>
 8000a1a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000a1c:	e004      	b.n	8000a28 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000a1e:	f000 fdbd 	bl	800159c <HAL_RCC_GetPCLK1Freq>
 8000a22:	4603      	mov	r3, r0
 8000a24:	005b      	lsls	r3, r3, #1
 8000a26:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000a28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000a2a:	4a23      	ldr	r2, [pc, #140]	@ (8000ab8 <HAL_InitTick+0xe8>)
 8000a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000a30:	0c9b      	lsrs	r3, r3, #18
 8000a32:	3b01      	subs	r3, #1
 8000a34:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a36:	4b21      	ldr	r3, [pc, #132]	@ (8000abc <HAL_InitTick+0xec>)
 8000a38:	4a21      	ldr	r2, [pc, #132]	@ (8000ac0 <HAL_InitTick+0xf0>)
 8000a3a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	@ (8000abc <HAL_InitTick+0xec>)
 8000a3e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000a42:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a44:	4a1d      	ldr	r2, [pc, #116]	@ (8000abc <HAL_InitTick+0xec>)
 8000a46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000a48:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a4a:	4b1c      	ldr	r3, [pc, #112]	@ (8000abc <HAL_InitTick+0xec>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b1a      	ldr	r3, [pc, #104]	@ (8000abc <HAL_InitTick+0xec>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a56:	4b19      	ldr	r3, [pc, #100]	@ (8000abc <HAL_InitTick+0xec>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a5c:	4817      	ldr	r0, [pc, #92]	@ (8000abc <HAL_InitTick+0xec>)
 8000a5e:	f001 f867 	bl	8001b30 <HAL_TIM_Base_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000a68:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d11b      	bne.n	8000aa8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a70:	4812      	ldr	r0, [pc, #72]	@ (8000abc <HAL_InitTick+0xec>)
 8000a72:	f001 f8b7 	bl	8001be4 <HAL_TIM_Base_Start_IT>
 8000a76:	4603      	mov	r3, r0
 8000a78:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000a7c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d111      	bne.n	8000aa8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a84:	2036      	movs	r0, #54	@ 0x36
 8000a86:	f000 f9bb 	bl	8000e00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a8a:	687b      	ldr	r3, [r7, #4]
 8000a8c:	2b0f      	cmp	r3, #15
 8000a8e:	d808      	bhi.n	8000aa2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a90:	2200      	movs	r2, #0
 8000a92:	6879      	ldr	r1, [r7, #4]
 8000a94:	2036      	movs	r0, #54	@ 0x36
 8000a96:	f000 f997 	bl	8000dc8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8000ac4 <HAL_InitTick+0xf4>)
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	6013      	str	r3, [r2, #0]
 8000aa0:	e002      	b.n	8000aa8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000aa2:	2301      	movs	r3, #1
 8000aa4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000aa8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3738      	adds	r7, #56	@ 0x38
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40023800 	.word	0x40023800
 8000ab8:	431bde83 	.word	0x431bde83
 8000abc:	20000030 	.word	0x20000030
 8000ac0:	40001000 	.word	0x40001000
 8000ac4:	20000004 	.word	0x20000004

08000ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000acc:	bf00      	nop
 8000ace:	e7fd      	b.n	8000acc <NMI_Handler+0x4>

08000ad0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ad4:	bf00      	nop
 8000ad6:	e7fd      	b.n	8000ad4 <HardFault_Handler+0x4>

08000ad8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000adc:	bf00      	nop
 8000ade:	e7fd      	b.n	8000adc <MemManage_Handler+0x4>

08000ae0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ae4:	bf00      	nop
 8000ae6:	e7fd      	b.n	8000ae4 <BusFault_Handler+0x4>

08000ae8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aec:	bf00      	nop
 8000aee:	e7fd      	b.n	8000aec <UsageFault_Handler+0x4>

08000af0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000af0:	b480      	push	{r7}
 8000af2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000af4:	bf00      	nop
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
	...

08000b00 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000b04:	4802      	ldr	r0, [pc, #8]	@ (8000b10 <TIM6_DAC_IRQHandler+0x10>)
 8000b06:	f001 f8dd 	bl	8001cc4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000030 	.word	0x20000030

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8000b38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b70 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000b3c:	f7ff ffea 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b40:	480c      	ldr	r0, [pc, #48]	@ (8000b74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b42:	490d      	ldr	r1, [pc, #52]	@ (8000b78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b44:	4a0d      	ldr	r2, [pc, #52]	@ (8000b7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b48:	e002      	b.n	8000b50 <LoopCopyDataInit>

08000b4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b4e:	3304      	adds	r3, #4

08000b50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b54:	d3f9      	bcc.n	8000b4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b56:	4a0a      	ldr	r2, [pc, #40]	@ (8000b80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b58:	4c0a      	ldr	r4, [pc, #40]	@ (8000b84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b5c:	e001      	b.n	8000b62 <LoopFillZerobss>

08000b5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b60:	3204      	adds	r2, #4

08000b62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b64:	d3fb      	bcc.n	8000b5e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000b66:	f004 ffa7 	bl	8005ab8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b6a:	f7ff fd1b 	bl	80005a4 <main>
  bx  lr    
 8000b6e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000b70:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b78:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000b7c:	08005c20 	.word	0x08005c20
  ldr r2, =_sbss
 8000b80:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8000b84:	2004b890 	.word	0x2004b890

08000b88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b88:	e7fe      	b.n	8000b88 <ADC_IRQHandler>
	...

08000b8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b90:	4b0e      	ldr	r3, [pc, #56]	@ (8000bcc <HAL_Init+0x40>)
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4a0d      	ldr	r2, [pc, #52]	@ (8000bcc <HAL_Init+0x40>)
 8000b96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000b9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <HAL_Init+0x40>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a0a      	ldr	r2, [pc, #40]	@ (8000bcc <HAL_Init+0x40>)
 8000ba2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000ba6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba8:	4b08      	ldr	r3, [pc, #32]	@ (8000bcc <HAL_Init+0x40>)
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <HAL_Init+0x40>)
 8000bae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb4:	2003      	movs	r0, #3
 8000bb6:	f000 f8fc 	bl	8000db2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bba:	200f      	movs	r0, #15
 8000bbc:	f7ff ff08 	bl	80009d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bc0:	f7ff fede 	bl	8000980 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc4:	2300      	movs	r3, #0
}
 8000bc6:	4618      	mov	r0, r3
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023c00 	.word	0x40023c00

08000bd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bd4:	4b06      	ldr	r3, [pc, #24]	@ (8000bf0 <HAL_IncTick+0x20>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4b06      	ldr	r3, [pc, #24]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4413      	add	r3, r2
 8000be0:	4a04      	ldr	r2, [pc, #16]	@ (8000bf4 <HAL_IncTick+0x24>)
 8000be2:	6013      	str	r3, [r2, #0]
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000078 	.word	0x20000078

08000bf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  return uwTick;
 8000bfc:	4b03      	ldr	r3, [pc, #12]	@ (8000c0c <HAL_GetTick+0x14>)
 8000bfe:	681b      	ldr	r3, [r3, #0]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	46bd      	mov	sp, r7
 8000c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	20000078 	.word	0x20000078

08000c10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b084      	sub	sp, #16
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c18:	f7ff ffee 	bl	8000bf8 <HAL_GetTick>
 8000c1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c28:	d005      	beq.n	8000c36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c54 <HAL_Delay+0x44>)
 8000c2c:	781b      	ldrb	r3, [r3, #0]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	4413      	add	r3, r2
 8000c34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c36:	bf00      	nop
 8000c38:	f7ff ffde 	bl	8000bf8 <HAL_GetTick>
 8000c3c:	4602      	mov	r2, r0
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	1ad3      	subs	r3, r2, r3
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	429a      	cmp	r2, r3
 8000c46:	d8f7      	bhi.n	8000c38 <HAL_Delay+0x28>
  {
  }
}
 8000c48:	bf00      	nop
 8000c4a:	bf00      	nop
 8000c4c:	3710      	adds	r7, #16
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008

08000c58 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c68:	4b0c      	ldr	r3, [pc, #48]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c6a:	68db      	ldr	r3, [r3, #12]
 8000c6c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c6e:	68ba      	ldr	r2, [r7, #8]
 8000c70:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c74:	4013      	ands	r3, r2
 8000c76:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c7c:	68bb      	ldr	r3, [r7, #8]
 8000c7e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c80:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c88:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c8a:	4a04      	ldr	r2, [pc, #16]	@ (8000c9c <__NVIC_SetPriorityGrouping+0x44>)
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	60d3      	str	r3, [r2, #12]
}
 8000c90:	bf00      	nop
 8000c92:	3714      	adds	r7, #20
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca4:	4b04      	ldr	r3, [pc, #16]	@ (8000cb8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	0a1b      	lsrs	r3, r3, #8
 8000caa:	f003 0307 	and.w	r3, r3, #7
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	db0b      	blt.n	8000ce6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cce:	79fb      	ldrb	r3, [r7, #7]
 8000cd0:	f003 021f 	and.w	r2, r3, #31
 8000cd4:	4907      	ldr	r1, [pc, #28]	@ (8000cf4 <__NVIC_EnableIRQ+0x38>)
 8000cd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cda:	095b      	lsrs	r3, r3, #5
 8000cdc:	2001      	movs	r0, #1
 8000cde:	fa00 f202 	lsl.w	r2, r0, r2
 8000ce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	e000e100 	.word	0xe000e100

08000cf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	6039      	str	r1, [r7, #0]
 8000d02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	db0a      	blt.n	8000d22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d0c:	683b      	ldr	r3, [r7, #0]
 8000d0e:	b2da      	uxtb	r2, r3
 8000d10:	490c      	ldr	r1, [pc, #48]	@ (8000d44 <__NVIC_SetPriority+0x4c>)
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	0112      	lsls	r2, r2, #4
 8000d18:	b2d2      	uxtb	r2, r2
 8000d1a:	440b      	add	r3, r1
 8000d1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d20:	e00a      	b.n	8000d38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	b2da      	uxtb	r2, r3
 8000d26:	4908      	ldr	r1, [pc, #32]	@ (8000d48 <__NVIC_SetPriority+0x50>)
 8000d28:	79fb      	ldrb	r3, [r7, #7]
 8000d2a:	f003 030f 	and.w	r3, r3, #15
 8000d2e:	3b04      	subs	r3, #4
 8000d30:	0112      	lsls	r2, r2, #4
 8000d32:	b2d2      	uxtb	r2, r2
 8000d34:	440b      	add	r3, r1
 8000d36:	761a      	strb	r2, [r3, #24]
}
 8000d38:	bf00      	nop
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000e100 	.word	0xe000e100
 8000d48:	e000ed00 	.word	0xe000ed00

08000d4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	b089      	sub	sp, #36	@ 0x24
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	60f8      	str	r0, [r7, #12]
 8000d54:	60b9      	str	r1, [r7, #8]
 8000d56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	f003 0307 	and.w	r3, r3, #7
 8000d5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	f1c3 0307 	rsb	r3, r3, #7
 8000d66:	2b04      	cmp	r3, #4
 8000d68:	bf28      	it	cs
 8000d6a:	2304      	movcs	r3, #4
 8000d6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	3304      	adds	r3, #4
 8000d72:	2b06      	cmp	r3, #6
 8000d74:	d902      	bls.n	8000d7c <NVIC_EncodePriority+0x30>
 8000d76:	69fb      	ldr	r3, [r7, #28]
 8000d78:	3b03      	subs	r3, #3
 8000d7a:	e000      	b.n	8000d7e <NVIC_EncodePriority+0x32>
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	f04f 32ff 	mov.w	r2, #4294967295
 8000d84:	69bb      	ldr	r3, [r7, #24]
 8000d86:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8a:	43da      	mvns	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	401a      	ands	r2, r3
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d94:	f04f 31ff 	mov.w	r1, #4294967295
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d9e:	43d9      	mvns	r1, r3
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da4:	4313      	orrs	r3, r2
         );
}
 8000da6:	4618      	mov	r0, r3
 8000da8:	3724      	adds	r7, #36	@ 0x24
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff ff4c 	bl	8000c58 <__NVIC_SetPriorityGrouping>
}
 8000dc0:	bf00      	nop
 8000dc2:	3708      	adds	r7, #8
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b086      	sub	sp, #24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
 8000dd4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dda:	f7ff ff61 	bl	8000ca0 <__NVIC_GetPriorityGrouping>
 8000dde:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000de0:	687a      	ldr	r2, [r7, #4]
 8000de2:	68b9      	ldr	r1, [r7, #8]
 8000de4:	6978      	ldr	r0, [r7, #20]
 8000de6:	f7ff ffb1 	bl	8000d4c <NVIC_EncodePriority>
 8000dea:	4602      	mov	r2, r0
 8000dec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000df0:	4611      	mov	r1, r2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f7ff ff80 	bl	8000cf8 <__NVIC_SetPriority>
}
 8000df8:	bf00      	nop
 8000dfa:	3718      	adds	r7, #24
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff54 	bl	8000cbc <__NVIC_EnableIRQ>
}
 8000e14:	bf00      	nop
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	b089      	sub	sp, #36	@ 0x24
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	6078      	str	r0, [r7, #4]
 8000e24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e26:	2300      	movs	r3, #0
 8000e28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e32:	2300      	movs	r3, #0
 8000e34:	61fb      	str	r3, [r7, #28]
 8000e36:	e165      	b.n	8001104 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e38:	2201      	movs	r2, #1
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	697a      	ldr	r2, [r7, #20]
 8000e48:	4013      	ands	r3, r2
 8000e4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e4c:	693a      	ldr	r2, [r7, #16]
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	f040 8154 	bne.w	80010fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	685b      	ldr	r3, [r3, #4]
 8000e5a:	f003 0303 	and.w	r3, r3, #3
 8000e5e:	2b01      	cmp	r3, #1
 8000e60:	d005      	beq.n	8000e6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d130      	bne.n	8000ed0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e74:	69fb      	ldr	r3, [r7, #28]
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	2203      	movs	r2, #3
 8000e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7e:	43db      	mvns	r3, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4013      	ands	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e86:	683b      	ldr	r3, [r7, #0]
 8000e88:	68da      	ldr	r2, [r3, #12]
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	69ba      	ldr	r2, [r7, #24]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	69ba      	ldr	r2, [r7, #24]
 8000e9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eac:	43db      	mvns	r3, r3
 8000eae:	69ba      	ldr	r2, [r7, #24]
 8000eb0:	4013      	ands	r3, r2
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	685b      	ldr	r3, [r3, #4]
 8000eb8:	091b      	lsrs	r3, r3, #4
 8000eba:	f003 0201 	and.w	r2, r3, #1
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4313      	orrs	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b03      	cmp	r3, #3
 8000eda:	d017      	beq.n	8000f0c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	2203      	movs	r2, #3
 8000ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8000eec:	43db      	mvns	r3, r3
 8000eee:	69ba      	ldr	r2, [r7, #24]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	689a      	ldr	r2, [r3, #8]
 8000ef8:	69fb      	ldr	r3, [r7, #28]
 8000efa:	005b      	lsls	r3, r3, #1
 8000efc:	fa02 f303 	lsl.w	r3, r2, r3
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	4313      	orrs	r3, r2
 8000f04:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	685b      	ldr	r3, [r3, #4]
 8000f10:	f003 0303 	and.w	r3, r3, #3
 8000f14:	2b02      	cmp	r3, #2
 8000f16:	d123      	bne.n	8000f60 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	08da      	lsrs	r2, r3, #3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	3208      	adds	r2, #8
 8000f20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f24:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f26:	69fb      	ldr	r3, [r7, #28]
 8000f28:	f003 0307 	and.w	r3, r3, #7
 8000f2c:	009b      	lsls	r3, r3, #2
 8000f2e:	220f      	movs	r2, #15
 8000f30:	fa02 f303 	lsl.w	r3, r2, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4013      	ands	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	691a      	ldr	r2, [r3, #16]
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	009b      	lsls	r3, r3, #2
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f52:	69fb      	ldr	r3, [r7, #28]
 8000f54:	08da      	lsrs	r2, r3, #3
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3208      	adds	r2, #8
 8000f5a:	69b9      	ldr	r1, [r7, #24]
 8000f5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f66:	69fb      	ldr	r3, [r7, #28]
 8000f68:	005b      	lsls	r3, r3, #1
 8000f6a:	2203      	movs	r2, #3
 8000f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f70:	43db      	mvns	r3, r3
 8000f72:	69ba      	ldr	r2, [r7, #24]
 8000f74:	4013      	ands	r3, r2
 8000f76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0203 	and.w	r2, r3, #3
 8000f80:	69fb      	ldr	r3, [r7, #28]
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	fa02 f303 	lsl.w	r3, r2, r3
 8000f88:	69ba      	ldr	r2, [r7, #24]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	f000 80ae 	beq.w	80010fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	4a5c      	ldr	r2, [pc, #368]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fb2:	4b5a      	ldr	r3, [pc, #360]	@ (800111c <HAL_GPIO_Init+0x300>)
 8000fb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000fbe:	4a58      	ldr	r2, [pc, #352]	@ (8001120 <HAL_GPIO_Init+0x304>)
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	089b      	lsrs	r3, r3, #2
 8000fc4:	3302      	adds	r3, #2
 8000fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fcc:	69fb      	ldr	r3, [r7, #28]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	009b      	lsls	r3, r3, #2
 8000fd4:	220f      	movs	r2, #15
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	4a4f      	ldr	r2, [pc, #316]	@ (8001124 <HAL_GPIO_Init+0x308>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d025      	beq.n	8001036 <HAL_GPIO_Init+0x21a>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4a4e      	ldr	r2, [pc, #312]	@ (8001128 <HAL_GPIO_Init+0x30c>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d01f      	beq.n	8001032 <HAL_GPIO_Init+0x216>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4a4d      	ldr	r2, [pc, #308]	@ (800112c <HAL_GPIO_Init+0x310>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d019      	beq.n	800102e <HAL_GPIO_Init+0x212>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	@ (8001130 <HAL_GPIO_Init+0x314>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d013      	beq.n	800102a <HAL_GPIO_Init+0x20e>
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4a4b      	ldr	r2, [pc, #300]	@ (8001134 <HAL_GPIO_Init+0x318>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d00d      	beq.n	8001026 <HAL_GPIO_Init+0x20a>
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	4a4a      	ldr	r2, [pc, #296]	@ (8001138 <HAL_GPIO_Init+0x31c>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d007      	beq.n	8001022 <HAL_GPIO_Init+0x206>
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	4a49      	ldr	r2, [pc, #292]	@ (800113c <HAL_GPIO_Init+0x320>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d101      	bne.n	800101e <HAL_GPIO_Init+0x202>
 800101a:	2306      	movs	r3, #6
 800101c:	e00c      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800101e:	2307      	movs	r3, #7
 8001020:	e00a      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001022:	2305      	movs	r3, #5
 8001024:	e008      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001026:	2304      	movs	r3, #4
 8001028:	e006      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102a:	2303      	movs	r3, #3
 800102c:	e004      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 800102e:	2302      	movs	r3, #2
 8001030:	e002      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001032:	2301      	movs	r3, #1
 8001034:	e000      	b.n	8001038 <HAL_GPIO_Init+0x21c>
 8001036:	2300      	movs	r3, #0
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	f002 0203 	and.w	r2, r2, #3
 800103e:	0092      	lsls	r2, r2, #2
 8001040:	4093      	lsls	r3, r2
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4313      	orrs	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001048:	4935      	ldr	r1, [pc, #212]	@ (8001120 <HAL_GPIO_Init+0x304>)
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	089b      	lsrs	r3, r3, #2
 800104e:	3302      	adds	r3, #2
 8001050:	69ba      	ldr	r2, [r7, #24]
 8001052:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001056:	4b3a      	ldr	r3, [pc, #232]	@ (8001140 <HAL_GPIO_Init+0x324>)
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	43db      	mvns	r3, r3
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	4013      	ands	r3, r2
 8001064:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001072:	69ba      	ldr	r2, [r7, #24]
 8001074:	693b      	ldr	r3, [r7, #16]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800107a:	4a31      	ldr	r2, [pc, #196]	@ (8001140 <HAL_GPIO_Init+0x324>)
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001080:	4b2f      	ldr	r3, [pc, #188]	@ (8001140 <HAL_GPIO_Init+0x324>)
 8001082:	68db      	ldr	r3, [r3, #12]
 8001084:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001086:	693b      	ldr	r3, [r7, #16]
 8001088:	43db      	mvns	r3, r3
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	4013      	ands	r3, r2
 800108e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800109c:	69ba      	ldr	r2, [r7, #24]
 800109e:	693b      	ldr	r3, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010a4:	4a26      	ldr	r2, [pc, #152]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80010aa:	4b25      	ldr	r3, [pc, #148]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b0:	693b      	ldr	r3, [r7, #16]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	69ba      	ldr	r2, [r7, #24]
 80010b6:	4013      	ands	r3, r2
 80010b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010c6:	69ba      	ldr	r2, [r7, #24]
 80010c8:	693b      	ldr	r3, [r7, #16]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010d0:	69bb      	ldr	r3, [r7, #24]
 80010d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010da:	693b      	ldr	r3, [r7, #16]
 80010dc:	43db      	mvns	r3, r3
 80010de:	69ba      	ldr	r2, [r7, #24]
 80010e0:	4013      	ands	r3, r2
 80010e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010e4:	683b      	ldr	r3, [r7, #0]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010f0:	69ba      	ldr	r2, [r7, #24]
 80010f2:	693b      	ldr	r3, [r7, #16]
 80010f4:	4313      	orrs	r3, r2
 80010f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010f8:	4a11      	ldr	r2, [pc, #68]	@ (8001140 <HAL_GPIO_Init+0x324>)
 80010fa:	69bb      	ldr	r3, [r7, #24]
 80010fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3301      	adds	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	69fb      	ldr	r3, [r7, #28]
 8001106:	2b0f      	cmp	r3, #15
 8001108:	f67f ae96 	bls.w	8000e38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800110c:	bf00      	nop
 800110e:	bf00      	nop
 8001110:	3724      	adds	r7, #36	@ 0x24
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800
 8001120:	40013800 	.word	0x40013800
 8001124:	40020000 	.word	0x40020000
 8001128:	40020400 	.word	0x40020400
 800112c:	40020800 	.word	0x40020800
 8001130:	40020c00 	.word	0x40020c00
 8001134:	40021000 	.word	0x40021000
 8001138:	40021400 	.word	0x40021400
 800113c:	40021800 	.word	0x40021800
 8001140:	40013c00 	.word	0x40013c00

08001144 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	460b      	mov	r3, r1
 800114e:	807b      	strh	r3, [r7, #2]
 8001150:	4613      	mov	r3, r2
 8001152:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001154:	787b      	ldrb	r3, [r7, #1]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d003      	beq.n	8001162 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800115a:	887a      	ldrh	r2, [r7, #2]
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001160:	e003      	b.n	800116a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001162:	887b      	ldrh	r3, [r7, #2]
 8001164:	041a      	lsls	r2, r3, #16
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	619a      	str	r2, [r3, #24]
}
 800116a:	bf00      	nop
 800116c:	370c      	adds	r7, #12
 800116e:	46bd      	mov	sp, r7
 8001170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001174:	4770      	bx	lr

08001176 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001188:	887a      	ldrh	r2, [r7, #2]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4013      	ands	r3, r2
 800118e:	041a      	lsls	r2, r3, #16
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	43d9      	mvns	r1, r3
 8001194:	887b      	ldrh	r3, [r7, #2]
 8001196:	400b      	ands	r3, r1
 8001198:	431a      	orrs	r2, r3
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	619a      	str	r2, [r3, #24]
}
 800119e:	bf00      	nop
 80011a0:	3714      	adds	r7, #20
 80011a2:	46bd      	mov	sp, r7
 80011a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a8:	4770      	bx	lr
	...

080011ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d101      	bne.n	80011c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80011bc:	2301      	movs	r3, #1
 80011be:	e0cc      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80011c0:	4b68      	ldr	r3, [pc, #416]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
 80011c8:	683a      	ldr	r2, [r7, #0]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d90c      	bls.n	80011e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ce:	4b65      	ldr	r3, [pc, #404]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	683a      	ldr	r2, [r7, #0]
 80011d2:	b2d2      	uxtb	r2, r2
 80011d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80011d6:	4b63      	ldr	r3, [pc, #396]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f003 0307 	and.w	r3, r3, #7
 80011de:	683a      	ldr	r2, [r7, #0]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	e0b8      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d020      	beq.n	8001236 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	f003 0304 	and.w	r3, r3, #4
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d005      	beq.n	800120c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001200:	4b59      	ldr	r3, [pc, #356]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001202:	689b      	ldr	r3, [r3, #8]
 8001204:	4a58      	ldr	r2, [pc, #352]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001206:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800120a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 0308 	and.w	r3, r3, #8
 8001214:	2b00      	cmp	r3, #0
 8001216:	d005      	beq.n	8001224 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001218:	4b53      	ldr	r3, [pc, #332]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800121a:	689b      	ldr	r3, [r3, #8]
 800121c:	4a52      	ldr	r2, [pc, #328]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001222:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001224:	4b50      	ldr	r3, [pc, #320]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	494d      	ldr	r1, [pc, #308]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001232:	4313      	orrs	r3, r2
 8001234:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	2b00      	cmp	r3, #0
 8001240:	d044      	beq.n	80012cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	685b      	ldr	r3, [r3, #4]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d107      	bne.n	800125a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800124a:	4b47      	ldr	r3, [pc, #284]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d119      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001256:	2301      	movs	r3, #1
 8001258:	e07f      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	2b02      	cmp	r3, #2
 8001260:	d003      	beq.n	800126a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001266:	2b03      	cmp	r3, #3
 8001268:	d107      	bne.n	800127a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800126a:	4b3f      	ldr	r3, [pc, #252]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d109      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	e06f      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800127a:	4b3b      	ldr	r3, [pc, #236]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	2b00      	cmp	r3, #0
 8001284:	d101      	bne.n	800128a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
 8001288:	e067      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800128a:	4b37      	ldr	r3, [pc, #220]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	f023 0203 	bic.w	r2, r3, #3
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	4934      	ldr	r1, [pc, #208]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001298:	4313      	orrs	r3, r2
 800129a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800129c:	f7ff fcac 	bl	8000bf8 <HAL_GetTick>
 80012a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a2:	e00a      	b.n	80012ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80012a4:	f7ff fca8 	bl	8000bf8 <HAL_GetTick>
 80012a8:	4602      	mov	r2, r0
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b2:	4293      	cmp	r3, r2
 80012b4:	d901      	bls.n	80012ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80012b6:	2303      	movs	r3, #3
 80012b8:	e04f      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 80012bc:	689b      	ldr	r3, [r3, #8]
 80012be:	f003 020c 	and.w	r2, r3, #12
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	685b      	ldr	r3, [r3, #4]
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d1eb      	bne.n	80012a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012cc:	4b25      	ldr	r3, [pc, #148]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	683a      	ldr	r2, [r7, #0]
 80012d6:	429a      	cmp	r2, r3
 80012d8:	d20c      	bcs.n	80012f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012da:	4b22      	ldr	r3, [pc, #136]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80012dc:	683a      	ldr	r2, [r7, #0]
 80012de:	b2d2      	uxtb	r2, r2
 80012e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80012e2:	4b20      	ldr	r3, [pc, #128]	@ (8001364 <HAL_RCC_ClockConfig+0x1b8>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f003 0307 	and.w	r3, r3, #7
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d001      	beq.n	80012f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e032      	b.n	800135a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f003 0304 	and.w	r3, r3, #4
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d008      	beq.n	8001312 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001300:	4b19      	ldr	r3, [pc, #100]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	4916      	ldr	r1, [pc, #88]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800130e:	4313      	orrs	r3, r2
 8001310:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0308 	and.w	r3, r3, #8
 800131a:	2b00      	cmp	r3, #0
 800131c:	d009      	beq.n	8001332 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800131e:	4b12      	ldr	r3, [pc, #72]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	691b      	ldr	r3, [r3, #16]
 800132a:	00db      	lsls	r3, r3, #3
 800132c:	490e      	ldr	r1, [pc, #56]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800132e:	4313      	orrs	r3, r2
 8001330:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001332:	f000 f821 	bl	8001378 <HAL_RCC_GetSysClockFreq>
 8001336:	4602      	mov	r2, r0
 8001338:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <HAL_RCC_ClockConfig+0x1bc>)
 800133a:	689b      	ldr	r3, [r3, #8]
 800133c:	091b      	lsrs	r3, r3, #4
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	490a      	ldr	r1, [pc, #40]	@ (800136c <HAL_RCC_ClockConfig+0x1c0>)
 8001344:	5ccb      	ldrb	r3, [r1, r3]
 8001346:	fa22 f303 	lsr.w	r3, r2, r3
 800134a:	4a09      	ldr	r2, [pc, #36]	@ (8001370 <HAL_RCC_ClockConfig+0x1c4>)
 800134c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800134e:	4b09      	ldr	r3, [pc, #36]	@ (8001374 <HAL_RCC_ClockConfig+0x1c8>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4618      	mov	r0, r3
 8001354:	f7ff fb3c 	bl	80009d0 <HAL_InitTick>

  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	3710      	adds	r7, #16
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
 8001362:	bf00      	nop
 8001364:	40023c00 	.word	0x40023c00
 8001368:	40023800 	.word	0x40023800
 800136c:	08005bec 	.word	0x08005bec
 8001370:	20000000 	.word	0x20000000
 8001374:	20000004 	.word	0x20000004

08001378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001378:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800137c:	b094      	sub	sp, #80	@ 0x50
 800137e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001380:	2300      	movs	r3, #0
 8001382:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001384:	2300      	movs	r3, #0
 8001386:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001388:	2300      	movs	r3, #0
 800138a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800138c:	2300      	movs	r3, #0
 800138e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001390:	4b79      	ldr	r3, [pc, #484]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	f003 030c 	and.w	r3, r3, #12
 8001398:	2b08      	cmp	r3, #8
 800139a:	d00d      	beq.n	80013b8 <HAL_RCC_GetSysClockFreq+0x40>
 800139c:	2b08      	cmp	r3, #8
 800139e:	f200 80e1 	bhi.w	8001564 <HAL_RCC_GetSysClockFreq+0x1ec>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d002      	beq.n	80013ac <HAL_RCC_GetSysClockFreq+0x34>
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	d003      	beq.n	80013b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80013aa:	e0db      	b.n	8001564 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80013ac:	4b73      	ldr	r3, [pc, #460]	@ (800157c <HAL_RCC_GetSysClockFreq+0x204>)
 80013ae:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80013b0:	e0db      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80013b2:	4b73      	ldr	r3, [pc, #460]	@ (8001580 <HAL_RCC_GetSysClockFreq+0x208>)
 80013b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80013b6:	e0d8      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013b8:	4b6f      	ldr	r3, [pc, #444]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80013c0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d063      	beq.n	8001496 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013ce:	4b6a      	ldr	r3, [pc, #424]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 80013d0:	685b      	ldr	r3, [r3, #4]
 80013d2:	099b      	lsrs	r3, r3, #6
 80013d4:	2200      	movs	r2, #0
 80013d6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80013d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80013da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80013dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80013e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80013e2:	2300      	movs	r3, #0
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80013e6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80013ea:	4622      	mov	r2, r4
 80013ec:	462b      	mov	r3, r5
 80013ee:	f04f 0000 	mov.w	r0, #0
 80013f2:	f04f 0100 	mov.w	r1, #0
 80013f6:	0159      	lsls	r1, r3, #5
 80013f8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013fc:	0150      	lsls	r0, r2, #5
 80013fe:	4602      	mov	r2, r0
 8001400:	460b      	mov	r3, r1
 8001402:	4621      	mov	r1, r4
 8001404:	1a51      	subs	r1, r2, r1
 8001406:	6139      	str	r1, [r7, #16]
 8001408:	4629      	mov	r1, r5
 800140a:	eb63 0301 	sbc.w	r3, r3, r1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	f04f 0200 	mov.w	r2, #0
 8001414:	f04f 0300 	mov.w	r3, #0
 8001418:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800141c:	4659      	mov	r1, fp
 800141e:	018b      	lsls	r3, r1, #6
 8001420:	4651      	mov	r1, sl
 8001422:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001426:	4651      	mov	r1, sl
 8001428:	018a      	lsls	r2, r1, #6
 800142a:	4651      	mov	r1, sl
 800142c:	ebb2 0801 	subs.w	r8, r2, r1
 8001430:	4659      	mov	r1, fp
 8001432:	eb63 0901 	sbc.w	r9, r3, r1
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001442:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001446:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800144a:	4690      	mov	r8, r2
 800144c:	4699      	mov	r9, r3
 800144e:	4623      	mov	r3, r4
 8001450:	eb18 0303 	adds.w	r3, r8, r3
 8001454:	60bb      	str	r3, [r7, #8]
 8001456:	462b      	mov	r3, r5
 8001458:	eb49 0303 	adc.w	r3, r9, r3
 800145c:	60fb      	str	r3, [r7, #12]
 800145e:	f04f 0200 	mov.w	r2, #0
 8001462:	f04f 0300 	mov.w	r3, #0
 8001466:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800146a:	4629      	mov	r1, r5
 800146c:	024b      	lsls	r3, r1, #9
 800146e:	4621      	mov	r1, r4
 8001470:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001474:	4621      	mov	r1, r4
 8001476:	024a      	lsls	r2, r1, #9
 8001478:	4610      	mov	r0, r2
 800147a:	4619      	mov	r1, r3
 800147c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800147e:	2200      	movs	r2, #0
 8001480:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001482:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001484:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001488:	f7fe ff14 	bl	80002b4 <__aeabi_uldivmod>
 800148c:	4602      	mov	r2, r0
 800148e:	460b      	mov	r3, r1
 8001490:	4613      	mov	r3, r2
 8001492:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001494:	e058      	b.n	8001548 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001496:	4b38      	ldr	r3, [pc, #224]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	099b      	lsrs	r3, r3, #6
 800149c:	2200      	movs	r2, #0
 800149e:	4618      	mov	r0, r3
 80014a0:	4611      	mov	r1, r2
 80014a2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80014a6:	623b      	str	r3, [r7, #32]
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ac:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80014b0:	4642      	mov	r2, r8
 80014b2:	464b      	mov	r3, r9
 80014b4:	f04f 0000 	mov.w	r0, #0
 80014b8:	f04f 0100 	mov.w	r1, #0
 80014bc:	0159      	lsls	r1, r3, #5
 80014be:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014c2:	0150      	lsls	r0, r2, #5
 80014c4:	4602      	mov	r2, r0
 80014c6:	460b      	mov	r3, r1
 80014c8:	4641      	mov	r1, r8
 80014ca:	ebb2 0a01 	subs.w	sl, r2, r1
 80014ce:	4649      	mov	r1, r9
 80014d0:	eb63 0b01 	sbc.w	fp, r3, r1
 80014d4:	f04f 0200 	mov.w	r2, #0
 80014d8:	f04f 0300 	mov.w	r3, #0
 80014dc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80014e0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80014e4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80014e8:	ebb2 040a 	subs.w	r4, r2, sl
 80014ec:	eb63 050b 	sbc.w	r5, r3, fp
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	00eb      	lsls	r3, r5, #3
 80014fa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80014fe:	00e2      	lsls	r2, r4, #3
 8001500:	4614      	mov	r4, r2
 8001502:	461d      	mov	r5, r3
 8001504:	4643      	mov	r3, r8
 8001506:	18e3      	adds	r3, r4, r3
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	464b      	mov	r3, r9
 800150c:	eb45 0303 	adc.w	r3, r5, r3
 8001510:	607b      	str	r3, [r7, #4]
 8001512:	f04f 0200 	mov.w	r2, #0
 8001516:	f04f 0300 	mov.w	r3, #0
 800151a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800151e:	4629      	mov	r1, r5
 8001520:	028b      	lsls	r3, r1, #10
 8001522:	4621      	mov	r1, r4
 8001524:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001528:	4621      	mov	r1, r4
 800152a:	028a      	lsls	r2, r1, #10
 800152c:	4610      	mov	r0, r2
 800152e:	4619      	mov	r1, r3
 8001530:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001532:	2200      	movs	r2, #0
 8001534:	61bb      	str	r3, [r7, #24]
 8001536:	61fa      	str	r2, [r7, #28]
 8001538:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800153c:	f7fe feba 	bl	80002b4 <__aeabi_uldivmod>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	4613      	mov	r3, r2
 8001546:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001548:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <HAL_RCC_GetSysClockFreq+0x200>)
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	0c1b      	lsrs	r3, r3, #16
 800154e:	f003 0303 	and.w	r3, r3, #3
 8001552:	3301      	adds	r3, #1
 8001554:	005b      	lsls	r3, r3, #1
 8001556:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001558:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800155a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800155c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001560:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001562:	e002      	b.n	800156a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001564:	4b05      	ldr	r3, [pc, #20]	@ (800157c <HAL_RCC_GetSysClockFreq+0x204>)
 8001566:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001568:	bf00      	nop
    }
  }
  return sysclockfreq;
 800156a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800156c:	4618      	mov	r0, r3
 800156e:	3750      	adds	r7, #80	@ 0x50
 8001570:	46bd      	mov	sp, r7
 8001572:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	00f42400 	.word	0x00f42400
 8001580:	007a1200 	.word	0x007a1200

08001584 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001588:	4b03      	ldr	r3, [pc, #12]	@ (8001598 <HAL_RCC_GetHCLKFreq+0x14>)
 800158a:	681b      	ldr	r3, [r3, #0]
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000000 	.word	0x20000000

0800159c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80015a0:	f7ff fff0 	bl	8001584 <HAL_RCC_GetHCLKFreq>
 80015a4:	4602      	mov	r2, r0
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	0a9b      	lsrs	r3, r3, #10
 80015ac:	f003 0307 	and.w	r3, r3, #7
 80015b0:	4903      	ldr	r1, [pc, #12]	@ (80015c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80015b2:	5ccb      	ldrb	r3, [r1, r3]
 80015b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40023800 	.word	0x40023800
 80015c0:	08005bfc 	.word	0x08005bfc

080015c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
 80015cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	220f      	movs	r2, #15
 80015d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80015d4:	4b12      	ldr	r3, [pc, #72]	@ (8001620 <HAL_RCC_GetClockConfig+0x5c>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f003 0203 	and.w	r2, r3, #3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	@ (8001620 <HAL_RCC_GetClockConfig+0x5c>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80015ec:	4b0c      	ldr	r3, [pc, #48]	@ (8001620 <HAL_RCC_GetClockConfig+0x5c>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80015f8:	4b09      	ldr	r3, [pc, #36]	@ (8001620 <HAL_RCC_GetClockConfig+0x5c>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001606:	4b07      	ldr	r3, [pc, #28]	@ (8001624 <HAL_RCC_GetClockConfig+0x60>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0207 	and.w	r2, r3, #7
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	601a      	str	r2, [r3, #0]
}
 8001612:	bf00      	nop
 8001614:	370c      	adds	r7, #12
 8001616:	46bd      	mov	sp, r7
 8001618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161c:	4770      	bx	lr
 800161e:	bf00      	nop
 8001620:	40023800 	.word	0x40023800
 8001624:	40023c00 	.word	0x40023c00

08001628 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	b086      	sub	sp, #24
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e273      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0301 	and.w	r3, r3, #1
 8001642:	2b00      	cmp	r3, #0
 8001644:	d075      	beq.n	8001732 <HAL_RCC_OscConfig+0x10a>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001646:	4b88      	ldr	r3, [pc, #544]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001648:	689b      	ldr	r3, [r3, #8]
 800164a:	f003 030c 	and.w	r3, r3, #12
 800164e:	2b04      	cmp	r3, #4
 8001650:	d00c      	beq.n	800166c <HAL_RCC_OscConfig+0x44>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001652:	4b85      	ldr	r3, [pc, #532]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f003 030c 	and.w	r3, r3, #12
        || \
 800165a:	2b08      	cmp	r3, #8
 800165c:	d112      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800165e:	4b82      	ldr	r3, [pc, #520]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001666:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800166a:	d10b      	bne.n	8001684 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800166c:	4b7e      	ldr	r3, [pc, #504]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d05b      	beq.n	8001730 <HAL_RCC_OscConfig+0x108>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d157      	bne.n	8001730 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001680:	2301      	movs	r3, #1
 8001682:	e24e      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800168c:	d106      	bne.n	800169c <HAL_RCC_OscConfig+0x74>
 800168e:	4b76      	ldr	r3, [pc, #472]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a75      	ldr	r2, [pc, #468]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001694:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	e01d      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016a4:	d10c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x98>
 80016a6:	4b70      	ldr	r3, [pc, #448]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	4a6f      	ldr	r2, [pc, #444]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ac:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016b0:	6013      	str	r3, [r2, #0]
 80016b2:	4b6d      	ldr	r3, [pc, #436]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a6c      	ldr	r2, [pc, #432]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	e00b      	b.n	80016d8 <HAL_RCC_OscConfig+0xb0>
 80016c0:	4b69      	ldr	r3, [pc, #420]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a68      	ldr	r2, [pc, #416]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b66      	ldr	r3, [pc, #408]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a65      	ldr	r2, [pc, #404]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d013      	beq.n	8001708 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fa8a 	bl	8000bf8 <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016e6:	e008      	b.n	80016fa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fa86 	bl	8000bf8 <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	@ 0x64
 80016f4:	d901      	bls.n	80016fa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016f6:	2303      	movs	r3, #3
 80016f8:	e213      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016fa:	4b5b      	ldr	r3, [pc, #364]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001702:	2b00      	cmp	r3, #0
 8001704:	d0f0      	beq.n	80016e8 <HAL_RCC_OscConfig+0xc0>
 8001706:	e014      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001708:	f7ff fa76 	bl	8000bf8 <HAL_GetTick>
 800170c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800170e:	e008      	b.n	8001722 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001710:	f7ff fa72 	bl	8000bf8 <HAL_GetTick>
 8001714:	4602      	mov	r2, r0
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	2b64      	cmp	r3, #100	@ 0x64
 800171c:	d901      	bls.n	8001722 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800171e:	2303      	movs	r3, #3
 8001720:	e1ff      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001722:	4b51      	ldr	r3, [pc, #324]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800172a:	2b00      	cmp	r3, #0
 800172c:	d1f0      	bne.n	8001710 <HAL_RCC_OscConfig+0xe8>
 800172e:	e000      	b.n	8001732 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001730:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d063      	beq.n	8001806 <HAL_RCC_OscConfig+0x1de>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800173e:	4b4a      	ldr	r3, [pc, #296]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	2b00      	cmp	r3, #0
 8001748:	d00b      	beq.n	8001762 <HAL_RCC_OscConfig+0x13a>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800174a:	4b47      	ldr	r3, [pc, #284]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	f003 030c 	and.w	r3, r3, #12
        || \
 8001752:	2b08      	cmp	r3, #8
 8001754:	d11c      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001756:	4b44      	ldr	r3, [pc, #272]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d116      	bne.n	8001790 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001762:	4b41      	ldr	r3, [pc, #260]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f003 0302 	and.w	r3, r3, #2
 800176a:	2b00      	cmp	r3, #0
 800176c:	d005      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	2b01      	cmp	r3, #1
 8001774:	d001      	beq.n	800177a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001776:	2301      	movs	r3, #1
 8001778:	e1d3      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800177a:	4b3b      	ldr	r3, [pc, #236]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	691b      	ldr	r3, [r3, #16]
 8001786:	00db      	lsls	r3, r3, #3
 8001788:	4937      	ldr	r1, [pc, #220]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 800178a:	4313      	orrs	r3, r2
 800178c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800178e:	e03a      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d020      	beq.n	80017da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001798:	4b34      	ldr	r3, [pc, #208]	@ (800186c <HAL_RCC_OscConfig+0x244>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179e:	f7ff fa2b 	bl	8000bf8 <HAL_GetTick>
 80017a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017a4:	e008      	b.n	80017b8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a6:	f7ff fa27 	bl	8000bf8 <HAL_GetTick>
 80017aa:	4602      	mov	r2, r0
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	1ad3      	subs	r3, r2, r3
 80017b0:	2b02      	cmp	r3, #2
 80017b2:	d901      	bls.n	80017b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80017b4:	2303      	movs	r3, #3
 80017b6:	e1b4      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017b8:	4b2b      	ldr	r3, [pc, #172]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0302 	and.w	r3, r3, #2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d0f0      	beq.n	80017a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c4:	4b28      	ldr	r3, [pc, #160]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	691b      	ldr	r3, [r3, #16]
 80017d0:	00db      	lsls	r3, r3, #3
 80017d2:	4925      	ldr	r1, [pc, #148]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80017d4:	4313      	orrs	r3, r2
 80017d6:	600b      	str	r3, [r1, #0]
 80017d8:	e015      	b.n	8001806 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017da:	4b24      	ldr	r3, [pc, #144]	@ (800186c <HAL_RCC_OscConfig+0x244>)
 80017dc:	2200      	movs	r2, #0
 80017de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017e0:	f7ff fa0a 	bl	8000bf8 <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017e8:	f7ff fa06 	bl	8000bf8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e193      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017fa:	4b1b      	ldr	r3, [pc, #108]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d1f0      	bne.n	80017e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0308 	and.w	r3, r3, #8
 800180e:	2b00      	cmp	r3, #0
 8001810:	d036      	beq.n	8001880 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	695b      	ldr	r3, [r3, #20]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d016      	beq.n	8001848 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800181a:	4b15      	ldr	r3, [pc, #84]	@ (8001870 <HAL_RCC_OscConfig+0x248>)
 800181c:	2201      	movs	r2, #1
 800181e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001820:	f7ff f9ea 	bl	8000bf8 <HAL_GetTick>
 8001824:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001826:	e008      	b.n	800183a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001828:	f7ff f9e6 	bl	8000bf8 <HAL_GetTick>
 800182c:	4602      	mov	r2, r0
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	2b02      	cmp	r3, #2
 8001834:	d901      	bls.n	800183a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001836:	2303      	movs	r3, #3
 8001838:	e173      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800183a:	4b0b      	ldr	r3, [pc, #44]	@ (8001868 <HAL_RCC_OscConfig+0x240>)
 800183c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183e:	f003 0302 	and.w	r3, r3, #2
 8001842:	2b00      	cmp	r3, #0
 8001844:	d0f0      	beq.n	8001828 <HAL_RCC_OscConfig+0x200>
 8001846:	e01b      	b.n	8001880 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001848:	4b09      	ldr	r3, [pc, #36]	@ (8001870 <HAL_RCC_OscConfig+0x248>)
 800184a:	2200      	movs	r2, #0
 800184c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800184e:	f7ff f9d3 	bl	8000bf8 <HAL_GetTick>
 8001852:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001854:	e00e      	b.n	8001874 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001856:	f7ff f9cf 	bl	8000bf8 <HAL_GetTick>
 800185a:	4602      	mov	r2, r0
 800185c:	693b      	ldr	r3, [r7, #16]
 800185e:	1ad3      	subs	r3, r2, r3
 8001860:	2b02      	cmp	r3, #2
 8001862:	d907      	bls.n	8001874 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001864:	2303      	movs	r3, #3
 8001866:	e15c      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
 8001868:	40023800 	.word	0x40023800
 800186c:	42470000 	.word	0x42470000
 8001870:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001874:	4b8a      	ldr	r3, [pc, #552]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001876:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d1ea      	bne.n	8001856 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0304 	and.w	r3, r3, #4
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 8097 	beq.w	80019bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800188e:	2300      	movs	r3, #0
 8001890:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001892:	4b83      	ldr	r3, [pc, #524]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001896:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d10f      	bne.n	80018be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800189e:	2300      	movs	r3, #0
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	4b7f      	ldr	r3, [pc, #508]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80018a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018a6:	4a7e      	ldr	r2, [pc, #504]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80018a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80018ae:	4b7c      	ldr	r3, [pc, #496]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018b6:	60bb      	str	r3, [r7, #8]
 80018b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80018ba:	2301      	movs	r3, #1
 80018bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b79      	ldr	r3, [pc, #484]	@ (8001aa4 <HAL_RCC_OscConfig+0x47c>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d118      	bne.n	80018fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80018ca:	4b76      	ldr	r3, [pc, #472]	@ (8001aa4 <HAL_RCC_OscConfig+0x47c>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a75      	ldr	r2, [pc, #468]	@ (8001aa4 <HAL_RCC_OscConfig+0x47c>)
 80018d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f98f 	bl	8000bf8 <HAL_GetTick>
 80018da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018dc:	e008      	b.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018de:	f7ff f98b 	bl	8000bf8 <HAL_GetTick>
 80018e2:	4602      	mov	r2, r0
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	1ad3      	subs	r3, r2, r3
 80018e8:	2b02      	cmp	r3, #2
 80018ea:	d901      	bls.n	80018f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018ec:	2303      	movs	r3, #3
 80018ee:	e118      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018f0:	4b6c      	ldr	r3, [pc, #432]	@ (8001aa4 <HAL_RCC_OscConfig+0x47c>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d0f0      	beq.n	80018de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2b01      	cmp	r3, #1
 8001902:	d106      	bne.n	8001912 <HAL_RCC_OscConfig+0x2ea>
 8001904:	4b66      	ldr	r3, [pc, #408]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a65      	ldr	r2, [pc, #404]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 800190a:	f043 0301 	orr.w	r3, r3, #1
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001910:	e01c      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b05      	cmp	r3, #5
 8001918:	d10c      	bne.n	8001934 <HAL_RCC_OscConfig+0x30c>
 800191a:	4b61      	ldr	r3, [pc, #388]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800191e:	4a60      	ldr	r2, [pc, #384]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001920:	f043 0304 	orr.w	r3, r3, #4
 8001924:	6713      	str	r3, [r2, #112]	@ 0x70
 8001926:	4b5e      	ldr	r3, [pc, #376]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800192a:	4a5d      	ldr	r2, [pc, #372]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 800192c:	f043 0301 	orr.w	r3, r3, #1
 8001930:	6713      	str	r3, [r2, #112]	@ 0x70
 8001932:	e00b      	b.n	800194c <HAL_RCC_OscConfig+0x324>
 8001934:	4b5a      	ldr	r3, [pc, #360]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001936:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001938:	4a59      	ldr	r2, [pc, #356]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001940:	4b57      	ldr	r3, [pc, #348]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001944:	4a56      	ldr	r2, [pc, #344]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001946:	f023 0304 	bic.w	r3, r3, #4
 800194a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d015      	beq.n	8001980 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f950 	bl	8000bf8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800195a:	e00a      	b.n	8001972 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800195c:	f7ff f94c 	bl	8000bf8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	f241 3288 	movw	r2, #5000	@ 0x1388
 800196a:	4293      	cmp	r3, r2
 800196c:	d901      	bls.n	8001972 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800196e:	2303      	movs	r3, #3
 8001970:	e0d7      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001972:	4b4b      	ldr	r3, [pc, #300]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001976:	f003 0302 	and.w	r3, r3, #2
 800197a:	2b00      	cmp	r3, #0
 800197c:	d0ee      	beq.n	800195c <HAL_RCC_OscConfig+0x334>
 800197e:	e014      	b.n	80019aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001980:	f7ff f93a 	bl	8000bf8 <HAL_GetTick>
 8001984:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001986:	e00a      	b.n	800199e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001988:	f7ff f936 	bl	8000bf8 <HAL_GetTick>
 800198c:	4602      	mov	r2, r0
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	1ad3      	subs	r3, r2, r3
 8001992:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001996:	4293      	cmp	r3, r2
 8001998:	d901      	bls.n	800199e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800199a:	2303      	movs	r3, #3
 800199c:	e0c1      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800199e:	4b40      	ldr	r3, [pc, #256]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d1ee      	bne.n	8001988 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80019aa:	7dfb      	ldrb	r3, [r7, #23]
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d105      	bne.n	80019bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019b0:	4b3b      	ldr	r3, [pc, #236]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019b4:	4a3a      	ldr	r2, [pc, #232]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019b6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019ba:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 80ad 	beq.w	8001b20 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80019c6:	4b36      	ldr	r3, [pc, #216]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019c8:	689b      	ldr	r3, [r3, #8]
 80019ca:	f003 030c 	and.w	r3, r3, #12
 80019ce:	2b08      	cmp	r3, #8
 80019d0:	d060      	beq.n	8001a94 <HAL_RCC_OscConfig+0x46c>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	699b      	ldr	r3, [r3, #24]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d145      	bne.n	8001a66 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019da:	4b33      	ldr	r3, [pc, #204]	@ (8001aa8 <HAL_RCC_OscConfig+0x480>)
 80019dc:	2200      	movs	r2, #0
 80019de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff f90a 	bl	8000bf8 <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f906 	bl	8000bf8 <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e093      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019fa:	4b29      	ldr	r3, [pc, #164]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d1f0      	bne.n	80019e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	69da      	ldr	r2, [r3, #28]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6a1b      	ldr	r3, [r3, #32]
 8001a0e:	431a      	orrs	r2, r3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a14:	019b      	lsls	r3, r3, #6
 8001a16:	431a      	orrs	r2, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a1c:	085b      	lsrs	r3, r3, #1
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	041b      	lsls	r3, r3, #16
 8001a22:	431a      	orrs	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a28:	061b      	lsls	r3, r3, #24
 8001a2a:	431a      	orrs	r2, r3
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a30:	071b      	lsls	r3, r3, #28
 8001a32:	491b      	ldr	r1, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a34:	4313      	orrs	r3, r2
 8001a36:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a38:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa8 <HAL_RCC_OscConfig+0x480>)
 8001a3a:	2201      	movs	r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3e:	f7ff f8db 	bl	8000bf8 <HAL_GetTick>
 8001a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a44:	e008      	b.n	8001a58 <HAL_RCC_OscConfig+0x430>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a46:	f7ff f8d7 	bl	8000bf8 <HAL_GetTick>
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	693b      	ldr	r3, [r7, #16]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	2b02      	cmp	r3, #2
 8001a52:	d901      	bls.n	8001a58 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8001a54:	2303      	movs	r3, #3
 8001a56:	e064      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a58:	4b11      	ldr	r3, [pc, #68]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d0f0      	beq.n	8001a46 <HAL_RCC_OscConfig+0x41e>
 8001a64:	e05c      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b10      	ldr	r3, [pc, #64]	@ (8001aa8 <HAL_RCC_OscConfig+0x480>)
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a6c:	f7ff f8c4 	bl	8000bf8 <HAL_GetTick>
 8001a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a72:	e008      	b.n	8001a86 <HAL_RCC_OscConfig+0x45e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a74:	f7ff f8c0 	bl	8000bf8 <HAL_GetTick>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	693b      	ldr	r3, [r7, #16]
 8001a7c:	1ad3      	subs	r3, r2, r3
 8001a7e:	2b02      	cmp	r3, #2
 8001a80:	d901      	bls.n	8001a86 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8001a82:	2303      	movs	r3, #3
 8001a84:	e04d      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a86:	4b06      	ldr	r3, [pc, #24]	@ (8001aa0 <HAL_RCC_OscConfig+0x478>)
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d1f0      	bne.n	8001a74 <HAL_RCC_OscConfig+0x44c>
 8001a92:	e045      	b.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	699b      	ldr	r3, [r3, #24]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d107      	bne.n	8001aac <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e040      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
 8001aa0:	40023800 	.word	0x40023800
 8001aa4:	40007000 	.word	0x40007000
 8001aa8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001aac:	4b1f      	ldr	r3, [pc, #124]	@ (8001b2c <HAL_RCC_OscConfig+0x504>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	2b01      	cmp	r3, #1
 8001ab8:	d030      	beq.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d129      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ad2:	429a      	cmp	r2, r3
 8001ad4:	d122      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001adc:	4013      	ands	r3, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001ae2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d119      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001af2:	085b      	lsrs	r3, r3, #1
 8001af4:	3b01      	subs	r3, #1
 8001af6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d10f      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b06:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d107      	bne.n	8001b1c <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d001      	beq.n	8001b20 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e000      	b.n	8001b22 <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8001b20:	2300      	movs	r3, #0
}
 8001b22:	4618      	mov	r0, r3
 8001b24:	3718      	adds	r7, #24
 8001b26:	46bd      	mov	sp, r7
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	40023800 	.word	0x40023800

08001b30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e041      	b.n	8001bc6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d106      	bne.n	8001b5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2200      	movs	r2, #0
 8001b52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f839 	bl	8001bce <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	2202      	movs	r2, #2
 8001b60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	3304      	adds	r3, #4
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	4610      	mov	r0, r2
 8001b70:	f000 f9c0 	bl	8001ef4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	2201      	movs	r2, #1
 8001b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2201      	movs	r2, #1
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2201      	movs	r2, #1
 8001b98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2201      	movs	r2, #1
 8001bb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	3708      	adds	r7, #8
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}

08001bce <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001bd6:	bf00      	nop
 8001bd8:	370c      	adds	r7, #12
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be0:	4770      	bx	lr
	...

08001be4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d001      	beq.n	8001bfc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e04e      	b.n	8001c9a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2202      	movs	r2, #2
 8001c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	68da      	ldr	r2, [r3, #12]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f042 0201 	orr.w	r2, r2, #1
 8001c12:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a23      	ldr	r2, [pc, #140]	@ (8001ca8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d022      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c26:	d01d      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001cac <HAL_TIM_Base_Start_IT+0xc8>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d018      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	4a1e      	ldr	r2, [pc, #120]	@ (8001cb0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c38:	4293      	cmp	r3, r2
 8001c3a:	d013      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a1c      	ldr	r2, [pc, #112]	@ (8001cb4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001c42:	4293      	cmp	r3, r2
 8001c44:	d00e      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	4a1b      	ldr	r2, [pc, #108]	@ (8001cb8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001c4c:	4293      	cmp	r3, r2
 8001c4e:	d009      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a19      	ldr	r2, [pc, #100]	@ (8001cbc <HAL_TIM_Base_Start_IT+0xd8>)
 8001c56:	4293      	cmp	r3, r2
 8001c58:	d004      	beq.n	8001c64 <HAL_TIM_Base_Start_IT+0x80>
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4a18      	ldr	r2, [pc, #96]	@ (8001cc0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689b      	ldr	r3, [r3, #8]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2b06      	cmp	r3, #6
 8001c74:	d010      	beq.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0201 	orr.w	r2, r2, #1
 8001c84:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c86:	e007      	b.n	8001c98 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3714      	adds	r7, #20
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	40010000 	.word	0x40010000
 8001cac:	40000400 	.word	0x40000400
 8001cb0:	40000800 	.word	0x40000800
 8001cb4:	40000c00 	.word	0x40000c00
 8001cb8:	40010400 	.word	0x40010400
 8001cbc:	40014000 	.word	0x40014000
 8001cc0:	40001800 	.word	0x40001800

08001cc4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b084      	sub	sp, #16
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
 8001cd2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	691b      	ldr	r3, [r3, #16]
 8001cda:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	f003 0302 	and.w	r3, r3, #2
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d020      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	f003 0302 	and.w	r3, r3, #2
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d01b      	beq.n	8001d28 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f06f 0202 	mvn.w	r2, #2
 8001cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	699b      	ldr	r3, [r3, #24]
 8001d06:	f003 0303 	and.w	r3, r3, #3
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	f000 f8d2 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001d14:	e005      	b.n	8001d22 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 f8c4 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d1c:	6878      	ldr	r0, [r7, #4]
 8001d1e:	f000 f8d5 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2200      	movs	r2, #0
 8001d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	f003 0304 	and.w	r3, r3, #4
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d020      	beq.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d01b      	beq.n	8001d74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f06f 0204 	mvn.w	r2, #4
 8001d44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2202      	movs	r2, #2
 8001d4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	699b      	ldr	r3, [r3, #24]
 8001d52:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d5a:	6878      	ldr	r0, [r7, #4]
 8001d5c:	f000 f8ac 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001d60:	e005      	b.n	8001d6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d62:	6878      	ldr	r0, [r7, #4]
 8001d64:	f000 f89e 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d68:	6878      	ldr	r0, [r7, #4]
 8001d6a:	f000 f8af 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2200      	movs	r2, #0
 8001d72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d020      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f003 0308 	and.w	r3, r3, #8
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d01b      	beq.n	8001dc0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f06f 0208 	mvn.w	r2, #8
 8001d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2204      	movs	r2, #4
 8001d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	f003 0303 	and.w	r3, r3, #3
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d003      	beq.n	8001dae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f886 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001dac:	e005      	b.n	8001dba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f000 f878 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001db4:	6878      	ldr	r0, [r7, #4]
 8001db6:	f000 f889 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	f003 0310 	and.w	r3, r3, #16
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d020      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	f003 0310 	and.w	r3, r3, #16
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d01b      	beq.n	8001e0c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f06f 0210 	mvn.w	r2, #16
 8001ddc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	2208      	movs	r2, #8
 8001de2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	69db      	ldr	r3, [r3, #28]
 8001dea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f000 f860 	bl	8001eb8 <HAL_TIM_IC_CaptureCallback>
 8001df8:	e005      	b.n	8001e06 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dfa:	6878      	ldr	r0, [r7, #4]
 8001dfc:	f000 f852 	bl	8001ea4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f863 	bl	8001ecc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2200      	movs	r2, #0
 8001e0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00c      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	f003 0301 	and.w	r3, r3, #1
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d007      	beq.n	8001e30 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f06f 0201 	mvn.w	r2, #1
 8001e28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e2a:	6878      	ldr	r0, [r7, #4]
 8001e2c:	f7fe fd90 	bl	8000950 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d00c      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001e3a:	68fb      	ldr	r3, [r7, #12]
 8001e3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d007      	beq.n	8001e54 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f906 	bl	8002060 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001e54:	68bb      	ldr	r3, [r7, #8]
 8001e56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d00c      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d007      	beq.n	8001e78 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e72:	6878      	ldr	r0, [r7, #4]
 8001e74:	f000 f834 	bl	8001ee0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	f003 0320 	and.w	r3, r3, #32
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d00c      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	f003 0320 	and.w	r3, r3, #32
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d007      	beq.n	8001e9c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f06f 0220 	mvn.w	r2, #32
 8001e94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 f8d8 	bl	800204c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e9c:	bf00      	nop
 8001e9e:	3710      	adds	r7, #16
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bd80      	pop	{r7, pc}

08001ea4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	b083      	sub	sp, #12
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001ee8:	bf00      	nop
 8001eea:	370c      	adds	r7, #12
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b085      	sub	sp, #20
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a46      	ldr	r2, [pc, #280]	@ (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d013      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f12:	d00f      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a43      	ldr	r2, [pc, #268]	@ (8002024 <TIM_Base_SetConfig+0x130>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d00b      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4a42      	ldr	r2, [pc, #264]	@ (8002028 <TIM_Base_SetConfig+0x134>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d007      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	4a41      	ldr	r2, [pc, #260]	@ (800202c <TIM_Base_SetConfig+0x138>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d003      	beq.n	8001f34 <TIM_Base_SetConfig+0x40>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	4a40      	ldr	r2, [pc, #256]	@ (8002030 <TIM_Base_SetConfig+0x13c>)
 8001f30:	4293      	cmp	r3, r2
 8001f32:	d108      	bne.n	8001f46 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	68fa      	ldr	r2, [r7, #12]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	4a35      	ldr	r2, [pc, #212]	@ (8002020 <TIM_Base_SetConfig+0x12c>)
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	d02b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f54:	d027      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a32      	ldr	r2, [pc, #200]	@ (8002024 <TIM_Base_SetConfig+0x130>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d023      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a31      	ldr	r2, [pc, #196]	@ (8002028 <TIM_Base_SetConfig+0x134>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d01f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a30      	ldr	r2, [pc, #192]	@ (800202c <TIM_Base_SetConfig+0x138>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d01b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	4a2f      	ldr	r2, [pc, #188]	@ (8002030 <TIM_Base_SetConfig+0x13c>)
 8001f72:	4293      	cmp	r3, r2
 8001f74:	d017      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	4a2e      	ldr	r2, [pc, #184]	@ (8002034 <TIM_Base_SetConfig+0x140>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d013      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	4a2d      	ldr	r2, [pc, #180]	@ (8002038 <TIM_Base_SetConfig+0x144>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00f      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	4a2c      	ldr	r2, [pc, #176]	@ (800203c <TIM_Base_SetConfig+0x148>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d00b      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	4a2b      	ldr	r2, [pc, #172]	@ (8002040 <TIM_Base_SetConfig+0x14c>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d007      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4a2a      	ldr	r2, [pc, #168]	@ (8002044 <TIM_Base_SetConfig+0x150>)
 8001f9a:	4293      	cmp	r3, r2
 8001f9c:	d003      	beq.n	8001fa6 <TIM_Base_SetConfig+0xb2>
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	4a29      	ldr	r2, [pc, #164]	@ (8002048 <TIM_Base_SetConfig+0x154>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d108      	bne.n	8001fb8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	68fa      	ldr	r2, [r7, #12]
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	695b      	ldr	r3, [r3, #20]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	689a      	ldr	r2, [r3, #8]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4a10      	ldr	r2, [pc, #64]	@ (8002020 <TIM_Base_SetConfig+0x12c>)
 8001fe0:	4293      	cmp	r3, r2
 8001fe2:	d003      	beq.n	8001fec <TIM_Base_SetConfig+0xf8>
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	4a12      	ldr	r2, [pc, #72]	@ (8002030 <TIM_Base_SetConfig+0x13c>)
 8001fe8:	4293      	cmp	r3, r2
 8001fea:	d103      	bne.n	8001ff4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2201      	movs	r2, #1
 8001ff8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0301 	and.w	r3, r3, #1
 8002002:	2b01      	cmp	r3, #1
 8002004:	d105      	bne.n	8002012 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	691b      	ldr	r3, [r3, #16]
 800200a:	f023 0201 	bic.w	r2, r3, #1
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	611a      	str	r2, [r3, #16]
  }
}
 8002012:	bf00      	nop
 8002014:	3714      	adds	r7, #20
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40010000 	.word	0x40010000
 8002024:	40000400 	.word	0x40000400
 8002028:	40000800 	.word	0x40000800
 800202c:	40000c00 	.word	0x40000c00
 8002030:	40010400 	.word	0x40010400
 8002034:	40014000 	.word	0x40014000
 8002038:	40014400 	.word	0x40014400
 800203c:	40014800 	.word	0x40014800
 8002040:	40001800 	.word	0x40001800
 8002044:	40001c00 	.word	0x40001c00
 8002048:	40002000 	.word	0x40002000

0800204c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800204c:	b480      	push	{r7}
 800204e:	b083      	sub	sp, #12
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002054:	bf00      	nop
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr

08002060 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002060:	b480      	push	{r7}
 8002062:	b083      	sub	sp, #12
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002068:	bf00      	nop
 800206a:	370c      	adds	r7, #12
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002074:	b480      	push	{r7}
 8002076:	b083      	sub	sp, #12
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f103 0208 	add.w	r2, r3, #8
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f04f 32ff 	mov.w	r2, #4294967295
 800208c:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f103 0208 	add.w	r2, r3, #8
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f103 0208 	add.w	r2, r3, #8
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80020a8:	bf00      	nop
 80020aa:	370c      	adds	r7, #12
 80020ac:	46bd      	mov	sp, r7
 80020ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b2:	4770      	bx	lr

080020b4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80020b4:	b480      	push	{r7}
 80020b6:	b083      	sub	sp, #12
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	2200      	movs	r2, #0
 80020c0:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80020c2:	bf00      	nop
 80020c4:	370c      	adds	r7, #12
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80020ce:	b480      	push	{r7}
 80020d0:	b085      	sub	sp, #20
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 80020de:	68bb      	ldr	r3, [r7, #8]
 80020e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e4:	d103      	bne.n	80020ee <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	e00c      	b.n	8002108 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	3308      	adds	r3, #8
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e002      	b.n	80020fc <vListInsert+0x2e>
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	60fb      	str	r3, [r7, #12]
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	429a      	cmp	r2, r3
 8002106:	d2f6      	bcs.n	80020f6 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	683b      	ldr	r3, [r7, #0]
 800210e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	683a      	ldr	r2, [r7, #0]
 8002116:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	68fa      	ldr	r2, [r7, #12]
 800211c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	683a      	ldr	r2, [r7, #0]
 8002122:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	1c5a      	adds	r2, r3, #1
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	601a      	str	r2, [r3, #0]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002140:	b480      	push	{r7}
 8002142:	b085      	sub	sp, #20
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	691b      	ldr	r3, [r3, #16]
 800214c:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	685b      	ldr	r3, [r3, #4]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	6892      	ldr	r2, [r2, #8]
 8002156:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	687a      	ldr	r2, [r7, #4]
 800215e:	6852      	ldr	r2, [r2, #4]
 8002160:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	429a      	cmp	r2, r3
 800216a:	d103      	bne.n	8002174 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	689a      	ldr	r2, [r3, #8]
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	1e5a      	subs	r2, r3, #1
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
}
 8002188:	4618      	mov	r0, r3
 800218a:	3714      	adds	r7, #20
 800218c:	46bd      	mov	sp, r7
 800218e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002192:	4770      	bx	lr

08002194 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b086      	sub	sp, #24
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
 800219c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800219e:	2301      	movs	r3, #1
 80021a0:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d10b      	bne.n	80021c4 <xQueueGenericReset+0x30>
        __asm volatile
 80021ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80021b0:	f383 8811 	msr	BASEPRI, r3
 80021b4:	f3bf 8f6f 	isb	sy
 80021b8:	f3bf 8f4f 	dsb	sy
 80021bc:	60fb      	str	r3, [r7, #12]
    }
 80021be:	bf00      	nop
 80021c0:	bf00      	nop
 80021c2:	e7fd      	b.n	80021c0 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d05d      	beq.n	8002286 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d059      	beq.n	8002286 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021da:	2100      	movs	r1, #0
 80021dc:	fba3 2302 	umull	r2, r3, r3, r2
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d000      	beq.n	80021e6 <xQueueGenericReset+0x52>
 80021e4:	2101      	movs	r1, #1
 80021e6:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d14c      	bne.n	8002286 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 80021ec:	f001 fefe 	bl	8003fec <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80021f0:	693b      	ldr	r3, [r7, #16]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80021f8:	6939      	ldr	r1, [r7, #16]
 80021fa:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80021fc:	fb01 f303 	mul.w	r3, r1, r3
 8002200:	441a      	add	r2, r3
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	2200      	movs	r2, #0
 800220a:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	693b      	ldr	r3, [r7, #16]
 800221a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800221c:	3b01      	subs	r3, #1
 800221e:	6939      	ldr	r1, [r7, #16]
 8002220:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002222:	fb01 f303 	mul.w	r3, r1, r3
 8002226:	441a      	add	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	22ff      	movs	r2, #255	@ 0xff
 8002230:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	22ff      	movs	r2, #255	@ 0xff
 8002238:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d114      	bne.n	800226c <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d01a      	beq.n	8002280 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	3310      	adds	r3, #16
 800224e:	4618      	mov	r0, r3
 8002250:	f000 ffd8 	bl	8003204 <xTaskRemoveFromEventList>
 8002254:	4603      	mov	r3, r0
 8002256:	2b00      	cmp	r3, #0
 8002258:	d012      	beq.n	8002280 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <xQueueGenericReset+0x120>)
 800225c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002260:	601a      	str	r2, [r3, #0]
 8002262:	f3bf 8f4f 	dsb	sy
 8002266:	f3bf 8f6f 	isb	sy
 800226a:	e009      	b.n	8002280 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800226c:	693b      	ldr	r3, [r7, #16]
 800226e:	3310      	adds	r3, #16
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff feff 	bl	8002074 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	3324      	adds	r3, #36	@ 0x24
 800227a:	4618      	mov	r0, r3
 800227c:	f7ff fefa 	bl	8002074 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002280:	f001 fee6 	bl	8004050 <vPortExitCritical>
 8002284:	e001      	b.n	800228a <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8002286:	2300      	movs	r3, #0
 8002288:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 800228a:	697b      	ldr	r3, [r7, #20]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d10b      	bne.n	80022a8 <xQueueGenericReset+0x114>
        __asm volatile
 8002290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002294:	f383 8811 	msr	BASEPRI, r3
 8002298:	f3bf 8f6f 	isb	sy
 800229c:	f3bf 8f4f 	dsb	sy
 80022a0:	60bb      	str	r3, [r7, #8]
    }
 80022a2:	bf00      	nop
 80022a4:	bf00      	nop
 80022a6:	e7fd      	b.n	80022a4 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80022a8:	697b      	ldr	r3, [r7, #20]
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3718      	adds	r7, #24
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	e000ed04 	.word	0xe000ed04

080022b8 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af02      	add	r7, sp, #8
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	4613      	mov	r3, r2
 80022c4:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d02e      	beq.n	800232e <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022d0:	2100      	movs	r1, #0
 80022d2:	68ba      	ldr	r2, [r7, #8]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	fba3 2302 	umull	r2, r3, r3, r2
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d000      	beq.n	80022e0 <xQueueGenericCreate+0x28>
 80022de:	2101      	movs	r1, #1
 80022e0:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d123      	bne.n	800232e <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	68ba      	ldr	r2, [r7, #8]
 80022ea:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80022ee:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80022f2:	d81c      	bhi.n	800232e <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80022fe:	69bb      	ldr	r3, [r7, #24]
 8002300:	3350      	adds	r3, #80	@ 0x50
 8002302:	4618      	mov	r0, r3
 8002304:	f001 ff62 	bl	80041cc <pvPortMalloc>
 8002308:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01d      	beq.n	800234c <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	3350      	adds	r3, #80	@ 0x50
 8002318:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800231a:	79fa      	ldrb	r2, [r7, #7]
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	9300      	str	r3, [sp, #0]
 8002320:	4613      	mov	r3, r2
 8002322:	697a      	ldr	r2, [r7, #20]
 8002324:	68b9      	ldr	r1, [r7, #8]
 8002326:	68f8      	ldr	r0, [r7, #12]
 8002328:	f000 f815 	bl	8002356 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 800232c:	e00e      	b.n	800234c <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10b      	bne.n	800234c <xQueueGenericCreate+0x94>
        __asm volatile
 8002334:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002338:	f383 8811 	msr	BASEPRI, r3
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	f3bf 8f4f 	dsb	sy
 8002344:	613b      	str	r3, [r7, #16]
    }
 8002346:	bf00      	nop
 8002348:	bf00      	nop
 800234a:	e7fd      	b.n	8002348 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 800234c:	69fb      	ldr	r3, [r7, #28]
    }
 800234e:	4618      	mov	r0, r3
 8002350:	3720      	adds	r7, #32
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b084      	sub	sp, #16
 800235a:	af00      	add	r7, sp, #0
 800235c:	60f8      	str	r0, [r7, #12]
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d103      	bne.n	8002372 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	601a      	str	r2, [r3, #0]
 8002370:	e002      	b.n	8002378 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	687a      	ldr	r2, [r7, #4]
 8002376:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	68fa      	ldr	r2, [r7, #12]
 800237c:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002384:	2101      	movs	r1, #1
 8002386:	69b8      	ldr	r0, [r7, #24]
 8002388:	f7ff ff04 	bl	8002194 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 800238c:	69bb      	ldr	r3, [r7, #24]
 800238e:	78fa      	ldrb	r2, [r7, #3]
 8002390:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
    {
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
 8002394:	78fb      	ldrb	r3, [r7, #3]
 8002396:	68ba      	ldr	r2, [r7, #8]
 8002398:	68f9      	ldr	r1, [r7, #12]
 800239a:	2073      	movs	r0, #115	@ 0x73
 800239c:	f002 fd24 	bl	8004de8 <SEGGER_SYSVIEW_RecordU32x3>
}
 80023a0:	bf00      	nop
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 80023a8:	b590      	push	{r4, r7, lr}
 80023aa:	b08f      	sub	sp, #60	@ 0x3c
 80023ac:	af02      	add	r7, sp, #8
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	60b9      	str	r1, [r7, #8]
 80023b2:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 80023b4:	2300      	movs	r3, #0
 80023b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	62bb      	str	r3, [r7, #40]	@ 0x28

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80023bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d10b      	bne.n	80023da <xQueueReceive+0x32>
        __asm volatile
 80023c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023c6:	f383 8811 	msr	BASEPRI, r3
 80023ca:	f3bf 8f6f 	isb	sy
 80023ce:	f3bf 8f4f 	dsb	sy
 80023d2:	623b      	str	r3, [r7, #32]
    }
 80023d4:	bf00      	nop
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <xQueueReceive+0x2e>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d103      	bne.n	80023e8 <xQueueReceive+0x40>
 80023e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d101      	bne.n	80023ec <xQueueReceive+0x44>
 80023e8:	2301      	movs	r3, #1
 80023ea:	e000      	b.n	80023ee <xQueueReceive+0x46>
 80023ec:	2300      	movs	r3, #0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d10b      	bne.n	800240a <xQueueReceive+0x62>
        __asm volatile
 80023f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80023f6:	f383 8811 	msr	BASEPRI, r3
 80023fa:	f3bf 8f6f 	isb	sy
 80023fe:	f3bf 8f4f 	dsb	sy
 8002402:	61fb      	str	r3, [r7, #28]
    }
 8002404:	bf00      	nop
 8002406:	bf00      	nop
 8002408:	e7fd      	b.n	8002406 <xQueueReceive+0x5e>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800240a:	f001 f911 	bl	8003630 <xTaskGetSchedulerState>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d102      	bne.n	800241a <xQueueReceive+0x72>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d101      	bne.n	800241e <xQueueReceive+0x76>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <xQueueReceive+0x78>
 800241e:	2300      	movs	r3, #0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d10b      	bne.n	800243c <xQueueReceive+0x94>
        __asm volatile
 8002424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002428:	f383 8811 	msr	BASEPRI, r3
 800242c:	f3bf 8f6f 	isb	sy
 8002430:	f3bf 8f4f 	dsb	sy
 8002434:	61bb      	str	r3, [r7, #24]
    }
 8002436:	bf00      	nop
 8002438:	bf00      	nop
 800243a:	e7fd      	b.n	8002438 <xQueueReceive+0x90>
    /*lint -save -e904  This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800243c:	f001 fdd6 	bl	8003fec <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002440:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002442:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002444:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002448:	2b00      	cmp	r3, #0
 800244a:	d02f      	beq.n	80024ac <xQueueReceive+0x104>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800244c:	68b9      	ldr	r1, [r7, #8]
 800244e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002450:	f000 f8be 	bl	80025d0 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
 8002454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002456:	4618      	mov	r0, r3
 8002458:	f003 f9ce 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 800245c:	4604      	mov	r4, r0
 800245e:	2000      	movs	r0, #0
 8002460:	f003 f9ca 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 8002464:	4602      	mov	r2, r0
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2101      	movs	r1, #1
 800246a:	9100      	str	r1, [sp, #0]
 800246c:	4621      	mov	r1, r4
 800246e:	205c      	movs	r0, #92	@ 0x5c
 8002470:	f002 fd30 	bl	8004ed4 <SEGGER_SYSVIEW_RecordU32x4>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002476:	1e5a      	subs	r2, r3, #1
 8002478:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247a:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800247c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d00f      	beq.n	80024a4 <xQueueReceive+0xfc>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002484:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002486:	3310      	adds	r3, #16
 8002488:	4618      	mov	r0, r3
 800248a:	f000 febb 	bl	8003204 <xTaskRemoveFromEventList>
 800248e:	4603      	mov	r3, r0
 8002490:	2b00      	cmp	r3, #0
 8002492:	d007      	beq.n	80024a4 <xQueueReceive+0xfc>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002494:	4b4d      	ldr	r3, [pc, #308]	@ (80025cc <xQueueReceive+0x224>)
 8002496:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800249a:	601a      	str	r2, [r3, #0]
 800249c:	f3bf 8f4f 	dsb	sy
 80024a0:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80024a4:	f001 fdd4 	bl	8004050 <vPortExitCritical>
                return pdPASS;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e08a      	b.n	80025c2 <xQueueReceive+0x21a>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d113      	bne.n	80024da <xQueueReceive+0x132>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80024b2:	f001 fdcd 	bl	8004050 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
 80024b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024b8:	4618      	mov	r0, r3
 80024ba:	f003 f99d 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 80024be:	4604      	mov	r4, r0
 80024c0:	2000      	movs	r0, #0
 80024c2:	f003 f999 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 80024c6:	4602      	mov	r2, r0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2101      	movs	r1, #1
 80024cc:	9100      	str	r1, [sp, #0]
 80024ce:	4621      	mov	r1, r4
 80024d0:	205c      	movs	r0, #92	@ 0x5c
 80024d2:	f002 fcff 	bl	8004ed4 <SEGGER_SYSVIEW_RecordU32x4>
                    return errQUEUE_EMPTY;
 80024d6:	2300      	movs	r3, #0
 80024d8:	e073      	b.n	80025c2 <xQueueReceive+0x21a>
                }
                else if( xEntryTimeSet == pdFALSE )
 80024da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d106      	bne.n	80024ee <xQueueReceive+0x146>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80024e0:	f107 0310 	add.w	r3, r7, #16
 80024e4:	4618      	mov	r0, r3
 80024e6:	f000 ff67 	bl	80033b8 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80024ea:	2301      	movs	r3, #1
 80024ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80024ee:	f001 fdaf 	bl	8004050 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80024f2:	f000 fb73 	bl	8002bdc <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80024f6:	f001 fd79 	bl	8003fec <vPortEnterCritical>
 80024fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024fc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002500:	b25b      	sxtb	r3, r3
 8002502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002506:	d103      	bne.n	8002510 <xQueueReceive+0x168>
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	2200      	movs	r2, #0
 800250c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002510:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002512:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002516:	b25b      	sxtb	r3, r3
 8002518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251c:	d103      	bne.n	8002526 <xQueueReceive+0x17e>
 800251e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002526:	f001 fd93 	bl	8004050 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800252a:	1d3a      	adds	r2, r7, #4
 800252c:	f107 0310 	add.w	r3, r7, #16
 8002530:	4611      	mov	r1, r2
 8002532:	4618      	mov	r0, r3
 8002534:	f000 ff56 	bl	80033e4 <xTaskCheckForTimeOut>
 8002538:	4603      	mov	r3, r0
 800253a:	2b00      	cmp	r3, #0
 800253c:	d124      	bne.n	8002588 <xQueueReceive+0x1e0>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800253e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002540:	f000 f8be 	bl	80026c0 <prvIsQueueEmpty>
 8002544:	4603      	mov	r3, r0
 8002546:	2b00      	cmp	r3, #0
 8002548:	d018      	beq.n	800257c <xQueueReceive+0x1d4>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800254a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800254c:	3324      	adds	r3, #36	@ 0x24
 800254e:	687a      	ldr	r2, [r7, #4]
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f000 fde6 	bl	8003124 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002558:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800255a:	f000 f85f 	bl	800261c <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800255e:	f000 fb4b 	bl	8002bf8 <xTaskResumeAll>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f47f af69 	bne.w	800243c <xQueueReceive+0x94>
                {
                    portYIELD_WITHIN_API();
 800256a:	4b18      	ldr	r3, [pc, #96]	@ (80025cc <xQueueReceive+0x224>)
 800256c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	f3bf 8f4f 	dsb	sy
 8002576:	f3bf 8f6f 	isb	sy
 800257a:	e75f      	b.n	800243c <xQueueReceive+0x94>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 800257c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800257e:	f000 f84d 	bl	800261c <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002582:	f000 fb39 	bl	8002bf8 <xTaskResumeAll>
 8002586:	e759      	b.n	800243c <xQueueReceive+0x94>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002588:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800258a:	f000 f847 	bl	800261c <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800258e:	f000 fb33 	bl	8002bf8 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002592:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8002594:	f000 f894 	bl	80026c0 <prvIsQueueEmpty>
 8002598:	4603      	mov	r3, r0
 800259a:	2b00      	cmp	r3, #0
 800259c:	f43f af4e 	beq.w	800243c <xQueueReceive+0x94>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
 80025a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025a2:	4618      	mov	r0, r3
 80025a4:	f003 f928 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 80025a8:	4604      	mov	r4, r0
 80025aa:	2000      	movs	r0, #0
 80025ac:	f003 f924 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 80025b0:	4602      	mov	r2, r0
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2101      	movs	r1, #1
 80025b6:	9100      	str	r1, [sp, #0]
 80025b8:	4621      	mov	r1, r4
 80025ba:	205c      	movs	r0, #92	@ 0x5c
 80025bc:	f002 fc8a 	bl	8004ed4 <SEGGER_SYSVIEW_RecordU32x4>
                return errQUEUE_EMPTY;
 80025c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3734      	adds	r7, #52	@ 0x34
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000ed04 	.word	0xe000ed04

080025d0 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
 80025d8:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d018      	beq.n	8002614 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	68da      	ldr	r2, [r3, #12]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68da      	ldr	r2, [r3, #12]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	429a      	cmp	r2, r3
 80025fa:	d303      	bcc.n	8002604 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681a      	ldr	r2, [r3, #0]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	68d9      	ldr	r1, [r3, #12]
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260c:	461a      	mov	r2, r3
 800260e:	6838      	ldr	r0, [r7, #0]
 8002610:	f003 fa76 	bl	8005b00 <memcpy>
    }
}
 8002614:	bf00      	nop
 8002616:	3708      	adds	r7, #8
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}

0800261c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002624:	f001 fce2 	bl	8003fec <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800262e:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002630:	e011      	b.n	8002656 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002636:	2b00      	cmp	r3, #0
 8002638:	d012      	beq.n	8002660 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	3324      	adds	r3, #36	@ 0x24
 800263e:	4618      	mov	r0, r3
 8002640:	f000 fde0 	bl	8003204 <xTaskRemoveFromEventList>
 8002644:	4603      	mov	r3, r0
 8002646:	2b00      	cmp	r3, #0
 8002648:	d001      	beq.n	800264e <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800264a:	f000 ff33 	bl	80034b4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800264e:	7bfb      	ldrb	r3, [r7, #15]
 8002650:	3b01      	subs	r3, #1
 8002652:	b2db      	uxtb	r3, r3
 8002654:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800265a:	2b00      	cmp	r3, #0
 800265c:	dce9      	bgt.n	8002632 <prvUnlockQueue+0x16>
 800265e:	e000      	b.n	8002662 <prvUnlockQueue+0x46>
                    break;
 8002660:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	22ff      	movs	r2, #255	@ 0xff
 8002666:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 800266a:	f001 fcf1 	bl	8004050 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800266e:	f001 fcbd 	bl	8003fec <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002678:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 800267a:	e011      	b.n	80026a0 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	691b      	ldr	r3, [r3, #16]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d012      	beq.n	80026aa <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3310      	adds	r3, #16
 8002688:	4618      	mov	r0, r3
 800268a:	f000 fdbb 	bl	8003204 <xTaskRemoveFromEventList>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8002694:	f000 ff0e 	bl	80034b4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8002698:	7bbb      	ldrb	r3, [r7, #14]
 800269a:	3b01      	subs	r3, #1
 800269c:	b2db      	uxtb	r3, r3
 800269e:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80026a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	dce9      	bgt.n	800267c <prvUnlockQueue+0x60>
 80026a8:	e000      	b.n	80026ac <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80026aa:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	22ff      	movs	r2, #255	@ 0xff
 80026b0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80026b4:	f001 fccc 	bl	8004050 <vPortExitCritical>
}
 80026b8:	bf00      	nop
 80026ba:	3710      	adds	r7, #16
 80026bc:	46bd      	mov	sp, r7
 80026be:	bd80      	pop	{r7, pc}

080026c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80026c8:	f001 fc90 	bl	8003fec <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80026d4:	2301      	movs	r3, #1
 80026d6:	60fb      	str	r3, [r7, #12]
 80026d8:	e001      	b.n	80026de <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80026da:	2300      	movs	r3, #0
 80026dc:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80026de:	f001 fcb7 	bl	8004050 <vPortExitCritical>

    return xReturn;
 80026e2:	68fb      	ldr	r3, [r7, #12]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}

080026ec <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
    {
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b086      	sub	sp, #24
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
 80026f4:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80026f6:	2300      	movs	r3, #0
 80026f8:	613b      	str	r3, [r7, #16]

        configASSERT( xQueue );
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <vQueueAddToRegistry+0x2c>
        __asm volatile
 8002700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002704:	f383 8811 	msr	BASEPRI, r3
 8002708:	f3bf 8f6f 	isb	sy
 800270c:	f3bf 8f4f 	dsb	sy
 8002710:	60fb      	str	r3, [r7, #12]
    }
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	e7fd      	b.n	8002714 <vQueueAddToRegistry+0x28>

        if( pcQueueName != NULL )
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d024      	beq.n	8002768 <vQueueAddToRegistry+0x7c>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800271e:	2300      	movs	r3, #0
 8002720:	617b      	str	r3, [r7, #20]
 8002722:	e01e      	b.n	8002762 <vQueueAddToRegistry+0x76>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8002724:	4a1c      	ldr	r2, [pc, #112]	@ (8002798 <vQueueAddToRegistry+0xac>)
 8002726:	697b      	ldr	r3, [r7, #20]
 8002728:	00db      	lsls	r3, r3, #3
 800272a:	4413      	add	r3, r2
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	687a      	ldr	r2, [r7, #4]
 8002730:	429a      	cmp	r2, r3
 8002732:	d105      	bne.n	8002740 <vQueueAddToRegistry+0x54>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002734:	697b      	ldr	r3, [r7, #20]
 8002736:	00db      	lsls	r3, r3, #3
 8002738:	4a17      	ldr	r2, [pc, #92]	@ (8002798 <vQueueAddToRegistry+0xac>)
 800273a:	4413      	add	r3, r2
 800273c:	613b      	str	r3, [r7, #16]
                    break;
 800273e:	e013      	b.n	8002768 <vQueueAddToRegistry+0x7c>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d10a      	bne.n	800275c <vQueueAddToRegistry+0x70>
 8002746:	4a14      	ldr	r2, [pc, #80]	@ (8002798 <vQueueAddToRegistry+0xac>)
 8002748:	697b      	ldr	r3, [r7, #20]
 800274a:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d104      	bne.n	800275c <vQueueAddToRegistry+0x70>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	00db      	lsls	r3, r3, #3
 8002756:	4a10      	ldr	r2, [pc, #64]	@ (8002798 <vQueueAddToRegistry+0xac>)
 8002758:	4413      	add	r3, r2
 800275a:	613b      	str	r3, [r7, #16]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3301      	adds	r3, #1
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	697b      	ldr	r3, [r7, #20]
 8002764:	2b07      	cmp	r3, #7
 8002766:	d9dd      	bls.n	8002724 <vQueueAddToRegistry+0x38>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d00f      	beq.n	800278e <vQueueAddToRegistry+0xa2>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800276e:	693b      	ldr	r3, [r7, #16]
 8002770:	683a      	ldr	r2, [r7, #0]
 8002772:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4618      	mov	r0, r3
 800277e:	f003 f83b 	bl	80057f8 <SEGGER_SYSVIEW_ShrinkId>
 8002782:	4601      	mov	r1, r0
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	461a      	mov	r2, r3
 8002788:	2071      	movs	r0, #113	@ 0x71
 800278a:	f002 fad3 	bl	8004d34 <SEGGER_SYSVIEW_RecordU32x2>
        }
    }
 800278e:	bf00      	nop
 8002790:	3718      	adds	r7, #24
 8002792:	46bd      	mov	sp, r7
 8002794:	bd80      	pop	{r7, pc}
 8002796:	bf00      	nop
 8002798:	2000007c 	.word	0x2000007c

0800279c <vQueueWaitForMessageRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vQueueWaitForMessageRestricted( QueueHandle_t xQueue,
                                         TickType_t xTicksToWait,
                                         const BaseType_t xWaitIndefinitely )
    {
 800279c:	b580      	push	{r7, lr}
 800279e:	b086      	sub	sp, #24
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	60f8      	str	r0, [r7, #12]
 80027a4:	60b9      	str	r1, [r7, #8]
 80027a6:	607a      	str	r2, [r7, #4]
        Queue_t * const pxQueue = xQueue;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	617b      	str	r3, [r7, #20]
         *  will not actually cause the task to block, just place it on a blocked
         *  list.  It will not block until the scheduler is unlocked - at which
         *  time a yield will be performed.  If an item is added to the queue while
         *  the queue is locked, and the calling task blocks on the queue, then the
         *  calling task will be immediately unblocked when the queue is unlocked. */
        prvLockQueue( pxQueue );
 80027ac:	f001 fc1e 	bl	8003fec <vPortEnterCritical>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80027b6:	b25b      	sxtb	r3, r3
 80027b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027bc:	d103      	bne.n	80027c6 <vQueueWaitForMessageRestricted+0x2a>
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027c6:	697b      	ldr	r3, [r7, #20]
 80027c8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80027cc:	b25b      	sxtb	r3, r3
 80027ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d2:	d103      	bne.n	80027dc <vQueueWaitForMessageRestricted+0x40>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	2200      	movs	r2, #0
 80027d8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80027dc:	f001 fc38 	bl	8004050 <vPortExitCritical>

        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80027e0:	697b      	ldr	r3, [r7, #20]
 80027e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d106      	bne.n	80027f6 <vQueueWaitForMessageRestricted+0x5a>
        {
            /* There is nothing in the queue, block for the specified period. */
            vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	3324      	adds	r3, #36	@ 0x24
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	68b9      	ldr	r1, [r7, #8]
 80027f0:	4618      	mov	r0, r3
 80027f2:	f000 fcbd 	bl	8003170 <vTaskPlaceOnEventListRestricted>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        prvUnlockQueue( pxQueue );
 80027f6:	6978      	ldr	r0, [r7, #20]
 80027f8:	f7ff ff10 	bl	800261c <prvUnlockQueue>
    }
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8002804:	b580      	push	{r7, lr}
 8002806:	b08c      	sub	sp, #48	@ 0x30
 8002808:	af04      	add	r7, sp, #16
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	603b      	str	r3, [r7, #0]
 8002810:	4613      	mov	r3, r2
 8002812:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002814:	88fb      	ldrh	r3, [r7, #6]
 8002816:	009b      	lsls	r3, r3, #2
 8002818:	4618      	mov	r0, r3
 800281a:	f001 fcd7 	bl	80041cc <pvPortMalloc>
 800281e:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d013      	beq.n	800284e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002826:	2058      	movs	r0, #88	@ 0x58
 8002828:	f001 fcd0 	bl	80041cc <pvPortMalloc>
 800282c:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800282e:	69fb      	ldr	r3, [r7, #28]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d008      	beq.n	8002846 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8002834:	2258      	movs	r2, #88	@ 0x58
 8002836:	2100      	movs	r1, #0
 8002838:	69f8      	ldr	r0, [r7, #28]
 800283a:	f003 f935 	bl	8005aa8 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	697a      	ldr	r2, [r7, #20]
 8002842:	631a      	str	r2, [r3, #48]	@ 0x30
 8002844:	e005      	b.n	8002852 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8002846:	6978      	ldr	r0, [r7, #20]
 8002848:	f001 fd7c 	bl	8004344 <vPortFree>
 800284c:	e001      	b.n	8002852 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 800284e:	2300      	movs	r3, #0
 8002850:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002852:	69fb      	ldr	r3, [r7, #28]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002858:	88fa      	ldrh	r2, [r7, #6]
 800285a:	2300      	movs	r3, #0
 800285c:	9303      	str	r3, [sp, #12]
 800285e:	69fb      	ldr	r3, [r7, #28]
 8002860:	9302      	str	r3, [sp, #8]
 8002862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002864:	9301      	str	r3, [sp, #4]
 8002866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002868:	9300      	str	r3, [sp, #0]
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68b9      	ldr	r1, [r7, #8]
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f80e 	bl	8002890 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8002874:	69f8      	ldr	r0, [r7, #28]
 8002876:	f000 f89b 	bl	80029b0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 800287a:	2301      	movs	r3, #1
 800287c:	61bb      	str	r3, [r7, #24]
 800287e:	e002      	b.n	8002886 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002880:	f04f 33ff 	mov.w	r3, #4294967295
 8002884:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8002886:	69bb      	ldr	r3, [r7, #24]
    }
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	60f8      	str	r0, [r7, #12]
 8002898:	60b9      	str	r1, [r7, #8]
 800289a:	607a      	str	r2, [r7, #4]
 800289c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800289e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028a0:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	461a      	mov	r2, r3
 80028a8:	21a5      	movs	r1, #165	@ 0xa5
 80028aa:	f003 f8fd 	bl	8005aa8 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80028ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80028b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80028b8:	3b01      	subs	r3, #1
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	4413      	add	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	f003 0307 	and.w	r3, r3, #7
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00b      	beq.n	80028ea <prvInitialiseNewTask+0x5a>
        __asm volatile
 80028d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80028d6:	f383 8811 	msr	BASEPRI, r3
 80028da:	f3bf 8f6f 	isb	sy
 80028de:	f3bf 8f4f 	dsb	sy
 80028e2:	617b      	str	r3, [r7, #20]
    }
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	e7fd      	b.n	80028e6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d01e      	beq.n	800292e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80028f0:	2300      	movs	r3, #0
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	e012      	b.n	800291c <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80028f6:	68ba      	ldr	r2, [r7, #8]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	4413      	add	r3, r2
 80028fc:	7819      	ldrb	r1, [r3, #0]
 80028fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002900:	69fb      	ldr	r3, [r7, #28]
 8002902:	4413      	add	r3, r2
 8002904:	3334      	adds	r3, #52	@ 0x34
 8002906:	460a      	mov	r2, r1
 8002908:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	69fb      	ldr	r3, [r7, #28]
 800290e:	4413      	add	r3, r2
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	2b00      	cmp	r3, #0
 8002914:	d006      	beq.n	8002924 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	3301      	adds	r3, #1
 800291a:	61fb      	str	r3, [r7, #28]
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	2b09      	cmp	r3, #9
 8002920:	d9e9      	bls.n	80028f6 <prvInitialiseNewTask+0x66>
 8002922:	e000      	b.n	8002926 <prvInitialiseNewTask+0x96>
            {
                break;
 8002924:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002926:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002928:	2200      	movs	r2, #0
 800292a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800292e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002930:	2b04      	cmp	r3, #4
 8002932:	d90b      	bls.n	800294c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8002934:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002938:	f383 8811 	msr	BASEPRI, r3
 800293c:	f3bf 8f6f 	isb	sy
 8002940:	f3bf 8f4f 	dsb	sy
 8002944:	613b      	str	r3, [r7, #16]
    }
 8002946:	bf00      	nop
 8002948:	bf00      	nop
 800294a:	e7fd      	b.n	8002948 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800294c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800294e:	2b04      	cmp	r3, #4
 8002950:	d901      	bls.n	8002956 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002952:	2304      	movs	r3, #4
 8002954:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8002956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002958:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800295a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800295c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800295e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002960:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002962:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002964:	3304      	adds	r3, #4
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fba4 	bl	80020b4 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800296c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800296e:	3318      	adds	r3, #24
 8002970:	4618      	mov	r0, r3
 8002972:	f7ff fb9f 	bl	80020b4 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002978:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800297a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800297c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800297e:	f1c3 0205 	rsb	r2, r3, #5
 8002982:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002984:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800298a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	68f9      	ldr	r1, [r7, #12]
 8002990:	69b8      	ldr	r0, [r7, #24]
 8002992:	f001 f977 	bl	8003c84 <pxPortInitialiseStack>
 8002996:	4602      	mov	r2, r0
 8002998:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800299a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 800299c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d002      	beq.n	80029a8 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80029a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80029a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80029a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80029a8:	bf00      	nop
 80029aa:	3720      	adds	r7, #32
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 80029b0:	b5b0      	push	{r4, r5, r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af02      	add	r7, sp, #8
 80029b6:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 80029b8:	f001 fb18 	bl	8003fec <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 80029bc:	4b4f      	ldr	r3, [pc, #316]	@ (8002afc <prvAddNewTaskToReadyList+0x14c>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	3301      	adds	r3, #1
 80029c2:	4a4e      	ldr	r2, [pc, #312]	@ (8002afc <prvAddNewTaskToReadyList+0x14c>)
 80029c4:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 80029c6:	4b4e      	ldr	r3, [pc, #312]	@ (8002b00 <prvAddNewTaskToReadyList+0x150>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d109      	bne.n	80029e2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 80029ce:	4a4c      	ldr	r2, [pc, #304]	@ (8002b00 <prvAddNewTaskToReadyList+0x150>)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80029d4:	4b49      	ldr	r3, [pc, #292]	@ (8002afc <prvAddNewTaskToReadyList+0x14c>)
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b01      	cmp	r3, #1
 80029da:	d110      	bne.n	80029fe <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 80029dc:	f000 fd8e 	bl	80034fc <prvInitialiseTaskLists>
 80029e0:	e00d      	b.n	80029fe <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 80029e2:	4b48      	ldr	r3, [pc, #288]	@ (8002b04 <prvAddNewTaskToReadyList+0x154>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d109      	bne.n	80029fe <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80029ea:	4b45      	ldr	r3, [pc, #276]	@ (8002b00 <prvAddNewTaskToReadyList+0x150>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d802      	bhi.n	80029fe <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 80029f8:	4a41      	ldr	r2, [pc, #260]	@ (8002b00 <prvAddNewTaskToReadyList+0x150>)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 80029fe:	4b42      	ldr	r3, [pc, #264]	@ (8002b08 <prvAddNewTaskToReadyList+0x158>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	3301      	adds	r3, #1
 8002a04:	4a40      	ldr	r2, [pc, #256]	@ (8002b08 <prvAddNewTaskToReadyList+0x158>)
 8002a06:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002a08:	4b3f      	ldr	r3, [pc, #252]	@ (8002b08 <prvAddNewTaskToReadyList+0x158>)
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d016      	beq.n	8002a44 <prvAddNewTaskToReadyList+0x94>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4618      	mov	r0, r3
 8002a1a:	f002 fe27 	bl	800566c <SEGGER_SYSVIEW_OnTaskCreate>
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a2e:	461d      	mov	r5, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	461c      	mov	r4, r3
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a3a:	1ae3      	subs	r3, r4, r3
 8002a3c:	9300      	str	r3, [sp, #0]
 8002a3e:	462b      	mov	r3, r5
 8002a40:	f001 fd94 	bl	800456c <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4618      	mov	r0, r3
 8002a48:	f002 fe94 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a50:	2201      	movs	r2, #1
 8002a52:	409a      	lsls	r2, r3
 8002a54:	4b2d      	ldr	r3, [pc, #180]	@ (8002b0c <prvAddNewTaskToReadyList+0x15c>)
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4313      	orrs	r3, r2
 8002a5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002b0c <prvAddNewTaskToReadyList+0x15c>)
 8002a5c:	6013      	str	r3, [r2, #0]
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a62:	492b      	ldr	r1, [pc, #172]	@ (8002b10 <prvAddNewTaskToReadyList+0x160>)
 8002a64:	4613      	mov	r3, r2
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	4413      	add	r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3304      	adds	r3, #4
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	60fb      	str	r3, [r7, #12]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	68fa      	ldr	r2, [r7, #12]
 8002a78:	609a      	str	r2, [r3, #8]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	689a      	ldr	r2, [r3, #8]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	60da      	str	r2, [r3, #12]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	3204      	adds	r2, #4
 8002a8a:	605a      	str	r2, [r3, #4]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	1d1a      	adds	r2, r3, #4
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	609a      	str	r2, [r3, #8]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002a98:	4613      	mov	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	4413      	add	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8002b10 <prvAddNewTaskToReadyList+0x160>)
 8002aa2:	441a      	add	r2, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	615a      	str	r2, [r3, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002aac:	4918      	ldr	r1, [pc, #96]	@ (8002b10 <prvAddNewTaskToReadyList+0x160>)
 8002aae:	4613      	mov	r3, r2
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	4413      	add	r3, r2
 8002ab4:	009b      	lsls	r3, r3, #2
 8002ab6:	440b      	add	r3, r1
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	1c59      	adds	r1, r3, #1
 8002abc:	4814      	ldr	r0, [pc, #80]	@ (8002b10 <prvAddNewTaskToReadyList+0x160>)
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4403      	add	r3, r0
 8002ac8:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002aca:	f001 fac1 	bl	8004050 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002ace:	4b0d      	ldr	r3, [pc, #52]	@ (8002b04 <prvAddNewTaskToReadyList+0x154>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d00e      	beq.n	8002af4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002ad6:	4b0a      	ldr	r3, [pc, #40]	@ (8002b00 <prvAddNewTaskToReadyList+0x150>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d207      	bcs.n	8002af4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002ae4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b14 <prvAddNewTaskToReadyList+0x164>)
 8002ae6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002aea:	601a      	str	r2, [r3, #0]
 8002aec:	f3bf 8f4f 	dsb	sy
 8002af0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002af4:	bf00      	nop
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bdb0      	pop	{r4, r5, r7, pc}
 8002afc:	20000194 	.word	0x20000194
 8002b00:	200000bc 	.word	0x200000bc
 8002b04:	200001a0 	.word	0x200001a0
 8002b08:	200001b0 	.word	0x200001b0
 8002b0c:	2000019c 	.word	0x2000019c
 8002b10:	200000c0 	.word	0x200000c0
 8002b14:	e000ed04 	.word	0xe000ed04

08002b18 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b086      	sub	sp, #24
 8002b1c:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8002b1e:	4b27      	ldr	r3, [pc, #156]	@ (8002bbc <vTaskStartScheduler+0xa4>)
 8002b20:	9301      	str	r3, [sp, #4]
 8002b22:	2300      	movs	r3, #0
 8002b24:	9300      	str	r3, [sp, #0]
 8002b26:	2300      	movs	r3, #0
 8002b28:	2282      	movs	r2, #130	@ 0x82
 8002b2a:	4925      	ldr	r1, [pc, #148]	@ (8002bc0 <vTaskStartScheduler+0xa8>)
 8002b2c:	4825      	ldr	r0, [pc, #148]	@ (8002bc4 <vTaskStartScheduler+0xac>)
 8002b2e:	f7ff fe69 	bl	8002804 <xTaskCreate>
 8002b32:	60f8      	str	r0, [r7, #12]
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    #if ( configUSE_TIMERS == 1 )
    {
        if( xReturn == pdPASS )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d102      	bne.n	8002b40 <vTaskStartScheduler+0x28>
        {
            xReturn = xTimerCreateTimerTask();
 8002b3a:	f000 fe17 	bl	800376c <xTimerCreateTimerTask>
 8002b3e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2b01      	cmp	r3, #1
 8002b44:	d124      	bne.n	8002b90 <vTaskStartScheduler+0x78>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	60bb      	str	r3, [r7, #8]
    }
 8002b58:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <vTaskStartScheduler+0xb0>)
 8002b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b60:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8002b62:	4b1a      	ldr	r3, [pc, #104]	@ (8002bcc <vTaskStartScheduler+0xb4>)
 8002b64:	2201      	movs	r2, #1
 8002b66:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002b68:	4b19      	ldr	r3, [pc, #100]	@ (8002bd0 <vTaskStartScheduler+0xb8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8002b6e:	4b19      	ldr	r3, [pc, #100]	@ (8002bd4 <vTaskStartScheduler+0xbc>)
 8002b70:	681a      	ldr	r2, [r3, #0]
 8002b72:	4b12      	ldr	r3, [pc, #72]	@ (8002bbc <vTaskStartScheduler+0xa4>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d102      	bne.n	8002b80 <vTaskStartScheduler+0x68>
 8002b7a:	f002 fd5b 	bl	8005634 <SEGGER_SYSVIEW_OnIdle>
 8002b7e:	e004      	b.n	8002b8a <vTaskStartScheduler+0x72>
 8002b80:	4b14      	ldr	r3, [pc, #80]	@ (8002bd4 <vTaskStartScheduler+0xbc>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fdb3 	bl	80056f0 <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8002b8a:	f001 f90b 	bl	8003da4 <xPortStartScheduler>
 8002b8e:	e00f      	b.n	8002bb0 <vTaskStartScheduler+0x98>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b96:	d10b      	bne.n	8002bb0 <vTaskStartScheduler+0x98>
        __asm volatile
 8002b98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002b9c:	f383 8811 	msr	BASEPRI, r3
 8002ba0:	f3bf 8f6f 	isb	sy
 8002ba4:	f3bf 8f4f 	dsb	sy
 8002ba8:	607b      	str	r3, [r7, #4]
    }
 8002baa:	bf00      	nop
 8002bac:	bf00      	nop
 8002bae:	e7fd      	b.n	8002bac <vTaskStartScheduler+0x94>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8002bb0:	4b09      	ldr	r3, [pc, #36]	@ (8002bd8 <vTaskStartScheduler+0xc0>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
}
 8002bb4:	bf00      	nop
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	200001b8 	.word	0x200001b8
 8002bc0:	08005b64 	.word	0x08005b64
 8002bc4:	080034cd 	.word	0x080034cd
 8002bc8:	200001b4 	.word	0x200001b4
 8002bcc:	200001a0 	.word	0x200001a0
 8002bd0:	20000198 	.word	0x20000198
 8002bd4:	200000bc 	.word	0x200000bc
 8002bd8:	2000000c 	.word	0x2000000c

08002bdc <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002be0:	4b04      	ldr	r3, [pc, #16]	@ (8002bf4 <vTaskSuspendAll+0x18>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	3301      	adds	r3, #1
 8002be6:	4a03      	ldr	r2, [pc, #12]	@ (8002bf4 <vTaskSuspendAll+0x18>)
 8002be8:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002bea:	bf00      	nop
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr
 8002bf4:	200001bc 	.word	0x200001bc

08002bf8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b088      	sub	sp, #32
 8002bfc:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002bfe:	2300      	movs	r3, #0
 8002c00:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8002c02:	2300      	movs	r3, #0
 8002c04:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002c06:	4b73      	ldr	r3, [pc, #460]	@ (8002dd4 <xTaskResumeAll+0x1dc>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d10b      	bne.n	8002c26 <xTaskResumeAll+0x2e>
        __asm volatile
 8002c0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002c12:	f383 8811 	msr	BASEPRI, r3
 8002c16:	f3bf 8f6f 	isb	sy
 8002c1a:	f3bf 8f4f 	dsb	sy
 8002c1e:	607b      	str	r3, [r7, #4]
    }
 8002c20:	bf00      	nop
 8002c22:	bf00      	nop
 8002c24:	e7fd      	b.n	8002c22 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002c26:	f001 f9e1 	bl	8003fec <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002c2a:	4b6a      	ldr	r3, [pc, #424]	@ (8002dd4 <xTaskResumeAll+0x1dc>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	3b01      	subs	r3, #1
 8002c30:	4a68      	ldr	r2, [pc, #416]	@ (8002dd4 <xTaskResumeAll+0x1dc>)
 8002c32:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002c34:	4b67      	ldr	r3, [pc, #412]	@ (8002dd4 <xTaskResumeAll+0x1dc>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f040 80c4 	bne.w	8002dc6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002c3e:	4b66      	ldr	r3, [pc, #408]	@ (8002dd8 <xTaskResumeAll+0x1e0>)
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	f000 80bf 	beq.w	8002dc6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002c48:	e08e      	b.n	8002d68 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002c4a:	4b64      	ldr	r3, [pc, #400]	@ (8002ddc <xTaskResumeAll+0x1e4>)
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c56:	613b      	str	r3, [r7, #16]
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	69db      	ldr	r3, [r3, #28]
 8002c5c:	69fa      	ldr	r2, [r7, #28]
 8002c5e:	6a12      	ldr	r2, [r2, #32]
 8002c60:	609a      	str	r2, [r3, #8]
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	69fa      	ldr	r2, [r7, #28]
 8002c68:	69d2      	ldr	r2, [r2, #28]
 8002c6a:	605a      	str	r2, [r3, #4]
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	685a      	ldr	r2, [r3, #4]
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	3318      	adds	r3, #24
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d103      	bne.n	8002c80 <xTaskResumeAll+0x88>
 8002c78:	69fb      	ldr	r3, [r7, #28]
 8002c7a:	6a1a      	ldr	r2, [r3, #32]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	605a      	str	r2, [r3, #4]
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	2200      	movs	r2, #0
 8002c84:	629a      	str	r2, [r3, #40]	@ 0x28
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	1e5a      	subs	r2, r3, #1
 8002c8c:	693b      	ldr	r3, [r7, #16]
 8002c8e:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002c90:	69fb      	ldr	r3, [r7, #28]
 8002c92:	695b      	ldr	r3, [r3, #20]
 8002c94:	60fb      	str	r3, [r7, #12]
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	689b      	ldr	r3, [r3, #8]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	68d2      	ldr	r2, [r2, #12]
 8002c9e:	609a      	str	r2, [r3, #8]
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	69fa      	ldr	r2, [r7, #28]
 8002ca6:	6892      	ldr	r2, [r2, #8]
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	685a      	ldr	r2, [r3, #4]
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3304      	adds	r3, #4
 8002cb2:	429a      	cmp	r2, r3
 8002cb4:	d103      	bne.n	8002cbe <xTaskResumeAll+0xc6>
 8002cb6:	69fb      	ldr	r3, [r7, #28]
 8002cb8:	68da      	ldr	r2, [r3, #12]
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	605a      	str	r2, [r3, #4]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	615a      	str	r2, [r3, #20]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	1e5a      	subs	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f002 fd4f 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cda:	2201      	movs	r2, #1
 8002cdc:	409a      	lsls	r2, r3
 8002cde:	4b40      	ldr	r3, [pc, #256]	@ (8002de0 <xTaskResumeAll+0x1e8>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	4a3e      	ldr	r2, [pc, #248]	@ (8002de0 <xTaskResumeAll+0x1e8>)
 8002ce6:	6013      	str	r3, [r2, #0]
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002cec:	493d      	ldr	r1, [pc, #244]	@ (8002de4 <xTaskResumeAll+0x1ec>)
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	3304      	adds	r3, #4
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	60bb      	str	r3, [r7, #8]
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	68ba      	ldr	r2, [r7, #8]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	689a      	ldr	r2, [r3, #8]
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	60da      	str	r2, [r3, #12]
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	3204      	adds	r2, #4
 8002d14:	605a      	str	r2, [r3, #4]
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	1d1a      	adds	r2, r3, #4
 8002d1a:	68bb      	ldr	r3, [r7, #8]
 8002d1c:	609a      	str	r2, [r3, #8]
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d22:	4613      	mov	r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	4413      	add	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4a2e      	ldr	r2, [pc, #184]	@ (8002de4 <xTaskResumeAll+0x1ec>)
 8002d2c:	441a      	add	r2, r3
 8002d2e:	69fb      	ldr	r3, [r7, #28]
 8002d30:	615a      	str	r2, [r3, #20]
 8002d32:	69fb      	ldr	r3, [r7, #28]
 8002d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d36:	492b      	ldr	r1, [pc, #172]	@ (8002de4 <xTaskResumeAll+0x1ec>)
 8002d38:	4613      	mov	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4413      	add	r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	1c59      	adds	r1, r3, #1
 8002d46:	4827      	ldr	r0, [pc, #156]	@ (8002de4 <xTaskResumeAll+0x1ec>)
 8002d48:	4613      	mov	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	4413      	add	r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	4403      	add	r3, r0
 8002d52:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002d58:	4b23      	ldr	r3, [pc, #140]	@ (8002de8 <xTaskResumeAll+0x1f0>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d302      	bcc.n	8002d68 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8002d62:	4b22      	ldr	r3, [pc, #136]	@ (8002dec <xTaskResumeAll+0x1f4>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002d68:	4b1c      	ldr	r3, [pc, #112]	@ (8002ddc <xTaskResumeAll+0x1e4>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f47f af6c 	bne.w	8002c4a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d001      	beq.n	8002d7c <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8002d78:	f000 fc3e 	bl	80035f8 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002d7c:	4b1c      	ldr	r3, [pc, #112]	@ (8002df0 <xTaskResumeAll+0x1f8>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d010      	beq.n	8002daa <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8002d88:	f000 f846 	bl	8002e18 <xTaskIncrementTick>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d002      	beq.n	8002d98 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8002d92:	4b16      	ldr	r3, [pc, #88]	@ (8002dec <xTaskResumeAll+0x1f4>)
 8002d94:	2201      	movs	r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8002d98:	697b      	ldr	r3, [r7, #20]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d1f1      	bne.n	8002d88 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8002da4:	4b12      	ldr	r3, [pc, #72]	@ (8002df0 <xTaskResumeAll+0x1f8>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8002daa:	4b10      	ldr	r3, [pc, #64]	@ (8002dec <xTaskResumeAll+0x1f4>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d009      	beq.n	8002dc6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8002db2:	2301      	movs	r3, #1
 8002db4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002db6:	4b0f      	ldr	r3, [pc, #60]	@ (8002df4 <xTaskResumeAll+0x1fc>)
 8002db8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002dbc:	601a      	str	r2, [r3, #0]
 8002dbe:	f3bf 8f4f 	dsb	sy
 8002dc2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002dc6:	f001 f943 	bl	8004050 <vPortExitCritical>

    return xAlreadyYielded;
 8002dca:	69bb      	ldr	r3, [r7, #24]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3720      	adds	r7, #32
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}
 8002dd4:	200001bc 	.word	0x200001bc
 8002dd8:	20000194 	.word	0x20000194
 8002ddc:	20000154 	.word	0x20000154
 8002de0:	2000019c 	.word	0x2000019c
 8002de4:	200000c0 	.word	0x200000c0
 8002de8:	200000bc 	.word	0x200000bc
 8002dec:	200001a8 	.word	0x200001a8
 8002df0:	200001a4 	.word	0x200001a4
 8002df4:	e000ed04 	.word	0xe000ed04

08002df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
    TickType_t xTicks;

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8002dfe:	4b05      	ldr	r3, [pc, #20]	@ (8002e14 <xTaskGetTickCount+0x1c>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    return xTicks;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	370c      	adds	r7, #12
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e10:	4770      	bx	lr
 8002e12:	bf00      	nop
 8002e14:	20000198 	.word	0x20000198

08002e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b08a      	sub	sp, #40	@ 0x28
 8002e1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002e1e:	2300      	movs	r3, #0
 8002e20:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002e22:	4b80      	ldr	r3, [pc, #512]	@ (8003024 <xTaskIncrementTick+0x20c>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	f040 80f1 	bne.w	800300e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8003028 <xTaskIncrementTick+0x210>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002e34:	4a7c      	ldr	r2, [pc, #496]	@ (8003028 <xTaskIncrementTick+0x210>)
 8002e36:	6a3b      	ldr	r3, [r7, #32]
 8002e38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002e3a:	6a3b      	ldr	r3, [r7, #32]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d121      	bne.n	8002e84 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8002e40:	4b7a      	ldr	r3, [pc, #488]	@ (800302c <xTaskIncrementTick+0x214>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d00b      	beq.n	8002e62 <xTaskIncrementTick+0x4a>
        __asm volatile
 8002e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e4e:	f383 8811 	msr	BASEPRI, r3
 8002e52:	f3bf 8f6f 	isb	sy
 8002e56:	f3bf 8f4f 	dsb	sy
 8002e5a:	607b      	str	r3, [r7, #4]
    }
 8002e5c:	bf00      	nop
 8002e5e:	bf00      	nop
 8002e60:	e7fd      	b.n	8002e5e <xTaskIncrementTick+0x46>
 8002e62:	4b72      	ldr	r3, [pc, #456]	@ (800302c <xTaskIncrementTick+0x214>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	61fb      	str	r3, [r7, #28]
 8002e68:	4b71      	ldr	r3, [pc, #452]	@ (8003030 <xTaskIncrementTick+0x218>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a6f      	ldr	r2, [pc, #444]	@ (800302c <xTaskIncrementTick+0x214>)
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4a6f      	ldr	r2, [pc, #444]	@ (8003030 <xTaskIncrementTick+0x218>)
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	6013      	str	r3, [r2, #0]
 8002e76:	4b6f      	ldr	r3, [pc, #444]	@ (8003034 <xTaskIncrementTick+0x21c>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8003034 <xTaskIncrementTick+0x21c>)
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	f000 fbba 	bl	80035f8 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002e84:	4b6c      	ldr	r3, [pc, #432]	@ (8003038 <xTaskIncrementTick+0x220>)
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	6a3a      	ldr	r2, [r7, #32]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f0c0 80aa 	bcc.w	8002fe4 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002e90:	4b66      	ldr	r3, [pc, #408]	@ (800302c <xTaskIncrementTick+0x214>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d104      	bne.n	8002ea4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002e9a:	4b67      	ldr	r3, [pc, #412]	@ (8003038 <xTaskIncrementTick+0x220>)
 8002e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea0:	601a      	str	r2, [r3, #0]
                    break;
 8002ea2:	e09f      	b.n	8002fe4 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002ea4:	4b61      	ldr	r3, [pc, #388]	@ (800302c <xTaskIncrementTick+0x214>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	685b      	ldr	r3, [r3, #4]
 8002eb2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8002eb4:	6a3a      	ldr	r2, [r7, #32]
 8002eb6:	697b      	ldr	r3, [r7, #20]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d203      	bcs.n	8002ec4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8002ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <xTaskIncrementTick+0x220>)
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8002ec2:	e08f      	b.n	8002fe4 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	695b      	ldr	r3, [r3, #20]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	6892      	ldr	r2, [r2, #8]
 8002edc:	605a      	str	r2, [r3, #4]
 8002ede:	693b      	ldr	r3, [r7, #16]
 8002ee0:	685a      	ldr	r2, [r3, #4]
 8002ee2:	69bb      	ldr	r3, [r7, #24]
 8002ee4:	3304      	adds	r3, #4
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	d103      	bne.n	8002ef2 <xTaskIncrementTick+0xda>
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	68da      	ldr	r2, [r3, #12]
 8002eee:	693b      	ldr	r3, [r7, #16]
 8002ef0:	605a      	str	r2, [r3, #4]
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	615a      	str	r2, [r3, #20]
 8002ef8:	693b      	ldr	r3, [r7, #16]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	1e5a      	subs	r2, r3, #1
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d01e      	beq.n	8002f48 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	69db      	ldr	r3, [r3, #28]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	6a12      	ldr	r2, [r2, #32]
 8002f18:	609a      	str	r2, [r3, #8]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	6a1b      	ldr	r3, [r3, #32]
 8002f1e:	69ba      	ldr	r2, [r7, #24]
 8002f20:	69d2      	ldr	r2, [r2, #28]
 8002f22:	605a      	str	r2, [r3, #4]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685a      	ldr	r2, [r3, #4]
 8002f28:	69bb      	ldr	r3, [r7, #24]
 8002f2a:	3318      	adds	r3, #24
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d103      	bne.n	8002f38 <xTaskIncrementTick+0x120>
 8002f30:	69bb      	ldr	r3, [r7, #24]
 8002f32:	6a1a      	ldr	r2, [r3, #32]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	605a      	str	r2, [r3, #4]
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	1e5a      	subs	r2, r3, #1
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002f48:	69bb      	ldr	r3, [r7, #24]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f002 fc12 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartReady>
 8002f50:	69bb      	ldr	r3, [r7, #24]
 8002f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f54:	2201      	movs	r2, #1
 8002f56:	409a      	lsls	r2, r3
 8002f58:	4b38      	ldr	r3, [pc, #224]	@ (800303c <xTaskIncrementTick+0x224>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4313      	orrs	r3, r2
 8002f5e:	4a37      	ldr	r2, [pc, #220]	@ (800303c <xTaskIncrementTick+0x224>)
 8002f60:	6013      	str	r3, [r2, #0]
 8002f62:	69bb      	ldr	r3, [r7, #24]
 8002f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f66:	4936      	ldr	r1, [pc, #216]	@ (8003040 <xTaskIncrementTick+0x228>)
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3304      	adds	r3, #4
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	69bb      	ldr	r3, [r7, #24]
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	609a      	str	r2, [r3, #8]
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	689a      	ldr	r2, [r3, #8]
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	60da      	str	r2, [r3, #12]
 8002f86:	68bb      	ldr	r3, [r7, #8]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	69ba      	ldr	r2, [r7, #24]
 8002f8c:	3204      	adds	r2, #4
 8002f8e:	605a      	str	r2, [r3, #4]
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1d1a      	adds	r2, r3, #4
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	009b      	lsls	r3, r3, #2
 8002fa0:	4413      	add	r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	4a26      	ldr	r2, [pc, #152]	@ (8003040 <xTaskIncrementTick+0x228>)
 8002fa6:	441a      	add	r2, r3
 8002fa8:	69bb      	ldr	r3, [r7, #24]
 8002faa:	615a      	str	r2, [r3, #20]
 8002fac:	69bb      	ldr	r3, [r7, #24]
 8002fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fb0:	4923      	ldr	r1, [pc, #140]	@ (8003040 <xTaskIncrementTick+0x228>)
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	4413      	add	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	1c59      	adds	r1, r3, #1
 8002fc0:	481f      	ldr	r0, [pc, #124]	@ (8003040 <xTaskIncrementTick+0x228>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	4403      	add	r3, r0
 8002fcc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8003044 <xTaskIncrementTick+0x22c>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	f67f af59 	bls.w	8002e90 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8002fde:	2301      	movs	r3, #1
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002fe2:	e755      	b.n	8002e90 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002fe4:	4b17      	ldr	r3, [pc, #92]	@ (8003044 <xTaskIncrementTick+0x22c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002fea:	4915      	ldr	r1, [pc, #84]	@ (8003040 <xTaskIncrementTick+0x228>)
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	009b      	lsls	r3, r3, #2
 8002ff4:	440b      	add	r3, r1
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	2b01      	cmp	r3, #1
 8002ffa:	d901      	bls.n	8003000 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8003000:	4b11      	ldr	r3, [pc, #68]	@ (8003048 <xTaskIncrementTick+0x230>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8003008:	2301      	movs	r3, #1
 800300a:	627b      	str	r3, [r7, #36]	@ 0x24
 800300c:	e004      	b.n	8003018 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800300e:	4b0f      	ldr	r3, [pc, #60]	@ (800304c <xTaskIncrementTick+0x234>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	3301      	adds	r3, #1
 8003014:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <xTaskIncrementTick+0x234>)
 8003016:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8003018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800301a:	4618      	mov	r0, r3
 800301c:	3728      	adds	r7, #40	@ 0x28
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	200001bc 	.word	0x200001bc
 8003028:	20000198 	.word	0x20000198
 800302c:	2000014c 	.word	0x2000014c
 8003030:	20000150 	.word	0x20000150
 8003034:	200001ac 	.word	0x200001ac
 8003038:	200001b4 	.word	0x200001b4
 800303c:	2000019c 	.word	0x2000019c
 8003040:	200000c0 	.word	0x200000c0
 8003044:	200000bc 	.word	0x200000bc
 8003048:	200001a8 	.word	0x200001a8
 800304c:	200001a4 	.word	0x200001a4

08003050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b086      	sub	sp, #24
 8003054:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003056:	4b2d      	ldr	r3, [pc, #180]	@ (800310c <vTaskSwitchContext+0xbc>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d003      	beq.n	8003066 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800305e:	4b2c      	ldr	r3, [pc, #176]	@ (8003110 <vTaskSwitchContext+0xc0>)
 8003060:	2201      	movs	r2, #1
 8003062:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8003064:	e04e      	b.n	8003104 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8003066:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <vTaskSwitchContext+0xc0>)
 8003068:	2200      	movs	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800306c:	4b29      	ldr	r3, [pc, #164]	@ (8003114 <vTaskSwitchContext+0xc4>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	fab3 f383 	clz	r3, r3
 8003078:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800307a:	7afb      	ldrb	r3, [r7, #11]
 800307c:	f1c3 031f 	rsb	r3, r3, #31
 8003080:	617b      	str	r3, [r7, #20]
 8003082:	4925      	ldr	r1, [pc, #148]	@ (8003118 <vTaskSwitchContext+0xc8>)
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	4613      	mov	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10b      	bne.n	80030ae <vTaskSwitchContext+0x5e>
        __asm volatile
 8003096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800309a:	f383 8811 	msr	BASEPRI, r3
 800309e:	f3bf 8f6f 	isb	sy
 80030a2:	f3bf 8f4f 	dsb	sy
 80030a6:	607b      	str	r3, [r7, #4]
    }
 80030a8:	bf00      	nop
 80030aa:	bf00      	nop
 80030ac:	e7fd      	b.n	80030aa <vTaskSwitchContext+0x5a>
 80030ae:	697a      	ldr	r2, [r7, #20]
 80030b0:	4613      	mov	r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	4413      	add	r3, r2
 80030b6:	009b      	lsls	r3, r3, #2
 80030b8:	4a17      	ldr	r2, [pc, #92]	@ (8003118 <vTaskSwitchContext+0xc8>)
 80030ba:	4413      	add	r3, r2
 80030bc:	613b      	str	r3, [r7, #16]
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	685a      	ldr	r2, [r3, #4]
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	605a      	str	r2, [r3, #4]
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	685a      	ldr	r2, [r3, #4]
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	3308      	adds	r3, #8
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <vTaskSwitchContext+0x8e>
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	685a      	ldr	r2, [r3, #4]
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	605a      	str	r2, [r3, #4]
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	68db      	ldr	r3, [r3, #12]
 80030e4:	4a0d      	ldr	r2, [pc, #52]	@ (800311c <vTaskSwitchContext+0xcc>)
 80030e6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80030e8:	4b0c      	ldr	r3, [pc, #48]	@ (800311c <vTaskSwitchContext+0xcc>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b0c      	ldr	r3, [pc, #48]	@ (8003120 <vTaskSwitchContext+0xd0>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	429a      	cmp	r2, r3
 80030f2:	d102      	bne.n	80030fa <vTaskSwitchContext+0xaa>
 80030f4:	f002 fa9e 	bl	8005634 <SEGGER_SYSVIEW_OnIdle>
}
 80030f8:	e004      	b.n	8003104 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80030fa:	4b08      	ldr	r3, [pc, #32]	@ (800311c <vTaskSwitchContext+0xcc>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f002 faf6 	bl	80056f0 <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8003104:	bf00      	nop
 8003106:	3718      	adds	r7, #24
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}
 800310c:	200001bc 	.word	0x200001bc
 8003110:	200001a8 	.word	0x200001a8
 8003114:	2000019c 	.word	0x2000019c
 8003118:	200000c0 	.word	0x200000c0
 800311c:	200000bc 	.word	0x200000bc
 8003120:	200001b8 	.word	0x200001b8

08003124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d10b      	bne.n	800314c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8003134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003138:	f383 8811 	msr	BASEPRI, r3
 800313c:	f3bf 8f6f 	isb	sy
 8003140:	f3bf 8f4f 	dsb	sy
 8003144:	60fb      	str	r3, [r7, #12]
    }
 8003146:	bf00      	nop
 8003148:	bf00      	nop
 800314a:	e7fd      	b.n	8003148 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800314c:	4b07      	ldr	r3, [pc, #28]	@ (800316c <vTaskPlaceOnEventList+0x48>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	3318      	adds	r3, #24
 8003152:	4619      	mov	r1, r3
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7fe ffba 	bl	80020ce <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800315a:	2101      	movs	r1, #1
 800315c:	6838      	ldr	r0, [r7, #0]
 800315e:	f000 fa85 	bl	800366c <prvAddCurrentTaskToDelayedList>
}
 8003162:	bf00      	nop
 8003164:	3710      	adds	r7, #16
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
 800316a:	bf00      	nop
 800316c:	200000bc 	.word	0x200000bc

08003170 <vTaskPlaceOnEventListRestricted>:
#if ( configUSE_TIMERS == 1 )

    void vTaskPlaceOnEventListRestricted( List_t * const pxEventList,
                                          TickType_t xTicksToWait,
                                          const BaseType_t xWaitIndefinitely )
    {
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af00      	add	r7, sp, #0
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	60b9      	str	r1, [r7, #8]
 800317a:	607a      	str	r2, [r7, #4]
        configASSERT( pxEventList );
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10b      	bne.n	800319a <vTaskPlaceOnEventListRestricted+0x2a>
        __asm volatile
 8003182:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003186:	f383 8811 	msr	BASEPRI, r3
 800318a:	f3bf 8f6f 	isb	sy
 800318e:	f3bf 8f4f 	dsb	sy
 8003192:	613b      	str	r3, [r7, #16]
    }
 8003194:	bf00      	nop
 8003196:	bf00      	nop
 8003198:	e7fd      	b.n	8003196 <vTaskPlaceOnEventListRestricted+0x26>

        /* Place the event list item of the TCB in the appropriate event list.
         * In this case it is assume that this is the only task that is going to
         * be waiting on this event list, so the faster vListInsertEnd() function
         * can be used in place of vListInsert. */
        listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	4b17      	ldr	r3, [pc, #92]	@ (8003200 <vTaskPlaceOnEventListRestricted+0x90>)
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	61da      	str	r2, [r3, #28]
 80031a8:	4b15      	ldr	r3, [pc, #84]	@ (8003200 <vTaskPlaceOnEventListRestricted+0x90>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	697a      	ldr	r2, [r7, #20]
 80031ae:	6892      	ldr	r2, [r2, #8]
 80031b0:	621a      	str	r2, [r3, #32]
 80031b2:	4b13      	ldr	r3, [pc, #76]	@ (8003200 <vTaskPlaceOnEventListRestricted+0x90>)
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	3218      	adds	r2, #24
 80031bc:	605a      	str	r2, [r3, #4]
 80031be:	4b10      	ldr	r3, [pc, #64]	@ (8003200 <vTaskPlaceOnEventListRestricted+0x90>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f103 0218 	add.w	r2, r3, #24
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	609a      	str	r2, [r3, #8]
 80031ca:	4b0d      	ldr	r3, [pc, #52]	@ (8003200 <vTaskPlaceOnEventListRestricted+0x90>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	1c5a      	adds	r2, r3, #1
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	601a      	str	r2, [r3, #0]

        /* If the task should block indefinitely then set the block time to a
         * value that will be recognised as an indefinite delay inside the
         * prvAddCurrentTaskToDelayedList() function. */
        if( xWaitIndefinitely != pdFALSE )
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d002      	beq.n	80031e8 <vTaskPlaceOnEventListRestricted+0x78>
        {
            xTicksToWait = portMAX_DELAY;
 80031e2:	f04f 33ff 	mov.w	r3, #4294967295
 80031e6:	60bb      	str	r3, [r7, #8]
        }

        traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
 80031e8:	2024      	movs	r0, #36	@ 0x24
 80031ea:	f001 fd49 	bl	8004c80 <SEGGER_SYSVIEW_RecordVoid>
        prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80031ee:	6879      	ldr	r1, [r7, #4]
 80031f0:	68b8      	ldr	r0, [r7, #8]
 80031f2:	f000 fa3b 	bl	800366c <prvAddCurrentTaskToDelayedList>
    }
 80031f6:	bf00      	nop
 80031f8:	3718      	adds	r7, #24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	200000bc 	.word	0x200000bc

08003204 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b08a      	sub	sp, #40	@ 0x28
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8003214:	6a3b      	ldr	r3, [r7, #32]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d10b      	bne.n	8003232 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 800321a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800321e:	f383 8811 	msr	BASEPRI, r3
 8003222:	f3bf 8f6f 	isb	sy
 8003226:	f3bf 8f4f 	dsb	sy
 800322a:	60fb      	str	r3, [r7, #12]
    }
 800322c:	bf00      	nop
 800322e:	bf00      	nop
 8003230:	e7fd      	b.n	800322e <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003232:	6a3b      	ldr	r3, [r7, #32]
 8003234:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003236:	61fb      	str	r3, [r7, #28]
 8003238:	6a3b      	ldr	r3, [r7, #32]
 800323a:	69db      	ldr	r3, [r3, #28]
 800323c:	6a3a      	ldr	r2, [r7, #32]
 800323e:	6a12      	ldr	r2, [r2, #32]
 8003240:	609a      	str	r2, [r3, #8]
 8003242:	6a3b      	ldr	r3, [r7, #32]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	6a3a      	ldr	r2, [r7, #32]
 8003248:	69d2      	ldr	r2, [r2, #28]
 800324a:	605a      	str	r2, [r3, #4]
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	685a      	ldr	r2, [r3, #4]
 8003250:	6a3b      	ldr	r3, [r7, #32]
 8003252:	3318      	adds	r3, #24
 8003254:	429a      	cmp	r2, r3
 8003256:	d103      	bne.n	8003260 <xTaskRemoveFromEventList+0x5c>
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	605a      	str	r2, [r3, #4]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	2200      	movs	r2, #0
 8003264:	629a      	str	r2, [r3, #40]	@ 0x28
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	1e5a      	subs	r2, r3, #1
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003270:	4b4b      	ldr	r3, [pc, #300]	@ (80033a0 <xTaskRemoveFromEventList+0x19c>)
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d162      	bne.n	800333e <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003278:	6a3b      	ldr	r3, [r7, #32]
 800327a:	695b      	ldr	r3, [r3, #20]
 800327c:	617b      	str	r3, [r7, #20]
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	6a3a      	ldr	r2, [r7, #32]
 8003284:	68d2      	ldr	r2, [r2, #12]
 8003286:	609a      	str	r2, [r3, #8]
 8003288:	6a3b      	ldr	r3, [r7, #32]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	6a3a      	ldr	r2, [r7, #32]
 800328e:	6892      	ldr	r2, [r2, #8]
 8003290:	605a      	str	r2, [r3, #4]
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	685a      	ldr	r2, [r3, #4]
 8003296:	6a3b      	ldr	r3, [r7, #32]
 8003298:	3304      	adds	r3, #4
 800329a:	429a      	cmp	r2, r3
 800329c:	d103      	bne.n	80032a6 <xTaskRemoveFromEventList+0xa2>
 800329e:	6a3b      	ldr	r3, [r7, #32]
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	697b      	ldr	r3, [r7, #20]
 80032a4:	605a      	str	r2, [r3, #4]
 80032a6:	6a3b      	ldr	r3, [r7, #32]
 80032a8:	2200      	movs	r2, #0
 80032aa:	615a      	str	r2, [r3, #20]
 80032ac:	697b      	ldr	r3, [r7, #20]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	1e5a      	subs	r2, r3, #1
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80032b6:	6a3b      	ldr	r3, [r7, #32]
 80032b8:	4618      	mov	r0, r3
 80032ba:	f002 fa5b 	bl	8005774 <SEGGER_SYSVIEW_OnTaskStartReady>
 80032be:	6a3b      	ldr	r3, [r7, #32]
 80032c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032c2:	2201      	movs	r2, #1
 80032c4:	409a      	lsls	r2, r3
 80032c6:	4b37      	ldr	r3, [pc, #220]	@ (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	4a35      	ldr	r2, [pc, #212]	@ (80033a4 <xTaskRemoveFromEventList+0x1a0>)
 80032ce:	6013      	str	r3, [r2, #0]
 80032d0:	6a3b      	ldr	r3, [r7, #32]
 80032d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032d4:	4934      	ldr	r1, [pc, #208]	@ (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 80032d6:	4613      	mov	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	4413      	add	r3, r2
 80032dc:	009b      	lsls	r3, r3, #2
 80032de:	440b      	add	r3, r1
 80032e0:	3304      	adds	r3, #4
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	613b      	str	r3, [r7, #16]
 80032e6:	6a3b      	ldr	r3, [r7, #32]
 80032e8:	693a      	ldr	r2, [r7, #16]
 80032ea:	609a      	str	r2, [r3, #8]
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	689a      	ldr	r2, [r3, #8]
 80032f0:	6a3b      	ldr	r3, [r7, #32]
 80032f2:	60da      	str	r2, [r3, #12]
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	6a3a      	ldr	r2, [r7, #32]
 80032fa:	3204      	adds	r2, #4
 80032fc:	605a      	str	r2, [r3, #4]
 80032fe:	6a3b      	ldr	r3, [r7, #32]
 8003300:	1d1a      	adds	r2, r3, #4
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	609a      	str	r2, [r3, #8]
 8003306:	6a3b      	ldr	r3, [r7, #32]
 8003308:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800330a:	4613      	mov	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	4413      	add	r3, r2
 8003310:	009b      	lsls	r3, r3, #2
 8003312:	4a25      	ldr	r2, [pc, #148]	@ (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 8003314:	441a      	add	r2, r3
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	615a      	str	r2, [r3, #20]
 800331a:	6a3b      	ldr	r3, [r7, #32]
 800331c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800331e:	4922      	ldr	r1, [pc, #136]	@ (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 8003320:	4613      	mov	r3, r2
 8003322:	009b      	lsls	r3, r3, #2
 8003324:	4413      	add	r3, r2
 8003326:	009b      	lsls	r3, r3, #2
 8003328:	440b      	add	r3, r1
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	1c59      	adds	r1, r3, #1
 800332e:	481e      	ldr	r0, [pc, #120]	@ (80033a8 <xTaskRemoveFromEventList+0x1a4>)
 8003330:	4613      	mov	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4403      	add	r3, r0
 800333a:	6019      	str	r1, [r3, #0]
 800333c:	e01b      	b.n	8003376 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800333e:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <xTaskRemoveFromEventList+0x1a8>)
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	6a3b      	ldr	r3, [r7, #32]
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	61da      	str	r2, [r3, #28]
 800334a:	69bb      	ldr	r3, [r7, #24]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	6a3b      	ldr	r3, [r7, #32]
 8003350:	621a      	str	r2, [r3, #32]
 8003352:	69bb      	ldr	r3, [r7, #24]
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	6a3a      	ldr	r2, [r7, #32]
 8003358:	3218      	adds	r2, #24
 800335a:	605a      	str	r2, [r3, #4]
 800335c:	6a3b      	ldr	r3, [r7, #32]
 800335e:	f103 0218 	add.w	r2, r3, #24
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	609a      	str	r2, [r3, #8]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	4a10      	ldr	r2, [pc, #64]	@ (80033ac <xTaskRemoveFromEventList+0x1a8>)
 800336a:	629a      	str	r2, [r3, #40]	@ 0x28
 800336c:	4b0f      	ldr	r3, [pc, #60]	@ (80033ac <xTaskRemoveFromEventList+0x1a8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	3301      	adds	r3, #1
 8003372:	4a0e      	ldr	r2, [pc, #56]	@ (80033ac <xTaskRemoveFromEventList+0x1a8>)
 8003374:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800337a:	4b0d      	ldr	r3, [pc, #52]	@ (80033b0 <xTaskRemoveFromEventList+0x1ac>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003380:	429a      	cmp	r2, r3
 8003382:	d905      	bls.n	8003390 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8003384:	2301      	movs	r3, #1
 8003386:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8003388:	4b0a      	ldr	r3, [pc, #40]	@ (80033b4 <xTaskRemoveFromEventList+0x1b0>)
 800338a:	2201      	movs	r2, #1
 800338c:	601a      	str	r2, [r3, #0]
 800338e:	e001      	b.n	8003394 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8003396:	4618      	mov	r0, r3
 8003398:	3728      	adds	r7, #40	@ 0x28
 800339a:	46bd      	mov	sp, r7
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200001bc 	.word	0x200001bc
 80033a4:	2000019c 	.word	0x2000019c
 80033a8:	200000c0 	.word	0x200000c0
 80033ac:	20000154 	.word	0x20000154
 80033b0:	200000bc 	.word	0x200000bc
 80033b4:	200001a8 	.word	0x200001a8

080033b8 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033b8:	b480      	push	{r7}
 80033ba:	b083      	sub	sp, #12
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033c0:	4b06      	ldr	r3, [pc, #24]	@ (80033dc <vTaskInternalSetTimeOutState+0x24>)
 80033c2:	681a      	ldr	r2, [r3, #0]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80033c8:	4b05      	ldr	r3, [pc, #20]	@ (80033e0 <vTaskInternalSetTimeOutState+0x28>)
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	605a      	str	r2, [r3, #4]
}
 80033d0:	bf00      	nop
 80033d2:	370c      	adds	r7, #12
 80033d4:	46bd      	mov	sp, r7
 80033d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033da:	4770      	bx	lr
 80033dc:	200001ac 	.word	0x200001ac
 80033e0:	20000198 	.word	0x20000198

080033e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b088      	sub	sp, #32
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d10b      	bne.n	800340c <xTaskCheckForTimeOut+0x28>
        __asm volatile
 80033f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80033f8:	f383 8811 	msr	BASEPRI, r3
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	f3bf 8f4f 	dsb	sy
 8003404:	613b      	str	r3, [r7, #16]
    }
 8003406:	bf00      	nop
 8003408:	bf00      	nop
 800340a:	e7fd      	b.n	8003408 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10b      	bne.n	800342a <xTaskCheckForTimeOut+0x46>
        __asm volatile
 8003412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003416:	f383 8811 	msr	BASEPRI, r3
 800341a:	f3bf 8f6f 	isb	sy
 800341e:	f3bf 8f4f 	dsb	sy
 8003422:	60fb      	str	r3, [r7, #12]
    }
 8003424:	bf00      	nop
 8003426:	bf00      	nop
 8003428:	e7fd      	b.n	8003426 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 800342a:	f000 fddf 	bl	8003fec <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800342e:	4b1f      	ldr	r3, [pc, #124]	@ (80034ac <xTaskCheckForTimeOut+0xc8>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d102      	bne.n	800344e <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e026      	b.n	800349c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b17      	ldr	r3, [pc, #92]	@ (80034b0 <xTaskCheckForTimeOut+0xcc>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d00a      	beq.n	8003470 <xTaskCheckForTimeOut+0x8c>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d305      	bcc.n	8003470 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8003468:	683b      	ldr	r3, [r7, #0]
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	e015      	b.n	800349c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	429a      	cmp	r2, r3
 8003478:	d20b      	bcs.n	8003492 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681a      	ldr	r2, [r3, #0]
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	1ad2      	subs	r2, r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f7ff ff96 	bl	80033b8 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800348c:	2300      	movs	r3, #0
 800348e:	61fb      	str	r3, [r7, #28]
 8003490:	e004      	b.n	800349c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8003498:	2301      	movs	r3, #1
 800349a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800349c:	f000 fdd8 	bl	8004050 <vPortExitCritical>

    return xReturn;
 80034a0:	69fb      	ldr	r3, [r7, #28]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3720      	adds	r7, #32
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}
 80034aa:	bf00      	nop
 80034ac:	20000198 	.word	0x20000198
 80034b0:	200001ac 	.word	0x200001ac

080034b4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 80034b8:	4b03      	ldr	r3, [pc, #12]	@ (80034c8 <vTaskMissedYield+0x14>)
 80034ba:	2201      	movs	r2, #1
 80034bc:	601a      	str	r2, [r3, #0]
}
 80034be:	bf00      	nop
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr
 80034c8:	200001a8 	.word	0x200001a8

080034cc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 80034d4:	f000 f852 	bl	800357c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034d8:	4b06      	ldr	r3, [pc, #24]	@ (80034f4 <prvIdleTask+0x28>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	2b01      	cmp	r3, #1
 80034de:	d9f9      	bls.n	80034d4 <prvIdleTask+0x8>
            {
                taskYIELD();
 80034e0:	4b05      	ldr	r3, [pc, #20]	@ (80034f8 <prvIdleTask+0x2c>)
 80034e2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034e6:	601a      	str	r2, [r3, #0]
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 80034f0:	e7f0      	b.n	80034d4 <prvIdleTask+0x8>
 80034f2:	bf00      	nop
 80034f4:	200000c0 	.word	0x200000c0
 80034f8:	e000ed04 	.word	0xe000ed04

080034fc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003502:	2300      	movs	r3, #0
 8003504:	607b      	str	r3, [r7, #4]
 8003506:	e00c      	b.n	8003522 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	4613      	mov	r3, r2
 800350c:	009b      	lsls	r3, r3, #2
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	4a12      	ldr	r2, [pc, #72]	@ (800355c <prvInitialiseTaskLists+0x60>)
 8003514:	4413      	add	r3, r2
 8003516:	4618      	mov	r0, r3
 8003518:	f7fe fdac 	bl	8002074 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	3301      	adds	r3, #1
 8003520:	607b      	str	r3, [r7, #4]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2b04      	cmp	r3, #4
 8003526:	d9ef      	bls.n	8003508 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8003528:	480d      	ldr	r0, [pc, #52]	@ (8003560 <prvInitialiseTaskLists+0x64>)
 800352a:	f7fe fda3 	bl	8002074 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800352e:	480d      	ldr	r0, [pc, #52]	@ (8003564 <prvInitialiseTaskLists+0x68>)
 8003530:	f7fe fda0 	bl	8002074 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003534:	480c      	ldr	r0, [pc, #48]	@ (8003568 <prvInitialiseTaskLists+0x6c>)
 8003536:	f7fe fd9d 	bl	8002074 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800353a:	480c      	ldr	r0, [pc, #48]	@ (800356c <prvInitialiseTaskLists+0x70>)
 800353c:	f7fe fd9a 	bl	8002074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8003540:	480b      	ldr	r0, [pc, #44]	@ (8003570 <prvInitialiseTaskLists+0x74>)
 8003542:	f7fe fd97 	bl	8002074 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8003546:	4b0b      	ldr	r3, [pc, #44]	@ (8003574 <prvInitialiseTaskLists+0x78>)
 8003548:	4a05      	ldr	r2, [pc, #20]	@ (8003560 <prvInitialiseTaskLists+0x64>)
 800354a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800354c:	4b0a      	ldr	r3, [pc, #40]	@ (8003578 <prvInitialiseTaskLists+0x7c>)
 800354e:	4a05      	ldr	r2, [pc, #20]	@ (8003564 <prvInitialiseTaskLists+0x68>)
 8003550:	601a      	str	r2, [r3, #0]
}
 8003552:	bf00      	nop
 8003554:	3708      	adds	r7, #8
 8003556:	46bd      	mov	sp, r7
 8003558:	bd80      	pop	{r7, pc}
 800355a:	bf00      	nop
 800355c:	200000c0 	.word	0x200000c0
 8003560:	20000124 	.word	0x20000124
 8003564:	20000138 	.word	0x20000138
 8003568:	20000154 	.word	0x20000154
 800356c:	20000168 	.word	0x20000168
 8003570:	20000180 	.word	0x20000180
 8003574:	2000014c 	.word	0x2000014c
 8003578:	20000150 	.word	0x20000150

0800357c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800357c:	b580      	push	{r7, lr}
 800357e:	b082      	sub	sp, #8
 8003580:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003582:	e019      	b.n	80035b8 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8003584:	f000 fd32 	bl	8003fec <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003588:	4b10      	ldr	r3, [pc, #64]	@ (80035cc <prvCheckTasksWaitingTermination+0x50>)
 800358a:	68db      	ldr	r3, [r3, #12]
 800358c:	68db      	ldr	r3, [r3, #12]
 800358e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	3304      	adds	r3, #4
 8003594:	4618      	mov	r0, r3
 8003596:	f7fe fdd3 	bl	8002140 <uxListRemove>
                --uxCurrentNumberOfTasks;
 800359a:	4b0d      	ldr	r3, [pc, #52]	@ (80035d0 <prvCheckTasksWaitingTermination+0x54>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	3b01      	subs	r3, #1
 80035a0:	4a0b      	ldr	r2, [pc, #44]	@ (80035d0 <prvCheckTasksWaitingTermination+0x54>)
 80035a2:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 80035a4:	4b0b      	ldr	r3, [pc, #44]	@ (80035d4 <prvCheckTasksWaitingTermination+0x58>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	3b01      	subs	r3, #1
 80035aa:	4a0a      	ldr	r2, [pc, #40]	@ (80035d4 <prvCheckTasksWaitingTermination+0x58>)
 80035ac:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 80035ae:	f000 fd4f 	bl	8004050 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 80035b2:	6878      	ldr	r0, [r7, #4]
 80035b4:	f000 f810 	bl	80035d8 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035b8:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <prvCheckTasksWaitingTermination+0x58>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e1      	bne.n	8003584 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80035c0:	bf00      	nop
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000168 	.word	0x20000168
 80035d0:	20000194 	.word	0x20000194
 80035d4:	2000017c 	.word	0x2000017c

080035d8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 fead 	bl	8004344 <vPortFree>
            vPortFree( pxTCB );
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f000 feaa 	bl	8004344 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 80035f0:	bf00      	nop
 80035f2:	3708      	adds	r7, #8
 80035f4:	46bd      	mov	sp, r7
 80035f6:	bd80      	pop	{r7, pc}

080035f8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80035f8:	b480      	push	{r7}
 80035fa:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003628 <prvResetNextTaskUnblockTime+0x30>)
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	2b00      	cmp	r3, #0
 8003604:	d104      	bne.n	8003610 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <prvResetNextTaskUnblockTime+0x34>)
 8003608:	f04f 32ff 	mov.w	r2, #4294967295
 800360c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800360e:	e005      	b.n	800361c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003610:	4b05      	ldr	r3, [pc, #20]	@ (8003628 <prvResetNextTaskUnblockTime+0x30>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68db      	ldr	r3, [r3, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a04      	ldr	r2, [pc, #16]	@ (800362c <prvResetNextTaskUnblockTime+0x34>)
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	46bd      	mov	sp, r7
 8003620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003624:	4770      	bx	lr
 8003626:	bf00      	nop
 8003628:	2000014c 	.word	0x2000014c
 800362c:	200001b4 	.word	0x200001b4

08003630 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8003630:	b480      	push	{r7}
 8003632:	b083      	sub	sp, #12
 8003634:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        if( xSchedulerRunning == pdFALSE )
 8003636:	4b0b      	ldr	r3, [pc, #44]	@ (8003664 <xTaskGetSchedulerState+0x34>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d102      	bne.n	8003644 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800363e:	2301      	movs	r3, #1
 8003640:	607b      	str	r3, [r7, #4]
 8003642:	e008      	b.n	8003656 <xTaskGetSchedulerState+0x26>
        }
        else
        {
            if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003644:	4b08      	ldr	r3, [pc, #32]	@ (8003668 <xTaskGetSchedulerState+0x38>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d102      	bne.n	8003652 <xTaskGetSchedulerState+0x22>
            {
                xReturn = taskSCHEDULER_RUNNING;
 800364c:	2302      	movs	r3, #2
 800364e:	607b      	str	r3, [r7, #4]
 8003650:	e001      	b.n	8003656 <xTaskGetSchedulerState+0x26>
            }
            else
            {
                xReturn = taskSCHEDULER_SUSPENDED;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]
            }
        }

        return xReturn;
 8003656:	687b      	ldr	r3, [r7, #4]
    }
 8003658:	4618      	mov	r0, r3
 800365a:	370c      	adds	r7, #12
 800365c:	46bd      	mov	sp, r7
 800365e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003662:	4770      	bx	lr
 8003664:	200001a0 	.word	0x200001a0
 8003668:	200001bc 	.word	0x200001bc

0800366c <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b086      	sub	sp, #24
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003676:	4b36      	ldr	r3, [pc, #216]	@ (8003750 <prvAddCurrentTaskToDelayedList+0xe4>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800367c:	4b35      	ldr	r3, [pc, #212]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	3304      	adds	r3, #4
 8003682:	4618      	mov	r0, r3
 8003684:	f7fe fd5c 	bl	8002140 <uxListRemove>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d10b      	bne.n	80036a6 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800368e:	4b31      	ldr	r3, [pc, #196]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003694:	2201      	movs	r2, #1
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43da      	mvns	r2, r3
 800369c:	4b2e      	ldr	r3, [pc, #184]	@ (8003758 <prvAddCurrentTaskToDelayedList+0xec>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4013      	ands	r3, r2
 80036a2:	4a2d      	ldr	r2, [pc, #180]	@ (8003758 <prvAddCurrentTaskToDelayedList+0xec>)
 80036a4:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d124      	bne.n	80036f8 <prvAddCurrentTaskToDelayedList+0x8c>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d021      	beq.n	80036f8 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80036b4:	4b29      	ldr	r3, [pc, #164]	@ (800375c <prvAddCurrentTaskToDelayedList+0xf0>)
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	613b      	str	r3, [r7, #16]
 80036ba:	4b26      	ldr	r3, [pc, #152]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	693a      	ldr	r2, [r7, #16]
 80036c0:	609a      	str	r2, [r3, #8]
 80036c2:	4b24      	ldr	r3, [pc, #144]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	6892      	ldr	r2, [r2, #8]
 80036ca:	60da      	str	r2, [r3, #12]
 80036cc:	4b21      	ldr	r3, [pc, #132]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036ce:	681a      	ldr	r2, [r3, #0]
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	689b      	ldr	r3, [r3, #8]
 80036d4:	3204      	adds	r2, #4
 80036d6:	605a      	str	r2, [r3, #4]
 80036d8:	4b1e      	ldr	r3, [pc, #120]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	1d1a      	adds	r2, r3, #4
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	609a      	str	r2, [r3, #8]
 80036e2:	4b1c      	ldr	r3, [pc, #112]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a1d      	ldr	r2, [pc, #116]	@ (800375c <prvAddCurrentTaskToDelayedList+0xf0>)
 80036e8:	615a      	str	r2, [r3, #20]
 80036ea:	4b1c      	ldr	r3, [pc, #112]	@ (800375c <prvAddCurrentTaskToDelayedList+0xf0>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3301      	adds	r3, #1
 80036f0:	4a1a      	ldr	r2, [pc, #104]	@ (800375c <prvAddCurrentTaskToDelayedList+0xf0>)
 80036f2:	6013      	str	r3, [r2, #0]
 80036f4:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 80036f6:	e026      	b.n	8003746 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 80036f8:	697a      	ldr	r2, [r7, #20]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003700:	4b14      	ldr	r3, [pc, #80]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	68fa      	ldr	r2, [r7, #12]
 8003706:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	429a      	cmp	r2, r3
 800370e:	d209      	bcs.n	8003724 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003710:	4b13      	ldr	r3, [pc, #76]	@ (8003760 <prvAddCurrentTaskToDelayedList+0xf4>)
 8003712:	681a      	ldr	r2, [r3, #0]
 8003714:	4b0f      	ldr	r3, [pc, #60]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3304      	adds	r3, #4
 800371a:	4619      	mov	r1, r3
 800371c:	4610      	mov	r0, r2
 800371e:	f7fe fcd6 	bl	80020ce <vListInsert>
}
 8003722:	e010      	b.n	8003746 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003724:	4b0f      	ldr	r3, [pc, #60]	@ (8003764 <prvAddCurrentTaskToDelayedList+0xf8>)
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	4b0a      	ldr	r3, [pc, #40]	@ (8003754 <prvAddCurrentTaskToDelayedList+0xe8>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	3304      	adds	r3, #4
 800372e:	4619      	mov	r1, r3
 8003730:	4610      	mov	r0, r2
 8003732:	f7fe fccc 	bl	80020ce <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8003736:	4b0c      	ldr	r3, [pc, #48]	@ (8003768 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	429a      	cmp	r2, r3
 800373e:	d202      	bcs.n	8003746 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8003740:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <prvAddCurrentTaskToDelayedList+0xfc>)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	6013      	str	r3, [r2, #0]
}
 8003746:	bf00      	nop
 8003748:	3718      	adds	r7, #24
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	20000198 	.word	0x20000198
 8003754:	200000bc 	.word	0x200000bc
 8003758:	2000019c 	.word	0x2000019c
 800375c:	20000180 	.word	0x20000180
 8003760:	20000150 	.word	0x20000150
 8003764:	2000014c 	.word	0x2000014c
 8003768:	200001b4 	.word	0x200001b4

0800376c <xTimerCreateTimerTask>:
                                       TimerCallbackFunction_t pxCallbackFunction,
                                       Timer_t * pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

    BaseType_t xTimerCreateTimerTask( void )
    {
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af02      	add	r7, sp, #8
        BaseType_t xReturn = pdFAIL;
 8003772:	2300      	movs	r3, #0
 8003774:	607b      	str	r3, [r7, #4]

        /* This function is called when the scheduler is started if
         * configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
         * timer service task has been created/initialised.  If timers have already
         * been created then the initialisation will already have been performed. */
        prvCheckForValidListAndQueue();
 8003776:	f000 fa4f 	bl	8003c18 <prvCheckForValidListAndQueue>

        if( xTimerQueue != NULL )
 800377a:	4b12      	ldr	r3, [pc, #72]	@ (80037c4 <xTimerCreateTimerTask+0x58>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d00b      	beq.n	800379a <xTimerCreateTimerTask+0x2e>
                    xReturn = pdPASS;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvTimerTask,
 8003782:	4b11      	ldr	r3, [pc, #68]	@ (80037c8 <xTimerCreateTimerTask+0x5c>)
 8003784:	9301      	str	r3, [sp, #4]
 8003786:	2302      	movs	r3, #2
 8003788:	9300      	str	r3, [sp, #0]
 800378a:	2300      	movs	r3, #0
 800378c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003790:	490e      	ldr	r1, [pc, #56]	@ (80037cc <xTimerCreateTimerTask+0x60>)
 8003792:	480f      	ldr	r0, [pc, #60]	@ (80037d0 <xTimerCreateTimerTask+0x64>)
 8003794:	f7ff f836 	bl	8002804 <xTaskCreate>
 8003798:	6078      	str	r0, [r7, #4]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        configASSERT( xReturn );
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d10b      	bne.n	80037b8 <xTimerCreateTimerTask+0x4c>
        __asm volatile
 80037a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80037a4:	f383 8811 	msr	BASEPRI, r3
 80037a8:	f3bf 8f6f 	isb	sy
 80037ac:	f3bf 8f4f 	dsb	sy
 80037b0:	603b      	str	r3, [r7, #0]
    }
 80037b2:	bf00      	nop
 80037b4:	bf00      	nop
 80037b6:	e7fd      	b.n	80037b4 <xTimerCreateTimerTask+0x48>
        return xReturn;
 80037b8:	687b      	ldr	r3, [r7, #4]
    }
 80037ba:	4618      	mov	r0, r3
 80037bc:	3708      	adds	r7, #8
 80037be:	46bd      	mov	sp, r7
 80037c0:	bd80      	pop	{r7, pc}
 80037c2:	bf00      	nop
 80037c4:	200001f0 	.word	0x200001f0
 80037c8:	200001f4 	.word	0x200001f4
 80037cc:	08005b6c 	.word	0x08005b6c
 80037d0:	08003879 	.word	0x08003879

080037d4 <prvReloadTimer>:
/*-----------------------------------------------------------*/

    static void prvReloadTimer( Timer_t * const pxTimer,
                                TickType_t xExpiredTime,
                                const TickType_t xTimeNow )
    {
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	60f8      	str	r0, [r7, #12]
 80037dc:	60b9      	str	r1, [r7, #8]
 80037de:	607a      	str	r2, [r7, #4]
        /* Insert the timer into the appropriate list for the next expiry time.
         * If the next expiry time has already passed, advance the expiry time,
         * call the callback function, and try again. */
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037e0:	e008      	b.n	80037f4 <prvReloadTimer+0x20>
        {
            /* Advance the expiry time. */
            xExpiredTime += pxTimer->xTimerPeriodInTicks;
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	4413      	add	r3, r2
 80037ea:	60bb      	str	r3, [r7, #8]

            /* Call the timer callback. */
            traceTIMER_EXPIRED( pxTimer );
            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	6a1b      	ldr	r3, [r3, #32]
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	4798      	blx	r3
        while( prvInsertTimerInActiveList( pxTimer, ( xExpiredTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xExpiredTime ) != pdFALSE )
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	699a      	ldr	r2, [r3, #24]
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	18d1      	adds	r1, r2, r3
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	68f8      	ldr	r0, [r7, #12]
 8003802:	f000 f8df 	bl	80039c4 <prvInsertTimerInActiveList>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1ea      	bne.n	80037e2 <prvReloadTimer+0xe>
        }
    }
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
	...

08003818 <prvProcessExpiredTimer>:
/*-----------------------------------------------------------*/

    static void prvProcessExpiredTimer( const TickType_t xNextExpireTime,
                                        const TickType_t xTimeNow )
    {
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
        Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003822:	4b14      	ldr	r3, [pc, #80]	@ (8003874 <prvProcessExpiredTimer+0x5c>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	68db      	ldr	r3, [r3, #12]
 800382a:	60fb      	str	r3, [r7, #12]

        /* Remove the timer from the list of active timers.  A check has already
         * been performed to ensure the list is not empty. */

        ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	3304      	adds	r3, #4
 8003830:	4618      	mov	r0, r3
 8003832:	f7fe fc85 	bl	8002140 <uxListRemove>

        /* If the timer is an auto-reload timer then calculate the next
         * expiry time and re-insert the timer in the list of active timers. */
        if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d005      	beq.n	8003850 <prvProcessExpiredTimer+0x38>
        {
            prvReloadTimer( pxTimer, xNextExpireTime, xTimeNow );
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	68f8      	ldr	r0, [r7, #12]
 800384a:	f7ff ffc3 	bl	80037d4 <prvReloadTimer>
 800384e:	e008      	b.n	8003862 <prvProcessExpiredTimer+0x4a>
        }
        else
        {
            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003856:	f023 0301 	bic.w	r3, r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        }

        /* Call the timer callback. */
        traceTIMER_EXPIRED( pxTimer );
        pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	6a1b      	ldr	r3, [r3, #32]
 8003866:	68f8      	ldr	r0, [r7, #12]
 8003868:	4798      	blx	r3
    }
 800386a:	bf00      	nop
 800386c:	3710      	adds	r7, #16
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	200001e8 	.word	0x200001e8

08003878 <prvTimerTask>:
/*-----------------------------------------------------------*/

    static portTASK_FUNCTION( prvTimerTask, pvParameters )
    {
 8003878:	b580      	push	{r7, lr}
 800387a:	b084      	sub	sp, #16
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]

        for( ; ; )
        {
            /* Query the timers list to see if it contains any timers, and if so,
             * obtain the time at which the next timer will expire. */
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003880:	f107 0308 	add.w	r3, r7, #8
 8003884:	4618      	mov	r0, r3
 8003886:	f000 f859 	bl	800393c <prvGetNextExpireTime>
 800388a:	60f8      	str	r0, [r7, #12]

            /* If a timer has expired, process it.  Otherwise, block this task
             * until either a timer does expire, or a command is received. */
            prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4619      	mov	r1, r3
 8003890:	68f8      	ldr	r0, [r7, #12]
 8003892:	f000 f805 	bl	80038a0 <prvProcessTimerOrBlockTask>

            /* Empty the command queue. */
            prvProcessReceivedCommands();
 8003896:	f000 f8d7 	bl	8003a48 <prvProcessReceivedCommands>
            xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800389a:	bf00      	nop
 800389c:	e7f0      	b.n	8003880 <prvTimerTask+0x8>
	...

080038a0 <prvProcessTimerOrBlockTask>:
    }
/*-----------------------------------------------------------*/

    static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime,
                                            BaseType_t xListWasEmpty )
    {
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b084      	sub	sp, #16
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
        TickType_t xTimeNow;
        BaseType_t xTimerListsWereSwitched;

        vTaskSuspendAll();
 80038aa:	f7ff f997 	bl	8002bdc <vTaskSuspendAll>
            /* Obtain the time now to make an assessment as to whether the timer
             * has expired or not.  If obtaining the time causes the lists to switch
             * then don't process this timer as any timers that remained in the list
             * when the lists were switched will have been processed within the
             * prvSampleTimeNow() function. */
            xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80038ae:	f107 0308 	add.w	r3, r7, #8
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 f866 	bl	8003984 <prvSampleTimeNow>
 80038b8:	60f8      	str	r0, [r7, #12]

            if( xTimerListsWereSwitched == pdFALSE )
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d130      	bne.n	8003922 <prvProcessTimerOrBlockTask+0x82>
            {
                /* The tick count has not overflowed, has the timer expired? */
                if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d10a      	bne.n	80038dc <prvProcessTimerOrBlockTask+0x3c>
 80038c6:	687a      	ldr	r2, [r7, #4]
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d806      	bhi.n	80038dc <prvProcessTimerOrBlockTask+0x3c>
                {
                    ( void ) xTaskResumeAll();
 80038ce:	f7ff f993 	bl	8002bf8 <xTaskResumeAll>
                    prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80038d2:	68f9      	ldr	r1, [r7, #12]
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff9f 	bl	8003818 <prvProcessExpiredTimer>
            else
            {
                ( void ) xTaskResumeAll();
            }
        }
    }
 80038da:	e024      	b.n	8003926 <prvProcessTimerOrBlockTask+0x86>
                    if( xListWasEmpty != pdFALSE )
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d008      	beq.n	80038f4 <prvProcessTimerOrBlockTask+0x54>
                        xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80038e2:	4b13      	ldr	r3, [pc, #76]	@ (8003930 <prvProcessTimerOrBlockTask+0x90>)
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d101      	bne.n	80038f0 <prvProcessTimerOrBlockTask+0x50>
 80038ec:	2301      	movs	r3, #1
 80038ee:	e000      	b.n	80038f2 <prvProcessTimerOrBlockTask+0x52>
 80038f0:	2300      	movs	r3, #0
 80038f2:	603b      	str	r3, [r7, #0]
                    vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80038f4:	4b0f      	ldr	r3, [pc, #60]	@ (8003934 <prvProcessTimerOrBlockTask+0x94>)
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	683a      	ldr	r2, [r7, #0]
 8003900:	4619      	mov	r1, r3
 8003902:	f7fe ff4b 	bl	800279c <vQueueWaitForMessageRestricted>
                    if( xTaskResumeAll() == pdFALSE )
 8003906:	f7ff f977 	bl	8002bf8 <xTaskResumeAll>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <prvProcessTimerOrBlockTask+0x86>
                        portYIELD_WITHIN_API();
 8003910:	4b09      	ldr	r3, [pc, #36]	@ (8003938 <prvProcessTimerOrBlockTask+0x98>)
 8003912:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003916:	601a      	str	r2, [r3, #0]
 8003918:	f3bf 8f4f 	dsb	sy
 800391c:	f3bf 8f6f 	isb	sy
    }
 8003920:	e001      	b.n	8003926 <prvProcessTimerOrBlockTask+0x86>
                ( void ) xTaskResumeAll();
 8003922:	f7ff f969 	bl	8002bf8 <xTaskResumeAll>
    }
 8003926:	bf00      	nop
 8003928:	3710      	adds	r7, #16
 800392a:	46bd      	mov	sp, r7
 800392c:	bd80      	pop	{r7, pc}
 800392e:	bf00      	nop
 8003930:	200001ec 	.word	0x200001ec
 8003934:	200001f0 	.word	0x200001f0
 8003938:	e000ed04 	.word	0xe000ed04

0800393c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

    static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
    {
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
         * the timer with the nearest expiry time will expire.  If there are no
         * active timers then just set the next expire time to 0.  That will cause
         * this task to unblock when the tick count overflows, at which point the
         * timer lists will be switched and the next expiry time can be
         * re-assessed.  */
        *pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003944:	4b0e      	ldr	r3, [pc, #56]	@ (8003980 <prvGetNextExpireTime+0x44>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d101      	bne.n	8003952 <prvGetNextExpireTime+0x16>
 800394e:	2201      	movs	r2, #1
 8003950:	e000      	b.n	8003954 <prvGetNextExpireTime+0x18>
 8003952:	2200      	movs	r2, #0
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	601a      	str	r2, [r3, #0]

        if( *pxListWasEmpty == pdFALSE )
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d105      	bne.n	800396c <prvGetNextExpireTime+0x30>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003960:	4b07      	ldr	r3, [pc, #28]	@ (8003980 <prvGetNextExpireTime+0x44>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	68db      	ldr	r3, [r3, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	e001      	b.n	8003970 <prvGetNextExpireTime+0x34>
        }
        else
        {
            /* Ensure the task unblocks when the tick count rolls over. */
            xNextExpireTime = ( TickType_t ) 0U;
 800396c:	2300      	movs	r3, #0
 800396e:	60fb      	str	r3, [r7, #12]
        }

        return xNextExpireTime;
 8003970:	68fb      	ldr	r3, [r7, #12]
    }
 8003972:	4618      	mov	r0, r3
 8003974:	3714      	adds	r7, #20
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	200001e8 	.word	0x200001e8

08003984 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

    static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
    {
 8003984:	b580      	push	{r7, lr}
 8003986:	b084      	sub	sp, #16
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
        TickType_t xTimeNow;
        PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

        xTimeNow = xTaskGetTickCount();
 800398c:	f7ff fa34 	bl	8002df8 <xTaskGetTickCount>
 8003990:	60f8      	str	r0, [r7, #12]

        if( xTimeNow < xLastTime )
 8003992:	4b0b      	ldr	r3, [pc, #44]	@ (80039c0 <prvSampleTimeNow+0x3c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	429a      	cmp	r2, r3
 800399a:	d205      	bcs.n	80039a8 <prvSampleTimeNow+0x24>
        {
            prvSwitchTimerLists();
 800399c:	f000 f916 	bl	8003bcc <prvSwitchTimerLists>
            *pxTimerListsWereSwitched = pdTRUE;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2201      	movs	r2, #1
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	e002      	b.n	80039ae <prvSampleTimeNow+0x2a>
        }
        else
        {
            *pxTimerListsWereSwitched = pdFALSE;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
        }

        xLastTime = xTimeNow;
 80039ae:	4a04      	ldr	r2, [pc, #16]	@ (80039c0 <prvSampleTimeNow+0x3c>)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6013      	str	r3, [r2, #0]

        return xTimeNow;
 80039b4:	68fb      	ldr	r3, [r7, #12]
    }
 80039b6:	4618      	mov	r0, r3
 80039b8:	3710      	adds	r7, #16
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	200001f8 	.word	0x200001f8

080039c4 <prvInsertTimerInActiveList>:

    static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer,
                                                  const TickType_t xNextExpiryTime,
                                                  const TickType_t xTimeNow,
                                                  const TickType_t xCommandTime )
    {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b086      	sub	sp, #24
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	60f8      	str	r0, [r7, #12]
 80039cc:	60b9      	str	r1, [r7, #8]
 80039ce:	607a      	str	r2, [r7, #4]
 80039d0:	603b      	str	r3, [r7, #0]
        BaseType_t xProcessTimerNow = pdFALSE;
 80039d2:	2300      	movs	r3, #0
 80039d4:	617b      	str	r3, [r7, #20]

        listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	68ba      	ldr	r2, [r7, #8]
 80039da:	605a      	str	r2, [r3, #4]
        listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	611a      	str	r2, [r3, #16]

        if( xNextExpiryTime <= xTimeNow )
 80039e2:	68ba      	ldr	r2, [r7, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d812      	bhi.n	8003a10 <prvInsertTimerInActiveList+0x4c>
        {
            /* Has the expiry time elapsed between the command to start/reset a
             * timer was issued, and the time the command was processed? */
            if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	1ad2      	subs	r2, r2, r3
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	429a      	cmp	r2, r3
 80039f6:	d302      	bcc.n	80039fe <prvInsertTimerInActiveList+0x3a>
            {
                /* The time between a command being issued and the command being
                 * processed actually exceeds the timers period.  */
                xProcessTimerNow = pdTRUE;
 80039f8:	2301      	movs	r3, #1
 80039fa:	617b      	str	r3, [r7, #20]
 80039fc:	e01b      	b.n	8003a36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80039fe:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <prvInsertTimerInActiveList+0x7c>)
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	3304      	adds	r3, #4
 8003a06:	4619      	mov	r1, r3
 8003a08:	4610      	mov	r0, r2
 8003a0a:	f7fe fb60 	bl	80020ce <vListInsert>
 8003a0e:	e012      	b.n	8003a36 <prvInsertTimerInActiveList+0x72>
            }
        }
        else
        {
            if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003a10:	687a      	ldr	r2, [r7, #4]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d206      	bcs.n	8003a26 <prvInsertTimerInActiveList+0x62>
 8003a18:	68ba      	ldr	r2, [r7, #8]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d302      	bcc.n	8003a26 <prvInsertTimerInActiveList+0x62>
            {
                /* If, since the command was issued, the tick count has overflowed
                 * but the expiry time has not, then the timer must have already passed
                 * its expiry time and should be processed immediately. */
                xProcessTimerNow = pdTRUE;
 8003a20:	2301      	movs	r3, #1
 8003a22:	617b      	str	r3, [r7, #20]
 8003a24:	e007      	b.n	8003a36 <prvInsertTimerInActiveList+0x72>
            }
            else
            {
                vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003a26:	4b07      	ldr	r3, [pc, #28]	@ (8003a44 <prvInsertTimerInActiveList+0x80>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	3304      	adds	r3, #4
 8003a2e:	4619      	mov	r1, r3
 8003a30:	4610      	mov	r0, r2
 8003a32:	f7fe fb4c 	bl	80020ce <vListInsert>
            }
        }

        return xProcessTimerNow;
 8003a36:	697b      	ldr	r3, [r7, #20]
    }
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3718      	adds	r7, #24
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	200001ec 	.word	0x200001ec
 8003a44:	200001e8 	.word	0x200001e8

08003a48 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

    static void prvProcessReceivedCommands( void )
    {
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b088      	sub	sp, #32
 8003a4c:	af00      	add	r7, sp, #0
        DaemonTaskMessage_t xMessage;
        Timer_t * pxTimer;
        BaseType_t xTimerListsWereSwitched;
        TickType_t xTimeNow;

        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003a4e:	e0a9      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>
            }
            #endif /* INCLUDE_xTimerPendFunctionCall */

            /* Commands that are positive are timer commands rather than pended
             * function calls. */
            if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	f2c0 80a6 	blt.w	8003ba4 <prvProcessReceivedCommands+0x15c>
            {
                /* The messages uses the xTimerParameters member to work on a
                 * software timer. */
                pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003a58:	693b      	ldr	r3, [r7, #16]
 8003a5a:	61fb      	str	r3, [r7, #28]

                if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	695b      	ldr	r3, [r3, #20]
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d004      	beq.n	8003a6e <prvProcessReceivedCommands+0x26>
                {
                    /* The timer is in a list, remove it. */
                    ( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003a64:	69fb      	ldr	r3, [r7, #28]
 8003a66:	3304      	adds	r3, #4
 8003a68:	4618      	mov	r0, r3
 8003a6a:	f7fe fb69 	bl	8002140 <uxListRemove>
                 *  it must be present in the function call.  prvSampleTimeNow() must be
                 *  called after the message is received from xTimerQueue so there is no
                 *  possibility of a higher priority task adding a message to the message
                 *  queue with a time that is ahead of the timer daemon task (because it
                 *  pre-empted the timer daemon task after the xTimeNow value was set). */
                xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a6e:	1d3b      	adds	r3, r7, #4
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7ff ff87 	bl	8003984 <prvSampleTimeNow>
 8003a76:	61b8      	str	r0, [r7, #24]

                switch( xMessage.xMessageID )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	2b08      	cmp	r3, #8
 8003a7e:	f200 808e 	bhi.w	8003b9e <prvProcessReceivedCommands+0x156>
 8003a82:	a201      	add	r2, pc, #4	@ (adr r2, 8003a88 <prvProcessReceivedCommands+0x40>)
 8003a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a88:	08003aad 	.word	0x08003aad
 8003a8c:	08003aad 	.word	0x08003aad
 8003a90:	08003b15 	.word	0x08003b15
 8003a94:	08003b29 	.word	0x08003b29
 8003a98:	08003b75 	.word	0x08003b75
 8003a9c:	08003aad 	.word	0x08003aad
 8003aa0:	08003aad 	.word	0x08003aad
 8003aa4:	08003b15 	.word	0x08003b15
 8003aa8:	08003b29 	.word	0x08003b29
                    case tmrCOMMAND_START:
                    case tmrCOMMAND_START_FROM_ISR:
                    case tmrCOMMAND_RESET:
                    case tmrCOMMAND_RESET_FROM_ISR:
                        /* Start or restart a timer. */
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003ab2:	f043 0301 	orr.w	r3, r3, #1
 8003ab6:	b2da      	uxtb	r2, r3
 8003ab8:	69fb      	ldr	r3, [r7, #28]
 8003aba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

                        if( prvInsertTimerInActiveList( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	699b      	ldr	r3, [r3, #24]
 8003ac4:	18d1      	adds	r1, r2, r3
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	69ba      	ldr	r2, [r7, #24]
 8003aca:	69f8      	ldr	r0, [r7, #28]
 8003acc:	f7ff ff7a 	bl	80039c4 <prvInsertTimerInActiveList>
 8003ad0:	4603      	mov	r3, r0
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d065      	beq.n	8003ba2 <prvProcessReceivedCommands+0x15a>
                        {
                            /* The timer expired before it was added to the active
                             * timer list.  Process it now. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003ad6:	69fb      	ldr	r3, [r7, #28]
 8003ad8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d009      	beq.n	8003af8 <prvProcessReceivedCommands+0xb0>
                            {
                                prvReloadTimer( pxTimer, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow );
 8003ae4:	68fa      	ldr	r2, [r7, #12]
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	699b      	ldr	r3, [r3, #24]
 8003aea:	4413      	add	r3, r2
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	4619      	mov	r1, r3
 8003af0:	69f8      	ldr	r0, [r7, #28]
 8003af2:	f7ff fe6f 	bl	80037d4 <prvReloadTimer>
 8003af6:	e008      	b.n	8003b0a <prvProcessReceivedCommands+0xc2>
                            }
                            else
                            {
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003afe:	f023 0301 	bic.w	r3, r3, #1
 8003b02:	b2da      	uxtb	r2, r3
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                            }

                            /* Call the timer callback. */
                            traceTIMER_EXPIRED( pxTimer );
                            pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003b0a:	69fb      	ldr	r3, [r7, #28]
 8003b0c:	6a1b      	ldr	r3, [r3, #32]
 8003b0e:	69f8      	ldr	r0, [r7, #28]
 8003b10:	4798      	blx	r3
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        break;
 8003b12:	e046      	b.n	8003ba2 <prvProcessReceivedCommands+0x15a>

                    case tmrCOMMAND_STOP:
                    case tmrCOMMAND_STOP_FROM_ISR:
                        /* The timer has already been removed from the active list. */
                        pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b1a:	f023 0301 	bic.w	r3, r3, #1
 8003b1e:	b2da      	uxtb	r2, r3
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b26:	e03d      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>

                    case tmrCOMMAND_CHANGE_PERIOD:
                    case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR:
                        pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b2e:	f043 0301 	orr.w	r3, r3, #1
 8003b32:	b2da      	uxtb	r2, r3
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	619a      	str	r2, [r3, #24]
                        configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d10b      	bne.n	8003b60 <prvProcessReceivedCommands+0x118>
        __asm volatile
 8003b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b4c:	f383 8811 	msr	BASEPRI, r3
 8003b50:	f3bf 8f6f 	isb	sy
 8003b54:	f3bf 8f4f 	dsb	sy
 8003b58:	617b      	str	r3, [r7, #20]
    }
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	e7fd      	b.n	8003b5c <prvProcessReceivedCommands+0x114>
                         * be longer or shorter than the old one.  The command time is
                         * therefore set to the current time, and as the period cannot
                         * be zero the next expiry time can only be in the future,
                         * meaning (unlike for the xTimerStart() case above) there is
                         * no fail case that needs to be handled here. */
                        ( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	69bb      	ldr	r3, [r7, #24]
 8003b66:	18d1      	adds	r1, r2, r3
 8003b68:	69bb      	ldr	r3, [r7, #24]
 8003b6a:	69ba      	ldr	r2, [r7, #24]
 8003b6c:	69f8      	ldr	r0, [r7, #28]
 8003b6e:	f7ff ff29 	bl	80039c4 <prvInsertTimerInActiveList>
                        break;
 8003b72:	e017      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>
                        #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
                        {
                            /* The timer has already been removed from the active list,
                             * just free up the memory if the memory was dynamically
                             * allocated. */
                            if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003b74:	69fb      	ldr	r3, [r7, #28]
 8003b76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b7a:	f003 0302 	and.w	r3, r3, #2
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d103      	bne.n	8003b8a <prvProcessReceivedCommands+0x142>
                            {
                                vPortFree( pxTimer );
 8003b82:	69f8      	ldr	r0, [r7, #28]
 8003b84:	f000 fbde 	bl	8004344 <vPortFree>
                             * no need to free the memory - just mark the timer as
                             * "not active". */
                            pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
                        }
                        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
                        break;
 8003b88:	e00c      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>
                                pxTimer->ucStatus &= ( ( uint8_t ) ~tmrSTATUS_IS_ACTIVE );
 8003b8a:	69fb      	ldr	r3, [r7, #28]
 8003b8c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8003b90:	f023 0301 	bic.w	r3, r3, #1
 8003b94:	b2da      	uxtb	r2, r3
 8003b96:	69fb      	ldr	r3, [r7, #28]
 8003b98:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
                        break;
 8003b9c:	e002      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>

                    default:
                        /* Don't expect to get here. */
                        break;
 8003b9e:	bf00      	nop
 8003ba0:	e000      	b.n	8003ba4 <prvProcessReceivedCommands+0x15c>
                        break;
 8003ba2:	bf00      	nop
        while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003ba4:	4b08      	ldr	r3, [pc, #32]	@ (8003bc8 <prvProcessReceivedCommands+0x180>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f107 0108 	add.w	r1, r7, #8
 8003bac:	2200      	movs	r2, #0
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f7fe fbfa 	bl	80023a8 <xQueueReceive>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	f47f af4a 	bne.w	8003a50 <prvProcessReceivedCommands+0x8>
                }
            }
        }
    }
 8003bbc:	bf00      	nop
 8003bbe:	bf00      	nop
 8003bc0:	3720      	adds	r7, #32
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	200001f0 	.word	0x200001f0

08003bcc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

    static void prvSwitchTimerLists( void )
    {
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0

        /* The tick count has overflowed.  The timer lists must be switched.
         * If there are any timers still referenced from the current timer list
         * then they must have expired and should be processed before the lists
         * are switched. */
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003bd2:	e009      	b.n	8003be8 <prvSwitchTimerLists+0x1c>
        {
            xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003bd4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c10 <prvSwitchTimerLists+0x44>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	603b      	str	r3, [r7, #0]

            /* Process the expired timer.  For auto-reload timers, be careful to
             * process only expirations that occur on the current list.  Further
             * expirations must wait until after the lists are switched. */
            prvProcessExpiredTimer( xNextExpireTime, tmrMAX_TIME_BEFORE_OVERFLOW );
 8003bde:	f04f 31ff 	mov.w	r1, #4294967295
 8003be2:	6838      	ldr	r0, [r7, #0]
 8003be4:	f7ff fe18 	bl	8003818 <prvProcessExpiredTimer>
        while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003be8:	4b09      	ldr	r3, [pc, #36]	@ (8003c10 <prvSwitchTimerLists+0x44>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d1f0      	bne.n	8003bd4 <prvSwitchTimerLists+0x8>
        }

        pxTemp = pxCurrentTimerList;
 8003bf2:	4b07      	ldr	r3, [pc, #28]	@ (8003c10 <prvSwitchTimerLists+0x44>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	607b      	str	r3, [r7, #4]
        pxCurrentTimerList = pxOverflowTimerList;
 8003bf8:	4b06      	ldr	r3, [pc, #24]	@ (8003c14 <prvSwitchTimerLists+0x48>)
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	4a04      	ldr	r2, [pc, #16]	@ (8003c10 <prvSwitchTimerLists+0x44>)
 8003bfe:	6013      	str	r3, [r2, #0]
        pxOverflowTimerList = pxTemp;
 8003c00:	4a04      	ldr	r2, [pc, #16]	@ (8003c14 <prvSwitchTimerLists+0x48>)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6013      	str	r3, [r2, #0]
    }
 8003c06:	bf00      	nop
 8003c08:	3708      	adds	r7, #8
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	200001e8 	.word	0x200001e8
 8003c14:	200001ec 	.word	0x200001ec

08003c18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

    static void prvCheckForValidListAndQueue( void )
    {
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
        /* Check that the list from which active timers are referenced, and the
         * queue used to communicate with the timer service, have been
         * initialised. */
        taskENTER_CRITICAL();
 8003c1c:	f000 f9e6 	bl	8003fec <vPortEnterCritical>
        {
            if( xTimerQueue == NULL )
 8003c20:	4b12      	ldr	r3, [pc, #72]	@ (8003c6c <prvCheckForValidListAndQueue+0x54>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d11d      	bne.n	8003c64 <prvCheckForValidListAndQueue+0x4c>
            {
                vListInitialise( &xActiveTimerList1 );
 8003c28:	4811      	ldr	r0, [pc, #68]	@ (8003c70 <prvCheckForValidListAndQueue+0x58>)
 8003c2a:	f7fe fa23 	bl	8002074 <vListInitialise>
                vListInitialise( &xActiveTimerList2 );
 8003c2e:	4811      	ldr	r0, [pc, #68]	@ (8003c74 <prvCheckForValidListAndQueue+0x5c>)
 8003c30:	f7fe fa20 	bl	8002074 <vListInitialise>
                pxCurrentTimerList = &xActiveTimerList1;
 8003c34:	4b10      	ldr	r3, [pc, #64]	@ (8003c78 <prvCheckForValidListAndQueue+0x60>)
 8003c36:	4a0e      	ldr	r2, [pc, #56]	@ (8003c70 <prvCheckForValidListAndQueue+0x58>)
 8003c38:	601a      	str	r2, [r3, #0]
                pxOverflowTimerList = &xActiveTimerList2;
 8003c3a:	4b10      	ldr	r3, [pc, #64]	@ (8003c7c <prvCheckForValidListAndQueue+0x64>)
 8003c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8003c74 <prvCheckForValidListAndQueue+0x5c>)
 8003c3e:	601a      	str	r2, [r3, #0]

                    xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
                }
                #else
                {
                    xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 8003c40:	2200      	movs	r2, #0
 8003c42:	210c      	movs	r1, #12
 8003c44:	200a      	movs	r0, #10
 8003c46:	f7fe fb37 	bl	80022b8 <xQueueGenericCreate>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	4a07      	ldr	r2, [pc, #28]	@ (8003c6c <prvCheckForValidListAndQueue+0x54>)
 8003c4e:	6013      	str	r3, [r2, #0]
                }
                #endif /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */

                #if ( configQUEUE_REGISTRY_SIZE > 0 )
                {
                    if( xTimerQueue != NULL )
 8003c50:	4b06      	ldr	r3, [pc, #24]	@ (8003c6c <prvCheckForValidListAndQueue+0x54>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d005      	beq.n	8003c64 <prvCheckForValidListAndQueue+0x4c>
                    {
                        vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003c58:	4b04      	ldr	r3, [pc, #16]	@ (8003c6c <prvCheckForValidListAndQueue+0x54>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4908      	ldr	r1, [pc, #32]	@ (8003c80 <prvCheckForValidListAndQueue+0x68>)
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f7fe fd44 	bl	80026ec <vQueueAddToRegistry>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c64:	f000 f9f4 	bl	8004050 <vPortExitCritical>
    }
 8003c68:	bf00      	nop
 8003c6a:	bd80      	pop	{r7, pc}
 8003c6c:	200001f0 	.word	0x200001f0
 8003c70:	200001c0 	.word	0x200001c0
 8003c74:	200001d4 	.word	0x200001d4
 8003c78:	200001e8 	.word	0x200001e8
 8003c7c:	200001ec 	.word	0x200001ec
 8003c80:	08005b74 	.word	0x08005b74

08003c84 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8003c84:	b480      	push	{r7}
 8003c86:	b085      	sub	sp, #20
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	3b04      	subs	r3, #4
 8003c94:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003c9c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	3b04      	subs	r3, #4
 8003ca2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	f023 0201 	bic.w	r2, r3, #1
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	3b04      	subs	r3, #4
 8003cb2:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8003cb4:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <pxPortInitialiseStack+0x64>)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3b14      	subs	r3, #20
 8003cbe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	3b04      	subs	r3, #4
 8003cca:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	f06f 0202 	mvn.w	r2, #2
 8003cd2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	3b20      	subs	r3, #32
 8003cd8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8003cda:	68fb      	ldr	r3, [r7, #12]
}
 8003cdc:	4618      	mov	r0, r3
 8003cde:	3714      	adds	r7, #20
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce6:	4770      	bx	lr
 8003ce8:	08003ced 	.word	0x08003ced

08003cec <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8003cf6:	4b13      	ldr	r3, [pc, #76]	@ (8003d44 <prvTaskExitError+0x58>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cfe:	d00b      	beq.n	8003d18 <prvTaskExitError+0x2c>
        __asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	60fb      	str	r3, [r7, #12]
    }
 8003d12:	bf00      	nop
 8003d14:	bf00      	nop
 8003d16:	e7fd      	b.n	8003d14 <prvTaskExitError+0x28>
        __asm volatile
 8003d18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d1c:	f383 8811 	msr	BASEPRI, r3
 8003d20:	f3bf 8f6f 	isb	sy
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	60bb      	str	r3, [r7, #8]
    }
 8003d2a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8003d2c:	bf00      	nop
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d0fc      	beq.n	8003d2e <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8003d34:	bf00      	nop
 8003d36:	bf00      	nop
 8003d38:	3714      	adds	r7, #20
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	20000010 	.word	0x20000010
	...

08003d50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8003d50:	4b07      	ldr	r3, [pc, #28]	@ (8003d70 <pxCurrentTCBConst2>)
 8003d52:	6819      	ldr	r1, [r3, #0]
 8003d54:	6808      	ldr	r0, [r1, #0]
 8003d56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d5a:	f380 8809 	msr	PSP, r0
 8003d5e:	f3bf 8f6f 	isb	sy
 8003d62:	f04f 0000 	mov.w	r0, #0
 8003d66:	f380 8811 	msr	BASEPRI, r0
 8003d6a:	4770      	bx	lr
 8003d6c:	f3af 8000 	nop.w

08003d70 <pxCurrentTCBConst2>:
 8003d70:	200000bc 	.word	0x200000bc
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8003d74:	bf00      	nop
 8003d76:	bf00      	nop

08003d78 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8003d78:	4808      	ldr	r0, [pc, #32]	@ (8003d9c <prvPortStartFirstTask+0x24>)
 8003d7a:	6800      	ldr	r0, [r0, #0]
 8003d7c:	6800      	ldr	r0, [r0, #0]
 8003d7e:	f380 8808 	msr	MSP, r0
 8003d82:	f04f 0000 	mov.w	r0, #0
 8003d86:	f380 8814 	msr	CONTROL, r0
 8003d8a:	b662      	cpsie	i
 8003d8c:	b661      	cpsie	f
 8003d8e:	f3bf 8f4f 	dsb	sy
 8003d92:	f3bf 8f6f 	isb	sy
 8003d96:	df00      	svc	0
 8003d98:	bf00      	nop
 8003d9a:	0000      	.short	0x0000
 8003d9c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8003da0:	bf00      	nop
 8003da2:	bf00      	nop

08003da4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b086      	sub	sp, #24
 8003da8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003daa:	4b47      	ldr	r3, [pc, #284]	@ (8003ec8 <xPortStartScheduler+0x124>)
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	4a47      	ldr	r2, [pc, #284]	@ (8003ecc <xPortStartScheduler+0x128>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d10b      	bne.n	8003dcc <xPortStartScheduler+0x28>
        __asm volatile
 8003db4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003db8:	f383 8811 	msr	BASEPRI, r3
 8003dbc:	f3bf 8f6f 	isb	sy
 8003dc0:	f3bf 8f4f 	dsb	sy
 8003dc4:	613b      	str	r3, [r7, #16]
    }
 8003dc6:	bf00      	nop
 8003dc8:	bf00      	nop
 8003dca:	e7fd      	b.n	8003dc8 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003dcc:	4b3e      	ldr	r3, [pc, #248]	@ (8003ec8 <xPortStartScheduler+0x124>)
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	4a3f      	ldr	r2, [pc, #252]	@ (8003ed0 <xPortStartScheduler+0x12c>)
 8003dd2:	4293      	cmp	r3, r2
 8003dd4:	d10b      	bne.n	8003dee <xPortStartScheduler+0x4a>
        __asm volatile
 8003dd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dda:	f383 8811 	msr	BASEPRI, r3
 8003dde:	f3bf 8f6f 	isb	sy
 8003de2:	f3bf 8f4f 	dsb	sy
 8003de6:	60fb      	str	r3, [r7, #12]
    }
 8003de8:	bf00      	nop
 8003dea:	bf00      	nop
 8003dec:	e7fd      	b.n	8003dea <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003dee:	4b39      	ldr	r3, [pc, #228]	@ (8003ed4 <xPortStartScheduler+0x130>)
 8003df0:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	781b      	ldrb	r3, [r3, #0]
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	22ff      	movs	r2, #255	@ 0xff
 8003dfe:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003e08:	78fb      	ldrb	r3, [r7, #3]
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003e10:	b2da      	uxtb	r2, r3
 8003e12:	4b31      	ldr	r3, [pc, #196]	@ (8003ed8 <xPortStartScheduler+0x134>)
 8003e14:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003e16:	4b31      	ldr	r3, [pc, #196]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e18:	2207      	movs	r2, #7
 8003e1a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e1c:	e009      	b.n	8003e32 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	3b01      	subs	r3, #1
 8003e24:	4a2d      	ldr	r2, [pc, #180]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e26:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003e28:	78fb      	ldrb	r3, [r7, #3]
 8003e2a:	b2db      	uxtb	r3, r3
 8003e2c:	005b      	lsls	r3, r3, #1
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	b2db      	uxtb	r3, r3
 8003e36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e3a:	2b80      	cmp	r3, #128	@ 0x80
 8003e3c:	d0ef      	beq.n	8003e1e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003e3e:	4b27      	ldr	r3, [pc, #156]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	f1c3 0307 	rsb	r3, r3, #7
 8003e46:	2b04      	cmp	r3, #4
 8003e48:	d00b      	beq.n	8003e62 <xPortStartScheduler+0xbe>
        __asm volatile
 8003e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e4e:	f383 8811 	msr	BASEPRI, r3
 8003e52:	f3bf 8f6f 	isb	sy
 8003e56:	f3bf 8f4f 	dsb	sy
 8003e5a:	60bb      	str	r3, [r7, #8]
    }
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	e7fd      	b.n	8003e5e <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	021b      	lsls	r3, r3, #8
 8003e68:	4a1c      	ldr	r2, [pc, #112]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e6a:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003e6c:	4b1b      	ldr	r3, [pc, #108]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003e74:	4a19      	ldr	r2, [pc, #100]	@ (8003edc <xPortStartScheduler+0x138>)
 8003e76:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	b2da      	uxtb	r2, r3
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8003e80:	4b17      	ldr	r3, [pc, #92]	@ (8003ee0 <xPortStartScheduler+0x13c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a16      	ldr	r2, [pc, #88]	@ (8003ee0 <xPortStartScheduler+0x13c>)
 8003e86:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003e8a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8003e8c:	4b14      	ldr	r3, [pc, #80]	@ (8003ee0 <xPortStartScheduler+0x13c>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a13      	ldr	r2, [pc, #76]	@ (8003ee0 <xPortStartScheduler+0x13c>)
 8003e92:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8003e96:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8003e98:	f000 f968 	bl	800416c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8003e9c:	4b11      	ldr	r3, [pc, #68]	@ (8003ee4 <xPortStartScheduler+0x140>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8003ea2:	f000 f987 	bl	80041b4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8003ea6:	4b10      	ldr	r3, [pc, #64]	@ (8003ee8 <xPortStartScheduler+0x144>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a0f      	ldr	r2, [pc, #60]	@ (8003ee8 <xPortStartScheduler+0x144>)
 8003eac:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8003eb0:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8003eb2:	f7ff ff61 	bl	8003d78 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8003eb6:	f7ff f8cb 	bl	8003050 <vTaskSwitchContext>
    prvTaskExitError();
 8003eba:	f7ff ff17 	bl	8003cec <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8003ebe:	2300      	movs	r3, #0
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	3718      	adds	r7, #24
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	e000ed00 	.word	0xe000ed00
 8003ecc:	410fc271 	.word	0x410fc271
 8003ed0:	410fc270 	.word	0x410fc270
 8003ed4:	e000e400 	.word	0xe000e400
 8003ed8:	200001fc 	.word	0x200001fc
 8003edc:	20000200 	.word	0x20000200
 8003ee0:	e000ed20 	.word	0xe000ed20
 8003ee4:	20000010 	.word	0x20000010
 8003ee8:	e000ef34 	.word	0xe000ef34

08003eec <vInitPrioGroupValue>:
/*-----------------------------------------------------------*/


void vInitPrioGroupValue(void)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ef2:	4b38      	ldr	r3, [pc, #224]	@ (8003fd4 <vInitPrioGroupValue+0xe8>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a38      	ldr	r2, [pc, #224]	@ (8003fd8 <vInitPrioGroupValue+0xec>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d10b      	bne.n	8003f14 <vInitPrioGroupValue+0x28>
        __asm volatile
 8003efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f00:	f383 8811 	msr	BASEPRI, r3
 8003f04:	f3bf 8f6f 	isb	sy
 8003f08:	f3bf 8f4f 	dsb	sy
 8003f0c:	613b      	str	r3, [r7, #16]
    }
 8003f0e:	bf00      	nop
 8003f10:	bf00      	nop
 8003f12:	e7fd      	b.n	8003f10 <vInitPrioGroupValue+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8003f14:	4b2f      	ldr	r3, [pc, #188]	@ (8003fd4 <vInitPrioGroupValue+0xe8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a30      	ldr	r2, [pc, #192]	@ (8003fdc <vInitPrioGroupValue+0xf0>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d10b      	bne.n	8003f36 <vInitPrioGroupValue+0x4a>
        __asm volatile
 8003f1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f22:	f383 8811 	msr	BASEPRI, r3
 8003f26:	f3bf 8f6f 	isb	sy
 8003f2a:	f3bf 8f4f 	dsb	sy
 8003f2e:	60fb      	str	r3, [r7, #12]
    }
 8003f30:	bf00      	nop
 8003f32:	bf00      	nop
 8003f34:	e7fd      	b.n	8003f32 <vInitPrioGroupValue+0x46>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8003f36:	4b2a      	ldr	r3, [pc, #168]	@ (8003fe0 <vInitPrioGroupValue+0xf4>)
 8003f38:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8003f3a:	697b      	ldr	r3, [r7, #20]
 8003f3c:	781b      	ldrb	r3, [r3, #0]
 8003f3e:	b2db      	uxtb	r3, r3
 8003f40:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	22ff      	movs	r2, #255	@ 0xff
 8003f46:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	781b      	ldrb	r3, [r3, #0]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8003f50:	78fb      	ldrb	r3, [r7, #3]
 8003f52:	b2db      	uxtb	r3, r3
 8003f54:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	4b22      	ldr	r3, [pc, #136]	@ (8003fe4 <vInitPrioGroupValue+0xf8>)
 8003f5c:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8003f5e:	4b22      	ldr	r3, [pc, #136]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003f60:	2207      	movs	r2, #7
 8003f62:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f64:	e009      	b.n	8003f7a <vInitPrioGroupValue+0x8e>
            {
                ulMaxPRIGROUPValue--;
 8003f66:	4b20      	ldr	r3, [pc, #128]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	3b01      	subs	r3, #1
 8003f6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003f6e:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8003f70:	78fb      	ldrb	r3, [r7, #3]
 8003f72:	b2db      	uxtb	r3, r3
 8003f74:	005b      	lsls	r3, r3, #1
 8003f76:	b2db      	uxtb	r3, r3
 8003f78:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8003f7a:	78fb      	ldrb	r3, [r7, #3]
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f82:	2b80      	cmp	r3, #128	@ 0x80
 8003f84:	d0ef      	beq.n	8003f66 <vInitPrioGroupValue+0x7a>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8003f86:	4b18      	ldr	r3, [pc, #96]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f1c3 0307 	rsb	r3, r3, #7
 8003f8e:	2b04      	cmp	r3, #4
 8003f90:	d00b      	beq.n	8003faa <vInitPrioGroupValue+0xbe>
        __asm volatile
 8003f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	60bb      	str	r3, [r7, #8]
    }
 8003fa4:	bf00      	nop
 8003fa6:	bf00      	nop
 8003fa8:	e7fd      	b.n	8003fa6 <vInitPrioGroupValue+0xba>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8003faa:	4b0f      	ldr	r3, [pc, #60]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	021b      	lsls	r3, r3, #8
 8003fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003fb2:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8003fb4:	4b0c      	ldr	r3, [pc, #48]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8003fbc:	4a0a      	ldr	r2, [pc, #40]	@ (8003fe8 <vInitPrioGroupValue+0xfc>)
 8003fbe:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	701a      	strb	r2, [r3, #0]
        }
    #endif /* conifgASSERT_DEFINED */
}
 8003fc8:	bf00      	nop
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr
 8003fd4:	e000ed00 	.word	0xe000ed00
 8003fd8:	410fc271 	.word	0x410fc271
 8003fdc:	410fc270 	.word	0x410fc270
 8003fe0:	e000e400 	.word	0xe000e400
 8003fe4:	200001fc 	.word	0x200001fc
 8003fe8:	20000200 	.word	0x20000200

08003fec <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
        __asm volatile
 8003ff2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ff6:	f383 8811 	msr	BASEPRI, r3
 8003ffa:	f3bf 8f6f 	isb	sy
 8003ffe:	f3bf 8f4f 	dsb	sy
 8004002:	607b      	str	r3, [r7, #4]
    }
 8004004:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004006:	4b10      	ldr	r3, [pc, #64]	@ (8004048 <vPortEnterCritical+0x5c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	3301      	adds	r3, #1
 800400c:	4a0e      	ldr	r2, [pc, #56]	@ (8004048 <vPortEnterCritical+0x5c>)
 800400e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8004010:	4b0d      	ldr	r3, [pc, #52]	@ (8004048 <vPortEnterCritical+0x5c>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2b01      	cmp	r3, #1
 8004016:	d110      	bne.n	800403a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004018:	4b0c      	ldr	r3, [pc, #48]	@ (800404c <vPortEnterCritical+0x60>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00b      	beq.n	800403a <vPortEnterCritical+0x4e>
        __asm volatile
 8004022:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004026:	f383 8811 	msr	BASEPRI, r3
 800402a:	f3bf 8f6f 	isb	sy
 800402e:	f3bf 8f4f 	dsb	sy
 8004032:	603b      	str	r3, [r7, #0]
    }
 8004034:	bf00      	nop
 8004036:	bf00      	nop
 8004038:	e7fd      	b.n	8004036 <vPortEnterCritical+0x4a>
    }
}
 800403a:	bf00      	nop
 800403c:	370c      	adds	r7, #12
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	20000010 	.word	0x20000010
 800404c:	e000ed04 	.word	0xe000ed04

08004050 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8004056:	4b12      	ldr	r3, [pc, #72]	@ (80040a0 <vPortExitCritical+0x50>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d10b      	bne.n	8004076 <vPortExitCritical+0x26>
        __asm volatile
 800405e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004062:	f383 8811 	msr	BASEPRI, r3
 8004066:	f3bf 8f6f 	isb	sy
 800406a:	f3bf 8f4f 	dsb	sy
 800406e:	607b      	str	r3, [r7, #4]
    }
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	e7fd      	b.n	8004072 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8004076:	4b0a      	ldr	r3, [pc, #40]	@ (80040a0 <vPortExitCritical+0x50>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	3b01      	subs	r3, #1
 800407c:	4a08      	ldr	r2, [pc, #32]	@ (80040a0 <vPortExitCritical+0x50>)
 800407e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004080:	4b07      	ldr	r3, [pc, #28]	@ (80040a0 <vPortExitCritical+0x50>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2b00      	cmp	r3, #0
 8004086:	d105      	bne.n	8004094 <vPortExitCritical+0x44>
 8004088:	2300      	movs	r3, #0
 800408a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8004092:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	20000010 	.word	0x20000010
	...

080040b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80040b0:	f3ef 8009 	mrs	r0, PSP
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	4b15      	ldr	r3, [pc, #84]	@ (8004110 <pxCurrentTCBConst>)
 80040ba:	681a      	ldr	r2, [r3, #0]
 80040bc:	f01e 0f10 	tst.w	lr, #16
 80040c0:	bf08      	it	eq
 80040c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80040c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040ca:	6010      	str	r0, [r2, #0]
 80040cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80040d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80040d4:	f380 8811 	msr	BASEPRI, r0
 80040d8:	f3bf 8f4f 	dsb	sy
 80040dc:	f3bf 8f6f 	isb	sy
 80040e0:	f7fe ffb6 	bl	8003050 <vTaskSwitchContext>
 80040e4:	f04f 0000 	mov.w	r0, #0
 80040e8:	f380 8811 	msr	BASEPRI, r0
 80040ec:	bc09      	pop	{r0, r3}
 80040ee:	6819      	ldr	r1, [r3, #0]
 80040f0:	6808      	ldr	r0, [r1, #0]
 80040f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80040f6:	f01e 0f10 	tst.w	lr, #16
 80040fa:	bf08      	it	eq
 80040fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004100:	f380 8809 	msr	PSP, r0
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	4770      	bx	lr
 800410a:	bf00      	nop
 800410c:	f3af 8000 	nop.w

08004110 <pxCurrentTCBConst>:
 8004110:	200000bc 	.word	0x200000bc
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8004114:	bf00      	nop
 8004116:	bf00      	nop

08004118 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
        __asm volatile
 800411e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004122:	f383 8811 	msr	BASEPRI, r3
 8004126:	f3bf 8f6f 	isb	sy
 800412a:	f3bf 8f4f 	dsb	sy
 800412e:	607b      	str	r3, [r7, #4]
    }
 8004130:	bf00      	nop
    /* The SysTick runs at the lowest interrupt priority, so when this interrupt
     * executes all interrupts must be unmasked.  There is therefore no need to
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
	traceISR_ENTER();
 8004132:	f001 fa05 	bl	8005540 <SEGGER_SYSVIEW_RecordEnterISR>
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004136:	f7fe fe6f 	bl	8002e18 <xTaskIncrementTick>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d006      	beq.n	800414e <SysTick_Handler+0x36>
        {
			traceISR_EXIT_TO_SCHEDULER();
 8004140:	f001 fa5c 	bl	80055fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004144:	4b08      	ldr	r3, [pc, #32]	@ (8004168 <SysTick_Handler+0x50>)
 8004146:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800414a:	601a      	str	r2, [r3, #0]
 800414c:	e001      	b.n	8004152 <SysTick_Handler+0x3a>
        }
		else
		{
			traceISR_EXIT();
 800414e:	f001 fa39 	bl	80055c4 <SEGGER_SYSVIEW_RecordExitISR>
 8004152:	2300      	movs	r3, #0
 8004154:	603b      	str	r3, [r7, #0]
        __asm volatile
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	f383 8811 	msr	BASEPRI, r3
    }
 800415c:	bf00      	nop
		}
    }
    portENABLE_INTERRUPTS();
}
 800415e:	bf00      	nop
 8004160:	3708      	adds	r7, #8
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800416c:	b480      	push	{r7}
 800416e:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004170:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <vPortSetupTimerInterrupt+0x34>)
 8004172:	2200      	movs	r2, #0
 8004174:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004176:	4b0b      	ldr	r3, [pc, #44]	@ (80041a4 <vPortSetupTimerInterrupt+0x38>)
 8004178:	2200      	movs	r2, #0
 800417a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800417c:	4b0a      	ldr	r3, [pc, #40]	@ (80041a8 <vPortSetupTimerInterrupt+0x3c>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <vPortSetupTimerInterrupt+0x40>)
 8004182:	fba2 2303 	umull	r2, r3, r2, r3
 8004186:	099b      	lsrs	r3, r3, #6
 8004188:	4a09      	ldr	r2, [pc, #36]	@ (80041b0 <vPortSetupTimerInterrupt+0x44>)
 800418a:	3b01      	subs	r3, #1
 800418c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800418e:	4b04      	ldr	r3, [pc, #16]	@ (80041a0 <vPortSetupTimerInterrupt+0x34>)
 8004190:	2207      	movs	r2, #7
 8004192:	601a      	str	r2, [r3, #0]
}
 8004194:	bf00      	nop
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr
 800419e:	bf00      	nop
 80041a0:	e000e010 	.word	0xe000e010
 80041a4:	e000e018 	.word	0xe000e018
 80041a8:	20000000 	.word	0x20000000
 80041ac:	10624dd3 	.word	0x10624dd3
 80041b0:	e000e014 	.word	0xe000e014

080041b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80041b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80041c4 <vPortEnableVFP+0x10>
 80041b8:	6801      	ldr	r1, [r0, #0]
 80041ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80041be:	6001      	str	r1, [r0, #0]
 80041c0:	4770      	bx	lr
 80041c2:	0000      	.short	0x0000
 80041c4:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 80041c8:	bf00      	nop
 80041ca:	bf00      	nop

080041cc <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b08a      	sub	sp, #40	@ 0x28
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80041d4:	2300      	movs	r3, #0
 80041d6:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80041d8:	f7fe fd00 	bl	8002bdc <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80041dc:	4b54      	ldr	r3, [pc, #336]	@ (8004330 <pvPortMalloc+0x164>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80041e4:	f000 f90c 	bl	8004400 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d012      	beq.n	8004214 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80041ee:	2208      	movs	r2, #8
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	f003 0307 	and.w	r3, r3, #7
 80041f6:	1ad3      	subs	r3, r2, r3
 80041f8:	3308      	adds	r3, #8
 80041fa:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	43db      	mvns	r3, r3
 8004200:	687a      	ldr	r2, [r7, #4]
 8004202:	429a      	cmp	r2, r3
 8004204:	d804      	bhi.n	8004210 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8004206:	687a      	ldr	r2, [r7, #4]
 8004208:	69bb      	ldr	r3, [r7, #24]
 800420a:	4413      	add	r3, r2
 800420c:	607b      	str	r3, [r7, #4]
 800420e:	e001      	b.n	8004214 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8004210:	2300      	movs	r3, #0
 8004212:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db71      	blt.n	80042fe <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d06e      	beq.n	80042fe <pvPortMalloc+0x132>
 8004220:	4b44      	ldr	r3, [pc, #272]	@ (8004334 <pvPortMalloc+0x168>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	687a      	ldr	r2, [r7, #4]
 8004226:	429a      	cmp	r2, r3
 8004228:	d869      	bhi.n	80042fe <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800422a:	4b43      	ldr	r3, [pc, #268]	@ (8004338 <pvPortMalloc+0x16c>)
 800422c:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 800422e:	4b42      	ldr	r3, [pc, #264]	@ (8004338 <pvPortMalloc+0x16c>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004234:	e004      	b.n	8004240 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8004236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004238:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800423a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004240:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004242:	685b      	ldr	r3, [r3, #4]
 8004244:	687a      	ldr	r2, [r7, #4]
 8004246:	429a      	cmp	r2, r3
 8004248:	d903      	bls.n	8004252 <pvPortMalloc+0x86>
 800424a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d1f1      	bne.n	8004236 <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8004252:	4b37      	ldr	r3, [pc, #220]	@ (8004330 <pvPortMalloc+0x164>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004258:	429a      	cmp	r2, r3
 800425a:	d050      	beq.n	80042fe <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800425c:	6a3b      	ldr	r3, [r7, #32]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	2208      	movs	r2, #8
 8004262:	4413      	add	r3, r2
 8004264:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	6a3b      	ldr	r3, [r7, #32]
 800426c:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	1ad2      	subs	r2, r2, r3
 8004276:	2308      	movs	r3, #8
 8004278:	005b      	lsls	r3, r3, #1
 800427a:	429a      	cmp	r2, r3
 800427c:	d920      	bls.n	80042c0 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800427e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	4413      	add	r3, r2
 8004284:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	2b00      	cmp	r3, #0
 800428e:	d00b      	beq.n	80042a8 <pvPortMalloc+0xdc>
        __asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	613b      	str	r3, [r7, #16]
    }
 80042a2:	bf00      	nop
 80042a4:	bf00      	nop
 80042a6:	e7fd      	b.n	80042a4 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80042a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042aa:	685a      	ldr	r2, [r3, #4]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	1ad2      	subs	r2, r2, r3
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80042b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80042ba:	6978      	ldr	r0, [r7, #20]
 80042bc:	f000 f8fc 	bl	80044b8 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80042c0:	4b1c      	ldr	r3, [pc, #112]	@ (8004334 <pvPortMalloc+0x168>)
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	1ad3      	subs	r3, r2, r3
 80042ca:	4a1a      	ldr	r2, [pc, #104]	@ (8004334 <pvPortMalloc+0x168>)
 80042cc:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80042ce:	4b19      	ldr	r3, [pc, #100]	@ (8004334 <pvPortMalloc+0x168>)
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	4b1a      	ldr	r3, [pc, #104]	@ (800433c <pvPortMalloc+0x170>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	429a      	cmp	r2, r3
 80042d8:	d203      	bcs.n	80042e2 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80042da:	4b16      	ldr	r3, [pc, #88]	@ (8004334 <pvPortMalloc+0x168>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	4a17      	ldr	r2, [pc, #92]	@ (800433c <pvPortMalloc+0x170>)
 80042e0:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80042e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80042ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042ec:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80042f4:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <pvPortMalloc+0x174>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	3301      	adds	r3, #1
 80042fa:	4a11      	ldr	r2, [pc, #68]	@ (8004340 <pvPortMalloc+0x174>)
 80042fc:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80042fe:	f7fe fc7b 	bl	8002bf8 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004302:	69fb      	ldr	r3, [r7, #28]
 8004304:	f003 0307 	and.w	r3, r3, #7
 8004308:	2b00      	cmp	r3, #0
 800430a:	d00b      	beq.n	8004324 <pvPortMalloc+0x158>
        __asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	60fb      	str	r3, [r7, #12]
    }
 800431e:	bf00      	nop
 8004320:	bf00      	nop
 8004322:	e7fd      	b.n	8004320 <pvPortMalloc+0x154>
    return pvReturn;
 8004324:	69fb      	ldr	r3, [r7, #28]
}
 8004326:	4618      	mov	r0, r3
 8004328:	3728      	adds	r7, #40	@ 0x28
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}
 800432e:	bf00      	nop
 8004330:	2004b20c 	.word	0x2004b20c
 8004334:	2004b210 	.word	0x2004b210
 8004338:	2004b204 	.word	0x2004b204
 800433c:	2004b214 	.word	0x2004b214
 8004340:	2004b218 	.word	0x2004b218

08004344 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b086      	sub	sp, #24
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d04b      	beq.n	80043ee <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8004356:	2308      	movs	r3, #8
 8004358:	425b      	negs	r3, r3
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4413      	add	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8004360:	697b      	ldr	r3, [r7, #20]
 8004362:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	685b      	ldr	r3, [r3, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	db0b      	blt.n	8004384 <vPortFree+0x40>
        __asm volatile
 800436c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004370:	f383 8811 	msr	BASEPRI, r3
 8004374:	f3bf 8f6f 	isb	sy
 8004378:	f3bf 8f4f 	dsb	sy
 800437c:	60fb      	str	r3, [r7, #12]
    }
 800437e:	bf00      	nop
 8004380:	bf00      	nop
 8004382:	e7fd      	b.n	8004380 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <vPortFree+0x60>
        __asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	60bb      	str	r3, [r7, #8]
    }
 800439e:	bf00      	nop
 80043a0:	bf00      	nop
 80043a2:	e7fd      	b.n	80043a0 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80043a4:	693b      	ldr	r3, [r7, #16]
 80043a6:	685b      	ldr	r3, [r3, #4]
 80043a8:	0fdb      	lsrs	r3, r3, #31
 80043aa:	f003 0301 	and.w	r3, r3, #1
 80043ae:	b2db      	uxtb	r3, r3
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d01c      	beq.n	80043ee <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d118      	bne.n	80043ee <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80043c8:	f7fe fc08 	bl	8002bdc <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80043cc:	693b      	ldr	r3, [r7, #16]
 80043ce:	685a      	ldr	r2, [r3, #4]
 80043d0:	4b09      	ldr	r3, [pc, #36]	@ (80043f8 <vPortFree+0xb4>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4413      	add	r3, r2
 80043d6:	4a08      	ldr	r2, [pc, #32]	@ (80043f8 <vPortFree+0xb4>)
 80043d8:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80043da:	6938      	ldr	r0, [r7, #16]
 80043dc:	f000 f86c 	bl	80044b8 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80043e0:	4b06      	ldr	r3, [pc, #24]	@ (80043fc <vPortFree+0xb8>)
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	3301      	adds	r3, #1
 80043e6:	4a05      	ldr	r2, [pc, #20]	@ (80043fc <vPortFree+0xb8>)
 80043e8:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80043ea:	f7fe fc05 	bl	8002bf8 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80043ee:	bf00      	nop
 80043f0:	3718      	adds	r7, #24
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}
 80043f6:	bf00      	nop
 80043f8:	2004b210 	.word	0x2004b210
 80043fc:	2004b21c 	.word	0x2004b21c

08004400 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8004400:	b480      	push	{r7}
 8004402:	b085      	sub	sp, #20
 8004404:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004406:	f44f 2396 	mov.w	r3, #307200	@ 0x4b000
 800440a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800440c:	4b25      	ldr	r3, [pc, #148]	@ (80044a4 <prvHeapInit+0xa4>)
 800440e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f003 0307 	and.w	r3, r3, #7
 8004416:	2b00      	cmp	r3, #0
 8004418:	d00c      	beq.n	8004434 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	3307      	adds	r3, #7
 800441e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	f023 0307 	bic.w	r3, r3, #7
 8004426:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	1ad3      	subs	r3, r2, r3
 800442e:	4a1d      	ldr	r2, [pc, #116]	@ (80044a4 <prvHeapInit+0xa4>)
 8004430:	4413      	add	r3, r2
 8004432:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004438:	4a1b      	ldr	r2, [pc, #108]	@ (80044a8 <prvHeapInit+0xa8>)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800443e:	4b1a      	ldr	r3, [pc, #104]	@ (80044a8 <prvHeapInit+0xa8>)
 8004440:	2200      	movs	r2, #0
 8004442:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	4413      	add	r3, r2
 800444a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800444c:	2208      	movs	r2, #8
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	1a9b      	subs	r3, r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <prvHeapInit+0xac>)
 8004460:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8004462:	4b12      	ldr	r3, [pc, #72]	@ (80044ac <prvHeapInit+0xac>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800446a:	4b10      	ldr	r3, [pc, #64]	@ (80044ac <prvHeapInit+0xac>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2200      	movs	r2, #0
 8004470:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	68fa      	ldr	r2, [r7, #12]
 800447a:	1ad2      	subs	r2, r2, r3
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004480:	4b0a      	ldr	r3, [pc, #40]	@ (80044ac <prvHeapInit+0xac>)
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4a08      	ldr	r2, [pc, #32]	@ (80044b0 <prvHeapInit+0xb0>)
 800448e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	4a07      	ldr	r2, [pc, #28]	@ (80044b4 <prvHeapInit+0xb4>)
 8004496:	6013      	str	r3, [r2, #0]
}
 8004498:	bf00      	nop
 800449a:	3714      	adds	r7, #20
 800449c:	46bd      	mov	sp, r7
 800449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a2:	4770      	bx	lr
 80044a4:	20000204 	.word	0x20000204
 80044a8:	2004b204 	.word	0x2004b204
 80044ac:	2004b20c 	.word	0x2004b20c
 80044b0:	2004b214 	.word	0x2004b214
 80044b4:	2004b210 	.word	0x2004b210

080044b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80044c0:	4b28      	ldr	r3, [pc, #160]	@ (8004564 <prvInsertBlockIntoFreeList+0xac>)
 80044c2:	60fb      	str	r3, [r7, #12]
 80044c4:	e002      	b.n	80044cc <prvInsertBlockIntoFreeList+0x14>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	60fb      	str	r3, [r7, #12]
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	429a      	cmp	r2, r3
 80044d4:	d8f7      	bhi.n	80044c6 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	4413      	add	r3, r2
 80044e2:	687a      	ldr	r2, [r7, #4]
 80044e4:	429a      	cmp	r2, r3
 80044e6:	d108      	bne.n	80044fa <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	685a      	ldr	r2, [r3, #4]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	441a      	add	r2, r3
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	441a      	add	r2, r3
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	429a      	cmp	r2, r3
 800450c:	d118      	bne.n	8004540 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681a      	ldr	r2, [r3, #0]
 8004512:	4b15      	ldr	r3, [pc, #84]	@ (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	429a      	cmp	r2, r3
 8004518:	d00d      	beq.n	8004536 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685a      	ldr	r2, [r3, #4]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	441a      	add	r2, r3
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	e008      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004536:	4b0c      	ldr	r3, [pc, #48]	@ (8004568 <prvInsertBlockIntoFreeList+0xb0>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	601a      	str	r2, [r3, #0]
 800453e:	e003      	b.n	8004548 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	429a      	cmp	r2, r3
 800454e:	d002      	beq.n	8004556 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	687a      	ldr	r2, [r7, #4]
 8004554:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr
 8004562:	bf00      	nop
 8004564:	2004b204 	.word	0x2004b204
 8004568:	2004b20c 	.word	0x2004b20c

0800456c <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800456c:	b580      	push	{r7, lr}
 800456e:	b086      	sub	sp, #24
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800457a:	2205      	movs	r2, #5
 800457c:	492b      	ldr	r1, [pc, #172]	@ (800462c <SYSVIEW_AddTask+0xc0>)
 800457e:	68b8      	ldr	r0, [r7, #8]
 8004580:	f001 fa82 	bl	8005a88 <memcmp>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d04b      	beq.n	8004622 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800458a:	4b29      	ldr	r3, [pc, #164]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	2b07      	cmp	r3, #7
 8004590:	d903      	bls.n	800459a <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 8004592:	4828      	ldr	r0, [pc, #160]	@ (8004634 <SYSVIEW_AddTask+0xc8>)
 8004594:	f001 fa1c 	bl	80059d0 <SEGGER_SYSVIEW_Warn>
    return;
 8004598:	e044      	b.n	8004624 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800459a:	4b25      	ldr	r3, [pc, #148]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	4926      	ldr	r1, [pc, #152]	@ (8004638 <SYSVIEW_AddTask+0xcc>)
 80045a0:	4613      	mov	r3, r2
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	4413      	add	r3, r2
 80045a6:	009b      	lsls	r3, r3, #2
 80045a8:	440b      	add	r3, r1
 80045aa:	68fa      	ldr	r2, [r7, #12]
 80045ac:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 80045ae:	4b20      	ldr	r3, [pc, #128]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	4921      	ldr	r1, [pc, #132]	@ (8004638 <SYSVIEW_AddTask+0xcc>)
 80045b4:	4613      	mov	r3, r2
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	4413      	add	r3, r2
 80045ba:	009b      	lsls	r3, r3, #2
 80045bc:	440b      	add	r3, r1
 80045be:	3304      	adds	r3, #4
 80045c0:	68ba      	ldr	r2, [r7, #8]
 80045c2:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 80045c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	491b      	ldr	r1, [pc, #108]	@ (8004638 <SYSVIEW_AddTask+0xcc>)
 80045ca:	4613      	mov	r3, r2
 80045cc:	009b      	lsls	r3, r3, #2
 80045ce:	4413      	add	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	3308      	adds	r3, #8
 80045d6:	687a      	ldr	r2, [r7, #4]
 80045d8:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 80045da:	4b15      	ldr	r3, [pc, #84]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	4916      	ldr	r1, [pc, #88]	@ (8004638 <SYSVIEW_AddTask+0xcc>)
 80045e0:	4613      	mov	r3, r2
 80045e2:	009b      	lsls	r3, r3, #2
 80045e4:	4413      	add	r3, r2
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	440b      	add	r3, r1
 80045ea:	330c      	adds	r3, #12
 80045ec:	683a      	ldr	r2, [r7, #0]
 80045ee:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 80045f0:	4b0f      	ldr	r3, [pc, #60]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	4910      	ldr	r1, [pc, #64]	@ (8004638 <SYSVIEW_AddTask+0xcc>)
 80045f6:	4613      	mov	r3, r2
 80045f8:	009b      	lsls	r3, r3, #2
 80045fa:	4413      	add	r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	3310      	adds	r3, #16
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 8004606:	4b0a      	ldr	r3, [pc, #40]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a08      	ldr	r2, [pc, #32]	@ (8004630 <SYSVIEW_AddTask+0xc4>)
 800460e:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8004610:	69bb      	ldr	r3, [r7, #24]
 8004612:	9300      	str	r3, [sp, #0]
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	687a      	ldr	r2, [r7, #4]
 8004618:	68b9      	ldr	r1, [r7, #8]
 800461a:	68f8      	ldr	r0, [r7, #12]
 800461c:	f000 f80e 	bl	800463c <SYSVIEW_SendTaskInfo>
 8004620:	e000      	b.n	8004624 <SYSVIEW_AddTask+0xb8>
    return;
 8004622:	bf00      	nop

}
 8004624:	3710      	adds	r7, #16
 8004626:	46bd      	mov	sp, r7
 8004628:	bd80      	pop	{r7, pc}
 800462a:	bf00      	nop
 800462c:	08005b7c 	.word	0x08005b7c
 8004630:	2004b2c0 	.word	0x2004b2c0
 8004634:	08005b84 	.word	0x08005b84
 8004638:	2004b220 	.word	0x2004b220

0800463c <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800463c:	b580      	push	{r7, lr}
 800463e:	b08a      	sub	sp, #40	@ 0x28
 8004640:	af00      	add	r7, sp, #0
 8004642:	60f8      	str	r0, [r7, #12]
 8004644:	60b9      	str	r1, [r7, #8]
 8004646:	607a      	str	r2, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800464a:	f107 0314 	add.w	r3, r7, #20
 800464e:	2214      	movs	r2, #20
 8004650:	2100      	movs	r1, #0
 8004652:	4618      	mov	r0, r3
 8004654:	f001 fa28 	bl	8005aa8 <memset>
  TaskInfo.TaskID     = TaskID;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 8004668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800466a:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800466c:	f107 0314 	add.w	r3, r7, #20
 8004670:	4618      	mov	r0, r3
 8004672:	f000 fe3b 	bl	80052ec <SEGGER_SYSVIEW_SendTaskInfo>
}
 8004676:	bf00      	nop
 8004678:	3728      	adds	r7, #40	@ 0x28
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
	...

08004680 <_DoInit>:
                      _DoInit();                                                                     \
                    }                                                                                \
                  } while (0);                                                                       \
                }

static void _DoInit(void) {
 8004680:	b480      	push	{r7}
 8004682:	b083      	sub	sp, #12
 8004684:	af00      	add	r7, sp, #0
  volatile SEGGER_RTT_CB* p;   // Volatile to make sure that compiler cannot change the order of accesses to the control block
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((char*)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 8004686:	4b24      	ldr	r3, [pc, #144]	@ (8004718 <_DoInit+0x98>)
 8004688:	607b      	str	r3, [r7, #4]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2203      	movs	r2, #3
 800468e:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2203      	movs	r2, #3
 8004694:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	4a20      	ldr	r2, [pc, #128]	@ (800471c <_DoInit+0x9c>)
 800469a:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a20      	ldr	r2, [pc, #128]	@ (8004720 <_DoInit+0xa0>)
 80046a0:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80046a8:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2200      	movs	r2, #0
 80046ae:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2200      	movs	r2, #0
 80046b4:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2200      	movs	r2, #0
 80046ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	4a17      	ldr	r2, [pc, #92]	@ (800471c <_DoInit+0x9c>)
 80046c0:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a17      	ldr	r2, [pc, #92]	@ (8004724 <_DoInit+0xa4>)
 80046c6:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2210      	movs	r2, #16
 80046cc:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2200      	movs	r2, #0
 80046d2:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2200      	movs	r2, #0
 80046d8:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	2200      	movs	r2, #0
 80046de:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  STRCPY((char*)&p->acID[7], "RTT");
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3307      	adds	r3, #7
 80046e4:	4a10      	ldr	r2, [pc, #64]	@ (8004728 <_DoInit+0xa8>)
 80046e6:	6810      	ldr	r0, [r2, #0]
 80046e8:	6018      	str	r0, [r3, #0]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80046ea:	f3bf 8f5f 	dmb	sy
  STRCPY((char*)&p->acID[0], "SEGGER");
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4a0e      	ldr	r2, [pc, #56]	@ (800472c <_DoInit+0xac>)
 80046f2:	6810      	ldr	r0, [r2, #0]
 80046f4:	6018      	str	r0, [r3, #0]
 80046f6:	8891      	ldrh	r1, [r2, #4]
 80046f8:	7992      	ldrb	r2, [r2, #6]
 80046fa:	8099      	strh	r1, [r3, #4]
 80046fc:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 80046fe:	f3bf 8f5f 	dmb	sy
  p->acID[6] = ' ';
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2220      	movs	r2, #32
 8004706:	719a      	strb	r2, [r3, #6]
  RTT__DMB();                       // Force order of memory accessed inside core for cores that allow to change the order
 8004708:	f3bf 8f5f 	dmb	sy
}
 800470c:	bf00      	nop
 800470e:	370c      	adds	r7, #12
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	2004b2c4 	.word	0x2004b2c4
 800471c:	08005bd4 	.word	0x08005bd4
 8004720:	2004b36c 	.word	0x2004b36c
 8004724:	2004b76c 	.word	0x2004b76c
 8004728:	08005be0 	.word	0x08005be0
 800472c:	08005be4 	.word	0x08005be4

08004730 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8004730:	b580      	push	{r7, lr}
 8004732:	b08c      	sub	sp, #48	@ 0x30
 8004734:	af00      	add	r7, sp, #0
 8004736:	60f8      	str	r0, [r7, #12]
 8004738:	60b9      	str	r1, [r7, #8]
 800473a:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800473c:	4b3e      	ldr	r3, [pc, #248]	@ (8004838 <SEGGER_RTT_ReadNoLock+0x108>)
 800473e:	623b      	str	r3, [r7, #32]
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d101      	bne.n	800474e <SEGGER_RTT_ReadNoLock+0x1e>
 800474a:	f7ff ff99 	bl	8004680 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((char*)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800474e:	68fa      	ldr	r2, [r7, #12]
 8004750:	4613      	mov	r3, r2
 8004752:	005b      	lsls	r3, r3, #1
 8004754:	4413      	add	r3, r2
 8004756:	00db      	lsls	r3, r3, #3
 8004758:	3360      	adds	r3, #96	@ 0x60
 800475a:	4a37      	ldr	r2, [pc, #220]	@ (8004838 <SEGGER_RTT_ReadNoLock+0x108>)
 800475c:	4413      	add	r3, r2
 800475e:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8004764:	69fb      	ldr	r3, [r7, #28]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800476a:	69fb      	ldr	r3, [r7, #28]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8004770:	2300      	movs	r3, #0
 8004772:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8004774:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	429a      	cmp	r2, r3
 800477a:	d92b      	bls.n	80047d4 <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	689a      	ldr	r2, [r3, #8]
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	4293      	cmp	r3, r2
 800478c:	bf28      	it	cs
 800478e:	4613      	movcs	r3, r2
 8004790:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	685a      	ldr	r2, [r3, #4]
 8004796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004798:	4413      	add	r3, r2
 800479a:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800479c:	697a      	ldr	r2, [r7, #20]
 800479e:	6939      	ldr	r1, [r7, #16]
 80047a0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047a2:	f001 f9ad 	bl	8005b00 <memcpy>
    NumBytesRead += NumBytesRem;
 80047a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	4413      	add	r3, r2
 80047ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 80047ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	4413      	add	r3, r2
 80047b4:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	697b      	ldr	r3, [r7, #20]
 80047ba:	1ad3      	subs	r3, r2, r3
 80047bc:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 80047be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047c0:	697b      	ldr	r3, [r7, #20]
 80047c2:	4413      	add	r3, r2
 80047c4:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 80047c6:	69fb      	ldr	r3, [r7, #28]
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d101      	bne.n	80047d4 <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 80047d0:	2300      	movs	r3, #0
 80047d2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 80047d4:	69ba      	ldr	r2, [r7, #24]
 80047d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047d8:	1ad3      	subs	r3, r2, r3
 80047da:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 80047dc:	697a      	ldr	r2, [r7, #20]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4293      	cmp	r3, r2
 80047e2:	bf28      	it	cs
 80047e4:	4613      	movcs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d019      	beq.n	8004822 <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 80047ee:	69fb      	ldr	r3, [r7, #28]
 80047f0:	685a      	ldr	r2, [r3, #4]
 80047f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047f4:	4413      	add	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	6939      	ldr	r1, [r7, #16]
 80047fc:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80047fe:	f001 f97f 	bl	8005b00 <memcpy>
    NumBytesRead += NumBytesRem;
 8004802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	4413      	add	r3, r2
 8004808:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800480a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	4413      	add	r3, r2
 8004810:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	1ad3      	subs	r3, r2, r3
 8004818:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800481a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	4413      	add	r3, r2
 8004820:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8004822:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8004828:	69fb      	ldr	r3, [r7, #28]
 800482a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800482c:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800482e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8004830:	4618      	mov	r0, r3
 8004832:	3730      	adds	r7, #48	@ 0x30
 8004834:	46bd      	mov	sp, r7
 8004836:	bd80      	pop	{r7, pc}
 8004838:	2004b2c4 	.word	0x2004b2c4

0800483c <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800483c:	b480      	push	{r7}
 800483e:	b087      	sub	sp, #28
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
  unsigned int n;
  unsigned int Len;
  //
  // Compute string len
  //
  Len = 0;
 8004848:	2300      	movs	r3, #0
 800484a:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 800484c:	e002      	b.n	8004854 <_EncodeStr+0x18>
    Len++;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	3301      	adds	r3, #1
 8004852:	613b      	str	r3, [r7, #16]
  while(*(pText + Len) != 0) {
 8004854:	68ba      	ldr	r2, [r7, #8]
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	4413      	add	r3, r2
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1f6      	bne.n	800484e <_EncodeStr+0x12>
  }
  if (Len > Limit) {
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	429a      	cmp	r2, r3
 8004866:	d901      	bls.n	800486c <_EncodeStr+0x30>
    Len = Limit;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	613b      	str	r3, [r7, #16]
  }
  //
  // Write Len
  //
  if (Len < 255)  {
 800486c:	693b      	ldr	r3, [r7, #16]
 800486e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004870:	d806      	bhi.n	8004880 <_EncodeStr+0x44>
    *pPayload++ = Len; 
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	1c5a      	adds	r2, r3, #1
 8004876:	60fa      	str	r2, [r7, #12]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	b2d2      	uxtb	r2, r2
 800487c:	701a      	strb	r2, [r3, #0]
 800487e:	e011      	b.n	80048a4 <_EncodeStr+0x68>
  } else {
    *pPayload++ = 255;
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	1c5a      	adds	r2, r3, #1
 8004884:	60fa      	str	r2, [r7, #12]
 8004886:	22ff      	movs	r2, #255	@ 0xff
 8004888:	701a      	strb	r2, [r3, #0]
    *pPayload++ = (Len & 255);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	60fa      	str	r2, [r7, #12]
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	b2d2      	uxtb	r2, r2
 8004894:	701a      	strb	r2, [r3, #0]
    *pPayload++ = ((Len >> 8) & 255);
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	0a19      	lsrs	r1, r3, #8
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	1c5a      	adds	r2, r3, #1
 800489e:	60fa      	str	r2, [r7, #12]
 80048a0:	b2ca      	uxtb	r2, r1
 80048a2:	701a      	strb	r2, [r3, #0]
  }
  //
  // copy string
  //
  n = 0;
 80048a4:	2300      	movs	r3, #0
 80048a6:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048a8:	e00a      	b.n	80048c0 <_EncodeStr+0x84>
    *pPayload++ = *pText++;
 80048aa:	68ba      	ldr	r2, [r7, #8]
 80048ac:	1c53      	adds	r3, r2, #1
 80048ae:	60bb      	str	r3, [r7, #8]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	1c59      	adds	r1, r3, #1
 80048b4:	60f9      	str	r1, [r7, #12]
 80048b6:	7812      	ldrb	r2, [r2, #0]
 80048b8:	701a      	strb	r2, [r3, #0]
    n++;
 80048ba:	697b      	ldr	r3, [r7, #20]
 80048bc:	3301      	adds	r3, #1
 80048be:	617b      	str	r3, [r7, #20]
  while (n < Len) {
 80048c0:	697a      	ldr	r2, [r7, #20]
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	429a      	cmp	r2, r3
 80048c6:	d3f0      	bcc.n	80048aa <_EncodeStr+0x6e>
  }
  return pPayload;
 80048c8:	68fb      	ldr	r3, [r7, #12]
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	371c      	adds	r7, #28
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr

080048d6 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 80048d6:	b480      	push	{r7}
 80048d8:	b083      	sub	sp, #12
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
  return pPacket + 4;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	3304      	adds	r3, #4
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
	...

080048f0 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
  U8  Cmd;
  int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80048f6:	4b35      	ldr	r3, [pc, #212]	@ (80049cc <_HandleIncomingPacket+0xdc>)
 80048f8:	7e1b      	ldrb	r3, [r3, #24]
 80048fa:	4618      	mov	r0, r3
 80048fc:	1cfb      	adds	r3, r7, #3
 80048fe:	2201      	movs	r2, #1
 8004900:	4619      	mov	r1, r3
 8004902:	f7ff ff15 	bl	8004730 <SEGGER_RTT_ReadNoLock>
 8004906:	4603      	mov	r3, r0
 8004908:	607b      	str	r3, [r7, #4]
  if (Status > 0) {
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2b00      	cmp	r3, #0
 800490e:	dd59      	ble.n	80049c4 <_HandleIncomingPacket+0xd4>
    switch (Cmd) {
 8004910:	78fb      	ldrb	r3, [r7, #3]
 8004912:	2b80      	cmp	r3, #128	@ 0x80
 8004914:	d032      	beq.n	800497c <_HandleIncomingPacket+0x8c>
 8004916:	2b80      	cmp	r3, #128	@ 0x80
 8004918:	dc42      	bgt.n	80049a0 <_HandleIncomingPacket+0xb0>
 800491a:	2b07      	cmp	r3, #7
 800491c:	dc16      	bgt.n	800494c <_HandleIncomingPacket+0x5c>
 800491e:	2b00      	cmp	r3, #0
 8004920:	dd3e      	ble.n	80049a0 <_HandleIncomingPacket+0xb0>
 8004922:	3b01      	subs	r3, #1
 8004924:	2b06      	cmp	r3, #6
 8004926:	d83b      	bhi.n	80049a0 <_HandleIncomingPacket+0xb0>
 8004928:	a201      	add	r2, pc, #4	@ (adr r2, 8004930 <_HandleIncomingPacket+0x40>)
 800492a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800492e:	bf00      	nop
 8004930:	08004953 	.word	0x08004953
 8004934:	08004959 	.word	0x08004959
 8004938:	0800495f 	.word	0x0800495f
 800493c:	08004965 	.word	0x08004965
 8004940:	0800496b 	.word	0x0800496b
 8004944:	08004971 	.word	0x08004971
 8004948:	08004977 	.word	0x08004977
 800494c:	2b7f      	cmp	r3, #127	@ 0x7f
 800494e:	d034      	beq.n	80049ba <_HandleIncomingPacket+0xca>
 8004950:	e026      	b.n	80049a0 <_HandleIncomingPacket+0xb0>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8004952:	f000 fb51 	bl	8004ff8 <SEGGER_SYSVIEW_Start>
      break;
 8004956:	e035      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8004958:	f000 fc08 	bl	800516c <SEGGER_SYSVIEW_Stop>
      break;
 800495c:	e032      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800495e:	f000 fdbd 	bl	80054dc <SEGGER_SYSVIEW_RecordSystime>
      break;
 8004962:	e02f      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8004964:	f000 fda6 	bl	80054b4 <SEGGER_SYSVIEW_SendTaskList>
      break;
 8004968:	e02c      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800496a:	f000 fc25 	bl	80051b8 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800496e:	e029      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8004970:	f000 fff0 	bl	8005954 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8004974:	e026      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8004976:	f000 ffcf 	bl	8005918 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800497a:	e023      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800497c:	4b13      	ldr	r3, [pc, #76]	@ (80049cc <_HandleIncomingPacket+0xdc>)
 800497e:	7e1b      	ldrb	r3, [r3, #24]
 8004980:	4618      	mov	r0, r3
 8004982:	1cfb      	adds	r3, r7, #3
 8004984:	2201      	movs	r2, #1
 8004986:	4619      	mov	r1, r3
 8004988:	f7ff fed2 	bl	8004730 <SEGGER_RTT_ReadNoLock>
 800498c:	4603      	mov	r3, r0
 800498e:	607b      	str	r3, [r7, #4]
      if (Status > 0) {
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2b00      	cmp	r3, #0
 8004994:	dd13      	ble.n	80049be <_HandleIncomingPacket+0xce>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8004996:	78fb      	ldrb	r3, [r7, #3]
 8004998:	4618      	mov	r0, r3
 800499a:	f000 ff3d 	bl	8005818 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800499e:	e00e      	b.n	80049be <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 80049a0:	78fb      	ldrb	r3, [r7, #3]
 80049a2:	b25b      	sxtb	r3, r3
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	da0c      	bge.n	80049c2 <_HandleIncomingPacket+0xd2>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 80049a8:	4b08      	ldr	r3, [pc, #32]	@ (80049cc <_HandleIncomingPacket+0xdc>)
 80049aa:	7e1b      	ldrb	r3, [r3, #24]
 80049ac:	4618      	mov	r0, r3
 80049ae:	1cfb      	adds	r3, r7, #3
 80049b0:	2201      	movs	r2, #1
 80049b2:	4619      	mov	r1, r3
 80049b4:	f7ff febc 	bl	8004730 <SEGGER_RTT_ReadNoLock>
      }
      break;
 80049b8:	e003      	b.n	80049c2 <_HandleIncomingPacket+0xd2>
      break;
 80049ba:	bf00      	nop
 80049bc:	e002      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
      break;
 80049be:	bf00      	nop
 80049c0:	e000      	b.n	80049c4 <_HandleIncomingPacket+0xd4>
      break;
 80049c2:	bf00      	nop
    }
  }
}
 80049c4:	bf00      	nop
 80049c6:	3708      	adds	r7, #8
 80049c8:	46bd      	mov	sp, r7
 80049ca:	bd80      	pop	{r7, pc}
 80049cc:	2004b77c 	.word	0x2004b77c

080049d0 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b08c      	sub	sp, #48	@ 0x30
 80049d4:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 80049d6:	2301      	movs	r3, #1
 80049d8:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 80049da:	1d3b      	adds	r3, r7, #4
 80049dc:	3301      	adds	r3, #1
 80049de:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 80049e0:	69fb      	ldr	r3, [r7, #28]
 80049e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80049e4:	4b31      	ldr	r3, [pc, #196]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 80049e6:	695b      	ldr	r3, [r3, #20]
 80049e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80049ea:	e00b      	b.n	8004a04 <_TrySendOverflowPacket+0x34>
 80049ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ee:	b2da      	uxtb	r2, r3
 80049f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80049f2:	1c59      	adds	r1, r3, #1
 80049f4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80049f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80049fa:	b2d2      	uxtb	r2, r2
 80049fc:	701a      	strb	r2, [r3, #0]
 80049fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a00:	09db      	lsrs	r3, r3, #7
 8004a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004a04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004a06:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a08:	d8f0      	bhi.n	80049ec <_TrySendOverflowPacket+0x1c>
 8004a0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a0c:	1c5a      	adds	r2, r3, #1
 8004a0e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004a12:	b2d2      	uxtb	r2, r2
 8004a14:	701a      	strb	r2, [r3, #0]
 8004a16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a18:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004a1a:	4b25      	ldr	r3, [pc, #148]	@ (8004ab0 <_TrySendOverflowPacket+0xe0>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004a20:	4b22      	ldr	r3, [pc, #136]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	69ba      	ldr	r2, [r7, #24]
 8004a26:	1ad3      	subs	r3, r2, r3
 8004a28:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	623b      	str	r3, [r7, #32]
 8004a32:	e00b      	b.n	8004a4c <_TrySendOverflowPacket+0x7c>
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	b2da      	uxtb	r2, r3
 8004a38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a3a:	1c59      	adds	r1, r3, #1
 8004a3c:	6279      	str	r1, [r7, #36]	@ 0x24
 8004a3e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004a42:	b2d2      	uxtb	r2, r2
 8004a44:	701a      	strb	r2, [r3, #0]
 8004a46:	6a3b      	ldr	r3, [r7, #32]
 8004a48:	09db      	lsrs	r3, r3, #7
 8004a4a:	623b      	str	r3, [r7, #32]
 8004a4c:	6a3b      	ldr	r3, [r7, #32]
 8004a4e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004a50:	d8f0      	bhi.n	8004a34 <_TrySendOverflowPacket+0x64>
 8004a52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a58:	6a3a      	ldr	r2, [r7, #32]
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]
 8004a5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a60:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, pPayload - aPacket);
 8004a62:	4b12      	ldr	r3, [pc, #72]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a64:	785b      	ldrb	r3, [r3, #1]
 8004a66:	4618      	mov	r0, r3
 8004a68:	1d3b      	adds	r3, r7, #4
 8004a6a:	69fa      	ldr	r2, [r7, #28]
 8004a6c:	1ad3      	subs	r3, r2, r3
 8004a6e:	461a      	mov	r2, r3
 8004a70:	1d3b      	adds	r3, r7, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	f7fb fbd4 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8004a7c:	693b      	ldr	r3, [r7, #16]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d009      	beq.n	8004a96 <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004a82:	4a0a      	ldr	r2, [pc, #40]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8004a88:	4b08      	ldr	r3, [pc, #32]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	3b01      	subs	r3, #1
 8004a8e:	b2da      	uxtb	r2, r3
 8004a90:	4b06      	ldr	r3, [pc, #24]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	e004      	b.n	8004aa0 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8004a96:	4b05      	ldr	r3, [pc, #20]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a98:	695b      	ldr	r3, [r3, #20]
 8004a9a:	3301      	adds	r3, #1
 8004a9c:	4a03      	ldr	r2, [pc, #12]	@ (8004aac <_TrySendOverflowPacket+0xdc>)
 8004a9e:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8004aa0:	693b      	ldr	r3, [r7, #16]
}
 8004aa2:	4618      	mov	r0, r3
 8004aa4:	3730      	adds	r7, #48	@ 0x30
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	bd80      	pop	{r7, pc}
 8004aaa:	bf00      	nop
 8004aac:	2004b77c 	.word	0x2004b77c
 8004ab0:	e0001004 	.word	0xe0001004

08004ab4 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	@ 0x28
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 8004ac0:	4b6c      	ldr	r3, [pc, #432]	@ (8004c74 <_SendPacket+0x1c0>)
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	2b01      	cmp	r3, #1
 8004ac6:	d010      	beq.n	8004aea <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 8004ac8:	4b6a      	ldr	r3, [pc, #424]	@ (8004c74 <_SendPacket+0x1c0>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 80a3 	beq.w	8004c18 <_SendPacket+0x164>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 8004ad2:	4b68      	ldr	r3, [pc, #416]	@ (8004c74 <_SendPacket+0x1c0>)
 8004ad4:	781b      	ldrb	r3, [r3, #0]
 8004ad6:	2b02      	cmp	r3, #2
 8004ad8:	d109      	bne.n	8004aee <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 8004ada:	f7ff ff79 	bl	80049d0 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 8004ade:	4b65      	ldr	r3, [pc, #404]	@ (8004c74 <_SendPacket+0x1c0>)
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	f040 809a 	bne.w	8004c1c <_SendPacket+0x168>
      goto SendDone;
    }
  }
Send:
 8004ae8:	e001      	b.n	8004aee <_SendPacket+0x3a>
    goto Send;
 8004aea:	bf00      	nop
 8004aec:	e000      	b.n	8004af0 <_SendPacket+0x3c>
Send:
 8004aee:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2b1f      	cmp	r3, #31
 8004af4:	d809      	bhi.n	8004b0a <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 8004af6:	4b5f      	ldr	r3, [pc, #380]	@ (8004c74 <_SendPacket+0x1c0>)
 8004af8:	69da      	ldr	r2, [r3, #28]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	fa22 f303 	lsr.w	r3, r2, r3
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f040 808b 	bne.w	8004c20 <_SendPacket+0x16c>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	2b17      	cmp	r3, #23
 8004b0e:	d807      	bhi.n	8004b20 <_SendPacket+0x6c>
    *--pStartPacket = EventId;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	3b01      	subs	r3, #1
 8004b14:	60fb      	str	r3, [r7, #12]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	b2da      	uxtb	r2, r3
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	701a      	strb	r2, [r3, #0]
 8004b1e:	e03d      	b.n	8004b9c <_SendPacket+0xe8>
  } else {
    NumBytes = pEndPacket - pStartPacket;
 8004b20:	68ba      	ldr	r2, [r7, #8]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	1ad3      	subs	r3, r2, r3
 8004b26:	61fb      	str	r3, [r7, #28]
    if (NumBytes > 127) {
 8004b28:	69fb      	ldr	r3, [r7, #28]
 8004b2a:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b2c:	d912      	bls.n	8004b54 <_SendPacket+0xa0>
      *--pStartPacket = (NumBytes >> 7);
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	09da      	lsrs	r2, r3, #7
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b01      	subs	r3, #1
 8004b36:	60fb      	str	r3, [r7, #12]
 8004b38:	b2d2      	uxtb	r2, r2
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = NumBytes | 0x80;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	b2db      	uxtb	r3, r3
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	3a01      	subs	r2, #1
 8004b46:	60fa      	str	r2, [r7, #12]
 8004b48:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b4c:	b2da      	uxtb	r2, r3
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e006      	b.n	8004b62 <_SendPacket+0xae>
    } else {
      *--pStartPacket = NumBytes;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b01      	subs	r3, #1
 8004b58:	60fb      	str	r3, [r7, #12]
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	b2da      	uxtb	r2, r3
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	701a      	strb	r2, [r3, #0]
    }
    if (EventId > 127) {
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2b7f      	cmp	r3, #127	@ 0x7f
 8004b66:	d912      	bls.n	8004b8e <_SendPacket+0xda>
      *--pStartPacket = (EventId >> 7);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	09da      	lsrs	r2, r3, #7
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	60fb      	str	r3, [r7, #12]
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = EventId | 0x80;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	b2db      	uxtb	r3, r3
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	3a01      	subs	r2, #1
 8004b80:	60fa      	str	r2, [r7, #12]
 8004b82:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	701a      	strb	r2, [r3, #0]
 8004b8c:	e006      	b.n	8004b9c <_SendPacket+0xe8>
    } else {
      *--pStartPacket = EventId;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	3b01      	subs	r3, #1
 8004b92:	60fb      	str	r3, [r7, #12]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	701a      	strb	r2, [r3, #0]
    }
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8004b9c:	4b36      	ldr	r3, [pc, #216]	@ (8004c78 <_SendPacket+0x1c4>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8004ba2:	4b34      	ldr	r3, [pc, #208]	@ (8004c74 <_SendPacket+0x1c0>)
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	627b      	str	r3, [r7, #36]	@ 0x24
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	623b      	str	r3, [r7, #32]
 8004bb4:	e00b      	b.n	8004bce <_SendPacket+0x11a>
 8004bb6:	6a3b      	ldr	r3, [r7, #32]
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bbc:	1c59      	adds	r1, r3, #1
 8004bbe:	6279      	str	r1, [r7, #36]	@ 0x24
 8004bc0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004bc4:	b2d2      	uxtb	r2, r2
 8004bc6:	701a      	strb	r2, [r3, #0]
 8004bc8:	6a3b      	ldr	r3, [r7, #32]
 8004bca:	09db      	lsrs	r3, r3, #7
 8004bcc:	623b      	str	r3, [r7, #32]
 8004bce:	6a3b      	ldr	r3, [r7, #32]
 8004bd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004bd2:	d8f0      	bhi.n	8004bb6 <_SendPacket+0x102>
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd6:	1c5a      	adds	r2, r3, #1
 8004bd8:	627a      	str	r2, [r7, #36]	@ 0x24
 8004bda:	6a3a      	ldr	r2, [r7, #32]
 8004bdc:	b2d2      	uxtb	r2, r2
 8004bde:	701a      	strb	r2, [r3, #0]
 8004be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004be2:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, pEndPacket - pStartPacket);
 8004be4:	4b23      	ldr	r3, [pc, #140]	@ (8004c74 <_SendPacket+0x1c0>)
 8004be6:	785b      	ldrb	r3, [r3, #1]
 8004be8:	4618      	mov	r0, r3
 8004bea:	68ba      	ldr	r2, [r7, #8]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	1ad3      	subs	r3, r2, r3
 8004bf0:	461a      	mov	r2, r3
 8004bf2:	68f9      	ldr	r1, [r7, #12]
 8004bf4:	f7fb fb14 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d003      	beq.n	8004c0a <_SendPacket+0x156>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8004c02:	4a1c      	ldr	r2, [pc, #112]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c04:	69bb      	ldr	r3, [r7, #24]
 8004c06:	60d3      	str	r3, [r2, #12]
 8004c08:	e00b      	b.n	8004c22 <_SendPacket+0x16e>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 8004c0a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	b2da      	uxtb	r2, r3
 8004c12:	4b18      	ldr	r3, [pc, #96]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c14:	701a      	strb	r2, [r3, #0]
 8004c16:	e004      	b.n	8004c22 <_SendPacket+0x16e>
    goto SendDone;
 8004c18:	bf00      	nop
 8004c1a:	e002      	b.n	8004c22 <_SendPacket+0x16e>
      goto SendDone;
 8004c1c:	bf00      	nop
 8004c1e:	e000      	b.n	8004c22 <_SendPacket+0x16e>
      goto SendDone;
 8004c20:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 8004c22:	4b14      	ldr	r3, [pc, #80]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c24:	7e1b      	ldrb	r3, [r3, #24]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4a14      	ldr	r2, [pc, #80]	@ (8004c7c <_SendPacket+0x1c8>)
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	005b      	lsls	r3, r3, #1
 8004c2e:	440b      	add	r3, r1
 8004c30:	00db      	lsls	r3, r3, #3
 8004c32:	4413      	add	r3, r2
 8004c34:	336c      	adds	r3, #108	@ 0x6c
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	4b0e      	ldr	r3, [pc, #56]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c3a:	7e1b      	ldrb	r3, [r3, #24]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	490f      	ldr	r1, [pc, #60]	@ (8004c7c <_SendPacket+0x1c8>)
 8004c40:	4603      	mov	r3, r0
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4403      	add	r3, r0
 8004c46:	00db      	lsls	r3, r3, #3
 8004c48:	440b      	add	r3, r1
 8004c4a:	3370      	adds	r3, #112	@ 0x70
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d00b      	beq.n	8004c6a <_SendPacket+0x1b6>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 8004c52:	4b08      	ldr	r3, [pc, #32]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c54:	789b      	ldrb	r3, [r3, #2]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d107      	bne.n	8004c6a <_SendPacket+0x1b6>
      _SYSVIEW_Globals.RecursionCnt = 1;
 8004c5a:	4b06      	ldr	r3, [pc, #24]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 8004c60:	f7ff fe46 	bl	80048f0 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 8004c64:	4b03      	ldr	r3, [pc, #12]	@ (8004c74 <_SendPacket+0x1c0>)
 8004c66:	2200      	movs	r2, #0
 8004c68:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	@ 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	2004b77c 	.word	0x2004b77c
 8004c78:	e0001004 	.word	0xe0001004
 8004c7c:	2004b2c4 	.word	0x2004b2c4

08004c80 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b084      	sub	sp, #16
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8004c88:	f3ef 8311 	mrs	r3, BASEPRI
 8004c8c:	f04f 0120 	mov.w	r1, #32
 8004c90:	f381 8811 	msr	BASEPRI, r1
 8004c94:	60fb      	str	r3, [r7, #12]
 8004c96:	4808      	ldr	r0, [pc, #32]	@ (8004cb8 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 8004c98:	f7ff fe1d 	bl	80048d6 <_PreparePacket>
 8004c9c:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 8004c9e:	687a      	ldr	r2, [r7, #4]
 8004ca0:	68b9      	ldr	r1, [r7, #8]
 8004ca2:	68b8      	ldr	r0, [r7, #8]
 8004ca4:	f7ff ff06 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f383 8811 	msr	BASEPRI, r3
}
 8004cae:	bf00      	nop
 8004cb0:	3710      	adds	r7, #16
 8004cb2:	46bd      	mov	sp, r7
 8004cb4:	bd80      	pop	{r7, pc}
 8004cb6:	bf00      	nop
 8004cb8:	2004b7ac 	.word	0x2004b7ac

08004cbc <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b088      	sub	sp, #32
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8004cc6:	f3ef 8311 	mrs	r3, BASEPRI
 8004cca:	f04f 0120 	mov.w	r1, #32
 8004cce:	f381 8811 	msr	BASEPRI, r1
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	4816      	ldr	r0, [pc, #88]	@ (8004d30 <SEGGER_SYSVIEW_RecordU32+0x74>)
 8004cd6:	f7ff fdfe 	bl	80048d6 <_PreparePacket>
 8004cda:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	61bb      	str	r3, [r7, #24]
 8004ce8:	e00b      	b.n	8004d02 <SEGGER_SYSVIEW_RecordU32+0x46>
 8004cea:	69bb      	ldr	r3, [r7, #24]
 8004cec:	b2da      	uxtb	r2, r3
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	1c59      	adds	r1, r3, #1
 8004cf2:	61f9      	str	r1, [r7, #28]
 8004cf4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004cf8:	b2d2      	uxtb	r2, r2
 8004cfa:	701a      	strb	r2, [r3, #0]
 8004cfc:	69bb      	ldr	r3, [r7, #24]
 8004cfe:	09db      	lsrs	r3, r3, #7
 8004d00:	61bb      	str	r3, [r7, #24]
 8004d02:	69bb      	ldr	r3, [r7, #24]
 8004d04:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d06:	d8f0      	bhi.n	8004cea <SEGGER_SYSVIEW_RecordU32+0x2e>
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	1c5a      	adds	r2, r3, #1
 8004d0c:	61fa      	str	r2, [r7, #28]
 8004d0e:	69ba      	ldr	r2, [r7, #24]
 8004d10:	b2d2      	uxtb	r2, r2
 8004d12:	701a      	strb	r2, [r3, #0]
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	6938      	ldr	r0, [r7, #16]
 8004d1e:	f7ff fec9 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8004d22:	697b      	ldr	r3, [r7, #20]
 8004d24:	f383 8811 	msr	BASEPRI, r3
}
 8004d28:	bf00      	nop
 8004d2a:	3720      	adds	r7, #32
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	bd80      	pop	{r7, pc}
 8004d30:	2004b7ac 	.word	0x2004b7ac

08004d34 <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b08c      	sub	sp, #48	@ 0x30
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 8004d40:	f3ef 8311 	mrs	r3, BASEPRI
 8004d44:	f04f 0120 	mov.w	r1, #32
 8004d48:	f381 8811 	msr	BASEPRI, r1
 8004d4c:	61fb      	str	r3, [r7, #28]
 8004d4e:	4825      	ldr	r0, [pc, #148]	@ (8004de4 <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 8004d50:	f7ff fdc1 	bl	80048d6 <_PreparePacket>
 8004d54:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d62:	e00b      	b.n	8004d7c <SEGGER_SYSVIEW_RecordU32x2+0x48>
 8004d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d66:	b2da      	uxtb	r2, r3
 8004d68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d6a:	1c59      	adds	r1, r3, #1
 8004d6c:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004d6e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004d72:	b2d2      	uxtb	r2, r2
 8004d74:	701a      	strb	r2, [r3, #0]
 8004d76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d78:	09db      	lsrs	r3, r3, #7
 8004d7a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d7e:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d80:	d8f0      	bhi.n	8004d64 <SEGGER_SYSVIEW_RecordU32x2+0x30>
 8004d82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d84:	1c5a      	adds	r2, r3, #1
 8004d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004d8a:	b2d2      	uxtb	r2, r2
 8004d8c:	701a      	strb	r2, [r3, #0]
 8004d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d90:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	623b      	str	r3, [r7, #32]
 8004d9a:	e00b      	b.n	8004db4 <SEGGER_SYSVIEW_RecordU32x2+0x80>
 8004d9c:	6a3b      	ldr	r3, [r7, #32]
 8004d9e:	b2da      	uxtb	r2, r3
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	1c59      	adds	r1, r3, #1
 8004da4:	6279      	str	r1, [r7, #36]	@ 0x24
 8004da6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004daa:	b2d2      	uxtb	r2, r2
 8004dac:	701a      	strb	r2, [r3, #0]
 8004dae:	6a3b      	ldr	r3, [r7, #32]
 8004db0:	09db      	lsrs	r3, r3, #7
 8004db2:	623b      	str	r3, [r7, #32]
 8004db4:	6a3b      	ldr	r3, [r7, #32]
 8004db6:	2b7f      	cmp	r3, #127	@ 0x7f
 8004db8:	d8f0      	bhi.n	8004d9c <SEGGER_SYSVIEW_RecordU32x2+0x68>
 8004dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dbc:	1c5a      	adds	r2, r3, #1
 8004dbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8004dc0:	6a3a      	ldr	r2, [r7, #32]
 8004dc2:	b2d2      	uxtb	r2, r2
 8004dc4:	701a      	strb	r2, [r3, #0]
 8004dc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dc8:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	6979      	ldr	r1, [r7, #20]
 8004dce:	69b8      	ldr	r0, [r7, #24]
 8004dd0:	f7ff fe70 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8004dd4:	69fb      	ldr	r3, [r7, #28]
 8004dd6:	f383 8811 	msr	BASEPRI, r3
}
 8004dda:	bf00      	nop
 8004ddc:	3730      	adds	r7, #48	@ 0x30
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}
 8004de2:	bf00      	nop
 8004de4:	2004b7ac 	.word	0x2004b7ac

08004de8 <SEGGER_SYSVIEW_RecordU32x3>:
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x3(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2) {
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b08e      	sub	sp, #56	@ 0x38
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 3 * SEGGER_SYSVIEW_QUANTA_U32);
 8004df6:	f3ef 8311 	mrs	r3, BASEPRI
 8004dfa:	f04f 0120 	mov.w	r1, #32
 8004dfe:	f381 8811 	msr	BASEPRI, r1
 8004e02:	61fb      	str	r3, [r7, #28]
 8004e04:	4832      	ldr	r0, [pc, #200]	@ (8004ed0 <SEGGER_SYSVIEW_RecordU32x3+0xe8>)
 8004e06:	f7ff fd66 	bl	80048d6 <_PreparePacket>
 8004e0a:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e18:	e00b      	b.n	8004e32 <SEGGER_SYSVIEW_RecordU32x3+0x4a>
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1c:	b2da      	uxtb	r2, r3
 8004e1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e20:	1c59      	adds	r1, r3, #1
 8004e22:	6379      	str	r1, [r7, #52]	@ 0x34
 8004e24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e28:	b2d2      	uxtb	r2, r2
 8004e2a:	701a      	strb	r2, [r3, #0]
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	09db      	lsrs	r3, r3, #7
 8004e30:	633b      	str	r3, [r7, #48]	@ 0x30
 8004e32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e34:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e36:	d8f0      	bhi.n	8004e1a <SEGGER_SYSVIEW_RecordU32x3+0x32>
 8004e38:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	637a      	str	r2, [r7, #52]	@ 0x34
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e40:	b2d2      	uxtb	r2, r2
 8004e42:	701a      	strb	r2, [r3, #0]
 8004e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e46:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e50:	e00b      	b.n	8004e6a <SEGGER_SYSVIEW_RecordU32x3+0x82>
 8004e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e54:	b2da      	uxtb	r2, r3
 8004e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e58:	1c59      	adds	r1, r3, #1
 8004e5a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004e5c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e60:	b2d2      	uxtb	r2, r2
 8004e62:	701a      	strb	r2, [r3, #0]
 8004e64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e66:	09db      	lsrs	r3, r3, #7
 8004e68:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e6c:	2b7f      	cmp	r3, #127	@ 0x7f
 8004e6e:	d8f0      	bhi.n	8004e52 <SEGGER_SYSVIEW_RecordU32x3+0x6a>
 8004e70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e72:	1c5a      	adds	r2, r3, #1
 8004e74:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004e76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e78:	b2d2      	uxtb	r2, r2
 8004e7a:	701a      	strb	r2, [r3, #0]
 8004e7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e7e:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	623b      	str	r3, [r7, #32]
 8004e88:	e00b      	b.n	8004ea2 <SEGGER_SYSVIEW_RecordU32x3+0xba>
 8004e8a:	6a3b      	ldr	r3, [r7, #32]
 8004e8c:	b2da      	uxtb	r2, r3
 8004e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e90:	1c59      	adds	r1, r3, #1
 8004e92:	6279      	str	r1, [r7, #36]	@ 0x24
 8004e94:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004e98:	b2d2      	uxtb	r2, r2
 8004e9a:	701a      	strb	r2, [r3, #0]
 8004e9c:	6a3b      	ldr	r3, [r7, #32]
 8004e9e:	09db      	lsrs	r3, r3, #7
 8004ea0:	623b      	str	r3, [r7, #32]
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	2b7f      	cmp	r3, #127	@ 0x7f
 8004ea6:	d8f0      	bhi.n	8004e8a <SEGGER_SYSVIEW_RecordU32x3+0xa2>
 8004ea8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eaa:	1c5a      	adds	r2, r3, #1
 8004eac:	627a      	str	r2, [r7, #36]	@ 0x24
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	b2d2      	uxtb	r2, r2
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb6:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004eb8:	68fa      	ldr	r2, [r7, #12]
 8004eba:	6979      	ldr	r1, [r7, #20]
 8004ebc:	69b8      	ldr	r0, [r7, #24]
 8004ebe:	f7ff fdf9 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	f383 8811 	msr	BASEPRI, r3
}
 8004ec8:	bf00      	nop
 8004eca:	3738      	adds	r7, #56	@ 0x38
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}
 8004ed0:	2004b7ac 	.word	0x2004b7ac

08004ed4 <SEGGER_SYSVIEW_RecordU32x4>:
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*    Para2   - The 32-bit parameter encoded to SystemView packet payload.
*    Para3   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x4(unsigned int EventID, U32 Para0, U32 Para1, U32 Para2, U32 Para3) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b090      	sub	sp, #64	@ 0x40
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 8004ee2:	f3ef 8311 	mrs	r3, BASEPRI
 8004ee6:	f04f 0120 	mov.w	r1, #32
 8004eea:	f381 8811 	msr	BASEPRI, r1
 8004eee:	61fb      	str	r3, [r7, #28]
 8004ef0:	4840      	ldr	r0, [pc, #256]	@ (8004ff4 <SEGGER_SYSVIEW_RecordU32x4+0x120>)
 8004ef2:	f7ff fcf0 	bl	80048d6 <_PreparePacket>
 8004ef6:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 8004ef8:	69bb      	ldr	r3, [r7, #24]
 8004efa:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f04:	e00b      	b.n	8004f1e <SEGGER_SYSVIEW_RecordU32x4+0x4a>
 8004f06:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f08:	b2da      	uxtb	r2, r3
 8004f0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f0c:	1c59      	adds	r1, r3, #1
 8004f0e:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8004f10:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f14:	b2d2      	uxtb	r2, r2
 8004f16:	701a      	strb	r2, [r3, #0]
 8004f18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1a:	09db      	lsrs	r3, r3, #7
 8004f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f20:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f22:	d8f0      	bhi.n	8004f06 <SEGGER_SYSVIEW_RecordU32x4+0x32>
 8004f24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f26:	1c5a      	adds	r2, r3, #1
 8004f28:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004f2a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004f2c:	b2d2      	uxtb	r2, r2
 8004f2e:	701a      	strb	r2, [r3, #0]
 8004f30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f32:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f3c:	e00b      	b.n	8004f56 <SEGGER_SYSVIEW_RecordU32x4+0x82>
 8004f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f40:	b2da      	uxtb	r2, r3
 8004f42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f44:	1c59      	adds	r1, r3, #1
 8004f46:	6379      	str	r1, [r7, #52]	@ 0x34
 8004f48:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f4c:	b2d2      	uxtb	r2, r2
 8004f4e:	701a      	strb	r2, [r3, #0]
 8004f50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f52:	09db      	lsrs	r3, r3, #7
 8004f54:	633b      	str	r3, [r7, #48]	@ 0x30
 8004f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f58:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f5a:	d8f0      	bhi.n	8004f3e <SEGGER_SYSVIEW_RecordU32x4+0x6a>
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	1c5a      	adds	r2, r3, #1
 8004f60:	637a      	str	r2, [r7, #52]	@ 0x34
 8004f62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f64:	b2d2      	uxtb	r2, r2
 8004f66:	701a      	strb	r2, [r3, #0]
 8004f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f6a:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para2);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f74:	e00b      	b.n	8004f8e <SEGGER_SYSVIEW_RecordU32x4+0xba>
 8004f76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f7c:	1c59      	adds	r1, r3, #1
 8004f7e:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8004f80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004f84:	b2d2      	uxtb	r2, r2
 8004f86:	701a      	strb	r2, [r3, #0]
 8004f88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f8a:	09db      	lsrs	r3, r3, #7
 8004f8c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f90:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f92:	d8f0      	bhi.n	8004f76 <SEGGER_SYSVIEW_RecordU32x4+0xa2>
 8004f94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f96:	1c5a      	adds	r2, r3, #1
 8004f98:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004f9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f9c:	b2d2      	uxtb	r2, r2
 8004f9e:	701a      	strb	r2, [r3, #0]
 8004fa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004fa2:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para3);
 8004fa4:	697b      	ldr	r3, [r7, #20]
 8004fa6:	627b      	str	r3, [r7, #36]	@ 0x24
 8004fa8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004faa:	623b      	str	r3, [r7, #32]
 8004fac:	e00b      	b.n	8004fc6 <SEGGER_SYSVIEW_RecordU32x4+0xf2>
 8004fae:	6a3b      	ldr	r3, [r7, #32]
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fb4:	1c59      	adds	r1, r3, #1
 8004fb6:	6279      	str	r1, [r7, #36]	@ 0x24
 8004fb8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8004fbc:	b2d2      	uxtb	r2, r2
 8004fbe:	701a      	strb	r2, [r3, #0]
 8004fc0:	6a3b      	ldr	r3, [r7, #32]
 8004fc2:	09db      	lsrs	r3, r3, #7
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	6a3b      	ldr	r3, [r7, #32]
 8004fc8:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fca:	d8f0      	bhi.n	8004fae <SEGGER_SYSVIEW_RecordU32x4+0xda>
 8004fcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fce:	1c5a      	adds	r2, r3, #1
 8004fd0:	627a      	str	r2, [r7, #36]	@ 0x24
 8004fd2:	6a3a      	ldr	r2, [r7, #32]
 8004fd4:	b2d2      	uxtb	r2, r2
 8004fd6:	701a      	strb	r2, [r3, #0]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fda:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 8004fdc:	68fa      	ldr	r2, [r7, #12]
 8004fde:	6979      	ldr	r1, [r7, #20]
 8004fe0:	69b8      	ldr	r0, [r7, #24]
 8004fe2:	f7ff fd67 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	f383 8811 	msr	BASEPRI, r3
}
 8004fec:	bf00      	nop
 8004fee:	3740      	adds	r7, #64	@ 0x40
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	2004b7ac 	.word	0x2004b7ac

08004ff8 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b08c      	sub	sp, #48	@ 0x30
 8004ffc:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 8004ffe:	4b58      	ldr	r3, [pc, #352]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 8005000:	2201      	movs	r2, #1
 8005002:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 8005004:	f3ef 8311 	mrs	r3, BASEPRI
 8005008:	f04f 0120 	mov.w	r1, #32
 800500c:	f381 8811 	msr	BASEPRI, r1
 8005010:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 8005012:	4b53      	ldr	r3, [pc, #332]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 8005014:	785b      	ldrb	r3, [r3, #1]
 8005016:	220a      	movs	r2, #10
 8005018:	4952      	ldr	r1, [pc, #328]	@ (8005164 <SEGGER_SYSVIEW_Start+0x16c>)
 800501a:	4618      	mov	r0, r3
 800501c:	f7fb f900 	bl	8000220 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 8005026:	200a      	movs	r0, #10
 8005028:	f7ff fe2a 	bl	8004c80 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800502c:	f3ef 8311 	mrs	r3, BASEPRI
 8005030:	f04f 0120 	mov.w	r1, #32
 8005034:	f381 8811 	msr	BASEPRI, r1
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	484b      	ldr	r0, [pc, #300]	@ (8005168 <SEGGER_SYSVIEW_Start+0x170>)
 800503c:	f7ff fc4b 	bl	80048d6 <_PreparePacket>
 8005040:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800504a:	4b45      	ldr	r3, [pc, #276]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005050:	e00b      	b.n	800506a <SEGGER_SYSVIEW_Start+0x72>
 8005052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005054:	b2da      	uxtb	r2, r3
 8005056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005058:	1c59      	adds	r1, r3, #1
 800505a:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800505c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005060:	b2d2      	uxtb	r2, r2
 8005062:	701a      	strb	r2, [r3, #0]
 8005064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005066:	09db      	lsrs	r3, r3, #7
 8005068:	62bb      	str	r3, [r7, #40]	@ 0x28
 800506a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800506c:	2b7f      	cmp	r3, #127	@ 0x7f
 800506e:	d8f0      	bhi.n	8005052 <SEGGER_SYSVIEW_Start+0x5a>
 8005070:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005076:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	701a      	strb	r2, [r3, #0]
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005080:	683b      	ldr	r3, [r7, #0]
 8005082:	627b      	str	r3, [r7, #36]	@ 0x24
 8005084:	4b36      	ldr	r3, [pc, #216]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	623b      	str	r3, [r7, #32]
 800508a:	e00b      	b.n	80050a4 <SEGGER_SYSVIEW_Start+0xac>
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	b2da      	uxtb	r2, r3
 8005090:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005092:	1c59      	adds	r1, r3, #1
 8005094:	6279      	str	r1, [r7, #36]	@ 0x24
 8005096:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800509a:	b2d2      	uxtb	r2, r2
 800509c:	701a      	strb	r2, [r3, #0]
 800509e:	6a3b      	ldr	r3, [r7, #32]
 80050a0:	09db      	lsrs	r3, r3, #7
 80050a2:	623b      	str	r3, [r7, #32]
 80050a4:	6a3b      	ldr	r3, [r7, #32]
 80050a6:	2b7f      	cmp	r3, #127	@ 0x7f
 80050a8:	d8f0      	bhi.n	800508c <SEGGER_SYSVIEW_Start+0x94>
 80050aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ac:	1c5a      	adds	r2, r3, #1
 80050ae:	627a      	str	r2, [r7, #36]	@ 0x24
 80050b0:	6a3a      	ldr	r2, [r7, #32]
 80050b2:	b2d2      	uxtb	r2, r2
 80050b4:	701a      	strb	r2, [r3, #0]
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	61fb      	str	r3, [r7, #28]
 80050be:	4b28      	ldr	r3, [pc, #160]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	61bb      	str	r3, [r7, #24]
 80050c4:	e00b      	b.n	80050de <SEGGER_SYSVIEW_Start+0xe6>
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	b2da      	uxtb	r2, r3
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	1c59      	adds	r1, r3, #1
 80050ce:	61f9      	str	r1, [r7, #28]
 80050d0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80050d4:	b2d2      	uxtb	r2, r2
 80050d6:	701a      	strb	r2, [r3, #0]
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	09db      	lsrs	r3, r3, #7
 80050dc:	61bb      	str	r3, [r7, #24]
 80050de:	69bb      	ldr	r3, [r7, #24]
 80050e0:	2b7f      	cmp	r3, #127	@ 0x7f
 80050e2:	d8f0      	bhi.n	80050c6 <SEGGER_SYSVIEW_Start+0xce>
 80050e4:	69fb      	ldr	r3, [r7, #28]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	61fa      	str	r2, [r7, #28]
 80050ea:	69ba      	ldr	r2, [r7, #24]
 80050ec:	b2d2      	uxtb	r2, r2
 80050ee:	701a      	strb	r2, [r3, #0]
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	2300      	movs	r3, #0
 80050fa:	613b      	str	r3, [r7, #16]
 80050fc:	e00b      	b.n	8005116 <SEGGER_SYSVIEW_Start+0x11e>
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	b2da      	uxtb	r2, r3
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1c59      	adds	r1, r3, #1
 8005106:	6179      	str	r1, [r7, #20]
 8005108:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800510c:	b2d2      	uxtb	r2, r2
 800510e:	701a      	strb	r2, [r3, #0]
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	09db      	lsrs	r3, r3, #7
 8005114:	613b      	str	r3, [r7, #16]
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	2b7f      	cmp	r3, #127	@ 0x7f
 800511a:	d8f0      	bhi.n	80050fe <SEGGER_SYSVIEW_Start+0x106>
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	1c5a      	adds	r2, r3, #1
 8005120:	617a      	str	r2, [r7, #20]
 8005122:	693a      	ldr	r2, [r7, #16]
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800512c:	2218      	movs	r2, #24
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	6878      	ldr	r0, [r7, #4]
 8005132:	f7ff fcbf 	bl	8004ab4 <_SendPacket>
      RECORD_END();
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800513c:	4b08      	ldr	r3, [pc, #32]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 800513e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	d002      	beq.n	800514a <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 8005144:	4b06      	ldr	r3, [pc, #24]	@ (8005160 <SEGGER_SYSVIEW_Start+0x168>)
 8005146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005148:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800514a:	f000 f9c7 	bl	80054dc <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800514e:	f000 f9b1 	bl	80054b4 <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 8005152:	f000 fbff 	bl	8005954 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 8005156:	bf00      	nop
 8005158:	3730      	adds	r7, #48	@ 0x30
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
 800515e:	bf00      	nop
 8005160:	2004b77c 	.word	0x2004b77c
 8005164:	08005c04 	.word	0x08005c04
 8005168:	2004b7ac 	.word	0x2004b7ac

0800516c <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	b082      	sub	sp, #8
 8005170:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005172:	f3ef 8311 	mrs	r3, BASEPRI
 8005176:	f04f 0120 	mov.w	r1, #32
 800517a:	f381 8811 	msr	BASEPRI, r1
 800517e:	607b      	str	r3, [r7, #4]
 8005180:	480b      	ldr	r0, [pc, #44]	@ (80051b0 <SEGGER_SYSVIEW_Stop+0x44>)
 8005182:	f7ff fba8 	bl	80048d6 <_PreparePacket>
 8005186:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 8005188:	4b0a      	ldr	r3, [pc, #40]	@ (80051b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800518a:	781b      	ldrb	r3, [r3, #0]
 800518c:	2b00      	cmp	r3, #0
 800518e:	d007      	beq.n	80051a0 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 8005190:	220b      	movs	r2, #11
 8005192:	6839      	ldr	r1, [r7, #0]
 8005194:	6838      	ldr	r0, [r7, #0]
 8005196:	f7ff fc8d 	bl	8004ab4 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800519a:	4b06      	ldr	r3, [pc, #24]	@ (80051b4 <SEGGER_SYSVIEW_Stop+0x48>)
 800519c:	2200      	movs	r2, #0
 800519e:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f383 8811 	msr	BASEPRI, r3
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	2004b7ac 	.word	0x2004b7ac
 80051b4:	2004b77c 	.word	0x2004b77c

080051b8 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b08c      	sub	sp, #48	@ 0x30
 80051bc:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 80051be:	f3ef 8311 	mrs	r3, BASEPRI
 80051c2:	f04f 0120 	mov.w	r1, #32
 80051c6:	f381 8811 	msr	BASEPRI, r1
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	4845      	ldr	r0, [pc, #276]	@ (80052e4 <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 80051ce:	f7ff fb82 	bl	80048d6 <_PreparePacket>
 80051d2:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051dc:	4b42      	ldr	r3, [pc, #264]	@ (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051e2:	e00b      	b.n	80051fc <SEGGER_SYSVIEW_GetSysDesc+0x44>
 80051e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e6:	b2da      	uxtb	r2, r3
 80051e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ea:	1c59      	adds	r1, r3, #1
 80051ec:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80051ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80051f2:	b2d2      	uxtb	r2, r2
 80051f4:	701a      	strb	r2, [r3, #0]
 80051f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051f8:	09db      	lsrs	r3, r3, #7
 80051fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8005200:	d8f0      	bhi.n	80051e4 <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 8005202:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005204:	1c5a      	adds	r2, r3, #1
 8005206:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005208:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]
 800520e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005210:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	627b      	str	r3, [r7, #36]	@ 0x24
 8005216:	4b34      	ldr	r3, [pc, #208]	@ (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	623b      	str	r3, [r7, #32]
 800521c:	e00b      	b.n	8005236 <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800521e:	6a3b      	ldr	r3, [r7, #32]
 8005220:	b2da      	uxtb	r2, r3
 8005222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005224:	1c59      	adds	r1, r3, #1
 8005226:	6279      	str	r1, [r7, #36]	@ 0x24
 8005228:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	701a      	strb	r2, [r3, #0]
 8005230:	6a3b      	ldr	r3, [r7, #32]
 8005232:	09db      	lsrs	r3, r3, #7
 8005234:	623b      	str	r3, [r7, #32]
 8005236:	6a3b      	ldr	r3, [r7, #32]
 8005238:	2b7f      	cmp	r3, #127	@ 0x7f
 800523a:	d8f0      	bhi.n	800521e <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800523c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800523e:	1c5a      	adds	r2, r3, #1
 8005240:	627a      	str	r2, [r7, #36]	@ 0x24
 8005242:	6a3a      	ldr	r2, [r7, #32]
 8005244:	b2d2      	uxtb	r2, r2
 8005246:	701a      	strb	r2, [r3, #0]
 8005248:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800524a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	61fb      	str	r3, [r7, #28]
 8005250:	4b25      	ldr	r3, [pc, #148]	@ (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	e00b      	b.n	8005270 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 8005258:	69bb      	ldr	r3, [r7, #24]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	1c59      	adds	r1, r3, #1
 8005260:	61f9      	str	r1, [r7, #28]
 8005262:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005266:	b2d2      	uxtb	r2, r2
 8005268:	701a      	strb	r2, [r3, #0]
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	09db      	lsrs	r3, r3, #7
 800526e:	61bb      	str	r3, [r7, #24]
 8005270:	69bb      	ldr	r3, [r7, #24]
 8005272:	2b7f      	cmp	r3, #127	@ 0x7f
 8005274:	d8f0      	bhi.n	8005258 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 8005276:	69fb      	ldr	r3, [r7, #28]
 8005278:	1c5a      	adds	r2, r3, #1
 800527a:	61fa      	str	r2, [r7, #28]
 800527c:	69ba      	ldr	r2, [r7, #24]
 800527e:	b2d2      	uxtb	r2, r2
 8005280:	701a      	strb	r2, [r3, #0]
 8005282:	69fb      	ldr	r3, [r7, #28]
 8005284:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	617b      	str	r3, [r7, #20]
 800528a:	2300      	movs	r3, #0
 800528c:	613b      	str	r3, [r7, #16]
 800528e:	e00b      	b.n	80052a8 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	b2da      	uxtb	r2, r3
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	1c59      	adds	r1, r3, #1
 8005298:	6179      	str	r1, [r7, #20]
 800529a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800529e:	b2d2      	uxtb	r2, r2
 80052a0:	701a      	strb	r2, [r3, #0]
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	09db      	lsrs	r3, r3, #7
 80052a6:	613b      	str	r3, [r7, #16]
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	2b7f      	cmp	r3, #127	@ 0x7f
 80052ac:	d8f0      	bhi.n	8005290 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 80052ae:	697b      	ldr	r3, [r7, #20]
 80052b0:	1c5a      	adds	r2, r3, #1
 80052b2:	617a      	str	r2, [r7, #20]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 80052be:	2218      	movs	r2, #24
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	68b8      	ldr	r0, [r7, #8]
 80052c4:	f7ff fbf6 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 80052ce:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 80052d6:	4b04      	ldr	r3, [pc, #16]	@ (80052e8 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 80052d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052da:	4798      	blx	r3
  }
}
 80052dc:	bf00      	nop
 80052de:	3730      	adds	r7, #48	@ 0x30
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	2004b7ac 	.word	0x2004b7ac
 80052e8:	2004b77c 	.word	0x2004b77c

080052ec <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b092      	sub	sp, #72	@ 0x48
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 80052f4:	f3ef 8311 	mrs	r3, BASEPRI
 80052f8:	f04f 0120 	mov.w	r1, #32
 80052fc:	f381 8811 	msr	BASEPRI, r1
 8005300:	617b      	str	r3, [r7, #20]
 8005302:	486a      	ldr	r0, [pc, #424]	@ (80054ac <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 8005304:	f7ff fae7 	bl	80048d6 <_PreparePacket>
 8005308:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	647b      	str	r3, [r7, #68]	@ 0x44
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681a      	ldr	r2, [r3, #0]
 8005316:	4b66      	ldr	r3, [pc, #408]	@ (80054b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	643b      	str	r3, [r7, #64]	@ 0x40
 800531e:	e00b      	b.n	8005338 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 8005320:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005322:	b2da      	uxtb	r2, r3
 8005324:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005326:	1c59      	adds	r1, r3, #1
 8005328:	6479      	str	r1, [r7, #68]	@ 0x44
 800532a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800532e:	b2d2      	uxtb	r2, r2
 8005330:	701a      	strb	r2, [r3, #0]
 8005332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005334:	09db      	lsrs	r3, r3, #7
 8005336:	643b      	str	r3, [r7, #64]	@ 0x40
 8005338:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800533a:	2b7f      	cmp	r3, #127	@ 0x7f
 800533c:	d8f0      	bhi.n	8005320 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800533e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005340:	1c5a      	adds	r2, r3, #1
 8005342:	647a      	str	r2, [r7, #68]	@ 0x44
 8005344:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005346:	b2d2      	uxtb	r2, r2
 8005348:	701a      	strb	r2, [r3, #0]
 800534a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800534c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005358:	e00b      	b.n	8005372 <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005360:	1c59      	adds	r1, r3, #1
 8005362:	63f9      	str	r1, [r7, #60]	@ 0x3c
 8005364:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005368:	b2d2      	uxtb	r2, r2
 800536a:	701a      	strb	r2, [r3, #0]
 800536c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800536e:	09db      	lsrs	r3, r3, #7
 8005370:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005374:	2b7f      	cmp	r3, #127	@ 0x7f
 8005376:	d8f0      	bhi.n	800535a <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 8005378:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800537a:	1c5a      	adds	r2, r3, #1
 800537c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800537e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005380:	b2d2      	uxtb	r2, r2
 8005382:	701a      	strb	r2, [r3, #0]
 8005384:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005386:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	4619      	mov	r1, r3
 8005390:	68f8      	ldr	r0, [r7, #12]
 8005392:	f7ff fa53 	bl	800483c <_EncodeStr>
 8005396:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 8005398:	2209      	movs	r2, #9
 800539a:	68f9      	ldr	r1, [r7, #12]
 800539c:	6938      	ldr	r0, [r7, #16]
 800539e:	f7ff fb89 	bl	8004ab4 <_SendPacket>
  //
  pPayload = pPayloadStart;
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	4b40      	ldr	r3, [pc, #256]	@ (80054b0 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80053b6:	e00b      	b.n	80053d0 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 80053b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ba:	b2da      	uxtb	r2, r3
 80053bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053be:	1c59      	adds	r1, r3, #1
 80053c0:	6379      	str	r1, [r7, #52]	@ 0x34
 80053c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]
 80053ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053cc:	09db      	lsrs	r3, r3, #7
 80053ce:	633b      	str	r3, [r7, #48]	@ 0x30
 80053d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80053d4:	d8f0      	bhi.n	80053b8 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 80053d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053d8:	1c5a      	adds	r2, r3, #1
 80053da:	637a      	str	r2, [r7, #52]	@ 0x34
 80053dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80053de:	b2d2      	uxtb	r2, r2
 80053e0:	701a      	strb	r2, [r3, #0]
 80053e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053e4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	68db      	ldr	r3, [r3, #12]
 80053ee:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053f0:	e00b      	b.n	800540a <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 80053f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f8:	1c59      	adds	r1, r3, #1
 80053fa:	62f9      	str	r1, [r7, #44]	@ 0x2c
 80053fc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005400:	b2d2      	uxtb	r2, r2
 8005402:	701a      	strb	r2, [r3, #0]
 8005404:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005406:	09db      	lsrs	r3, r3, #7
 8005408:	62bb      	str	r3, [r7, #40]	@ 0x28
 800540a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800540c:	2b7f      	cmp	r3, #127	@ 0x7f
 800540e:	d8f0      	bhi.n	80053f2 <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 8005410:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005412:	1c5a      	adds	r2, r3, #1
 8005414:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005416:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]
 800541c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800541e:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	627b      	str	r3, [r7, #36]	@ 0x24
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	691b      	ldr	r3, [r3, #16]
 8005428:	623b      	str	r3, [r7, #32]
 800542a:	e00b      	b.n	8005444 <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800542c:	6a3b      	ldr	r3, [r7, #32]
 800542e:	b2da      	uxtb	r2, r3
 8005430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005432:	1c59      	adds	r1, r3, #1
 8005434:	6279      	str	r1, [r7, #36]	@ 0x24
 8005436:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800543a:	b2d2      	uxtb	r2, r2
 800543c:	701a      	strb	r2, [r3, #0]
 800543e:	6a3b      	ldr	r3, [r7, #32]
 8005440:	09db      	lsrs	r3, r3, #7
 8005442:	623b      	str	r3, [r7, #32]
 8005444:	6a3b      	ldr	r3, [r7, #32]
 8005446:	2b7f      	cmp	r3, #127	@ 0x7f
 8005448:	d8f0      	bhi.n	800542c <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800544a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800544c:	1c5a      	adds	r2, r3, #1
 800544e:	627a      	str	r2, [r7, #36]	@ 0x24
 8005450:	6a3a      	ldr	r2, [r7, #32]
 8005452:	b2d2      	uxtb	r2, r2
 8005454:	701a      	strb	r2, [r3, #0]
 8005456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005458:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	61fb      	str	r3, [r7, #28]
 800545e:	2300      	movs	r3, #0
 8005460:	61bb      	str	r3, [r7, #24]
 8005462:	e00b      	b.n	800547c <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 8005464:	69bb      	ldr	r3, [r7, #24]
 8005466:	b2da      	uxtb	r2, r3
 8005468:	69fb      	ldr	r3, [r7, #28]
 800546a:	1c59      	adds	r1, r3, #1
 800546c:	61f9      	str	r1, [r7, #28]
 800546e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005472:	b2d2      	uxtb	r2, r2
 8005474:	701a      	strb	r2, [r3, #0]
 8005476:	69bb      	ldr	r3, [r7, #24]
 8005478:	09db      	lsrs	r3, r3, #7
 800547a:	61bb      	str	r3, [r7, #24]
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005480:	d8f0      	bhi.n	8005464 <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 8005482:	69fb      	ldr	r3, [r7, #28]
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	61fa      	str	r2, [r7, #28]
 8005488:	69ba      	ldr	r2, [r7, #24]
 800548a:	b2d2      	uxtb	r2, r2
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	69fb      	ldr	r3, [r7, #28]
 8005490:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 8005492:	2215      	movs	r2, #21
 8005494:	68f9      	ldr	r1, [r7, #12]
 8005496:	6938      	ldr	r0, [r7, #16]
 8005498:	f7ff fb0c 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f383 8811 	msr	BASEPRI, r3
}
 80054a2:	bf00      	nop
 80054a4:	3748      	adds	r7, #72	@ 0x48
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	2004b7ac 	.word	0x2004b7ac
 80054b0:	2004b77c 	.word	0x2004b77c

080054b4 <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 80054b4:	b580      	push	{r7, lr}
 80054b6:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 80054b8:	4b07      	ldr	r3, [pc, #28]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d008      	beq.n	80054d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
 80054c0:	4b05      	ldr	r3, [pc, #20]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054c2:	6a1b      	ldr	r3, [r3, #32]
 80054c4:	685b      	ldr	r3, [r3, #4]
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d003      	beq.n	80054d2 <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 80054ca:	4b03      	ldr	r3, [pc, #12]	@ (80054d8 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 80054cc:	6a1b      	ldr	r3, [r3, #32]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	4798      	blx	r3
  }
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	2004b77c 	.word	0x2004b77c

080054dc <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 80054dc:	b590      	push	{r4, r7, lr}
 80054de:	b083      	sub	sp, #12
 80054e0:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 80054e2:	4b15      	ldr	r3, [pc, #84]	@ (8005538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01a      	beq.n	8005520 <SEGGER_SYSVIEW_RecordSystime+0x44>
 80054ea:	4b13      	ldr	r3, [pc, #76]	@ (8005538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054ec:	6a1b      	ldr	r3, [r3, #32]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d015      	beq.n	8005520 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 80054f4:	4b10      	ldr	r3, [pc, #64]	@ (8005538 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 80054f6:	6a1b      	ldr	r3, [r3, #32]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	4798      	blx	r3
 80054fc:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005500:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 8005502:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	000a      	movs	r2, r1
 8005510:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 8005512:	4613      	mov	r3, r2
 8005514:	461a      	mov	r2, r3
 8005516:	4621      	mov	r1, r4
 8005518:	200d      	movs	r0, #13
 800551a:	f7ff fc0b 	bl	8004d34 <SEGGER_SYSVIEW_RecordU32x2>
 800551e:	e006      	b.n	800552e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 8005520:	4b06      	ldr	r3, [pc, #24]	@ (800553c <SEGGER_SYSVIEW_RecordSystime+0x60>)
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	4619      	mov	r1, r3
 8005526:	200c      	movs	r0, #12
 8005528:	f7ff fbc8 	bl	8004cbc <SEGGER_SYSVIEW_RecordU32>
  }
}
 800552c:	bf00      	nop
 800552e:	bf00      	nop
 8005530:	370c      	adds	r7, #12
 8005532:	46bd      	mov	sp, r7
 8005534:	bd90      	pop	{r4, r7, pc}
 8005536:	bf00      	nop
 8005538:	2004b77c 	.word	0x2004b77c
 800553c:	e0001004 	.word	0xe0001004

08005540 <SEGGER_SYSVIEW_RecordEnterISR>:
*
*  Additional information
*    Example packets sent
*      02 0F 50              // ISR(15) Enter. Timestamp is 80 (0x50)
*/
void SEGGER_SYSVIEW_RecordEnterISR(void) {
 8005540:	b580      	push	{r7, lr}
 8005542:	b086      	sub	sp, #24
 8005544:	af00      	add	r7, sp, #0
  unsigned v;
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005546:	f3ef 8311 	mrs	r3, BASEPRI
 800554a:	f04f 0120 	mov.w	r1, #32
 800554e:	f381 8811 	msr	BASEPRI, r1
 8005552:	60fb      	str	r3, [r7, #12]
 8005554:	4819      	ldr	r0, [pc, #100]	@ (80055bc <SEGGER_SYSVIEW_RecordEnterISR+0x7c>)
 8005556:	f7ff f9be 	bl	80048d6 <_PreparePacket>
 800555a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	607b      	str	r3, [r7, #4]
  v = SEGGER_SYSVIEW_GET_INTERRUPT_ID();
 8005560:	4b17      	ldr	r3, [pc, #92]	@ (80055c0 <SEGGER_SYSVIEW_RecordEnterISR+0x80>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005568:	603b      	str	r3, [r7, #0]
  ENCODE_U32(pPayload, v);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	617b      	str	r3, [r7, #20]
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	613b      	str	r3, [r7, #16]
 8005572:	e00b      	b.n	800558c <SEGGER_SYSVIEW_RecordEnterISR+0x4c>
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	1c59      	adds	r1, r3, #1
 800557c:	6179      	str	r1, [r7, #20]
 800557e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005582:	b2d2      	uxtb	r2, r2
 8005584:	701a      	strb	r2, [r3, #0]
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	09db      	lsrs	r3, r3, #7
 800558a:	613b      	str	r3, [r7, #16]
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005590:	d8f0      	bhi.n	8005574 <SEGGER_SYSVIEW_RecordEnterISR+0x34>
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	1c5a      	adds	r2, r3, #1
 8005596:	617a      	str	r2, [r7, #20]
 8005598:	693a      	ldr	r2, [r7, #16]
 800559a:	b2d2      	uxtb	r2, r2
 800559c:	701a      	strb	r2, [r3, #0]
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_ISR_ENTER);
 80055a2:	2202      	movs	r2, #2
 80055a4:	6879      	ldr	r1, [r7, #4]
 80055a6:	68b8      	ldr	r0, [r7, #8]
 80055a8:	f7ff fa84 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	f383 8811 	msr	BASEPRI, r3
}
 80055b2:	bf00      	nop
 80055b4:	3718      	adds	r7, #24
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	bf00      	nop
 80055bc:	2004b7ac 	.word	0x2004b7ac
 80055c0:	e000ed04 	.word	0xe000ed04

080055c4 <SEGGER_SYSVIEW_RecordExitISR>:
*      03 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      03 20                // ISR Exit. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISR(void) {
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 80055ca:	f3ef 8311 	mrs	r3, BASEPRI
 80055ce:	f04f 0120 	mov.w	r1, #32
 80055d2:	f381 8811 	msr	BASEPRI, r1
 80055d6:	607b      	str	r3, [r7, #4]
 80055d8:	4807      	ldr	r0, [pc, #28]	@ (80055f8 <SEGGER_SYSVIEW_RecordExitISR+0x34>)
 80055da:	f7ff f97c 	bl	80048d6 <_PreparePacket>
 80055de:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_EXIT);
 80055e0:	2203      	movs	r2, #3
 80055e2:	6839      	ldr	r1, [r7, #0]
 80055e4:	6838      	ldr	r0, [r7, #0]
 80055e6:	f7ff fa65 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f383 8811 	msr	BASEPRI, r3
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	2004b7ac 	.word	0x2004b7ac

080055fc <SEGGER_SYSVIEW_RecordExitISRToScheduler>:
*      18 <TimeStamp>        // Max. packet len is 6
*
*    Example packets sent
*      18 20                // ISR Exit to Scheduler. Timestamp is 32 (0x20)
*/
void SEGGER_SYSVIEW_RecordExitISRToScheduler(void) {
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 8005602:	f3ef 8311 	mrs	r3, BASEPRI
 8005606:	f04f 0120 	mov.w	r1, #32
 800560a:	f381 8811 	msr	BASEPRI, r1
 800560e:	607b      	str	r3, [r7, #4]
 8005610:	4807      	ldr	r0, [pc, #28]	@ (8005630 <SEGGER_SYSVIEW_RecordExitISRToScheduler+0x34>)
 8005612:	f7ff f960 	bl	80048d6 <_PreparePacket>
 8005616:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_ISR_TO_SCHEDULER);
 8005618:	2212      	movs	r2, #18
 800561a:	6839      	ldr	r1, [r7, #0]
 800561c:	6838      	ldr	r0, [r7, #0]
 800561e:	f7ff fa49 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	f383 8811 	msr	BASEPRI, r3
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	2004b7ac 	.word	0x2004b7ac

08005634 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 8005634:	b580      	push	{r7, lr}
 8005636:	b082      	sub	sp, #8
 8005638:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800563a:	f3ef 8311 	mrs	r3, BASEPRI
 800563e:	f04f 0120 	mov.w	r1, #32
 8005642:	f381 8811 	msr	BASEPRI, r1
 8005646:	607b      	str	r3, [r7, #4]
 8005648:	4807      	ldr	r0, [pc, #28]	@ (8005668 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800564a:	f7ff f944 	bl	80048d6 <_PreparePacket>
 800564e:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 8005650:	2211      	movs	r2, #17
 8005652:	6839      	ldr	r1, [r7, #0]
 8005654:	6838      	ldr	r0, [r7, #0]
 8005656:	f7ff fa2d 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	f383 8811 	msr	BASEPRI, r3
}
 8005660:	bf00      	nop
 8005662:	3708      	adds	r7, #8
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	2004b7ac 	.word	0x2004b7ac

0800566c <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 8005674:	f3ef 8311 	mrs	r3, BASEPRI
 8005678:	f04f 0120 	mov.w	r1, #32
 800567c:	f381 8811 	msr	BASEPRI, r1
 8005680:	617b      	str	r3, [r7, #20]
 8005682:	4819      	ldr	r0, [pc, #100]	@ (80056e8 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 8005684:	f7ff f927 	bl	80048d6 <_PreparePacket>
 8005688:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800568e:	4b17      	ldr	r3, [pc, #92]	@ (80056ec <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 8005690:	691b      	ldr	r3, [r3, #16]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	1ad3      	subs	r3, r2, r3
 8005696:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	61bb      	str	r3, [r7, #24]
 80056a0:	e00b      	b.n	80056ba <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 80056a2:	69bb      	ldr	r3, [r7, #24]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	69fb      	ldr	r3, [r7, #28]
 80056a8:	1c59      	adds	r1, r3, #1
 80056aa:	61f9      	str	r1, [r7, #28]
 80056ac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80056b0:	b2d2      	uxtb	r2, r2
 80056b2:	701a      	strb	r2, [r3, #0]
 80056b4:	69bb      	ldr	r3, [r7, #24]
 80056b6:	09db      	lsrs	r3, r3, #7
 80056b8:	61bb      	str	r3, [r7, #24]
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80056be:	d8f0      	bhi.n	80056a2 <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 80056c0:	69fb      	ldr	r3, [r7, #28]
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	61fa      	str	r2, [r7, #28]
 80056c6:	69ba      	ldr	r2, [r7, #24]
 80056c8:	b2d2      	uxtb	r2, r2
 80056ca:	701a      	strb	r2, [r3, #0]
 80056cc:	69fb      	ldr	r3, [r7, #28]
 80056ce:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 80056d0:	2208      	movs	r2, #8
 80056d2:	68f9      	ldr	r1, [r7, #12]
 80056d4:	6938      	ldr	r0, [r7, #16]
 80056d6:	f7ff f9ed 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f383 8811 	msr	BASEPRI, r3
}
 80056e0:	bf00      	nop
 80056e2:	3720      	adds	r7, #32
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	2004b7ac 	.word	0x2004b7ac
 80056ec:	2004b77c 	.word	0x2004b77c

080056f0 <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 80056f8:	f3ef 8311 	mrs	r3, BASEPRI
 80056fc:	f04f 0120 	mov.w	r1, #32
 8005700:	f381 8811 	msr	BASEPRI, r1
 8005704:	617b      	str	r3, [r7, #20]
 8005706:	4819      	ldr	r0, [pc, #100]	@ (800576c <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 8005708:	f7ff f8e5 	bl	80048d6 <_PreparePacket>
 800570c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005712:	4b17      	ldr	r3, [pc, #92]	@ (8005770 <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 8005714:	691b      	ldr	r3, [r3, #16]
 8005716:	687a      	ldr	r2, [r7, #4]
 8005718:	1ad3      	subs	r3, r2, r3
 800571a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	61fb      	str	r3, [r7, #28]
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	61bb      	str	r3, [r7, #24]
 8005724:	e00b      	b.n	800573e <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 8005726:	69bb      	ldr	r3, [r7, #24]
 8005728:	b2da      	uxtb	r2, r3
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	1c59      	adds	r1, r3, #1
 800572e:	61f9      	str	r1, [r7, #28]
 8005730:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005734:	b2d2      	uxtb	r2, r2
 8005736:	701a      	strb	r2, [r3, #0]
 8005738:	69bb      	ldr	r3, [r7, #24]
 800573a:	09db      	lsrs	r3, r3, #7
 800573c:	61bb      	str	r3, [r7, #24]
 800573e:	69bb      	ldr	r3, [r7, #24]
 8005740:	2b7f      	cmp	r3, #127	@ 0x7f
 8005742:	d8f0      	bhi.n	8005726 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 8005744:	69fb      	ldr	r3, [r7, #28]
 8005746:	1c5a      	adds	r2, r3, #1
 8005748:	61fa      	str	r2, [r7, #28]
 800574a:	69ba      	ldr	r2, [r7, #24]
 800574c:	b2d2      	uxtb	r2, r2
 800574e:	701a      	strb	r2, [r3, #0]
 8005750:	69fb      	ldr	r3, [r7, #28]
 8005752:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 8005754:	2204      	movs	r2, #4
 8005756:	68f9      	ldr	r1, [r7, #12]
 8005758:	6938      	ldr	r0, [r7, #16]
 800575a:	f7ff f9ab 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 800575e:	697b      	ldr	r3, [r7, #20]
 8005760:	f383 8811 	msr	BASEPRI, r3
}
 8005764:	bf00      	nop
 8005766:	3720      	adds	r7, #32
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}
 800576c:	2004b7ac 	.word	0x2004b7ac
 8005770:	2004b77c 	.word	0x2004b77c

08005774 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 8005774:	b580      	push	{r7, lr}
 8005776:	b088      	sub	sp, #32
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800577c:	f3ef 8311 	mrs	r3, BASEPRI
 8005780:	f04f 0120 	mov.w	r1, #32
 8005784:	f381 8811 	msr	BASEPRI, r1
 8005788:	617b      	str	r3, [r7, #20]
 800578a:	4819      	ldr	r0, [pc, #100]	@ (80057f0 <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800578c:	f7ff f8a3 	bl	80048d6 <_PreparePacket>
 8005790:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 8005796:	4b17      	ldr	r3, [pc, #92]	@ (80057f4 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	61fb      	str	r3, [r7, #28]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	61bb      	str	r3, [r7, #24]
 80057a8:	e00b      	b.n	80057c2 <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 80057aa:	69bb      	ldr	r3, [r7, #24]
 80057ac:	b2da      	uxtb	r2, r3
 80057ae:	69fb      	ldr	r3, [r7, #28]
 80057b0:	1c59      	adds	r1, r3, #1
 80057b2:	61f9      	str	r1, [r7, #28]
 80057b4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80057b8:	b2d2      	uxtb	r2, r2
 80057ba:	701a      	strb	r2, [r3, #0]
 80057bc:	69bb      	ldr	r3, [r7, #24]
 80057be:	09db      	lsrs	r3, r3, #7
 80057c0:	61bb      	str	r3, [r7, #24]
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	2b7f      	cmp	r3, #127	@ 0x7f
 80057c6:	d8f0      	bhi.n	80057aa <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	1c5a      	adds	r2, r3, #1
 80057cc:	61fa      	str	r2, [r7, #28]
 80057ce:	69ba      	ldr	r2, [r7, #24]
 80057d0:	b2d2      	uxtb	r2, r2
 80057d2:	701a      	strb	r2, [r3, #0]
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 80057d8:	2206      	movs	r2, #6
 80057da:	68f9      	ldr	r1, [r7, #12]
 80057dc:	6938      	ldr	r0, [r7, #16]
 80057de:	f7ff f969 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	f383 8811 	msr	BASEPRI, r3
}
 80057e8:	bf00      	nop
 80057ea:	3720      	adds	r7, #32
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}
 80057f0:	2004b7ac 	.word	0x2004b7ac
 80057f4:	2004b77c 	.word	0x2004b77c

080057f8 <SEGGER_SYSVIEW_ShrinkId>:
*     SEGGER_SYSVIEW_ID_BASE: Lowest Id reported by the application.
*       (i.e. 0x20000000 when all Ids are an address in this RAM)
*     SEGGER_SYSVIEW_ID_SHIFT: Number of bits to shift the Id to
*       save bandwidth. (i.e. 2 when Ids are 4 byte aligned)
*/
U32 SEGGER_SYSVIEW_ShrinkId(U32 Id) {
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
  return SHRINK_ID(Id);
 8005800:	4b04      	ldr	r3, [pc, #16]	@ (8005814 <SEGGER_SYSVIEW_ShrinkId+0x1c>)
 8005802:	691b      	ldr	r3, [r3, #16]
 8005804:	687a      	ldr	r2, [r7, #4]
 8005806:	1ad3      	subs	r3, r2, r3
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr
 8005814:	2004b77c 	.word	0x2004b77c

08005818 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 8005818:	b580      	push	{r7, lr}
 800581a:	b08c      	sub	sp, #48	@ 0x30
 800581c:	af00      	add	r7, sp, #0
 800581e:	4603      	mov	r3, r0
 8005820:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 8005822:	4b3b      	ldr	r3, [pc, #236]	@ (8005910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06d      	beq.n	8005906 <SEGGER_SYSVIEW_SendModule+0xee>
    pModule = _pFirstModule;
 800582a:	4b39      	ldr	r3, [pc, #228]	@ (8005910 <SEGGER_SYSVIEW_SendModule+0xf8>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 8005830:	2300      	movs	r3, #0
 8005832:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005834:	e008      	b.n	8005848 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 8005836:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005838:	691b      	ldr	r3, [r3, #16]
 800583a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800583c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 8005842:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005844:	3301      	adds	r3, #1
 8005846:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005848:	79fb      	ldrb	r3, [r7, #7]
 800584a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800584c:	429a      	cmp	r2, r3
 800584e:	d3f2      	bcc.n	8005836 <SEGGER_SYSVIEW_SendModule+0x1e>
 8005850:	e000      	b.n	8005854 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 8005852:	bf00      	nop
      }
    }
    if (pModule != 0) {
 8005854:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005856:	2b00      	cmp	r3, #0
 8005858:	d055      	beq.n	8005906 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800585a:	f3ef 8311 	mrs	r3, BASEPRI
 800585e:	f04f 0120 	mov.w	r1, #32
 8005862:	f381 8811 	msr	BASEPRI, r1
 8005866:	617b      	str	r3, [r7, #20]
 8005868:	482a      	ldr	r0, [pc, #168]	@ (8005914 <SEGGER_SYSVIEW_SendModule+0xfc>)
 800586a:	f7ff f834 	bl	80048d6 <_PreparePacket>
 800586e:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 8005870:	693b      	ldr	r3, [r7, #16]
 8005872:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	627b      	str	r3, [r7, #36]	@ 0x24
 8005878:	79fb      	ldrb	r3, [r7, #7]
 800587a:	623b      	str	r3, [r7, #32]
 800587c:	e00b      	b.n	8005896 <SEGGER_SYSVIEW_SendModule+0x7e>
 800587e:	6a3b      	ldr	r3, [r7, #32]
 8005880:	b2da      	uxtb	r2, r3
 8005882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005884:	1c59      	adds	r1, r3, #1
 8005886:	6279      	str	r1, [r7, #36]	@ 0x24
 8005888:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800588c:	b2d2      	uxtb	r2, r2
 800588e:	701a      	strb	r2, [r3, #0]
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	09db      	lsrs	r3, r3, #7
 8005894:	623b      	str	r3, [r7, #32]
 8005896:	6a3b      	ldr	r3, [r7, #32]
 8005898:	2b7f      	cmp	r3, #127	@ 0x7f
 800589a:	d8f0      	bhi.n	800587e <SEGGER_SYSVIEW_SendModule+0x66>
 800589c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80058a2:	6a3a      	ldr	r2, [r7, #32]
 80058a4:	b2d2      	uxtb	r2, r2
 80058a6:	701a      	strb	r2, [r3, #0]
 80058a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058aa:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	61fb      	str	r3, [r7, #28]
 80058b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	61bb      	str	r3, [r7, #24]
 80058b6:	e00b      	b.n	80058d0 <SEGGER_SYSVIEW_SendModule+0xb8>
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	1c59      	adds	r1, r3, #1
 80058c0:	61f9      	str	r1, [r7, #28]
 80058c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 80058c6:	b2d2      	uxtb	r2, r2
 80058c8:	701a      	strb	r2, [r3, #0]
 80058ca:	69bb      	ldr	r3, [r7, #24]
 80058cc:	09db      	lsrs	r3, r3, #7
 80058ce:	61bb      	str	r3, [r7, #24]
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	2b7f      	cmp	r3, #127	@ 0x7f
 80058d4:	d8f0      	bhi.n	80058b8 <SEGGER_SYSVIEW_SendModule+0xa0>
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	1c5a      	adds	r2, r3, #1
 80058da:	61fa      	str	r2, [r7, #28]
 80058dc:	69ba      	ldr	r2, [r7, #24]
 80058de:	b2d2      	uxtb	r2, r2
 80058e0:	701a      	strb	r2, [r3, #0]
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80058e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2280      	movs	r2, #128	@ 0x80
 80058ec:	4619      	mov	r1, r3
 80058ee:	68f8      	ldr	r0, [r7, #12]
 80058f0:	f7fe ffa4 	bl	800483c <_EncodeStr>
 80058f4:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 80058f6:	2216      	movs	r2, #22
 80058f8:	68f9      	ldr	r1, [r7, #12]
 80058fa:	6938      	ldr	r0, [r7, #16]
 80058fc:	f7ff f8da 	bl	8004ab4 <_SendPacket>
      RECORD_END();
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f383 8811 	msr	BASEPRI, r3
    }
  }
}
 8005906:	bf00      	nop
 8005908:	3730      	adds	r7, #48	@ 0x30
 800590a:	46bd      	mov	sp, r7
 800590c:	bd80      	pop	{r7, pc}
 800590e:	bf00      	nop
 8005910:	2004b7a4 	.word	0x2004b7a4
 8005914:	2004b7ac 	.word	0x2004b7ac

08005918 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 8005918:	b580      	push	{r7, lr}
 800591a:	b082      	sub	sp, #8
 800591c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800591e:	4b0c      	ldr	r3, [pc, #48]	@ (8005950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d00f      	beq.n	8005946 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 8005926:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	2b00      	cmp	r3, #0
 8005932:	d002      	beq.n	800593a <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	691b      	ldr	r3, [r3, #16]
 800593e:	607b      	str	r3, [r7, #4]
    } while (pModule);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f2      	bne.n	800592c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	2004b7a4 	.word	0x2004b7a4

08005954 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 8005954:	b580      	push	{r7, lr}
 8005956:	b086      	sub	sp, #24
 8005958:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800595a:	f3ef 8311 	mrs	r3, BASEPRI
 800595e:	f04f 0120 	mov.w	r1, #32
 8005962:	f381 8811 	msr	BASEPRI, r1
 8005966:	60fb      	str	r3, [r7, #12]
 8005968:	4817      	ldr	r0, [pc, #92]	@ (80059c8 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800596a:	f7fe ffb4 	bl	80048d6 <_PreparePacket>
 800596e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	617b      	str	r3, [r7, #20]
 8005978:	4b14      	ldr	r3, [pc, #80]	@ (80059cc <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800597a:	781b      	ldrb	r3, [r3, #0]
 800597c:	613b      	str	r3, [r7, #16]
 800597e:	e00b      	b.n	8005998 <SEGGER_SYSVIEW_SendNumModules+0x44>
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	b2da      	uxtb	r2, r3
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1c59      	adds	r1, r3, #1
 8005988:	6179      	str	r1, [r7, #20]
 800598a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800598e:	b2d2      	uxtb	r2, r2
 8005990:	701a      	strb	r2, [r3, #0]
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	09db      	lsrs	r3, r3, #7
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	2b7f      	cmp	r3, #127	@ 0x7f
 800599c:	d8f0      	bhi.n	8005980 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	617a      	str	r2, [r7, #20]
 80059a4:	693a      	ldr	r2, [r7, #16]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 80059ae:	221b      	movs	r2, #27
 80059b0:	6879      	ldr	r1, [r7, #4]
 80059b2:	68b8      	ldr	r0, [r7, #8]
 80059b4:	f7ff f87e 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f383 8811 	msr	BASEPRI, r3
}
 80059be:	bf00      	nop
 80059c0:	3718      	adds	r7, #24
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	2004b7ac 	.word	0x2004b7ac
 80059cc:	2004b7a8 	.word	0x2004b7a8

080059d0 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b08a      	sub	sp, #40	@ 0x28
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059d8:	f3ef 8311 	mrs	r3, BASEPRI
 80059dc:	f04f 0120 	mov.w	r1, #32
 80059e0:	f381 8811 	msr	BASEPRI, r1
 80059e4:	617b      	str	r3, [r7, #20]
 80059e6:	4827      	ldr	r0, [pc, #156]	@ (8005a84 <SEGGER_SYSVIEW_Warn+0xb4>)
 80059e8:	f7fe ff75 	bl	80048d6 <_PreparePacket>
 80059ec:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 80059ee:	2280      	movs	r2, #128	@ 0x80
 80059f0:	6879      	ldr	r1, [r7, #4]
 80059f2:	6938      	ldr	r0, [r7, #16]
 80059f4:	f7fe ff22 	bl	800483c <_EncodeStr>
 80059f8:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80059fe:	2301      	movs	r3, #1
 8005a00:	623b      	str	r3, [r7, #32]
 8005a02:	e00b      	b.n	8005a1c <SEGGER_SYSVIEW_Warn+0x4c>
 8005a04:	6a3b      	ldr	r3, [r7, #32]
 8005a06:	b2da      	uxtb	r2, r3
 8005a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a0a:	1c59      	adds	r1, r3, #1
 8005a0c:	6279      	str	r1, [r7, #36]	@ 0x24
 8005a0e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]
 8005a16:	6a3b      	ldr	r3, [r7, #32]
 8005a18:	09db      	lsrs	r3, r3, #7
 8005a1a:	623b      	str	r3, [r7, #32]
 8005a1c:	6a3b      	ldr	r3, [r7, #32]
 8005a1e:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a20:	d8f0      	bhi.n	8005a04 <SEGGER_SYSVIEW_Warn+0x34>
 8005a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a24:	1c5a      	adds	r2, r3, #1
 8005a26:	627a      	str	r2, [r7, #36]	@ 0x24
 8005a28:	6a3a      	ldr	r2, [r7, #32]
 8005a2a:	b2d2      	uxtb	r2, r2
 8005a2c:	701a      	strb	r2, [r3, #0]
 8005a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a30:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	61fb      	str	r3, [r7, #28]
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
 8005a3a:	e00b      	b.n	8005a54 <SEGGER_SYSVIEW_Warn+0x84>
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	1c59      	adds	r1, r3, #1
 8005a44:	61f9      	str	r1, [r7, #28]
 8005a46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8005a4a:	b2d2      	uxtb	r2, r2
 8005a4c:	701a      	strb	r2, [r3, #0]
 8005a4e:	69bb      	ldr	r3, [r7, #24]
 8005a50:	09db      	lsrs	r3, r3, #7
 8005a52:	61bb      	str	r3, [r7, #24]
 8005a54:	69bb      	ldr	r3, [r7, #24]
 8005a56:	2b7f      	cmp	r3, #127	@ 0x7f
 8005a58:	d8f0      	bhi.n	8005a3c <SEGGER_SYSVIEW_Warn+0x6c>
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	1c5a      	adds	r2, r3, #1
 8005a5e:	61fa      	str	r2, [r7, #28]
 8005a60:	69ba      	ldr	r2, [r7, #24]
 8005a62:	b2d2      	uxtb	r2, r2
 8005a64:	701a      	strb	r2, [r3, #0]
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 8005a6a:	221a      	movs	r2, #26
 8005a6c:	68f9      	ldr	r1, [r7, #12]
 8005a6e:	6938      	ldr	r0, [r7, #16]
 8005a70:	f7ff f820 	bl	8004ab4 <_SendPacket>
  RECORD_END();
 8005a74:	697b      	ldr	r3, [r7, #20]
 8005a76:	f383 8811 	msr	BASEPRI, r3
}
 8005a7a:	bf00      	nop
 8005a7c:	3728      	adds	r7, #40	@ 0x28
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	2004b7ac 	.word	0x2004b7ac

08005a88 <memcmp>:
 8005a88:	b510      	push	{r4, lr}
 8005a8a:	3901      	subs	r1, #1
 8005a8c:	4402      	add	r2, r0
 8005a8e:	4290      	cmp	r0, r2
 8005a90:	d101      	bne.n	8005a96 <memcmp+0xe>
 8005a92:	2000      	movs	r0, #0
 8005a94:	e005      	b.n	8005aa2 <memcmp+0x1a>
 8005a96:	7803      	ldrb	r3, [r0, #0]
 8005a98:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005a9c:	42a3      	cmp	r3, r4
 8005a9e:	d001      	beq.n	8005aa4 <memcmp+0x1c>
 8005aa0:	1b18      	subs	r0, r3, r4
 8005aa2:	bd10      	pop	{r4, pc}
 8005aa4:	3001      	adds	r0, #1
 8005aa6:	e7f2      	b.n	8005a8e <memcmp+0x6>

08005aa8 <memset>:
 8005aa8:	4402      	add	r2, r0
 8005aaa:	4603      	mov	r3, r0
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d100      	bne.n	8005ab2 <memset+0xa>
 8005ab0:	4770      	bx	lr
 8005ab2:	f803 1b01 	strb.w	r1, [r3], #1
 8005ab6:	e7f9      	b.n	8005aac <memset+0x4>

08005ab8 <__libc_init_array>:
 8005ab8:	b570      	push	{r4, r5, r6, lr}
 8005aba:	4d0d      	ldr	r5, [pc, #52]	@ (8005af0 <__libc_init_array+0x38>)
 8005abc:	4c0d      	ldr	r4, [pc, #52]	@ (8005af4 <__libc_init_array+0x3c>)
 8005abe:	1b64      	subs	r4, r4, r5
 8005ac0:	10a4      	asrs	r4, r4, #2
 8005ac2:	2600      	movs	r6, #0
 8005ac4:	42a6      	cmp	r6, r4
 8005ac6:	d109      	bne.n	8005adc <__libc_init_array+0x24>
 8005ac8:	4d0b      	ldr	r5, [pc, #44]	@ (8005af8 <__libc_init_array+0x40>)
 8005aca:	4c0c      	ldr	r4, [pc, #48]	@ (8005afc <__libc_init_array+0x44>)
 8005acc:	f000 f826 	bl	8005b1c <_init>
 8005ad0:	1b64      	subs	r4, r4, r5
 8005ad2:	10a4      	asrs	r4, r4, #2
 8005ad4:	2600      	movs	r6, #0
 8005ad6:	42a6      	cmp	r6, r4
 8005ad8:	d105      	bne.n	8005ae6 <__libc_init_array+0x2e>
 8005ada:	bd70      	pop	{r4, r5, r6, pc}
 8005adc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ae0:	4798      	blx	r3
 8005ae2:	3601      	adds	r6, #1
 8005ae4:	e7ee      	b.n	8005ac4 <__libc_init_array+0xc>
 8005ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aea:	4798      	blx	r3
 8005aec:	3601      	adds	r6, #1
 8005aee:	e7f2      	b.n	8005ad6 <__libc_init_array+0x1e>
 8005af0:	08005c18 	.word	0x08005c18
 8005af4:	08005c18 	.word	0x08005c18
 8005af8:	08005c18 	.word	0x08005c18
 8005afc:	08005c1c 	.word	0x08005c1c

08005b00 <memcpy>:
 8005b00:	440a      	add	r2, r1
 8005b02:	4291      	cmp	r1, r2
 8005b04:	f100 33ff 	add.w	r3, r0, #4294967295
 8005b08:	d100      	bne.n	8005b0c <memcpy+0xc>
 8005b0a:	4770      	bx	lr
 8005b0c:	b510      	push	{r4, lr}
 8005b0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005b16:	4291      	cmp	r1, r2
 8005b18:	d1f9      	bne.n	8005b0e <memcpy+0xe>
 8005b1a:	bd10      	pop	{r4, pc}

08005b1c <_init>:
 8005b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b1e:	bf00      	nop
 8005b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b22:	bc08      	pop	{r3}
 8005b24:	469e      	mov	lr, r3
 8005b26:	4770      	bx	lr

08005b28 <_fini>:
 8005b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b2a:	bf00      	nop
 8005b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b2e:	bc08      	pop	{r3}
 8005b30:	469e      	mov	lr, r3
 8005b32:	4770      	bx	lr


STM32likeArduino.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000184  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000018c  08000184  08000184  00001184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000310  08000318  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000310  08000310  00001318  2**0
                  CONTENTS
  4 .ARM          00000000  08000310  08000310  00001318  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000310  08000318  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000310  08000310  00001310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000314  08000314  00001314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000318  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000318  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00001318  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003f1  00000000  00000000  00001341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000000cc  00000000  00000000  00001732  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000048  00000000  00000000  00001800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000002d  00000000  00000000  00001848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00000f6e  00000000  00000000  00001875  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000004ac  00000000  00000000  000027e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d3d  00000000  00000000  00002c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000069cc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000058  00000000  00000000  00006a10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000184 <__do_global_dtors_aux>:
 8000184:	b510      	push	{r4, lr}
 8000186:	4c05      	ldr	r4, [pc, #20]	@ (800019c <__do_global_dtors_aux+0x18>)
 8000188:	7823      	ldrb	r3, [r4, #0]
 800018a:	b933      	cbnz	r3, 800019a <__do_global_dtors_aux+0x16>
 800018c:	4b04      	ldr	r3, [pc, #16]	@ (80001a0 <__do_global_dtors_aux+0x1c>)
 800018e:	b113      	cbz	r3, 8000196 <__do_global_dtors_aux+0x12>
 8000190:	4804      	ldr	r0, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x20>)
 8000192:	f3af 8000 	nop.w
 8000196:	2301      	movs	r3, #1
 8000198:	7023      	strb	r3, [r4, #0]
 800019a:	bd10      	pop	{r4, pc}
 800019c:	20000000 	.word	0x20000000
 80001a0:	00000000 	.word	0x00000000
 80001a4:	080002f8 	.word	0x080002f8

080001a8 <frame_dummy>:
 80001a8:	b508      	push	{r3, lr}
 80001aa:	4b03      	ldr	r3, [pc, #12]	@ (80001b8 <frame_dummy+0x10>)
 80001ac:	b11b      	cbz	r3, 80001b6 <frame_dummy+0xe>
 80001ae:	4903      	ldr	r1, [pc, #12]	@ (80001bc <frame_dummy+0x14>)
 80001b0:	4803      	ldr	r0, [pc, #12]	@ (80001c0 <frame_dummy+0x18>)
 80001b2:	f3af 8000 	nop.w
 80001b6:	bd08      	pop	{r3, pc}
 80001b8:	00000000 	.word	0x00000000
 80001bc:	20000004 	.word	0x20000004
 80001c0:	080002f8 	.word	0x080002f8

080001c4 <main>:
#include <stdint.h>
#include "main.h"

int main(void)
{
 80001c4:	b480      	push	{r7}
 80001c6:	b087      	sub	sp, #28
 80001c8:	af00      	add	r7, sp, #0
    /*volatile uint32_t *pClkCtrlReg = (uint32_t*)0x40023830;
    volatile uint32_t *pPortBModeReg = (uint32_t*)0x40020400;
    volatile uint32_t *pPortAModeReg = (uint32_t*)0x40020000;
    volatile uint32_t *pPortBOutReg = (uint32_t*)0x40020414;
    volatile uint32_t *pPortAInReg = (uint32_t*)0x40020010;*/
	RCC_AHB1ENR_t volatile *const pClkCtrlReg   = (RCC_AHB1ENR_t*) 0x40023830;
 80001ca:	4b1f      	ldr	r3, [pc, #124]	@ (8000248 <main+0x84>)
 80001cc:	617b      	str	r3, [r7, #20]
	GPIOx_MODE_t  volatile *const pPortAModeReg = (GPIOx_MODE_t*) 0x40020000;
 80001ce:	4b1f      	ldr	r3, [pc, #124]	@ (800024c <main+0x88>)
 80001d0:	613b      	str	r3, [r7, #16]
	GPIOx_MODE_t  volatile *const pPortBModeReg = (GPIOx_MODE_t*) 0x40020400;
 80001d2:	4b1f      	ldr	r3, [pc, #124]	@ (8000250 <main+0x8c>)
 80001d4:	60fb      	str	r3, [r7, #12]
	GPIOx_ODR_t   volatile *const pPortAInReg  = (GPIOx_ODR_t*) 0x40020010;
 80001d6:	4b1f      	ldr	r3, [pc, #124]	@ (8000254 <main+0x90>)
 80001d8:	60bb      	str	r3, [r7, #8]
	GPIOx_ODR_t   volatile *const pPortBOutReg  = (GPIOx_ODR_t*) 0x40020414;
 80001da:	4b1f      	ldr	r3, [pc, #124]	@ (8000258 <main+0x94>)
 80001dc:	607b      	str	r3, [r7, #4]


    // Enable GPIOB clock
    //*pClkCtrlReg |= 0x00000002; // Set 1 and 0 bit to enable GPIOB and A clock
    //*pClkCtrlReg |= (3<<0);
	pClkCtrlReg->gpioa_en = 1;
 80001de:	697a      	ldr	r2, [r7, #20]
 80001e0:	6813      	ldr	r3, [r2, #0]
 80001e2:	f043 0301 	orr.w	r3, r3, #1
 80001e6:	6013      	str	r3, [r2, #0]
	pClkCtrlReg->gpiob_en = 1;
 80001e8:	697a      	ldr	r2, [r7, #20]
 80001ea:	6813      	ldr	r3, [r2, #0]
 80001ec:	f043 0302 	orr.w	r3, r3, #2
 80001f0:	6013      	str	r3, [r2, #0]
    // Configure PB7 as output
    //*pPortBModeReg &= 0xFFFF3FFF; // Clear bits 14 and 15
    //*pPortBModeReg &= ~(3<<14);
    //*pPortBModeReg |= 0x00004000; // Set bit 14 to make PB7 an output
    //*pPortBModeReg |= (1<<14);
    pPortBModeReg->pin_7 = 0;
 80001f2:	68fa      	ldr	r2, [r7, #12]
 80001f4:	6813      	ldr	r3, [r2, #0]
 80001f6:	f36f 338f 	bfc	r3, #14, #2
 80001fa:	6013      	str	r3, [r2, #0]
    pPortBModeReg->pin_7 = 1;
 80001fc:	68fa      	ldr	r2, [r7, #12]
 80001fe:	6813      	ldr	r3, [r2, #0]
 8000200:	2101      	movs	r1, #1
 8000202:	f361 338f 	bfi	r3, r1, #14, #2
 8000206:	6013      	str	r3, [r2, #0]

    // Configure PA0 as input
    //*pPortAModeReg &= 0xFFFFFF00; // Clear bits 0 and 1
    //*pPortAModeReg &= ~(3<<0);
    pPortAModeReg->pin_0 = 0;
 8000208:	693a      	ldr	r2, [r7, #16]
 800020a:	6813      	ldr	r3, [r2, #0]
 800020c:	f36f 0301 	bfc	r3, #0, #2
 8000210:	6013      	str	r3, [r2, #0]
    pPortAModeReg->pin_1 = 0;
 8000212:	693a      	ldr	r2, [r7, #16]
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f36f 0383 	bfc	r3, #2, #2
 800021a:	6013      	str	r3, [r2, #0]

    uint32_t pinStatus;

    while(1){
    	//pinStatus = (uint32_t)((*pPortAInReg>>3)&1);
    	pinStatus = (uint32_t)pPortAInReg->pin_3;
 800021c:	68bb      	ldr	r3, [r7, #8]
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8000224:	b2db      	uxtb	r3, r3
 8000226:	603b      	str	r3, [r7, #0]
    	if(pinStatus==1){
 8000228:	683b      	ldr	r3, [r7, #0]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d105      	bne.n	800023a <main+0x76>
    		// Set PB7 high
    		//*pPortBOutReg |= 0x00000080; // Set pin 7 high
    		//*pPortBOutReg |= (1<<7);
    		pPortBOutReg->pin_7 = 1;
 800022e:	687a      	ldr	r2, [r7, #4]
 8000230:	6813      	ldr	r3, [r2, #0]
 8000232:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000236:	6013      	str	r3, [r2, #0]
 8000238:	e7f0      	b.n	800021c <main+0x58>
    	}else{
    		//*pPortBOutReg &= ~(1<<7);
    		pPortBOutReg->pin_7 = 0;
 800023a:	687a      	ldr	r2, [r7, #4]
 800023c:	6813      	ldr	r3, [r2, #0]
 800023e:	f36f 13c7 	bfc	r3, #7, #1
 8000242:	6013      	str	r3, [r2, #0]
    	pinStatus = (uint32_t)pPortAInReg->pin_3;
 8000244:	e7ea      	b.n	800021c <main+0x58>
 8000246:	bf00      	nop
 8000248:	40023830 	.word	0x40023830
 800024c:	40020000 	.word	0x40020000
 8000250:	40020400 	.word	0x40020400
 8000254:	40020010 	.word	0x40020010
 8000258:	40020414 	.word	0x40020414

0800025c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800025c:	480d      	ldr	r0, [pc, #52]	@ (8000294 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800025e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000260:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000264:	480c      	ldr	r0, [pc, #48]	@ (8000298 <LoopForever+0x6>)
  ldr r1, =_edata
 8000266:	490d      	ldr	r1, [pc, #52]	@ (800029c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000268:	4a0d      	ldr	r2, [pc, #52]	@ (80002a0 <LoopForever+0xe>)
  movs r3, #0
 800026a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800026c:	e002      	b.n	8000274 <LoopCopyDataInit>

0800026e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800026e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000272:	3304      	adds	r3, #4

08000274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000278:	d3f9      	bcc.n	800026e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800027a:	4a0a      	ldr	r2, [pc, #40]	@ (80002a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800027c:	4c0a      	ldr	r4, [pc, #40]	@ (80002a8 <LoopForever+0x16>)
  movs r3, #0
 800027e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000280:	e001      	b.n	8000286 <LoopFillZerobss>

08000282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000284:	3204      	adds	r2, #4

08000286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000288:	d3fb      	bcc.n	8000282 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800028a:	f000 f811 	bl	80002b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800028e:	f7ff ff99 	bl	80001c4 <main>

08000292 <LoopForever>:

LoopForever:
  b LoopForever
 8000292:	e7fe      	b.n	8000292 <LoopForever>
  ldr   r0, =_estack
 8000294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800029c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002a0:	08000318 	.word	0x08000318
  ldr r2, =_sbss
 80002a4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002a8:	2000001c 	.word	0x2000001c

080002ac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002ac:	e7fe      	b.n	80002ac <ADC_IRQHandler>
	...

080002b0 <__libc_init_array>:
 80002b0:	b570      	push	{r4, r5, r6, lr}
 80002b2:	2600      	movs	r6, #0
 80002b4:	4d0c      	ldr	r5, [pc, #48]	@ (80002e8 <__libc_init_array+0x38>)
 80002b6:	4c0d      	ldr	r4, [pc, #52]	@ (80002ec <__libc_init_array+0x3c>)
 80002b8:	1b64      	subs	r4, r4, r5
 80002ba:	10a4      	asrs	r4, r4, #2
 80002bc:	42a6      	cmp	r6, r4
 80002be:	d109      	bne.n	80002d4 <__libc_init_array+0x24>
 80002c0:	f000 f81a 	bl	80002f8 <_init>
 80002c4:	2600      	movs	r6, #0
 80002c6:	4d0a      	ldr	r5, [pc, #40]	@ (80002f0 <__libc_init_array+0x40>)
 80002c8:	4c0a      	ldr	r4, [pc, #40]	@ (80002f4 <__libc_init_array+0x44>)
 80002ca:	1b64      	subs	r4, r4, r5
 80002cc:	10a4      	asrs	r4, r4, #2
 80002ce:	42a6      	cmp	r6, r4
 80002d0:	d105      	bne.n	80002de <__libc_init_array+0x2e>
 80002d2:	bd70      	pop	{r4, r5, r6, pc}
 80002d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80002d8:	4798      	blx	r3
 80002da:	3601      	adds	r6, #1
 80002dc:	e7ee      	b.n	80002bc <__libc_init_array+0xc>
 80002de:	f855 3b04 	ldr.w	r3, [r5], #4
 80002e2:	4798      	blx	r3
 80002e4:	3601      	adds	r6, #1
 80002e6:	e7f2      	b.n	80002ce <__libc_init_array+0x1e>
 80002e8:	08000310 	.word	0x08000310
 80002ec:	08000310 	.word	0x08000310
 80002f0:	08000310 	.word	0x08000310
 80002f4:	08000314 	.word	0x08000314

080002f8 <_init>:
 80002f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80002fa:	bf00      	nop
 80002fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80002fe:	bc08      	pop	{r3}
 8000300:	469e      	mov	lr, r3
 8000302:	4770      	bx	lr

08000304 <_fini>:
 8000304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000306:	bf00      	nop
 8000308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800030a:	bc08      	pop	{r3}
 800030c:	469e      	mov	lr, r3
 800030e:	4770      	bx	lr

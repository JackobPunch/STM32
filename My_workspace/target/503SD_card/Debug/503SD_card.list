
503SD_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007870  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000060c  08007a50  08007a50  00008a50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800805c  0800805c  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  0800805c  0800805c  0000905c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008064  08008064  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008064  08008064  00009064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008068  08008068  00009068  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  0800806c  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000080  080080ec  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080080ec  0000a48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d2  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230a  00000000  00000000  00015382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00017690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083e  00000000  00000000  00018198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f90  00000000  00000000  000189d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b78  00000000  00000000  0003b966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c89e6  00000000  00000000  0004c4de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114ec4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  00114f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001182ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a38 	.word	0x08007a38

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08007a38 	.word	0x08007a38

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2140      	movs	r1, #64	@ 0x40
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <SELECT+0x18>)
 8000bc6:	f001 fc25 	bl	8002414 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f001 f984 	bl	8001ed8 <HAL_Delay>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	@ 0x40
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <DESELECT+0x18>)
 8000be2:	f001 fc17 	bl	8002414 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f001 f976 	bl	8001ed8 <HAL_Delay>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bfe:	bf00      	nop
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <SPI_TxByte+0x30>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d1f8      	bne.n	8000c00 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c0e:	1df9      	adds	r1, r7, #7
 8000c10:	2364      	movs	r3, #100	@ 0x64
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <SPI_TxByte+0x30>)
 8000c16:	f002 f910 	bl	8002e3a <HAL_SPI_Transmit>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000a4 	.word	0x200000a4

08000c28 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c34:	bf00      	nop
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <SPI_TxBuffer+0x30>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d1f8      	bne.n	8000c36 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	2364      	movs	r3, #100	@ 0x64
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <SPI_TxBuffer+0x30>)
 8000c4c:	f002 f8f5 	bl	8002e3a <HAL_SPI_Transmit>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000a4 	.word	0x200000a4

08000c5c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c62:	23ff      	movs	r3, #255	@ 0xff
 8000c64:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c66:	bf00      	nop
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <SPI_RxByte+0x34>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d1f8      	bne.n	8000c68 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c76:	1dba      	adds	r2, r7, #6
 8000c78:	1df9      	adds	r1, r7, #7
 8000c7a:	2364      	movs	r3, #100	@ 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <SPI_RxByte+0x34>)
 8000c82:	f002 fa1d 	bl	80030c0 <HAL_SPI_TransmitReceive>

  return data;
 8000c86:	79bb      	ldrb	r3, [r7, #6]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000a4 	.word	0x200000a4

08000c94 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c9c:	f7ff ffde 	bl	8000c5c <SPI_RxByte>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	701a      	strb	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <SD_ReadyWait+0x30>)
 8000cb8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000cbc:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000cbe:	f7ff ffcd 	bl	8000c5c <SPI_RxByte>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2bff      	cmp	r3, #255	@ 0xff
 8000cca:	d003      	beq.n	8000cd4 <SD_ReadyWait+0x24>
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <SD_ReadyWait+0x30>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f4      	bne.n	8000cbe <SD_ReadyWait+0xe>

  return res;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000009e 	.word	0x2000009e

08000ce4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000cea:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cee:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000cf0:	f7ff ff72 	bl	8000bd8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	e005      	b.n	8000d06 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	f7ff ff7a 	bl	8000bf4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	ddf6      	ble.n	8000cfa <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000d0c:	f7ff ff56 	bl	8000bbc <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000d10:	2340      	movs	r3, #64	@ 0x40
 8000d12:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000d24:	2395      	movs	r3, #149	@ 0x95
 8000d26:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2106      	movs	r1, #6
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff7b 	bl	8000c28 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d32:	e002      	b.n	8000d3a <SD_PowerOn+0x56>
  {
    cnt--;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d3a:	f7ff ff8f 	bl	8000c5c <SPI_RxByte>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d002      	beq.n	8000d4a <SD_PowerOn+0x66>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f4      	bne.n	8000d34 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000d4a:	f7ff ff45 	bl	8000bd8 <DESELECT>
  SPI_TxByte(0XFF);
 8000d4e:	20ff      	movs	r0, #255	@ 0xff
 8000d50:	f7ff ff50 	bl	8000bf4 <SPI_TxByte>

  PowerFlag = 1;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SD_PowerOn+0x80>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000a1 	.word	0x200000a1

08000d68 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <SD_PowerOff+0x14>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	200000a1 	.word	0x200000a1

08000d80 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <SD_CheckPower+0x14>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000a1 	.word	0x200000a1

08000d98 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <SD_RxDataBlock+0x58>)
 8000da4:	22c8      	movs	r2, #200	@ 0xc8
 8000da6:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000da8:	f7ff ff58 	bl	8000c5c <SPI_RxByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2bff      	cmp	r3, #255	@ 0xff
 8000db4:	d103      	bne.n	8000dbe <SD_RxDataBlock+0x26>
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SD_RxDataBlock+0x58>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f4      	bne.n	8000da8 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dc2:	d001      	beq.n	8000dc8 <SD_RxDataBlock+0x30>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e00f      	b.n	8000de8 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff60 	bl	8000c94 <SPI_RxBytePtr>
  } while(len--);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	603a      	str	r2, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f4      	bne.n	8000dc8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000dde:	f7ff ff3d 	bl	8000c5c <SPI_RxByte>
  SPI_RxByte();
 8000de2:	f7ff ff3b 	bl	8000c5c <SPI_RxByte>

  return TRUE;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000009c 	.word	0x2000009c

08000df4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e04:	f7ff ff54 	bl	8000cb0 <SD_ReadyWait>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2bff      	cmp	r3, #255	@ 0xff
 8000e0c:	d001      	beq.n	8000e12 <SD_TxDataBlock+0x1e>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e02f      	b.n	8000e72 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff feed 	bl	8000bf4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e1e:	d020      	beq.n	8000e62 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff feff 	bl	8000c28 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000e2a:	f7ff ff17 	bl	8000c5c <SPI_RxByte>
    SPI_RxByte();
 8000e2e:	f7ff ff15 	bl	8000c5c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000e32:	e00b      	b.n	8000e4c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000e34:	f7ff ff12 	bl	8000c5c <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d006      	beq.n	8000e54 <SD_TxDataBlock+0x60>
      i++;
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b40      	cmp	r3, #64	@ 0x40
 8000e50:	d9f0      	bls.n	8000e34 <SD_TxDataBlock+0x40>
 8000e52:	e000      	b.n	8000e56 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000e54:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000e56:	bf00      	nop
 8000e58:	f7ff ff00 	bl	8000c5c <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0fa      	beq.n	8000e58 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d101      	bne.n	8000e70 <SD_TxDataBlock+0x7c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e86:	f7ff ff13 	bl	8000cb0 <SD_ReadyWait>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2bff      	cmp	r3, #255	@ 0xff
 8000e8e:	d001      	beq.n	8000e94 <SD_SendCmd+0x1a>
 8000e90:	23ff      	movs	r3, #255	@ 0xff
 8000e92:	e042      	b.n	8000f1a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feac 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0e1b      	lsrs	r3, r3, #24
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fea6 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fea0 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe9a 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe95 	bl	8000bf4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b40      	cmp	r3, #64	@ 0x40
 8000ece:	d102      	bne.n	8000ed6 <SD_SendCmd+0x5c>
 8000ed0:	2395      	movs	r3, #149	@ 0x95
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e007      	b.n	8000ee6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b48      	cmp	r3, #72	@ 0x48
 8000eda:	d102      	bne.n	8000ee2 <SD_SendCmd+0x68>
 8000edc:	2387      	movs	r3, #135	@ 0x87
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <SD_SendCmd+0x6c>
  else crc = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe83 	bl	8000bf4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ef2:	d101      	bne.n	8000ef8 <SD_SendCmd+0x7e>
 8000ef4:	f7ff feb2 	bl	8000c5c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000efc:	f7ff feae 	bl	8000c5c <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da05      	bge.n	8000f18 <SD_SendCmd+0x9e>
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f1      	bne.n	8000efc <SD_SendCmd+0x82>

  return res;
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SD_disk_initialize+0x14>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0d1      	b.n	80010dc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000f38:	4b6a      	ldr	r3, [pc, #424]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <SD_disk_initialize+0x2a>
 8000f46:	4b67      	ldr	r3, [pc, #412]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	e0c6      	b.n	80010dc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000f4e:	f7ff fec9 	bl	8000ce4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000f52:	f7ff fe33 	bl	8000bbc <SELECT>

  /* check disk type */
  type = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2040      	movs	r0, #64	@ 0x40
 8000f5e:	f7ff ff8c 	bl	8000e7a <SD_SendCmd>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 80a1 	bne.w	80010ac <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f72:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f76:	2048      	movs	r0, #72	@ 0x48
 8000f78:	f7ff ff7f 	bl	8000e7a <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d155      	bne.n	800102e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e00c      	b.n	8000fa2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000f88:	7bfc      	ldrb	r4, [r7, #15]
 8000f8a:	f7ff fe67 	bl	8000c5c <SPI_RxByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	f104 0310 	add.w	r3, r4, #16
 8000f96:	443b      	add	r3, r7
 8000f98:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d9ef      	bls.n	8000f88 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d17e      	bne.n	80010ac <SD_disk_initialize+0x188>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	2baa      	cmp	r3, #170	@ 0xaa
 8000fb2:	d17b      	bne.n	80010ac <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2077      	movs	r0, #119	@ 0x77
 8000fb8:	f7ff ff5f 	bl	8000e7a <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d807      	bhi.n	8000fd2 <SD_disk_initialize+0xae>
 8000fc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fc6:	2069      	movs	r0, #105	@ 0x69
 8000fc8:	f7ff ff57 	bl	8000e7a <SD_SendCmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ec      	bne.n	8000fb4 <SD_disk_initialize+0x90>
 8000fda:	e000      	b.n	8000fde <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fdc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d062      	beq.n	80010ac <SD_disk_initialize+0x188>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	207a      	movs	r0, #122	@ 0x7a
 8000fea:	f7ff ff46 	bl	8000e7a <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d15b      	bne.n	80010ac <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00c      	b.n	8001014 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000ffa:	7bfc      	ldrb	r4, [r7, #15]
 8000ffc:	f7ff fe2e 	bl	8000c5c <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	f104 0310 	add.w	r3, r4, #16
 8001008:	443b      	add	r3, r7
 800100a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SD_disk_initialize+0x104>
 8001024:	230c      	movs	r3, #12
 8001026:	e000      	b.n	800102a <SD_disk_initialize+0x106>
 8001028:	2304      	movs	r3, #4
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e03e      	b.n	80010ac <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800102e:	2100      	movs	r1, #0
 8001030:	2077      	movs	r0, #119	@ 0x77
 8001032:	f7ff ff22 	bl	8000e7a <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d808      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800103c:	2100      	movs	r1, #0
 800103e:	2069      	movs	r0, #105	@ 0x69
 8001040:	f7ff ff1b 	bl	8000e7a <SD_SendCmd>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d801      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800104a:	2302      	movs	r3, #2
 800104c:	e000      	b.n	8001050 <SD_disk_initialize+0x12c>
 800104e:	2301      	movs	r3, #1
 8001050:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d10e      	bne.n	8001076 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001058:	2100      	movs	r1, #0
 800105a:	2077      	movs	r0, #119	@ 0x77
 800105c:	f7ff ff0d 	bl	8000e7a <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d80e      	bhi.n	8001084 <SD_disk_initialize+0x160>
 8001066:	2100      	movs	r1, #0
 8001068:	2069      	movs	r0, #105	@ 0x69
 800106a:	f7ff ff06 	bl	8000e7a <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <SD_disk_initialize+0x160>
 8001074:	e00c      	b.n	8001090 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001076:	2100      	movs	r1, #0
 8001078:	2041      	movs	r0, #65	@ 0x41
 800107a:	f7ff fefe 	bl	8000e7a <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e2      	bne.n	8001052 <SD_disk_initialize+0x12e>
 800108c:	e000      	b.n	8001090 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800108e:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <SD_disk_initialize+0x184>
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	2050      	movs	r0, #80	@ 0x50
 800109e:	f7ff feec 	bl	8000e7a <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SD_disk_initialize+0x188>
 80010a8:	2300      	movs	r3, #0
 80010aa:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <SD_disk_initialize+0x1c8>)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80010b2:	f7ff fd91 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80010b6:	f7ff fdd1 	bl	8000c5c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e001      	b.n	80010d6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010d2:	f7ff fe49 	bl	8000d68 <SD_PowerOff>
  }

  return Stat;
 80010d6:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	200000a0 	.word	0x200000a0

080010f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SD_disk_status+0x14>
 8001100:	2301      	movs	r3, #1
 8001102:	e002      	b.n	800110a <SD_disk_status+0x1a>
  return Stat;
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SD_disk_status+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000

0800111c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <SD_disk_read+0x1c>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <SD_disk_read+0x20>
 8001138:	2304      	movs	r3, #4
 800113a:	e051      	b.n	80011e0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SD_disk_read+0xcc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SD_disk_read+0x32>
 800114a:	2303      	movs	r3, #3
 800114c:	e048      	b.n	80011e0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <SD_disk_read+0xd0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <SD_disk_read+0x44>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001160:	f7ff fd2c 	bl	8000bbc <SELECT>

  if (count == 1)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d111      	bne.n	800118e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2051      	movs	r0, #81	@ 0x51
 800116e:	f7ff fe84 	bl	8000e7a <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d129      	bne.n	80011cc <SD_disk_read+0xb0>
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fe0b 	bl	8000d98 <SD_RxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d021      	beq.n	80011cc <SD_disk_read+0xb0>
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e01e      	b.n	80011cc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2052      	movs	r0, #82	@ 0x52
 8001192:	f7ff fe72 	bl	8000e7a <SD_SendCmd>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d117      	bne.n	80011cc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800119c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f7ff fdf9 	bl	8000d98 <SD_RxDataBlock>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <SD_disk_read+0xa6>
        buff += 512;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011b2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ed      	bne.n	800119c <SD_disk_read+0x80>
 80011c0:	e000      	b.n	80011c4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80011c2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80011c4:	2100      	movs	r1, #0
 80011c6:	204c      	movs	r0, #76	@ 0x4c
 80011c8:	f7ff fe57 	bl	8000e7a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80011cc:	f7ff fd04 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80011d0:	f7ff fd44 	bl	8000c5c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200000a0 	.word	0x200000a0

080011f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <SD_disk_write+0x1c>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <SD_disk_write+0x20>
 800120c:	2304      	movs	r3, #4
 800120e:	e06b      	b.n	80012e8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001210:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <SD_disk_write+0x100>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SD_disk_write+0x32>
 800121e:	2303      	movs	r3, #3
 8001220:	e062      	b.n	80012e8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <SD_disk_write+0x100>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SD_disk_write+0x44>
 8001230:	2302      	movs	r3, #2
 8001232:	e059      	b.n	80012e8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001234:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <SD_disk_write+0x104>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <SD_disk_write+0x56>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	607b      	str	r3, [r7, #4]

  SELECT();
 8001246:	f7ff fcb9 	bl	8000bbc <SELECT>

  if (count == 1)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d110      	bne.n	8001272 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2058      	movs	r0, #88	@ 0x58
 8001254:	f7ff fe11 	bl	8000e7a <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13a      	bne.n	80012d4 <SD_disk_write+0xe4>
 800125e:	21fe      	movs	r1, #254	@ 0xfe
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fdc7 	bl	8000df4 <SD_TxDataBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d033      	beq.n	80012d4 <SD_disk_write+0xe4>
      count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	e030      	b.n	80012d4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <SD_disk_write+0x104>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	2077      	movs	r0, #119	@ 0x77
 8001282:	f7ff fdfa 	bl	8000e7a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	2057      	movs	r0, #87	@ 0x57
 800128a:	f7ff fdf6 	bl	8000e7a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2059      	movs	r0, #89	@ 0x59
 8001292:	f7ff fdf2 	bl	8000e7a <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11b      	bne.n	80012d4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800129c:	21fc      	movs	r1, #252	@ 0xfc
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f7ff fda8 	bl	8000df4 <SD_TxDataBlock>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <SD_disk_write+0xd0>
        buff += 512;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012b0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ee      	bne.n	800129c <SD_disk_write+0xac>
 80012be:	e000      	b.n	80012c2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012c0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80012c2:	21fd      	movs	r1, #253	@ 0xfd
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fd95 	bl	8000df4 <SD_TxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <SD_disk_write+0xe4>
      {
        count = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80012d4:	f7ff fc80 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80012d8:	f7ff fcc0 	bl	8000c5c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200000a0 	.word	0x200000a0

080012f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SD_disk_ioctl+0x1e>
 8001312:	2304      	movs	r3, #4
 8001314:	e113      	b.n	800153e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d124      	bne.n	800136c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d012      	beq.n	8001350 <SD_disk_ioctl+0x58>
 800132a:	2b02      	cmp	r3, #2
 800132c:	dc1a      	bgt.n	8001364 <SD_disk_ioctl+0x6c>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <SD_disk_ioctl+0x40>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d006      	beq.n	8001344 <SD_disk_ioctl+0x4c>
 8001336:	e015      	b.n	8001364 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001338:	f7ff fd16 	bl	8000d68 <SD_PowerOff>
      res = RES_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001342:	e0fa      	b.n	800153a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001344:	f7ff fcce 	bl	8000ce4 <SD_PowerOn>
      res = RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800134e:	e0f4      	b.n	800153a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	1c5c      	adds	r4, r3, #1
 8001354:	f7ff fd14 	bl	8000d80 <SD_CheckPower>
 8001358:	4603      	mov	r3, r0
 800135a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001362:	e0ea      	b.n	800153a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001364:	2304      	movs	r3, #4
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800136a:	e0e6      	b.n	800153a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800136c:	4b76      	ldr	r3, [pc, #472]	@ (8001548 <SD_disk_ioctl+0x250>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SD_disk_ioctl+0x86>
 800137a:	2303      	movs	r3, #3
 800137c:	e0df      	b.n	800153e <SD_disk_ioctl+0x246>

    SELECT();
 800137e:	f7ff fc1d 	bl	8000bbc <SELECT>

    switch (ctrl)
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b0d      	cmp	r3, #13
 8001386:	f200 80c9 	bhi.w	800151c <SD_disk_ioctl+0x224>
 800138a:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <SD_disk_ioctl+0x98>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	08001487 	.word	0x08001487
 8001394:	080013c9 	.word	0x080013c9
 8001398:	08001477 	.word	0x08001477
 800139c:	0800151d 	.word	0x0800151d
 80013a0:	0800151d 	.word	0x0800151d
 80013a4:	0800151d 	.word	0x0800151d
 80013a8:	0800151d 	.word	0x0800151d
 80013ac:	0800151d 	.word	0x0800151d
 80013b0:	0800151d 	.word	0x0800151d
 80013b4:	0800151d 	.word	0x0800151d
 80013b8:	0800151d 	.word	0x0800151d
 80013bc:	08001499 	.word	0x08001499
 80013c0:	080014bd 	.word	0x080014bd
 80013c4:	080014e1 	.word	0x080014e1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c8:	2100      	movs	r1, #0
 80013ca:	2049      	movs	r0, #73	@ 0x49
 80013cc:	f7ff fd55 	bl	8000e7a <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80a6 	bne.w	8001524 <SD_disk_ioctl+0x22c>
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2110      	movs	r1, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcda 	bl	8000d98 <SD_RxDataBlock>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 809c 	beq.w	8001524 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10d      	bne.n	8001412 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	461a      	mov	r2, r3
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	3301      	adds	r3, #1
 8001406:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	029a      	lsls	r2, r3, #10
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e02d      	b.n	800146e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001412:	7c7b      	ldrb	r3, [r7, #17]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b2da      	uxtb	r2, r3
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	09db      	lsrs	r3, r3, #7
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f003 0306 	and.w	r3, r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3302      	adds	r3, #2
 8001436:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29a      	uxth	r2, r3
 800144c:	7cbb      	ldrb	r3, [r7, #18]
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	b29b      	uxth	r3, r3
 8001452:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001460:	8bfa      	ldrh	r2, [r7, #30]
 8001462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001466:	3b09      	subs	r3, #9
 8001468:	409a      	lsls	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001474:	e056      	b.n	8001524 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001484:	e055      	b.n	8001532 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001486:	f7ff fc13 	bl	8000cb0 <SD_ReadyWait>
 800148a:	4603      	mov	r3, r0
 800148c:	2bff      	cmp	r3, #255	@ 0xff
 800148e:	d14b      	bne.n	8001528 <SD_disk_ioctl+0x230>
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001496:	e047      	b.n	8001528 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001498:	2100      	movs	r1, #0
 800149a:	2049      	movs	r0, #73	@ 0x49
 800149c:	f7ff fced 	bl	8000e7a <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d142      	bne.n	800152c <SD_disk_ioctl+0x234>
 80014a6:	2110      	movs	r1, #16
 80014a8:	6a38      	ldr	r0, [r7, #32]
 80014aa:	f7ff fc75 	bl	8000d98 <SD_RxDataBlock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d03b      	beq.n	800152c <SD_disk_ioctl+0x234>
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014ba:	e037      	b.n	800152c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014bc:	2100      	movs	r1, #0
 80014be:	204a      	movs	r0, #74	@ 0x4a
 80014c0:	f7ff fcdb 	bl	8000e7a <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d132      	bne.n	8001530 <SD_disk_ioctl+0x238>
 80014ca:	2110      	movs	r1, #16
 80014cc:	6a38      	ldr	r0, [r7, #32]
 80014ce:	f7ff fc63 	bl	8000d98 <SD_RxDataBlock>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02b      	beq.n	8001530 <SD_disk_ioctl+0x238>
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014de:	e027      	b.n	8001530 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014e0:	2100      	movs	r1, #0
 80014e2:	207a      	movs	r0, #122	@ 0x7a
 80014e4:	f7ff fcc9 	bl	8000e7a <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014f4:	e00b      	b.n	800150e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80014f6:	6a3c      	ldr	r4, [r7, #32]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	f7ff fbae 	bl	8000c5c <SPI_RxByte>
 8001500:	4603      	mov	r3, r0
 8001502:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001508:	3301      	adds	r3, #1
 800150a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800150e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9ef      	bls.n	80014f6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800151c:	2304      	movs	r3, #4
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001522:	e006      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001524:	bf00      	nop
 8001526:	e004      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001528:	bf00      	nop
 800152a:	e002      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001530:	bf00      	nop
    }

    DESELECT();
 8001532:	f7ff fb51 	bl	8000bd8 <DESELECT>
    SPI_RxByte();
 8001536:	f7ff fb91 	bl	8000c5c <SPI_RxByte>
  }

  return res;
 800153a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800153e:	4618      	mov	r0, r3
 8001540:	372c      	adds	r7, #44	@ 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	printf("start\r\n");
 8001550:	4808      	ldr	r0, [pc, #32]	@ (8001574 <main+0x28>)
 8001552:	f005 fc0d 	bl	8006d70 <puts>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001556:	f000 fc4d 	bl	8001df4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800155a:	f000 f80d 	bl	8001578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800155e:	f000 f89f 	bl	80016a0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001562:	f000 f867 	bl	8001634 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001566:	f002 f837 	bl	80035d8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 800156a:	f000 f96d 	bl	8001848 <process_SD_card>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800156e:	bf00      	nop
 8001570:	e7fd      	b.n	800156e <main+0x22>
 8001572:	bf00      	nop
 8001574:	08007a50 	.word	0x08007a50

08001578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b094      	sub	sp, #80	@ 0x50
 800157c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	2234      	movs	r2, #52	@ 0x34
 8001584:	2100      	movs	r1, #0
 8001586:	4618      	mov	r0, r3
 8001588:	f005 fcd2 	bl	8006f30 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800158c:	f107 0308 	add.w	r3, r7, #8
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800159c:	2300      	movs	r3, #0
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	4b22      	ldr	r3, [pc, #136]	@ (800162c <SystemClock_Config+0xb4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	4a21      	ldr	r2, [pc, #132]	@ (800162c <SystemClock_Config+0xb4>)
 80015a6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	6413      	str	r3, [r2, #64]	@ 0x40
 80015ac:	4b1f      	ldr	r3, [pc, #124]	@ (800162c <SystemClock_Config+0xb4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015b0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b4:	607b      	str	r3, [r7, #4]
 80015b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <SystemClock_Config+0xb8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1b      	ldr	r2, [pc, #108]	@ (8001630 <SystemClock_Config+0xb8>)
 80015c2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <SystemClock_Config+0xb8>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015d0:	603b      	str	r3, [r7, #0]
 80015d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d4:	2302      	movs	r3, #2
 80015d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015d8:	2301      	movs	r3, #1
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015dc:	2310      	movs	r3, #16
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e4:	f107 031c 	add.w	r3, r7, #28
 80015e8:	4618      	mov	r0, r3
 80015ea:	f001 f919 	bl	8002820 <HAL_RCC_OscConfig>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015f4:	f000 fa38 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015f8:	230f      	movs	r3, #15
 80015fa:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001600:	2300      	movs	r3, #0
 8001602:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001604:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800160e:	f107 0308 	add.w	r3, r7, #8
 8001612:	2100      	movs	r1, #0
 8001614:	4618      	mov	r0, r3
 8001616:	f000 ff17 	bl	8002448 <HAL_RCC_ClockConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001620:	f000 fa22 	bl	8001a68 <Error_Handler>
  }
}
 8001624:	bf00      	nop
 8001626:	3750      	adds	r7, #80	@ 0x50
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	40007000 	.word	0x40007000

08001634 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001638:	4b17      	ldr	r3, [pc, #92]	@ (8001698 <MX_SPI1_Init+0x64>)
 800163a:	4a18      	ldr	r2, [pc, #96]	@ (800169c <MX_SPI1_Init+0x68>)
 800163c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800163e:	4b16      	ldr	r3, [pc, #88]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001640:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001644:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001646:	4b14      	ldr	r3, [pc, #80]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800164c:	4b12      	ldr	r3, [pc, #72]	@ (8001698 <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001652:	4b11      	ldr	r3, [pc, #68]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001658:	4b0f      	ldr	r3, [pc, #60]	@ (8001698 <MX_SPI1_Init+0x64>)
 800165a:	2200      	movs	r2, #0
 800165c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800165e:	4b0e      	ldr	r3, [pc, #56]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001660:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001664:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001666:	4b0c      	ldr	r3, [pc, #48]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800166c:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001672:	4b09      	ldr	r3, [pc, #36]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001674:	2200      	movs	r2, #0
 8001676:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001678:	4b07      	ldr	r3, [pc, #28]	@ (8001698 <MX_SPI1_Init+0x64>)
 800167a:	2200      	movs	r2, #0
 800167c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800167e:	4b06      	ldr	r3, [pc, #24]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001680:	220a      	movs	r2, #10
 8001682:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001684:	4804      	ldr	r0, [pc, #16]	@ (8001698 <MX_SPI1_Init+0x64>)
 8001686:	f001 fb4f 	bl	8002d28 <HAL_SPI_Init>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d001      	beq.n	8001694 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001690:	f000 f9ea 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001694:	bf00      	nop
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200000a4 	.word	0x200000a4
 800169c:	40013000 	.word	0x40013000

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	@ 0x30
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	4b5d      	ldr	r3, [pc, #372]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	4a5c      	ldr	r2, [pc, #368]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016c0:	f043 0304 	orr.w	r3, r3, #4
 80016c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016c6:	4b5a      	ldr	r3, [pc, #360]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ca:	f003 0304 	and.w	r3, r3, #4
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	4b56      	ldr	r3, [pc, #344]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	4a55      	ldr	r2, [pc, #340]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016dc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016e2:	4b53      	ldr	r3, [pc, #332]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b4f      	ldr	r3, [pc, #316]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	4a4e      	ldr	r2, [pc, #312]	@ (8001830 <MX_GPIO_Init+0x190>)
 80016f8:	f043 0301 	orr.w	r3, r3, #1
 80016fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80016fe:	4b4c      	ldr	r3, [pc, #304]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	4a47      	ldr	r2, [pc, #284]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001714:	f043 0302 	orr.w	r3, r3, #2
 8001718:	6313      	str	r3, [r2, #48]	@ 0x30
 800171a:	4b45      	ldr	r3, [pc, #276]	@ (8001830 <MX_GPIO_Init+0x190>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800171e:	f003 0302 	and.w	r3, r3, #2
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b41      	ldr	r3, [pc, #260]	@ (8001830 <MX_GPIO_Init+0x190>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a40      	ldr	r2, [pc, #256]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001730:	f043 0308 	orr.w	r3, r3, #8
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b3e      	ldr	r3, [pc, #248]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b3a      	ldr	r3, [pc, #232]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	4a39      	ldr	r2, [pc, #228]	@ (8001830 <MX_GPIO_Init+0x190>)
 800174c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001750:	6313      	str	r3, [r2, #48]	@ 0x30
 8001752:	4b37      	ldr	r3, [pc, #220]	@ (8001830 <MX_GPIO_Init+0x190>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	f244 01c1 	movw	r1, #16577	@ 0x40c1
 8001764:	4833      	ldr	r0, [pc, #204]	@ (8001834 <MX_GPIO_Init+0x194>)
 8001766:	f000 fe55 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800176a:	2200      	movs	r2, #0
 800176c:	2140      	movs	r1, #64	@ 0x40
 800176e:	4832      	ldr	r0, [pc, #200]	@ (8001838 <MX_GPIO_Init+0x198>)
 8001770:	f000 fe50 	bl	8002414 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001774:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001778:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800177a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800177e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001780:	2300      	movs	r3, #0
 8001782:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001784:	f107 031c 	add.w	r3, r7, #28
 8001788:	4619      	mov	r1, r3
 800178a:	482c      	ldr	r0, [pc, #176]	@ (800183c <MX_GPIO_Init+0x19c>)
 800178c:	f000 fcae 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin;
 8001790:	f244 03c1 	movw	r3, #16577	@ 0x40c1
 8001794:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001796:	2301      	movs	r3, #1
 8001798:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179e:	2300      	movs	r3, #0
 80017a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017a2:	f107 031c 	add.w	r3, r7, #28
 80017a6:	4619      	mov	r1, r3
 80017a8:	4822      	ldr	r0, [pc, #136]	@ (8001834 <MX_GPIO_Init+0x194>)
 80017aa:	f000 fc9f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b4:	2302      	movs	r3, #2
 80017b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b8:	2300      	movs	r3, #0
 80017ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017bc:	2303      	movs	r3, #3
 80017be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017c0:	2307      	movs	r3, #7
 80017c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017c4:	f107 031c 	add.w	r3, r7, #28
 80017c8:	4619      	mov	r1, r3
 80017ca:	481d      	ldr	r0, [pc, #116]	@ (8001840 <MX_GPIO_Init+0x1a0>)
 80017cc:	f000 fc8e 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017d0:	2340      	movs	r3, #64	@ 0x40
 80017d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d4:	2301      	movs	r3, #1
 80017d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2300      	movs	r3, #0
 80017da:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2300      	movs	r3, #0
 80017de:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017e0:	f107 031c 	add.w	r3, r7, #28
 80017e4:	4619      	mov	r1, r3
 80017e6:	4814      	ldr	r0, [pc, #80]	@ (8001838 <MX_GPIO_Init+0x198>)
 80017e8:	f000 fc80 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017ec:	2380      	movs	r3, #128	@ 0x80
 80017ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017f0:	2300      	movs	r3, #0
 80017f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f4:	2300      	movs	r3, #0
 80017f6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017f8:	f107 031c 	add.w	r3, r7, #28
 80017fc:	4619      	mov	r1, r3
 80017fe:	480e      	ldr	r0, [pc, #56]	@ (8001838 <MX_GPIO_Init+0x198>)
 8001800:	f000 fc74 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001804:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8001808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180a:	2302      	movs	r3, #2
 800180c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180e:	2300      	movs	r3, #0
 8001810:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001812:	2303      	movs	r3, #3
 8001814:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001816:	230a      	movs	r3, #10
 8001818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181a:	f107 031c 	add.w	r3, r7, #28
 800181e:	4619      	mov	r1, r3
 8001820:	4808      	ldr	r0, [pc, #32]	@ (8001844 <MX_GPIO_Init+0x1a4>)
 8001822:	f000 fc63 	bl	80020ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001826:	bf00      	nop
 8001828:	3730      	adds	r7, #48	@ 0x30
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40023800 	.word	0x40023800
 8001834:	40020400 	.word	0x40020400
 8001838:	40021800 	.word	0x40021800
 800183c:	40020800 	.word	0x40020800
 8001840:	40020c00 	.word	0x40020c00
 8001844:	40020000 	.word	0x40020000

08001848 <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 8001848:	b580      	push	{r7, lr}
 800184a:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 800184e:	b088      	sub	sp, #32
 8001850:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001852:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 8001856:	3b04      	subs	r3, #4
 8001858:	2201      	movs	r2, #1
 800185a:	4976      	ldr	r1, [pc, #472]	@ (8001a34 <process_SD_card+0x1ec>)
 800185c:	4618      	mov	r0, r3
 800185e:	f004 f903 	bl	8005a68 <f_mount>
 8001862:	4603      	mov	r3, r0
 8001864:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001868:	f102 021f 	add.w	r2, r2, #31
 800186c:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 800186e:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001872:	f103 031f 	add.w	r3, r3, #31
 8001876:	781b      	ldrb	r3, [r3, #0]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 800187c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001880:	f103 031f 	add.w	r3, r3, #31
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	4619      	mov	r1, r3
 8001888:	486b      	ldr	r0, [pc, #428]	@ (8001a38 <process_SD_card+0x1f0>)
 800188a:	f005 fa09 	bl	8006ca0 <iprintf>
      break;
 800188e:	e0c2      	b.n	8001a16 <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001890:	486a      	ldr	r0, [pc, #424]	@ (8001a3c <process_SD_card+0x1f4>)
 8001892:	f005 fa6d 	bl	8006d70 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 8001896:	f107 0220 	add.w	r2, r7, #32
 800189a:	3a1c      	subs	r2, #28
 800189c:	f107 0320 	add.w	r3, r7, #32
 80018a0:	3b20      	subs	r3, #32
 80018a2:	4619      	mov	r1, r3
 80018a4:	4863      	ldr	r0, [pc, #396]	@ (8001a34 <process_SD_card+0x1ec>)
 80018a6:	f004 fe88 	bl	80065ba <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 80018aa:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018ae:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80018b2:	69db      	ldr	r3, [r3, #28]
 80018b4:	3b02      	subs	r3, #2
 80018b6:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80018ba:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 80018be:	8952      	ldrh	r2, [r2, #10]
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7fe ff67 	bl	8000798 <__aeabi_ui2d>
 80018ca:	f04f 0200 	mov.w	r2, #0
 80018ce:	4b5c      	ldr	r3, [pc, #368]	@ (8001a40 <process_SD_card+0x1f8>)
 80018d0:	f7fe fcf6 	bl	80002c0 <__aeabi_dmul>
 80018d4:	4602      	mov	r2, r0
 80018d6:	460b      	mov	r3, r1
 80018d8:	4610      	mov	r0, r2
 80018da:	4619      	mov	r1, r3
 80018dc:	f7fe ffd6 	bl	800088c <__aeabi_d2uiz>
 80018e0:	4603      	mov	r3, r0
 80018e2:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80018e6:	f102 0218 	add.w	r2, r2, #24
 80018ea:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80018ec:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018f0:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80018f4:	895b      	ldrh	r3, [r3, #10]
 80018f6:	461a      	mov	r2, r3
 80018f8:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018fc:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001900:	fb02 f303 	mul.w	r3, r2, r3
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe ff47 	bl	8000798 <__aeabi_ui2d>
 800190a:	f04f 0200 	mov.w	r2, #0
 800190e:	4b4c      	ldr	r3, [pc, #304]	@ (8001a40 <process_SD_card+0x1f8>)
 8001910:	f7fe fcd6 	bl	80002c0 <__aeabi_dmul>
 8001914:	4602      	mov	r2, r0
 8001916:	460b      	mov	r3, r1
 8001918:	4610      	mov	r0, r2
 800191a:	4619      	mov	r1, r3
 800191c:	f7fe ffb6 	bl	800088c <__aeabi_d2uiz>
 8001920:	4603      	mov	r3, r0
 8001922:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001926:	f102 0214 	add.w	r2, r2, #20
 800192a:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 800192c:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001930:	f103 0314 	add.w	r3, r3, #20
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800193a:	f103 0318 	add.w	r3, r3, #24
 800193e:	6819      	ldr	r1, [r3, #0]
 8001940:	4840      	ldr	r0, [pc, #256]	@ (8001a44 <process_SD_card+0x1fc>)
 8001942:	f005 f9ad 	bl	8006ca0 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 8001946:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800194a:	3b34      	subs	r3, #52	@ 0x34
 800194c:	220b      	movs	r2, #11
 800194e:	493e      	ldr	r1, [pc, #248]	@ (8001a48 <process_SD_card+0x200>)
 8001950:	4618      	mov	r0, r3
 8001952:	f004 f8cf 	bl	8005af4 <f_open>
 8001956:	4603      	mov	r3, r0
 8001958:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800195c:	f102 021f 	add.w	r2, r2, #31
 8001960:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001962:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001966:	f103 031f 	add.w	r3, r3, #31
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	2b00      	cmp	r3, #0
 800196e:	d009      	beq.n	8001984 <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001970:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001974:	f103 031f 	add.w	r3, r3, #31
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	4619      	mov	r1, r3
 800197c:	4833      	ldr	r0, [pc, #204]	@ (8001a4c <process_SD_card+0x204>)
 800197e:	f005 f98f 	bl	8006ca0 <iprintf>
      break;
 8001982:	e048      	b.n	8001a16 <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 8001984:	4832      	ldr	r0, [pc, #200]	@ (8001a50 <process_SD_card+0x208>)
 8001986:	f005 f9f3 	bl	8006d70 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 800198a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800198e:	3b34      	subs	r3, #52	@ 0x34
 8001990:	4619      	mov	r1, r3
 8001992:	4830      	ldr	r0, [pc, #192]	@ (8001a54 <process_SD_card+0x20c>)
 8001994:	f004 ff7b 	bl	800688e <f_puts>

    //close your file
    f_close(&fil);
 8001998:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800199c:	3b34      	subs	r3, #52	@ 0x34
 800199e:	4618      	mov	r0, r3
 80019a0:	f004 fde1 	bl	8006566 <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 80019a4:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80019a8:	3b34      	subs	r3, #52	@ 0x34
 80019aa:	2201      	movs	r2, #1
 80019ac:	4926      	ldr	r1, [pc, #152]	@ (8001a48 <process_SD_card+0x200>)
 80019ae:	4618      	mov	r0, r3
 80019b0:	f004 f8a0 	bl	8005af4 <f_open>
 80019b4:	4603      	mov	r3, r0
 80019b6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80019ba:	f102 021f 	add.w	r2, r2, #31
 80019be:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80019c0:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019c4:	f103 031f 	add.w	r3, r3, #31
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d009      	beq.n	80019e2 <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 80019ce:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019d2:	f103 031f 	add.w	r3, r3, #31
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	4619      	mov	r1, r3
 80019da:	481f      	ldr	r0, [pc, #124]	@ (8001a58 <process_SD_card+0x210>)
 80019dc:	f005 f960 	bl	8006ca0 <iprintf>
      break;
 80019e0:	e019      	b.n	8001a16 <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 80019e2:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80019e6:	3a34      	subs	r2, #52	@ 0x34
 80019e8:	f107 0320 	add.w	r3, r7, #32
 80019ec:	3b18      	subs	r3, #24
 80019ee:	2164      	movs	r1, #100	@ 0x64
 80019f0:	4618      	mov	r0, r3
 80019f2:	f004 fe97 	bl	8006724 <f_gets>

    printf("Read Data : %s\n", buf);
 80019f6:	f107 0320 	add.w	r3, r7, #32
 80019fa:	3b18      	subs	r3, #24
 80019fc:	4619      	mov	r1, r3
 80019fe:	4817      	ldr	r0, [pc, #92]	@ (8001a5c <process_SD_card+0x214>)
 8001a00:	f005 f94e 	bl	8006ca0 <iprintf>

    //close your file
    f_close(&fil);
 8001a04:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001a08:	3b34      	subs	r3, #52	@ 0x34
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f004 fdab 	bl	8006566 <f_close>
    printf("Closing File!!!\r\n");
 8001a10:	4813      	ldr	r0, [pc, #76]	@ (8001a60 <process_SD_card+0x218>)
 8001a12:	f005 f9ad 	bl	8006d70 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001a16:	2200      	movs	r2, #0
 8001a18:	4906      	ldr	r1, [pc, #24]	@ (8001a34 <process_SD_card+0x1ec>)
 8001a1a:	2000      	movs	r0, #0
 8001a1c:	f004 f824 	bl	8005a68 <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8001a20:	4810      	ldr	r0, [pc, #64]	@ (8001a64 <process_SD_card+0x21c>)
 8001a22:	f005 f9a5 	bl	8006d70 <puts>
}
 8001a26:	bf00      	nop
 8001a28:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8001a2c:	3720      	adds	r7, #32
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	08007a58 	.word	0x08007a58
 8001a38:	08007a5c 	.word	0x08007a5c
 8001a3c:	08007a78 	.word	0x08007a78
 8001a40:	3fe00000 	.word	0x3fe00000
 8001a44:	08007a9c 	.word	0x08007a9c
 8001a48:	08007acc 	.word	0x08007acc
 8001a4c:	08007adc 	.word	0x08007adc
 8001a50:	08007b00 	.word	0x08007b00
 8001a54:	08007b14 	.word	0x08007b14
 8001a58:	08007b2c 	.word	0x08007b2c
 8001a5c:	08007b48 	.word	0x08007b48
 8001a60:	08007b58 	.word	0x08007b58
 8001a64:	08007b6c 	.word	0x08007b6c

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b083      	sub	sp, #12
 8001a78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	607b      	str	r3, [r7, #4]
 8001a7e:	4b10      	ldr	r3, [pc, #64]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	4a0f      	ldr	r2, [pc, #60]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a84:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a88:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a8e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a92:	607b      	str	r3, [r7, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	603b      	str	r3, [r7, #0]
 8001a9a:	4b09      	ldr	r3, [pc, #36]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	4a08      	ldr	r2, [pc, #32]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa6:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <HAL_MspInit+0x4c>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aae:	603b      	str	r3, [r7, #0]
 8001ab0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	370c      	adds	r7, #12
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800

08001ac4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b08a      	sub	sp, #40	@ 0x28
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001acc:	f107 0314 	add.w	r3, r7, #20
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	601a      	str	r2, [r3, #0]
 8001ad4:	605a      	str	r2, [r3, #4]
 8001ad6:	609a      	str	r2, [r3, #8]
 8001ad8:	60da      	str	r2, [r3, #12]
 8001ada:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a19      	ldr	r2, [pc, #100]	@ (8001b48 <HAL_SPI_MspInit+0x84>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d12b      	bne.n	8001b3e <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	613b      	str	r3, [r7, #16]
 8001aea:	4b18      	ldr	r3, [pc, #96]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	4a17      	ldr	r2, [pc, #92]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001af4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001af6:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001af8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001afa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001afe:	613b      	str	r3, [r7, #16]
 8001b00:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	4b11      	ldr	r3, [pc, #68]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	4a10      	ldr	r2, [pc, #64]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b12:	4b0e      	ldr	r3, [pc, #56]	@ (8001b4c <HAL_SPI_MspInit+0x88>)
 8001b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b16:	f003 0301 	and.w	r3, r3, #1
 8001b1a:	60fb      	str	r3, [r7, #12]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b1e:	23e0      	movs	r3, #224	@ 0xe0
 8001b20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b22:	2302      	movs	r3, #2
 8001b24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b26:	2300      	movs	r3, #0
 8001b28:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b32:	f107 0314 	add.w	r3, r7, #20
 8001b36:	4619      	mov	r1, r3
 8001b38:	4805      	ldr	r0, [pc, #20]	@ (8001b50 <HAL_SPI_MspInit+0x8c>)
 8001b3a:	f000 fad7 	bl	80020ec <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b3e:	bf00      	nop
 8001b40:	3728      	adds	r7, #40	@ 0x28
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
 8001b46:	bf00      	nop
 8001b48:	40013000 	.word	0x40013000
 8001b4c:	40023800 	.word	0x40023800
 8001b50:	40020000 	.word	0x40020000

08001b54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b58:	bf00      	nop
 8001b5a:	e7fd      	b.n	8001b58 <NMI_Handler+0x4>

08001b5c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b60:	bf00      	nop
 8001b62:	e7fd      	b.n	8001b60 <HardFault_Handler+0x4>

08001b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b64:	b480      	push	{r7}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b68:	bf00      	nop
 8001b6a:	e7fd      	b.n	8001b68 <MemManage_Handler+0x4>

08001b6c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b70:	bf00      	nop
 8001b72:	e7fd      	b.n	8001b70 <BusFault_Handler+0x4>

08001b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b74:	b480      	push	{r7}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <UsageFault_Handler+0x4>

08001b7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b80:	bf00      	nop
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr

08001b8a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b8a:	b480      	push	{r7}
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b8e:	bf00      	nop
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b9c:	bf00      	nop
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001bac:	4b0b      	ldr	r3, [pc, #44]	@ (8001bdc <SysTick_Handler+0x34>)
 8001bae:	881b      	ldrh	r3, [r3, #0]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d005      	beq.n	8001bc0 <SysTick_Handler+0x18>
	  Timer1--;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	@ (8001bdc <SysTick_Handler+0x34>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	3b01      	subs	r3, #1
 8001bba:	b29a      	uxth	r2, r3
 8001bbc:	4b07      	ldr	r3, [pc, #28]	@ (8001bdc <SysTick_Handler+0x34>)
 8001bbe:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001bc0:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <SysTick_Handler+0x38>)
 8001bc2:	881b      	ldrh	r3, [r3, #0]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d005      	beq.n	8001bd4 <SysTick_Handler+0x2c>
	  Timer2--;
 8001bc8:	4b05      	ldr	r3, [pc, #20]	@ (8001be0 <SysTick_Handler+0x38>)
 8001bca:	881b      	ldrh	r3, [r3, #0]
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	4b03      	ldr	r3, [pc, #12]	@ (8001be0 <SysTick_Handler+0x38>)
 8001bd2:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bd4:	f000 f960 	bl	8001e98 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bd8:	bf00      	nop
 8001bda:	bd80      	pop	{r7, pc}
 8001bdc:	2000009c 	.word	0x2000009c
 8001be0:	2000009e 	.word	0x2000009e

08001be4 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b083      	sub	sp, #12
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001bee:	4b0f      	ldr	r3, [pc, #60]	@ (8001c2c <ITM_SendChar+0x48>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0e      	ldr	r2, [pc, #56]	@ (8001c2c <ITM_SendChar+0x48>)
 8001bf4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bf8:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001bfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001c30 <ITM_SendChar+0x4c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	@ (8001c30 <ITM_SendChar+0x4c>)
 8001c00:	f043 0301 	orr.w	r3, r3, #1
 8001c04:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001c06:	bf00      	nop
 8001c08:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0301 	and.w	r3, r3, #1
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d0f8      	beq.n	8001c08 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001c16:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	6013      	str	r3, [r2, #0]
}
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	e000edfc 	.word	0xe000edfc
 8001c30:	e0000e00 	.word	0xe0000e00

08001c34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b086      	sub	sp, #24
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	60f8      	str	r0, [r7, #12]
 8001c3c:	60b9      	str	r1, [r7, #8]
 8001c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c40:	2300      	movs	r3, #0
 8001c42:	617b      	str	r3, [r7, #20]
 8001c44:	e00a      	b.n	8001c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c46:	f3af 8000 	nop.w
 8001c4a:	4601      	mov	r1, r0
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	1c5a      	adds	r2, r3, #1
 8001c50:	60ba      	str	r2, [r7, #8]
 8001c52:	b2ca      	uxtb	r2, r1
 8001c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf0      	blt.n	8001c46 <_read+0x12>
  }

  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b086      	sub	sp, #24
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	60f8      	str	r0, [r7, #12]
 8001c76:	60b9      	str	r1, [r7, #8]
 8001c78:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
 8001c7e:	e009      	b.n	8001c94 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	1c5a      	adds	r2, r3, #1
 8001c84:	60ba      	str	r2, [r7, #8]
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f7ff ffab 	bl	8001be4 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	3301      	adds	r3, #1
 8001c92:	617b      	str	r3, [r7, #20]
 8001c94:	697a      	ldr	r2, [r7, #20]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	dbf1      	blt.n	8001c80 <_write+0x12>
  }
  return len;
 8001c9c:	687b      	ldr	r3, [r7, #4]
}
 8001c9e:	4618      	mov	r0, r3
 8001ca0:	3718      	adds	r7, #24
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <_close>:

int _close(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cae:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cce:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <_isatty>:

int _isatty(int file)
{
 8001cde:	b480      	push	{r7}
 8001ce0:	b083      	sub	sp, #12
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce6:	2301      	movs	r3, #1
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	370c      	adds	r7, #12
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr

08001cf4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	60f8      	str	r0, [r7, #12]
 8001cfc:	60b9      	str	r1, [r7, #8]
 8001cfe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	3714      	adds	r7, #20
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f005 f944 	bl	8006fcc <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20050000 	.word	0x20050000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	200000fc 	.word	0x200000fc
 8001d78:	20000490 	.word	0x20000490

08001d7c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001da0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dd8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopFillZerobss+0x22>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001dce:	f005 f903 	bl	8006fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dd2:	f7ff fbbb 	bl	800154c <main>
  bx  lr    
 8001dd6:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dd8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001de4:	0800806c 	.word	0x0800806c
  ldr r2, =_sbss
 8001de8:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001dec:	2000048c 	.word	0x2000048c

08001df0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC_IRQHandler>
	...

08001df4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001df8:	4b0e      	ldr	r3, [pc, #56]	@ (8001e34 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0d      	ldr	r2, [pc, #52]	@ (8001e34 <HAL_Init+0x40>)
 8001dfe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e04:	4b0b      	ldr	r3, [pc, #44]	@ (8001e34 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a0a      	ldr	r2, [pc, #40]	@ (8001e34 <HAL_Init+0x40>)
 8001e0a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e10:	4b08      	ldr	r3, [pc, #32]	@ (8001e34 <HAL_Init+0x40>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a07      	ldr	r2, [pc, #28]	@ (8001e34 <HAL_Init+0x40>)
 8001e16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e1c:	2003      	movs	r0, #3
 8001e1e:	f000 f931 	bl	8002084 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e22:	2000      	movs	r0, #0
 8001e24:	f000 f808 	bl	8001e38 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e28:	f7ff fe24 	bl	8001a74 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	40023c00 	.word	0x40023c00

08001e38 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <HAL_InitTick+0x54>)
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	4b12      	ldr	r3, [pc, #72]	@ (8001e90 <HAL_InitTick+0x58>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	4619      	mov	r1, r3
 8001e4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e4e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 f93b 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d001      	beq.n	8001e66 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e00e      	b.n	8001e84 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	2b0f      	cmp	r3, #15
 8001e6a:	d80a      	bhi.n	8001e82 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	6879      	ldr	r1, [r7, #4]
 8001e70:	f04f 30ff 	mov.w	r0, #4294967295
 8001e74:	f000 f911 	bl	800209a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e78:	4a06      	ldr	r2, [pc, #24]	@ (8001e94 <HAL_InitTick+0x5c>)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	e000      	b.n	8001e84 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
}
 8001e84:	4618      	mov	r0, r3
 8001e86:	3708      	adds	r7, #8
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	20000004 	.word	0x20000004
 8001e90:	2000000c 	.word	0x2000000c
 8001e94:	20000008 	.word	0x20000008

08001e98 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e9c:	4b06      	ldr	r3, [pc, #24]	@ (8001eb8 <HAL_IncTick+0x20>)
 8001e9e:	781b      	ldrb	r3, [r3, #0]
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b06      	ldr	r3, [pc, #24]	@ (8001ebc <HAL_IncTick+0x24>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	4a04      	ldr	r2, [pc, #16]	@ (8001ebc <HAL_IncTick+0x24>)
 8001eaa:	6013      	str	r3, [r2, #0]
}
 8001eac:	bf00      	nop
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	2000000c 	.word	0x2000000c
 8001ebc:	20000100 	.word	0x20000100

08001ec0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  return uwTick;
 8001ec4:	4b03      	ldr	r3, [pc, #12]	@ (8001ed4 <HAL_GetTick+0x14>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed0:	4770      	bx	lr
 8001ed2:	bf00      	nop
 8001ed4:	20000100 	.word	0x20000100

08001ed8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ee0:	f7ff ffee 	bl	8001ec0 <HAL_GetTick>
 8001ee4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef0:	d005      	beq.n	8001efe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ef2:	4b0a      	ldr	r3, [pc, #40]	@ (8001f1c <HAL_Delay+0x44>)
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	461a      	mov	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4413      	add	r3, r2
 8001efc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001efe:	bf00      	nop
 8001f00:	f7ff ffde 	bl	8001ec0 <HAL_GetTick>
 8001f04:	4602      	mov	r2, r0
 8001f06:	68bb      	ldr	r3, [r7, #8]
 8001f08:	1ad3      	subs	r3, r2, r3
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d8f7      	bhi.n	8001f00 <HAL_Delay+0x28>
  {
  }
}
 8001f10:	bf00      	nop
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000000c 	.word	0x2000000c

08001f20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	f003 0307 	and.w	r3, r3, #7
 8001f2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f30:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f32:	68db      	ldr	r3, [r3, #12]
 8001f34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f36:	68ba      	ldr	r2, [r7, #8]
 8001f38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f52:	4a04      	ldr	r2, [pc, #16]	@ (8001f64 <__NVIC_SetPriorityGrouping+0x44>)
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	60d3      	str	r3, [r2, #12]
}
 8001f58:	bf00      	nop
 8001f5a:	3714      	adds	r7, #20
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	e000ed00 	.word	0xe000ed00

08001f68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f6c:	4b04      	ldr	r3, [pc, #16]	@ (8001f80 <__NVIC_GetPriorityGrouping+0x18>)
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	0a1b      	lsrs	r3, r3, #8
 8001f72:	f003 0307 	and.w	r3, r3, #7
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7e:	4770      	bx	lr
 8001f80:	e000ed00 	.word	0xe000ed00

08001f84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	6039      	str	r1, [r7, #0]
 8001f8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	db0a      	blt.n	8001fae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	b2da      	uxtb	r2, r3
 8001f9c:	490c      	ldr	r1, [pc, #48]	@ (8001fd0 <__NVIC_SetPriority+0x4c>)
 8001f9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fa2:	0112      	lsls	r2, r2, #4
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	440b      	add	r3, r1
 8001fa8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fac:	e00a      	b.n	8001fc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	b2da      	uxtb	r2, r3
 8001fb2:	4908      	ldr	r1, [pc, #32]	@ (8001fd4 <__NVIC_SetPriority+0x50>)
 8001fb4:	79fb      	ldrb	r3, [r7, #7]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	3b04      	subs	r3, #4
 8001fbc:	0112      	lsls	r2, r2, #4
 8001fbe:	b2d2      	uxtb	r2, r2
 8001fc0:	440b      	add	r3, r1
 8001fc2:	761a      	strb	r2, [r3, #24]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	e000e100 	.word	0xe000e100
 8001fd4:	e000ed00 	.word	0xe000ed00

08001fd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	@ 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	f003 0307 	and.w	r3, r3, #7
 8001fea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fec:	69fb      	ldr	r3, [r7, #28]
 8001fee:	f1c3 0307 	rsb	r3, r3, #7
 8001ff2:	2b04      	cmp	r3, #4
 8001ff4:	bf28      	it	cs
 8001ff6:	2304      	movcs	r3, #4
 8001ff8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	2b06      	cmp	r3, #6
 8002000:	d902      	bls.n	8002008 <NVIC_EncodePriority+0x30>
 8002002:	69fb      	ldr	r3, [r7, #28]
 8002004:	3b03      	subs	r3, #3
 8002006:	e000      	b.n	800200a <NVIC_EncodePriority+0x32>
 8002008:	2300      	movs	r3, #0
 800200a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800200c:	f04f 32ff 	mov.w	r2, #4294967295
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	43da      	mvns	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	401a      	ands	r2, r3
 800201c:	697b      	ldr	r3, [r7, #20]
 800201e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002020:	f04f 31ff 	mov.w	r1, #4294967295
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	fa01 f303 	lsl.w	r3, r1, r3
 800202a:	43d9      	mvns	r1, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002030:	4313      	orrs	r3, r2
         );
}
 8002032:	4618      	mov	r0, r3
 8002034:	3724      	adds	r7, #36	@ 0x24
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b082      	sub	sp, #8
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	3b01      	subs	r3, #1
 800204c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002050:	d301      	bcc.n	8002056 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002052:	2301      	movs	r3, #1
 8002054:	e00f      	b.n	8002076 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002056:	4a0a      	ldr	r2, [pc, #40]	@ (8002080 <SysTick_Config+0x40>)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	3b01      	subs	r3, #1
 800205c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800205e:	210f      	movs	r1, #15
 8002060:	f04f 30ff 	mov.w	r0, #4294967295
 8002064:	f7ff ff8e 	bl	8001f84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002068:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <SysTick_Config+0x40>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800206e:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <SysTick_Config+0x40>)
 8002070:	2207      	movs	r2, #7
 8002072:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	e000e010 	.word	0xe000e010

08002084 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800208c:	6878      	ldr	r0, [r7, #4]
 800208e:	f7ff ff47 	bl	8001f20 <__NVIC_SetPriorityGrouping>
}
 8002092:	bf00      	nop
 8002094:	3708      	adds	r7, #8
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800209a:	b580      	push	{r7, lr}
 800209c:	b086      	sub	sp, #24
 800209e:	af00      	add	r7, sp, #0
 80020a0:	4603      	mov	r3, r0
 80020a2:	60b9      	str	r1, [r7, #8]
 80020a4:	607a      	str	r2, [r7, #4]
 80020a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80020a8:	2300      	movs	r3, #0
 80020aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020ac:	f7ff ff5c 	bl	8001f68 <__NVIC_GetPriorityGrouping>
 80020b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020b2:	687a      	ldr	r2, [r7, #4]
 80020b4:	68b9      	ldr	r1, [r7, #8]
 80020b6:	6978      	ldr	r0, [r7, #20]
 80020b8:	f7ff ff8e 	bl	8001fd8 <NVIC_EncodePriority>
 80020bc:	4602      	mov	r2, r0
 80020be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020c2:	4611      	mov	r1, r2
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff5d 	bl	8001f84 <__NVIC_SetPriority>
}
 80020ca:	bf00      	nop
 80020cc:	3718      	adds	r7, #24
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffb0 	bl	8002040 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	@ 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e165      	b.n	80023d4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8154 	bne.w	80023ce <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80ae 	beq.w	80023ce <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b5d      	ldr	r3, [pc, #372]	@ (80023ec <HAL_GPIO_Init+0x300>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	4a5c      	ldr	r2, [pc, #368]	@ (80023ec <HAL_GPIO_Init+0x300>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002280:	6453      	str	r3, [r2, #68]	@ 0x44
 8002282:	4b5a      	ldr	r3, [pc, #360]	@ (80023ec <HAL_GPIO_Init+0x300>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a58      	ldr	r2, [pc, #352]	@ (80023f0 <HAL_GPIO_Init+0x304>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a4f      	ldr	r2, [pc, #316]	@ (80023f4 <HAL_GPIO_Init+0x308>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d025      	beq.n	8002306 <HAL_GPIO_Init+0x21a>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a4e      	ldr	r2, [pc, #312]	@ (80023f8 <HAL_GPIO_Init+0x30c>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d01f      	beq.n	8002302 <HAL_GPIO_Init+0x216>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a4d      	ldr	r2, [pc, #308]	@ (80023fc <HAL_GPIO_Init+0x310>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d019      	beq.n	80022fe <HAL_GPIO_Init+0x212>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a4c      	ldr	r2, [pc, #304]	@ (8002400 <HAL_GPIO_Init+0x314>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d013      	beq.n	80022fa <HAL_GPIO_Init+0x20e>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a4b      	ldr	r2, [pc, #300]	@ (8002404 <HAL_GPIO_Init+0x318>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d00d      	beq.n	80022f6 <HAL_GPIO_Init+0x20a>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a4a      	ldr	r2, [pc, #296]	@ (8002408 <HAL_GPIO_Init+0x31c>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d007      	beq.n	80022f2 <HAL_GPIO_Init+0x206>
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4a49      	ldr	r2, [pc, #292]	@ (800240c <HAL_GPIO_Init+0x320>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_GPIO_Init+0x202>
 80022ea:	2306      	movs	r3, #6
 80022ec:	e00c      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022ee:	2307      	movs	r3, #7
 80022f0:	e00a      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022f2:	2305      	movs	r3, #5
 80022f4:	e008      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022f6:	2304      	movs	r3, #4
 80022f8:	e006      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022fa:	2303      	movs	r3, #3
 80022fc:	e004      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 80022fe:	2302      	movs	r3, #2
 8002300:	e002      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 8002302:	2301      	movs	r3, #1
 8002304:	e000      	b.n	8002308 <HAL_GPIO_Init+0x21c>
 8002306:	2300      	movs	r3, #0
 8002308:	69fa      	ldr	r2, [r7, #28]
 800230a:	f002 0203 	and.w	r2, r2, #3
 800230e:	0092      	lsls	r2, r2, #2
 8002310:	4093      	lsls	r3, r2
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4313      	orrs	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002318:	4935      	ldr	r1, [pc, #212]	@ (80023f0 <HAL_GPIO_Init+0x304>)
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	089b      	lsrs	r3, r3, #2
 800231e:	3302      	adds	r3, #2
 8002320:	69ba      	ldr	r2, [r7, #24]
 8002322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002326:	4b3a      	ldr	r3, [pc, #232]	@ (8002410 <HAL_GPIO_Init+0x324>)
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	43db      	mvns	r3, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4013      	ands	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	693b      	ldr	r3, [r7, #16]
 8002346:	4313      	orrs	r3, r2
 8002348:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800234a:	4a31      	ldr	r2, [pc, #196]	@ (8002410 <HAL_GPIO_Init+0x324>)
 800234c:	69bb      	ldr	r3, [r7, #24]
 800234e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002350:	4b2f      	ldr	r3, [pc, #188]	@ (8002410 <HAL_GPIO_Init+0x324>)
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d003      	beq.n	8002374 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	4313      	orrs	r3, r2
 8002372:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002374:	4a26      	ldr	r2, [pc, #152]	@ (8002410 <HAL_GPIO_Init+0x324>)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800237a:	4b25      	ldr	r3, [pc, #148]	@ (8002410 <HAL_GPIO_Init+0x324>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	43db      	mvns	r3, r3
 8002384:	69ba      	ldr	r2, [r7, #24]
 8002386:	4013      	ands	r3, r2
 8002388:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	685b      	ldr	r3, [r3, #4]
 800238e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d003      	beq.n	800239e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800239e:	4a1c      	ldr	r2, [pc, #112]	@ (8002410 <HAL_GPIO_Init+0x324>)
 80023a0:	69bb      	ldr	r3, [r7, #24]
 80023a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80023a4:	4b1a      	ldr	r3, [pc, #104]	@ (8002410 <HAL_GPIO_Init+0x324>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	43db      	mvns	r3, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4013      	ands	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d003      	beq.n	80023c8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023c0:	69ba      	ldr	r2, [r7, #24]
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	4313      	orrs	r3, r2
 80023c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023c8:	4a11      	ldr	r2, [pc, #68]	@ (8002410 <HAL_GPIO_Init+0x324>)
 80023ca:	69bb      	ldr	r3, [r7, #24]
 80023cc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3301      	adds	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b0f      	cmp	r3, #15
 80023d8:	f67f ae96 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023dc:	bf00      	nop
 80023de:	bf00      	nop
 80023e0:	3724      	adds	r7, #36	@ 0x24
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40023800 	.word	0x40023800
 80023f0:	40013800 	.word	0x40013800
 80023f4:	40020000 	.word	0x40020000
 80023f8:	40020400 	.word	0x40020400
 80023fc:	40020800 	.word	0x40020800
 8002400:	40020c00 	.word	0x40020c00
 8002404:	40021000 	.word	0x40021000
 8002408:	40021400 	.word	0x40021400
 800240c:	40021800 	.word	0x40021800
 8002410:	40013c00 	.word	0x40013c00

08002414 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
 800241c:	460b      	mov	r3, r1
 800241e:	807b      	strh	r3, [r7, #2]
 8002420:	4613      	mov	r3, r2
 8002422:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002424:	787b      	ldrb	r3, [r7, #1]
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800242a:	887a      	ldrh	r2, [r7, #2]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002430:	e003      	b.n	800243a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002432:	887b      	ldrh	r3, [r7, #2]
 8002434:	041a      	lsls	r2, r3, #16
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	619a      	str	r2, [r3, #24]
}
 800243a:	bf00      	nop
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
	...

08002448 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b084      	sub	sp, #16
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d101      	bne.n	800245c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0cc      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800245c:	4b68      	ldr	r3, [pc, #416]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	429a      	cmp	r2, r3
 8002468:	d90c      	bls.n	8002484 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800246a:	4b65      	ldr	r3, [pc, #404]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800246c:	683a      	ldr	r2, [r7, #0]
 800246e:	b2d2      	uxtb	r2, r2
 8002470:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002472:	4b63      	ldr	r3, [pc, #396]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	429a      	cmp	r2, r3
 800247e:	d001      	beq.n	8002484 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002480:	2301      	movs	r3, #1
 8002482:	e0b8      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0302 	and.w	r3, r3, #2
 800248c:	2b00      	cmp	r3, #0
 800248e:	d020      	beq.n	80024d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0304 	and.w	r3, r3, #4
 8002498:	2b00      	cmp	r3, #0
 800249a:	d005      	beq.n	80024a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800249c:	4b59      	ldr	r3, [pc, #356]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	689b      	ldr	r3, [r3, #8]
 80024a0:	4a58      	ldr	r2, [pc, #352]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80024a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0308 	and.w	r3, r3, #8
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d005      	beq.n	80024c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024b4:	4b53      	ldr	r3, [pc, #332]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	4a52      	ldr	r2, [pc, #328]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024c0:	4b50      	ldr	r3, [pc, #320]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	494d      	ldr	r1, [pc, #308]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0301 	and.w	r3, r3, #1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d044      	beq.n	8002568 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	2b01      	cmp	r3, #1
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e6:	4b47      	ldr	r3, [pc, #284]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d119      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e07f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	2b02      	cmp	r3, #2
 80024fc:	d003      	beq.n	8002506 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002502:	2b03      	cmp	r3, #3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002506:	4b3f      	ldr	r3, [pc, #252]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800250e:	2b00      	cmp	r3, #0
 8002510:	d109      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002512:	2301      	movs	r3, #1
 8002514:	e06f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002516:	4b3b      	ldr	r3, [pc, #236]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0302 	and.w	r3, r3, #2
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e067      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002526:	4b37      	ldr	r3, [pc, #220]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f023 0203 	bic.w	r2, r3, #3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	4934      	ldr	r1, [pc, #208]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002534:	4313      	orrs	r3, r2
 8002536:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002538:	f7ff fcc2 	bl	8001ec0 <HAL_GetTick>
 800253c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800253e:	e00a      	b.n	8002556 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002540:	f7ff fcbe 	bl	8001ec0 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e04f      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002556:	4b2b      	ldr	r3, [pc, #172]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	f003 020c 	and.w	r2, r3, #12
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	429a      	cmp	r2, r3
 8002566:	d1eb      	bne.n	8002540 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002568:	4b25      	ldr	r3, [pc, #148]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0307 	and.w	r3, r3, #7
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	429a      	cmp	r2, r3
 8002574:	d20c      	bcs.n	8002590 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002576:	4b22      	ldr	r3, [pc, #136]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002578:	683a      	ldr	r2, [r7, #0]
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800257e:	4b20      	ldr	r3, [pc, #128]	@ (8002600 <HAL_RCC_ClockConfig+0x1b8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0307 	and.w	r3, r3, #7
 8002586:	683a      	ldr	r2, [r7, #0]
 8002588:	429a      	cmp	r2, r3
 800258a:	d001      	beq.n	8002590 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	e032      	b.n	80025f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0304 	and.w	r3, r3, #4
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800259c:	4b19      	ldr	r3, [pc, #100]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	68db      	ldr	r3, [r3, #12]
 80025a8:	4916      	ldr	r1, [pc, #88]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f003 0308 	and.w	r3, r3, #8
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d009      	beq.n	80025ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ba:	4b12      	ldr	r3, [pc, #72]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	00db      	lsls	r3, r3, #3
 80025c8:	490e      	ldr	r1, [pc, #56]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	4313      	orrs	r3, r2
 80025cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ce:	f000 f821 	bl	8002614 <HAL_RCC_GetSysClockFreq>
 80025d2:	4602      	mov	r2, r0
 80025d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002604 <HAL_RCC_ClockConfig+0x1bc>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	091b      	lsrs	r3, r3, #4
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	490a      	ldr	r1, [pc, #40]	@ (8002608 <HAL_RCC_ClockConfig+0x1c0>)
 80025e0:	5ccb      	ldrb	r3, [r1, r3]
 80025e2:	fa22 f303 	lsr.w	r3, r2, r3
 80025e6:	4a09      	ldr	r2, [pc, #36]	@ (800260c <HAL_RCC_ClockConfig+0x1c4>)
 80025e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ea:	4b09      	ldr	r3, [pc, #36]	@ (8002610 <HAL_RCC_ClockConfig+0x1c8>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4618      	mov	r0, r3
 80025f0:	f7ff fc22 	bl	8001e38 <HAL_InitTick>

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3710      	adds	r7, #16
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	40023c00 	.word	0x40023c00
 8002604:	40023800 	.word	0x40023800
 8002608:	08007bd8 	.word	0x08007bd8
 800260c:	20000004 	.word	0x20000004
 8002610:	20000008 	.word	0x20000008

08002614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002618:	b094      	sub	sp, #80	@ 0x50
 800261a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002620:	2300      	movs	r3, #0
 8002622:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002624:	2300      	movs	r3, #0
 8002626:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002628:	2300      	movs	r3, #0
 800262a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800262c:	4b79      	ldr	r3, [pc, #484]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800262e:	689b      	ldr	r3, [r3, #8]
 8002630:	f003 030c 	and.w	r3, r3, #12
 8002634:	2b08      	cmp	r3, #8
 8002636:	d00d      	beq.n	8002654 <HAL_RCC_GetSysClockFreq+0x40>
 8002638:	2b08      	cmp	r3, #8
 800263a:	f200 80e1 	bhi.w	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
 800263e:	2b00      	cmp	r3, #0
 8002640:	d002      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x34>
 8002642:	2b04      	cmp	r3, #4
 8002644:	d003      	beq.n	800264e <HAL_RCC_GetSysClockFreq+0x3a>
 8002646:	e0db      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002648:	4b73      	ldr	r3, [pc, #460]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 800264a:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 800264c:	e0db      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800264e:	4b73      	ldr	r3, [pc, #460]	@ (800281c <HAL_RCC_GetSysClockFreq+0x208>)
 8002650:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002652:	e0d8      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002654:	4b6f      	ldr	r3, [pc, #444]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800265c:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800265e:	4b6d      	ldr	r3, [pc, #436]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002666:	2b00      	cmp	r3, #0
 8002668:	d063      	beq.n	8002732 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800266a:	4b6a      	ldr	r3, [pc, #424]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	099b      	lsrs	r3, r3, #6
 8002670:	2200      	movs	r2, #0
 8002672:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002674:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002676:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002678:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800267c:	633b      	str	r3, [r7, #48]	@ 0x30
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	@ 0x34
 8002682:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002686:	4622      	mov	r2, r4
 8002688:	462b      	mov	r3, r5
 800268a:	f04f 0000 	mov.w	r0, #0
 800268e:	f04f 0100 	mov.w	r1, #0
 8002692:	0159      	lsls	r1, r3, #5
 8002694:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002698:	0150      	lsls	r0, r2, #5
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4621      	mov	r1, r4
 80026a0:	1a51      	subs	r1, r2, r1
 80026a2:	6139      	str	r1, [r7, #16]
 80026a4:	4629      	mov	r1, r5
 80026a6:	eb63 0301 	sbc.w	r3, r3, r1
 80026aa:	617b      	str	r3, [r7, #20]
 80026ac:	f04f 0200 	mov.w	r2, #0
 80026b0:	f04f 0300 	mov.w	r3, #0
 80026b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026b8:	4659      	mov	r1, fp
 80026ba:	018b      	lsls	r3, r1, #6
 80026bc:	4651      	mov	r1, sl
 80026be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026c2:	4651      	mov	r1, sl
 80026c4:	018a      	lsls	r2, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ebb2 0801 	subs.w	r8, r2, r1
 80026cc:	4659      	mov	r1, fp
 80026ce:	eb63 0901 	sbc.w	r9, r3, r1
 80026d2:	f04f 0200 	mov.w	r2, #0
 80026d6:	f04f 0300 	mov.w	r3, #0
 80026da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026e6:	4690      	mov	r8, r2
 80026e8:	4699      	mov	r9, r3
 80026ea:	4623      	mov	r3, r4
 80026ec:	eb18 0303 	adds.w	r3, r8, r3
 80026f0:	60bb      	str	r3, [r7, #8]
 80026f2:	462b      	mov	r3, r5
 80026f4:	eb49 0303 	adc.w	r3, r9, r3
 80026f8:	60fb      	str	r3, [r7, #12]
 80026fa:	f04f 0200 	mov.w	r2, #0
 80026fe:	f04f 0300 	mov.w	r3, #0
 8002702:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002706:	4629      	mov	r1, r5
 8002708:	024b      	lsls	r3, r1, #9
 800270a:	4621      	mov	r1, r4
 800270c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002710:	4621      	mov	r1, r4
 8002712:	024a      	lsls	r2, r1, #9
 8002714:	4610      	mov	r0, r2
 8002716:	4619      	mov	r1, r3
 8002718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800271a:	2200      	movs	r2, #0
 800271c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800271e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002720:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002724:	f7fe f8d2 	bl	80008cc <__aeabi_uldivmod>
 8002728:	4602      	mov	r2, r0
 800272a:	460b      	mov	r3, r1
 800272c:	4613      	mov	r3, r2
 800272e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002730:	e058      	b.n	80027e4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002732:	4b38      	ldr	r3, [pc, #224]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	099b      	lsrs	r3, r3, #6
 8002738:	2200      	movs	r2, #0
 800273a:	4618      	mov	r0, r3
 800273c:	4611      	mov	r1, r2
 800273e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002742:	623b      	str	r3, [r7, #32]
 8002744:	2300      	movs	r3, #0
 8002746:	627b      	str	r3, [r7, #36]	@ 0x24
 8002748:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800274c:	4642      	mov	r2, r8
 800274e:	464b      	mov	r3, r9
 8002750:	f04f 0000 	mov.w	r0, #0
 8002754:	f04f 0100 	mov.w	r1, #0
 8002758:	0159      	lsls	r1, r3, #5
 800275a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800275e:	0150      	lsls	r0, r2, #5
 8002760:	4602      	mov	r2, r0
 8002762:	460b      	mov	r3, r1
 8002764:	4641      	mov	r1, r8
 8002766:	ebb2 0a01 	subs.w	sl, r2, r1
 800276a:	4649      	mov	r1, r9
 800276c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002770:	f04f 0200 	mov.w	r2, #0
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800277c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002780:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002784:	ebb2 040a 	subs.w	r4, r2, sl
 8002788:	eb63 050b 	sbc.w	r5, r3, fp
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	00eb      	lsls	r3, r5, #3
 8002796:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800279a:	00e2      	lsls	r2, r4, #3
 800279c:	4614      	mov	r4, r2
 800279e:	461d      	mov	r5, r3
 80027a0:	4643      	mov	r3, r8
 80027a2:	18e3      	adds	r3, r4, r3
 80027a4:	603b      	str	r3, [r7, #0]
 80027a6:	464b      	mov	r3, r9
 80027a8:	eb45 0303 	adc.w	r3, r5, r3
 80027ac:	607b      	str	r3, [r7, #4]
 80027ae:	f04f 0200 	mov.w	r2, #0
 80027b2:	f04f 0300 	mov.w	r3, #0
 80027b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ba:	4629      	mov	r1, r5
 80027bc:	028b      	lsls	r3, r1, #10
 80027be:	4621      	mov	r1, r4
 80027c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027c4:	4621      	mov	r1, r4
 80027c6:	028a      	lsls	r2, r1, #10
 80027c8:	4610      	mov	r0, r2
 80027ca:	4619      	mov	r1, r3
 80027cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027ce:	2200      	movs	r2, #0
 80027d0:	61bb      	str	r3, [r7, #24]
 80027d2:	61fa      	str	r2, [r7, #28]
 80027d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027d8:	f7fe f878 	bl	80008cc <__aeabi_uldivmod>
 80027dc:	4602      	mov	r2, r0
 80027de:	460b      	mov	r3, r1
 80027e0:	4613      	mov	r3, r2
 80027e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002814 <HAL_RCC_GetSysClockFreq+0x200>)
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	0c1b      	lsrs	r3, r3, #16
 80027ea:	f003 0303 	and.w	r3, r3, #3
 80027ee:	3301      	adds	r3, #1
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80027f4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027fc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027fe:	e002      	b.n	8002806 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002800:	4b05      	ldr	r3, [pc, #20]	@ (8002818 <HAL_RCC_GetSysClockFreq+0x204>)
 8002802:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002804:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002806:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002808:	4618      	mov	r0, r3
 800280a:	3750      	adds	r7, #80	@ 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800
 8002818:	00f42400 	.word	0x00f42400
 800281c:	007a1200 	.word	0x007a1200

08002820 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e273      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	2b00      	cmp	r3, #0
 800283c:	d075      	beq.n	800292a <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800283e:	4b88      	ldr	r3, [pc, #544]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
 8002846:	2b04      	cmp	r3, #4
 8002848:	d00c      	beq.n	8002864 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b85      	ldr	r3, [pc, #532]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002852:	2b08      	cmp	r3, #8
 8002854:	d112      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002856:	4b82      	ldr	r3, [pc, #520]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800285e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002862:	d10b      	bne.n	800287c <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002864:	4b7e      	ldr	r3, [pc, #504]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d05b      	beq.n	8002928 <HAL_RCC_OscConfig+0x108>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d157      	bne.n	8002928 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e24e      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002884:	d106      	bne.n	8002894 <HAL_RCC_OscConfig+0x74>
 8002886:	4b76      	ldr	r3, [pc, #472]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a75      	ldr	r2, [pc, #468]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 800288c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002890:	6013      	str	r3, [r2, #0]
 8002892:	e01d      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800289c:	d10c      	bne.n	80028b8 <HAL_RCC_OscConfig+0x98>
 800289e:	4b70      	ldr	r3, [pc, #448]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6f      	ldr	r2, [pc, #444]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	4b6d      	ldr	r3, [pc, #436]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4a6c      	ldr	r2, [pc, #432]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028b4:	6013      	str	r3, [r2, #0]
 80028b6:	e00b      	b.n	80028d0 <HAL_RCC_OscConfig+0xb0>
 80028b8:	4b69      	ldr	r3, [pc, #420]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a68      	ldr	r2, [pc, #416]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028c2:	6013      	str	r3, [r2, #0]
 80028c4:	4b66      	ldr	r3, [pc, #408]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	4a65      	ldr	r2, [pc, #404]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d013      	beq.n	8002900 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028d8:	f7ff faf2 	bl	8001ec0 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028de:	e008      	b.n	80028f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028e0:	f7ff faee 	bl	8001ec0 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	2b64      	cmp	r3, #100	@ 0x64
 80028ec:	d901      	bls.n	80028f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028ee:	2303      	movs	r3, #3
 80028f0:	e213      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028f2:	4b5b      	ldr	r3, [pc, #364]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d0f0      	beq.n	80028e0 <HAL_RCC_OscConfig+0xc0>
 80028fe:	e014      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002900:	f7ff fade 	bl	8001ec0 <HAL_GetTick>
 8002904:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002906:	e008      	b.n	800291a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002908:	f7ff fada 	bl	8001ec0 <HAL_GetTick>
 800290c:	4602      	mov	r2, r0
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	1ad3      	subs	r3, r2, r3
 8002912:	2b64      	cmp	r3, #100	@ 0x64
 8002914:	d901      	bls.n	800291a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002916:	2303      	movs	r3, #3
 8002918:	e1ff      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800291a:	4b51      	ldr	r3, [pc, #324]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1f0      	bne.n	8002908 <HAL_RCC_OscConfig+0xe8>
 8002926:	e000      	b.n	800292a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002928:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d063      	beq.n	80029fe <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002936:	4b4a      	ldr	r3, [pc, #296]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b47      	ldr	r3, [pc, #284]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800294a:	2b08      	cmp	r3, #8
 800294c:	d11c      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800294e:	4b44      	ldr	r3, [pc, #272]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002956:	2b00      	cmp	r3, #0
 8002958:	d116      	bne.n	8002988 <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800295a:	4b41      	ldr	r3, [pc, #260]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0302 	and.w	r3, r3, #2
 8002962:	2b00      	cmp	r3, #0
 8002964:	d005      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d001      	beq.n	8002972 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e1d3      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002972:	4b3b      	ldr	r3, [pc, #236]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	00db      	lsls	r3, r3, #3
 8002980:	4937      	ldr	r1, [pc, #220]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002982:	4313      	orrs	r3, r2
 8002984:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002986:	e03a      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d020      	beq.n	80029d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002990:	4b34      	ldr	r3, [pc, #208]	@ (8002a64 <HAL_RCC_OscConfig+0x244>)
 8002992:	2201      	movs	r2, #1
 8002994:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002996:	f7ff fa93 	bl	8001ec0 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800299c:	e008      	b.n	80029b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800299e:	f7ff fa8f 	bl	8001ec0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d901      	bls.n	80029b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e1b4      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b0:	4b2b      	ldr	r3, [pc, #172]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0302 	and.w	r3, r3, #2
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d0f0      	beq.n	800299e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029bc:	4b28      	ldr	r3, [pc, #160]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4925      	ldr	r1, [pc, #148]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	600b      	str	r3, [r1, #0]
 80029d0:	e015      	b.n	80029fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029d2:	4b24      	ldr	r3, [pc, #144]	@ (8002a64 <HAL_RCC_OscConfig+0x244>)
 80029d4:	2200      	movs	r2, #0
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f7ff fa72 	bl	8001ec0 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f7ff fa6e 	bl	8001ec0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e193      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029f2:	4b1b      	ldr	r3, [pc, #108]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d1f0      	bne.n	80029e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f003 0308 	and.w	r3, r3, #8
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d036      	beq.n	8002a78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	695b      	ldr	r3, [r3, #20]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d016      	beq.n	8002a40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a12:	4b15      	ldr	r3, [pc, #84]	@ (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a14:	2201      	movs	r2, #1
 8002a16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a18:	f7ff fa52 	bl	8001ec0 <HAL_GetTick>
 8002a1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a1e:	e008      	b.n	8002a32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7ff fa4e 	bl	8001ec0 <HAL_GetTick>
 8002a24:	4602      	mov	r2, r0
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	1ad3      	subs	r3, r2, r3
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d901      	bls.n	8002a32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	e173      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a32:	4b0b      	ldr	r3, [pc, #44]	@ (8002a60 <HAL_RCC_OscConfig+0x240>)
 8002a34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a36:	f003 0302 	and.w	r3, r3, #2
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d0f0      	beq.n	8002a20 <HAL_RCC_OscConfig+0x200>
 8002a3e:	e01b      	b.n	8002a78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a40:	4b09      	ldr	r3, [pc, #36]	@ (8002a68 <HAL_RCC_OscConfig+0x248>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7ff fa3b 	bl	8001ec0 <HAL_GetTick>
 8002a4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a4c:	e00e      	b.n	8002a6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a4e:	f7ff fa37 	bl	8001ec0 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	693b      	ldr	r3, [r7, #16]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	2b02      	cmp	r3, #2
 8002a5a:	d907      	bls.n	8002a6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a5c:	2303      	movs	r3, #3
 8002a5e:	e15c      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
 8002a60:	40023800 	.word	0x40023800
 8002a64:	42470000 	.word	0x42470000
 8002a68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a6c:	4b8a      	ldr	r3, [pc, #552]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d1ea      	bne.n	8002a4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0304 	and.w	r3, r3, #4
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	f000 8097 	beq.w	8002bb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a86:	2300      	movs	r3, #0
 8002a88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a8a:	4b83      	ldr	r3, [pc, #524]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d10f      	bne.n	8002ab6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a96:	2300      	movs	r3, #0
 8002a98:	60bb      	str	r3, [r7, #8]
 8002a9a:	4b7f      	ldr	r3, [pc, #508]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	4a7e      	ldr	r2, [pc, #504]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002aa0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	6413      	str	r3, [r2, #64]	@ 0x40
 8002aa6:	4b7c      	ldr	r3, [pc, #496]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aae:	60bb      	str	r3, [r7, #8]
 8002ab0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ab2:	2301      	movs	r3, #1
 8002ab4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ab6:	4b79      	ldr	r3, [pc, #484]	@ (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d118      	bne.n	8002af4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ac2:	4b76      	ldr	r3, [pc, #472]	@ (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	4a75      	ldr	r2, [pc, #468]	@ (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002acc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ace:	f7ff f9f7 	bl	8001ec0 <HAL_GetTick>
 8002ad2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ad4:	e008      	b.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ad6:	f7ff f9f3 	bl	8001ec0 <HAL_GetTick>
 8002ada:	4602      	mov	r2, r0
 8002adc:	693b      	ldr	r3, [r7, #16]
 8002ade:	1ad3      	subs	r3, r2, r3
 8002ae0:	2b02      	cmp	r3, #2
 8002ae2:	d901      	bls.n	8002ae8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	e118      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae8:	4b6c      	ldr	r3, [pc, #432]	@ (8002c9c <HAL_RCC_OscConfig+0x47c>)
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0f0      	beq.n	8002ad6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d106      	bne.n	8002b0a <HAL_RCC_OscConfig+0x2ea>
 8002afc:	4b66      	ldr	r3, [pc, #408]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002afe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b00:	4a65      	ldr	r2, [pc, #404]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b02:	f043 0301 	orr.w	r3, r3, #1
 8002b06:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b08:	e01c      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	2b05      	cmp	r3, #5
 8002b10:	d10c      	bne.n	8002b2c <HAL_RCC_OscConfig+0x30c>
 8002b12:	4b61      	ldr	r3, [pc, #388]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	4a60      	ldr	r2, [pc, #384]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b18:	f043 0304 	orr.w	r3, r3, #4
 8002b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1e:	4b5e      	ldr	r3, [pc, #376]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b22:	4a5d      	ldr	r2, [pc, #372]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b24:	f043 0301 	orr.w	r3, r3, #1
 8002b28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2a:	e00b      	b.n	8002b44 <HAL_RCC_OscConfig+0x324>
 8002b2c:	4b5a      	ldr	r3, [pc, #360]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a59      	ldr	r2, [pc, #356]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b32:	f023 0301 	bic.w	r3, r3, #1
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b38:	4b57      	ldr	r3, [pc, #348]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b3c:	4a56      	ldr	r2, [pc, #344]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b3e:	f023 0304 	bic.w	r3, r3, #4
 8002b42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	689b      	ldr	r3, [r3, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d015      	beq.n	8002b78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7ff f9b8 	bl	8001ec0 <HAL_GetTick>
 8002b50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7ff f9b4 	bl	8001ec0 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	693b      	ldr	r3, [r7, #16]
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e0d7      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b6a:	4b4b      	ldr	r3, [pc, #300]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d0ee      	beq.n	8002b54 <HAL_RCC_OscConfig+0x334>
 8002b76:	e014      	b.n	8002ba2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b78:	f7ff f9a2 	bl	8001ec0 <HAL_GetTick>
 8002b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b80:	f7ff f99e 	bl	8001ec0 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e0c1      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b96:	4b40      	ldr	r3, [pc, #256]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002b98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9a:	f003 0302 	and.w	r3, r3, #2
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1ee      	bne.n	8002b80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ba2:	7dfb      	ldrb	r3, [r7, #23]
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d105      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ba8:	4b3b      	ldr	r3, [pc, #236]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bac:	4a3a      	ldr	r2, [pc, #232]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002bb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	699b      	ldr	r3, [r3, #24]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80ad 	beq.w	8002d18 <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bbe:	4b36      	ldr	r3, [pc, #216]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	f003 030c 	and.w	r3, r3, #12
 8002bc6:	2b08      	cmp	r3, #8
 8002bc8:	d060      	beq.n	8002c8c <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	2b02      	cmp	r3, #2
 8002bd0:	d145      	bne.n	8002c5e <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b33      	ldr	r3, [pc, #204]	@ (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd8:	f7ff f972 	bl	8001ec0 <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be0:	f7ff f96e 	bl	8001ec0 <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e093      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf2:	4b29      	ldr	r3, [pc, #164]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	69da      	ldr	r2, [r3, #28]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	019b      	lsls	r3, r3, #6
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c14:	085b      	lsrs	r3, r3, #1
 8002c16:	3b01      	subs	r3, #1
 8002c18:	041b      	lsls	r3, r3, #16
 8002c1a:	431a      	orrs	r2, r3
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c20:	061b      	lsls	r3, r3, #24
 8002c22:	431a      	orrs	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c28:	071b      	lsls	r3, r3, #28
 8002c2a:	491b      	ldr	r1, [pc, #108]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c30:	4b1b      	ldr	r3, [pc, #108]	@ (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002c32:	2201      	movs	r2, #1
 8002c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c36:	f7ff f943 	bl	8001ec0 <HAL_GetTick>
 8002c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c3c:	e008      	b.n	8002c50 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c3e:	f7ff f93f 	bl	8001ec0 <HAL_GetTick>
 8002c42:	4602      	mov	r2, r0
 8002c44:	693b      	ldr	r3, [r7, #16]
 8002c46:	1ad3      	subs	r3, r2, r3
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d901      	bls.n	8002c50 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e064      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c50:	4b11      	ldr	r3, [pc, #68]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d0f0      	beq.n	8002c3e <HAL_RCC_OscConfig+0x41e>
 8002c5c:	e05c      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c5e:	4b10      	ldr	r3, [pc, #64]	@ (8002ca0 <HAL_RCC_OscConfig+0x480>)
 8002c60:	2200      	movs	r2, #0
 8002c62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c64:	f7ff f92c 	bl	8001ec0 <HAL_GetTick>
 8002c68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c6a:	e008      	b.n	8002c7e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c6c:	f7ff f928 	bl	8001ec0 <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d901      	bls.n	8002c7e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c7a:	2303      	movs	r3, #3
 8002c7c:	e04d      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c7e:	4b06      	ldr	r3, [pc, #24]	@ (8002c98 <HAL_RCC_OscConfig+0x478>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d1f0      	bne.n	8002c6c <HAL_RCC_OscConfig+0x44c>
 8002c8a:	e045      	b.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	699b      	ldr	r3, [r3, #24]
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d107      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e040      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
 8002c98:	40023800 	.word	0x40023800
 8002c9c:	40007000 	.word	0x40007000
 8002ca0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002ca4:	4b1f      	ldr	r3, [pc, #124]	@ (8002d24 <HAL_RCC_OscConfig+0x504>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	699b      	ldr	r3, [r3, #24]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d030      	beq.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d129      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d122      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cce:	68fa      	ldr	r2, [r7, #12]
 8002cd0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cd4:	4013      	ands	r3, r2
 8002cd6:	687a      	ldr	r2, [r7, #4]
 8002cd8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cda:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d119      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cea:	085b      	lsrs	r3, r3, #1
 8002cec:	3b01      	subs	r3, #1
 8002cee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d10f      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cfe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d107      	bne.n	8002d14 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d0e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d10:	429a      	cmp	r2, r3
 8002d12:	d001      	beq.n	8002d18 <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d14:	2301      	movs	r3, #1
 8002d16:	e000      	b.n	8002d1a <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3718      	adds	r7, #24
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800

08002d28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d28:	b580      	push	{r7, lr}
 8002d2a:	b082      	sub	sp, #8
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d101      	bne.n	8002d3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e07b      	b.n	8002e32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d108      	bne.n	8002d54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d4a:	d009      	beq.n	8002d60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	61da      	str	r2, [r3, #28]
 8002d52:	e005      	b.n	8002d60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2200      	movs	r2, #0
 8002d64:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d106      	bne.n	8002d80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2200      	movs	r2, #0
 8002d76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7fe fea2 	bl	8001ac4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2202      	movs	r2, #2
 8002d84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002da8:	431a      	orrs	r2, r3
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002db2:	431a      	orrs	r2, r3
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	691b      	ldr	r3, [r3, #16]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	f003 0301 	and.w	r3, r3, #1
 8002dc6:	431a      	orrs	r2, r3
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	699b      	ldr	r3, [r3, #24]
 8002dcc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dd0:	431a      	orrs	r2, r3
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69db      	ldr	r3, [r3, #28]
 8002dd6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dda:	431a      	orrs	r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a1b      	ldr	r3, [r3, #32]
 8002de0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002de4:	ea42 0103 	orr.w	r1, r2, r3
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dec:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	430a      	orrs	r2, r1
 8002df6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	0c1b      	lsrs	r3, r3, #16
 8002dfe:	f003 0104 	and.w	r1, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f003 0210 	and.w	r2, r3, #16
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69da      	ldr	r2, [r3, #28]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3708      	adds	r7, #8
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}

08002e3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e3a:	b580      	push	{r7, lr}
 8002e3c:	b088      	sub	sp, #32
 8002e3e:	af00      	add	r7, sp, #0
 8002e40:	60f8      	str	r0, [r7, #12]
 8002e42:	60b9      	str	r1, [r7, #8]
 8002e44:	603b      	str	r3, [r7, #0]
 8002e46:	4613      	mov	r3, r2
 8002e48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_SPI_Transmit+0x22>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e12d      	b.n	80030b8 <HAL_SPI_Transmit+0x27e>
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e64:	f7ff f82c 	bl	8001ec0 <HAL_GetTick>
 8002e68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e6a:	88fb      	ldrh	r3, [r7, #6]
 8002e6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	2b01      	cmp	r3, #1
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e7a:	2302      	movs	r3, #2
 8002e7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e7e:	e116      	b.n	80030ae <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e80:	68bb      	ldr	r3, [r7, #8]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d002      	beq.n	8002e8c <HAL_SPI_Transmit+0x52>
 8002e86:	88fb      	ldrh	r3, [r7, #6]
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e8c:	2301      	movs	r3, #1
 8002e8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e90:	e10d      	b.n	80030ae <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2203      	movs	r2, #3
 8002e96:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	68ba      	ldr	r2, [r7, #8]
 8002ea4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	88fa      	ldrh	r2, [r7, #6]
 8002eaa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	88fa      	ldrh	r2, [r7, #6]
 8002eb0:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	689b      	ldr	r3, [r3, #8]
 8002ed4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ed8:	d10f      	bne.n	8002efa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ee8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002ef8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f04:	2b40      	cmp	r3, #64	@ 0x40
 8002f06:	d007      	beq.n	8002f18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	681a      	ldr	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	68db      	ldr	r3, [r3, #12]
 8002f1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f20:	d14f      	bne.n	8002fc2 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d002      	beq.n	8002f30 <HAL_SPI_Transmit+0xf6>
 8002f2a:	8afb      	ldrh	r3, [r7, #22]
 8002f2c:	2b01      	cmp	r3, #1
 8002f2e:	d142      	bne.n	8002fb6 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f40:	1c9a      	adds	r2, r3, #2
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f4a:	b29b      	uxth	r3, r3
 8002f4c:	3b01      	subs	r3, #1
 8002f4e:	b29a      	uxth	r2, r3
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f54:	e02f      	b.n	8002fb6 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	f003 0302 	and.w	r3, r3, #2
 8002f60:	2b02      	cmp	r3, #2
 8002f62:	d112      	bne.n	8002f8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	881a      	ldrh	r2, [r3, #0]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f74:	1c9a      	adds	r2, r3, #2
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f88:	e015      	b.n	8002fb6 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f8a:	f7fe ff99 	bl	8001ec0 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	683a      	ldr	r2, [r7, #0]
 8002f96:	429a      	cmp	r2, r3
 8002f98:	d803      	bhi.n	8002fa2 <HAL_SPI_Transmit+0x168>
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fa0:	d102      	bne.n	8002fa8 <HAL_SPI_Transmit+0x16e>
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d106      	bne.n	8002fb6 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002fa8:	2303      	movs	r3, #3
 8002faa:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fb4:	e07b      	b.n	80030ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fba:	b29b      	uxth	r3, r3
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d1ca      	bne.n	8002f56 <HAL_SPI_Transmit+0x11c>
 8002fc0:	e050      	b.n	8003064 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d002      	beq.n	8002fd0 <HAL_SPI_Transmit+0x196>
 8002fca:	8afb      	ldrh	r3, [r7, #22]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d144      	bne.n	800305a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	330c      	adds	r3, #12
 8002fda:	7812      	ldrb	r2, [r2, #0]
 8002fdc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fe2:	1c5a      	adds	r2, r3, #1
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fec:	b29b      	uxth	r3, r3
 8002fee:	3b01      	subs	r3, #1
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002ff6:	e030      	b.n	800305a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f003 0302 	and.w	r3, r3, #2
 8003002:	2b02      	cmp	r3, #2
 8003004:	d113      	bne.n	800302e <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800302c:	e015      	b.n	800305a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800302e:	f7fe ff47 	bl	8001ec0 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	69bb      	ldr	r3, [r7, #24]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	683a      	ldr	r2, [r7, #0]
 800303a:	429a      	cmp	r2, r3
 800303c:	d803      	bhi.n	8003046 <HAL_SPI_Transmit+0x20c>
 800303e:	683b      	ldr	r3, [r7, #0]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d102      	bne.n	800304c <HAL_SPI_Transmit+0x212>
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d106      	bne.n	800305a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800304c:	2303      	movs	r3, #3
 800304e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003058:	e029      	b.n	80030ae <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	d1c9      	bne.n	8002ff8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	6839      	ldr	r1, [r7, #0]
 8003068:	68f8      	ldr	r0, [r7, #12]
 800306a:	f000 fa61 	bl	8003530 <SPI_EndRxTxTransaction>
 800306e:	4603      	mov	r3, r0
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	2220      	movs	r2, #32
 8003078:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10a      	bne.n	8003098 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003082:	2300      	movs	r3, #0
 8003084:	613b      	str	r3, [r7, #16]
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	68db      	ldr	r3, [r3, #12]
 800308c:	613b      	str	r3, [r7, #16]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	613b      	str	r3, [r7, #16]
 8003096:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800309c:	2b00      	cmp	r3, #0
 800309e:	d002      	beq.n	80030a6 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
 80030a2:	77fb      	strb	r3, [r7, #31]
 80030a4:	e003      	b.n	80030ae <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	2201      	movs	r2, #1
 80030aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	2200      	movs	r2, #0
 80030b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030b6:	7ffb      	ldrb	r3, [r7, #31]
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	3720      	adds	r7, #32
 80030bc:	46bd      	mov	sp, r7
 80030be:	bd80      	pop	{r7, pc}

080030c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08c      	sub	sp, #48	@ 0x30
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]
 80030cc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030ce:	2301      	movs	r3, #1
 80030d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030d2:	2300      	movs	r3, #0
 80030d4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030de:	2b01      	cmp	r3, #1
 80030e0:	d101      	bne.n	80030e6 <HAL_SPI_TransmitReceive+0x26>
 80030e2:	2302      	movs	r3, #2
 80030e4:	e198      	b.n	8003418 <HAL_SPI_TransmitReceive+0x358>
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2201      	movs	r2, #1
 80030ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ee:	f7fe fee7 	bl	8001ec0 <HAL_GetTick>
 80030f2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8003104:	887b      	ldrh	r3, [r7, #2]
 8003106:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003108:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800310c:	2b01      	cmp	r3, #1
 800310e:	d00f      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x70>
 8003110:	69fb      	ldr	r3, [r7, #28]
 8003112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003116:	d107      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d103      	bne.n	8003128 <HAL_SPI_TransmitReceive+0x68>
 8003120:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003124:	2b04      	cmp	r3, #4
 8003126:	d003      	beq.n	8003130 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8003128:	2302      	movs	r3, #2
 800312a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800312e:	e16d      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x82>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d002      	beq.n	8003142 <HAL_SPI_TransmitReceive+0x82>
 800313c:	887b      	ldrh	r3, [r7, #2]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d103      	bne.n	800314a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003148:	e160      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003150:	b2db      	uxtb	r3, r3
 8003152:	2b04      	cmp	r3, #4
 8003154:	d003      	beq.n	800315e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2205      	movs	r2, #5
 800315a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2200      	movs	r2, #0
 8003162:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	887a      	ldrh	r2, [r7, #2]
 800316e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	68ba      	ldr	r2, [r7, #8]
 800317a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	887a      	ldrh	r2, [r7, #2]
 8003180:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	887a      	ldrh	r2, [r7, #2]
 8003186:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800319e:	2b40      	cmp	r3, #64	@ 0x40
 80031a0:	d007      	beq.n	80031b2 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031b0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ba:	d17c      	bne.n	80032b6 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d002      	beq.n	80031ca <HAL_SPI_TransmitReceive+0x10a>
 80031c4:	8b7b      	ldrh	r3, [r7, #26]
 80031c6:	2b01      	cmp	r3, #1
 80031c8:	d16a      	bne.n	80032a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	881a      	ldrh	r2, [r3, #0]
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031da:	1c9a      	adds	r2, r3, #2
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031e4:	b29b      	uxth	r3, r3
 80031e6:	3b01      	subs	r3, #1
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031ee:	e057      	b.n	80032a0 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d11b      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x176>
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003202:	b29b      	uxth	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d016      	beq.n	8003236 <HAL_SPI_TransmitReceive+0x176>
 8003208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800320a:	2b01      	cmp	r3, #1
 800320c:	d113      	bne.n	8003236 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	881a      	ldrh	r2, [r3, #0]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800321e:	1c9a      	adds	r2, r3, #2
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003228:	b29b      	uxth	r3, r3
 800322a:	3b01      	subs	r3, #1
 800322c:	b29a      	uxth	r2, r3
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0301 	and.w	r3, r3, #1
 8003240:	2b01      	cmp	r3, #1
 8003242:	d119      	bne.n	8003278 <HAL_SPI_TransmitReceive+0x1b8>
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003248:	b29b      	uxth	r3, r3
 800324a:	2b00      	cmp	r3, #0
 800324c:	d014      	beq.n	8003278 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68da      	ldr	r2, [r3, #12]
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003258:	b292      	uxth	r2, r2
 800325a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003260:	1c9a      	adds	r2, r3, #2
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800326a:	b29b      	uxth	r3, r3
 800326c:	3b01      	subs	r3, #1
 800326e:	b29a      	uxth	r2, r3
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003274:	2301      	movs	r3, #1
 8003276:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003278:	f7fe fe22 	bl	8001ec0 <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003284:	429a      	cmp	r2, r3
 8003286:	d80b      	bhi.n	80032a0 <HAL_SPI_TransmitReceive+0x1e0>
 8003288:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d007      	beq.n	80032a0 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003290:	2303      	movs	r3, #3
 8003292:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 800329e:	e0b5      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1a2      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x130>
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032ae:	b29b      	uxth	r3, r3
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d19d      	bne.n	80031f0 <HAL_SPI_TransmitReceive+0x130>
 80032b4:	e080      	b.n	80033b8 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d002      	beq.n	80032c4 <HAL_SPI_TransmitReceive+0x204>
 80032be:	8b7b      	ldrh	r3, [r7, #26]
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d16f      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	330c      	adds	r3, #12
 80032ce:	7812      	ldrb	r2, [r2, #0]
 80032d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d6:	1c5a      	adds	r2, r3, #1
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032e0:	b29b      	uxth	r3, r3
 80032e2:	3b01      	subs	r3, #1
 80032e4:	b29a      	uxth	r2, r3
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032ea:	e05b      	b.n	80033a4 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d11c      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x274>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d017      	beq.n	8003334 <HAL_SPI_TransmitReceive+0x274>
 8003304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003306:	2b01      	cmp	r3, #1
 8003308:	d114      	bne.n	8003334 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	330c      	adds	r3, #12
 8003314:	7812      	ldrb	r2, [r2, #0]
 8003316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331c:	1c5a      	adds	r2, r3, #1
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003326:	b29b      	uxth	r3, r3
 8003328:	3b01      	subs	r3, #1
 800332a:	b29a      	uxth	r2, r3
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003330:	2300      	movs	r3, #0
 8003332:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f003 0301 	and.w	r3, r3, #1
 800333e:	2b01      	cmp	r3, #1
 8003340:	d119      	bne.n	8003376 <HAL_SPI_TransmitReceive+0x2b6>
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003346:	b29b      	uxth	r3, r3
 8003348:	2b00      	cmp	r3, #0
 800334a:	d014      	beq.n	8003376 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003356:	b2d2      	uxtb	r2, r2
 8003358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800335e:	1c5a      	adds	r2, r3, #1
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003368:	b29b      	uxth	r3, r3
 800336a:	3b01      	subs	r3, #1
 800336c:	b29a      	uxth	r2, r3
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003372:	2301      	movs	r3, #1
 8003374:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003376:	f7fe fda3 	bl	8001ec0 <HAL_GetTick>
 800337a:	4602      	mov	r2, r0
 800337c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337e:	1ad3      	subs	r3, r2, r3
 8003380:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003382:	429a      	cmp	r2, r3
 8003384:	d803      	bhi.n	800338e <HAL_SPI_TransmitReceive+0x2ce>
 8003386:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800338c:	d102      	bne.n	8003394 <HAL_SPI_TransmitReceive+0x2d4>
 800338e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003394:	2303      	movs	r3, #3
 8003396:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	2201      	movs	r2, #1
 800339e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 80033a2:	e033      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033a8:	b29b      	uxth	r3, r3
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d19e      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x22c>
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033b2:	b29b      	uxth	r3, r3
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d199      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ba:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	f000 f8b7 	bl	8003530 <SPI_EndRxTxTransaction>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d006      	beq.n	80033d6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033c8:	2301      	movs	r3, #1
 80033ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2220      	movs	r2, #32
 80033d2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80033d4:	e01a      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d10a      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	68db      	ldr	r3, [r3, #12]
 80033e8:	617b      	str	r3, [r7, #20]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	689b      	ldr	r3, [r3, #8]
 80033f0:	617b      	str	r3, [r7, #20]
 80033f2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d003      	beq.n	8003404 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003402:	e003      	b.n	800340c <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2200      	movs	r2, #0
 8003410:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003414:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003418:	4618      	mov	r0, r3
 800341a:	3730      	adds	r7, #48	@ 0x30
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b088      	sub	sp, #32
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	603b      	str	r3, [r7, #0]
 800342c:	4613      	mov	r3, r2
 800342e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003430:	f7fe fd46 	bl	8001ec0 <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003438:	1a9b      	subs	r3, r3, r2
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	4413      	add	r3, r2
 800343e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003440:	f7fe fd3e 	bl	8001ec0 <HAL_GetTick>
 8003444:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003446:	4b39      	ldr	r3, [pc, #228]	@ (800352c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	015b      	lsls	r3, r3, #5
 800344c:	0d1b      	lsrs	r3, r3, #20
 800344e:	69fa      	ldr	r2, [r7, #28]
 8003450:	fb02 f303 	mul.w	r3, r2, r3
 8003454:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003456:	e054      	b.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800345e:	d050      	beq.n	8003502 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003460:	f7fe fd2e 	bl	8001ec0 <HAL_GetTick>
 8003464:	4602      	mov	r2, r0
 8003466:	69bb      	ldr	r3, [r7, #24]
 8003468:	1ad3      	subs	r3, r2, r3
 800346a:	69fa      	ldr	r2, [r7, #28]
 800346c:	429a      	cmp	r2, r3
 800346e:	d902      	bls.n	8003476 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003470:	69fb      	ldr	r3, [r7, #28]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d13d      	bne.n	80034f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	685a      	ldr	r2, [r3, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003484:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800348e:	d111      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003498:	d004      	beq.n	80034a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	689b      	ldr	r3, [r3, #8]
 800349e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034a2:	d107      	bne.n	80034b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034bc:	d10f      	bne.n	80034de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034cc:	601a      	str	r2, [r3, #0]
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	681a      	ldr	r2, [r3, #0]
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e017      	b.n	8003522 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034f2:	697b      	ldr	r3, [r7, #20]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d101      	bne.n	80034fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034fc:	697b      	ldr	r3, [r7, #20]
 80034fe:	3b01      	subs	r3, #1
 8003500:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	4013      	ands	r3, r2
 800350c:	68ba      	ldr	r2, [r7, #8]
 800350e:	429a      	cmp	r2, r3
 8003510:	bf0c      	ite	eq
 8003512:	2301      	moveq	r3, #1
 8003514:	2300      	movne	r3, #0
 8003516:	b2db      	uxtb	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	79fb      	ldrb	r3, [r7, #7]
 800351c:	429a      	cmp	r2, r3
 800351e:	d19b      	bne.n	8003458 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3720      	adds	r7, #32
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000004 	.word	0x20000004

08003530 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	68bb      	ldr	r3, [r7, #8]
 8003542:	2201      	movs	r2, #1
 8003544:	2102      	movs	r1, #2
 8003546:	68f8      	ldr	r0, [r7, #12]
 8003548:	f7ff ff6a 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 800354c:	4603      	mov	r3, r0
 800354e:	2b00      	cmp	r3, #0
 8003550:	d007      	beq.n	8003562 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003556:	f043 0220 	orr.w	r2, r3, #32
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e032      	b.n	80035c8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003562:	4b1b      	ldr	r3, [pc, #108]	@ (80035d0 <SPI_EndRxTxTransaction+0xa0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a1b      	ldr	r2, [pc, #108]	@ (80035d4 <SPI_EndRxTxTransaction+0xa4>)
 8003568:	fba2 2303 	umull	r2, r3, r2, r3
 800356c:	0d5b      	lsrs	r3, r3, #21
 800356e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003572:	fb02 f303 	mul.w	r3, r2, r3
 8003576:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003580:	d112      	bne.n	80035a8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	9300      	str	r3, [sp, #0]
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2200      	movs	r2, #0
 800358a:	2180      	movs	r1, #128	@ 0x80
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f7ff ff47 	bl	8003420 <SPI_WaitFlagStateUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d016      	beq.n	80035c6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800359c:	f043 0220 	orr.w	r2, r3, #32
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80035a4:	2303      	movs	r3, #3
 80035a6:	e00f      	b.n	80035c8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d00a      	beq.n	80035c4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	3b01      	subs	r3, #1
 80035b2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035be:	2b80      	cmp	r3, #128	@ 0x80
 80035c0:	d0f2      	beq.n	80035a8 <SPI_EndRxTxTransaction+0x78>
 80035c2:	e000      	b.n	80035c6 <SPI_EndRxTxTransaction+0x96>
        break;
 80035c4:	bf00      	nop
  }

  return HAL_OK;
 80035c6:	2300      	movs	r3, #0
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3718      	adds	r7, #24
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	20000004 	.word	0x20000004
 80035d4:	165e9f81 	.word	0x165e9f81

080035d8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035d8:	b580      	push	{r7, lr}
 80035da:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035dc:	4904      	ldr	r1, [pc, #16]	@ (80035f0 <MX_FATFS_Init+0x18>)
 80035de:	4805      	ldr	r0, [pc, #20]	@ (80035f4 <MX_FATFS_Init+0x1c>)
 80035e0:	f003 f9c6 	bl	8006970 <FATFS_LinkDriver>
 80035e4:	4603      	mov	r3, r0
 80035e6:	461a      	mov	r2, r3
 80035e8:	4b03      	ldr	r3, [pc, #12]	@ (80035f8 <MX_FATFS_Init+0x20>)
 80035ea:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035ec:	bf00      	nop
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	20000108 	.word	0x20000108
 80035f4:	20000010 	.word	0x20000010
 80035f8:	20000104 	.word	0x20000104

080035fc <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035fc:	b480      	push	{r7}
 80035fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003600:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8003602:	4618      	mov	r0, r3
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b082      	sub	sp, #8
 8003610:	af00      	add	r7, sp, #0
 8003612:	4603      	mov	r3, r0
 8003614:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 8003616:	79fb      	ldrb	r3, [r7, #7]
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fc83 	bl	8000f24 <SD_disk_initialize>
 800361e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003620:	4618      	mov	r0, r3
 8003622:	3708      	adds	r7, #8
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	4603      	mov	r3, r0
 8003630:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
   // return Stat;
	return SD_disk_status(pdrv);
 8003632:	79fb      	ldrb	r3, [r7, #7]
 8003634:	4618      	mov	r0, r3
 8003636:	f7fd fd5b 	bl	80010f0 <SD_disk_status>
 800363a:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800363c:	4618      	mov	r0, r3
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}

08003644 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	607a      	str	r2, [r7, #4]
 800364e:	603b      	str	r3, [r7, #0]
 8003650:	4603      	mov	r3, r0
 8003652:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8003654:	7bf8      	ldrb	r0, [r7, #15]
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	687a      	ldr	r2, [r7, #4]
 800365a:	68b9      	ldr	r1, [r7, #8]
 800365c:	f7fd fd5e 	bl	800111c <SD_disk_read>
 8003660:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003662:	4618      	mov	r0, r3
 8003664:	3710      	adds	r7, #16
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}

0800366a <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800366a:	b580      	push	{r7, lr}
 800366c:	b084      	sub	sp, #16
 800366e:	af00      	add	r7, sp, #0
 8003670:	60b9      	str	r1, [r7, #8]
 8003672:	607a      	str	r2, [r7, #4]
 8003674:	603b      	str	r3, [r7, #0]
 8003676:	4603      	mov	r3, r0
 8003678:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800367a:	7bf8      	ldrb	r0, [r7, #15]
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	68b9      	ldr	r1, [r7, #8]
 8003682:	f7fd fdb5 	bl	80011f0 <SD_disk_write>
 8003686:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	4603      	mov	r3, r0
 8003698:	603a      	str	r2, [r7, #0]
 800369a:	71fb      	strb	r3, [r7, #7]
 800369c:	460b      	mov	r3, r1
 800369e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 80036a0:	79b9      	ldrb	r1, [r7, #6]
 80036a2:	79fb      	ldrb	r3, [r7, #7]
 80036a4:	683a      	ldr	r2, [r7, #0]
 80036a6:	4618      	mov	r0, r3
 80036a8:	f7fd fe26 	bl	80012f8 <SD_disk_ioctl>
 80036ac:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3708      	adds	r7, #8
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bd80      	pop	{r7, pc}
	...

080036b8 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b084      	sub	sp, #16
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036c2:	79fb      	ldrb	r3, [r7, #7]
 80036c4:	4a08      	ldr	r2, [pc, #32]	@ (80036e8 <disk_status+0x30>)
 80036c6:	009b      	lsls	r3, r3, #2
 80036c8:	4413      	add	r3, r2
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	79fa      	ldrb	r2, [r7, #7]
 80036d0:	4905      	ldr	r1, [pc, #20]	@ (80036e8 <disk_status+0x30>)
 80036d2:	440a      	add	r2, r1
 80036d4:	7a12      	ldrb	r2, [r2, #8]
 80036d6:	4610      	mov	r0, r2
 80036d8:	4798      	blx	r3
 80036da:	4603      	mov	r3, r0
 80036dc:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036de:	7bfb      	ldrb	r3, [r7, #15]
}
 80036e0:	4618      	mov	r0, r3
 80036e2:	3710      	adds	r7, #16
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000334 	.word	0x20000334

080036ec <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	4603      	mov	r3, r0
 80036f4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80036f6:	2300      	movs	r3, #0
 80036f8:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	4a0e      	ldr	r2, [pc, #56]	@ (8003738 <disk_initialize+0x4c>)
 80036fe:	5cd3      	ldrb	r3, [r2, r3]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d114      	bne.n	800372e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8003704:	79fb      	ldrb	r3, [r7, #7]
 8003706:	4a0c      	ldr	r2, [pc, #48]	@ (8003738 <disk_initialize+0x4c>)
 8003708:	009b      	lsls	r3, r3, #2
 800370a:	4413      	add	r3, r2
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	79fa      	ldrb	r2, [r7, #7]
 8003712:	4909      	ldr	r1, [pc, #36]	@ (8003738 <disk_initialize+0x4c>)
 8003714:	440a      	add	r2, r1
 8003716:	7a12      	ldrb	r2, [r2, #8]
 8003718:	4610      	mov	r0, r2
 800371a:	4798      	blx	r3
 800371c:	4603      	mov	r3, r0
 800371e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003720:	7bfb      	ldrb	r3, [r7, #15]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d103      	bne.n	800372e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8003726:	79fb      	ldrb	r3, [r7, #7]
 8003728:	4a03      	ldr	r2, [pc, #12]	@ (8003738 <disk_initialize+0x4c>)
 800372a:	2101      	movs	r1, #1
 800372c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 800372e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003730:	4618      	mov	r0, r3
 8003732:	3710      	adds	r7, #16
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}
 8003738:	20000334 	.word	0x20000334

0800373c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800373c:	b590      	push	{r4, r7, lr}
 800373e:	b087      	sub	sp, #28
 8003740:	af00      	add	r7, sp, #0
 8003742:	60b9      	str	r1, [r7, #8]
 8003744:	607a      	str	r2, [r7, #4]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4603      	mov	r3, r0
 800374a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4a0a      	ldr	r2, [pc, #40]	@ (8003778 <disk_read+0x3c>)
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	4413      	add	r3, r2
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	689c      	ldr	r4, [r3, #8]
 8003758:	7bfb      	ldrb	r3, [r7, #15]
 800375a:	4a07      	ldr	r2, [pc, #28]	@ (8003778 <disk_read+0x3c>)
 800375c:	4413      	add	r3, r2
 800375e:	7a18      	ldrb	r0, [r3, #8]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	687a      	ldr	r2, [r7, #4]
 8003764:	68b9      	ldr	r1, [r7, #8]
 8003766:	47a0      	blx	r4
 8003768:	4603      	mov	r3, r0
 800376a:	75fb      	strb	r3, [r7, #23]
  return res;
 800376c:	7dfb      	ldrb	r3, [r7, #23]
}
 800376e:	4618      	mov	r0, r3
 8003770:	371c      	adds	r7, #28
 8003772:	46bd      	mov	sp, r7
 8003774:	bd90      	pop	{r4, r7, pc}
 8003776:	bf00      	nop
 8003778:	20000334 	.word	0x20000334

0800377c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800377c:	b590      	push	{r4, r7, lr}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60b9      	str	r1, [r7, #8]
 8003784:	607a      	str	r2, [r7, #4]
 8003786:	603b      	str	r3, [r7, #0]
 8003788:	4603      	mov	r3, r0
 800378a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <disk_write+0x3c>)
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	4413      	add	r3, r2
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	68dc      	ldr	r4, [r3, #12]
 8003798:	7bfb      	ldrb	r3, [r7, #15]
 800379a:	4a07      	ldr	r2, [pc, #28]	@ (80037b8 <disk_write+0x3c>)
 800379c:	4413      	add	r3, r2
 800379e:	7a18      	ldrb	r0, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	68b9      	ldr	r1, [r7, #8]
 80037a6:	47a0      	blx	r4
 80037a8:	4603      	mov	r3, r0
 80037aa:	75fb      	strb	r3, [r7, #23]
  return res;
 80037ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80037ae:	4618      	mov	r0, r3
 80037b0:	371c      	adds	r7, #28
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd90      	pop	{r4, r7, pc}
 80037b6:	bf00      	nop
 80037b8:	20000334 	.word	0x20000334

080037bc <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	4603      	mov	r3, r0
 80037c4:	603a      	str	r2, [r7, #0]
 80037c6:	71fb      	strb	r3, [r7, #7]
 80037c8:	460b      	mov	r3, r1
 80037ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037cc:	79fb      	ldrb	r3, [r7, #7]
 80037ce:	4a09      	ldr	r2, [pc, #36]	@ (80037f4 <disk_ioctl+0x38>)
 80037d0:	009b      	lsls	r3, r3, #2
 80037d2:	4413      	add	r3, r2
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	691b      	ldr	r3, [r3, #16]
 80037d8:	79fa      	ldrb	r2, [r7, #7]
 80037da:	4906      	ldr	r1, [pc, #24]	@ (80037f4 <disk_ioctl+0x38>)
 80037dc:	440a      	add	r2, r1
 80037de:	7a10      	ldrb	r0, [r2, #8]
 80037e0:	79b9      	ldrb	r1, [r7, #6]
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	4798      	blx	r3
 80037e6:	4603      	mov	r3, r0
 80037e8:	73fb      	strb	r3, [r7, #15]
  return res;
 80037ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	3710      	adds	r7, #16
 80037f0:	46bd      	mov	sp, r7
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000334 	.word	0x20000334

080037f8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80037f8:	b480      	push	{r7}
 80037fa:	b085      	sub	sp, #20
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	3301      	adds	r3, #1
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8003808:	89fb      	ldrh	r3, [r7, #14]
 800380a:	021b      	lsls	r3, r3, #8
 800380c:	b21a      	sxth	r2, r3
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	b21b      	sxth	r3, r3
 8003814:	4313      	orrs	r3, r2
 8003816:	b21b      	sxth	r3, r3
 8003818:	81fb      	strh	r3, [r7, #14]
	return rv;
 800381a:	89fb      	ldrh	r3, [r7, #14]
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8003828:	b480      	push	{r7}
 800382a:	b085      	sub	sp, #20
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	3303      	adds	r3, #3
 8003834:	781b      	ldrb	r3, [r3, #0]
 8003836:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	021b      	lsls	r3, r3, #8
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	3202      	adds	r2, #2
 8003840:	7812      	ldrb	r2, [r2, #0]
 8003842:	4313      	orrs	r3, r2
 8003844:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	021b      	lsls	r3, r3, #8
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	3201      	adds	r2, #1
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	021b      	lsls	r3, r3, #8
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	7812      	ldrb	r2, [r2, #0]
 800385c:	4313      	orrs	r3, r2
 800385e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003860:	68fb      	ldr	r3, [r7, #12]
}
 8003862:	4618      	mov	r0, r3
 8003864:	3714      	adds	r7, #20
 8003866:	46bd      	mov	sp, r7
 8003868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386c:	4770      	bx	lr

0800386e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
 8003876:	460b      	mov	r3, r1
 8003878:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	1c5a      	adds	r2, r3, #1
 800387e:	607a      	str	r2, [r7, #4]
 8003880:	887a      	ldrh	r2, [r7, #2]
 8003882:	b2d2      	uxtb	r2, r2
 8003884:	701a      	strb	r2, [r3, #0]
 8003886:	887b      	ldrh	r3, [r7, #2]
 8003888:	0a1b      	lsrs	r3, r3, #8
 800388a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	1c5a      	adds	r2, r3, #1
 8003890:	607a      	str	r2, [r7, #4]
 8003892:	887a      	ldrh	r2, [r7, #2]
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	701a      	strb	r2, [r3, #0]
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 80038a4:	b480      	push	{r7}
 80038a6:	b083      	sub	sp, #12
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	1c5a      	adds	r2, r3, #1
 80038b2:	607a      	str	r2, [r7, #4]
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	b2d2      	uxtb	r2, r2
 80038b8:	701a      	strb	r2, [r3, #0]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	0a1b      	lsrs	r3, r3, #8
 80038be:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	1c5a      	adds	r2, r3, #1
 80038c4:	607a      	str	r2, [r7, #4]
 80038c6:	683a      	ldr	r2, [r7, #0]
 80038c8:	b2d2      	uxtb	r2, r2
 80038ca:	701a      	strb	r2, [r3, #0]
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	1c5a      	adds	r2, r3, #1
 80038d6:	607a      	str	r2, [r7, #4]
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	0a1b      	lsrs	r3, r3, #8
 80038e2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	1c5a      	adds	r2, r3, #1
 80038e8:	607a      	str	r2, [r7, #4]
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	b2d2      	uxtb	r2, r2
 80038ee:	701a      	strb	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	370c      	adds	r7, #12
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80038fc:	b480      	push	{r7}
 80038fe:	b087      	sub	sp, #28
 8003900:	af00      	add	r7, sp, #0
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00d      	beq.n	8003932 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	1c53      	adds	r3, r2, #1
 800391a:	613b      	str	r3, [r7, #16]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	1c59      	adds	r1, r3, #1
 8003920:	6179      	str	r1, [r7, #20]
 8003922:	7812      	ldrb	r2, [r2, #0]
 8003924:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	3b01      	subs	r3, #1
 800392a:	607b      	str	r3, [r7, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d1f1      	bne.n	8003916 <mem_cpy+0x1a>
	}
}
 8003932:	bf00      	nop
 8003934:	371c      	adds	r7, #28
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800393e:	b480      	push	{r7}
 8003940:	b087      	sub	sp, #28
 8003942:	af00      	add	r7, sp, #0
 8003944:	60f8      	str	r0, [r7, #12]
 8003946:	60b9      	str	r1, [r7, #8]
 8003948:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	617a      	str	r2, [r7, #20]
 8003954:	68ba      	ldr	r2, [r7, #8]
 8003956:	b2d2      	uxtb	r2, r2
 8003958:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	3b01      	subs	r3, #1
 800395e:	607b      	str	r3, [r7, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2b00      	cmp	r3, #0
 8003964:	d1f3      	bne.n	800394e <mem_set+0x10>
}
 8003966:	bf00      	nop
 8003968:	bf00      	nop
 800396a:	371c      	adds	r7, #28
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	@ 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	60f8      	str	r0, [r7, #12]
 800397c:	60b9      	str	r1, [r7, #8]
 800397e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	61fb      	str	r3, [r7, #28]
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800398c:	69fb      	ldr	r3, [r7, #28]
 800398e:	1c5a      	adds	r2, r3, #1
 8003990:	61fa      	str	r2, [r7, #28]
 8003992:	781b      	ldrb	r3, [r3, #0]
 8003994:	4619      	mov	r1, r3
 8003996:	69bb      	ldr	r3, [r7, #24]
 8003998:	1c5a      	adds	r2, r3, #1
 800399a:	61ba      	str	r2, [r7, #24]
 800399c:	781b      	ldrb	r3, [r3, #0]
 800399e:	1acb      	subs	r3, r1, r3
 80039a0:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	3b01      	subs	r3, #1
 80039a6:	607b      	str	r3, [r7, #4]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d002      	beq.n	80039b4 <mem_cmp+0x40>
 80039ae:	697b      	ldr	r3, [r7, #20]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d0eb      	beq.n	800398c <mem_cmp+0x18>

	return r;
 80039b4:	697b      	ldr	r3, [r7, #20]
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3724      	adds	r7, #36	@ 0x24
 80039ba:	46bd      	mov	sp, r7
 80039bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c0:	4770      	bx	lr

080039c2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80039c2:	b480      	push	{r7}
 80039c4:	b083      	sub	sp, #12
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
 80039ca:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80039cc:	e002      	b.n	80039d4 <chk_chr+0x12>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3301      	adds	r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	781b      	ldrb	r3, [r3, #0]
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d005      	beq.n	80039e8 <chk_chr+0x26>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	461a      	mov	r2, r3
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d1f2      	bne.n	80039ce <chk_chr+0xc>
	return *str;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	781b      	ldrb	r3, [r3, #0]
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	370c      	adds	r7, #12
 80039f0:	46bd      	mov	sp, r7
 80039f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f6:	4770      	bx	lr

080039f8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039f8:	b480      	push	{r7}
 80039fa:	b085      	sub	sp, #20
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a02:	2300      	movs	r3, #0
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	e029      	b.n	8003a60 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003a0c:	4a27      	ldr	r2, [pc, #156]	@ (8003aac <chk_lock+0xb4>)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	4413      	add	r3, r2
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d01d      	beq.n	8003a56 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a1a:	4a24      	ldr	r2, [pc, #144]	@ (8003aac <chk_lock+0xb4>)
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	4413      	add	r3, r2
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d116      	bne.n	8003a5a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003a2c:	4a1f      	ldr	r2, [pc, #124]	@ (8003aac <chk_lock+0xb4>)
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	011b      	lsls	r3, r3, #4
 8003a32:	4413      	add	r3, r2
 8003a34:	3304      	adds	r3, #4
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d10c      	bne.n	8003a5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a40:	4a1a      	ldr	r2, [pc, #104]	@ (8003aac <chk_lock+0xb4>)
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	4413      	add	r3, r2
 8003a48:	3308      	adds	r3, #8
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d102      	bne.n	8003a5a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a54:	e007      	b.n	8003a66 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003a56:	2301      	movs	r3, #1
 8003a58:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d9d2      	bls.n	8003a0c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d109      	bne.n	8003a80 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d102      	bne.n	8003a78 <chk_lock+0x80>
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	2b02      	cmp	r3, #2
 8003a76:	d101      	bne.n	8003a7c <chk_lock+0x84>
 8003a78:	2300      	movs	r3, #0
 8003a7a:	e010      	b.n	8003a9e <chk_lock+0xa6>
 8003a7c:	2312      	movs	r3, #18
 8003a7e:	e00e      	b.n	8003a9e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003a80:	683b      	ldr	r3, [r7, #0]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d108      	bne.n	8003a98 <chk_lock+0xa0>
 8003a86:	4a09      	ldr	r2, [pc, #36]	@ (8003aac <chk_lock+0xb4>)
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	4413      	add	r3, r2
 8003a8e:	330c      	adds	r3, #12
 8003a90:	881b      	ldrh	r3, [r3, #0]
 8003a92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a96:	d101      	bne.n	8003a9c <chk_lock+0xa4>
 8003a98:	2310      	movs	r3, #16
 8003a9a:	e000      	b.n	8003a9e <chk_lock+0xa6>
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	20000114 	.word	0x20000114

08003ab0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	607b      	str	r3, [r7, #4]
 8003aba:	e002      	b.n	8003ac2 <enq_lock+0x12>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	3301      	adds	r3, #1
 8003ac0:	607b      	str	r3, [r7, #4]
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2b01      	cmp	r3, #1
 8003ac6:	d806      	bhi.n	8003ad6 <enq_lock+0x26>
 8003ac8:	4a09      	ldr	r2, [pc, #36]	@ (8003af0 <enq_lock+0x40>)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	4413      	add	r3, r2
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1f2      	bne.n	8003abc <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	bf14      	ite	ne
 8003adc:	2301      	movne	r3, #1
 8003ade:	2300      	moveq	r3, #0
 8003ae0:	b2db      	uxtb	r3, r3
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	370c      	adds	r7, #12
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000114 	.word	0x20000114

08003af4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003afe:	2300      	movs	r3, #0
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	e01f      	b.n	8003b44 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003b04:	4a41      	ldr	r2, [pc, #260]	@ (8003c0c <inc_lock+0x118>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	4413      	add	r3, r2
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d113      	bne.n	8003b3e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003b16:	4a3d      	ldr	r2, [pc, #244]	@ (8003c0c <inc_lock+0x118>)
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	4413      	add	r3, r2
 8003b1e:	3304      	adds	r3, #4
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003b26:	429a      	cmp	r2, r3
 8003b28:	d109      	bne.n	8003b3e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003b2a:	4a38      	ldr	r2, [pc, #224]	@ (8003c0c <inc_lock+0x118>)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	4413      	add	r3, r2
 8003b32:	3308      	adds	r3, #8
 8003b34:	681a      	ldr	r2, [r3, #0]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d006      	beq.n	8003b4c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	3301      	adds	r3, #1
 8003b42:	60fb      	str	r3, [r7, #12]
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d9dc      	bls.n	8003b04 <inc_lock+0x10>
 8003b4a:	e000      	b.n	8003b4e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003b4c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d132      	bne.n	8003bba <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b54:	2300      	movs	r3, #0
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	e002      	b.n	8003b60 <inc_lock+0x6c>
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	3301      	adds	r3, #1
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d806      	bhi.n	8003b74 <inc_lock+0x80>
 8003b66:	4a29      	ldr	r2, [pc, #164]	@ (8003c0c <inc_lock+0x118>)
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	4413      	add	r3, r2
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d1f2      	bne.n	8003b5a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	2b02      	cmp	r3, #2
 8003b78:	d101      	bne.n	8003b7e <inc_lock+0x8a>
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	e040      	b.n	8003c00 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4922      	ldr	r1, [pc, #136]	@ (8003c0c <inc_lock+0x118>)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	011b      	lsls	r3, r3, #4
 8003b88:	440b      	add	r3, r1
 8003b8a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	689a      	ldr	r2, [r3, #8]
 8003b90:	491e      	ldr	r1, [pc, #120]	@ (8003c0c <inc_lock+0x118>)
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	011b      	lsls	r3, r3, #4
 8003b96:	440b      	add	r3, r1
 8003b98:	3304      	adds	r3, #4
 8003b9a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	695a      	ldr	r2, [r3, #20]
 8003ba0:	491a      	ldr	r1, [pc, #104]	@ (8003c0c <inc_lock+0x118>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	440b      	add	r3, r1
 8003ba8:	3308      	adds	r3, #8
 8003baa:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003bac:	4a17      	ldr	r2, [pc, #92]	@ (8003c0c <inc_lock+0x118>)
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	4413      	add	r3, r2
 8003bb4:	330c      	adds	r3, #12
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d009      	beq.n	8003bd4 <inc_lock+0xe0>
 8003bc0:	4a12      	ldr	r2, [pc, #72]	@ (8003c0c <inc_lock+0x118>)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	4413      	add	r3, r2
 8003bc8:	330c      	adds	r3, #12
 8003bca:	881b      	ldrh	r3, [r3, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d001      	beq.n	8003bd4 <inc_lock+0xe0>
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e015      	b.n	8003c00 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d108      	bne.n	8003bec <inc_lock+0xf8>
 8003bda:	4a0c      	ldr	r2, [pc, #48]	@ (8003c0c <inc_lock+0x118>)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	011b      	lsls	r3, r3, #4
 8003be0:	4413      	add	r3, r2
 8003be2:	330c      	adds	r3, #12
 8003be4:	881b      	ldrh	r3, [r3, #0]
 8003be6:	3301      	adds	r3, #1
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	e001      	b.n	8003bf0 <inc_lock+0xfc>
 8003bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003bf0:	4906      	ldr	r1, [pc, #24]	@ (8003c0c <inc_lock+0x118>)
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	011b      	lsls	r3, r3, #4
 8003bf6:	440b      	add	r3, r1
 8003bf8:	330c      	adds	r3, #12
 8003bfa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	3301      	adds	r3, #1
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr
 8003c0c:	20000114 	.word	0x20000114

08003c10 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b085      	sub	sp, #20
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	3b01      	subs	r3, #1
 8003c1c:	607b      	str	r3, [r7, #4]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d825      	bhi.n	8003c70 <dec_lock+0x60>
		n = Files[i].ctr;
 8003c24:	4a17      	ldr	r2, [pc, #92]	@ (8003c84 <dec_lock+0x74>)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	4413      	add	r3, r2
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	881b      	ldrh	r3, [r3, #0]
 8003c30:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c38:	d101      	bne.n	8003c3e <dec_lock+0x2e>
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003c3e:	89fb      	ldrh	r3, [r7, #14]
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d002      	beq.n	8003c4a <dec_lock+0x3a>
 8003c44:	89fb      	ldrh	r3, [r7, #14]
 8003c46:	3b01      	subs	r3, #1
 8003c48:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8003c84 <dec_lock+0x74>)
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	4413      	add	r3, r2
 8003c52:	330c      	adds	r3, #12
 8003c54:	89fa      	ldrh	r2, [r7, #14]
 8003c56:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c58:	89fb      	ldrh	r3, [r7, #14]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <dec_lock+0x5a>
 8003c5e:	4a09      	ldr	r2, [pc, #36]	@ (8003c84 <dec_lock+0x74>)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	011b      	lsls	r3, r3, #4
 8003c64:	4413      	add	r3, r2
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	737b      	strb	r3, [r7, #13]
 8003c6e:	e001      	b.n	8003c74 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c70:	2302      	movs	r3, #2
 8003c72:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003c74:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	3714      	adds	r7, #20
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000114 	.word	0x20000114

08003c88 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003c90:	2300      	movs	r3, #0
 8003c92:	60fb      	str	r3, [r7, #12]
 8003c94:	e010      	b.n	8003cb8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c96:	4a0d      	ldr	r2, [pc, #52]	@ (8003ccc <clear_lock+0x44>)
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	4413      	add	r3, r2
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	687a      	ldr	r2, [r7, #4]
 8003ca2:	429a      	cmp	r2, r3
 8003ca4:	d105      	bne.n	8003cb2 <clear_lock+0x2a>
 8003ca6:	4a09      	ldr	r2, [pc, #36]	@ (8003ccc <clear_lock+0x44>)
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	011b      	lsls	r3, r3, #4
 8003cac:	4413      	add	r3, r2
 8003cae:	2200      	movs	r2, #0
 8003cb0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	60fb      	str	r3, [r7, #12]
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	2b01      	cmp	r3, #1
 8003cbc:	d9eb      	bls.n	8003c96 <clear_lock+0xe>
	}
}
 8003cbe:	bf00      	nop
 8003cc0:	bf00      	nop
 8003cc2:	3714      	adds	r7, #20
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cca:	4770      	bx	lr
 8003ccc:	20000114 	.word	0x20000114

08003cd0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b086      	sub	sp, #24
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	78db      	ldrb	r3, [r3, #3]
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d034      	beq.n	8003d4e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003ce8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	7858      	ldrb	r0, [r3, #1]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003cf4:	2301      	movs	r3, #1
 8003cf6:	697a      	ldr	r2, [r7, #20]
 8003cf8:	f7ff fd40 	bl	800377c <disk_write>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d002      	beq.n	8003d08 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	73fb      	strb	r3, [r7, #15]
 8003d06:	e022      	b.n	8003d4e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	697a      	ldr	r2, [r7, #20]
 8003d14:	1ad2      	subs	r2, r2, r3
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a1b      	ldr	r3, [r3, #32]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d217      	bcs.n	8003d4e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	789b      	ldrb	r3, [r3, #2]
 8003d22:	613b      	str	r3, [r7, #16]
 8003d24:	e010      	b.n	8003d48 <sync_window+0x78>
					wsect += fs->fsize;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6a1b      	ldr	r3, [r3, #32]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	4413      	add	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	7858      	ldrb	r0, [r3, #1]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	697a      	ldr	r2, [r7, #20]
 8003d3e:	f7ff fd1d 	bl	800377c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	3b01      	subs	r3, #1
 8003d46:	613b      	str	r3, [r7, #16]
 8003d48:	693b      	ldr	r3, [r7, #16]
 8003d4a:	2b01      	cmp	r3, #1
 8003d4c:	d8eb      	bhi.n	8003d26 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	3718      	adds	r7, #24
 8003d54:	46bd      	mov	sp, r7
 8003d56:	bd80      	pop	{r7, pc}

08003d58 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d62:	2300      	movs	r3, #0
 8003d64:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d6a:	683a      	ldr	r2, [r7, #0]
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d01b      	beq.n	8003da8 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f7ff ffad 	bl	8003cd0 <sync_window>
 8003d76:	4603      	mov	r3, r0
 8003d78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d7a:	7bfb      	ldrb	r3, [r7, #15]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d113      	bne.n	8003da8 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	7858      	ldrb	r0, [r3, #1]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	683a      	ldr	r2, [r7, #0]
 8003d8e:	f7ff fcd5 	bl	800373c <disk_read>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d004      	beq.n	8003da2 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003d98:	f04f 33ff 	mov.w	r3, #4294967295
 8003d9c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	683a      	ldr	r2, [r7, #0]
 8003da6:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b084      	sub	sp, #16
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff ff87 	bl	8003cd0 <sync_window>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003dc6:	7bfb      	ldrb	r3, [r7, #15]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d159      	bne.n	8003e80 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b03      	cmp	r3, #3
 8003dd2:	d149      	bne.n	8003e68 <sync_fs+0xb4>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	791b      	ldrb	r3, [r3, #4]
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d145      	bne.n	8003e68 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	899b      	ldrh	r3, [r3, #12]
 8003de6:	461a      	mov	r2, r3
 8003de8:	2100      	movs	r1, #0
 8003dea:	f7ff fda8 	bl	800393e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3338      	adds	r3, #56	@ 0x38
 8003df2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003df6:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fd37 	bl	800386e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3338      	adds	r3, #56	@ 0x38
 8003e04:	4921      	ldr	r1, [pc, #132]	@ (8003e8c <sync_fs+0xd8>)
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7ff fd4c 	bl	80038a4 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3338      	adds	r3, #56	@ 0x38
 8003e10:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e14:	491e      	ldr	r1, [pc, #120]	@ (8003e90 <sync_fs+0xdc>)
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7ff fd44 	bl	80038a4 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	3338      	adds	r3, #56	@ 0x38
 8003e20:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	699b      	ldr	r3, [r3, #24]
 8003e28:	4619      	mov	r1, r3
 8003e2a:	4610      	mov	r0, r2
 8003e2c:	f7ff fd3a 	bl	80038a4 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	3338      	adds	r3, #56	@ 0x38
 8003e34:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4610      	mov	r0, r2
 8003e40:	f7ff fd30 	bl	80038a4 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	7858      	ldrb	r0, [r3, #1]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	f7ff fc8d 	bl	800377c <disk_write>
			fs->fsi_flag = 0;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2200      	movs	r2, #0
 8003e66:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	785b      	ldrb	r3, [r3, #1]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	2100      	movs	r1, #0
 8003e70:	4618      	mov	r0, r3
 8003e72:	f7ff fca3 	bl	80037bc <disk_ioctl>
 8003e76:	4603      	mov	r3, r0
 8003e78:	2b00      	cmp	r3, #0
 8003e7a:	d001      	beq.n	8003e80 <sync_fs+0xcc>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e80:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	41615252 	.word	0x41615252
 8003e90:	61417272 	.word	0x61417272

08003e94 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b083      	sub	sp, #12
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
 8003e9c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	3b02      	subs	r3, #2
 8003ea2:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	69db      	ldr	r3, [r3, #28]
 8003ea8:	3b02      	subs	r3, #2
 8003eaa:	683a      	ldr	r2, [r7, #0]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d301      	bcc.n	8003eb4 <clust2sect+0x20>
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	e008      	b.n	8003ec6 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	895b      	ldrh	r3, [r3, #10]
 8003eb8:	461a      	mov	r2, r3
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	fb03 f202 	mul.w	r2, r3, r2
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec4:	4413      	add	r3, r2
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	370c      	adds	r7, #12
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr

08003ed2 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003ed2:	b580      	push	{r7, lr}
 8003ed4:	b086      	sub	sp, #24
 8003ed6:	af00      	add	r7, sp, #0
 8003ed8:	6078      	str	r0, [r7, #4]
 8003eda:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d904      	bls.n	8003ef2 <get_fat+0x20>
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d302      	bcc.n	8003ef8 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e0ba      	b.n	800406e <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ef8:	f04f 33ff 	mov.w	r3, #4294967295
 8003efc:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	781b      	ldrb	r3, [r3, #0]
 8003f02:	2b03      	cmp	r3, #3
 8003f04:	f000 8082 	beq.w	800400c <get_fat+0x13a>
 8003f08:	2b03      	cmp	r3, #3
 8003f0a:	f300 80a6 	bgt.w	800405a <get_fat+0x188>
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d002      	beq.n	8003f18 <get_fat+0x46>
 8003f12:	2b02      	cmp	r3, #2
 8003f14:	d055      	beq.n	8003fc2 <get_fat+0xf0>
 8003f16:	e0a0      	b.n	800405a <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	68fa      	ldr	r2, [r7, #12]
 8003f22:	4413      	add	r3, r2
 8003f24:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	899b      	ldrh	r3, [r3, #12]
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f36:	4413      	add	r3, r2
 8003f38:	4619      	mov	r1, r3
 8003f3a:	6938      	ldr	r0, [r7, #16]
 8003f3c:	f7ff ff0c 	bl	8003d58 <move_window>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	f040 808c 	bne.w	8004060 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	1c5a      	adds	r2, r3, #1
 8003f4c:	60fa      	str	r2, [r7, #12]
 8003f4e:	693a      	ldr	r2, [r7, #16]
 8003f50:	8992      	ldrh	r2, [r2, #12]
 8003f52:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f56:	fb01 f202 	mul.w	r2, r1, r2
 8003f5a:	1a9b      	subs	r3, r3, r2
 8003f5c:	693a      	ldr	r2, [r7, #16]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f64:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	899b      	ldrh	r3, [r3, #12]
 8003f6e:	4619      	mov	r1, r3
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f76:	4413      	add	r3, r2
 8003f78:	4619      	mov	r1, r3
 8003f7a:	6938      	ldr	r0, [r7, #16]
 8003f7c:	f7ff feec 	bl	8003d58 <move_window>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d16e      	bne.n	8004064 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	899b      	ldrh	r3, [r3, #12]
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f92:	fb01 f202 	mul.w	r2, r1, r2
 8003f96:	1a9b      	subs	r3, r3, r2
 8003f98:	693a      	ldr	r2, [r7, #16]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003fa0:	021b      	lsls	r3, r3, #8
 8003fa2:	68ba      	ldr	r2, [r7, #8]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	f003 0301 	and.w	r3, r3, #1
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d002      	beq.n	8003fb8 <get_fat+0xe6>
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	091b      	lsrs	r3, r3, #4
 8003fb6:	e002      	b.n	8003fbe <get_fat+0xec>
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fbe:	617b      	str	r3, [r7, #20]
			break;
 8003fc0:	e055      	b.n	800406e <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	899b      	ldrh	r3, [r3, #12]
 8003fca:	085b      	lsrs	r3, r3, #1
 8003fcc:	b29b      	uxth	r3, r3
 8003fce:	4619      	mov	r1, r3
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fd6:	4413      	add	r3, r2
 8003fd8:	4619      	mov	r1, r3
 8003fda:	6938      	ldr	r0, [r7, #16]
 8003fdc:	f7ff febc 	bl	8003d58 <move_window>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d140      	bne.n	8004068 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003fec:	683b      	ldr	r3, [r7, #0]
 8003fee:	005b      	lsls	r3, r3, #1
 8003ff0:	693a      	ldr	r2, [r7, #16]
 8003ff2:	8992      	ldrh	r2, [r2, #12]
 8003ff4:	fbb3 f0f2 	udiv	r0, r3, r2
 8003ff8:	fb00 f202 	mul.w	r2, r0, r2
 8003ffc:	1a9b      	subs	r3, r3, r2
 8003ffe:	440b      	add	r3, r1
 8004000:	4618      	mov	r0, r3
 8004002:	f7ff fbf9 	bl	80037f8 <ld_word>
 8004006:	4603      	mov	r3, r0
 8004008:	617b      	str	r3, [r7, #20]
			break;
 800400a:	e030      	b.n	800406e <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	899b      	ldrh	r3, [r3, #12]
 8004014:	089b      	lsrs	r3, r3, #2
 8004016:	b29b      	uxth	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	fbb3 f3f1 	udiv	r3, r3, r1
 8004020:	4413      	add	r3, r2
 8004022:	4619      	mov	r1, r3
 8004024:	6938      	ldr	r0, [r7, #16]
 8004026:	f7ff fe97 	bl	8003d58 <move_window>
 800402a:	4603      	mov	r3, r0
 800402c:	2b00      	cmp	r3, #0
 800402e:	d11d      	bne.n	800406c <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	693a      	ldr	r2, [r7, #16]
 800403c:	8992      	ldrh	r2, [r2, #12]
 800403e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004042:	fb00 f202 	mul.w	r2, r0, r2
 8004046:	1a9b      	subs	r3, r3, r2
 8004048:	440b      	add	r3, r1
 800404a:	4618      	mov	r0, r3
 800404c:	f7ff fbec 	bl	8003828 <ld_dword>
 8004050:	4603      	mov	r3, r0
 8004052:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8004056:	617b      	str	r3, [r7, #20]
			break;
 8004058:	e009      	b.n	800406e <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800405a:	2301      	movs	r3, #1
 800405c:	617b      	str	r3, [r7, #20]
 800405e:	e006      	b.n	800406e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004060:	bf00      	nop
 8004062:	e004      	b.n	800406e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004064:	bf00      	nop
 8004066:	e002      	b.n	800406e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8004068:	bf00      	nop
 800406a:	e000      	b.n	800406e <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800406c:	bf00      	nop
		}
	}

	return val;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8004078:	b590      	push	{r4, r7, lr}
 800407a:	b089      	sub	sp, #36	@ 0x24
 800407c:	af00      	add	r7, sp, #0
 800407e:	60f8      	str	r0, [r7, #12]
 8004080:	60b9      	str	r1, [r7, #8]
 8004082:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004084:	2302      	movs	r3, #2
 8004086:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	2b01      	cmp	r3, #1
 800408c:	f240 8109 	bls.w	80042a2 <put_fat+0x22a>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	69db      	ldr	r3, [r3, #28]
 8004094:	68ba      	ldr	r2, [r7, #8]
 8004096:	429a      	cmp	r2, r3
 8004098:	f080 8103 	bcs.w	80042a2 <put_fat+0x22a>
		switch (fs->fs_type) {
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	2b03      	cmp	r3, #3
 80040a2:	f000 80b6 	beq.w	8004212 <put_fat+0x19a>
 80040a6:	2b03      	cmp	r3, #3
 80040a8:	f300 80fb 	bgt.w	80042a2 <put_fat+0x22a>
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d003      	beq.n	80040b8 <put_fat+0x40>
 80040b0:	2b02      	cmp	r3, #2
 80040b2:	f000 8083 	beq.w	80041bc <put_fat+0x144>
 80040b6:	e0f4      	b.n	80042a2 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80040b8:	68bb      	ldr	r3, [r7, #8]
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	085b      	lsrs	r3, r3, #1
 80040c0:	69ba      	ldr	r2, [r7, #24]
 80040c2:	4413      	add	r3, r2
 80040c4:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	899b      	ldrh	r3, [r3, #12]
 80040ce:	4619      	mov	r1, r3
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040d6:	4413      	add	r3, r2
 80040d8:	4619      	mov	r1, r3
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f7ff fe3c 	bl	8003d58 <move_window>
 80040e0:	4603      	mov	r3, r0
 80040e2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040e4:	7ffb      	ldrb	r3, [r7, #31]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	f040 80d4 	bne.w	8004294 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80040f2:	69bb      	ldr	r3, [r7, #24]
 80040f4:	1c5a      	adds	r2, r3, #1
 80040f6:	61ba      	str	r2, [r7, #24]
 80040f8:	68fa      	ldr	r2, [r7, #12]
 80040fa:	8992      	ldrh	r2, [r2, #12]
 80040fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8004100:	fb00 f202 	mul.w	r2, r0, r2
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	440b      	add	r3, r1
 8004108:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	f003 0301 	and.w	r3, r3, #1
 8004110:	2b00      	cmp	r3, #0
 8004112:	d00d      	beq.n	8004130 <put_fat+0xb8>
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	781b      	ldrb	r3, [r3, #0]
 8004118:	b25b      	sxtb	r3, r3
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	b25a      	sxtb	r2, r3
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	011b      	lsls	r3, r3, #4
 8004126:	b25b      	sxtb	r3, r3
 8004128:	4313      	orrs	r3, r2
 800412a:	b25b      	sxtb	r3, r3
 800412c:	b2db      	uxtb	r3, r3
 800412e:	e001      	b.n	8004134 <put_fat+0xbc>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	b2db      	uxtb	r3, r3
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2201      	movs	r2, #1
 800413c:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	899b      	ldrh	r3, [r3, #12]
 8004146:	4619      	mov	r1, r3
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	fbb3 f3f1 	udiv	r3, r3, r1
 800414e:	4413      	add	r3, r2
 8004150:	4619      	mov	r1, r3
 8004152:	68f8      	ldr	r0, [r7, #12]
 8004154:	f7ff fe00 	bl	8003d58 <move_window>
 8004158:	4603      	mov	r3, r0
 800415a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800415c:	7ffb      	ldrb	r3, [r7, #31]
 800415e:	2b00      	cmp	r3, #0
 8004160:	f040 809a 	bne.w	8004298 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	899b      	ldrh	r3, [r3, #12]
 800416e:	461a      	mov	r2, r3
 8004170:	69bb      	ldr	r3, [r7, #24]
 8004172:	fbb3 f0f2 	udiv	r0, r3, r2
 8004176:	fb00 f202 	mul.w	r2, r0, r2
 800417a:	1a9b      	subs	r3, r3, r2
 800417c:	440b      	add	r3, r1
 800417e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	f003 0301 	and.w	r3, r3, #1
 8004186:	2b00      	cmp	r3, #0
 8004188:	d003      	beq.n	8004192 <put_fat+0x11a>
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	091b      	lsrs	r3, r3, #4
 800418e:	b2db      	uxtb	r3, r3
 8004190:	e00e      	b.n	80041b0 <put_fat+0x138>
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f023 030f 	bic.w	r3, r3, #15
 800419c:	b25a      	sxtb	r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	0a1b      	lsrs	r3, r3, #8
 80041a2:	b25b      	sxtb	r3, r3
 80041a4:	f003 030f 	and.w	r3, r3, #15
 80041a8:	b25b      	sxtb	r3, r3
 80041aa:	4313      	orrs	r3, r2
 80041ac:	b25b      	sxtb	r3, r3
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	697a      	ldr	r2, [r7, #20]
 80041b2:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2201      	movs	r2, #1
 80041b8:	70da      	strb	r2, [r3, #3]
			break;
 80041ba:	e072      	b.n	80042a2 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	899b      	ldrh	r3, [r3, #12]
 80041c4:	085b      	lsrs	r3, r3, #1
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	4619      	mov	r1, r3
 80041ca:	68bb      	ldr	r3, [r7, #8]
 80041cc:	fbb3 f3f1 	udiv	r3, r3, r1
 80041d0:	4413      	add	r3, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f7ff fdbf 	bl	8003d58 <move_window>
 80041da:	4603      	mov	r3, r0
 80041dc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041de:	7ffb      	ldrb	r3, [r7, #31]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d15b      	bne.n	800429c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	68fa      	ldr	r2, [r7, #12]
 80041f0:	8992      	ldrh	r2, [r2, #12]
 80041f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80041f6:	fb00 f202 	mul.w	r2, r0, r2
 80041fa:	1a9b      	subs	r3, r3, r2
 80041fc:	440b      	add	r3, r1
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	b292      	uxth	r2, r2
 8004202:	4611      	mov	r1, r2
 8004204:	4618      	mov	r0, r3
 8004206:	f7ff fb32 	bl	800386e <st_word>
			fs->wflag = 1;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2201      	movs	r2, #1
 800420e:	70da      	strb	r2, [r3, #3]
			break;
 8004210:	e047      	b.n	80042a2 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	899b      	ldrh	r3, [r3, #12]
 800421a:	089b      	lsrs	r3, r3, #2
 800421c:	b29b      	uxth	r3, r3
 800421e:	4619      	mov	r1, r3
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	fbb3 f3f1 	udiv	r3, r3, r1
 8004226:	4413      	add	r3, r2
 8004228:	4619      	mov	r1, r3
 800422a:	68f8      	ldr	r0, [r7, #12]
 800422c:	f7ff fd94 	bl	8003d58 <move_window>
 8004230:	4603      	mov	r3, r0
 8004232:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004234:	7ffb      	ldrb	r3, [r7, #31]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d132      	bne.n	80042a0 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	68fa      	ldr	r2, [r7, #12]
 800424c:	8992      	ldrh	r2, [r2, #12]
 800424e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004252:	fb00 f202 	mul.w	r2, r0, r2
 8004256:	1a9b      	subs	r3, r3, r2
 8004258:	440b      	add	r3, r1
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff fae4 	bl	8003828 <ld_dword>
 8004260:	4603      	mov	r3, r0
 8004262:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8004266:	4323      	orrs	r3, r4
 8004268:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	009b      	lsls	r3, r3, #2
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	8992      	ldrh	r2, [r2, #12]
 8004278:	fbb3 f0f2 	udiv	r0, r3, r2
 800427c:	fb00 f202 	mul.w	r2, r0, r2
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	440b      	add	r3, r1
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4618      	mov	r0, r3
 8004288:	f7ff fb0c 	bl	80038a4 <st_dword>
			fs->wflag = 1;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	70da      	strb	r2, [r3, #3]
			break;
 8004292:	e006      	b.n	80042a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004294:	bf00      	nop
 8004296:	e004      	b.n	80042a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004298:	bf00      	nop
 800429a:	e002      	b.n	80042a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 800429c:	bf00      	nop
 800429e:	e000      	b.n	80042a2 <put_fat+0x22a>
			if (res != FR_OK) break;
 80042a0:	bf00      	nop
		}
	}
	return res;
 80042a2:	7ffb      	ldrb	r3, [r7, #31]
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	3724      	adds	r7, #36	@ 0x24
 80042a8:	46bd      	mov	sp, r7
 80042aa:	bd90      	pop	{r4, r7, pc}

080042ac <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b088      	sub	sp, #32
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80042b8:	2300      	movs	r3, #0
 80042ba:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d904      	bls.n	80042d2 <remove_chain+0x26>
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d301      	bcc.n	80042d6 <remove_chain+0x2a>
 80042d2:	2302      	movs	r3, #2
 80042d4:	e04b      	b.n	800436e <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d00c      	beq.n	80042f6 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80042dc:	f04f 32ff 	mov.w	r2, #4294967295
 80042e0:	6879      	ldr	r1, [r7, #4]
 80042e2:	69b8      	ldr	r0, [r7, #24]
 80042e4:	f7ff fec8 	bl	8004078 <put_fat>
 80042e8:	4603      	mov	r3, r0
 80042ea:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80042ec:	7ffb      	ldrb	r3, [r7, #31]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <remove_chain+0x4a>
 80042f2:	7ffb      	ldrb	r3, [r7, #31]
 80042f4:	e03b      	b.n	800436e <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80042f6:	68b9      	ldr	r1, [r7, #8]
 80042f8:	68f8      	ldr	r0, [r7, #12]
 80042fa:	f7ff fdea 	bl	8003ed2 <get_fat>
 80042fe:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d031      	beq.n	800436a <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <remove_chain+0x64>
 800430c:	2302      	movs	r3, #2
 800430e:	e02e      	b.n	800436e <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004316:	d101      	bne.n	800431c <remove_chain+0x70>
 8004318:	2301      	movs	r3, #1
 800431a:	e028      	b.n	800436e <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800431c:	2200      	movs	r2, #0
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	69b8      	ldr	r0, [r7, #24]
 8004322:	f7ff fea9 	bl	8004078 <put_fat>
 8004326:	4603      	mov	r3, r0
 8004328:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800432a:	7ffb      	ldrb	r3, [r7, #31]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d001      	beq.n	8004334 <remove_chain+0x88>
 8004330:	7ffb      	ldrb	r3, [r7, #31]
 8004332:	e01c      	b.n	800436e <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004334:	69bb      	ldr	r3, [r7, #24]
 8004336:	699a      	ldr	r2, [r3, #24]
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	3b02      	subs	r3, #2
 800433e:	429a      	cmp	r2, r3
 8004340:	d20b      	bcs.n	800435a <remove_chain+0xae>
			fs->free_clst++;
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	1c5a      	adds	r2, r3, #1
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	791b      	ldrb	r3, [r3, #4]
 8004350:	f043 0301 	orr.w	r3, r3, #1
 8004354:	b2da      	uxtb	r2, r3
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	69db      	ldr	r3, [r3, #28]
 8004362:	68ba      	ldr	r2, [r7, #8]
 8004364:	429a      	cmp	r2, r3
 8004366:	d3c6      	bcc.n	80042f6 <remove_chain+0x4a>
 8004368:	e000      	b.n	800436c <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800436a:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	3720      	adds	r7, #32
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8004376:	b580      	push	{r7, lr}
 8004378:	b088      	sub	sp, #32
 800437a:	af00      	add	r7, sp, #0
 800437c:	6078      	str	r0, [r7, #4]
 800437e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10d      	bne.n	80043a8 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	695b      	ldr	r3, [r3, #20]
 8004390:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d004      	beq.n	80043a2 <create_chain+0x2c>
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	69db      	ldr	r3, [r3, #28]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	429a      	cmp	r2, r3
 80043a0:	d31b      	bcc.n	80043da <create_chain+0x64>
 80043a2:	2301      	movs	r3, #1
 80043a4:	61bb      	str	r3, [r7, #24]
 80043a6:	e018      	b.n	80043da <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80043a8:	6839      	ldr	r1, [r7, #0]
 80043aa:	6878      	ldr	r0, [r7, #4]
 80043ac:	f7ff fd91 	bl	8003ed2 <get_fat>
 80043b0:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2b01      	cmp	r3, #1
 80043b6:	d801      	bhi.n	80043bc <create_chain+0x46>
 80043b8:	2301      	movs	r3, #1
 80043ba:	e070      	b.n	800449e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c2:	d101      	bne.n	80043c8 <create_chain+0x52>
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	e06a      	b.n	800449e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043c8:	693b      	ldr	r3, [r7, #16]
 80043ca:	69db      	ldr	r3, [r3, #28]
 80043cc:	68fa      	ldr	r2, [r7, #12]
 80043ce:	429a      	cmp	r2, r3
 80043d0:	d201      	bcs.n	80043d6 <create_chain+0x60>
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	e063      	b.n	800449e <create_chain+0x128>
		scl = clst;
 80043d6:	683b      	ldr	r3, [r7, #0]
 80043d8:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3301      	adds	r3, #1
 80043e2:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	69fa      	ldr	r2, [r7, #28]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d307      	bcc.n	80043fe <create_chain+0x88>
				ncl = 2;
 80043ee:	2302      	movs	r3, #2
 80043f0:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043f2:	69fa      	ldr	r2, [r7, #28]
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	429a      	cmp	r2, r3
 80043f8:	d901      	bls.n	80043fe <create_chain+0x88>
 80043fa:	2300      	movs	r3, #0
 80043fc:	e04f      	b.n	800449e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043fe:	69f9      	ldr	r1, [r7, #28]
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fd66 	bl	8003ed2 <get_fat>
 8004406:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d00e      	beq.n	800442c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	2b01      	cmp	r3, #1
 8004412:	d003      	beq.n	800441c <create_chain+0xa6>
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800441a:	d101      	bne.n	8004420 <create_chain+0xaa>
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	e03e      	b.n	800449e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004420:	69fa      	ldr	r2, [r7, #28]
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	429a      	cmp	r2, r3
 8004426:	d1da      	bne.n	80043de <create_chain+0x68>
 8004428:	2300      	movs	r3, #0
 800442a:	e038      	b.n	800449e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800442c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800442e:	f04f 32ff 	mov.w	r2, #4294967295
 8004432:	69f9      	ldr	r1, [r7, #28]
 8004434:	6938      	ldr	r0, [r7, #16]
 8004436:	f7ff fe1f 	bl	8004078 <put_fat>
 800443a:	4603      	mov	r3, r0
 800443c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800443e:	7dfb      	ldrb	r3, [r7, #23]
 8004440:	2b00      	cmp	r3, #0
 8004442:	d109      	bne.n	8004458 <create_chain+0xe2>
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d006      	beq.n	8004458 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800444a:	69fa      	ldr	r2, [r7, #28]
 800444c:	6839      	ldr	r1, [r7, #0]
 800444e:	6938      	ldr	r0, [r7, #16]
 8004450:	f7ff fe12 	bl	8004078 <put_fat>
 8004454:	4603      	mov	r3, r0
 8004456:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004458:	7dfb      	ldrb	r3, [r7, #23]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <create_chain+0x116>
		fs->last_clst = ncl;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	69fa      	ldr	r2, [r7, #28]
 8004462:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	699a      	ldr	r2, [r3, #24]
 8004468:	693b      	ldr	r3, [r7, #16]
 800446a:	69db      	ldr	r3, [r3, #28]
 800446c:	3b02      	subs	r3, #2
 800446e:	429a      	cmp	r2, r3
 8004470:	d804      	bhi.n	800447c <create_chain+0x106>
 8004472:	693b      	ldr	r3, [r7, #16]
 8004474:	699b      	ldr	r3, [r3, #24]
 8004476:	1e5a      	subs	r2, r3, #1
 8004478:	693b      	ldr	r3, [r7, #16]
 800447a:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	791b      	ldrb	r3, [r3, #4]
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	b2da      	uxtb	r2, r3
 8004486:	693b      	ldr	r3, [r7, #16]
 8004488:	711a      	strb	r2, [r3, #4]
 800448a:	e007      	b.n	800449c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800448c:	7dfb      	ldrb	r3, [r7, #23]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d102      	bne.n	8004498 <create_chain+0x122>
 8004492:	f04f 33ff 	mov.w	r3, #4294967295
 8004496:	e000      	b.n	800449a <create_chain+0x124>
 8004498:	2301      	movs	r3, #1
 800449a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800449c:	69fb      	ldr	r3, [r7, #28]
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3720      	adds	r7, #32
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}

080044a6 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
 80044ae:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ba:	3304      	adds	r3, #4
 80044bc:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	899b      	ldrh	r3, [r3, #12]
 80044c2:	461a      	mov	r2, r3
 80044c4:	683b      	ldr	r3, [r7, #0]
 80044c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80044ca:	68fa      	ldr	r2, [r7, #12]
 80044cc:	8952      	ldrh	r2, [r2, #10]
 80044ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	1d1a      	adds	r2, r3, #4
 80044d8:	613a      	str	r2, [r7, #16]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d101      	bne.n	80044e8 <clmt_clust+0x42>
 80044e4:	2300      	movs	r3, #0
 80044e6:	e010      	b.n	800450a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80044e8:	697a      	ldr	r2, [r7, #20]
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d307      	bcc.n	8004500 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	693b      	ldr	r3, [r7, #16]
 80044fa:	3304      	adds	r3, #4
 80044fc:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044fe:	e7e9      	b.n	80044d4 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8004500:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	681a      	ldr	r2, [r3, #0]
 8004506:	697b      	ldr	r3, [r7, #20]
 8004508:	4413      	add	r3, r2
}
 800450a:	4618      	mov	r0, r3
 800450c:	371c      	adds	r7, #28
 800450e:	46bd      	mov	sp, r7
 8004510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004514:	4770      	bx	lr

08004516 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004516:	b580      	push	{r7, lr}
 8004518:	b086      	sub	sp, #24
 800451a:	af00      	add	r7, sp, #0
 800451c:	6078      	str	r0, [r7, #4]
 800451e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800452c:	d204      	bcs.n	8004538 <dir_sdi+0x22>
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	f003 031f 	and.w	r3, r3, #31
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <dir_sdi+0x26>
		return FR_INT_ERR;
 8004538:	2302      	movs	r3, #2
 800453a:	e071      	b.n	8004620 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <dir_sdi+0x46>
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	781b      	ldrb	r3, [r3, #0]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d902      	bls.n	800455c <dir_sdi+0x46>
		clst = fs->dirbase;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800455a:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d10c      	bne.n	800457c <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	095b      	lsrs	r3, r3, #5
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	8912      	ldrh	r2, [r2, #8]
 800456a:	4293      	cmp	r3, r2
 800456c:	d301      	bcc.n	8004572 <dir_sdi+0x5c>
 800456e:	2302      	movs	r3, #2
 8004570:	e056      	b.n	8004620 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	61da      	str	r2, [r3, #28]
 800457a:	e02d      	b.n	80045d8 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800457c:	693b      	ldr	r3, [r7, #16]
 800457e:	895b      	ldrh	r3, [r3, #10]
 8004580:	461a      	mov	r2, r3
 8004582:	693b      	ldr	r3, [r7, #16]
 8004584:	899b      	ldrh	r3, [r3, #12]
 8004586:	fb02 f303 	mul.w	r3, r2, r3
 800458a:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800458c:	e019      	b.n	80045c2 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6979      	ldr	r1, [r7, #20]
 8004592:	4618      	mov	r0, r3
 8004594:	f7ff fc9d 	bl	8003ed2 <get_fat>
 8004598:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045a0:	d101      	bne.n	80045a6 <dir_sdi+0x90>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e03c      	b.n	8004620 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d904      	bls.n	80045b6 <dir_sdi+0xa0>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d301      	bcc.n	80045ba <dir_sdi+0xa4>
 80045b6:	2302      	movs	r3, #2
 80045b8:	e032      	b.n	8004620 <dir_sdi+0x10a>
			ofs -= csz;
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1ad3      	subs	r3, r2, r3
 80045c0:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80045c2:	683a      	ldr	r2, [r7, #0]
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	429a      	cmp	r2, r3
 80045c8:	d2e1      	bcs.n	800458e <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80045ca:	6979      	ldr	r1, [r7, #20]
 80045cc:	6938      	ldr	r0, [r7, #16]
 80045ce:	f7ff fc61 	bl	8003e94 <clust2sect>
 80045d2:	4602      	mov	r2, r0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <dir_sdi+0xd4>
 80045e6:	2302      	movs	r3, #2
 80045e8:	e01a      	b.n	8004620 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	69da      	ldr	r2, [r3, #28]
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	899b      	ldrh	r3, [r3, #12]
 80045f2:	4619      	mov	r1, r3
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80045fa:	441a      	add	r2, r3
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	899b      	ldrh	r3, [r3, #12]
 800460a:	461a      	mov	r2, r3
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	fbb3 f0f2 	udiv	r0, r3, r2
 8004612:	fb00 f202 	mul.w	r2, r0, r2
 8004616:	1a9b      	subs	r3, r3, r2
 8004618:	18ca      	adds	r2, r1, r3
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800461e:	2300      	movs	r3, #0
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	3320      	adds	r3, #32
 800463e:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d003      	beq.n	8004650 <dir_next+0x28>
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800464e:	d301      	bcc.n	8004654 <dir_next+0x2c>
 8004650:	2304      	movs	r3, #4
 8004652:	e0bb      	b.n	80047cc <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	899b      	ldrh	r3, [r3, #12]
 8004658:	461a      	mov	r2, r3
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	fbb3 f1f2 	udiv	r1, r3, r2
 8004660:	fb01 f202 	mul.w	r2, r1, r2
 8004664:	1a9b      	subs	r3, r3, r2
 8004666:	2b00      	cmp	r3, #0
 8004668:	f040 809d 	bne.w	80047a6 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	69db      	ldr	r3, [r3, #28]
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d10b      	bne.n	8004696 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	095b      	lsrs	r3, r3, #5
 8004682:	68fa      	ldr	r2, [r7, #12]
 8004684:	8912      	ldrh	r2, [r2, #8]
 8004686:	4293      	cmp	r3, r2
 8004688:	f0c0 808d 	bcc.w	80047a6 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2200      	movs	r2, #0
 8004690:	61da      	str	r2, [r3, #28]
 8004692:	2304      	movs	r3, #4
 8004694:	e09a      	b.n	80047cc <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	899b      	ldrh	r3, [r3, #12]
 800469a:	461a      	mov	r2, r3
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	fbb3 f3f2 	udiv	r3, r3, r2
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	8952      	ldrh	r2, [r2, #10]
 80046a6:	3a01      	subs	r2, #1
 80046a8:	4013      	ands	r3, r2
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d17b      	bne.n	80047a6 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	699b      	ldr	r3, [r3, #24]
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f7ff fc0b 	bl	8003ed2 <get_fat>
 80046bc:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d801      	bhi.n	80046c8 <dir_next+0xa0>
 80046c4:	2302      	movs	r3, #2
 80046c6:	e081      	b.n	80047cc <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ce:	d101      	bne.n	80046d4 <dir_next+0xac>
 80046d0:	2301      	movs	r3, #1
 80046d2:	e07b      	b.n	80047cc <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	69db      	ldr	r3, [r3, #28]
 80046d8:	697a      	ldr	r2, [r7, #20]
 80046da:	429a      	cmp	r2, r3
 80046dc:	d359      	bcc.n	8004792 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80046de:	683b      	ldr	r3, [r7, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d104      	bne.n	80046ee <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	61da      	str	r2, [r3, #28]
 80046ea:	2304      	movs	r3, #4
 80046ec:	e06e      	b.n	80047cc <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	699b      	ldr	r3, [r3, #24]
 80046f4:	4619      	mov	r1, r3
 80046f6:	4610      	mov	r0, r2
 80046f8:	f7ff fe3d 	bl	8004376 <create_chain>
 80046fc:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046fe:	697b      	ldr	r3, [r7, #20]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d101      	bne.n	8004708 <dir_next+0xe0>
 8004704:	2307      	movs	r3, #7
 8004706:	e061      	b.n	80047cc <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8004708:	697b      	ldr	r3, [r7, #20]
 800470a:	2b01      	cmp	r3, #1
 800470c:	d101      	bne.n	8004712 <dir_next+0xea>
 800470e:	2302      	movs	r3, #2
 8004710:	e05c      	b.n	80047cc <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004718:	d101      	bne.n	800471e <dir_next+0xf6>
 800471a:	2301      	movs	r3, #1
 800471c:	e056      	b.n	80047cc <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800471e:	68f8      	ldr	r0, [r7, #12]
 8004720:	f7ff fad6 	bl	8003cd0 <sync_window>
 8004724:	4603      	mov	r3, r0
 8004726:	2b00      	cmp	r3, #0
 8004728:	d001      	beq.n	800472e <dir_next+0x106>
 800472a:	2301      	movs	r3, #1
 800472c:	e04e      	b.n	80047cc <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	899b      	ldrh	r3, [r3, #12]
 8004738:	461a      	mov	r2, r3
 800473a:	2100      	movs	r1, #0
 800473c:	f7ff f8ff 	bl	800393e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004740:	2300      	movs	r3, #0
 8004742:	613b      	str	r3, [r7, #16]
 8004744:	6979      	ldr	r1, [r7, #20]
 8004746:	68f8      	ldr	r0, [r7, #12]
 8004748:	f7ff fba4 	bl	8003e94 <clust2sect>
 800474c:	4602      	mov	r2, r0
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	635a      	str	r2, [r3, #52]	@ 0x34
 8004752:	e012      	b.n	800477a <dir_next+0x152>
						fs->wflag = 1;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	2201      	movs	r2, #1
 8004758:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800475a:	68f8      	ldr	r0, [r7, #12]
 800475c:	f7ff fab8 	bl	8003cd0 <sync_window>
 8004760:	4603      	mov	r3, r0
 8004762:	2b00      	cmp	r3, #0
 8004764:	d001      	beq.n	800476a <dir_next+0x142>
 8004766:	2301      	movs	r3, #1
 8004768:	e030      	b.n	80047cc <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800476a:	693b      	ldr	r3, [r7, #16]
 800476c:	3301      	adds	r3, #1
 800476e:	613b      	str	r3, [r7, #16]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004774:	1c5a      	adds	r2, r3, #1
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	635a      	str	r2, [r3, #52]	@ 0x34
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	895b      	ldrh	r3, [r3, #10]
 800477e:	461a      	mov	r2, r3
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	4293      	cmp	r3, r2
 8004784:	d3e6      	bcc.n	8004754 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	1ad2      	subs	r2, r2, r3
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	697a      	ldr	r2, [r7, #20]
 8004796:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004798:	6979      	ldr	r1, [r7, #20]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f7ff fb7a 	bl	8003e94 <clust2sect>
 80047a0:	4602      	mov	r2, r0
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	68ba      	ldr	r2, [r7, #8]
 80047aa:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	899b      	ldrh	r3, [r3, #12]
 80047b6:	461a      	mov	r2, r3
 80047b8:	68bb      	ldr	r3, [r7, #8]
 80047ba:	fbb3 f0f2 	udiv	r0, r3, r2
 80047be:	fb00 f202 	mul.w	r2, r0, r2
 80047c2:	1a9b      	subs	r3, r3, r2
 80047c4:	18ca      	adds	r2, r1, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80047ca:	2300      	movs	r3, #0
}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3718      	adds	r7, #24
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80047e4:	2100      	movs	r1, #0
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f7ff fe95 	bl	8004516 <dir_sdi>
 80047ec:	4603      	mov	r3, r0
 80047ee:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80047f0:	7dfb      	ldrb	r3, [r7, #23]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d12b      	bne.n	800484e <dir_alloc+0x7a>
		n = 0;
 80047f6:	2300      	movs	r3, #0
 80047f8:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	69db      	ldr	r3, [r3, #28]
 80047fe:	4619      	mov	r1, r3
 8004800:	68f8      	ldr	r0, [r7, #12]
 8004802:	f7ff faa9 	bl	8003d58 <move_window>
 8004806:	4603      	mov	r3, r0
 8004808:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800480a:	7dfb      	ldrb	r3, [r7, #23]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d11d      	bne.n	800484c <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6a1b      	ldr	r3, [r3, #32]
 8004814:	781b      	ldrb	r3, [r3, #0]
 8004816:	2be5      	cmp	r3, #229	@ 0xe5
 8004818:	d004      	beq.n	8004824 <dir_alloc+0x50>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6a1b      	ldr	r3, [r3, #32]
 800481e:	781b      	ldrb	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d107      	bne.n	8004834 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	3301      	adds	r3, #1
 8004828:	613b      	str	r3, [r7, #16]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	429a      	cmp	r2, r3
 8004830:	d102      	bne.n	8004838 <dir_alloc+0x64>
 8004832:	e00c      	b.n	800484e <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004834:	2300      	movs	r3, #0
 8004836:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8004838:	2101      	movs	r1, #1
 800483a:	6878      	ldr	r0, [r7, #4]
 800483c:	f7ff fef4 	bl	8004628 <dir_next>
 8004840:	4603      	mov	r3, r0
 8004842:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004844:	7dfb      	ldrb	r3, [r7, #23]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d0d7      	beq.n	80047fa <dir_alloc+0x26>
 800484a:	e000      	b.n	800484e <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800484c:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800484e:	7dfb      	ldrb	r3, [r7, #23]
 8004850:	2b04      	cmp	r3, #4
 8004852:	d101      	bne.n	8004858 <dir_alloc+0x84>
 8004854:	2307      	movs	r3, #7
 8004856:	75fb      	strb	r3, [r7, #23]
	return res;
 8004858:	7dfb      	ldrb	r3, [r7, #23]
}
 800485a:	4618      	mov	r0, r3
 800485c:	3718      	adds	r7, #24
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004862:	b580      	push	{r7, lr}
 8004864:	b084      	sub	sp, #16
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	331a      	adds	r3, #26
 8004870:	4618      	mov	r0, r3
 8004872:	f7fe ffc1 	bl	80037f8 <ld_word>
 8004876:	4603      	mov	r3, r0
 8004878:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b03      	cmp	r3, #3
 8004880:	d109      	bne.n	8004896 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	3314      	adds	r3, #20
 8004886:	4618      	mov	r0, r3
 8004888:	f7fe ffb6 	bl	80037f8 <ld_word>
 800488c:	4603      	mov	r3, r0
 800488e:	041b      	lsls	r3, r3, #16
 8004890:	68fa      	ldr	r2, [r7, #12]
 8004892:	4313      	orrs	r3, r2
 8004894:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8004896:	68fb      	ldr	r3, [r7, #12]
}
 8004898:	4618      	mov	r0, r3
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}

080048a0 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80048ac:	68bb      	ldr	r3, [r7, #8]
 80048ae:	331a      	adds	r3, #26
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	b292      	uxth	r2, r2
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f7fe ffd9 	bl	800386e <st_word>
	if (fs->fs_type == FS_FAT32) {
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	781b      	ldrb	r3, [r3, #0]
 80048c0:	2b03      	cmp	r3, #3
 80048c2:	d109      	bne.n	80048d8 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	f103 0214 	add.w	r2, r3, #20
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	0c1b      	lsrs	r3, r3, #16
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	4619      	mov	r1, r3
 80048d2:	4610      	mov	r0, r2
 80048d4:	f7fe ffcb 	bl	800386e <st_word>
	}
}
 80048d8:	bf00      	nop
 80048da:	3710      	adds	r7, #16
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}

080048e0 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80048e0:	b590      	push	{r4, r7, lr}
 80048e2:	b087      	sub	sp, #28
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	331a      	adds	r3, #26
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7fe ff82 	bl	80037f8 <ld_word>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d001      	beq.n	80048fe <cmp_lfn+0x1e>
 80048fa:	2300      	movs	r3, #0
 80048fc:	e059      	b.n	80049b2 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	781b      	ldrb	r3, [r3, #0]
 8004902:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004906:	1e5a      	subs	r2, r3, #1
 8004908:	4613      	mov	r3, r2
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	4413      	add	r3, r2
 800490e:	009b      	lsls	r3, r3, #2
 8004910:	4413      	add	r3, r2
 8004912:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004914:	2301      	movs	r3, #1
 8004916:	81fb      	strh	r3, [r7, #14]
 8004918:	2300      	movs	r3, #0
 800491a:	613b      	str	r3, [r7, #16]
 800491c:	e033      	b.n	8004986 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800491e:	4a27      	ldr	r2, [pc, #156]	@ (80049bc <cmp_lfn+0xdc>)
 8004920:	693b      	ldr	r3, [r7, #16]
 8004922:	4413      	add	r3, r2
 8004924:	781b      	ldrb	r3, [r3, #0]
 8004926:	461a      	mov	r2, r3
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	4413      	add	r3, r2
 800492c:	4618      	mov	r0, r3
 800492e:	f7fe ff63 	bl	80037f8 <ld_word>
 8004932:	4603      	mov	r3, r0
 8004934:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8004936:	89fb      	ldrh	r3, [r7, #14]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d01a      	beq.n	8004972 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	2bfe      	cmp	r3, #254	@ 0xfe
 8004940:	d812      	bhi.n	8004968 <cmp_lfn+0x88>
 8004942:	89bb      	ldrh	r3, [r7, #12]
 8004944:	4618      	mov	r0, r3
 8004946:	f002 f85f 	bl	8006a08 <ff_wtoupper>
 800494a:	4603      	mov	r3, r0
 800494c:	461c      	mov	r4, r3
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	617a      	str	r2, [r7, #20]
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	687a      	ldr	r2, [r7, #4]
 8004958:	4413      	add	r3, r2
 800495a:	881b      	ldrh	r3, [r3, #0]
 800495c:	4618      	mov	r0, r3
 800495e:	f002 f853 	bl	8006a08 <ff_wtoupper>
 8004962:	4603      	mov	r3, r0
 8004964:	429c      	cmp	r4, r3
 8004966:	d001      	beq.n	800496c <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8004968:	2300      	movs	r3, #0
 800496a:	e022      	b.n	80049b2 <cmp_lfn+0xd2>
			}
			wc = uc;
 800496c:	89bb      	ldrh	r3, [r7, #12]
 800496e:	81fb      	strh	r3, [r7, #14]
 8004970:	e006      	b.n	8004980 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004972:	89bb      	ldrh	r3, [r7, #12]
 8004974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004978:	4293      	cmp	r3, r2
 800497a:	d001      	beq.n	8004980 <cmp_lfn+0xa0>
 800497c:	2300      	movs	r3, #0
 800497e:	e018      	b.n	80049b2 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	3301      	adds	r3, #1
 8004984:	613b      	str	r3, [r7, #16]
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	2b0c      	cmp	r3, #12
 800498a:	d9c8      	bls.n	800491e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004994:	2b00      	cmp	r3, #0
 8004996:	d00b      	beq.n	80049b0 <cmp_lfn+0xd0>
 8004998:	89fb      	ldrh	r3, [r7, #14]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d008      	beq.n	80049b0 <cmp_lfn+0xd0>
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	4413      	add	r3, r2
 80049a6:	881b      	ldrh	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d001      	beq.n	80049b0 <cmp_lfn+0xd0>
 80049ac:	2300      	movs	r3, #0
 80049ae:	e000      	b.n	80049b2 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80049b0:	2301      	movs	r3, #1
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd90      	pop	{r4, r7, pc}
 80049ba:	bf00      	nop
 80049bc:	08007c68 	.word	0x08007c68

080049c0 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	60f8      	str	r0, [r7, #12]
 80049c8:	60b9      	str	r1, [r7, #8]
 80049ca:	4611      	mov	r1, r2
 80049cc:	461a      	mov	r2, r3
 80049ce:	460b      	mov	r3, r1
 80049d0:	71fb      	strb	r3, [r7, #7]
 80049d2:	4613      	mov	r3, r2
 80049d4:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	330d      	adds	r3, #13
 80049da:	79ba      	ldrb	r2, [r7, #6]
 80049dc:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	330b      	adds	r3, #11
 80049e2:	220f      	movs	r2, #15
 80049e4:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	330c      	adds	r3, #12
 80049ea:	2200      	movs	r2, #0
 80049ec:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	331a      	adds	r3, #26
 80049f2:	2100      	movs	r1, #0
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fe ff3a 	bl	800386e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80049fa:	79fb      	ldrb	r3, [r7, #7]
 80049fc:	1e5a      	subs	r2, r3, #1
 80049fe:	4613      	mov	r3, r2
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	4413      	add	r3, r2
 8004a08:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	82fb      	strh	r3, [r7, #22]
 8004a0e:	2300      	movs	r3, #0
 8004a10:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004a12:	8afb      	ldrh	r3, [r7, #22]
 8004a14:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d007      	beq.n	8004a2c <put_lfn+0x6c>
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	1c5a      	adds	r2, r3, #1
 8004a20:	61fa      	str	r2, [r7, #28]
 8004a22:	005b      	lsls	r3, r3, #1
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004a2c:	4a17      	ldr	r2, [pc, #92]	@ (8004a8c <put_lfn+0xcc>)
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	4413      	add	r3, r2
 8004a32:	781b      	ldrb	r3, [r3, #0]
 8004a34:	461a      	mov	r2, r3
 8004a36:	68bb      	ldr	r3, [r7, #8]
 8004a38:	4413      	add	r3, r2
 8004a3a:	8afa      	ldrh	r2, [r7, #22]
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f7fe ff15 	bl	800386e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004a44:	8afb      	ldrh	r3, [r7, #22]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d102      	bne.n	8004a50 <put_lfn+0x90>
 8004a4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a4e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	3301      	adds	r3, #1
 8004a54:	61bb      	str	r3, [r7, #24]
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	2b0c      	cmp	r3, #12
 8004a5a:	d9da      	bls.n	8004a12 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004a5c:	8afb      	ldrh	r3, [r7, #22]
 8004a5e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a62:	4293      	cmp	r3, r2
 8004a64:	d006      	beq.n	8004a74 <put_lfn+0xb4>
 8004a66:	69fb      	ldr	r3, [r7, #28]
 8004a68:	005b      	lsls	r3, r3, #1
 8004a6a:	68fa      	ldr	r2, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	881b      	ldrh	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d103      	bne.n	8004a7c <put_lfn+0xbc>
 8004a74:	79fb      	ldrb	r3, [r7, #7]
 8004a76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	79fa      	ldrb	r2, [r7, #7]
 8004a80:	701a      	strb	r2, [r3, #0]
}
 8004a82:	bf00      	nop
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	08007c68 	.word	0x08007c68

08004a90 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b08c      	sub	sp, #48	@ 0x30
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004a9e:	220b      	movs	r2, #11
 8004aa0:	68b9      	ldr	r1, [r7, #8]
 8004aa2:	68f8      	ldr	r0, [r7, #12]
 8004aa4:	f7fe ff2a 	bl	80038fc <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d92b      	bls.n	8004b06 <gen_numname+0x76>
		sr = seq;
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004ab2:	e022      	b.n	8004afa <gen_numname+0x6a>
			wc = *lfn++;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	1c9a      	adds	r2, r3, #2
 8004ab8:	607a      	str	r2, [r7, #4]
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004abe:	2300      	movs	r3, #0
 8004ac0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ac2:	e017      	b.n	8004af4 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004ac4:	69fb      	ldr	r3, [r7, #28]
 8004ac6:	005a      	lsls	r2, r3, #1
 8004ac8:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	4413      	add	r3, r2
 8004ad0:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004ad2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ad4:	085b      	lsrs	r3, r3, #1
 8004ad6:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004ad8:	69fb      	ldr	r3, [r7, #28]
 8004ada:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <gen_numname+0x5e>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004ae8:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004aec:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af0:	3301      	adds	r3, #1
 8004af2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004af4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af6:	2b0f      	cmp	r3, #15
 8004af8:	d9e4      	bls.n	8004ac4 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	881b      	ldrh	r3, [r3, #0]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1d8      	bne.n	8004ab4 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004b06:	2307      	movs	r3, #7
 8004b08:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	b2db      	uxtb	r3, r3
 8004b0e:	f003 030f 	and.w	r3, r3, #15
 8004b12:	b2db      	uxtb	r3, r3
 8004b14:	3330      	adds	r3, #48	@ 0x30
 8004b16:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004b1a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b1e:	2b39      	cmp	r3, #57	@ 0x39
 8004b20:	d904      	bls.n	8004b2c <gen_numname+0x9c>
 8004b22:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b26:	3307      	adds	r3, #7
 8004b28:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004b2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b2e:	1e5a      	subs	r2, r3, #1
 8004b30:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b32:	3330      	adds	r3, #48	@ 0x30
 8004b34:	443b      	add	r3, r7
 8004b36:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004b3a:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	091b      	lsrs	r3, r3, #4
 8004b42:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004b44:	683b      	ldr	r3, [r7, #0]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d1df      	bne.n	8004b0a <gen_numname+0x7a>
	ns[i] = '~';
 8004b4a:	f107 0214 	add.w	r2, r7, #20
 8004b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b50:	4413      	add	r3, r2
 8004b52:	227e      	movs	r2, #126	@ 0x7e
 8004b54:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004b56:	2300      	movs	r3, #0
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5a:	e002      	b.n	8004b62 <gen_numname+0xd2>
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	3301      	adds	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b62:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d205      	bcs.n	8004b76 <gen_numname+0xe6>
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b6e:	4413      	add	r3, r2
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	2b20      	cmp	r3, #32
 8004b74:	d1f2      	bne.n	8004b5c <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004b76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b78:	2b07      	cmp	r3, #7
 8004b7a:	d807      	bhi.n	8004b8c <gen_numname+0xfc>
 8004b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b7e:	1c5a      	adds	r2, r3, #1
 8004b80:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b82:	3330      	adds	r3, #48	@ 0x30
 8004b84:	443b      	add	r3, r7
 8004b86:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004b8a:	e000      	b.n	8004b8e <gen_numname+0xfe>
 8004b8c:	2120      	movs	r1, #32
 8004b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b90:	1c5a      	adds	r2, r3, #1
 8004b92:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b94:	68fa      	ldr	r2, [r7, #12]
 8004b96:	4413      	add	r3, r2
 8004b98:	460a      	mov	r2, r1
 8004b9a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004b9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b9e:	2b07      	cmp	r3, #7
 8004ba0:	d9e9      	bls.n	8004b76 <gen_numname+0xe6>
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	3730      	adds	r7, #48	@ 0x30
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	bd80      	pop	{r7, pc}

08004bac <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004bb8:	230b      	movs	r3, #11
 8004bba:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004bbc:	7bfb      	ldrb	r3, [r7, #15]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	0852      	lsrs	r2, r2, #1
 8004bc2:	01db      	lsls	r3, r3, #7
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	b2da      	uxtb	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	1c59      	adds	r1, r3, #1
 8004bcc:	6079      	str	r1, [r7, #4]
 8004bce:	781b      	ldrb	r3, [r3, #0]
 8004bd0:	4413      	add	r3, r2
 8004bd2:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	60bb      	str	r3, [r7, #8]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d1ed      	bne.n	8004bbc <sum_sfn+0x10>
	return sum;
 8004be0:	7bfb      	ldrb	r3, [r7, #15]
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr

08004bee <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004bee:	b580      	push	{r7, lr}
 8004bf0:	b086      	sub	sp, #24
 8004bf2:	af00      	add	r7, sp, #0
 8004bf4:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004bfc:	2100      	movs	r1, #0
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f7ff fc89 	bl	8004516 <dir_sdi>
 8004c04:	4603      	mov	r3, r0
 8004c06:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004c08:	7dfb      	ldrb	r3, [r7, #23]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d001      	beq.n	8004c12 <dir_find+0x24>
 8004c0e:	7dfb      	ldrb	r3, [r7, #23]
 8004c10:	e0a9      	b.n	8004d66 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004c12:	23ff      	movs	r3, #255	@ 0xff
 8004c14:	753b      	strb	r3, [r7, #20]
 8004c16:	7d3b      	ldrb	r3, [r7, #20]
 8004c18:	757b      	strb	r3, [r7, #21]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	69db      	ldr	r3, [r3, #28]
 8004c26:	4619      	mov	r1, r3
 8004c28:	6938      	ldr	r0, [r7, #16]
 8004c2a:	f7ff f895 	bl	8003d58 <move_window>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c32:	7dfb      	ldrb	r3, [r7, #23]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	f040 8090 	bne.w	8004d5a <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a1b      	ldr	r3, [r3, #32]
 8004c3e:	781b      	ldrb	r3, [r3, #0]
 8004c40:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c42:	7dbb      	ldrb	r3, [r7, #22]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d102      	bne.n	8004c4e <dir_find+0x60>
 8004c48:	2304      	movs	r3, #4
 8004c4a:	75fb      	strb	r3, [r7, #23]
 8004c4c:	e08a      	b.n	8004d64 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6a1b      	ldr	r3, [r3, #32]
 8004c52:	330b      	adds	r3, #11
 8004c54:	781b      	ldrb	r3, [r3, #0]
 8004c56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c5a:	73fb      	strb	r3, [r7, #15]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	7bfa      	ldrb	r2, [r7, #15]
 8004c60:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004c62:	7dbb      	ldrb	r3, [r7, #22]
 8004c64:	2be5      	cmp	r3, #229	@ 0xe5
 8004c66:	d007      	beq.n	8004c78 <dir_find+0x8a>
 8004c68:	7bfb      	ldrb	r3, [r7, #15]
 8004c6a:	f003 0308 	and.w	r3, r3, #8
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <dir_find+0x98>
 8004c72:	7bfb      	ldrb	r3, [r7, #15]
 8004c74:	2b0f      	cmp	r3, #15
 8004c76:	d006      	beq.n	8004c86 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004c78:	23ff      	movs	r3, #255	@ 0xff
 8004c7a:	757b      	strb	r3, [r7, #21]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c82:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c84:	e05e      	b.n	8004d44 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004c86:	7bfb      	ldrb	r3, [r7, #15]
 8004c88:	2b0f      	cmp	r3, #15
 8004c8a:	d136      	bne.n	8004cfa <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d154      	bne.n	8004d44 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004c9a:	7dbb      	ldrb	r3, [r7, #22]
 8004c9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00d      	beq.n	8004cc0 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6a1b      	ldr	r3, [r3, #32]
 8004ca8:	7b5b      	ldrb	r3, [r3, #13]
 8004caa:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004cac:	7dbb      	ldrb	r3, [r7, #22]
 8004cae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004cb2:	75bb      	strb	r3, [r7, #22]
 8004cb4:	7dbb      	ldrb	r3, [r7, #22]
 8004cb6:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	695a      	ldr	r2, [r3, #20]
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004cc0:	7dba      	ldrb	r2, [r7, #22]
 8004cc2:	7d7b      	ldrb	r3, [r7, #21]
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d115      	bne.n	8004cf4 <dir_find+0x106>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a1b      	ldr	r3, [r3, #32]
 8004ccc:	330d      	adds	r3, #13
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	7d3a      	ldrb	r2, [r7, #20]
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d10e      	bne.n	8004cf4 <dir_find+0x106>
 8004cd6:	693b      	ldr	r3, [r7, #16]
 8004cd8:	691a      	ldr	r2, [r3, #16]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6a1b      	ldr	r3, [r3, #32]
 8004cde:	4619      	mov	r1, r3
 8004ce0:	4610      	mov	r0, r2
 8004ce2:	f7ff fdfd 	bl	80048e0 <cmp_lfn>
 8004ce6:	4603      	mov	r3, r0
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d003      	beq.n	8004cf4 <dir_find+0x106>
 8004cec:	7d7b      	ldrb	r3, [r7, #21]
 8004cee:	3b01      	subs	r3, #1
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	e000      	b.n	8004cf6 <dir_find+0x108>
 8004cf4:	23ff      	movs	r3, #255	@ 0xff
 8004cf6:	757b      	strb	r3, [r7, #21]
 8004cf8:	e024      	b.n	8004d44 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004cfa:	7d7b      	ldrb	r3, [r7, #21]
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d109      	bne.n	8004d14 <dir_find+0x126>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	6a1b      	ldr	r3, [r3, #32]
 8004d04:	4618      	mov	r0, r3
 8004d06:	f7ff ff51 	bl	8004bac <sum_sfn>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	7d3b      	ldrb	r3, [r7, #20]
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d024      	beq.n	8004d5e <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d10a      	bne.n	8004d38 <dir_find+0x14a>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a18      	ldr	r0, [r3, #32]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	3324      	adds	r3, #36	@ 0x24
 8004d2a:	220b      	movs	r2, #11
 8004d2c:	4619      	mov	r1, r3
 8004d2e:	f7fe fe21 	bl	8003974 <mem_cmp>
 8004d32:	4603      	mov	r3, r0
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d014      	beq.n	8004d62 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004d38:	23ff      	movs	r3, #255	@ 0xff
 8004d3a:	757b      	strb	r3, [r7, #21]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f04f 32ff 	mov.w	r2, #4294967295
 8004d42:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004d44:	2100      	movs	r1, #0
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f7ff fc6e 	bl	8004628 <dir_next>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004d50:	7dfb      	ldrb	r3, [r7, #23]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	f43f af65 	beq.w	8004c22 <dir_find+0x34>
 8004d58:	e004      	b.n	8004d64 <dir_find+0x176>
		if (res != FR_OK) break;
 8004d5a:	bf00      	nop
 8004d5c:	e002      	b.n	8004d64 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004d5e:	bf00      	nop
 8004d60:	e000      	b.n	8004d64 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d62:	bf00      	nop

	return res;
 8004d64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d66:	4618      	mov	r0, r3
 8004d68:	3718      	adds	r7, #24
 8004d6a:	46bd      	mov	sp, r7
 8004d6c:	bd80      	pop	{r7, pc}
	...

08004d70 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b08c      	sub	sp, #48	@ 0x30
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d84:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d001      	beq.n	8004d90 <dir_register+0x20>
 8004d8c:	2306      	movs	r3, #6
 8004d8e:	e0e0      	b.n	8004f52 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004d90:	2300      	movs	r3, #0
 8004d92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d94:	e002      	b.n	8004d9c <dir_register+0x2c>
 8004d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d98:	3301      	adds	r3, #1
 8004d9a:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	691a      	ldr	r2, [r3, #16]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	4413      	add	r3, r2
 8004da6:	881b      	ldrh	r3, [r3, #0]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d1f4      	bne.n	8004d96 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004db2:	f107 030c 	add.w	r3, r7, #12
 8004db6:	220c      	movs	r2, #12
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe fd9f 	bl	80038fc <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004dbe:	7dfb      	ldrb	r3, [r7, #23]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d032      	beq.n	8004e2e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2240      	movs	r2, #64	@ 0x40
 8004dcc:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dd4:	e016      	b.n	8004e04 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004ddc:	69fb      	ldr	r3, [r7, #28]
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	f107 010c 	add.w	r1, r7, #12
 8004de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004de6:	f7ff fe53 	bl	8004a90 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7ff feff 	bl	8004bee <dir_find>
 8004df0:	4603      	mov	r3, r0
 8004df2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004df6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d106      	bne.n	8004e0c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004dfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e00:	3301      	adds	r3, #1
 8004e02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e06:	2b63      	cmp	r3, #99	@ 0x63
 8004e08:	d9e5      	bls.n	8004dd6 <dir_register+0x66>
 8004e0a:	e000      	b.n	8004e0e <dir_register+0x9e>
			if (res != FR_OK) break;
 8004e0c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004e0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e10:	2b64      	cmp	r3, #100	@ 0x64
 8004e12:	d101      	bne.n	8004e18 <dir_register+0xa8>
 8004e14:	2307      	movs	r3, #7
 8004e16:	e09c      	b.n	8004f52 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004e18:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e1c:	2b04      	cmp	r3, #4
 8004e1e:	d002      	beq.n	8004e26 <dir_register+0xb6>
 8004e20:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e24:	e095      	b.n	8004f52 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004e26:	7dfa      	ldrb	r2, [r7, #23]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004e2e:	7dfb      	ldrb	r3, [r7, #23]
 8004e30:	f003 0302 	and.w	r3, r3, #2
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <dir_register+0xd8>
 8004e38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	4a47      	ldr	r2, [pc, #284]	@ (8004f5c <dir_register+0x1ec>)
 8004e3e:	fba2 2303 	umull	r2, r3, r2, r3
 8004e42:	089b      	lsrs	r3, r3, #2
 8004e44:	3301      	adds	r3, #1
 8004e46:	e000      	b.n	8004e4a <dir_register+0xda>
 8004e48:	2301      	movs	r3, #1
 8004e4a:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004e4c:	6a39      	ldr	r1, [r7, #32]
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7ff fcc0 	bl	80047d4 <dir_alloc>
 8004e54:	4603      	mov	r3, r0
 8004e56:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004e5a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d148      	bne.n	8004ef4 <dir_register+0x184>
 8004e62:	6a3b      	ldr	r3, [r7, #32]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	623b      	str	r3, [r7, #32]
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d042      	beq.n	8004ef4 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	695a      	ldr	r2, [r3, #20]
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	015b      	lsls	r3, r3, #5
 8004e76:	1ad3      	subs	r3, r2, r3
 8004e78:	4619      	mov	r1, r3
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff fb4b 	bl	8004516 <dir_sdi>
 8004e80:	4603      	mov	r3, r0
 8004e82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004e86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d132      	bne.n	8004ef4 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	3324      	adds	r3, #36	@ 0x24
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7ff fe8a 	bl	8004bac <sum_sfn>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	69db      	ldr	r3, [r3, #28]
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	69f8      	ldr	r0, [r7, #28]
 8004ea4:	f7fe ff58 	bl	8003d58 <move_window>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004eae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d11d      	bne.n	8004ef2 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	6918      	ldr	r0, [r3, #16]
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6a19      	ldr	r1, [r3, #32]
 8004ebe:	6a3b      	ldr	r3, [r7, #32]
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	7efb      	ldrb	r3, [r7, #27]
 8004ec4:	f7ff fd7c 	bl	80049c0 <put_lfn>
				fs->wflag = 1;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004ece:	2100      	movs	r1, #0
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f7ff fba9 	bl	8004628 <dir_next>
 8004ed6:	4603      	mov	r3, r0
 8004ed8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004edc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d107      	bne.n	8004ef4 <dir_register+0x184>
 8004ee4:	6a3b      	ldr	r3, [r7, #32]
 8004ee6:	3b01      	subs	r3, #1
 8004ee8:	623b      	str	r3, [r7, #32]
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1d5      	bne.n	8004e9c <dir_register+0x12c>
 8004ef0:	e000      	b.n	8004ef4 <dir_register+0x184>
				if (res != FR_OK) break;
 8004ef2:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004ef4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d128      	bne.n	8004f4e <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	69db      	ldr	r3, [r3, #28]
 8004f00:	4619      	mov	r1, r3
 8004f02:	69f8      	ldr	r0, [r7, #28]
 8004f04:	f7fe ff28 	bl	8003d58 <move_window>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004f0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d11b      	bne.n	8004f4e <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6a1b      	ldr	r3, [r3, #32]
 8004f1a:	2220      	movs	r2, #32
 8004f1c:	2100      	movs	r1, #0
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fe fd0d 	bl	800393e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a18      	ldr	r0, [r3, #32]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3324      	adds	r3, #36	@ 0x24
 8004f2c:	220b      	movs	r2, #11
 8004f2e:	4619      	mov	r1, r3
 8004f30:	f7fe fce4 	bl	80038fc <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	330c      	adds	r3, #12
 8004f40:	f002 0218 	and.w	r2, r2, #24
 8004f44:	b2d2      	uxtb	r2, r2
 8004f46:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004f4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3730      	adds	r7, #48	@ 0x30
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	4ec4ec4f 	.word	0x4ec4ec4f

08004f60 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b08a      	sub	sp, #40	@ 0x28
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
 8004f68:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	613b      	str	r3, [r7, #16]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	60fb      	str	r3, [r7, #12]
 8004f78:	2300      	movs	r3, #0
 8004f7a:	617b      	str	r3, [r7, #20]
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	1c5a      	adds	r2, r3, #1
 8004f84:	61ba      	str	r2, [r7, #24]
 8004f86:	693a      	ldr	r2, [r7, #16]
 8004f88:	4413      	add	r3, r2
 8004f8a:	781b      	ldrb	r3, [r3, #0]
 8004f8c:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f90:	2b1f      	cmp	r3, #31
 8004f92:	d940      	bls.n	8005016 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004f94:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f96:	2b2f      	cmp	r3, #47	@ 0x2f
 8004f98:	d006      	beq.n	8004fa8 <create_name+0x48>
 8004f9a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f9c:	2b5c      	cmp	r3, #92	@ 0x5c
 8004f9e:	d110      	bne.n	8004fc2 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004fa0:	e002      	b.n	8004fa8 <create_name+0x48>
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	61bb      	str	r3, [r7, #24]
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b2f      	cmp	r3, #47	@ 0x2f
 8004fb2:	d0f6      	beq.n	8004fa2 <create_name+0x42>
 8004fb4:	693a      	ldr	r2, [r7, #16]
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	4413      	add	r3, r2
 8004fba:	781b      	ldrb	r3, [r3, #0]
 8004fbc:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fbe:	d0f0      	beq.n	8004fa2 <create_name+0x42>
			break;
 8004fc0:	e02a      	b.n	8005018 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	2bfe      	cmp	r3, #254	@ 0xfe
 8004fc6:	d901      	bls.n	8004fcc <create_name+0x6c>
 8004fc8:	2306      	movs	r3, #6
 8004fca:	e17d      	b.n	80052c8 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004fcc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004fd2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd4:	2101      	movs	r1, #1
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	f001 fcda 	bl	8006990 <ff_convert>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004fe0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d101      	bne.n	8004fea <create_name+0x8a>
 8004fe6:	2306      	movs	r3, #6
 8004fe8:	e16e      	b.n	80052c8 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004fea:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fec:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fee:	d809      	bhi.n	8005004 <create_name+0xa4>
 8004ff0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004ff2:	4619      	mov	r1, r3
 8004ff4:	488d      	ldr	r0, [pc, #564]	@ (800522c <create_name+0x2cc>)
 8004ff6:	f7fe fce4 	bl	80039c2 <chk_chr>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d001      	beq.n	8005004 <create_name+0xa4>
 8005000:	2306      	movs	r3, #6
 8005002:	e161      	b.n	80052c8 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	1c5a      	adds	r2, r3, #1
 8005008:	617a      	str	r2, [r7, #20]
 800500a:	005b      	lsls	r3, r3, #1
 800500c:	68fa      	ldr	r2, [r7, #12]
 800500e:	4413      	add	r3, r2
 8005010:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005012:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005014:	e7b4      	b.n	8004f80 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8005016:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8005018:	693a      	ldr	r2, [r7, #16]
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	441a      	add	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005022:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005024:	2b1f      	cmp	r3, #31
 8005026:	d801      	bhi.n	800502c <create_name+0xcc>
 8005028:	2304      	movs	r3, #4
 800502a:	e000      	b.n	800502e <create_name+0xce>
 800502c:	2300      	movs	r3, #0
 800502e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005032:	e011      	b.n	8005058 <create_name+0xf8>
		w = lfn[di - 1];
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800503a:	3b01      	subs	r3, #1
 800503c:	005b      	lsls	r3, r3, #1
 800503e:	68fa      	ldr	r2, [r7, #12]
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 8005046:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005048:	2b20      	cmp	r3, #32
 800504a:	d002      	beq.n	8005052 <create_name+0xf2>
 800504c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800504e:	2b2e      	cmp	r3, #46	@ 0x2e
 8005050:	d106      	bne.n	8005060 <create_name+0x100>
		di--;
 8005052:	697b      	ldr	r3, [r7, #20]
 8005054:	3b01      	subs	r3, #1
 8005056:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005058:	697b      	ldr	r3, [r7, #20]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1ea      	bne.n	8005034 <create_name+0xd4>
 800505e:	e000      	b.n	8005062 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005060:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	005b      	lsls	r3, r3, #1
 8005066:	68fa      	ldr	r2, [r7, #12]
 8005068:	4413      	add	r3, r2
 800506a:	2200      	movs	r2, #0
 800506c:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d101      	bne.n	8005078 <create_name+0x118>
 8005074:	2306      	movs	r3, #6
 8005076:	e127      	b.n	80052c8 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	3324      	adds	r3, #36	@ 0x24
 800507c:	220b      	movs	r2, #11
 800507e:	2120      	movs	r1, #32
 8005080:	4618      	mov	r0, r3
 8005082:	f7fe fc5c 	bl	800393e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8005086:	2300      	movs	r3, #0
 8005088:	61bb      	str	r3, [r7, #24]
 800508a:	e002      	b.n	8005092 <create_name+0x132>
 800508c:	69bb      	ldr	r3, [r7, #24]
 800508e:	3301      	adds	r3, #1
 8005090:	61bb      	str	r3, [r7, #24]
 8005092:	69bb      	ldr	r3, [r7, #24]
 8005094:	005b      	lsls	r3, r3, #1
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	4413      	add	r3, r2
 800509a:	881b      	ldrh	r3, [r3, #0]
 800509c:	2b20      	cmp	r3, #32
 800509e:	d0f5      	beq.n	800508c <create_name+0x12c>
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	005b      	lsls	r3, r3, #1
 80050a4:	68fa      	ldr	r2, [r7, #12]
 80050a6:	4413      	add	r3, r2
 80050a8:	881b      	ldrh	r3, [r3, #0]
 80050aa:	2b2e      	cmp	r3, #46	@ 0x2e
 80050ac:	d0ee      	beq.n	800508c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d009      	beq.n	80050c8 <create_name+0x168>
 80050b4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050b8:	f043 0303 	orr.w	r3, r3, #3
 80050bc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80050c0:	e002      	b.n	80050c8 <create_name+0x168>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	3b01      	subs	r3, #1
 80050c6:	617b      	str	r3, [r7, #20]
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d009      	beq.n	80050e2 <create_name+0x182>
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80050d4:	3b01      	subs	r3, #1
 80050d6:	005b      	lsls	r3, r3, #1
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	4413      	add	r3, r2
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	2b2e      	cmp	r3, #46	@ 0x2e
 80050e0:	d1ef      	bne.n	80050c2 <create_name+0x162>

	i = b = 0; ni = 8;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80050e8:	2300      	movs	r3, #0
 80050ea:	623b      	str	r3, [r7, #32]
 80050ec:	2308      	movs	r3, #8
 80050ee:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	1c5a      	adds	r2, r3, #1
 80050f4:	61ba      	str	r2, [r7, #24]
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	68fa      	ldr	r2, [r7, #12]
 80050fa:	4413      	add	r3, r2
 80050fc:	881b      	ldrh	r3, [r3, #0]
 80050fe:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8005100:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005102:	2b00      	cmp	r3, #0
 8005104:	f000 8090 	beq.w	8005228 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8005108:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800510a:	2b20      	cmp	r3, #32
 800510c:	d006      	beq.n	800511c <create_name+0x1bc>
 800510e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005110:	2b2e      	cmp	r3, #46	@ 0x2e
 8005112:	d10a      	bne.n	800512a <create_name+0x1ca>
 8005114:	69ba      	ldr	r2, [r7, #24]
 8005116:	697b      	ldr	r3, [r7, #20]
 8005118:	429a      	cmp	r2, r3
 800511a:	d006      	beq.n	800512a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800511c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005120:	f043 0303 	orr.w	r3, r3, #3
 8005124:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005128:	e07d      	b.n	8005226 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800512a:	6a3a      	ldr	r2, [r7, #32]
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	429a      	cmp	r2, r3
 8005130:	d203      	bcs.n	800513a <create_name+0x1da>
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	429a      	cmp	r2, r3
 8005138:	d123      	bne.n	8005182 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	2b0b      	cmp	r3, #11
 800513e:	d106      	bne.n	800514e <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005140:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005144:	f043 0303 	orr.w	r3, r3, #3
 8005148:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800514c:	e075      	b.n	800523a <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800514e:	69ba      	ldr	r2, [r7, #24]
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	429a      	cmp	r2, r3
 8005154:	d005      	beq.n	8005162 <create_name+0x202>
 8005156:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800515a:	f043 0303 	orr.w	r3, r3, #3
 800515e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005162:	69ba      	ldr	r2, [r7, #24]
 8005164:	697b      	ldr	r3, [r7, #20]
 8005166:	429a      	cmp	r2, r3
 8005168:	d866      	bhi.n	8005238 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	61bb      	str	r3, [r7, #24]
 800516e:	2308      	movs	r3, #8
 8005170:	623b      	str	r3, [r7, #32]
 8005172:	230b      	movs	r3, #11
 8005174:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 8005176:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800517a:	009b      	lsls	r3, r3, #2
 800517c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005180:	e051      	b.n	8005226 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005182:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005184:	2b7f      	cmp	r3, #127	@ 0x7f
 8005186:	d914      	bls.n	80051b2 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8005188:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800518a:	2100      	movs	r1, #0
 800518c:	4618      	mov	r0, r3
 800518e:	f001 fbff 	bl	8006990 <ff_convert>
 8005192:	4603      	mov	r3, r0
 8005194:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8005196:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005198:	2b00      	cmp	r3, #0
 800519a:	d004      	beq.n	80051a6 <create_name+0x246>
 800519c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800519e:	3b80      	subs	r3, #128	@ 0x80
 80051a0:	4a23      	ldr	r2, [pc, #140]	@ (8005230 <create_name+0x2d0>)
 80051a2:	5cd3      	ldrb	r3, [r2, r3]
 80051a4:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 80051a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051aa:	f043 0302 	orr.w	r3, r3, #2
 80051ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80051b2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d007      	beq.n	80051c8 <create_name+0x268>
 80051b8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ba:	4619      	mov	r1, r3
 80051bc:	481d      	ldr	r0, [pc, #116]	@ (8005234 <create_name+0x2d4>)
 80051be:	f7fe fc00 	bl	80039c2 <chk_chr>
 80051c2:	4603      	mov	r3, r0
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d008      	beq.n	80051da <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80051c8:	235f      	movs	r3, #95	@ 0x5f
 80051ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051d0:	f043 0303 	orr.w	r3, r3, #3
 80051d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051d8:	e01b      	b.n	8005212 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80051da:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051dc:	2b40      	cmp	r3, #64	@ 0x40
 80051de:	d909      	bls.n	80051f4 <create_name+0x294>
 80051e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051e2:	2b5a      	cmp	r3, #90	@ 0x5a
 80051e4:	d806      	bhi.n	80051f4 <create_name+0x294>
					b |= 2;
 80051e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051ea:	f043 0302 	orr.w	r3, r3, #2
 80051ee:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051f2:	e00e      	b.n	8005212 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80051f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051f6:	2b60      	cmp	r3, #96	@ 0x60
 80051f8:	d90b      	bls.n	8005212 <create_name+0x2b2>
 80051fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051fc:	2b7a      	cmp	r3, #122	@ 0x7a
 80051fe:	d808      	bhi.n	8005212 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8005200:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800520c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800520e:	3b20      	subs	r3, #32
 8005210:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	1c5a      	adds	r2, r3, #1
 8005216:	623a      	str	r2, [r7, #32]
 8005218:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800521a:	b2d1      	uxtb	r1, r2
 800521c:	687a      	ldr	r2, [r7, #4]
 800521e:	4413      	add	r3, r2
 8005220:	460a      	mov	r2, r1
 8005222:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8005226:	e763      	b.n	80050f0 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8005228:	bf00      	nop
 800522a:	e006      	b.n	800523a <create_name+0x2da>
 800522c:	08007b90 	.word	0x08007b90
 8005230:	08007be8 	.word	0x08007be8
 8005234:	08007b9c 	.word	0x08007b9c
			if (si > di) break;			/* No extension */
 8005238:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005240:	2be5      	cmp	r3, #229	@ 0xe5
 8005242:	d103      	bne.n	800524c <create_name+0x2ec>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2205      	movs	r2, #5
 8005248:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	2b08      	cmp	r3, #8
 8005250:	d104      	bne.n	800525c <create_name+0x2fc>
 8005252:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800525c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b0c      	cmp	r3, #12
 8005266:	d005      	beq.n	8005274 <create_name+0x314>
 8005268:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800526c:	f003 0303 	and.w	r3, r3, #3
 8005270:	2b03      	cmp	r3, #3
 8005272:	d105      	bne.n	8005280 <create_name+0x320>
 8005274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005278:	f043 0302 	orr.w	r3, r3, #2
 800527c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005280:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005284:	f003 0302 	and.w	r3, r3, #2
 8005288:	2b00      	cmp	r3, #0
 800528a:	d117      	bne.n	80052bc <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800528c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005290:	f003 0303 	and.w	r3, r3, #3
 8005294:	2b01      	cmp	r3, #1
 8005296:	d105      	bne.n	80052a4 <create_name+0x344>
 8005298:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800529c:	f043 0310 	orr.w	r3, r3, #16
 80052a0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 80052a4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80052a8:	f003 030c 	and.w	r3, r3, #12
 80052ac:	2b04      	cmp	r3, #4
 80052ae:	d105      	bne.n	80052bc <create_name+0x35c>
 80052b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052b4:	f043 0308 	orr.w	r3, r3, #8
 80052b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80052c2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80052c6:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3728      	adds	r7, #40	@ 0x28
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	6078      	str	r0, [r7, #4]
 80052d8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80052de:	693b      	ldr	r3, [r7, #16]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80052e4:	e002      	b.n	80052ec <follow_path+0x1c>
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	3301      	adds	r3, #1
 80052ea:	603b      	str	r3, [r7, #0]
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	2b2f      	cmp	r3, #47	@ 0x2f
 80052f2:	d0f8      	beq.n	80052e6 <follow_path+0x16>
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	2b5c      	cmp	r3, #92	@ 0x5c
 80052fa:	d0f4      	beq.n	80052e6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	2200      	movs	r2, #0
 8005300:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	781b      	ldrb	r3, [r3, #0]
 8005306:	2b1f      	cmp	r3, #31
 8005308:	d80a      	bhi.n	8005320 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2280      	movs	r2, #128	@ 0x80
 800530e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005312:	2100      	movs	r1, #0
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f7ff f8fe 	bl	8004516 <dir_sdi>
 800531a:	4603      	mov	r3, r0
 800531c:	75fb      	strb	r3, [r7, #23]
 800531e:	e048      	b.n	80053b2 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005320:	463b      	mov	r3, r7
 8005322:	4619      	mov	r1, r3
 8005324:	6878      	ldr	r0, [r7, #4]
 8005326:	f7ff fe1b 	bl	8004f60 <create_name>
 800532a:	4603      	mov	r3, r0
 800532c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800532e:	7dfb      	ldrb	r3, [r7, #23]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d139      	bne.n	80053a8 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005334:	6878      	ldr	r0, [r7, #4]
 8005336:	f7ff fc5a 	bl	8004bee <dir_find>
 800533a:	4603      	mov	r3, r0
 800533c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005344:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8005346:	7dfb      	ldrb	r3, [r7, #23]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d00a      	beq.n	8005362 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800534c:	7dfb      	ldrb	r3, [r7, #23]
 800534e:	2b04      	cmp	r3, #4
 8005350:	d12c      	bne.n	80053ac <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005352:	7afb      	ldrb	r3, [r7, #11]
 8005354:	f003 0304 	and.w	r3, r3, #4
 8005358:	2b00      	cmp	r3, #0
 800535a:	d127      	bne.n	80053ac <follow_path+0xdc>
 800535c:	2305      	movs	r3, #5
 800535e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005360:	e024      	b.n	80053ac <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005362:	7afb      	ldrb	r3, [r7, #11]
 8005364:	f003 0304 	and.w	r3, r3, #4
 8005368:	2b00      	cmp	r3, #0
 800536a:	d121      	bne.n	80053b0 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	799b      	ldrb	r3, [r3, #6]
 8005370:	f003 0310 	and.w	r3, r3, #16
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <follow_path+0xae>
				res = FR_NO_PATH; break;
 8005378:	2305      	movs	r3, #5
 800537a:	75fb      	strb	r3, [r7, #23]
 800537c:	e019      	b.n	80053b2 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	8992      	ldrh	r2, [r2, #12]
 800538c:	fbb3 f0f2 	udiv	r0, r3, r2
 8005390:	fb00 f202 	mul.w	r2, r0, r2
 8005394:	1a9b      	subs	r3, r3, r2
 8005396:	440b      	add	r3, r1
 8005398:	4619      	mov	r1, r3
 800539a:	68f8      	ldr	r0, [r7, #12]
 800539c:	f7ff fa61 	bl	8004862 <ld_clust>
 80053a0:	4602      	mov	r2, r0
 80053a2:	693b      	ldr	r3, [r7, #16]
 80053a4:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80053a6:	e7bb      	b.n	8005320 <follow_path+0x50>
			if (res != FR_OK) break;
 80053a8:	bf00      	nop
 80053aa:	e002      	b.n	80053b2 <follow_path+0xe2>
				break;
 80053ac:	bf00      	nop
 80053ae:	e000      	b.n	80053b2 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053b0:	bf00      	nop
			}
		}
	}

	return res;
 80053b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3718      	adds	r7, #24
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}

080053bc <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053bc:	b480      	push	{r7}
 80053be:	b087      	sub	sp, #28
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053c4:	f04f 33ff 	mov.w	r3, #4294967295
 80053c8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d031      	beq.n	8005436 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	617b      	str	r3, [r7, #20]
 80053d8:	e002      	b.n	80053e0 <get_ldnumber+0x24>
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	3301      	adds	r3, #1
 80053de:	617b      	str	r3, [r7, #20]
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	2b1f      	cmp	r3, #31
 80053e6:	d903      	bls.n	80053f0 <get_ldnumber+0x34>
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	781b      	ldrb	r3, [r3, #0]
 80053ec:	2b3a      	cmp	r3, #58	@ 0x3a
 80053ee:	d1f4      	bne.n	80053da <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	2b3a      	cmp	r3, #58	@ 0x3a
 80053f6:	d11c      	bne.n	8005432 <get_ldnumber+0x76>
			tp = *path;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	1c5a      	adds	r2, r3, #1
 8005402:	60fa      	str	r2, [r7, #12]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	3b30      	subs	r3, #48	@ 0x30
 8005408:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	2b09      	cmp	r3, #9
 800540e:	d80e      	bhi.n	800542e <get_ldnumber+0x72>
 8005410:	68fa      	ldr	r2, [r7, #12]
 8005412:	697b      	ldr	r3, [r7, #20]
 8005414:	429a      	cmp	r2, r3
 8005416:	d10a      	bne.n	800542e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005418:	68bb      	ldr	r3, [r7, #8]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d107      	bne.n	800542e <get_ldnumber+0x72>
					vol = (int)i;
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005422:	697b      	ldr	r3, [r7, #20]
 8005424:	3301      	adds	r3, #1
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	697a      	ldr	r2, [r7, #20]
 800542c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	e002      	b.n	8005438 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005432:	2300      	movs	r3, #0
 8005434:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8005436:	693b      	ldr	r3, [r7, #16]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr

08005444 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
 800544c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	2200      	movs	r2, #0
 8005452:	70da      	strb	r2, [r3, #3]
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f04f 32ff 	mov.w	r2, #4294967295
 800545a:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800545c:	6839      	ldr	r1, [r7, #0]
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f7fe fc7a 	bl	8003d58 <move_window>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d001      	beq.n	800546e <check_fs+0x2a>
 800546a:	2304      	movs	r3, #4
 800546c:	e038      	b.n	80054e0 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	3338      	adds	r3, #56	@ 0x38
 8005472:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005476:	4618      	mov	r0, r3
 8005478:	f7fe f9be 	bl	80037f8 <ld_word>
 800547c:	4603      	mov	r3, r0
 800547e:	461a      	mov	r2, r3
 8005480:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005484:	429a      	cmp	r2, r3
 8005486:	d001      	beq.n	800548c <check_fs+0x48>
 8005488:	2303      	movs	r3, #3
 800548a:	e029      	b.n	80054e0 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005492:	2be9      	cmp	r3, #233	@ 0xe9
 8005494:	d009      	beq.n	80054aa <check_fs+0x66>
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800549c:	2beb      	cmp	r3, #235	@ 0xeb
 800549e:	d11e      	bne.n	80054de <check_fs+0x9a>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 80054a6:	2b90      	cmp	r3, #144	@ 0x90
 80054a8:	d119      	bne.n	80054de <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	3338      	adds	r3, #56	@ 0x38
 80054ae:	3336      	adds	r3, #54	@ 0x36
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fe f9b9 	bl	8003828 <ld_dword>
 80054b6:	4603      	mov	r3, r0
 80054b8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054bc:	4a0a      	ldr	r2, [pc, #40]	@ (80054e8 <check_fs+0xa4>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d101      	bne.n	80054c6 <check_fs+0x82>
 80054c2:	2300      	movs	r3, #0
 80054c4:	e00c      	b.n	80054e0 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	3338      	adds	r3, #56	@ 0x38
 80054ca:	3352      	adds	r3, #82	@ 0x52
 80054cc:	4618      	mov	r0, r3
 80054ce:	f7fe f9ab 	bl	8003828 <ld_dword>
 80054d2:	4603      	mov	r3, r0
 80054d4:	4a05      	ldr	r2, [pc, #20]	@ (80054ec <check_fs+0xa8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d101      	bne.n	80054de <check_fs+0x9a>
 80054da:	2300      	movs	r3, #0
 80054dc:	e000      	b.n	80054e0 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80054de:	2302      	movs	r3, #2
}
 80054e0:	4618      	mov	r0, r3
 80054e2:	3708      	adds	r7, #8
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	00544146 	.word	0x00544146
 80054ec:	33544146 	.word	0x33544146

080054f0 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b096      	sub	sp, #88	@ 0x58
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	60f8      	str	r0, [r7, #12]
 80054f8:	60b9      	str	r1, [r7, #8]
 80054fa:	4613      	mov	r3, r2
 80054fc:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	2200      	movs	r2, #0
 8005502:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f7ff ff59 	bl	80053bc <get_ldnumber>
 800550a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800550c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550e:	2b00      	cmp	r3, #0
 8005510:	da01      	bge.n	8005516 <find_volume+0x26>
 8005512:	230b      	movs	r3, #11
 8005514:	e265      	b.n	80059e2 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8005516:	4a9f      	ldr	r2, [pc, #636]	@ (8005794 <find_volume+0x2a4>)
 8005518:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800551a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800551e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005520:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005522:	2b00      	cmp	r3, #0
 8005524:	d101      	bne.n	800552a <find_volume+0x3a>
 8005526:	230c      	movs	r3, #12
 8005528:	e25b      	b.n	80059e2 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800552a:	68bb      	ldr	r3, [r7, #8]
 800552c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800552e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005530:	79fb      	ldrb	r3, [r7, #7]
 8005532:	f023 0301 	bic.w	r3, r3, #1
 8005536:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8005538:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d01a      	beq.n	8005576 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005540:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005542:	785b      	ldrb	r3, [r3, #1]
 8005544:	4618      	mov	r0, r3
 8005546:	f7fe f8b7 	bl	80036b8 <disk_status>
 800554a:	4603      	mov	r3, r0
 800554c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005550:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005554:	f003 0301 	and.w	r3, r3, #1
 8005558:	2b00      	cmp	r3, #0
 800555a:	d10c      	bne.n	8005576 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800555c:	79fb      	ldrb	r3, [r7, #7]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d007      	beq.n	8005572 <find_volume+0x82>
 8005562:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005566:	f003 0304 	and.w	r3, r3, #4
 800556a:	2b00      	cmp	r3, #0
 800556c:	d001      	beq.n	8005572 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800556e:	230a      	movs	r3, #10
 8005570:	e237      	b.n	80059e2 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005572:	2300      	movs	r3, #0
 8005574:	e235      	b.n	80059e2 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8005576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005578:	2200      	movs	r2, #0
 800557a:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800557c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800557e:	b2da      	uxtb	r2, r3
 8005580:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005582:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005584:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005586:	785b      	ldrb	r3, [r3, #1]
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe f8af 	bl	80036ec <disk_initialize>
 800558e:	4603      	mov	r3, r0
 8005590:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005594:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005598:	f003 0301 	and.w	r3, r3, #1
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80055a0:	2303      	movs	r3, #3
 80055a2:	e21e      	b.n	80059e2 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80055a4:	79fb      	ldrb	r3, [r7, #7]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <find_volume+0xca>
 80055aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055ae:	f003 0304 	and.w	r3, r3, #4
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d001      	beq.n	80055ba <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80055b6:	230a      	movs	r3, #10
 80055b8:	e213      	b.n	80059e2 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80055ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055bc:	7858      	ldrb	r0, [r3, #1]
 80055be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c0:	330c      	adds	r3, #12
 80055c2:	461a      	mov	r2, r3
 80055c4:	2102      	movs	r1, #2
 80055c6:	f7fe f8f9 	bl	80037bc <disk_ioctl>
 80055ca:	4603      	mov	r3, r0
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d001      	beq.n	80055d4 <find_volume+0xe4>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e206      	b.n	80059e2 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80055d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d6:	899b      	ldrh	r3, [r3, #12]
 80055d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055dc:	d80d      	bhi.n	80055fa <find_volume+0x10a>
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	899b      	ldrh	r3, [r3, #12]
 80055e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055e6:	d308      	bcc.n	80055fa <find_volume+0x10a>
 80055e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ea:	899b      	ldrh	r3, [r3, #12]
 80055ec:	461a      	mov	r2, r3
 80055ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055f0:	899b      	ldrh	r3, [r3, #12]
 80055f2:	3b01      	subs	r3, #1
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <find_volume+0x10e>
 80055fa:	2301      	movs	r3, #1
 80055fc:	e1f1      	b.n	80059e2 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80055fe:	2300      	movs	r3, #0
 8005600:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8005602:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005604:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005606:	f7ff ff1d 	bl	8005444 <check_fs>
 800560a:	4603      	mov	r3, r0
 800560c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005610:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005614:	2b02      	cmp	r3, #2
 8005616:	d149      	bne.n	80056ac <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005618:	2300      	movs	r3, #0
 800561a:	643b      	str	r3, [r7, #64]	@ 0x40
 800561c:	e01e      	b.n	800565c <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800561e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005620:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005624:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 800562c:	4413      	add	r3, r2
 800562e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005630:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005632:	3304      	adds	r3, #4
 8005634:	781b      	ldrb	r3, [r3, #0]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d006      	beq.n	8005648 <find_volume+0x158>
 800563a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800563c:	3308      	adds	r3, #8
 800563e:	4618      	mov	r0, r3
 8005640:	f7fe f8f2 	bl	8003828 <ld_dword>
 8005644:	4602      	mov	r2, r0
 8005646:	e000      	b.n	800564a <find_volume+0x15a>
 8005648:	2200      	movs	r2, #0
 800564a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564c:	009b      	lsls	r3, r3, #2
 800564e:	3358      	adds	r3, #88	@ 0x58
 8005650:	443b      	add	r3, r7
 8005652:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8005656:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005658:	3301      	adds	r3, #1
 800565a:	643b      	str	r3, [r7, #64]	@ 0x40
 800565c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800565e:	2b03      	cmp	r3, #3
 8005660:	d9dd      	bls.n	800561e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005662:	2300      	movs	r3, #0
 8005664:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	2b00      	cmp	r3, #0
 800566a:	d002      	beq.n	8005672 <find_volume+0x182>
 800566c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800566e:	3b01      	subs	r3, #1
 8005670:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005672:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	3358      	adds	r3, #88	@ 0x58
 8005678:	443b      	add	r3, r7
 800567a:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800567e:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005680:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005682:	2b00      	cmp	r3, #0
 8005684:	d005      	beq.n	8005692 <find_volume+0x1a2>
 8005686:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005688:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800568a:	f7ff fedb 	bl	8005444 <check_fs>
 800568e:	4603      	mov	r3, r0
 8005690:	e000      	b.n	8005694 <find_volume+0x1a4>
 8005692:	2303      	movs	r3, #3
 8005694:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8005698:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800569c:	2b01      	cmp	r3, #1
 800569e:	d905      	bls.n	80056ac <find_volume+0x1bc>
 80056a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a2:	3301      	adds	r3, #1
 80056a4:	643b      	str	r3, [r7, #64]	@ 0x40
 80056a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d9e2      	bls.n	8005672 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056b0:	2b04      	cmp	r3, #4
 80056b2:	d101      	bne.n	80056b8 <find_volume+0x1c8>
 80056b4:	2301      	movs	r3, #1
 80056b6:	e194      	b.n	80059e2 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80056b8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d901      	bls.n	80056c4 <find_volume+0x1d4>
 80056c0:	230d      	movs	r3, #13
 80056c2:	e18e      	b.n	80059e2 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c6:	3338      	adds	r3, #56	@ 0x38
 80056c8:	330b      	adds	r3, #11
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fe f894 	bl	80037f8 <ld_word>
 80056d0:	4603      	mov	r3, r0
 80056d2:	461a      	mov	r2, r3
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	899b      	ldrh	r3, [r3, #12]
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <find_volume+0x1f0>
 80056dc:	230d      	movs	r3, #13
 80056de:	e180      	b.n	80059e2 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80056e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056e2:	3338      	adds	r3, #56	@ 0x38
 80056e4:	3316      	adds	r3, #22
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fe f886 	bl	80037f8 <ld_word>
 80056ec:	4603      	mov	r3, r0
 80056ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80056f0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d106      	bne.n	8005704 <find_volume+0x214>
 80056f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056f8:	3338      	adds	r3, #56	@ 0x38
 80056fa:	3324      	adds	r3, #36	@ 0x24
 80056fc:	4618      	mov	r0, r3
 80056fe:	f7fe f893 	bl	8003828 <ld_dword>
 8005702:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005708:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800570a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005716:	789b      	ldrb	r3, [r3, #2]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d005      	beq.n	8005728 <find_volume+0x238>
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	789b      	ldrb	r3, [r3, #2]
 8005720:	2b02      	cmp	r3, #2
 8005722:	d001      	beq.n	8005728 <find_volume+0x238>
 8005724:	230d      	movs	r3, #13
 8005726:	e15c      	b.n	80059e2 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8005728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572a:	789b      	ldrb	r3, [r3, #2]
 800572c:	461a      	mov	r2, r3
 800572e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005730:	fb02 f303 	mul.w	r3, r2, r3
 8005734:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800573c:	461a      	mov	r2, r3
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005744:	895b      	ldrh	r3, [r3, #10]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d008      	beq.n	800575c <find_volume+0x26c>
 800574a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574c:	895b      	ldrh	r3, [r3, #10]
 800574e:	461a      	mov	r2, r3
 8005750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005752:	895b      	ldrh	r3, [r3, #10]
 8005754:	3b01      	subs	r3, #1
 8005756:	4013      	ands	r3, r2
 8005758:	2b00      	cmp	r3, #0
 800575a:	d001      	beq.n	8005760 <find_volume+0x270>
 800575c:	230d      	movs	r3, #13
 800575e:	e140      	b.n	80059e2 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005762:	3338      	adds	r3, #56	@ 0x38
 8005764:	3311      	adds	r3, #17
 8005766:	4618      	mov	r0, r3
 8005768:	f7fe f846 	bl	80037f8 <ld_word>
 800576c:	4603      	mov	r3, r0
 800576e:	461a      	mov	r2, r3
 8005770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005772:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005774:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005776:	891b      	ldrh	r3, [r3, #8]
 8005778:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800577a:	8992      	ldrh	r2, [r2, #12]
 800577c:	0952      	lsrs	r2, r2, #5
 800577e:	b292      	uxth	r2, r2
 8005780:	fbb3 f1f2 	udiv	r1, r3, r2
 8005784:	fb01 f202 	mul.w	r2, r1, r2
 8005788:	1a9b      	subs	r3, r3, r2
 800578a:	b29b      	uxth	r3, r3
 800578c:	2b00      	cmp	r3, #0
 800578e:	d003      	beq.n	8005798 <find_volume+0x2a8>
 8005790:	230d      	movs	r3, #13
 8005792:	e126      	b.n	80059e2 <find_volume+0x4f2>
 8005794:	2000010c 	.word	0x2000010c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8005798:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800579a:	3338      	adds	r3, #56	@ 0x38
 800579c:	3313      	adds	r3, #19
 800579e:	4618      	mov	r0, r3
 80057a0:	f7fe f82a 	bl	80037f8 <ld_word>
 80057a4:	4603      	mov	r3, r0
 80057a6:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80057a8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d106      	bne.n	80057bc <find_volume+0x2cc>
 80057ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b0:	3338      	adds	r3, #56	@ 0x38
 80057b2:	3320      	adds	r3, #32
 80057b4:	4618      	mov	r0, r3
 80057b6:	f7fe f837 	bl	8003828 <ld_dword>
 80057ba:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80057bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057be:	3338      	adds	r3, #56	@ 0x38
 80057c0:	330e      	adds	r3, #14
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe f818 	bl	80037f8 <ld_word>
 80057c8:	4603      	mov	r3, r0
 80057ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057cc:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d101      	bne.n	80057d6 <find_volume+0x2e6>
 80057d2:	230d      	movs	r3, #13
 80057d4:	e105      	b.n	80059e2 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057d6:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80057d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057da:	4413      	add	r3, r2
 80057dc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057de:	8911      	ldrh	r1, [r2, #8]
 80057e0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057e2:	8992      	ldrh	r2, [r2, #12]
 80057e4:	0952      	lsrs	r2, r2, #5
 80057e6:	b292      	uxth	r2, r2
 80057e8:	fbb1 f2f2 	udiv	r2, r1, r2
 80057ec:	b292      	uxth	r2, r2
 80057ee:	4413      	add	r3, r2
 80057f0:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80057f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	429a      	cmp	r2, r3
 80057f8:	d201      	bcs.n	80057fe <find_volume+0x30e>
 80057fa:	230d      	movs	r3, #13
 80057fc:	e0f1      	b.n	80059e2 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057fe:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005800:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005806:	8952      	ldrh	r2, [r2, #10]
 8005808:	fbb3 f3f2 	udiv	r3, r3, r2
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800580e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <find_volume+0x328>
 8005814:	230d      	movs	r3, #13
 8005816:	e0e4      	b.n	80059e2 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8005818:	2303      	movs	r3, #3
 800581a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800581e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005820:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005824:	4293      	cmp	r3, r2
 8005826:	d802      	bhi.n	800582e <find_volume+0x33e>
 8005828:	2302      	movs	r3, #2
 800582a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800582e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005830:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005834:	4293      	cmp	r3, r2
 8005836:	d802      	bhi.n	800583e <find_volume+0x34e>
 8005838:	2301      	movs	r3, #1
 800583a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800583e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005840:	1c9a      	adds	r2, r3, #2
 8005842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005844:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800584a:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800584c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 800584e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005850:	441a      	add	r2, r3
 8005852:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005854:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8005856:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005858:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585a:	441a      	add	r2, r3
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005860:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005864:	2b03      	cmp	r3, #3
 8005866:	d11e      	bne.n	80058a6 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8005868:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800586a:	3338      	adds	r3, #56	@ 0x38
 800586c:	332a      	adds	r3, #42	@ 0x2a
 800586e:	4618      	mov	r0, r3
 8005870:	f7fd ffc2 	bl	80037f8 <ld_word>
 8005874:	4603      	mov	r3, r0
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <find_volume+0x38e>
 800587a:	230d      	movs	r3, #13
 800587c:	e0b1      	b.n	80059e2 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	891b      	ldrh	r3, [r3, #8]
 8005882:	2b00      	cmp	r3, #0
 8005884:	d001      	beq.n	800588a <find_volume+0x39a>
 8005886:	230d      	movs	r3, #13
 8005888:	e0ab      	b.n	80059e2 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800588a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588c:	3338      	adds	r3, #56	@ 0x38
 800588e:	332c      	adds	r3, #44	@ 0x2c
 8005890:	4618      	mov	r0, r3
 8005892:	f7fd ffc9 	bl	8003828 <ld_dword>
 8005896:	4602      	mov	r2, r0
 8005898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800589c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589e:	69db      	ldr	r3, [r3, #28]
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80058a4:	e01f      	b.n	80058e6 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	891b      	ldrh	r3, [r3, #8]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d101      	bne.n	80058b2 <find_volume+0x3c2>
 80058ae:	230d      	movs	r3, #13
 80058b0:	e097      	b.n	80059e2 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80058b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058b6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058b8:	441a      	add	r2, r3
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80058be:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058c2:	2b02      	cmp	r3, #2
 80058c4:	d103      	bne.n	80058ce <find_volume+0x3de>
 80058c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c8:	69db      	ldr	r3, [r3, #28]
 80058ca:	005b      	lsls	r3, r3, #1
 80058cc:	e00a      	b.n	80058e4 <find_volume+0x3f4>
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	69da      	ldr	r2, [r3, #28]
 80058d2:	4613      	mov	r3, r2
 80058d4:	005b      	lsls	r3, r3, #1
 80058d6:	4413      	add	r3, r2
 80058d8:	085a      	lsrs	r2, r3, #1
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	69db      	ldr	r3, [r3, #28]
 80058de:	f003 0301 	and.w	r3, r3, #1
 80058e2:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80058e4:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80058e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e8:	6a1a      	ldr	r2, [r3, #32]
 80058ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058ec:	899b      	ldrh	r3, [r3, #12]
 80058ee:	4619      	mov	r1, r3
 80058f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058f2:	440b      	add	r3, r1
 80058f4:	3b01      	subs	r3, #1
 80058f6:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058f8:	8989      	ldrh	r1, [r1, #12]
 80058fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80058fe:	429a      	cmp	r2, r3
 8005900:	d201      	bcs.n	8005906 <find_volume+0x416>
 8005902:	230d      	movs	r3, #13
 8005904:	e06d      	b.n	80059e2 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	f04f 32ff 	mov.w	r2, #4294967295
 800590c:	619a      	str	r2, [r3, #24]
 800590e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005910:	699a      	ldr	r2, [r3, #24]
 8005912:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005914:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	2280      	movs	r2, #128	@ 0x80
 800591a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800591c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005920:	2b03      	cmp	r3, #3
 8005922:	d149      	bne.n	80059b8 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005926:	3338      	adds	r3, #56	@ 0x38
 8005928:	3330      	adds	r3, #48	@ 0x30
 800592a:	4618      	mov	r0, r3
 800592c:	f7fd ff64 	bl	80037f8 <ld_word>
 8005930:	4603      	mov	r3, r0
 8005932:	2b01      	cmp	r3, #1
 8005934:	d140      	bne.n	80059b8 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8005936:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005938:	3301      	adds	r3, #1
 800593a:	4619      	mov	r1, r3
 800593c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800593e:	f7fe fa0b 	bl	8003d58 <move_window>
 8005942:	4603      	mov	r3, r0
 8005944:	2b00      	cmp	r3, #0
 8005946:	d137      	bne.n	80059b8 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8005948:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800594a:	2200      	movs	r2, #0
 800594c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800594e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005950:	3338      	adds	r3, #56	@ 0x38
 8005952:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8005956:	4618      	mov	r0, r3
 8005958:	f7fd ff4e 	bl	80037f8 <ld_word>
 800595c:	4603      	mov	r3, r0
 800595e:	461a      	mov	r2, r3
 8005960:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005964:	429a      	cmp	r2, r3
 8005966:	d127      	bne.n	80059b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8005968:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800596a:	3338      	adds	r3, #56	@ 0x38
 800596c:	4618      	mov	r0, r3
 800596e:	f7fd ff5b 	bl	8003828 <ld_dword>
 8005972:	4603      	mov	r3, r0
 8005974:	4a1d      	ldr	r2, [pc, #116]	@ (80059ec <find_volume+0x4fc>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d11e      	bne.n	80059b8 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800597a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800597c:	3338      	adds	r3, #56	@ 0x38
 800597e:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005982:	4618      	mov	r0, r3
 8005984:	f7fd ff50 	bl	8003828 <ld_dword>
 8005988:	4603      	mov	r3, r0
 800598a:	4a19      	ldr	r2, [pc, #100]	@ (80059f0 <find_volume+0x500>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d113      	bne.n	80059b8 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005992:	3338      	adds	r3, #56	@ 0x38
 8005994:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8005998:	4618      	mov	r0, r3
 800599a:	f7fd ff45 	bl	8003828 <ld_dword>
 800599e:	4602      	mov	r2, r0
 80059a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a2:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80059a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059a6:	3338      	adds	r3, #56	@ 0x38
 80059a8:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80059ac:	4618      	mov	r0, r3
 80059ae:	f7fd ff3b 	bl	8003828 <ld_dword>
 80059b2:	4602      	mov	r2, r0
 80059b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059b6:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80059b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ba:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80059be:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80059c0:	4b0c      	ldr	r3, [pc, #48]	@ (80059f4 <find_volume+0x504>)
 80059c2:	881b      	ldrh	r3, [r3, #0]
 80059c4:	3301      	adds	r3, #1
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	4b0a      	ldr	r3, [pc, #40]	@ (80059f4 <find_volume+0x504>)
 80059ca:	801a      	strh	r2, [r3, #0]
 80059cc:	4b09      	ldr	r3, [pc, #36]	@ (80059f4 <find_volume+0x504>)
 80059ce:	881a      	ldrh	r2, [r3, #0]
 80059d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80059d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d6:	4a08      	ldr	r2, [pc, #32]	@ (80059f8 <find_volume+0x508>)
 80059d8:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80059da:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059dc:	f7fe f954 	bl	8003c88 <clear_lock>
#endif
	return FR_OK;
 80059e0:	2300      	movs	r3, #0
}
 80059e2:	4618      	mov	r0, r3
 80059e4:	3758      	adds	r7, #88	@ 0x58
 80059e6:	46bd      	mov	sp, r7
 80059e8:	bd80      	pop	{r7, pc}
 80059ea:	bf00      	nop
 80059ec:	41615252 	.word	0x41615252
 80059f0:	61417272 	.word	0x61417272
 80059f4:	20000110 	.word	0x20000110
 80059f8:	20000134 	.word	0x20000134

080059fc <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b084      	sub	sp, #16
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8005a06:	2309      	movs	r3, #9
 8005a08:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d01c      	beq.n	8005a4a <validate+0x4e>
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d018      	beq.n	8005a4a <validate+0x4e>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	781b      	ldrb	r3, [r3, #0]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d013      	beq.n	8005a4a <validate+0x4e>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	889a      	ldrh	r2, [r3, #4]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	88db      	ldrh	r3, [r3, #6]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d10c      	bne.n	8005a4a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	785b      	ldrb	r3, [r3, #1]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f7fd fe3e 	bl	80036b8 <disk_status>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	f003 0301 	and.w	r3, r3, #1
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <validate+0x4e>
			res = FR_OK;
 8005a46:	2300      	movs	r3, #0
 8005a48:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a4a:	7bfb      	ldrb	r3, [r7, #15]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d102      	bne.n	8005a56 <validate+0x5a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	e000      	b.n	8005a58 <validate+0x5c>
 8005a56:	2300      	movs	r3, #0
 8005a58:	683a      	ldr	r2, [r7, #0]
 8005a5a:	6013      	str	r3, [r2, #0]
	return res;
 8005a5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a5e:	4618      	mov	r0, r3
 8005a60:	3710      	adds	r7, #16
 8005a62:	46bd      	mov	sp, r7
 8005a64:	bd80      	pop	{r7, pc}
	...

08005a68 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	4613      	mov	r3, r2
 8005a74:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005a7a:	f107 0310 	add.w	r3, r7, #16
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7ff fc9c 	bl	80053bc <get_ldnumber>
 8005a84:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	da01      	bge.n	8005a90 <f_mount+0x28>
 8005a8c:	230b      	movs	r3, #11
 8005a8e:	e02b      	b.n	8005ae8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a90:	4a17      	ldr	r2, [pc, #92]	@ (8005af0 <f_mount+0x88>)
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a98:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d005      	beq.n	8005aac <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005aa0:	69b8      	ldr	r0, [r7, #24]
 8005aa2:	f7fe f8f1 	bl	8003c88 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005aa6:	69bb      	ldr	r3, [r7, #24]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d002      	beq.n	8005ab8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	490d      	ldr	r1, [pc, #52]	@ (8005af0 <f_mount+0x88>)
 8005abc:	69fb      	ldr	r3, [r7, #28]
 8005abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d002      	beq.n	8005ace <f_mount+0x66>
 8005ac8:	79fb      	ldrb	r3, [r7, #7]
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d001      	beq.n	8005ad2 <f_mount+0x6a>
 8005ace:	2300      	movs	r3, #0
 8005ad0:	e00a      	b.n	8005ae8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ad2:	f107 010c 	add.w	r1, r7, #12
 8005ad6:	f107 0308 	add.w	r3, r7, #8
 8005ada:	2200      	movs	r2, #0
 8005adc:	4618      	mov	r0, r3
 8005ade:	f7ff fd07 	bl	80054f0 <find_volume>
 8005ae2:	4603      	mov	r3, r0
 8005ae4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005ae6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3720      	adds	r7, #32
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}
 8005af0:	2000010c 	.word	0x2000010c

08005af4 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b09a      	sub	sp, #104	@ 0x68
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	60f8      	str	r0, [r7, #12]
 8005afc:	60b9      	str	r1, [r7, #8]
 8005afe:	4613      	mov	r3, r2
 8005b00:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d101      	bne.n	8005b0c <f_open+0x18>
 8005b08:	2309      	movs	r3, #9
 8005b0a:	e1b7      	b.n	8005e7c <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b0c:	79fb      	ldrb	r3, [r7, #7]
 8005b0e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b12:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b14:	79fa      	ldrb	r2, [r7, #7]
 8005b16:	f107 0114 	add.w	r1, r7, #20
 8005b1a:	f107 0308 	add.w	r3, r7, #8
 8005b1e:	4618      	mov	r0, r3
 8005b20:	f7ff fce6 	bl	80054f0 <find_volume>
 8005b24:	4603      	mov	r3, r0
 8005b26:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8005b2a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	f040 819b 	bne.w	8005e6a <f_open+0x376>
		dj.obj.fs = fs;
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b38:	68ba      	ldr	r2, [r7, #8]
 8005b3a:	f107 0318 	add.w	r3, r7, #24
 8005b3e:	4611      	mov	r1, r2
 8005b40:	4618      	mov	r0, r3
 8005b42:	f7ff fbc5 	bl	80052d0 <follow_path>
 8005b46:	4603      	mov	r3, r0
 8005b48:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b4c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d118      	bne.n	8005b86 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005b54:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005b58:	b25b      	sxtb	r3, r3
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	da03      	bge.n	8005b66 <f_open+0x72>
				res = FR_INVALID_NAME;
 8005b5e:	2306      	movs	r3, #6
 8005b60:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005b64:	e00f      	b.n	8005b86 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b66:	79fb      	ldrb	r3, [r7, #7]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	bf8c      	ite	hi
 8005b6c:	2301      	movhi	r3, #1
 8005b6e:	2300      	movls	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	f107 0318 	add.w	r3, r7, #24
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7fd ff3c 	bl	80039f8 <chk_lock>
 8005b80:	4603      	mov	r3, r0
 8005b82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	f003 031c 	and.w	r3, r3, #28
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d07f      	beq.n	8005c90 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005b90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d017      	beq.n	8005bc8 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005b98:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b9c:	2b04      	cmp	r3, #4
 8005b9e:	d10e      	bne.n	8005bbe <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005ba0:	f7fd ff86 	bl	8003ab0 <enq_lock>
 8005ba4:	4603      	mov	r3, r0
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d006      	beq.n	8005bb8 <f_open+0xc4>
 8005baa:	f107 0318 	add.w	r3, r7, #24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f7ff f8de 	bl	8004d70 <dir_register>
 8005bb4:	4603      	mov	r3, r0
 8005bb6:	e000      	b.n	8005bba <f_open+0xc6>
 8005bb8:	2312      	movs	r3, #18
 8005bba:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005bbe:	79fb      	ldrb	r3, [r7, #7]
 8005bc0:	f043 0308 	orr.w	r3, r3, #8
 8005bc4:	71fb      	strb	r3, [r7, #7]
 8005bc6:	e010      	b.n	8005bea <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bc8:	7fbb      	ldrb	r3, [r7, #30]
 8005bca:	f003 0311 	and.w	r3, r3, #17
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d003      	beq.n	8005bda <f_open+0xe6>
					res = FR_DENIED;
 8005bd2:	2307      	movs	r3, #7
 8005bd4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005bd8:	e007      	b.n	8005bea <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005bda:	79fb      	ldrb	r3, [r7, #7]
 8005bdc:	f003 0304 	and.w	r3, r3, #4
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d002      	beq.n	8005bea <f_open+0xf6>
 8005be4:	2308      	movs	r3, #8
 8005be6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005bea:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d168      	bne.n	8005cc4 <f_open+0x1d0>
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	f003 0308 	and.w	r3, r3, #8
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d063      	beq.n	8005cc4 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005bfc:	f7fd fcfe 	bl	80035fc <get_fattime>
 8005c00:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	330e      	adds	r3, #14
 8005c06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fe4b 	bl	80038a4 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	3316      	adds	r3, #22
 8005c12:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c14:	4618      	mov	r0, r3
 8005c16:	f7fd fe45 	bl	80038a4 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c1c:	330b      	adds	r3, #11
 8005c1e:	2220      	movs	r2, #32
 8005c20:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c26:	4611      	mov	r1, r2
 8005c28:	4618      	mov	r0, r3
 8005c2a:	f7fe fe1a 	bl	8004862 <ld_clust>
 8005c2e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c34:	2200      	movs	r2, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fe fe32 	bl	80048a0 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c3e:	331c      	adds	r3, #28
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7fd fe2e 	bl	80038a4 <st_dword>
					fs->wflag = 1;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	2201      	movs	r2, #1
 8005c4c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005c4e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d037      	beq.n	8005cc4 <f_open+0x1d0>
						dw = fs->winsect;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c58:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005c5a:	f107 0318 	add.w	r3, r7, #24
 8005c5e:	2200      	movs	r2, #0
 8005c60:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7fe fb22 	bl	80042ac <remove_chain>
 8005c68:	4603      	mov	r3, r0
 8005c6a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8005c6e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d126      	bne.n	8005cc4 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005c76:	697b      	ldr	r3, [r7, #20]
 8005c78:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7fe f86c 	bl	8003d58 <move_window>
 8005c80:	4603      	mov	r3, r0
 8005c82:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c8a:	3a01      	subs	r2, #1
 8005c8c:	615a      	str	r2, [r3, #20]
 8005c8e:	e019      	b.n	8005cc4 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005c90:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d115      	bne.n	8005cc4 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005c98:	7fbb      	ldrb	r3, [r7, #30]
 8005c9a:	f003 0310 	and.w	r3, r3, #16
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d003      	beq.n	8005caa <f_open+0x1b6>
					res = FR_NO_FILE;
 8005ca2:	2304      	movs	r3, #4
 8005ca4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005ca8:	e00c      	b.n	8005cc4 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005caa:	79fb      	ldrb	r3, [r7, #7]
 8005cac:	f003 0302 	and.w	r3, r3, #2
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d007      	beq.n	8005cc4 <f_open+0x1d0>
 8005cb4:	7fbb      	ldrb	r3, [r7, #30]
 8005cb6:	f003 0301 	and.w	r3, r3, #1
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d002      	beq.n	8005cc4 <f_open+0x1d0>
						res = FR_DENIED;
 8005cbe:	2307      	movs	r3, #7
 8005cc0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005cc4:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d126      	bne.n	8005d1a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005ccc:	79fb      	ldrb	r3, [r7, #7]
 8005cce:	f003 0308 	and.w	r3, r3, #8
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d003      	beq.n	8005cde <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005cd6:	79fb      	ldrb	r3, [r7, #7]
 8005cd8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cdc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005ce6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005cec:	79fb      	ldrb	r3, [r7, #7]
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	bf8c      	ite	hi
 8005cf2:	2301      	movhi	r3, #1
 8005cf4:	2300      	movls	r3, #0
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	f107 0318 	add.w	r3, r7, #24
 8005cfe:	4611      	mov	r1, r2
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fd fef7 	bl	8003af4 <inc_lock>
 8005d06:	4602      	mov	r2, r0
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d102      	bne.n	8005d1a <f_open+0x226>
 8005d14:	2302      	movs	r3, #2
 8005d16:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d1a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	f040 80a3 	bne.w	8005e6a <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d28:	4611      	mov	r1, r2
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f7fe fd99 	bl	8004862 <ld_clust>
 8005d30:	4602      	mov	r2, r0
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d38:	331c      	adds	r3, #28
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	f7fd fd74 	bl	8003828 <ld_dword>
 8005d40:	4602      	mov	r2, r0
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005d4c:	697a      	ldr	r2, [r7, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005d52:	697b      	ldr	r3, [r7, #20]
 8005d54:	88da      	ldrh	r2, [r3, #6]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	79fa      	ldrb	r2, [r7, #7]
 8005d5e:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	3330      	adds	r3, #48	@ 0x30
 8005d76:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f7fd fdde 	bl	800393e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005d82:	79fb      	ldrb	r3, [r7, #7]
 8005d84:	f003 0320 	and.w	r3, r3, #32
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d06e      	beq.n	8005e6a <f_open+0x376>
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	68db      	ldr	r3, [r3, #12]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d06a      	beq.n	8005e6a <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	68da      	ldr	r2, [r3, #12]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	895b      	ldrh	r3, [r3, #10]
 8005da0:	461a      	mov	r2, r3
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	899b      	ldrh	r3, [r3, #12]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005db8:	e016      	b.n	8005de8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005dbe:	4618      	mov	r0, r3
 8005dc0:	f7fe f887 	bl	8003ed2 <get_fat>
 8005dc4:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc8:	2b01      	cmp	r3, #1
 8005dca:	d802      	bhi.n	8005dd2 <f_open+0x2de>
 8005dcc:	2302      	movs	r3, #2
 8005dce:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005dd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dd8:	d102      	bne.n	8005de0 <f_open+0x2ec>
 8005dda:	2301      	movs	r3, #1
 8005ddc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005de0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005de2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005de8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d103      	bne.n	8005df8 <f_open+0x304>
 8005df0:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005df2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005df4:	429a      	cmp	r2, r3
 8005df6:	d8e0      	bhi.n	8005dba <f_open+0x2c6>
				}
				fp->clust = clst;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005dfc:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005dfe:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d131      	bne.n	8005e6a <f_open+0x376>
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	899b      	ldrh	r3, [r3, #12]
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e0e:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e12:	fb01 f202 	mul.w	r2, r1, r2
 8005e16:	1a9b      	subs	r3, r3, r2
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d026      	beq.n	8005e6a <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e1c:	697b      	ldr	r3, [r7, #20]
 8005e1e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005e20:	4618      	mov	r0, r3
 8005e22:	f7fe f837 	bl	8003e94 <clust2sect>
 8005e26:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8005e28:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d103      	bne.n	8005e36 <f_open+0x342>
						res = FR_INT_ERR;
 8005e2e:	2302      	movs	r3, #2
 8005e30:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005e34:	e019      	b.n	8005e6a <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	899b      	ldrh	r3, [r3, #12]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e3e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e44:	441a      	add	r2, r3
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e4a:	697b      	ldr	r3, [r7, #20]
 8005e4c:	7858      	ldrb	r0, [r3, #1]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6a1a      	ldr	r2, [r3, #32]
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f7fd fc6f 	bl	800373c <disk_read>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <f_open+0x376>
 8005e64:	2301      	movs	r3, #1
 8005e66:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005e6a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d002      	beq.n	8005e78 <f_open+0x384>
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	2200      	movs	r2, #0
 8005e76:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005e78:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	3768      	adds	r7, #104	@ 0x68
 8005e80:	46bd      	mov	sp, r7
 8005e82:	bd80      	pop	{r7, pc}

08005e84 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b08e      	sub	sp, #56	@ 0x38
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	60f8      	str	r0, [r7, #12]
 8005e8c:	60b9      	str	r1, [r7, #8]
 8005e8e:	607a      	str	r2, [r7, #4]
 8005e90:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005e92:	68bb      	ldr	r3, [r7, #8]
 8005e94:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	f107 0214 	add.w	r2, r7, #20
 8005ea2:	4611      	mov	r1, r2
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fda9 	bl	80059fc <validate>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005eb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d107      	bne.n	8005ec8 <f_read+0x44>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	7d5b      	ldrb	r3, [r3, #21]
 8005ebc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005ec0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <f_read+0x4a>
 8005ec8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ecc:	e135      	b.n	800613a <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	7d1b      	ldrb	r3, [r3, #20]
 8005ed2:	f003 0301 	and.w	r3, r3, #1
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <f_read+0x5a>
 8005eda:	2307      	movs	r3, #7
 8005edc:	e12d      	b.n	800613a <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	699b      	ldr	r3, [r3, #24]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6a3b      	ldr	r3, [r7, #32]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	f240 811e 	bls.w	8006130 <f_read+0x2ac>
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005ef8:	e11a      	b.n	8006130 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	8992      	ldrh	r2, [r2, #12]
 8005f02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005f06:	fb01 f202 	mul.w	r2, r1, r2
 8005f0a:	1a9b      	subs	r3, r3, r2
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	f040 80d5 	bne.w	80060bc <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	699b      	ldr	r3, [r3, #24]
 8005f16:	697a      	ldr	r2, [r7, #20]
 8005f18:	8992      	ldrh	r2, [r2, #12]
 8005f1a:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	8952      	ldrh	r2, [r2, #10]
 8005f22:	3a01      	subs	r2, #1
 8005f24:	4013      	ands	r3, r2
 8005f26:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005f28:	69fb      	ldr	r3, [r7, #28]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d12f      	bne.n	8005f8e <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d103      	bne.n	8005f3e <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	689b      	ldr	r3, [r3, #8]
 8005f3a:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f3c:	e013      	b.n	8005f66 <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d007      	beq.n	8005f56 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	4619      	mov	r1, r3
 8005f4c:	68f8      	ldr	r0, [r7, #12]
 8005f4e:	f7fe faaa 	bl	80044a6 <clmt_clust>
 8005f52:	6338      	str	r0, [r7, #48]	@ 0x30
 8005f54:	e007      	b.n	8005f66 <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	69db      	ldr	r3, [r3, #28]
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f7fd ffb7 	bl	8003ed2 <get_fat>
 8005f64:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f68:	2b01      	cmp	r3, #1
 8005f6a:	d804      	bhi.n	8005f76 <f_read+0xf2>
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	755a      	strb	r2, [r3, #21]
 8005f72:	2302      	movs	r3, #2
 8005f74:	e0e1      	b.n	800613a <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7c:	d104      	bne.n	8005f88 <f_read+0x104>
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2201      	movs	r2, #1
 8005f82:	755a      	strb	r2, [r3, #21]
 8005f84:	2301      	movs	r3, #1
 8005f86:	e0d8      	b.n	800613a <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f8c:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f8e:	697a      	ldr	r2, [r7, #20]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	69db      	ldr	r3, [r3, #28]
 8005f94:	4619      	mov	r1, r3
 8005f96:	4610      	mov	r0, r2
 8005f98:	f7fd ff7c 	bl	8003e94 <clust2sect>
 8005f9c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f9e:	69bb      	ldr	r3, [r7, #24]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <f_read+0x12a>
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2202      	movs	r2, #2
 8005fa8:	755a      	strb	r2, [r3, #21]
 8005faa:	2302      	movs	r3, #2
 8005fac:	e0c5      	b.n	800613a <f_read+0x2b6>
			sect += csect;
 8005fae:	69ba      	ldr	r2, [r7, #24]
 8005fb0:	69fb      	ldr	r3, [r7, #28]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	899b      	ldrh	r3, [r3, #12]
 8005fba:	461a      	mov	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fc2:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d041      	beq.n	800604e <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fca:	69fa      	ldr	r2, [r7, #28]
 8005fcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fce:	4413      	add	r3, r2
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	8952      	ldrh	r2, [r2, #10]
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d905      	bls.n	8005fe4 <f_read+0x160>
					cc = fs->csize - csect;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	895b      	ldrh	r3, [r3, #10]
 8005fdc:	461a      	mov	r2, r3
 8005fde:	69fb      	ldr	r3, [r7, #28]
 8005fe0:	1ad3      	subs	r3, r2, r3
 8005fe2:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fe4:	697b      	ldr	r3, [r7, #20]
 8005fe6:	7858      	ldrb	r0, [r3, #1]
 8005fe8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fea:	69ba      	ldr	r2, [r7, #24]
 8005fec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fee:	f7fd fba5 	bl	800373c <disk_read>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d004      	beq.n	8006002 <f_read+0x17e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	755a      	strb	r2, [r3, #21]
 8005ffe:	2301      	movs	r3, #1
 8006000:	e09b      	b.n	800613a <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	7d1b      	ldrb	r3, [r3, #20]
 8006006:	b25b      	sxtb	r3, r3
 8006008:	2b00      	cmp	r3, #0
 800600a:	da18      	bge.n	800603e <f_read+0x1ba>
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6a1a      	ldr	r2, [r3, #32]
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	1ad3      	subs	r3, r2, r3
 8006014:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006016:	429a      	cmp	r2, r3
 8006018:	d911      	bls.n	800603e <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a1a      	ldr	r2, [r3, #32]
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	1ad3      	subs	r3, r2, r3
 8006022:	697a      	ldr	r2, [r7, #20]
 8006024:	8992      	ldrh	r2, [r2, #12]
 8006026:	fb02 f303 	mul.w	r3, r2, r3
 800602a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800602c:	18d0      	adds	r0, r2, r3
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	899b      	ldrh	r3, [r3, #12]
 8006038:	461a      	mov	r2, r3
 800603a:	f7fd fc5f 	bl	80038fc <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800603e:	697b      	ldr	r3, [r7, #20]
 8006040:	899b      	ldrh	r3, [r3, #12]
 8006042:	461a      	mov	r2, r3
 8006044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006046:	fb02 f303 	mul.w	r3, r2, r3
 800604a:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 800604c:	e05c      	b.n	8006108 <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	6a1b      	ldr	r3, [r3, #32]
 8006052:	69ba      	ldr	r2, [r7, #24]
 8006054:	429a      	cmp	r2, r3
 8006056:	d02e      	beq.n	80060b6 <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	7d1b      	ldrb	r3, [r3, #20]
 800605c:	b25b      	sxtb	r3, r3
 800605e:	2b00      	cmp	r3, #0
 8006060:	da18      	bge.n	8006094 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	7858      	ldrb	r0, [r3, #1]
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	6a1a      	ldr	r2, [r3, #32]
 8006070:	2301      	movs	r3, #1
 8006072:	f7fd fb83 	bl	800377c <disk_write>
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d004      	beq.n	8006086 <f_read+0x202>
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	2201      	movs	r2, #1
 8006080:	755a      	strb	r2, [r3, #21]
 8006082:	2301      	movs	r3, #1
 8006084:	e059      	b.n	800613a <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	7d1b      	ldrb	r3, [r3, #20]
 800608a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800608e:	b2da      	uxtb	r2, r3
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	7858      	ldrb	r0, [r3, #1]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800609e:	2301      	movs	r3, #1
 80060a0:	69ba      	ldr	r2, [r7, #24]
 80060a2:	f7fd fb4b 	bl	800373c <disk_read>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d004      	beq.n	80060b6 <f_read+0x232>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	2201      	movs	r2, #1
 80060b0:	755a      	strb	r2, [r3, #21]
 80060b2:	2301      	movs	r3, #1
 80060b4:	e041      	b.n	800613a <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	899b      	ldrh	r3, [r3, #12]
 80060c0:	4618      	mov	r0, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	697a      	ldr	r2, [r7, #20]
 80060c8:	8992      	ldrh	r2, [r2, #12]
 80060ca:	fbb3 f1f2 	udiv	r1, r3, r2
 80060ce:	fb01 f202 	mul.w	r2, r1, r2
 80060d2:	1a9b      	subs	r3, r3, r2
 80060d4:	1ac3      	subs	r3, r0, r3
 80060d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80060d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	429a      	cmp	r2, r3
 80060de:	d901      	bls.n	80060e4 <f_read+0x260>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	697a      	ldr	r2, [r7, #20]
 80060f0:	8992      	ldrh	r2, [r2, #12]
 80060f2:	fbb3 f0f2 	udiv	r0, r3, r2
 80060f6:	fb00 f202 	mul.w	r2, r0, r2
 80060fa:	1a9b      	subs	r3, r3, r2
 80060fc:	440b      	add	r3, r1
 80060fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006100:	4619      	mov	r1, r3
 8006102:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006104:	f7fd fbfa 	bl	80038fc <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8006108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610c:	4413      	add	r3, r2
 800610e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	699a      	ldr	r2, [r3, #24]
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	441a      	add	r2, r3
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	619a      	str	r2, [r3, #24]
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	681a      	ldr	r2, [r3, #0]
 8006120:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006122:	441a      	add	r2, r3
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	601a      	str	r2, [r3, #0]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800612c:	1ad3      	subs	r3, r2, r3
 800612e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2b00      	cmp	r3, #0
 8006134:	f47f aee1 	bne.w	8005efa <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8006138:	2300      	movs	r3, #0
}
 800613a:	4618      	mov	r0, r3
 800613c:	3738      	adds	r7, #56	@ 0x38
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}

08006142 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	b08c      	sub	sp, #48	@ 0x30
 8006146:	af00      	add	r7, sp, #0
 8006148:	60f8      	str	r0, [r7, #12]
 800614a:	60b9      	str	r1, [r7, #8]
 800614c:	607a      	str	r2, [r7, #4]
 800614e:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	2200      	movs	r2, #0
 8006158:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	f107 0210 	add.w	r2, r7, #16
 8006160:	4611      	mov	r1, r2
 8006162:	4618      	mov	r0, r3
 8006164:	f7ff fc4a 	bl	80059fc <validate>
 8006168:	4603      	mov	r3, r0
 800616a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800616e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006172:	2b00      	cmp	r3, #0
 8006174:	d107      	bne.n	8006186 <f_write+0x44>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	7d5b      	ldrb	r3, [r3, #21]
 800617a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800617e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006182:	2b00      	cmp	r3, #0
 8006184:	d002      	beq.n	800618c <f_write+0x4a>
 8006186:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800618a:	e16a      	b.n	8006462 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	7d1b      	ldrb	r3, [r3, #20]
 8006190:	f003 0302 	and.w	r3, r3, #2
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <f_write+0x5a>
 8006198:	2307      	movs	r3, #7
 800619a:	e162      	b.n	8006462 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	699a      	ldr	r2, [r3, #24]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	441a      	add	r2, r3
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	429a      	cmp	r2, r3
 80061aa:	f080 814c 	bcs.w	8006446 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	699b      	ldr	r3, [r3, #24]
 80061b2:	43db      	mvns	r3, r3
 80061b4:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80061b6:	e146      	b.n	8006446 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	699b      	ldr	r3, [r3, #24]
 80061bc:	693a      	ldr	r2, [r7, #16]
 80061be:	8992      	ldrh	r2, [r2, #12]
 80061c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80061c4:	fb01 f202 	mul.w	r2, r1, r2
 80061c8:	1a9b      	subs	r3, r3, r2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	f040 80f1 	bne.w	80063b2 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	699b      	ldr	r3, [r3, #24]
 80061d4:	693a      	ldr	r2, [r7, #16]
 80061d6:	8992      	ldrh	r2, [r2, #12]
 80061d8:	fbb3 f3f2 	udiv	r3, r3, r2
 80061dc:	693a      	ldr	r2, [r7, #16]
 80061de:	8952      	ldrh	r2, [r2, #10]
 80061e0:	3a01      	subs	r2, #1
 80061e2:	4013      	ands	r3, r2
 80061e4:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80061e6:	69bb      	ldr	r3, [r7, #24]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d143      	bne.n	8006274 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	699b      	ldr	r3, [r3, #24]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10c      	bne.n	800620e <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80061fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d11a      	bne.n	8006236 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2100      	movs	r1, #0
 8006204:	4618      	mov	r0, r3
 8006206:	f7fe f8b6 	bl	8004376 <create_chain>
 800620a:	62b8      	str	r0, [r7, #40]	@ 0x28
 800620c:	e013      	b.n	8006236 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006212:	2b00      	cmp	r3, #0
 8006214:	d007      	beq.n	8006226 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	699b      	ldr	r3, [r3, #24]
 800621a:	4619      	mov	r1, r3
 800621c:	68f8      	ldr	r0, [r7, #12]
 800621e:	f7fe f942 	bl	80044a6 <clmt_clust>
 8006222:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006224:	e007      	b.n	8006236 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8006226:	68fa      	ldr	r2, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	69db      	ldr	r3, [r3, #28]
 800622c:	4619      	mov	r1, r3
 800622e:	4610      	mov	r0, r2
 8006230:	f7fe f8a1 	bl	8004376 <create_chain>
 8006234:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006238:	2b00      	cmp	r3, #0
 800623a:	f000 8109 	beq.w	8006450 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 800623e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006240:	2b01      	cmp	r3, #1
 8006242:	d104      	bne.n	800624e <f_write+0x10c>
 8006244:	68fb      	ldr	r3, [r7, #12]
 8006246:	2202      	movs	r2, #2
 8006248:	755a      	strb	r2, [r3, #21]
 800624a:	2302      	movs	r3, #2
 800624c:	e109      	b.n	8006462 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800624e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006254:	d104      	bne.n	8006260 <f_write+0x11e>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	2201      	movs	r2, #1
 800625a:	755a      	strb	r2, [r3, #21]
 800625c:	2301      	movs	r3, #1
 800625e:	e100      	b.n	8006462 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006264:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <f_write+0x132>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006272:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	7d1b      	ldrb	r3, [r3, #20]
 8006278:	b25b      	sxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	da18      	bge.n	80062b0 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	7858      	ldrb	r0, [r3, #1]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1a      	ldr	r2, [r3, #32]
 800628c:	2301      	movs	r3, #1
 800628e:	f7fd fa75 	bl	800377c <disk_write>
 8006292:	4603      	mov	r3, r0
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <f_write+0x160>
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	2201      	movs	r2, #1
 800629c:	755a      	strb	r2, [r3, #21]
 800629e:	2301      	movs	r3, #1
 80062a0:	e0df      	b.n	8006462 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	7d1b      	ldrb	r3, [r3, #20]
 80062a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80062aa:	b2da      	uxtb	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	69db      	ldr	r3, [r3, #28]
 80062b6:	4619      	mov	r1, r3
 80062b8:	4610      	mov	r0, r2
 80062ba:	f7fd fdeb 	bl	8003e94 <clust2sect>
 80062be:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	d104      	bne.n	80062d0 <f_write+0x18e>
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	2202      	movs	r2, #2
 80062ca:	755a      	strb	r2, [r3, #21]
 80062cc:	2302      	movs	r3, #2
 80062ce:	e0c8      	b.n	8006462 <f_write+0x320>
			sect += csect;
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	4413      	add	r3, r2
 80062d6:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	899b      	ldrh	r3, [r3, #12]
 80062dc:	461a      	mov	r2, r3
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80062e4:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d043      	beq.n	8006374 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	4413      	add	r3, r2
 80062f2:	693a      	ldr	r2, [r7, #16]
 80062f4:	8952      	ldrh	r2, [r2, #10]
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d905      	bls.n	8006306 <f_write+0x1c4>
					cc = fs->csize - csect;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	895b      	ldrh	r3, [r3, #10]
 80062fe:	461a      	mov	r2, r3
 8006300:	69bb      	ldr	r3, [r7, #24]
 8006302:	1ad3      	subs	r3, r2, r3
 8006304:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006306:	693b      	ldr	r3, [r7, #16]
 8006308:	7858      	ldrb	r0, [r3, #1]
 800630a:	6a3b      	ldr	r3, [r7, #32]
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	69f9      	ldr	r1, [r7, #28]
 8006310:	f7fd fa34 	bl	800377c <disk_write>
 8006314:	4603      	mov	r3, r0
 8006316:	2b00      	cmp	r3, #0
 8006318:	d004      	beq.n	8006324 <f_write+0x1e2>
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2201      	movs	r2, #1
 800631e:	755a      	strb	r2, [r3, #21]
 8006320:	2301      	movs	r3, #1
 8006322:	e09e      	b.n	8006462 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	6a1a      	ldr	r2, [r3, #32]
 8006328:	697b      	ldr	r3, [r7, #20]
 800632a:	1ad3      	subs	r3, r2, r3
 800632c:	6a3a      	ldr	r2, [r7, #32]
 800632e:	429a      	cmp	r2, r3
 8006330:	d918      	bls.n	8006364 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	6a1a      	ldr	r2, [r3, #32]
 800633c:	697b      	ldr	r3, [r7, #20]
 800633e:	1ad3      	subs	r3, r2, r3
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	8992      	ldrh	r2, [r2, #12]
 8006344:	fb02 f303 	mul.w	r3, r2, r3
 8006348:	69fa      	ldr	r2, [r7, #28]
 800634a:	18d1      	adds	r1, r2, r3
 800634c:	693b      	ldr	r3, [r7, #16]
 800634e:	899b      	ldrh	r3, [r3, #12]
 8006350:	461a      	mov	r2, r3
 8006352:	f7fd fad3 	bl	80038fc <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	7d1b      	ldrb	r3, [r3, #20]
 800635a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800635e:	b2da      	uxtb	r2, r3
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	899b      	ldrh	r3, [r3, #12]
 8006368:	461a      	mov	r2, r3
 800636a:	6a3b      	ldr	r3, [r7, #32]
 800636c:	fb02 f303 	mul.w	r3, r2, r3
 8006370:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006372:	e04b      	b.n	800640c <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6a1b      	ldr	r3, [r3, #32]
 8006378:	697a      	ldr	r2, [r7, #20]
 800637a:	429a      	cmp	r2, r3
 800637c:	d016      	beq.n	80063ac <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	699a      	ldr	r2, [r3, #24]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006386:	429a      	cmp	r2, r3
 8006388:	d210      	bcs.n	80063ac <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	7858      	ldrb	r0, [r3, #1]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006394:	2301      	movs	r3, #1
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	f7fd f9d0 	bl	800373c <disk_read>
 800639c:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d004      	beq.n	80063ac <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	2201      	movs	r2, #1
 80063a6:	755a      	strb	r2, [r3, #21]
 80063a8:	2301      	movs	r3, #1
 80063aa:	e05a      	b.n	8006462 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063b2:	693b      	ldr	r3, [r7, #16]
 80063b4:	899b      	ldrh	r3, [r3, #12]
 80063b6:	4618      	mov	r0, r3
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699b      	ldr	r3, [r3, #24]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	8992      	ldrh	r2, [r2, #12]
 80063c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80063c4:	fb01 f202 	mul.w	r2, r1, r2
 80063c8:	1a9b      	subs	r3, r3, r2
 80063ca:	1ac3      	subs	r3, r0, r3
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80063ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d901      	bls.n	80063da <f_write+0x298>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	699b      	ldr	r3, [r3, #24]
 80063e4:	693a      	ldr	r2, [r7, #16]
 80063e6:	8992      	ldrh	r2, [r2, #12]
 80063e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80063ec:	fb00 f202 	mul.w	r2, r0, r2
 80063f0:	1a9b      	subs	r3, r3, r2
 80063f2:	440b      	add	r3, r1
 80063f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063f6:	69f9      	ldr	r1, [r7, #28]
 80063f8:	4618      	mov	r0, r3
 80063fa:	f7fd fa7f 	bl	80038fc <mem_cpy>
		fp->flag |= FA_DIRTY;
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	7d1b      	ldrb	r3, [r3, #20]
 8006402:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8006406:	b2da      	uxtb	r2, r3
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800640c:	69fa      	ldr	r2, [r7, #28]
 800640e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006410:	4413      	add	r3, r2
 8006412:	61fb      	str	r3, [r7, #28]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	699a      	ldr	r2, [r3, #24]
 8006418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800641a:	441a      	add	r2, r3
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	619a      	str	r2, [r3, #24]
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	68da      	ldr	r2, [r3, #12]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	699b      	ldr	r3, [r3, #24]
 8006428:	429a      	cmp	r2, r3
 800642a:	bf38      	it	cc
 800642c:	461a      	movcc	r2, r3
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	60da      	str	r2, [r3, #12]
 8006432:	683b      	ldr	r3, [r7, #0]
 8006434:	681a      	ldr	r2, [r3, #0]
 8006436:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006438:	441a      	add	r2, r3
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006442:	1ad3      	subs	r3, r2, r3
 8006444:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	f47f aeb5 	bne.w	80061b8 <f_write+0x76>
 800644e:	e000      	b.n	8006452 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006450:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	7d1b      	ldrb	r3, [r3, #20]
 8006456:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800645a:	b2da      	uxtb	r2, r3
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006460:	2300      	movs	r3, #0
}
 8006462:	4618      	mov	r0, r3
 8006464:	3730      	adds	r7, #48	@ 0x30
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}

0800646a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800646a:	b580      	push	{r7, lr}
 800646c:	b086      	sub	sp, #24
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	f107 0208 	add.w	r2, r7, #8
 8006478:	4611      	mov	r1, r2
 800647a:	4618      	mov	r0, r3
 800647c:	f7ff fabe 	bl	80059fc <validate>
 8006480:	4603      	mov	r3, r0
 8006482:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006484:	7dfb      	ldrb	r3, [r7, #23]
 8006486:	2b00      	cmp	r3, #0
 8006488:	d168      	bne.n	800655c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7d1b      	ldrb	r3, [r3, #20]
 800648e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006492:	2b00      	cmp	r3, #0
 8006494:	d062      	beq.n	800655c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	7d1b      	ldrb	r3, [r3, #20]
 800649a:	b25b      	sxtb	r3, r3
 800649c:	2b00      	cmp	r3, #0
 800649e:	da15      	bge.n	80064cc <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	7858      	ldrb	r0, [r3, #1]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1a      	ldr	r2, [r3, #32]
 80064ae:	2301      	movs	r3, #1
 80064b0:	f7fd f964 	bl	800377c <disk_write>
 80064b4:	4603      	mov	r3, r0
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d001      	beq.n	80064be <f_sync+0x54>
 80064ba:	2301      	movs	r3, #1
 80064bc:	e04f      	b.n	800655e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	7d1b      	ldrb	r3, [r3, #20]
 80064c2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80064cc:	f7fd f896 	bl	80035fc <get_fattime>
 80064d0:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	4619      	mov	r1, r3
 80064da:	4610      	mov	r0, r2
 80064dc:	f7fd fc3c 	bl	8003d58 <move_window>
 80064e0:	4603      	mov	r3, r0
 80064e2:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80064e4:	7dfb      	ldrb	r3, [r7, #23]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d138      	bne.n	800655c <f_sync+0xf2>
					dir = fp->dir_ptr;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064ee:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	330b      	adds	r3, #11
 80064f4:	781a      	ldrb	r2, [r3, #0]
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	330b      	adds	r3, #11
 80064fa:	f042 0220 	orr.w	r2, r2, #32
 80064fe:	b2d2      	uxtb	r2, r2
 8006500:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	6818      	ldr	r0, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	689b      	ldr	r3, [r3, #8]
 800650a:	461a      	mov	r2, r3
 800650c:	68f9      	ldr	r1, [r7, #12]
 800650e:	f7fe f9c7 	bl	80048a0 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f103 021c 	add.w	r2, r3, #28
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	4619      	mov	r1, r3
 800651e:	4610      	mov	r0, r2
 8006520:	f7fd f9c0 	bl	80038a4 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3316      	adds	r3, #22
 8006528:	6939      	ldr	r1, [r7, #16]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd f9ba 	bl	80038a4 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	3312      	adds	r3, #18
 8006534:	2100      	movs	r1, #0
 8006536:	4618      	mov	r0, r3
 8006538:	f7fd f999 	bl	800386e <st_word>
					fs->wflag = 1;
 800653c:	68bb      	ldr	r3, [r7, #8]
 800653e:	2201      	movs	r2, #1
 8006540:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	4618      	mov	r0, r3
 8006546:	f7fd fc35 	bl	8003db4 <sync_fs>
 800654a:	4603      	mov	r3, r0
 800654c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	7d1b      	ldrb	r3, [r3, #20]
 8006552:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006556:	b2da      	uxtb	r2, r3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800655c:	7dfb      	ldrb	r3, [r7, #23]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3718      	adds	r7, #24
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}

08006566 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8006566:	b580      	push	{r7, lr}
 8006568:	b084      	sub	sp, #16
 800656a:	af00      	add	r7, sp, #0
 800656c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800656e:	6878      	ldr	r0, [r7, #4]
 8006570:	f7ff ff7b 	bl	800646a <f_sync>
 8006574:	4603      	mov	r3, r0
 8006576:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8006578:	7bfb      	ldrb	r3, [r7, #15]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d118      	bne.n	80065b0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f107 0208 	add.w	r2, r7, #8
 8006584:	4611      	mov	r1, r2
 8006586:	4618      	mov	r0, r3
 8006588:	f7ff fa38 	bl	80059fc <validate>
 800658c:	4603      	mov	r3, r0
 800658e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006590:	7bfb      	ldrb	r3, [r7, #15]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10c      	bne.n	80065b0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	691b      	ldr	r3, [r3, #16]
 800659a:	4618      	mov	r0, r3
 800659c:	f7fd fb38 	bl	8003c10 <dec_lock>
 80065a0:	4603      	mov	r3, r0
 80065a2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d102      	bne.n	80065b0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2200      	movs	r2, #0
 80065ae:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80065b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3710      	adds	r7, #16
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}

080065ba <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80065ba:	b580      	push	{r7, lr}
 80065bc:	b092      	sub	sp, #72	@ 0x48
 80065be:	af00      	add	r7, sp, #0
 80065c0:	60f8      	str	r0, [r7, #12]
 80065c2:	60b9      	str	r1, [r7, #8]
 80065c4:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80065c6:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80065ca:	f107 030c 	add.w	r3, r7, #12
 80065ce:	2200      	movs	r2, #0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f7fe ff8d 	bl	80054f0 <find_volume>
 80065d6:	4603      	mov	r3, r0
 80065d8:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80065dc:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f040 8099 	bne.w	8006718 <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80065e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80065ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065ee:	699a      	ldr	r2, [r3, #24]
 80065f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f2:	69db      	ldr	r3, [r3, #28]
 80065f4:	3b02      	subs	r3, #2
 80065f6:	429a      	cmp	r2, r3
 80065f8:	d804      	bhi.n	8006604 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80065fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	68bb      	ldr	r3, [r7, #8]
 8006600:	601a      	str	r2, [r3, #0]
 8006602:	e089      	b.n	8006718 <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 8006604:	2300      	movs	r3, #0
 8006606:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d128      	bne.n	8006662 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006610:	2302      	movs	r3, #2
 8006612:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006616:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 8006618:	f107 0314 	add.w	r3, r7, #20
 800661c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800661e:	4618      	mov	r0, r3
 8006620:	f7fd fc57 	bl	8003ed2 <get_fat>
 8006624:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 8006626:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662c:	d103      	bne.n	8006636 <f_getfree+0x7c>
 800662e:	2301      	movs	r3, #1
 8006630:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006634:	e063      	b.n	80066fe <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 8006636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006638:	2b01      	cmp	r3, #1
 800663a:	d103      	bne.n	8006644 <f_getfree+0x8a>
 800663c:	2302      	movs	r3, #2
 800663e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006642:	e05c      	b.n	80066fe <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006646:	2b00      	cmp	r3, #0
 8006648:	d102      	bne.n	8006650 <f_getfree+0x96>
 800664a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664c:	3301      	adds	r3, #1
 800664e:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006650:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006652:	3301      	adds	r3, #1
 8006654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800665c:	429a      	cmp	r2, r3
 800665e:	d3db      	bcc.n	8006618 <f_getfree+0x5e>
 8006660:	e04d      	b.n	80066fe <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006662:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006664:	69db      	ldr	r3, [r3, #28]
 8006666:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 800666e:	2300      	movs	r3, #0
 8006670:	637b      	str	r3, [r7, #52]	@ 0x34
 8006672:	2300      	movs	r3, #0
 8006674:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8006676:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006678:	2b00      	cmp	r3, #0
 800667a:	d113      	bne.n	80066a4 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800667c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800667e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006680:	1c5a      	adds	r2, r3, #1
 8006682:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006684:	4619      	mov	r1, r3
 8006686:	f7fd fb67 	bl	8003d58 <move_window>
 800668a:	4603      	mov	r3, r0
 800668c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8006690:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006694:	2b00      	cmp	r3, #0
 8006696:	d131      	bne.n	80066fc <f_getfree+0x142>
							p = fs->win;
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	3338      	adds	r3, #56	@ 0x38
 800669c:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 800669e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a0:	899b      	ldrh	r3, [r3, #12]
 80066a2:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 80066a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a6:	781b      	ldrb	r3, [r3, #0]
 80066a8:	2b02      	cmp	r3, #2
 80066aa:	d10f      	bne.n	80066cc <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80066ac:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ae:	f7fd f8a3 	bl	80037f8 <ld_word>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d102      	bne.n	80066be <f_getfree+0x104>
 80066b8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ba:	3301      	adds	r3, #1
 80066bc:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	3302      	adds	r3, #2
 80066c2:	633b      	str	r3, [r7, #48]	@ 0x30
 80066c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066c6:	3b02      	subs	r3, #2
 80066c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80066ca:	e010      	b.n	80066ee <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80066cc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066ce:	f7fd f8ab 	bl	8003828 <ld_dword>
 80066d2:	4603      	mov	r3, r0
 80066d4:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <f_getfree+0x128>
 80066dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066de:	3301      	adds	r3, #1
 80066e0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80066e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066e4:	3304      	adds	r3, #4
 80066e6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ea:	3b04      	subs	r3, #4
 80066ec:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80066ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f0:	3b01      	subs	r3, #1
 80066f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d1bd      	bne.n	8006676 <f_getfree+0xbc>
 80066fa:	e000      	b.n	80066fe <f_getfree+0x144>
							if (res != FR_OK) break;
 80066fc:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006702:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 8006704:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006706:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006708:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 800670a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800670c:	791a      	ldrb	r2, [r3, #4]
 800670e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006710:	f042 0201 	orr.w	r2, r2, #1
 8006714:	b2d2      	uxtb	r2, r2
 8006716:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 8006718:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 800671c:	4618      	mov	r0, r3
 800671e:	3748      	adds	r7, #72	@ 0x48
 8006720:	46bd      	mov	sp, r7
 8006722:	bd80      	pop	{r7, pc}

08006724 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b088      	sub	sp, #32
 8006728:	af00      	add	r7, sp, #0
 800672a:	60f8      	str	r0, [r7, #12]
 800672c:	60b9      	str	r1, [r7, #8]
 800672e:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006730:	2300      	movs	r3, #0
 8006732:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006738:	e01c      	b.n	8006774 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800673a:	f107 0310 	add.w	r3, r7, #16
 800673e:	f107 0114 	add.w	r1, r7, #20
 8006742:	2201      	movs	r2, #1
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff fb9d 	bl	8005e84 <f_read>
		if (rc != 1) break;
 800674a:	693b      	ldr	r3, [r7, #16]
 800674c:	2b01      	cmp	r3, #1
 800674e:	d117      	bne.n	8006780 <f_gets+0x5c>
		c = s[0];
 8006750:	7d3b      	ldrb	r3, [r7, #20]
 8006752:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006754:	7dfb      	ldrb	r3, [r7, #23]
 8006756:	2b0d      	cmp	r3, #13
 8006758:	d00b      	beq.n	8006772 <f_gets+0x4e>
		*p++ = c;
 800675a:	69bb      	ldr	r3, [r7, #24]
 800675c:	1c5a      	adds	r2, r3, #1
 800675e:	61ba      	str	r2, [r7, #24]
 8006760:	7dfa      	ldrb	r2, [r7, #23]
 8006762:	701a      	strb	r2, [r3, #0]
		n++;
 8006764:	69fb      	ldr	r3, [r7, #28]
 8006766:	3301      	adds	r3, #1
 8006768:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800676a:	7dfb      	ldrb	r3, [r7, #23]
 800676c:	2b0a      	cmp	r3, #10
 800676e:	d009      	beq.n	8006784 <f_gets+0x60>
 8006770:	e000      	b.n	8006774 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006772:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006774:	68bb      	ldr	r3, [r7, #8]
 8006776:	3b01      	subs	r3, #1
 8006778:	69fa      	ldr	r2, [r7, #28]
 800677a:	429a      	cmp	r2, r3
 800677c:	dbdd      	blt.n	800673a <f_gets+0x16>
 800677e:	e002      	b.n	8006786 <f_gets+0x62>
		if (rc != 1) break;
 8006780:	bf00      	nop
 8006782:	e000      	b.n	8006786 <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006784:	bf00      	nop
	}
	*p = 0;
 8006786:	69bb      	ldr	r3, [r7, #24]
 8006788:	2200      	movs	r2, #0
 800678a:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 800678c:	69fb      	ldr	r3, [r7, #28]
 800678e:	2b00      	cmp	r3, #0
 8006790:	d001      	beq.n	8006796 <f_gets+0x72>
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	e000      	b.n	8006798 <f_gets+0x74>
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	460b      	mov	r3, r1
 80067aa:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80067ac:	78fb      	ldrb	r3, [r7, #3]
 80067ae:	2b0a      	cmp	r3, #10
 80067b0:	d103      	bne.n	80067ba <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80067b2:	210d      	movs	r1, #13
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f7ff fff3 	bl	80067a0 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	db25      	blt.n	8006812 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	1c5a      	adds	r2, r3, #1
 80067ca:	60fa      	str	r2, [r7, #12]
 80067cc:	687a      	ldr	r2, [r7, #4]
 80067ce:	4413      	add	r3, r2
 80067d0:	78fa      	ldrb	r2, [r7, #3]
 80067d2:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80067d4:	68fb      	ldr	r3, [r7, #12]
 80067d6:	2b3c      	cmp	r3, #60	@ 0x3c
 80067d8:	dd12      	ble.n	8006800 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	6818      	ldr	r0, [r3, #0]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f103 010c 	add.w	r1, r3, #12
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	f107 0308 	add.w	r3, r7, #8
 80067ea:	f7ff fcaa 	bl	8006142 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80067ee:	68ba      	ldr	r2, [r7, #8]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	429a      	cmp	r2, r3
 80067f4:	d101      	bne.n	80067fa <putc_bfd+0x5a>
 80067f6:	2300      	movs	r3, #0
 80067f8:	e001      	b.n	80067fe <putc_bfd+0x5e>
 80067fa:	f04f 33ff 	mov.w	r3, #4294967295
 80067fe:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	68fa      	ldr	r2, [r7, #12]
 8006804:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	689b      	ldr	r3, [r3, #8]
 800680a:	1c5a      	adds	r2, r3, #1
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	609a      	str	r2, [r3, #8]
 8006810:	e000      	b.n	8006814 <putc_bfd+0x74>
	if (i < 0) return;
 8006812:	bf00      	nop
}
 8006814:	3710      	adds	r7, #16
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}

0800681a <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800681a:	b580      	push	{r7, lr}
 800681c:	b084      	sub	sp, #16
 800681e:	af00      	add	r7, sp, #0
 8006820:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	2b00      	cmp	r3, #0
 8006828:	db16      	blt.n	8006858 <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	f103 010c 	add.w	r1, r3, #12
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	461a      	mov	r2, r3
 800683a:	f107 030c 	add.w	r3, r7, #12
 800683e:	f7ff fc80 	bl	8006142 <f_write>
 8006842:	4603      	mov	r3, r0
 8006844:	2b00      	cmp	r3, #0
 8006846:	d107      	bne.n	8006858 <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	685b      	ldr	r3, [r3, #4]
 800684c:	68fa      	ldr	r2, [r7, #12]
 800684e:	4293      	cmp	r3, r2
 8006850:	d102      	bne.n	8006858 <putc_flush+0x3e>
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	689b      	ldr	r3, [r3, #8]
 8006856:	e001      	b.n	800685c <putc_flush+0x42>
	return EOF;
 8006858:	f04f 33ff 	mov.w	r3, #4294967295
}
 800685c:	4618      	mov	r0, r3
 800685e:	3710      	adds	r7, #16
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006864:	b480      	push	{r7}
 8006866:	b083      	sub	sp, #12
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	683a      	ldr	r2, [r7, #0]
 8006872:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	2200      	movs	r2, #0
 8006878:	605a      	str	r2, [r3, #4]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	685a      	ldr	r2, [r3, #4]
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	609a      	str	r2, [r3, #8]
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 800688e:	b580      	push	{r7, lr}
 8006890:	b096      	sub	sp, #88	@ 0x58
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8006898:	f107 030c 	add.w	r3, r7, #12
 800689c:	6839      	ldr	r1, [r7, #0]
 800689e:	4618      	mov	r0, r3
 80068a0:	f7ff ffe0 	bl	8006864 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 80068a4:	e009      	b.n	80068ba <f_puts+0x2c>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	1c5a      	adds	r2, r3, #1
 80068aa:	607a      	str	r2, [r7, #4]
 80068ac:	781a      	ldrb	r2, [r3, #0]
 80068ae:	f107 030c 	add.w	r3, r7, #12
 80068b2:	4611      	mov	r1, r2
 80068b4:	4618      	mov	r0, r3
 80068b6:	f7ff ff73 	bl	80067a0 <putc_bfd>
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1f1      	bne.n	80068a6 <f_puts+0x18>
	return putc_flush(&pb);
 80068c2:	f107 030c 	add.w	r3, r7, #12
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7ff ffa7 	bl	800681a <putc_flush>
 80068cc:	4603      	mov	r3, r0
}
 80068ce:	4618      	mov	r0, r3
 80068d0:	3758      	adds	r7, #88	@ 0x58
 80068d2:	46bd      	mov	sp, r7
 80068d4:	bd80      	pop	{r7, pc}
	...

080068d8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068d8:	b480      	push	{r7}
 80068da:	b087      	sub	sp, #28
 80068dc:	af00      	add	r7, sp, #0
 80068de:	60f8      	str	r0, [r7, #12]
 80068e0:	60b9      	str	r1, [r7, #8]
 80068e2:	4613      	mov	r3, r2
 80068e4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068e6:	2301      	movs	r3, #1
 80068e8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068ea:	2300      	movs	r3, #0
 80068ec:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068ee:	4b1f      	ldr	r3, [pc, #124]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 80068f0:	7a5b      	ldrb	r3, [r3, #9]
 80068f2:	b2db      	uxtb	r3, r3
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d131      	bne.n	800695c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068f8:	4b1c      	ldr	r3, [pc, #112]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 80068fa:	7a5b      	ldrb	r3, [r3, #9]
 80068fc:	b2db      	uxtb	r3, r3
 80068fe:	461a      	mov	r2, r3
 8006900:	4b1a      	ldr	r3, [pc, #104]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006902:	2100      	movs	r1, #0
 8006904:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006906:	4b19      	ldr	r3, [pc, #100]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006908:	7a5b      	ldrb	r3, [r3, #9]
 800690a:	b2db      	uxtb	r3, r3
 800690c:	4a17      	ldr	r2, [pc, #92]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 800690e:	009b      	lsls	r3, r3, #2
 8006910:	4413      	add	r3, r2
 8006912:	68fa      	ldr	r2, [r7, #12]
 8006914:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006916:	4b15      	ldr	r3, [pc, #84]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006918:	7a5b      	ldrb	r3, [r3, #9]
 800691a:	b2db      	uxtb	r3, r3
 800691c:	461a      	mov	r2, r3
 800691e:	4b13      	ldr	r3, [pc, #76]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006920:	4413      	add	r3, r2
 8006922:	79fa      	ldrb	r2, [r7, #7]
 8006924:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006926:	4b11      	ldr	r3, [pc, #68]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006928:	7a5b      	ldrb	r3, [r3, #9]
 800692a:	b2db      	uxtb	r3, r3
 800692c:	1c5a      	adds	r2, r3, #1
 800692e:	b2d1      	uxtb	r1, r2
 8006930:	4a0e      	ldr	r2, [pc, #56]	@ (800696c <FATFS_LinkDriverEx+0x94>)
 8006932:	7251      	strb	r1, [r2, #9]
 8006934:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006936:	7dbb      	ldrb	r3, [r7, #22]
 8006938:	3330      	adds	r3, #48	@ 0x30
 800693a:	b2da      	uxtb	r2, r3
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	3301      	adds	r3, #1
 8006944:	223a      	movs	r2, #58	@ 0x3a
 8006946:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	3302      	adds	r3, #2
 800694c:	222f      	movs	r2, #47	@ 0x2f
 800694e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006950:	68bb      	ldr	r3, [r7, #8]
 8006952:	3303      	adds	r3, #3
 8006954:	2200      	movs	r2, #0
 8006956:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006958:	2300      	movs	r3, #0
 800695a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800695c:	7dfb      	ldrb	r3, [r7, #23]
}
 800695e:	4618      	mov	r0, r3
 8006960:	371c      	adds	r7, #28
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr
 800696a:	bf00      	nop
 800696c:	20000334 	.word	0x20000334

08006970 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006970:	b580      	push	{r7, lr}
 8006972:	b082      	sub	sp, #8
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800697a:	2200      	movs	r2, #0
 800697c:	6839      	ldr	r1, [r7, #0]
 800697e:	6878      	ldr	r0, [r7, #4]
 8006980:	f7ff ffaa 	bl	80068d8 <FATFS_LinkDriverEx>
 8006984:	4603      	mov	r3, r0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3708      	adds	r7, #8
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
	...

08006990 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	4603      	mov	r3, r0
 8006998:	6039      	str	r1, [r7, #0]
 800699a:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 800699c:	88fb      	ldrh	r3, [r7, #6]
 800699e:	2b7f      	cmp	r3, #127	@ 0x7f
 80069a0:	d802      	bhi.n	80069a8 <ff_convert+0x18>
		c = chr;
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	81fb      	strh	r3, [r7, #14]
 80069a6:	e025      	b.n	80069f4 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d00b      	beq.n	80069c6 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80069ae:	88fb      	ldrh	r3, [r7, #6]
 80069b0:	2bff      	cmp	r3, #255	@ 0xff
 80069b2:	d805      	bhi.n	80069c0 <ff_convert+0x30>
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	3b80      	subs	r3, #128	@ 0x80
 80069b8:	4a12      	ldr	r2, [pc, #72]	@ (8006a04 <ff_convert+0x74>)
 80069ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069be:	e000      	b.n	80069c2 <ff_convert+0x32>
 80069c0:	2300      	movs	r3, #0
 80069c2:	81fb      	strh	r3, [r7, #14]
 80069c4:	e016      	b.n	80069f4 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80069c6:	2300      	movs	r3, #0
 80069c8:	81fb      	strh	r3, [r7, #14]
 80069ca:	e009      	b.n	80069e0 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80069cc:	89fb      	ldrh	r3, [r7, #14]
 80069ce:	4a0d      	ldr	r2, [pc, #52]	@ (8006a04 <ff_convert+0x74>)
 80069d0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069d4:	88fa      	ldrh	r2, [r7, #6]
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d006      	beq.n	80069e8 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80069da:	89fb      	ldrh	r3, [r7, #14]
 80069dc:	3301      	adds	r3, #1
 80069de:	81fb      	strh	r3, [r7, #14]
 80069e0:	89fb      	ldrh	r3, [r7, #14]
 80069e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80069e4:	d9f2      	bls.n	80069cc <ff_convert+0x3c>
 80069e6:	e000      	b.n	80069ea <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80069e8:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80069ea:	89fb      	ldrh	r3, [r7, #14]
 80069ec:	3380      	adds	r3, #128	@ 0x80
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	b2db      	uxtb	r3, r3
 80069f2:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80069f4:	89fb      	ldrh	r3, [r7, #14]
}
 80069f6:	4618      	mov	r0, r3
 80069f8:	3714      	adds	r7, #20
 80069fa:	46bd      	mov	sp, r7
 80069fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a00:	4770      	bx	lr
 8006a02:	bf00      	nop
 8006a04:	08007c78 	.word	0x08007c78

08006a08 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	4603      	mov	r3, r0
 8006a10:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006a12:	88fb      	ldrh	r3, [r7, #6]
 8006a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a18:	d201      	bcs.n	8006a1e <ff_wtoupper+0x16>
 8006a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8006b14 <ff_wtoupper+0x10c>)
 8006a1c:	e000      	b.n	8006a20 <ff_wtoupper+0x18>
 8006a1e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b18 <ff_wtoupper+0x110>)
 8006a20:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	1c9a      	adds	r2, r3, #2
 8006a26:	617a      	str	r2, [r7, #20]
 8006a28:	881b      	ldrh	r3, [r3, #0]
 8006a2a:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006a2c:	8a7b      	ldrh	r3, [r7, #18]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d068      	beq.n	8006b04 <ff_wtoupper+0xfc>
 8006a32:	88fa      	ldrh	r2, [r7, #6]
 8006a34:	8a7b      	ldrh	r3, [r7, #18]
 8006a36:	429a      	cmp	r2, r3
 8006a38:	d364      	bcc.n	8006b04 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006a3a:	697b      	ldr	r3, [r7, #20]
 8006a3c:	1c9a      	adds	r2, r3, #2
 8006a3e:	617a      	str	r2, [r7, #20]
 8006a40:	881b      	ldrh	r3, [r3, #0]
 8006a42:	823b      	strh	r3, [r7, #16]
 8006a44:	8a3b      	ldrh	r3, [r7, #16]
 8006a46:	0a1b      	lsrs	r3, r3, #8
 8006a48:	81fb      	strh	r3, [r7, #14]
 8006a4a:	8a3b      	ldrh	r3, [r7, #16]
 8006a4c:	b2db      	uxtb	r3, r3
 8006a4e:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006a50:	88fa      	ldrh	r2, [r7, #6]
 8006a52:	8a79      	ldrh	r1, [r7, #18]
 8006a54:	8a3b      	ldrh	r3, [r7, #16]
 8006a56:	440b      	add	r3, r1
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	da49      	bge.n	8006af0 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006a5c:	89fb      	ldrh	r3, [r7, #14]
 8006a5e:	2b08      	cmp	r3, #8
 8006a60:	d84f      	bhi.n	8006b02 <ff_wtoupper+0xfa>
 8006a62:	a201      	add	r2, pc, #4	@ (adr r2, 8006a68 <ff_wtoupper+0x60>)
 8006a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a68:	08006a8d 	.word	0x08006a8d
 8006a6c:	08006a9f 	.word	0x08006a9f
 8006a70:	08006ab5 	.word	0x08006ab5
 8006a74:	08006abd 	.word	0x08006abd
 8006a78:	08006ac5 	.word	0x08006ac5
 8006a7c:	08006acd 	.word	0x08006acd
 8006a80:	08006ad5 	.word	0x08006ad5
 8006a84:	08006add 	.word	0x08006add
 8006a88:	08006ae5 	.word	0x08006ae5
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006a8c:	88fa      	ldrh	r2, [r7, #6]
 8006a8e:	8a7b      	ldrh	r3, [r7, #18]
 8006a90:	1ad3      	subs	r3, r2, r3
 8006a92:	005b      	lsls	r3, r3, #1
 8006a94:	697a      	ldr	r2, [r7, #20]
 8006a96:	4413      	add	r3, r2
 8006a98:	881b      	ldrh	r3, [r3, #0]
 8006a9a:	80fb      	strh	r3, [r7, #6]
 8006a9c:	e027      	b.n	8006aee <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006a9e:	88fa      	ldrh	r2, [r7, #6]
 8006aa0:	8a7b      	ldrh	r3, [r7, #18]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	f003 0301 	and.w	r3, r3, #1
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	88fa      	ldrh	r2, [r7, #6]
 8006aae:	1ad3      	subs	r3, r2, r3
 8006ab0:	80fb      	strh	r3, [r7, #6]
 8006ab2:	e01c      	b.n	8006aee <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006ab4:	88fb      	ldrh	r3, [r7, #6]
 8006ab6:	3b10      	subs	r3, #16
 8006ab8:	80fb      	strh	r3, [r7, #6]
 8006aba:	e018      	b.n	8006aee <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006abc:	88fb      	ldrh	r3, [r7, #6]
 8006abe:	3b20      	subs	r3, #32
 8006ac0:	80fb      	strh	r3, [r7, #6]
 8006ac2:	e014      	b.n	8006aee <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006ac4:	88fb      	ldrh	r3, [r7, #6]
 8006ac6:	3b30      	subs	r3, #48	@ 0x30
 8006ac8:	80fb      	strh	r3, [r7, #6]
 8006aca:	e010      	b.n	8006aee <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006acc:	88fb      	ldrh	r3, [r7, #6]
 8006ace:	3b1a      	subs	r3, #26
 8006ad0:	80fb      	strh	r3, [r7, #6]
 8006ad2:	e00c      	b.n	8006aee <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006ad4:	88fb      	ldrh	r3, [r7, #6]
 8006ad6:	3308      	adds	r3, #8
 8006ad8:	80fb      	strh	r3, [r7, #6]
 8006ada:	e008      	b.n	8006aee <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006adc:	88fb      	ldrh	r3, [r7, #6]
 8006ade:	3b50      	subs	r3, #80	@ 0x50
 8006ae0:	80fb      	strh	r3, [r7, #6]
 8006ae2:	e004      	b.n	8006aee <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006ae4:	88fb      	ldrh	r3, [r7, #6]
 8006ae6:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006aea:	80fb      	strh	r3, [r7, #6]
 8006aec:	bf00      	nop
			}
			break;
 8006aee:	e008      	b.n	8006b02 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006af0:	89fb      	ldrh	r3, [r7, #14]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d195      	bne.n	8006a22 <ff_wtoupper+0x1a>
 8006af6:	8a3b      	ldrh	r3, [r7, #16]
 8006af8:	005b      	lsls	r3, r3, #1
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	4413      	add	r3, r2
 8006afe:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006b00:	e78f      	b.n	8006a22 <ff_wtoupper+0x1a>
			break;
 8006b02:	bf00      	nop
	}

	return chr;
 8006b04:	88fb      	ldrh	r3, [r7, #6]
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	371c      	adds	r7, #28
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b10:	4770      	bx	lr
 8006b12:	bf00      	nop
 8006b14:	08007d78 	.word	0x08007d78
 8006b18:	08007f6c 	.word	0x08007f6c

08006b1c <std>:
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	b510      	push	{r4, lr}
 8006b20:	4604      	mov	r4, r0
 8006b22:	e9c0 3300 	strd	r3, r3, [r0]
 8006b26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b2a:	6083      	str	r3, [r0, #8]
 8006b2c:	8181      	strh	r1, [r0, #12]
 8006b2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b30:	81c2      	strh	r2, [r0, #14]
 8006b32:	6183      	str	r3, [r0, #24]
 8006b34:	4619      	mov	r1, r3
 8006b36:	2208      	movs	r2, #8
 8006b38:	305c      	adds	r0, #92	@ 0x5c
 8006b3a:	f000 f9f9 	bl	8006f30 <memset>
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x58>)
 8006b40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x5c>)
 8006b44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b46:	4b0d      	ldr	r3, [pc, #52]	@ (8006b7c <std+0x60>)
 8006b48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b80 <std+0x64>)
 8006b4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b84 <std+0x68>)
 8006b50:	6224      	str	r4, [r4, #32]
 8006b52:	429c      	cmp	r4, r3
 8006b54:	d006      	beq.n	8006b64 <std+0x48>
 8006b56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b5a:	4294      	cmp	r4, r2
 8006b5c:	d002      	beq.n	8006b64 <std+0x48>
 8006b5e:	33d0      	adds	r3, #208	@ 0xd0
 8006b60:	429c      	cmp	r4, r3
 8006b62:	d105      	bne.n	8006b70 <std+0x54>
 8006b64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b6c:	f000 ba58 	b.w	8007020 <__retarget_lock_init_recursive>
 8006b70:	bd10      	pop	{r4, pc}
 8006b72:	bf00      	nop
 8006b74:	08006d81 	.word	0x08006d81
 8006b78:	08006da3 	.word	0x08006da3
 8006b7c:	08006ddb 	.word	0x08006ddb
 8006b80:	08006dff 	.word	0x08006dff
 8006b84:	20000340 	.word	0x20000340

08006b88 <stdio_exit_handler>:
 8006b88:	4a02      	ldr	r2, [pc, #8]	@ (8006b94 <stdio_exit_handler+0xc>)
 8006b8a:	4903      	ldr	r1, [pc, #12]	@ (8006b98 <stdio_exit_handler+0x10>)
 8006b8c:	4803      	ldr	r0, [pc, #12]	@ (8006b9c <stdio_exit_handler+0x14>)
 8006b8e:	f000 b869 	b.w	8006c64 <_fwalk_sglue>
 8006b92:	bf00      	nop
 8006b94:	20000024 	.word	0x20000024
 8006b98:	080078c1 	.word	0x080078c1
 8006b9c:	20000034 	.word	0x20000034

08006ba0 <cleanup_stdio>:
 8006ba0:	6841      	ldr	r1, [r0, #4]
 8006ba2:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd4 <cleanup_stdio+0x34>)
 8006ba4:	4299      	cmp	r1, r3
 8006ba6:	b510      	push	{r4, lr}
 8006ba8:	4604      	mov	r4, r0
 8006baa:	d001      	beq.n	8006bb0 <cleanup_stdio+0x10>
 8006bac:	f000 fe88 	bl	80078c0 <_fflush_r>
 8006bb0:	68a1      	ldr	r1, [r4, #8]
 8006bb2:	4b09      	ldr	r3, [pc, #36]	@ (8006bd8 <cleanup_stdio+0x38>)
 8006bb4:	4299      	cmp	r1, r3
 8006bb6:	d002      	beq.n	8006bbe <cleanup_stdio+0x1e>
 8006bb8:	4620      	mov	r0, r4
 8006bba:	f000 fe81 	bl	80078c0 <_fflush_r>
 8006bbe:	68e1      	ldr	r1, [r4, #12]
 8006bc0:	4b06      	ldr	r3, [pc, #24]	@ (8006bdc <cleanup_stdio+0x3c>)
 8006bc2:	4299      	cmp	r1, r3
 8006bc4:	d004      	beq.n	8006bd0 <cleanup_stdio+0x30>
 8006bc6:	4620      	mov	r0, r4
 8006bc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bcc:	f000 be78 	b.w	80078c0 <_fflush_r>
 8006bd0:	bd10      	pop	{r4, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000340 	.word	0x20000340
 8006bd8:	200003a8 	.word	0x200003a8
 8006bdc:	20000410 	.word	0x20000410

08006be0 <global_stdio_init.part.0>:
 8006be0:	b510      	push	{r4, lr}
 8006be2:	4b0b      	ldr	r3, [pc, #44]	@ (8006c10 <global_stdio_init.part.0+0x30>)
 8006be4:	4c0b      	ldr	r4, [pc, #44]	@ (8006c14 <global_stdio_init.part.0+0x34>)
 8006be6:	4a0c      	ldr	r2, [pc, #48]	@ (8006c18 <global_stdio_init.part.0+0x38>)
 8006be8:	601a      	str	r2, [r3, #0]
 8006bea:	4620      	mov	r0, r4
 8006bec:	2200      	movs	r2, #0
 8006bee:	2104      	movs	r1, #4
 8006bf0:	f7ff ff94 	bl	8006b1c <std>
 8006bf4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2109      	movs	r1, #9
 8006bfc:	f7ff ff8e 	bl	8006b1c <std>
 8006c00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006c04:	2202      	movs	r2, #2
 8006c06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c0a:	2112      	movs	r1, #18
 8006c0c:	f7ff bf86 	b.w	8006b1c <std>
 8006c10:	20000478 	.word	0x20000478
 8006c14:	20000340 	.word	0x20000340
 8006c18:	08006b89 	.word	0x08006b89

08006c1c <__sfp_lock_acquire>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__sfp_lock_acquire+0x8>)
 8006c1e:	f000 ba00 	b.w	8007022 <__retarget_lock_acquire_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000481 	.word	0x20000481

08006c28 <__sfp_lock_release>:
 8006c28:	4801      	ldr	r0, [pc, #4]	@ (8006c30 <__sfp_lock_release+0x8>)
 8006c2a:	f000 b9fb 	b.w	8007024 <__retarget_lock_release_recursive>
 8006c2e:	bf00      	nop
 8006c30:	20000481 	.word	0x20000481

08006c34 <__sinit>:
 8006c34:	b510      	push	{r4, lr}
 8006c36:	4604      	mov	r4, r0
 8006c38:	f7ff fff0 	bl	8006c1c <__sfp_lock_acquire>
 8006c3c:	6a23      	ldr	r3, [r4, #32]
 8006c3e:	b11b      	cbz	r3, 8006c48 <__sinit+0x14>
 8006c40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c44:	f7ff bff0 	b.w	8006c28 <__sfp_lock_release>
 8006c48:	4b04      	ldr	r3, [pc, #16]	@ (8006c5c <__sinit+0x28>)
 8006c4a:	6223      	str	r3, [r4, #32]
 8006c4c:	4b04      	ldr	r3, [pc, #16]	@ (8006c60 <__sinit+0x2c>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d1f5      	bne.n	8006c40 <__sinit+0xc>
 8006c54:	f7ff ffc4 	bl	8006be0 <global_stdio_init.part.0>
 8006c58:	e7f2      	b.n	8006c40 <__sinit+0xc>
 8006c5a:	bf00      	nop
 8006c5c:	08006ba1 	.word	0x08006ba1
 8006c60:	20000478 	.word	0x20000478

08006c64 <_fwalk_sglue>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4607      	mov	r7, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	4614      	mov	r4, r2
 8006c6e:	2600      	movs	r6, #0
 8006c70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c74:	f1b9 0901 	subs.w	r9, r9, #1
 8006c78:	d505      	bpl.n	8006c86 <_fwalk_sglue+0x22>
 8006c7a:	6824      	ldr	r4, [r4, #0]
 8006c7c:	2c00      	cmp	r4, #0
 8006c7e:	d1f7      	bne.n	8006c70 <_fwalk_sglue+0xc>
 8006c80:	4630      	mov	r0, r6
 8006c82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c86:	89ab      	ldrh	r3, [r5, #12]
 8006c88:	2b01      	cmp	r3, #1
 8006c8a:	d907      	bls.n	8006c9c <_fwalk_sglue+0x38>
 8006c8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c90:	3301      	adds	r3, #1
 8006c92:	d003      	beq.n	8006c9c <_fwalk_sglue+0x38>
 8006c94:	4629      	mov	r1, r5
 8006c96:	4638      	mov	r0, r7
 8006c98:	47c0      	blx	r8
 8006c9a:	4306      	orrs	r6, r0
 8006c9c:	3568      	adds	r5, #104	@ 0x68
 8006c9e:	e7e9      	b.n	8006c74 <_fwalk_sglue+0x10>

08006ca0 <iprintf>:
 8006ca0:	b40f      	push	{r0, r1, r2, r3}
 8006ca2:	b507      	push	{r0, r1, r2, lr}
 8006ca4:	4906      	ldr	r1, [pc, #24]	@ (8006cc0 <iprintf+0x20>)
 8006ca6:	ab04      	add	r3, sp, #16
 8006ca8:	6808      	ldr	r0, [r1, #0]
 8006caa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cae:	6881      	ldr	r1, [r0, #8]
 8006cb0:	9301      	str	r3, [sp, #4]
 8006cb2:	f000 fadb 	bl	800726c <_vfiprintf_r>
 8006cb6:	b003      	add	sp, #12
 8006cb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cbc:	b004      	add	sp, #16
 8006cbe:	4770      	bx	lr
 8006cc0:	20000030 	.word	0x20000030

08006cc4 <_puts_r>:
 8006cc4:	6a03      	ldr	r3, [r0, #32]
 8006cc6:	b570      	push	{r4, r5, r6, lr}
 8006cc8:	6884      	ldr	r4, [r0, #8]
 8006cca:	4605      	mov	r5, r0
 8006ccc:	460e      	mov	r6, r1
 8006cce:	b90b      	cbnz	r3, 8006cd4 <_puts_r+0x10>
 8006cd0:	f7ff ffb0 	bl	8006c34 <__sinit>
 8006cd4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cd6:	07db      	lsls	r3, r3, #31
 8006cd8:	d405      	bmi.n	8006ce6 <_puts_r+0x22>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	0598      	lsls	r0, r3, #22
 8006cde:	d402      	bmi.n	8006ce6 <_puts_r+0x22>
 8006ce0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006ce2:	f000 f99e 	bl	8007022 <__retarget_lock_acquire_recursive>
 8006ce6:	89a3      	ldrh	r3, [r4, #12]
 8006ce8:	0719      	lsls	r1, r3, #28
 8006cea:	d502      	bpl.n	8006cf2 <_puts_r+0x2e>
 8006cec:	6923      	ldr	r3, [r4, #16]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d135      	bne.n	8006d5e <_puts_r+0x9a>
 8006cf2:	4621      	mov	r1, r4
 8006cf4:	4628      	mov	r0, r5
 8006cf6:	f000 f8c5 	bl	8006e84 <__swsetup_r>
 8006cfa:	b380      	cbz	r0, 8006d5e <_puts_r+0x9a>
 8006cfc:	f04f 35ff 	mov.w	r5, #4294967295
 8006d00:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006d02:	07da      	lsls	r2, r3, #31
 8006d04:	d405      	bmi.n	8006d12 <_puts_r+0x4e>
 8006d06:	89a3      	ldrh	r3, [r4, #12]
 8006d08:	059b      	lsls	r3, r3, #22
 8006d0a:	d402      	bmi.n	8006d12 <_puts_r+0x4e>
 8006d0c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d0e:	f000 f989 	bl	8007024 <__retarget_lock_release_recursive>
 8006d12:	4628      	mov	r0, r5
 8006d14:	bd70      	pop	{r4, r5, r6, pc}
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	da04      	bge.n	8006d24 <_puts_r+0x60>
 8006d1a:	69a2      	ldr	r2, [r4, #24]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	dc17      	bgt.n	8006d50 <_puts_r+0x8c>
 8006d20:	290a      	cmp	r1, #10
 8006d22:	d015      	beq.n	8006d50 <_puts_r+0x8c>
 8006d24:	6823      	ldr	r3, [r4, #0]
 8006d26:	1c5a      	adds	r2, r3, #1
 8006d28:	6022      	str	r2, [r4, #0]
 8006d2a:	7019      	strb	r1, [r3, #0]
 8006d2c:	68a3      	ldr	r3, [r4, #8]
 8006d2e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d32:	3b01      	subs	r3, #1
 8006d34:	60a3      	str	r3, [r4, #8]
 8006d36:	2900      	cmp	r1, #0
 8006d38:	d1ed      	bne.n	8006d16 <_puts_r+0x52>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	da11      	bge.n	8006d62 <_puts_r+0x9e>
 8006d3e:	4622      	mov	r2, r4
 8006d40:	210a      	movs	r1, #10
 8006d42:	4628      	mov	r0, r5
 8006d44:	f000 f85f 	bl	8006e06 <__swbuf_r>
 8006d48:	3001      	adds	r0, #1
 8006d4a:	d0d7      	beq.n	8006cfc <_puts_r+0x38>
 8006d4c:	250a      	movs	r5, #10
 8006d4e:	e7d7      	b.n	8006d00 <_puts_r+0x3c>
 8006d50:	4622      	mov	r2, r4
 8006d52:	4628      	mov	r0, r5
 8006d54:	f000 f857 	bl	8006e06 <__swbuf_r>
 8006d58:	3001      	adds	r0, #1
 8006d5a:	d1e7      	bne.n	8006d2c <_puts_r+0x68>
 8006d5c:	e7ce      	b.n	8006cfc <_puts_r+0x38>
 8006d5e:	3e01      	subs	r6, #1
 8006d60:	e7e4      	b.n	8006d2c <_puts_r+0x68>
 8006d62:	6823      	ldr	r3, [r4, #0]
 8006d64:	1c5a      	adds	r2, r3, #1
 8006d66:	6022      	str	r2, [r4, #0]
 8006d68:	220a      	movs	r2, #10
 8006d6a:	701a      	strb	r2, [r3, #0]
 8006d6c:	e7ee      	b.n	8006d4c <_puts_r+0x88>
	...

08006d70 <puts>:
 8006d70:	4b02      	ldr	r3, [pc, #8]	@ (8006d7c <puts+0xc>)
 8006d72:	4601      	mov	r1, r0
 8006d74:	6818      	ldr	r0, [r3, #0]
 8006d76:	f7ff bfa5 	b.w	8006cc4 <_puts_r>
 8006d7a:	bf00      	nop
 8006d7c:	20000030 	.word	0x20000030

08006d80 <__sread>:
 8006d80:	b510      	push	{r4, lr}
 8006d82:	460c      	mov	r4, r1
 8006d84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d88:	f000 f8fc 	bl	8006f84 <_read_r>
 8006d8c:	2800      	cmp	r0, #0
 8006d8e:	bfab      	itete	ge
 8006d90:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d92:	89a3      	ldrhlt	r3, [r4, #12]
 8006d94:	181b      	addge	r3, r3, r0
 8006d96:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d9a:	bfac      	ite	ge
 8006d9c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d9e:	81a3      	strhlt	r3, [r4, #12]
 8006da0:	bd10      	pop	{r4, pc}

08006da2 <__swrite>:
 8006da2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da6:	461f      	mov	r7, r3
 8006da8:	898b      	ldrh	r3, [r1, #12]
 8006daa:	05db      	lsls	r3, r3, #23
 8006dac:	4605      	mov	r5, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4616      	mov	r6, r2
 8006db2:	d505      	bpl.n	8006dc0 <__swrite+0x1e>
 8006db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006db8:	2302      	movs	r3, #2
 8006dba:	2200      	movs	r2, #0
 8006dbc:	f000 f8d0 	bl	8006f60 <_lseek_r>
 8006dc0:	89a3      	ldrh	r3, [r4, #12]
 8006dc2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dc6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	4632      	mov	r2, r6
 8006dce:	463b      	mov	r3, r7
 8006dd0:	4628      	mov	r0, r5
 8006dd2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dd6:	f000 b8e7 	b.w	8006fa8 <_write_r>

08006dda <__sseek>:
 8006dda:	b510      	push	{r4, lr}
 8006ddc:	460c      	mov	r4, r1
 8006dde:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de2:	f000 f8bd 	bl	8006f60 <_lseek_r>
 8006de6:	1c43      	adds	r3, r0, #1
 8006de8:	89a3      	ldrh	r3, [r4, #12]
 8006dea:	bf15      	itete	ne
 8006dec:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006dee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006df2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006df6:	81a3      	strheq	r3, [r4, #12]
 8006df8:	bf18      	it	ne
 8006dfa:	81a3      	strhne	r3, [r4, #12]
 8006dfc:	bd10      	pop	{r4, pc}

08006dfe <__sclose>:
 8006dfe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006e02:	f000 b89d 	b.w	8006f40 <_close_r>

08006e06 <__swbuf_r>:
 8006e06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e08:	460e      	mov	r6, r1
 8006e0a:	4614      	mov	r4, r2
 8006e0c:	4605      	mov	r5, r0
 8006e0e:	b118      	cbz	r0, 8006e18 <__swbuf_r+0x12>
 8006e10:	6a03      	ldr	r3, [r0, #32]
 8006e12:	b90b      	cbnz	r3, 8006e18 <__swbuf_r+0x12>
 8006e14:	f7ff ff0e 	bl	8006c34 <__sinit>
 8006e18:	69a3      	ldr	r3, [r4, #24]
 8006e1a:	60a3      	str	r3, [r4, #8]
 8006e1c:	89a3      	ldrh	r3, [r4, #12]
 8006e1e:	071a      	lsls	r2, r3, #28
 8006e20:	d501      	bpl.n	8006e26 <__swbuf_r+0x20>
 8006e22:	6923      	ldr	r3, [r4, #16]
 8006e24:	b943      	cbnz	r3, 8006e38 <__swbuf_r+0x32>
 8006e26:	4621      	mov	r1, r4
 8006e28:	4628      	mov	r0, r5
 8006e2a:	f000 f82b 	bl	8006e84 <__swsetup_r>
 8006e2e:	b118      	cbz	r0, 8006e38 <__swbuf_r+0x32>
 8006e30:	f04f 37ff 	mov.w	r7, #4294967295
 8006e34:	4638      	mov	r0, r7
 8006e36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e38:	6823      	ldr	r3, [r4, #0]
 8006e3a:	6922      	ldr	r2, [r4, #16]
 8006e3c:	1a98      	subs	r0, r3, r2
 8006e3e:	6963      	ldr	r3, [r4, #20]
 8006e40:	b2f6      	uxtb	r6, r6
 8006e42:	4283      	cmp	r3, r0
 8006e44:	4637      	mov	r7, r6
 8006e46:	dc05      	bgt.n	8006e54 <__swbuf_r+0x4e>
 8006e48:	4621      	mov	r1, r4
 8006e4a:	4628      	mov	r0, r5
 8006e4c:	f000 fd38 	bl	80078c0 <_fflush_r>
 8006e50:	2800      	cmp	r0, #0
 8006e52:	d1ed      	bne.n	8006e30 <__swbuf_r+0x2a>
 8006e54:	68a3      	ldr	r3, [r4, #8]
 8006e56:	3b01      	subs	r3, #1
 8006e58:	60a3      	str	r3, [r4, #8]
 8006e5a:	6823      	ldr	r3, [r4, #0]
 8006e5c:	1c5a      	adds	r2, r3, #1
 8006e5e:	6022      	str	r2, [r4, #0]
 8006e60:	701e      	strb	r6, [r3, #0]
 8006e62:	6962      	ldr	r2, [r4, #20]
 8006e64:	1c43      	adds	r3, r0, #1
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d004      	beq.n	8006e74 <__swbuf_r+0x6e>
 8006e6a:	89a3      	ldrh	r3, [r4, #12]
 8006e6c:	07db      	lsls	r3, r3, #31
 8006e6e:	d5e1      	bpl.n	8006e34 <__swbuf_r+0x2e>
 8006e70:	2e0a      	cmp	r6, #10
 8006e72:	d1df      	bne.n	8006e34 <__swbuf_r+0x2e>
 8006e74:	4621      	mov	r1, r4
 8006e76:	4628      	mov	r0, r5
 8006e78:	f000 fd22 	bl	80078c0 <_fflush_r>
 8006e7c:	2800      	cmp	r0, #0
 8006e7e:	d0d9      	beq.n	8006e34 <__swbuf_r+0x2e>
 8006e80:	e7d6      	b.n	8006e30 <__swbuf_r+0x2a>
	...

08006e84 <__swsetup_r>:
 8006e84:	b538      	push	{r3, r4, r5, lr}
 8006e86:	4b29      	ldr	r3, [pc, #164]	@ (8006f2c <__swsetup_r+0xa8>)
 8006e88:	4605      	mov	r5, r0
 8006e8a:	6818      	ldr	r0, [r3, #0]
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	b118      	cbz	r0, 8006e98 <__swsetup_r+0x14>
 8006e90:	6a03      	ldr	r3, [r0, #32]
 8006e92:	b90b      	cbnz	r3, 8006e98 <__swsetup_r+0x14>
 8006e94:	f7ff fece 	bl	8006c34 <__sinit>
 8006e98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e9c:	0719      	lsls	r1, r3, #28
 8006e9e:	d422      	bmi.n	8006ee6 <__swsetup_r+0x62>
 8006ea0:	06da      	lsls	r2, r3, #27
 8006ea2:	d407      	bmi.n	8006eb4 <__swsetup_r+0x30>
 8006ea4:	2209      	movs	r2, #9
 8006ea6:	602a      	str	r2, [r5, #0]
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006eac:	81a3      	strh	r3, [r4, #12]
 8006eae:	f04f 30ff 	mov.w	r0, #4294967295
 8006eb2:	e033      	b.n	8006f1c <__swsetup_r+0x98>
 8006eb4:	0758      	lsls	r0, r3, #29
 8006eb6:	d512      	bpl.n	8006ede <__swsetup_r+0x5a>
 8006eb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eba:	b141      	cbz	r1, 8006ece <__swsetup_r+0x4a>
 8006ebc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006ec0:	4299      	cmp	r1, r3
 8006ec2:	d002      	beq.n	8006eca <__swsetup_r+0x46>
 8006ec4:	4628      	mov	r0, r5
 8006ec6:	f000 f8af 	bl	8007028 <_free_r>
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ece:	89a3      	ldrh	r3, [r4, #12]
 8006ed0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ed4:	81a3      	strh	r3, [r4, #12]
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6063      	str	r3, [r4, #4]
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	6023      	str	r3, [r4, #0]
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f043 0308 	orr.w	r3, r3, #8
 8006ee4:	81a3      	strh	r3, [r4, #12]
 8006ee6:	6923      	ldr	r3, [r4, #16]
 8006ee8:	b94b      	cbnz	r3, 8006efe <__swsetup_r+0x7a>
 8006eea:	89a3      	ldrh	r3, [r4, #12]
 8006eec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ef0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ef4:	d003      	beq.n	8006efe <__swsetup_r+0x7a>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4628      	mov	r0, r5
 8006efa:	f000 fd2f 	bl	800795c <__smakebuf_r>
 8006efe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f02:	f013 0201 	ands.w	r2, r3, #1
 8006f06:	d00a      	beq.n	8006f1e <__swsetup_r+0x9a>
 8006f08:	2200      	movs	r2, #0
 8006f0a:	60a2      	str	r2, [r4, #8]
 8006f0c:	6962      	ldr	r2, [r4, #20]
 8006f0e:	4252      	negs	r2, r2
 8006f10:	61a2      	str	r2, [r4, #24]
 8006f12:	6922      	ldr	r2, [r4, #16]
 8006f14:	b942      	cbnz	r2, 8006f28 <__swsetup_r+0xa4>
 8006f16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f1a:	d1c5      	bne.n	8006ea8 <__swsetup_r+0x24>
 8006f1c:	bd38      	pop	{r3, r4, r5, pc}
 8006f1e:	0799      	lsls	r1, r3, #30
 8006f20:	bf58      	it	pl
 8006f22:	6962      	ldrpl	r2, [r4, #20]
 8006f24:	60a2      	str	r2, [r4, #8]
 8006f26:	e7f4      	b.n	8006f12 <__swsetup_r+0x8e>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	e7f7      	b.n	8006f1c <__swsetup_r+0x98>
 8006f2c:	20000030 	.word	0x20000030

08006f30 <memset>:
 8006f30:	4402      	add	r2, r0
 8006f32:	4603      	mov	r3, r0
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d100      	bne.n	8006f3a <memset+0xa>
 8006f38:	4770      	bx	lr
 8006f3a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f3e:	e7f9      	b.n	8006f34 <memset+0x4>

08006f40 <_close_r>:
 8006f40:	b538      	push	{r3, r4, r5, lr}
 8006f42:	4d06      	ldr	r5, [pc, #24]	@ (8006f5c <_close_r+0x1c>)
 8006f44:	2300      	movs	r3, #0
 8006f46:	4604      	mov	r4, r0
 8006f48:	4608      	mov	r0, r1
 8006f4a:	602b      	str	r3, [r5, #0]
 8006f4c:	f7fa feab 	bl	8001ca6 <_close>
 8006f50:	1c43      	adds	r3, r0, #1
 8006f52:	d102      	bne.n	8006f5a <_close_r+0x1a>
 8006f54:	682b      	ldr	r3, [r5, #0]
 8006f56:	b103      	cbz	r3, 8006f5a <_close_r+0x1a>
 8006f58:	6023      	str	r3, [r4, #0]
 8006f5a:	bd38      	pop	{r3, r4, r5, pc}
 8006f5c:	2000047c 	.word	0x2000047c

08006f60 <_lseek_r>:
 8006f60:	b538      	push	{r3, r4, r5, lr}
 8006f62:	4d07      	ldr	r5, [pc, #28]	@ (8006f80 <_lseek_r+0x20>)
 8006f64:	4604      	mov	r4, r0
 8006f66:	4608      	mov	r0, r1
 8006f68:	4611      	mov	r1, r2
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	602a      	str	r2, [r5, #0]
 8006f6e:	461a      	mov	r2, r3
 8006f70:	f7fa fec0 	bl	8001cf4 <_lseek>
 8006f74:	1c43      	adds	r3, r0, #1
 8006f76:	d102      	bne.n	8006f7e <_lseek_r+0x1e>
 8006f78:	682b      	ldr	r3, [r5, #0]
 8006f7a:	b103      	cbz	r3, 8006f7e <_lseek_r+0x1e>
 8006f7c:	6023      	str	r3, [r4, #0]
 8006f7e:	bd38      	pop	{r3, r4, r5, pc}
 8006f80:	2000047c 	.word	0x2000047c

08006f84 <_read_r>:
 8006f84:	b538      	push	{r3, r4, r5, lr}
 8006f86:	4d07      	ldr	r5, [pc, #28]	@ (8006fa4 <_read_r+0x20>)
 8006f88:	4604      	mov	r4, r0
 8006f8a:	4608      	mov	r0, r1
 8006f8c:	4611      	mov	r1, r2
 8006f8e:	2200      	movs	r2, #0
 8006f90:	602a      	str	r2, [r5, #0]
 8006f92:	461a      	mov	r2, r3
 8006f94:	f7fa fe4e 	bl	8001c34 <_read>
 8006f98:	1c43      	adds	r3, r0, #1
 8006f9a:	d102      	bne.n	8006fa2 <_read_r+0x1e>
 8006f9c:	682b      	ldr	r3, [r5, #0]
 8006f9e:	b103      	cbz	r3, 8006fa2 <_read_r+0x1e>
 8006fa0:	6023      	str	r3, [r4, #0]
 8006fa2:	bd38      	pop	{r3, r4, r5, pc}
 8006fa4:	2000047c 	.word	0x2000047c

08006fa8 <_write_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d07      	ldr	r5, [pc, #28]	@ (8006fc8 <_write_r+0x20>)
 8006fac:	4604      	mov	r4, r0
 8006fae:	4608      	mov	r0, r1
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	602a      	str	r2, [r5, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	f7fa fe59 	bl	8001c6e <_write>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_write_r+0x1e>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_write_r+0x1e>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	2000047c 	.word	0x2000047c

08006fcc <__errno>:
 8006fcc:	4b01      	ldr	r3, [pc, #4]	@ (8006fd4 <__errno+0x8>)
 8006fce:	6818      	ldr	r0, [r3, #0]
 8006fd0:	4770      	bx	lr
 8006fd2:	bf00      	nop
 8006fd4:	20000030 	.word	0x20000030

08006fd8 <__libc_init_array>:
 8006fd8:	b570      	push	{r4, r5, r6, lr}
 8006fda:	4d0d      	ldr	r5, [pc, #52]	@ (8007010 <__libc_init_array+0x38>)
 8006fdc:	4c0d      	ldr	r4, [pc, #52]	@ (8007014 <__libc_init_array+0x3c>)
 8006fde:	1b64      	subs	r4, r4, r5
 8006fe0:	10a4      	asrs	r4, r4, #2
 8006fe2:	2600      	movs	r6, #0
 8006fe4:	42a6      	cmp	r6, r4
 8006fe6:	d109      	bne.n	8006ffc <__libc_init_array+0x24>
 8006fe8:	4d0b      	ldr	r5, [pc, #44]	@ (8007018 <__libc_init_array+0x40>)
 8006fea:	4c0c      	ldr	r4, [pc, #48]	@ (800701c <__libc_init_array+0x44>)
 8006fec:	f000 fd24 	bl	8007a38 <_init>
 8006ff0:	1b64      	subs	r4, r4, r5
 8006ff2:	10a4      	asrs	r4, r4, #2
 8006ff4:	2600      	movs	r6, #0
 8006ff6:	42a6      	cmp	r6, r4
 8006ff8:	d105      	bne.n	8007006 <__libc_init_array+0x2e>
 8006ffa:	bd70      	pop	{r4, r5, r6, pc}
 8006ffc:	f855 3b04 	ldr.w	r3, [r5], #4
 8007000:	4798      	blx	r3
 8007002:	3601      	adds	r6, #1
 8007004:	e7ee      	b.n	8006fe4 <__libc_init_array+0xc>
 8007006:	f855 3b04 	ldr.w	r3, [r5], #4
 800700a:	4798      	blx	r3
 800700c:	3601      	adds	r6, #1
 800700e:	e7f2      	b.n	8006ff6 <__libc_init_array+0x1e>
 8007010:	08008064 	.word	0x08008064
 8007014:	08008064 	.word	0x08008064
 8007018:	08008064 	.word	0x08008064
 800701c:	08008068 	.word	0x08008068

08007020 <__retarget_lock_init_recursive>:
 8007020:	4770      	bx	lr

08007022 <__retarget_lock_acquire_recursive>:
 8007022:	4770      	bx	lr

08007024 <__retarget_lock_release_recursive>:
 8007024:	4770      	bx	lr
	...

08007028 <_free_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	4605      	mov	r5, r0
 800702c:	2900      	cmp	r1, #0
 800702e:	d041      	beq.n	80070b4 <_free_r+0x8c>
 8007030:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007034:	1f0c      	subs	r4, r1, #4
 8007036:	2b00      	cmp	r3, #0
 8007038:	bfb8      	it	lt
 800703a:	18e4      	addlt	r4, r4, r3
 800703c:	f000 f8e0 	bl	8007200 <__malloc_lock>
 8007040:	4a1d      	ldr	r2, [pc, #116]	@ (80070b8 <_free_r+0x90>)
 8007042:	6813      	ldr	r3, [r2, #0]
 8007044:	b933      	cbnz	r3, 8007054 <_free_r+0x2c>
 8007046:	6063      	str	r3, [r4, #4]
 8007048:	6014      	str	r4, [r2, #0]
 800704a:	4628      	mov	r0, r5
 800704c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007050:	f000 b8dc 	b.w	800720c <__malloc_unlock>
 8007054:	42a3      	cmp	r3, r4
 8007056:	d908      	bls.n	800706a <_free_r+0x42>
 8007058:	6820      	ldr	r0, [r4, #0]
 800705a:	1821      	adds	r1, r4, r0
 800705c:	428b      	cmp	r3, r1
 800705e:	bf01      	itttt	eq
 8007060:	6819      	ldreq	r1, [r3, #0]
 8007062:	685b      	ldreq	r3, [r3, #4]
 8007064:	1809      	addeq	r1, r1, r0
 8007066:	6021      	streq	r1, [r4, #0]
 8007068:	e7ed      	b.n	8007046 <_free_r+0x1e>
 800706a:	461a      	mov	r2, r3
 800706c:	685b      	ldr	r3, [r3, #4]
 800706e:	b10b      	cbz	r3, 8007074 <_free_r+0x4c>
 8007070:	42a3      	cmp	r3, r4
 8007072:	d9fa      	bls.n	800706a <_free_r+0x42>
 8007074:	6811      	ldr	r1, [r2, #0]
 8007076:	1850      	adds	r0, r2, r1
 8007078:	42a0      	cmp	r0, r4
 800707a:	d10b      	bne.n	8007094 <_free_r+0x6c>
 800707c:	6820      	ldr	r0, [r4, #0]
 800707e:	4401      	add	r1, r0
 8007080:	1850      	adds	r0, r2, r1
 8007082:	4283      	cmp	r3, r0
 8007084:	6011      	str	r1, [r2, #0]
 8007086:	d1e0      	bne.n	800704a <_free_r+0x22>
 8007088:	6818      	ldr	r0, [r3, #0]
 800708a:	685b      	ldr	r3, [r3, #4]
 800708c:	6053      	str	r3, [r2, #4]
 800708e:	4408      	add	r0, r1
 8007090:	6010      	str	r0, [r2, #0]
 8007092:	e7da      	b.n	800704a <_free_r+0x22>
 8007094:	d902      	bls.n	800709c <_free_r+0x74>
 8007096:	230c      	movs	r3, #12
 8007098:	602b      	str	r3, [r5, #0]
 800709a:	e7d6      	b.n	800704a <_free_r+0x22>
 800709c:	6820      	ldr	r0, [r4, #0]
 800709e:	1821      	adds	r1, r4, r0
 80070a0:	428b      	cmp	r3, r1
 80070a2:	bf04      	itt	eq
 80070a4:	6819      	ldreq	r1, [r3, #0]
 80070a6:	685b      	ldreq	r3, [r3, #4]
 80070a8:	6063      	str	r3, [r4, #4]
 80070aa:	bf04      	itt	eq
 80070ac:	1809      	addeq	r1, r1, r0
 80070ae:	6021      	streq	r1, [r4, #0]
 80070b0:	6054      	str	r4, [r2, #4]
 80070b2:	e7ca      	b.n	800704a <_free_r+0x22>
 80070b4:	bd38      	pop	{r3, r4, r5, pc}
 80070b6:	bf00      	nop
 80070b8:	20000488 	.word	0x20000488

080070bc <sbrk_aligned>:
 80070bc:	b570      	push	{r4, r5, r6, lr}
 80070be:	4e0f      	ldr	r6, [pc, #60]	@ (80070fc <sbrk_aligned+0x40>)
 80070c0:	460c      	mov	r4, r1
 80070c2:	6831      	ldr	r1, [r6, #0]
 80070c4:	4605      	mov	r5, r0
 80070c6:	b911      	cbnz	r1, 80070ce <sbrk_aligned+0x12>
 80070c8:	f000 fca6 	bl	8007a18 <_sbrk_r>
 80070cc:	6030      	str	r0, [r6, #0]
 80070ce:	4621      	mov	r1, r4
 80070d0:	4628      	mov	r0, r5
 80070d2:	f000 fca1 	bl	8007a18 <_sbrk_r>
 80070d6:	1c43      	adds	r3, r0, #1
 80070d8:	d103      	bne.n	80070e2 <sbrk_aligned+0x26>
 80070da:	f04f 34ff 	mov.w	r4, #4294967295
 80070de:	4620      	mov	r0, r4
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	1cc4      	adds	r4, r0, #3
 80070e4:	f024 0403 	bic.w	r4, r4, #3
 80070e8:	42a0      	cmp	r0, r4
 80070ea:	d0f8      	beq.n	80070de <sbrk_aligned+0x22>
 80070ec:	1a21      	subs	r1, r4, r0
 80070ee:	4628      	mov	r0, r5
 80070f0:	f000 fc92 	bl	8007a18 <_sbrk_r>
 80070f4:	3001      	adds	r0, #1
 80070f6:	d1f2      	bne.n	80070de <sbrk_aligned+0x22>
 80070f8:	e7ef      	b.n	80070da <sbrk_aligned+0x1e>
 80070fa:	bf00      	nop
 80070fc:	20000484 	.word	0x20000484

08007100 <_malloc_r>:
 8007100:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007104:	1ccd      	adds	r5, r1, #3
 8007106:	f025 0503 	bic.w	r5, r5, #3
 800710a:	3508      	adds	r5, #8
 800710c:	2d0c      	cmp	r5, #12
 800710e:	bf38      	it	cc
 8007110:	250c      	movcc	r5, #12
 8007112:	2d00      	cmp	r5, #0
 8007114:	4606      	mov	r6, r0
 8007116:	db01      	blt.n	800711c <_malloc_r+0x1c>
 8007118:	42a9      	cmp	r1, r5
 800711a:	d904      	bls.n	8007126 <_malloc_r+0x26>
 800711c:	230c      	movs	r3, #12
 800711e:	6033      	str	r3, [r6, #0]
 8007120:	2000      	movs	r0, #0
 8007122:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007126:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071fc <_malloc_r+0xfc>
 800712a:	f000 f869 	bl	8007200 <__malloc_lock>
 800712e:	f8d8 3000 	ldr.w	r3, [r8]
 8007132:	461c      	mov	r4, r3
 8007134:	bb44      	cbnz	r4, 8007188 <_malloc_r+0x88>
 8007136:	4629      	mov	r1, r5
 8007138:	4630      	mov	r0, r6
 800713a:	f7ff ffbf 	bl	80070bc <sbrk_aligned>
 800713e:	1c43      	adds	r3, r0, #1
 8007140:	4604      	mov	r4, r0
 8007142:	d158      	bne.n	80071f6 <_malloc_r+0xf6>
 8007144:	f8d8 4000 	ldr.w	r4, [r8]
 8007148:	4627      	mov	r7, r4
 800714a:	2f00      	cmp	r7, #0
 800714c:	d143      	bne.n	80071d6 <_malloc_r+0xd6>
 800714e:	2c00      	cmp	r4, #0
 8007150:	d04b      	beq.n	80071ea <_malloc_r+0xea>
 8007152:	6823      	ldr	r3, [r4, #0]
 8007154:	4639      	mov	r1, r7
 8007156:	4630      	mov	r0, r6
 8007158:	eb04 0903 	add.w	r9, r4, r3
 800715c:	f000 fc5c 	bl	8007a18 <_sbrk_r>
 8007160:	4581      	cmp	r9, r0
 8007162:	d142      	bne.n	80071ea <_malloc_r+0xea>
 8007164:	6821      	ldr	r1, [r4, #0]
 8007166:	1a6d      	subs	r5, r5, r1
 8007168:	4629      	mov	r1, r5
 800716a:	4630      	mov	r0, r6
 800716c:	f7ff ffa6 	bl	80070bc <sbrk_aligned>
 8007170:	3001      	adds	r0, #1
 8007172:	d03a      	beq.n	80071ea <_malloc_r+0xea>
 8007174:	6823      	ldr	r3, [r4, #0]
 8007176:	442b      	add	r3, r5
 8007178:	6023      	str	r3, [r4, #0]
 800717a:	f8d8 3000 	ldr.w	r3, [r8]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	bb62      	cbnz	r2, 80071dc <_malloc_r+0xdc>
 8007182:	f8c8 7000 	str.w	r7, [r8]
 8007186:	e00f      	b.n	80071a8 <_malloc_r+0xa8>
 8007188:	6822      	ldr	r2, [r4, #0]
 800718a:	1b52      	subs	r2, r2, r5
 800718c:	d420      	bmi.n	80071d0 <_malloc_r+0xd0>
 800718e:	2a0b      	cmp	r2, #11
 8007190:	d917      	bls.n	80071c2 <_malloc_r+0xc2>
 8007192:	1961      	adds	r1, r4, r5
 8007194:	42a3      	cmp	r3, r4
 8007196:	6025      	str	r5, [r4, #0]
 8007198:	bf18      	it	ne
 800719a:	6059      	strne	r1, [r3, #4]
 800719c:	6863      	ldr	r3, [r4, #4]
 800719e:	bf08      	it	eq
 80071a0:	f8c8 1000 	streq.w	r1, [r8]
 80071a4:	5162      	str	r2, [r4, r5]
 80071a6:	604b      	str	r3, [r1, #4]
 80071a8:	4630      	mov	r0, r6
 80071aa:	f000 f82f 	bl	800720c <__malloc_unlock>
 80071ae:	f104 000b 	add.w	r0, r4, #11
 80071b2:	1d23      	adds	r3, r4, #4
 80071b4:	f020 0007 	bic.w	r0, r0, #7
 80071b8:	1ac2      	subs	r2, r0, r3
 80071ba:	bf1c      	itt	ne
 80071bc:	1a1b      	subne	r3, r3, r0
 80071be:	50a3      	strne	r3, [r4, r2]
 80071c0:	e7af      	b.n	8007122 <_malloc_r+0x22>
 80071c2:	6862      	ldr	r2, [r4, #4]
 80071c4:	42a3      	cmp	r3, r4
 80071c6:	bf0c      	ite	eq
 80071c8:	f8c8 2000 	streq.w	r2, [r8]
 80071cc:	605a      	strne	r2, [r3, #4]
 80071ce:	e7eb      	b.n	80071a8 <_malloc_r+0xa8>
 80071d0:	4623      	mov	r3, r4
 80071d2:	6864      	ldr	r4, [r4, #4]
 80071d4:	e7ae      	b.n	8007134 <_malloc_r+0x34>
 80071d6:	463c      	mov	r4, r7
 80071d8:	687f      	ldr	r7, [r7, #4]
 80071da:	e7b6      	b.n	800714a <_malloc_r+0x4a>
 80071dc:	461a      	mov	r2, r3
 80071de:	685b      	ldr	r3, [r3, #4]
 80071e0:	42a3      	cmp	r3, r4
 80071e2:	d1fb      	bne.n	80071dc <_malloc_r+0xdc>
 80071e4:	2300      	movs	r3, #0
 80071e6:	6053      	str	r3, [r2, #4]
 80071e8:	e7de      	b.n	80071a8 <_malloc_r+0xa8>
 80071ea:	230c      	movs	r3, #12
 80071ec:	6033      	str	r3, [r6, #0]
 80071ee:	4630      	mov	r0, r6
 80071f0:	f000 f80c 	bl	800720c <__malloc_unlock>
 80071f4:	e794      	b.n	8007120 <_malloc_r+0x20>
 80071f6:	6005      	str	r5, [r0, #0]
 80071f8:	e7d6      	b.n	80071a8 <_malloc_r+0xa8>
 80071fa:	bf00      	nop
 80071fc:	20000488 	.word	0x20000488

08007200 <__malloc_lock>:
 8007200:	4801      	ldr	r0, [pc, #4]	@ (8007208 <__malloc_lock+0x8>)
 8007202:	f7ff bf0e 	b.w	8007022 <__retarget_lock_acquire_recursive>
 8007206:	bf00      	nop
 8007208:	20000480 	.word	0x20000480

0800720c <__malloc_unlock>:
 800720c:	4801      	ldr	r0, [pc, #4]	@ (8007214 <__malloc_unlock+0x8>)
 800720e:	f7ff bf09 	b.w	8007024 <__retarget_lock_release_recursive>
 8007212:	bf00      	nop
 8007214:	20000480 	.word	0x20000480

08007218 <__sfputc_r>:
 8007218:	6893      	ldr	r3, [r2, #8]
 800721a:	3b01      	subs	r3, #1
 800721c:	2b00      	cmp	r3, #0
 800721e:	b410      	push	{r4}
 8007220:	6093      	str	r3, [r2, #8]
 8007222:	da08      	bge.n	8007236 <__sfputc_r+0x1e>
 8007224:	6994      	ldr	r4, [r2, #24]
 8007226:	42a3      	cmp	r3, r4
 8007228:	db01      	blt.n	800722e <__sfputc_r+0x16>
 800722a:	290a      	cmp	r1, #10
 800722c:	d103      	bne.n	8007236 <__sfputc_r+0x1e>
 800722e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007232:	f7ff bde8 	b.w	8006e06 <__swbuf_r>
 8007236:	6813      	ldr	r3, [r2, #0]
 8007238:	1c58      	adds	r0, r3, #1
 800723a:	6010      	str	r0, [r2, #0]
 800723c:	7019      	strb	r1, [r3, #0]
 800723e:	4608      	mov	r0, r1
 8007240:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007244:	4770      	bx	lr

08007246 <__sfputs_r>:
 8007246:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007248:	4606      	mov	r6, r0
 800724a:	460f      	mov	r7, r1
 800724c:	4614      	mov	r4, r2
 800724e:	18d5      	adds	r5, r2, r3
 8007250:	42ac      	cmp	r4, r5
 8007252:	d101      	bne.n	8007258 <__sfputs_r+0x12>
 8007254:	2000      	movs	r0, #0
 8007256:	e007      	b.n	8007268 <__sfputs_r+0x22>
 8007258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800725c:	463a      	mov	r2, r7
 800725e:	4630      	mov	r0, r6
 8007260:	f7ff ffda 	bl	8007218 <__sfputc_r>
 8007264:	1c43      	adds	r3, r0, #1
 8007266:	d1f3      	bne.n	8007250 <__sfputs_r+0xa>
 8007268:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800726c <_vfiprintf_r>:
 800726c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007270:	460d      	mov	r5, r1
 8007272:	b09d      	sub	sp, #116	@ 0x74
 8007274:	4614      	mov	r4, r2
 8007276:	4698      	mov	r8, r3
 8007278:	4606      	mov	r6, r0
 800727a:	b118      	cbz	r0, 8007284 <_vfiprintf_r+0x18>
 800727c:	6a03      	ldr	r3, [r0, #32]
 800727e:	b90b      	cbnz	r3, 8007284 <_vfiprintf_r+0x18>
 8007280:	f7ff fcd8 	bl	8006c34 <__sinit>
 8007284:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007286:	07d9      	lsls	r1, r3, #31
 8007288:	d405      	bmi.n	8007296 <_vfiprintf_r+0x2a>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	059a      	lsls	r2, r3, #22
 800728e:	d402      	bmi.n	8007296 <_vfiprintf_r+0x2a>
 8007290:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007292:	f7ff fec6 	bl	8007022 <__retarget_lock_acquire_recursive>
 8007296:	89ab      	ldrh	r3, [r5, #12]
 8007298:	071b      	lsls	r3, r3, #28
 800729a:	d501      	bpl.n	80072a0 <_vfiprintf_r+0x34>
 800729c:	692b      	ldr	r3, [r5, #16]
 800729e:	b99b      	cbnz	r3, 80072c8 <_vfiprintf_r+0x5c>
 80072a0:	4629      	mov	r1, r5
 80072a2:	4630      	mov	r0, r6
 80072a4:	f7ff fdee 	bl	8006e84 <__swsetup_r>
 80072a8:	b170      	cbz	r0, 80072c8 <_vfiprintf_r+0x5c>
 80072aa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072ac:	07dc      	lsls	r4, r3, #31
 80072ae:	d504      	bpl.n	80072ba <_vfiprintf_r+0x4e>
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295
 80072b4:	b01d      	add	sp, #116	@ 0x74
 80072b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ba:	89ab      	ldrh	r3, [r5, #12]
 80072bc:	0598      	lsls	r0, r3, #22
 80072be:	d4f7      	bmi.n	80072b0 <_vfiprintf_r+0x44>
 80072c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072c2:	f7ff feaf 	bl	8007024 <__retarget_lock_release_recursive>
 80072c6:	e7f3      	b.n	80072b0 <_vfiprintf_r+0x44>
 80072c8:	2300      	movs	r3, #0
 80072ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80072cc:	2320      	movs	r3, #32
 80072ce:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072d2:	f8cd 800c 	str.w	r8, [sp, #12]
 80072d6:	2330      	movs	r3, #48	@ 0x30
 80072d8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007488 <_vfiprintf_r+0x21c>
 80072dc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072e0:	f04f 0901 	mov.w	r9, #1
 80072e4:	4623      	mov	r3, r4
 80072e6:	469a      	mov	sl, r3
 80072e8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072ec:	b10a      	cbz	r2, 80072f2 <_vfiprintf_r+0x86>
 80072ee:	2a25      	cmp	r2, #37	@ 0x25
 80072f0:	d1f9      	bne.n	80072e6 <_vfiprintf_r+0x7a>
 80072f2:	ebba 0b04 	subs.w	fp, sl, r4
 80072f6:	d00b      	beq.n	8007310 <_vfiprintf_r+0xa4>
 80072f8:	465b      	mov	r3, fp
 80072fa:	4622      	mov	r2, r4
 80072fc:	4629      	mov	r1, r5
 80072fe:	4630      	mov	r0, r6
 8007300:	f7ff ffa1 	bl	8007246 <__sfputs_r>
 8007304:	3001      	adds	r0, #1
 8007306:	f000 80a7 	beq.w	8007458 <_vfiprintf_r+0x1ec>
 800730a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800730c:	445a      	add	r2, fp
 800730e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007310:	f89a 3000 	ldrb.w	r3, [sl]
 8007314:	2b00      	cmp	r3, #0
 8007316:	f000 809f 	beq.w	8007458 <_vfiprintf_r+0x1ec>
 800731a:	2300      	movs	r3, #0
 800731c:	f04f 32ff 	mov.w	r2, #4294967295
 8007320:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	9304      	str	r3, [sp, #16]
 800732a:	9307      	str	r3, [sp, #28]
 800732c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007330:	931a      	str	r3, [sp, #104]	@ 0x68
 8007332:	4654      	mov	r4, sl
 8007334:	2205      	movs	r2, #5
 8007336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733a:	4853      	ldr	r0, [pc, #332]	@ (8007488 <_vfiprintf_r+0x21c>)
 800733c:	f7f8 ff70 	bl	8000220 <memchr>
 8007340:	9a04      	ldr	r2, [sp, #16]
 8007342:	b9d8      	cbnz	r0, 800737c <_vfiprintf_r+0x110>
 8007344:	06d1      	lsls	r1, r2, #27
 8007346:	bf44      	itt	mi
 8007348:	2320      	movmi	r3, #32
 800734a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800734e:	0713      	lsls	r3, r2, #28
 8007350:	bf44      	itt	mi
 8007352:	232b      	movmi	r3, #43	@ 0x2b
 8007354:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007358:	f89a 3000 	ldrb.w	r3, [sl]
 800735c:	2b2a      	cmp	r3, #42	@ 0x2a
 800735e:	d015      	beq.n	800738c <_vfiprintf_r+0x120>
 8007360:	9a07      	ldr	r2, [sp, #28]
 8007362:	4654      	mov	r4, sl
 8007364:	2000      	movs	r0, #0
 8007366:	f04f 0c0a 	mov.w	ip, #10
 800736a:	4621      	mov	r1, r4
 800736c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007370:	3b30      	subs	r3, #48	@ 0x30
 8007372:	2b09      	cmp	r3, #9
 8007374:	d94b      	bls.n	800740e <_vfiprintf_r+0x1a2>
 8007376:	b1b0      	cbz	r0, 80073a6 <_vfiprintf_r+0x13a>
 8007378:	9207      	str	r2, [sp, #28]
 800737a:	e014      	b.n	80073a6 <_vfiprintf_r+0x13a>
 800737c:	eba0 0308 	sub.w	r3, r0, r8
 8007380:	fa09 f303 	lsl.w	r3, r9, r3
 8007384:	4313      	orrs	r3, r2
 8007386:	9304      	str	r3, [sp, #16]
 8007388:	46a2      	mov	sl, r4
 800738a:	e7d2      	b.n	8007332 <_vfiprintf_r+0xc6>
 800738c:	9b03      	ldr	r3, [sp, #12]
 800738e:	1d19      	adds	r1, r3, #4
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	9103      	str	r1, [sp, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	bfbb      	ittet	lt
 8007398:	425b      	neglt	r3, r3
 800739a:	f042 0202 	orrlt.w	r2, r2, #2
 800739e:	9307      	strge	r3, [sp, #28]
 80073a0:	9307      	strlt	r3, [sp, #28]
 80073a2:	bfb8      	it	lt
 80073a4:	9204      	strlt	r2, [sp, #16]
 80073a6:	7823      	ldrb	r3, [r4, #0]
 80073a8:	2b2e      	cmp	r3, #46	@ 0x2e
 80073aa:	d10a      	bne.n	80073c2 <_vfiprintf_r+0x156>
 80073ac:	7863      	ldrb	r3, [r4, #1]
 80073ae:	2b2a      	cmp	r3, #42	@ 0x2a
 80073b0:	d132      	bne.n	8007418 <_vfiprintf_r+0x1ac>
 80073b2:	9b03      	ldr	r3, [sp, #12]
 80073b4:	1d1a      	adds	r2, r3, #4
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	9203      	str	r2, [sp, #12]
 80073ba:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073be:	3402      	adds	r4, #2
 80073c0:	9305      	str	r3, [sp, #20]
 80073c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007498 <_vfiprintf_r+0x22c>
 80073c6:	7821      	ldrb	r1, [r4, #0]
 80073c8:	2203      	movs	r2, #3
 80073ca:	4650      	mov	r0, sl
 80073cc:	f7f8 ff28 	bl	8000220 <memchr>
 80073d0:	b138      	cbz	r0, 80073e2 <_vfiprintf_r+0x176>
 80073d2:	9b04      	ldr	r3, [sp, #16]
 80073d4:	eba0 000a 	sub.w	r0, r0, sl
 80073d8:	2240      	movs	r2, #64	@ 0x40
 80073da:	4082      	lsls	r2, r0
 80073dc:	4313      	orrs	r3, r2
 80073de:	3401      	adds	r4, #1
 80073e0:	9304      	str	r3, [sp, #16]
 80073e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073e6:	4829      	ldr	r0, [pc, #164]	@ (800748c <_vfiprintf_r+0x220>)
 80073e8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073ec:	2206      	movs	r2, #6
 80073ee:	f7f8 ff17 	bl	8000220 <memchr>
 80073f2:	2800      	cmp	r0, #0
 80073f4:	d03f      	beq.n	8007476 <_vfiprintf_r+0x20a>
 80073f6:	4b26      	ldr	r3, [pc, #152]	@ (8007490 <_vfiprintf_r+0x224>)
 80073f8:	bb1b      	cbnz	r3, 8007442 <_vfiprintf_r+0x1d6>
 80073fa:	9b03      	ldr	r3, [sp, #12]
 80073fc:	3307      	adds	r3, #7
 80073fe:	f023 0307 	bic.w	r3, r3, #7
 8007402:	3308      	adds	r3, #8
 8007404:	9303      	str	r3, [sp, #12]
 8007406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007408:	443b      	add	r3, r7
 800740a:	9309      	str	r3, [sp, #36]	@ 0x24
 800740c:	e76a      	b.n	80072e4 <_vfiprintf_r+0x78>
 800740e:	fb0c 3202 	mla	r2, ip, r2, r3
 8007412:	460c      	mov	r4, r1
 8007414:	2001      	movs	r0, #1
 8007416:	e7a8      	b.n	800736a <_vfiprintf_r+0xfe>
 8007418:	2300      	movs	r3, #0
 800741a:	3401      	adds	r4, #1
 800741c:	9305      	str	r3, [sp, #20]
 800741e:	4619      	mov	r1, r3
 8007420:	f04f 0c0a 	mov.w	ip, #10
 8007424:	4620      	mov	r0, r4
 8007426:	f810 2b01 	ldrb.w	r2, [r0], #1
 800742a:	3a30      	subs	r2, #48	@ 0x30
 800742c:	2a09      	cmp	r2, #9
 800742e:	d903      	bls.n	8007438 <_vfiprintf_r+0x1cc>
 8007430:	2b00      	cmp	r3, #0
 8007432:	d0c6      	beq.n	80073c2 <_vfiprintf_r+0x156>
 8007434:	9105      	str	r1, [sp, #20]
 8007436:	e7c4      	b.n	80073c2 <_vfiprintf_r+0x156>
 8007438:	fb0c 2101 	mla	r1, ip, r1, r2
 800743c:	4604      	mov	r4, r0
 800743e:	2301      	movs	r3, #1
 8007440:	e7f0      	b.n	8007424 <_vfiprintf_r+0x1b8>
 8007442:	ab03      	add	r3, sp, #12
 8007444:	9300      	str	r3, [sp, #0]
 8007446:	462a      	mov	r2, r5
 8007448:	4b12      	ldr	r3, [pc, #72]	@ (8007494 <_vfiprintf_r+0x228>)
 800744a:	a904      	add	r1, sp, #16
 800744c:	4630      	mov	r0, r6
 800744e:	f3af 8000 	nop.w
 8007452:	4607      	mov	r7, r0
 8007454:	1c78      	adds	r0, r7, #1
 8007456:	d1d6      	bne.n	8007406 <_vfiprintf_r+0x19a>
 8007458:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800745a:	07d9      	lsls	r1, r3, #31
 800745c:	d405      	bmi.n	800746a <_vfiprintf_r+0x1fe>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	059a      	lsls	r2, r3, #22
 8007462:	d402      	bmi.n	800746a <_vfiprintf_r+0x1fe>
 8007464:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007466:	f7ff fddd 	bl	8007024 <__retarget_lock_release_recursive>
 800746a:	89ab      	ldrh	r3, [r5, #12]
 800746c:	065b      	lsls	r3, r3, #25
 800746e:	f53f af1f 	bmi.w	80072b0 <_vfiprintf_r+0x44>
 8007472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007474:	e71e      	b.n	80072b4 <_vfiprintf_r+0x48>
 8007476:	ab03      	add	r3, sp, #12
 8007478:	9300      	str	r3, [sp, #0]
 800747a:	462a      	mov	r2, r5
 800747c:	4b05      	ldr	r3, [pc, #20]	@ (8007494 <_vfiprintf_r+0x228>)
 800747e:	a904      	add	r1, sp, #16
 8007480:	4630      	mov	r0, r6
 8007482:	f000 f879 	bl	8007578 <_printf_i>
 8007486:	e7e4      	b.n	8007452 <_vfiprintf_r+0x1e6>
 8007488:	08008028 	.word	0x08008028
 800748c:	08008032 	.word	0x08008032
 8007490:	00000000 	.word	0x00000000
 8007494:	08007247 	.word	0x08007247
 8007498:	0800802e 	.word	0x0800802e

0800749c <_printf_common>:
 800749c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074a0:	4616      	mov	r6, r2
 80074a2:	4698      	mov	r8, r3
 80074a4:	688a      	ldr	r2, [r1, #8]
 80074a6:	690b      	ldr	r3, [r1, #16]
 80074a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074ac:	4293      	cmp	r3, r2
 80074ae:	bfb8      	it	lt
 80074b0:	4613      	movlt	r3, r2
 80074b2:	6033      	str	r3, [r6, #0]
 80074b4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074b8:	4607      	mov	r7, r0
 80074ba:	460c      	mov	r4, r1
 80074bc:	b10a      	cbz	r2, 80074c2 <_printf_common+0x26>
 80074be:	3301      	adds	r3, #1
 80074c0:	6033      	str	r3, [r6, #0]
 80074c2:	6823      	ldr	r3, [r4, #0]
 80074c4:	0699      	lsls	r1, r3, #26
 80074c6:	bf42      	ittt	mi
 80074c8:	6833      	ldrmi	r3, [r6, #0]
 80074ca:	3302      	addmi	r3, #2
 80074cc:	6033      	strmi	r3, [r6, #0]
 80074ce:	6825      	ldr	r5, [r4, #0]
 80074d0:	f015 0506 	ands.w	r5, r5, #6
 80074d4:	d106      	bne.n	80074e4 <_printf_common+0x48>
 80074d6:	f104 0a19 	add.w	sl, r4, #25
 80074da:	68e3      	ldr	r3, [r4, #12]
 80074dc:	6832      	ldr	r2, [r6, #0]
 80074de:	1a9b      	subs	r3, r3, r2
 80074e0:	42ab      	cmp	r3, r5
 80074e2:	dc26      	bgt.n	8007532 <_printf_common+0x96>
 80074e4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074e8:	6822      	ldr	r2, [r4, #0]
 80074ea:	3b00      	subs	r3, #0
 80074ec:	bf18      	it	ne
 80074ee:	2301      	movne	r3, #1
 80074f0:	0692      	lsls	r2, r2, #26
 80074f2:	d42b      	bmi.n	800754c <_printf_common+0xb0>
 80074f4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074f8:	4641      	mov	r1, r8
 80074fa:	4638      	mov	r0, r7
 80074fc:	47c8      	blx	r9
 80074fe:	3001      	adds	r0, #1
 8007500:	d01e      	beq.n	8007540 <_printf_common+0xa4>
 8007502:	6823      	ldr	r3, [r4, #0]
 8007504:	6922      	ldr	r2, [r4, #16]
 8007506:	f003 0306 	and.w	r3, r3, #6
 800750a:	2b04      	cmp	r3, #4
 800750c:	bf02      	ittt	eq
 800750e:	68e5      	ldreq	r5, [r4, #12]
 8007510:	6833      	ldreq	r3, [r6, #0]
 8007512:	1aed      	subeq	r5, r5, r3
 8007514:	68a3      	ldr	r3, [r4, #8]
 8007516:	bf0c      	ite	eq
 8007518:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800751c:	2500      	movne	r5, #0
 800751e:	4293      	cmp	r3, r2
 8007520:	bfc4      	itt	gt
 8007522:	1a9b      	subgt	r3, r3, r2
 8007524:	18ed      	addgt	r5, r5, r3
 8007526:	2600      	movs	r6, #0
 8007528:	341a      	adds	r4, #26
 800752a:	42b5      	cmp	r5, r6
 800752c:	d11a      	bne.n	8007564 <_printf_common+0xc8>
 800752e:	2000      	movs	r0, #0
 8007530:	e008      	b.n	8007544 <_printf_common+0xa8>
 8007532:	2301      	movs	r3, #1
 8007534:	4652      	mov	r2, sl
 8007536:	4641      	mov	r1, r8
 8007538:	4638      	mov	r0, r7
 800753a:	47c8      	blx	r9
 800753c:	3001      	adds	r0, #1
 800753e:	d103      	bne.n	8007548 <_printf_common+0xac>
 8007540:	f04f 30ff 	mov.w	r0, #4294967295
 8007544:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007548:	3501      	adds	r5, #1
 800754a:	e7c6      	b.n	80074da <_printf_common+0x3e>
 800754c:	18e1      	adds	r1, r4, r3
 800754e:	1c5a      	adds	r2, r3, #1
 8007550:	2030      	movs	r0, #48	@ 0x30
 8007552:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007556:	4422      	add	r2, r4
 8007558:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800755c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007560:	3302      	adds	r3, #2
 8007562:	e7c7      	b.n	80074f4 <_printf_common+0x58>
 8007564:	2301      	movs	r3, #1
 8007566:	4622      	mov	r2, r4
 8007568:	4641      	mov	r1, r8
 800756a:	4638      	mov	r0, r7
 800756c:	47c8      	blx	r9
 800756e:	3001      	adds	r0, #1
 8007570:	d0e6      	beq.n	8007540 <_printf_common+0xa4>
 8007572:	3601      	adds	r6, #1
 8007574:	e7d9      	b.n	800752a <_printf_common+0x8e>
	...

08007578 <_printf_i>:
 8007578:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800757c:	7e0f      	ldrb	r7, [r1, #24]
 800757e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007580:	2f78      	cmp	r7, #120	@ 0x78
 8007582:	4691      	mov	r9, r2
 8007584:	4680      	mov	r8, r0
 8007586:	460c      	mov	r4, r1
 8007588:	469a      	mov	sl, r3
 800758a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800758e:	d807      	bhi.n	80075a0 <_printf_i+0x28>
 8007590:	2f62      	cmp	r7, #98	@ 0x62
 8007592:	d80a      	bhi.n	80075aa <_printf_i+0x32>
 8007594:	2f00      	cmp	r7, #0
 8007596:	f000 80d2 	beq.w	800773e <_printf_i+0x1c6>
 800759a:	2f58      	cmp	r7, #88	@ 0x58
 800759c:	f000 80b9 	beq.w	8007712 <_printf_i+0x19a>
 80075a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075a8:	e03a      	b.n	8007620 <_printf_i+0xa8>
 80075aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ae:	2b15      	cmp	r3, #21
 80075b0:	d8f6      	bhi.n	80075a0 <_printf_i+0x28>
 80075b2:	a101      	add	r1, pc, #4	@ (adr r1, 80075b8 <_printf_i+0x40>)
 80075b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075b8:	08007611 	.word	0x08007611
 80075bc:	08007625 	.word	0x08007625
 80075c0:	080075a1 	.word	0x080075a1
 80075c4:	080075a1 	.word	0x080075a1
 80075c8:	080075a1 	.word	0x080075a1
 80075cc:	080075a1 	.word	0x080075a1
 80075d0:	08007625 	.word	0x08007625
 80075d4:	080075a1 	.word	0x080075a1
 80075d8:	080075a1 	.word	0x080075a1
 80075dc:	080075a1 	.word	0x080075a1
 80075e0:	080075a1 	.word	0x080075a1
 80075e4:	08007725 	.word	0x08007725
 80075e8:	0800764f 	.word	0x0800764f
 80075ec:	080076df 	.word	0x080076df
 80075f0:	080075a1 	.word	0x080075a1
 80075f4:	080075a1 	.word	0x080075a1
 80075f8:	08007747 	.word	0x08007747
 80075fc:	080075a1 	.word	0x080075a1
 8007600:	0800764f 	.word	0x0800764f
 8007604:	080075a1 	.word	0x080075a1
 8007608:	080075a1 	.word	0x080075a1
 800760c:	080076e7 	.word	0x080076e7
 8007610:	6833      	ldr	r3, [r6, #0]
 8007612:	1d1a      	adds	r2, r3, #4
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	6032      	str	r2, [r6, #0]
 8007618:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800761c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007620:	2301      	movs	r3, #1
 8007622:	e09d      	b.n	8007760 <_printf_i+0x1e8>
 8007624:	6833      	ldr	r3, [r6, #0]
 8007626:	6820      	ldr	r0, [r4, #0]
 8007628:	1d19      	adds	r1, r3, #4
 800762a:	6031      	str	r1, [r6, #0]
 800762c:	0606      	lsls	r6, r0, #24
 800762e:	d501      	bpl.n	8007634 <_printf_i+0xbc>
 8007630:	681d      	ldr	r5, [r3, #0]
 8007632:	e003      	b.n	800763c <_printf_i+0xc4>
 8007634:	0645      	lsls	r5, r0, #25
 8007636:	d5fb      	bpl.n	8007630 <_printf_i+0xb8>
 8007638:	f9b3 5000 	ldrsh.w	r5, [r3]
 800763c:	2d00      	cmp	r5, #0
 800763e:	da03      	bge.n	8007648 <_printf_i+0xd0>
 8007640:	232d      	movs	r3, #45	@ 0x2d
 8007642:	426d      	negs	r5, r5
 8007644:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007648:	4859      	ldr	r0, [pc, #356]	@ (80077b0 <_printf_i+0x238>)
 800764a:	230a      	movs	r3, #10
 800764c:	e011      	b.n	8007672 <_printf_i+0xfa>
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	6833      	ldr	r3, [r6, #0]
 8007652:	0608      	lsls	r0, r1, #24
 8007654:	f853 5b04 	ldr.w	r5, [r3], #4
 8007658:	d402      	bmi.n	8007660 <_printf_i+0xe8>
 800765a:	0649      	lsls	r1, r1, #25
 800765c:	bf48      	it	mi
 800765e:	b2ad      	uxthmi	r5, r5
 8007660:	2f6f      	cmp	r7, #111	@ 0x6f
 8007662:	4853      	ldr	r0, [pc, #332]	@ (80077b0 <_printf_i+0x238>)
 8007664:	6033      	str	r3, [r6, #0]
 8007666:	bf14      	ite	ne
 8007668:	230a      	movne	r3, #10
 800766a:	2308      	moveq	r3, #8
 800766c:	2100      	movs	r1, #0
 800766e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007672:	6866      	ldr	r6, [r4, #4]
 8007674:	60a6      	str	r6, [r4, #8]
 8007676:	2e00      	cmp	r6, #0
 8007678:	bfa2      	ittt	ge
 800767a:	6821      	ldrge	r1, [r4, #0]
 800767c:	f021 0104 	bicge.w	r1, r1, #4
 8007680:	6021      	strge	r1, [r4, #0]
 8007682:	b90d      	cbnz	r5, 8007688 <_printf_i+0x110>
 8007684:	2e00      	cmp	r6, #0
 8007686:	d04b      	beq.n	8007720 <_printf_i+0x1a8>
 8007688:	4616      	mov	r6, r2
 800768a:	fbb5 f1f3 	udiv	r1, r5, r3
 800768e:	fb03 5711 	mls	r7, r3, r1, r5
 8007692:	5dc7      	ldrb	r7, [r0, r7]
 8007694:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007698:	462f      	mov	r7, r5
 800769a:	42bb      	cmp	r3, r7
 800769c:	460d      	mov	r5, r1
 800769e:	d9f4      	bls.n	800768a <_printf_i+0x112>
 80076a0:	2b08      	cmp	r3, #8
 80076a2:	d10b      	bne.n	80076bc <_printf_i+0x144>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	07df      	lsls	r7, r3, #31
 80076a8:	d508      	bpl.n	80076bc <_printf_i+0x144>
 80076aa:	6923      	ldr	r3, [r4, #16]
 80076ac:	6861      	ldr	r1, [r4, #4]
 80076ae:	4299      	cmp	r1, r3
 80076b0:	bfde      	ittt	le
 80076b2:	2330      	movle	r3, #48	@ 0x30
 80076b4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076b8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076bc:	1b92      	subs	r2, r2, r6
 80076be:	6122      	str	r2, [r4, #16]
 80076c0:	f8cd a000 	str.w	sl, [sp]
 80076c4:	464b      	mov	r3, r9
 80076c6:	aa03      	add	r2, sp, #12
 80076c8:	4621      	mov	r1, r4
 80076ca:	4640      	mov	r0, r8
 80076cc:	f7ff fee6 	bl	800749c <_printf_common>
 80076d0:	3001      	adds	r0, #1
 80076d2:	d14a      	bne.n	800776a <_printf_i+0x1f2>
 80076d4:	f04f 30ff 	mov.w	r0, #4294967295
 80076d8:	b004      	add	sp, #16
 80076da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076de:	6823      	ldr	r3, [r4, #0]
 80076e0:	f043 0320 	orr.w	r3, r3, #32
 80076e4:	6023      	str	r3, [r4, #0]
 80076e6:	4833      	ldr	r0, [pc, #204]	@ (80077b4 <_printf_i+0x23c>)
 80076e8:	2778      	movs	r7, #120	@ 0x78
 80076ea:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	6831      	ldr	r1, [r6, #0]
 80076f2:	061f      	lsls	r7, r3, #24
 80076f4:	f851 5b04 	ldr.w	r5, [r1], #4
 80076f8:	d402      	bmi.n	8007700 <_printf_i+0x188>
 80076fa:	065f      	lsls	r7, r3, #25
 80076fc:	bf48      	it	mi
 80076fe:	b2ad      	uxthmi	r5, r5
 8007700:	6031      	str	r1, [r6, #0]
 8007702:	07d9      	lsls	r1, r3, #31
 8007704:	bf44      	itt	mi
 8007706:	f043 0320 	orrmi.w	r3, r3, #32
 800770a:	6023      	strmi	r3, [r4, #0]
 800770c:	b11d      	cbz	r5, 8007716 <_printf_i+0x19e>
 800770e:	2310      	movs	r3, #16
 8007710:	e7ac      	b.n	800766c <_printf_i+0xf4>
 8007712:	4827      	ldr	r0, [pc, #156]	@ (80077b0 <_printf_i+0x238>)
 8007714:	e7e9      	b.n	80076ea <_printf_i+0x172>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	f023 0320 	bic.w	r3, r3, #32
 800771c:	6023      	str	r3, [r4, #0]
 800771e:	e7f6      	b.n	800770e <_printf_i+0x196>
 8007720:	4616      	mov	r6, r2
 8007722:	e7bd      	b.n	80076a0 <_printf_i+0x128>
 8007724:	6833      	ldr	r3, [r6, #0]
 8007726:	6825      	ldr	r5, [r4, #0]
 8007728:	6961      	ldr	r1, [r4, #20]
 800772a:	1d18      	adds	r0, r3, #4
 800772c:	6030      	str	r0, [r6, #0]
 800772e:	062e      	lsls	r6, r5, #24
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	d501      	bpl.n	8007738 <_printf_i+0x1c0>
 8007734:	6019      	str	r1, [r3, #0]
 8007736:	e002      	b.n	800773e <_printf_i+0x1c6>
 8007738:	0668      	lsls	r0, r5, #25
 800773a:	d5fb      	bpl.n	8007734 <_printf_i+0x1bc>
 800773c:	8019      	strh	r1, [r3, #0]
 800773e:	2300      	movs	r3, #0
 8007740:	6123      	str	r3, [r4, #16]
 8007742:	4616      	mov	r6, r2
 8007744:	e7bc      	b.n	80076c0 <_printf_i+0x148>
 8007746:	6833      	ldr	r3, [r6, #0]
 8007748:	1d1a      	adds	r2, r3, #4
 800774a:	6032      	str	r2, [r6, #0]
 800774c:	681e      	ldr	r6, [r3, #0]
 800774e:	6862      	ldr	r2, [r4, #4]
 8007750:	2100      	movs	r1, #0
 8007752:	4630      	mov	r0, r6
 8007754:	f7f8 fd64 	bl	8000220 <memchr>
 8007758:	b108      	cbz	r0, 800775e <_printf_i+0x1e6>
 800775a:	1b80      	subs	r0, r0, r6
 800775c:	6060      	str	r0, [r4, #4]
 800775e:	6863      	ldr	r3, [r4, #4]
 8007760:	6123      	str	r3, [r4, #16]
 8007762:	2300      	movs	r3, #0
 8007764:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007768:	e7aa      	b.n	80076c0 <_printf_i+0x148>
 800776a:	6923      	ldr	r3, [r4, #16]
 800776c:	4632      	mov	r2, r6
 800776e:	4649      	mov	r1, r9
 8007770:	4640      	mov	r0, r8
 8007772:	47d0      	blx	sl
 8007774:	3001      	adds	r0, #1
 8007776:	d0ad      	beq.n	80076d4 <_printf_i+0x15c>
 8007778:	6823      	ldr	r3, [r4, #0]
 800777a:	079b      	lsls	r3, r3, #30
 800777c:	d413      	bmi.n	80077a6 <_printf_i+0x22e>
 800777e:	68e0      	ldr	r0, [r4, #12]
 8007780:	9b03      	ldr	r3, [sp, #12]
 8007782:	4298      	cmp	r0, r3
 8007784:	bfb8      	it	lt
 8007786:	4618      	movlt	r0, r3
 8007788:	e7a6      	b.n	80076d8 <_printf_i+0x160>
 800778a:	2301      	movs	r3, #1
 800778c:	4632      	mov	r2, r6
 800778e:	4649      	mov	r1, r9
 8007790:	4640      	mov	r0, r8
 8007792:	47d0      	blx	sl
 8007794:	3001      	adds	r0, #1
 8007796:	d09d      	beq.n	80076d4 <_printf_i+0x15c>
 8007798:	3501      	adds	r5, #1
 800779a:	68e3      	ldr	r3, [r4, #12]
 800779c:	9903      	ldr	r1, [sp, #12]
 800779e:	1a5b      	subs	r3, r3, r1
 80077a0:	42ab      	cmp	r3, r5
 80077a2:	dcf2      	bgt.n	800778a <_printf_i+0x212>
 80077a4:	e7eb      	b.n	800777e <_printf_i+0x206>
 80077a6:	2500      	movs	r5, #0
 80077a8:	f104 0619 	add.w	r6, r4, #25
 80077ac:	e7f5      	b.n	800779a <_printf_i+0x222>
 80077ae:	bf00      	nop
 80077b0:	08008039 	.word	0x08008039
 80077b4:	0800804a 	.word	0x0800804a

080077b8 <__sflush_r>:
 80077b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077c0:	0716      	lsls	r6, r2, #28
 80077c2:	4605      	mov	r5, r0
 80077c4:	460c      	mov	r4, r1
 80077c6:	d454      	bmi.n	8007872 <__sflush_r+0xba>
 80077c8:	684b      	ldr	r3, [r1, #4]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dc02      	bgt.n	80077d4 <__sflush_r+0x1c>
 80077ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dd48      	ble.n	8007866 <__sflush_r+0xae>
 80077d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077d6:	2e00      	cmp	r6, #0
 80077d8:	d045      	beq.n	8007866 <__sflush_r+0xae>
 80077da:	2300      	movs	r3, #0
 80077dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077e0:	682f      	ldr	r7, [r5, #0]
 80077e2:	6a21      	ldr	r1, [r4, #32]
 80077e4:	602b      	str	r3, [r5, #0]
 80077e6:	d030      	beq.n	800784a <__sflush_r+0x92>
 80077e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077ea:	89a3      	ldrh	r3, [r4, #12]
 80077ec:	0759      	lsls	r1, r3, #29
 80077ee:	d505      	bpl.n	80077fc <__sflush_r+0x44>
 80077f0:	6863      	ldr	r3, [r4, #4]
 80077f2:	1ad2      	subs	r2, r2, r3
 80077f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077f6:	b10b      	cbz	r3, 80077fc <__sflush_r+0x44>
 80077f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077fa:	1ad2      	subs	r2, r2, r3
 80077fc:	2300      	movs	r3, #0
 80077fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007800:	6a21      	ldr	r1, [r4, #32]
 8007802:	4628      	mov	r0, r5
 8007804:	47b0      	blx	r6
 8007806:	1c43      	adds	r3, r0, #1
 8007808:	89a3      	ldrh	r3, [r4, #12]
 800780a:	d106      	bne.n	800781a <__sflush_r+0x62>
 800780c:	6829      	ldr	r1, [r5, #0]
 800780e:	291d      	cmp	r1, #29
 8007810:	d82b      	bhi.n	800786a <__sflush_r+0xb2>
 8007812:	4a2a      	ldr	r2, [pc, #168]	@ (80078bc <__sflush_r+0x104>)
 8007814:	410a      	asrs	r2, r1
 8007816:	07d6      	lsls	r6, r2, #31
 8007818:	d427      	bmi.n	800786a <__sflush_r+0xb2>
 800781a:	2200      	movs	r2, #0
 800781c:	6062      	str	r2, [r4, #4]
 800781e:	04d9      	lsls	r1, r3, #19
 8007820:	6922      	ldr	r2, [r4, #16]
 8007822:	6022      	str	r2, [r4, #0]
 8007824:	d504      	bpl.n	8007830 <__sflush_r+0x78>
 8007826:	1c42      	adds	r2, r0, #1
 8007828:	d101      	bne.n	800782e <__sflush_r+0x76>
 800782a:	682b      	ldr	r3, [r5, #0]
 800782c:	b903      	cbnz	r3, 8007830 <__sflush_r+0x78>
 800782e:	6560      	str	r0, [r4, #84]	@ 0x54
 8007830:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007832:	602f      	str	r7, [r5, #0]
 8007834:	b1b9      	cbz	r1, 8007866 <__sflush_r+0xae>
 8007836:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800783a:	4299      	cmp	r1, r3
 800783c:	d002      	beq.n	8007844 <__sflush_r+0x8c>
 800783e:	4628      	mov	r0, r5
 8007840:	f7ff fbf2 	bl	8007028 <_free_r>
 8007844:	2300      	movs	r3, #0
 8007846:	6363      	str	r3, [r4, #52]	@ 0x34
 8007848:	e00d      	b.n	8007866 <__sflush_r+0xae>
 800784a:	2301      	movs	r3, #1
 800784c:	4628      	mov	r0, r5
 800784e:	47b0      	blx	r6
 8007850:	4602      	mov	r2, r0
 8007852:	1c50      	adds	r0, r2, #1
 8007854:	d1c9      	bne.n	80077ea <__sflush_r+0x32>
 8007856:	682b      	ldr	r3, [r5, #0]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d0c6      	beq.n	80077ea <__sflush_r+0x32>
 800785c:	2b1d      	cmp	r3, #29
 800785e:	d001      	beq.n	8007864 <__sflush_r+0xac>
 8007860:	2b16      	cmp	r3, #22
 8007862:	d11e      	bne.n	80078a2 <__sflush_r+0xea>
 8007864:	602f      	str	r7, [r5, #0]
 8007866:	2000      	movs	r0, #0
 8007868:	e022      	b.n	80078b0 <__sflush_r+0xf8>
 800786a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800786e:	b21b      	sxth	r3, r3
 8007870:	e01b      	b.n	80078aa <__sflush_r+0xf2>
 8007872:	690f      	ldr	r7, [r1, #16]
 8007874:	2f00      	cmp	r7, #0
 8007876:	d0f6      	beq.n	8007866 <__sflush_r+0xae>
 8007878:	0793      	lsls	r3, r2, #30
 800787a:	680e      	ldr	r6, [r1, #0]
 800787c:	bf08      	it	eq
 800787e:	694b      	ldreq	r3, [r1, #20]
 8007880:	600f      	str	r7, [r1, #0]
 8007882:	bf18      	it	ne
 8007884:	2300      	movne	r3, #0
 8007886:	eba6 0807 	sub.w	r8, r6, r7
 800788a:	608b      	str	r3, [r1, #8]
 800788c:	f1b8 0f00 	cmp.w	r8, #0
 8007890:	dde9      	ble.n	8007866 <__sflush_r+0xae>
 8007892:	6a21      	ldr	r1, [r4, #32]
 8007894:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007896:	4643      	mov	r3, r8
 8007898:	463a      	mov	r2, r7
 800789a:	4628      	mov	r0, r5
 800789c:	47b0      	blx	r6
 800789e:	2800      	cmp	r0, #0
 80078a0:	dc08      	bgt.n	80078b4 <__sflush_r+0xfc>
 80078a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078aa:	81a3      	strh	r3, [r4, #12]
 80078ac:	f04f 30ff 	mov.w	r0, #4294967295
 80078b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078b4:	4407      	add	r7, r0
 80078b6:	eba8 0800 	sub.w	r8, r8, r0
 80078ba:	e7e7      	b.n	800788c <__sflush_r+0xd4>
 80078bc:	dfbffffe 	.word	0xdfbffffe

080078c0 <_fflush_r>:
 80078c0:	b538      	push	{r3, r4, r5, lr}
 80078c2:	690b      	ldr	r3, [r1, #16]
 80078c4:	4605      	mov	r5, r0
 80078c6:	460c      	mov	r4, r1
 80078c8:	b913      	cbnz	r3, 80078d0 <_fflush_r+0x10>
 80078ca:	2500      	movs	r5, #0
 80078cc:	4628      	mov	r0, r5
 80078ce:	bd38      	pop	{r3, r4, r5, pc}
 80078d0:	b118      	cbz	r0, 80078da <_fflush_r+0x1a>
 80078d2:	6a03      	ldr	r3, [r0, #32]
 80078d4:	b90b      	cbnz	r3, 80078da <_fflush_r+0x1a>
 80078d6:	f7ff f9ad 	bl	8006c34 <__sinit>
 80078da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d0f3      	beq.n	80078ca <_fflush_r+0xa>
 80078e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078e4:	07d0      	lsls	r0, r2, #31
 80078e6:	d404      	bmi.n	80078f2 <_fflush_r+0x32>
 80078e8:	0599      	lsls	r1, r3, #22
 80078ea:	d402      	bmi.n	80078f2 <_fflush_r+0x32>
 80078ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ee:	f7ff fb98 	bl	8007022 <__retarget_lock_acquire_recursive>
 80078f2:	4628      	mov	r0, r5
 80078f4:	4621      	mov	r1, r4
 80078f6:	f7ff ff5f 	bl	80077b8 <__sflush_r>
 80078fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078fc:	07da      	lsls	r2, r3, #31
 80078fe:	4605      	mov	r5, r0
 8007900:	d4e4      	bmi.n	80078cc <_fflush_r+0xc>
 8007902:	89a3      	ldrh	r3, [r4, #12]
 8007904:	059b      	lsls	r3, r3, #22
 8007906:	d4e1      	bmi.n	80078cc <_fflush_r+0xc>
 8007908:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800790a:	f7ff fb8b 	bl	8007024 <__retarget_lock_release_recursive>
 800790e:	e7dd      	b.n	80078cc <_fflush_r+0xc>

08007910 <__swhatbuf_r>:
 8007910:	b570      	push	{r4, r5, r6, lr}
 8007912:	460c      	mov	r4, r1
 8007914:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007918:	2900      	cmp	r1, #0
 800791a:	b096      	sub	sp, #88	@ 0x58
 800791c:	4615      	mov	r5, r2
 800791e:	461e      	mov	r6, r3
 8007920:	da0d      	bge.n	800793e <__swhatbuf_r+0x2e>
 8007922:	89a3      	ldrh	r3, [r4, #12]
 8007924:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007928:	f04f 0100 	mov.w	r1, #0
 800792c:	bf14      	ite	ne
 800792e:	2340      	movne	r3, #64	@ 0x40
 8007930:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007934:	2000      	movs	r0, #0
 8007936:	6031      	str	r1, [r6, #0]
 8007938:	602b      	str	r3, [r5, #0]
 800793a:	b016      	add	sp, #88	@ 0x58
 800793c:	bd70      	pop	{r4, r5, r6, pc}
 800793e:	466a      	mov	r2, sp
 8007940:	f000 f848 	bl	80079d4 <_fstat_r>
 8007944:	2800      	cmp	r0, #0
 8007946:	dbec      	blt.n	8007922 <__swhatbuf_r+0x12>
 8007948:	9901      	ldr	r1, [sp, #4]
 800794a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800794e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007952:	4259      	negs	r1, r3
 8007954:	4159      	adcs	r1, r3
 8007956:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800795a:	e7eb      	b.n	8007934 <__swhatbuf_r+0x24>

0800795c <__smakebuf_r>:
 800795c:	898b      	ldrh	r3, [r1, #12]
 800795e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007960:	079d      	lsls	r5, r3, #30
 8007962:	4606      	mov	r6, r0
 8007964:	460c      	mov	r4, r1
 8007966:	d507      	bpl.n	8007978 <__smakebuf_r+0x1c>
 8007968:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800796c:	6023      	str	r3, [r4, #0]
 800796e:	6123      	str	r3, [r4, #16]
 8007970:	2301      	movs	r3, #1
 8007972:	6163      	str	r3, [r4, #20]
 8007974:	b003      	add	sp, #12
 8007976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007978:	ab01      	add	r3, sp, #4
 800797a:	466a      	mov	r2, sp
 800797c:	f7ff ffc8 	bl	8007910 <__swhatbuf_r>
 8007980:	9f00      	ldr	r7, [sp, #0]
 8007982:	4605      	mov	r5, r0
 8007984:	4639      	mov	r1, r7
 8007986:	4630      	mov	r0, r6
 8007988:	f7ff fbba 	bl	8007100 <_malloc_r>
 800798c:	b948      	cbnz	r0, 80079a2 <__smakebuf_r+0x46>
 800798e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007992:	059a      	lsls	r2, r3, #22
 8007994:	d4ee      	bmi.n	8007974 <__smakebuf_r+0x18>
 8007996:	f023 0303 	bic.w	r3, r3, #3
 800799a:	f043 0302 	orr.w	r3, r3, #2
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	e7e2      	b.n	8007968 <__smakebuf_r+0xc>
 80079a2:	89a3      	ldrh	r3, [r4, #12]
 80079a4:	6020      	str	r0, [r4, #0]
 80079a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80079aa:	81a3      	strh	r3, [r4, #12]
 80079ac:	9b01      	ldr	r3, [sp, #4]
 80079ae:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079b2:	b15b      	cbz	r3, 80079cc <__smakebuf_r+0x70>
 80079b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b8:	4630      	mov	r0, r6
 80079ba:	f000 f81d 	bl	80079f8 <_isatty_r>
 80079be:	b128      	cbz	r0, 80079cc <__smakebuf_r+0x70>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f023 0303 	bic.w	r3, r3, #3
 80079c6:	f043 0301 	orr.w	r3, r3, #1
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	89a3      	ldrh	r3, [r4, #12]
 80079ce:	431d      	orrs	r5, r3
 80079d0:	81a5      	strh	r5, [r4, #12]
 80079d2:	e7cf      	b.n	8007974 <__smakebuf_r+0x18>

080079d4 <_fstat_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	@ (80079f4 <_fstat_r+0x20>)
 80079d8:	2300      	movs	r3, #0
 80079da:	4604      	mov	r4, r0
 80079dc:	4608      	mov	r0, r1
 80079de:	4611      	mov	r1, r2
 80079e0:	602b      	str	r3, [r5, #0]
 80079e2:	f7fa f96c 	bl	8001cbe <_fstat>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	d102      	bne.n	80079f0 <_fstat_r+0x1c>
 80079ea:	682b      	ldr	r3, [r5, #0]
 80079ec:	b103      	cbz	r3, 80079f0 <_fstat_r+0x1c>
 80079ee:	6023      	str	r3, [r4, #0]
 80079f0:	bd38      	pop	{r3, r4, r5, pc}
 80079f2:	bf00      	nop
 80079f4:	2000047c 	.word	0x2000047c

080079f8 <_isatty_r>:
 80079f8:	b538      	push	{r3, r4, r5, lr}
 80079fa:	4d06      	ldr	r5, [pc, #24]	@ (8007a14 <_isatty_r+0x1c>)
 80079fc:	2300      	movs	r3, #0
 80079fe:	4604      	mov	r4, r0
 8007a00:	4608      	mov	r0, r1
 8007a02:	602b      	str	r3, [r5, #0]
 8007a04:	f7fa f96b 	bl	8001cde <_isatty>
 8007a08:	1c43      	adds	r3, r0, #1
 8007a0a:	d102      	bne.n	8007a12 <_isatty_r+0x1a>
 8007a0c:	682b      	ldr	r3, [r5, #0]
 8007a0e:	b103      	cbz	r3, 8007a12 <_isatty_r+0x1a>
 8007a10:	6023      	str	r3, [r4, #0]
 8007a12:	bd38      	pop	{r3, r4, r5, pc}
 8007a14:	2000047c 	.word	0x2000047c

08007a18 <_sbrk_r>:
 8007a18:	b538      	push	{r3, r4, r5, lr}
 8007a1a:	4d06      	ldr	r5, [pc, #24]	@ (8007a34 <_sbrk_r+0x1c>)
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	4604      	mov	r4, r0
 8007a20:	4608      	mov	r0, r1
 8007a22:	602b      	str	r3, [r5, #0]
 8007a24:	f7fa f974 	bl	8001d10 <_sbrk>
 8007a28:	1c43      	adds	r3, r0, #1
 8007a2a:	d102      	bne.n	8007a32 <_sbrk_r+0x1a>
 8007a2c:	682b      	ldr	r3, [r5, #0]
 8007a2e:	b103      	cbz	r3, 8007a32 <_sbrk_r+0x1a>
 8007a30:	6023      	str	r3, [r4, #0]
 8007a32:	bd38      	pop	{r3, r4, r5, pc}
 8007a34:	2000047c 	.word	0x2000047c

08007a38 <_init>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr

08007a44 <_fini>:
 8007a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a46:	bf00      	nop
 8007a48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a4a:	bc08      	pop	{r3}
 8007a4c:	469e      	mov	lr, r3
 8007a4e:	4770      	bx	lr


503SD_card.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007864  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000604  08007a44  08007a44  00008a44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008048  08008048  0000a080  2**0
                  CONTENTS
  4 .ARM          00000008  08008048  08008048  00009048  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008050  08008050  0000a080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008050  08008050  00009050  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008054  08008054  00009054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  08008058  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000040c  20000080  080080d8  0000a080  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000048c  080080d8  0000a48c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b2d2  00000000  00000000  0000a0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000230a  00000000  00000000  00015382  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b08  00000000  00000000  00017690  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000083e  00000000  00000000  00018198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f90  00000000  00000000  000189d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010b77  00000000  00000000  0003b966  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c89e6  00000000  00000000  0004c4dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00114ec3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033e4  00000000  00000000  00114f08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  001182ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000080 	.word	0x20000080
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007a2c 	.word	0x08007a2c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000084 	.word	0x20000084
 800021c:	08007a2c 	.word	0x08007a2c

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	@ 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__aeabi_d2uiz>:
 800088c:	004a      	lsls	r2, r1, #1
 800088e:	d211      	bcs.n	80008b4 <__aeabi_d2uiz+0x28>
 8000890:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000894:	d211      	bcs.n	80008ba <__aeabi_d2uiz+0x2e>
 8000896:	d50d      	bpl.n	80008b4 <__aeabi_d2uiz+0x28>
 8000898:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800089c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80008a0:	d40e      	bmi.n	80008c0 <__aeabi_d2uiz+0x34>
 80008a2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008a6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80008aa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80008ae:	fa23 f002 	lsr.w	r0, r3, r2
 80008b2:	4770      	bx	lr
 80008b4:	f04f 0000 	mov.w	r0, #0
 80008b8:	4770      	bx	lr
 80008ba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80008be:	d102      	bne.n	80008c6 <__aeabi_d2uiz+0x3a>
 80008c0:	f04f 30ff 	mov.w	r0, #4294967295
 80008c4:	4770      	bx	lr
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	4770      	bx	lr

080008cc <__aeabi_uldivmod>:
 80008cc:	b953      	cbnz	r3, 80008e4 <__aeabi_uldivmod+0x18>
 80008ce:	b94a      	cbnz	r2, 80008e4 <__aeabi_uldivmod+0x18>
 80008d0:	2900      	cmp	r1, #0
 80008d2:	bf08      	it	eq
 80008d4:	2800      	cmpeq	r0, #0
 80008d6:	bf1c      	itt	ne
 80008d8:	f04f 31ff 	movne.w	r1, #4294967295
 80008dc:	f04f 30ff 	movne.w	r0, #4294967295
 80008e0:	f000 b96a 	b.w	8000bb8 <__aeabi_idiv0>
 80008e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ec:	f000 f806 	bl	80008fc <__udivmoddi4>
 80008f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008f8:	b004      	add	sp, #16
 80008fa:	4770      	bx	lr

080008fc <__udivmoddi4>:
 80008fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000900:	9d08      	ldr	r5, [sp, #32]
 8000902:	460c      	mov	r4, r1
 8000904:	2b00      	cmp	r3, #0
 8000906:	d14e      	bne.n	80009a6 <__udivmoddi4+0xaa>
 8000908:	4694      	mov	ip, r2
 800090a:	458c      	cmp	ip, r1
 800090c:	4686      	mov	lr, r0
 800090e:	fab2 f282 	clz	r2, r2
 8000912:	d962      	bls.n	80009da <__udivmoddi4+0xde>
 8000914:	b14a      	cbz	r2, 800092a <__udivmoddi4+0x2e>
 8000916:	f1c2 0320 	rsb	r3, r2, #32
 800091a:	4091      	lsls	r1, r2
 800091c:	fa20 f303 	lsr.w	r3, r0, r3
 8000920:	fa0c fc02 	lsl.w	ip, ip, r2
 8000924:	4319      	orrs	r1, r3
 8000926:	fa00 fe02 	lsl.w	lr, r0, r2
 800092a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800092e:	fa1f f68c 	uxth.w	r6, ip
 8000932:	fbb1 f4f7 	udiv	r4, r1, r7
 8000936:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800093a:	fb07 1114 	mls	r1, r7, r4, r1
 800093e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000942:	fb04 f106 	mul.w	r1, r4, r6
 8000946:	4299      	cmp	r1, r3
 8000948:	d90a      	bls.n	8000960 <__udivmoddi4+0x64>
 800094a:	eb1c 0303 	adds.w	r3, ip, r3
 800094e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000952:	f080 8112 	bcs.w	8000b7a <__udivmoddi4+0x27e>
 8000956:	4299      	cmp	r1, r3
 8000958:	f240 810f 	bls.w	8000b7a <__udivmoddi4+0x27e>
 800095c:	3c02      	subs	r4, #2
 800095e:	4463      	add	r3, ip
 8000960:	1a59      	subs	r1, r3, r1
 8000962:	fa1f f38e 	uxth.w	r3, lr
 8000966:	fbb1 f0f7 	udiv	r0, r1, r7
 800096a:	fb07 1110 	mls	r1, r7, r0, r1
 800096e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000972:	fb00 f606 	mul.w	r6, r0, r6
 8000976:	429e      	cmp	r6, r3
 8000978:	d90a      	bls.n	8000990 <__udivmoddi4+0x94>
 800097a:	eb1c 0303 	adds.w	r3, ip, r3
 800097e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000982:	f080 80fc 	bcs.w	8000b7e <__udivmoddi4+0x282>
 8000986:	429e      	cmp	r6, r3
 8000988:	f240 80f9 	bls.w	8000b7e <__udivmoddi4+0x282>
 800098c:	4463      	add	r3, ip
 800098e:	3802      	subs	r0, #2
 8000990:	1b9b      	subs	r3, r3, r6
 8000992:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000996:	2100      	movs	r1, #0
 8000998:	b11d      	cbz	r5, 80009a2 <__udivmoddi4+0xa6>
 800099a:	40d3      	lsrs	r3, r2
 800099c:	2200      	movs	r2, #0
 800099e:	e9c5 3200 	strd	r3, r2, [r5]
 80009a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009a6:	428b      	cmp	r3, r1
 80009a8:	d905      	bls.n	80009b6 <__udivmoddi4+0xba>
 80009aa:	b10d      	cbz	r5, 80009b0 <__udivmoddi4+0xb4>
 80009ac:	e9c5 0100 	strd	r0, r1, [r5]
 80009b0:	2100      	movs	r1, #0
 80009b2:	4608      	mov	r0, r1
 80009b4:	e7f5      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009b6:	fab3 f183 	clz	r1, r3
 80009ba:	2900      	cmp	r1, #0
 80009bc:	d146      	bne.n	8000a4c <__udivmoddi4+0x150>
 80009be:	42a3      	cmp	r3, r4
 80009c0:	d302      	bcc.n	80009c8 <__udivmoddi4+0xcc>
 80009c2:	4290      	cmp	r0, r2
 80009c4:	f0c0 80f0 	bcc.w	8000ba8 <__udivmoddi4+0x2ac>
 80009c8:	1a86      	subs	r6, r0, r2
 80009ca:	eb64 0303 	sbc.w	r3, r4, r3
 80009ce:	2001      	movs	r0, #1
 80009d0:	2d00      	cmp	r5, #0
 80009d2:	d0e6      	beq.n	80009a2 <__udivmoddi4+0xa6>
 80009d4:	e9c5 6300 	strd	r6, r3, [r5]
 80009d8:	e7e3      	b.n	80009a2 <__udivmoddi4+0xa6>
 80009da:	2a00      	cmp	r2, #0
 80009dc:	f040 8090 	bne.w	8000b00 <__udivmoddi4+0x204>
 80009e0:	eba1 040c 	sub.w	r4, r1, ip
 80009e4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009e8:	fa1f f78c 	uxth.w	r7, ip
 80009ec:	2101      	movs	r1, #1
 80009ee:	fbb4 f6f8 	udiv	r6, r4, r8
 80009f2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009f6:	fb08 4416 	mls	r4, r8, r6, r4
 80009fa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009fe:	fb07 f006 	mul.w	r0, r7, r6
 8000a02:	4298      	cmp	r0, r3
 8000a04:	d908      	bls.n	8000a18 <__udivmoddi4+0x11c>
 8000a06:	eb1c 0303 	adds.w	r3, ip, r3
 8000a0a:	f106 34ff 	add.w	r4, r6, #4294967295
 8000a0e:	d202      	bcs.n	8000a16 <__udivmoddi4+0x11a>
 8000a10:	4298      	cmp	r0, r3
 8000a12:	f200 80cd 	bhi.w	8000bb0 <__udivmoddi4+0x2b4>
 8000a16:	4626      	mov	r6, r4
 8000a18:	1a1c      	subs	r4, r3, r0
 8000a1a:	fa1f f38e 	uxth.w	r3, lr
 8000a1e:	fbb4 f0f8 	udiv	r0, r4, r8
 8000a22:	fb08 4410 	mls	r4, r8, r0, r4
 8000a26:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000a2a:	fb00 f707 	mul.w	r7, r0, r7
 8000a2e:	429f      	cmp	r7, r3
 8000a30:	d908      	bls.n	8000a44 <__udivmoddi4+0x148>
 8000a32:	eb1c 0303 	adds.w	r3, ip, r3
 8000a36:	f100 34ff 	add.w	r4, r0, #4294967295
 8000a3a:	d202      	bcs.n	8000a42 <__udivmoddi4+0x146>
 8000a3c:	429f      	cmp	r7, r3
 8000a3e:	f200 80b0 	bhi.w	8000ba2 <__udivmoddi4+0x2a6>
 8000a42:	4620      	mov	r0, r4
 8000a44:	1bdb      	subs	r3, r3, r7
 8000a46:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a4a:	e7a5      	b.n	8000998 <__udivmoddi4+0x9c>
 8000a4c:	f1c1 0620 	rsb	r6, r1, #32
 8000a50:	408b      	lsls	r3, r1
 8000a52:	fa22 f706 	lsr.w	r7, r2, r6
 8000a56:	431f      	orrs	r7, r3
 8000a58:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a5c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a60:	ea43 030c 	orr.w	r3, r3, ip
 8000a64:	40f4      	lsrs	r4, r6
 8000a66:	fa00 f801 	lsl.w	r8, r0, r1
 8000a6a:	0c38      	lsrs	r0, r7, #16
 8000a6c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a70:	fbb4 fef0 	udiv	lr, r4, r0
 8000a74:	fa1f fc87 	uxth.w	ip, r7
 8000a78:	fb00 441e 	mls	r4, r0, lr, r4
 8000a7c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a80:	fb0e f90c 	mul.w	r9, lr, ip
 8000a84:	45a1      	cmp	r9, r4
 8000a86:	fa02 f201 	lsl.w	r2, r2, r1
 8000a8a:	d90a      	bls.n	8000aa2 <__udivmoddi4+0x1a6>
 8000a8c:	193c      	adds	r4, r7, r4
 8000a8e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a92:	f080 8084 	bcs.w	8000b9e <__udivmoddi4+0x2a2>
 8000a96:	45a1      	cmp	r9, r4
 8000a98:	f240 8081 	bls.w	8000b9e <__udivmoddi4+0x2a2>
 8000a9c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000aa0:	443c      	add	r4, r7
 8000aa2:	eba4 0409 	sub.w	r4, r4, r9
 8000aa6:	fa1f f983 	uxth.w	r9, r3
 8000aaa:	fbb4 f3f0 	udiv	r3, r4, r0
 8000aae:	fb00 4413 	mls	r4, r0, r3, r4
 8000ab2:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ab6:	fb03 fc0c 	mul.w	ip, r3, ip
 8000aba:	45a4      	cmp	ip, r4
 8000abc:	d907      	bls.n	8000ace <__udivmoddi4+0x1d2>
 8000abe:	193c      	adds	r4, r7, r4
 8000ac0:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ac4:	d267      	bcs.n	8000b96 <__udivmoddi4+0x29a>
 8000ac6:	45a4      	cmp	ip, r4
 8000ac8:	d965      	bls.n	8000b96 <__udivmoddi4+0x29a>
 8000aca:	3b02      	subs	r3, #2
 8000acc:	443c      	add	r4, r7
 8000ace:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000ad2:	fba0 9302 	umull	r9, r3, r0, r2
 8000ad6:	eba4 040c 	sub.w	r4, r4, ip
 8000ada:	429c      	cmp	r4, r3
 8000adc:	46ce      	mov	lr, r9
 8000ade:	469c      	mov	ip, r3
 8000ae0:	d351      	bcc.n	8000b86 <__udivmoddi4+0x28a>
 8000ae2:	d04e      	beq.n	8000b82 <__udivmoddi4+0x286>
 8000ae4:	b155      	cbz	r5, 8000afc <__udivmoddi4+0x200>
 8000ae6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aea:	eb64 040c 	sbc.w	r4, r4, ip
 8000aee:	fa04 f606 	lsl.w	r6, r4, r6
 8000af2:	40cb      	lsrs	r3, r1
 8000af4:	431e      	orrs	r6, r3
 8000af6:	40cc      	lsrs	r4, r1
 8000af8:	e9c5 6400 	strd	r6, r4, [r5]
 8000afc:	2100      	movs	r1, #0
 8000afe:	e750      	b.n	80009a2 <__udivmoddi4+0xa6>
 8000b00:	f1c2 0320 	rsb	r3, r2, #32
 8000b04:	fa20 f103 	lsr.w	r1, r0, r3
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	fa24 f303 	lsr.w	r3, r4, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	430c      	orrs	r4, r1
 8000b14:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b18:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b1c:	fa1f f78c 	uxth.w	r7, ip
 8000b20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b24:	fb08 3110 	mls	r1, r8, r0, r3
 8000b28:	0c23      	lsrs	r3, r4, #16
 8000b2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b2e:	fb00 f107 	mul.w	r1, r0, r7
 8000b32:	4299      	cmp	r1, r3
 8000b34:	d908      	bls.n	8000b48 <__udivmoddi4+0x24c>
 8000b36:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3a:	f100 36ff 	add.w	r6, r0, #4294967295
 8000b3e:	d22c      	bcs.n	8000b9a <__udivmoddi4+0x29e>
 8000b40:	4299      	cmp	r1, r3
 8000b42:	d92a      	bls.n	8000b9a <__udivmoddi4+0x29e>
 8000b44:	3802      	subs	r0, #2
 8000b46:	4463      	add	r3, ip
 8000b48:	1a5b      	subs	r3, r3, r1
 8000b4a:	b2a4      	uxth	r4, r4
 8000b4c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b50:	fb08 3311 	mls	r3, r8, r1, r3
 8000b54:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b58:	fb01 f307 	mul.w	r3, r1, r7
 8000b5c:	42a3      	cmp	r3, r4
 8000b5e:	d908      	bls.n	8000b72 <__udivmoddi4+0x276>
 8000b60:	eb1c 0404 	adds.w	r4, ip, r4
 8000b64:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b68:	d213      	bcs.n	8000b92 <__udivmoddi4+0x296>
 8000b6a:	42a3      	cmp	r3, r4
 8000b6c:	d911      	bls.n	8000b92 <__udivmoddi4+0x296>
 8000b6e:	3902      	subs	r1, #2
 8000b70:	4464      	add	r4, ip
 8000b72:	1ae4      	subs	r4, r4, r3
 8000b74:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b78:	e739      	b.n	80009ee <__udivmoddi4+0xf2>
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	e6f0      	b.n	8000960 <__udivmoddi4+0x64>
 8000b7e:	4608      	mov	r0, r1
 8000b80:	e706      	b.n	8000990 <__udivmoddi4+0x94>
 8000b82:	45c8      	cmp	r8, r9
 8000b84:	d2ae      	bcs.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b86:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b8a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b8e:	3801      	subs	r0, #1
 8000b90:	e7a8      	b.n	8000ae4 <__udivmoddi4+0x1e8>
 8000b92:	4631      	mov	r1, r6
 8000b94:	e7ed      	b.n	8000b72 <__udivmoddi4+0x276>
 8000b96:	4603      	mov	r3, r0
 8000b98:	e799      	b.n	8000ace <__udivmoddi4+0x1d2>
 8000b9a:	4630      	mov	r0, r6
 8000b9c:	e7d4      	b.n	8000b48 <__udivmoddi4+0x24c>
 8000b9e:	46d6      	mov	lr, sl
 8000ba0:	e77f      	b.n	8000aa2 <__udivmoddi4+0x1a6>
 8000ba2:	4463      	add	r3, ip
 8000ba4:	3802      	subs	r0, #2
 8000ba6:	e74d      	b.n	8000a44 <__udivmoddi4+0x148>
 8000ba8:	4606      	mov	r6, r0
 8000baa:	4623      	mov	r3, r4
 8000bac:	4608      	mov	r0, r1
 8000bae:	e70f      	b.n	80009d0 <__udivmoddi4+0xd4>
 8000bb0:	3e02      	subs	r6, #2
 8000bb2:	4463      	add	r3, ip
 8000bb4:	e730      	b.n	8000a18 <__udivmoddi4+0x11c>
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_idiv0>:
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop

08000bbc <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2140      	movs	r1, #64	@ 0x40
 8000bc4:	4803      	ldr	r0, [pc, #12]	@ (8000bd4 <SELECT+0x18>)
 8000bc6:	f001 fc1f 	bl	8002408 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000bca:	2001      	movs	r0, #1
 8000bcc:	f001 f97e 	bl	8001ecc <HAL_Delay>
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 8000bdc:	2201      	movs	r2, #1
 8000bde:	2140      	movs	r1, #64	@ 0x40
 8000be0:	4803      	ldr	r0, [pc, #12]	@ (8000bf0 <DESELECT+0x18>)
 8000be2:	f001 fc11 	bl	8002408 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f001 f970 	bl	8001ecc <HAL_Delay>
}
 8000bec:	bf00      	nop
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40020400 	.word	0x40020400

08000bf4 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000bfe:	bf00      	nop
 8000c00:	4b08      	ldr	r3, [pc, #32]	@ (8000c24 <SPI_TxByte+0x30>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	689b      	ldr	r3, [r3, #8]
 8000c06:	f003 0302 	and.w	r3, r3, #2
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d1f8      	bne.n	8000c00 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 8000c0e:	1df9      	adds	r1, r7, #7
 8000c10:	2364      	movs	r3, #100	@ 0x64
 8000c12:	2201      	movs	r2, #1
 8000c14:	4803      	ldr	r0, [pc, #12]	@ (8000c24 <SPI_TxByte+0x30>)
 8000c16:	f002 f90a 	bl	8002e2e <HAL_SPI_Transmit>
}
 8000c1a:	bf00      	nop
 8000c1c:	3708      	adds	r7, #8
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200000a4 	.word	0x200000a4

08000c28 <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	460b      	mov	r3, r1
 8000c32:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c34:	bf00      	nop
 8000c36:	4b08      	ldr	r3, [pc, #32]	@ (8000c58 <SPI_TxBuffer+0x30>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	689b      	ldr	r3, [r3, #8]
 8000c3c:	f003 0302 	and.w	r3, r3, #2
 8000c40:	2b02      	cmp	r3, #2
 8000c42:	d1f8      	bne.n	8000c36 <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000c44:	887a      	ldrh	r2, [r7, #2]
 8000c46:	2364      	movs	r3, #100	@ 0x64
 8000c48:	6879      	ldr	r1, [r7, #4]
 8000c4a:	4803      	ldr	r0, [pc, #12]	@ (8000c58 <SPI_TxBuffer+0x30>)
 8000c4c:	f002 f8ef 	bl	8002e2e <HAL_SPI_Transmit>
}
 8000c50:	bf00      	nop
 8000c52:	3708      	adds	r7, #8
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bd80      	pop	{r7, pc}
 8000c58:	200000a4 	.word	0x200000a4

08000c5c <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b084      	sub	sp, #16
 8000c60:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000c62:	23ff      	movs	r3, #255	@ 0xff
 8000c64:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 8000c66:	bf00      	nop
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <SPI_RxByte+0x34>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	689b      	ldr	r3, [r3, #8]
 8000c6e:	f003 0302 	and.w	r3, r3, #2
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d1f8      	bne.n	8000c68 <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 8000c76:	1dba      	adds	r2, r7, #6
 8000c78:	1df9      	adds	r1, r7, #7
 8000c7a:	2364      	movs	r3, #100	@ 0x64
 8000c7c:	9300      	str	r3, [sp, #0]
 8000c7e:	2301      	movs	r3, #1
 8000c80:	4803      	ldr	r0, [pc, #12]	@ (8000c90 <SPI_RxByte+0x34>)
 8000c82:	f002 fa17 	bl	80030b4 <HAL_SPI_TransmitReceive>

  return data;
 8000c86:	79bb      	ldrb	r3, [r7, #6]
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	3708      	adds	r7, #8
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	bd80      	pop	{r7, pc}
 8000c90:	200000a4 	.word	0x200000a4

08000c94 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000c9c:	f7ff ffde 	bl	8000c5c <SPI_RxByte>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	701a      	strb	r2, [r3, #0]
}
 8000ca8:	bf00      	nop
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 8000cb6:	4b0a      	ldr	r3, [pc, #40]	@ (8000ce0 <SD_ReadyWait+0x30>)
 8000cb8:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000cbc:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000cbe:	f7ff ffcd 	bl	8000c5c <SPI_RxByte>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8000cc6:	79fb      	ldrb	r3, [r7, #7]
 8000cc8:	2bff      	cmp	r3, #255	@ 0xff
 8000cca:	d003      	beq.n	8000cd4 <SD_ReadyWait+0x24>
 8000ccc:	4b04      	ldr	r3, [pc, #16]	@ (8000ce0 <SD_ReadyWait+0x30>)
 8000cce:	881b      	ldrh	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d1f4      	bne.n	8000cbe <SD_ReadyWait+0xe>

  return res;
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
}
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	2000009e 	.word	0x2000009e

08000ce4 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 8000cea:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 8000cee:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 8000cf0:	f7ff ff72 	bl	8000bd8 <DESELECT>
  for(int i = 0; i < 10; i++)
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	e005      	b.n	8000d06 <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	f7ff ff7a 	bl	8000bf4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	3301      	adds	r3, #1
 8000d04:	60bb      	str	r3, [r7, #8]
 8000d06:	68bb      	ldr	r3, [r7, #8]
 8000d08:	2b09      	cmp	r3, #9
 8000d0a:	ddf6      	ble.n	8000cfa <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 8000d0c:	f7ff ff56 	bl	8000bbc <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 8000d10:	2340      	movs	r3, #64	@ 0x40
 8000d12:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 8000d20:	2300      	movs	r3, #0
 8000d22:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 8000d24:	2395      	movs	r3, #149	@ 0x95
 8000d26:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 8000d28:	463b      	mov	r3, r7
 8000d2a:	2106      	movs	r1, #6
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	f7ff ff7b 	bl	8000c28 <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d32:	e002      	b.n	8000d3a <SD_PowerOn+0x56>
  {
    cnt--;
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 8000d3a:	f7ff ff8f 	bl	8000c5c <SPI_RxByte>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d002      	beq.n	8000d4a <SD_PowerOn+0x66>
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	d1f4      	bne.n	8000d34 <SD_PowerOn+0x50>
  }

  DESELECT();
 8000d4a:	f7ff ff45 	bl	8000bd8 <DESELECT>
  SPI_TxByte(0XFF);
 8000d4e:	20ff      	movs	r0, #255	@ 0xff
 8000d50:	f7ff ff50 	bl	8000bf4 <SPI_TxByte>

  PowerFlag = 1;
 8000d54:	4b03      	ldr	r3, [pc, #12]	@ (8000d64 <SD_PowerOn+0x80>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	701a      	strb	r2, [r3, #0]
}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	200000a1 	.word	0x200000a1

08000d68 <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000d6c:	4b03      	ldr	r3, [pc, #12]	@ (8000d7c <SD_PowerOff+0x14>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	701a      	strb	r2, [r3, #0]
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr
 8000d7c:	200000a1 	.word	0x200000a1

08000d80 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000d84:	4b03      	ldr	r3, [pc, #12]	@ (8000d94 <SD_CheckPower+0x14>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	200000a1 	.word	0x200000a1

08000d98 <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
 8000da0:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000da2:	4b13      	ldr	r3, [pc, #76]	@ (8000df0 <SD_RxDataBlock+0x58>)
 8000da4:	22c8      	movs	r2, #200	@ 0xc8
 8000da6:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 8000da8:	f7ff ff58 	bl	8000c5c <SPI_RxByte>
 8000dac:	4603      	mov	r3, r0
 8000dae:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000db0:	7bfb      	ldrb	r3, [r7, #15]
 8000db2:	2bff      	cmp	r3, #255	@ 0xff
 8000db4:	d103      	bne.n	8000dbe <SD_RxDataBlock+0x26>
 8000db6:	4b0e      	ldr	r3, [pc, #56]	@ (8000df0 <SD_RxDataBlock+0x58>)
 8000db8:	881b      	ldrh	r3, [r3, #0]
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d1f4      	bne.n	8000da8 <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	2bfe      	cmp	r3, #254	@ 0xfe
 8000dc2:	d001      	beq.n	8000dc8 <SD_RxDataBlock+0x30>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	e00f      	b.n	8000de8 <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	607a      	str	r2, [r7, #4]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff60 	bl	8000c94 <SPI_RxBytePtr>
  } while(len--);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	603a      	str	r2, [r7, #0]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f4      	bne.n	8000dc8 <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 8000dde:	f7ff ff3d 	bl	8000c5c <SPI_RxByte>
  SPI_RxByte();
 8000de2:	f7ff ff3b 	bl	8000c5c <SPI_RxByte>

  return TRUE;
 8000de6:	2301      	movs	r3, #1
}
 8000de8:	4618      	mov	r0, r3
 8000dea:	3710      	adds	r7, #16
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	2000009c 	.word	0x2000009c

08000df4 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b084      	sub	sp, #16
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	460b      	mov	r3, r1
 8000dfe:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 8000e00:	2300      	movs	r3, #0
 8000e02:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 8000e04:	f7ff ff54 	bl	8000cb0 <SD_ReadyWait>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2bff      	cmp	r3, #255	@ 0xff
 8000e0c:	d001      	beq.n	8000e12 <SD_TxDataBlock+0x1e>
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e02f      	b.n	8000e72 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 8000e12:	78fb      	ldrb	r3, [r7, #3]
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff feed 	bl	8000bf4 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 8000e1a:	78fb      	ldrb	r3, [r7, #3]
 8000e1c:	2bfd      	cmp	r3, #253	@ 0xfd
 8000e1e:	d020      	beq.n	8000e62 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 8000e20:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000e24:	6878      	ldr	r0, [r7, #4]
 8000e26:	f7ff feff 	bl	8000c28 <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 8000e2a:	f7ff ff17 	bl	8000c5c <SPI_RxByte>
    SPI_RxByte();
 8000e2e:	f7ff ff15 	bl	8000c5c <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 8000e32:	e00b      	b.n	8000e4c <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 8000e34:	f7ff ff12 	bl	8000c5c <SPI_RxByte>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000e3c:	7bfb      	ldrb	r3, [r7, #15]
 8000e3e:	f003 031f 	and.w	r3, r3, #31
 8000e42:	2b05      	cmp	r3, #5
 8000e44:	d006      	beq.n	8000e54 <SD_TxDataBlock+0x60>
      i++;
 8000e46:	7bbb      	ldrb	r3, [r7, #14]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000e4c:	7bbb      	ldrb	r3, [r7, #14]
 8000e4e:	2b40      	cmp	r3, #64	@ 0x40
 8000e50:	d9f0      	bls.n	8000e34 <SD_TxDataBlock+0x40>
 8000e52:	e000      	b.n	8000e56 <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000e54:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 8000e56:	bf00      	nop
 8000e58:	f7ff ff00 	bl	8000c5c <SPI_RxByte>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0fa      	beq.n	8000e58 <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000e62:	7bfb      	ldrb	r3, [r7, #15]
 8000e64:	f003 031f 	and.w	r3, r3, #31
 8000e68:	2b05      	cmp	r3, #5
 8000e6a:	d101      	bne.n	8000e70 <SD_TxDataBlock+0x7c>
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	e000      	b.n	8000e72 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3710      	adds	r7, #16
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b084      	sub	sp, #16
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	4603      	mov	r3, r0
 8000e82:	6039      	str	r1, [r7, #0]
 8000e84:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 8000e86:	f7ff ff13 	bl	8000cb0 <SD_ReadyWait>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2bff      	cmp	r3, #255	@ 0xff
 8000e8e:	d001      	beq.n	8000e94 <SD_SendCmd+0x1a>
 8000e90:	23ff      	movs	r3, #255	@ 0xff
 8000e92:	e042      	b.n	8000f1a <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000e94:	79fb      	ldrb	r3, [r7, #7]
 8000e96:	4618      	mov	r0, r3
 8000e98:	f7ff feac 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	0e1b      	lsrs	r3, r3, #24
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	f7ff fea6 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	0c1b      	lsrs	r3, r3, #16
 8000eac:	b2db      	uxtb	r3, r3
 8000eae:	4618      	mov	r0, r3
 8000eb0:	f7ff fea0 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	0a1b      	lsrs	r3, r3, #8
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f7ff fe9a 	bl	8000bf4 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	b2db      	uxtb	r3, r3
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff fe95 	bl	8000bf4 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 8000eca:	79fb      	ldrb	r3, [r7, #7]
 8000ecc:	2b40      	cmp	r3, #64	@ 0x40
 8000ece:	d102      	bne.n	8000ed6 <SD_SendCmd+0x5c>
 8000ed0:	2395      	movs	r3, #149	@ 0x95
 8000ed2:	73fb      	strb	r3, [r7, #15]
 8000ed4:	e007      	b.n	8000ee6 <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 8000ed6:	79fb      	ldrb	r3, [r7, #7]
 8000ed8:	2b48      	cmp	r3, #72	@ 0x48
 8000eda:	d102      	bne.n	8000ee2 <SD_SendCmd+0x68>
 8000edc:	2387      	movs	r3, #135	@ 0x87
 8000ede:	73fb      	strb	r3, [r7, #15]
 8000ee0:	e001      	b.n	8000ee6 <SD_SendCmd+0x6c>
  else crc = 1;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff fe83 	bl	8000bf4 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 8000eee:	79fb      	ldrb	r3, [r7, #7]
 8000ef0:	2b4c      	cmp	r3, #76	@ 0x4c
 8000ef2:	d101      	bne.n	8000ef8 <SD_SendCmd+0x7e>
 8000ef4:	f7ff feb2 	bl	8000c5c <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 8000ef8:	230a      	movs	r3, #10
 8000efa:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 8000efc:	f7ff feae 	bl	8000c5c <SPI_RxByte>
 8000f00:	4603      	mov	r3, r0
 8000f02:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 8000f04:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	da05      	bge.n	8000f18 <SD_SendCmd+0x9e>
 8000f0c:	7bbb      	ldrb	r3, [r7, #14]
 8000f0e:	3b01      	subs	r3, #1
 8000f10:	73bb      	strb	r3, [r7, #14]
 8000f12:	7bbb      	ldrb	r3, [r7, #14]
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d1f1      	bne.n	8000efc <SD_SendCmd+0x82>

  return res;
 8000f18:	7b7b      	ldrb	r3, [r7, #13]
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3710      	adds	r7, #16
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 8000f24:	b590      	push	{r4, r7, lr}
 8000f26:	b085      	sub	sp, #20
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 8000f2e:	79fb      	ldrb	r3, [r7, #7]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <SD_disk_initialize+0x14>
 8000f34:	2301      	movs	r3, #1
 8000f36:	e0d1      	b.n	80010dc <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 8000f38:	4b6a      	ldr	r3, [pc, #424]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	b2db      	uxtb	r3, r3
 8000f3e:	f003 0302 	and.w	r3, r3, #2
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d003      	beq.n	8000f4e <SD_disk_initialize+0x2a>
 8000f46:	4b67      	ldr	r3, [pc, #412]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	e0c6      	b.n	80010dc <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000f4e:	f7ff fec9 	bl	8000ce4 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000f52:	f7ff fe33 	bl	8000bbc <SELECT>

  /* check disk type */
  type = 0;
 8000f56:	2300      	movs	r3, #0
 8000f58:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 8000f5a:	2100      	movs	r1, #0
 8000f5c:	2040      	movs	r0, #64	@ 0x40
 8000f5e:	f7ff ff8c 	bl	8000e7a <SD_SendCmd>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b01      	cmp	r3, #1
 8000f66:	f040 80a1 	bne.w	80010ac <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 8000f6a:	4b5f      	ldr	r3, [pc, #380]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000f6c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000f70:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000f72:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8000f76:	2048      	movs	r0, #72	@ 0x48
 8000f78:	f7ff ff7f 	bl	8000e7a <SD_SendCmd>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b01      	cmp	r3, #1
 8000f80:	d155      	bne.n	800102e <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
 8000f86:	e00c      	b.n	8000fa2 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 8000f88:	7bfc      	ldrb	r4, [r7, #15]
 8000f8a:	f7ff fe67 	bl	8000c5c <SPI_RxByte>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	461a      	mov	r2, r3
 8000f92:	f104 0310 	add.w	r3, r4, #16
 8000f96:	443b      	add	r3, r7
 8000f98:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000f9c:	7bfb      	ldrb	r3, [r7, #15]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	73fb      	strb	r3, [r7, #15]
 8000fa2:	7bfb      	ldrb	r3, [r7, #15]
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d9ef      	bls.n	8000f88 <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8000fa8:	7abb      	ldrb	r3, [r7, #10]
 8000faa:	2b01      	cmp	r3, #1
 8000fac:	d17e      	bne.n	80010ac <SD_disk_initialize+0x188>
 8000fae:	7afb      	ldrb	r3, [r7, #11]
 8000fb0:	2baa      	cmp	r3, #170	@ 0xaa
 8000fb2:	d17b      	bne.n	80010ac <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2077      	movs	r0, #119	@ 0x77
 8000fb8:	f7ff ff5f 	bl	8000e7a <SD_SendCmd>
 8000fbc:	4603      	mov	r3, r0
 8000fbe:	2b01      	cmp	r3, #1
 8000fc0:	d807      	bhi.n	8000fd2 <SD_disk_initialize+0xae>
 8000fc2:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8000fc6:	2069      	movs	r0, #105	@ 0x69
 8000fc8:	f7ff ff57 	bl	8000e7a <SD_SendCmd>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d004      	beq.n	8000fdc <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000fd2:	4b45      	ldr	r3, [pc, #276]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fd4:	881b      	ldrh	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d1ec      	bne.n	8000fb4 <SD_disk_initialize+0x90>
 8000fda:	e000      	b.n	8000fde <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000fdc:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 8000fde:	4b42      	ldr	r3, [pc, #264]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8000fe0:	881b      	ldrh	r3, [r3, #0]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d062      	beq.n	80010ac <SD_disk_initialize+0x188>
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	207a      	movs	r0, #122	@ 0x7a
 8000fea:	f7ff ff46 	bl	8000e7a <SD_SendCmd>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d15b      	bne.n	80010ac <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	73fb      	strb	r3, [r7, #15]
 8000ff8:	e00c      	b.n	8001014 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 8000ffa:	7bfc      	ldrb	r4, [r7, #15]
 8000ffc:	f7ff fe2e 	bl	8000c5c <SPI_RxByte>
 8001000:	4603      	mov	r3, r0
 8001002:	461a      	mov	r2, r3
 8001004:	f104 0310 	add.w	r3, r4, #16
 8001008:	443b      	add	r3, r7
 800100a:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
 8001014:	7bfb      	ldrb	r3, [r7, #15]
 8001016:	2b03      	cmp	r3, #3
 8001018:	d9ef      	bls.n	8000ffa <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 800101a:	7a3b      	ldrb	r3, [r7, #8]
 800101c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <SD_disk_initialize+0x104>
 8001024:	230c      	movs	r3, #12
 8001026:	e000      	b.n	800102a <SD_disk_initialize+0x106>
 8001028:	2304      	movs	r3, #4
 800102a:	73bb      	strb	r3, [r7, #14]
 800102c:	e03e      	b.n	80010ac <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 800102e:	2100      	movs	r1, #0
 8001030:	2077      	movs	r0, #119	@ 0x77
 8001032:	f7ff ff22 	bl	8000e7a <SD_SendCmd>
 8001036:	4603      	mov	r3, r0
 8001038:	2b01      	cmp	r3, #1
 800103a:	d808      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800103c:	2100      	movs	r1, #0
 800103e:	2069      	movs	r0, #105	@ 0x69
 8001040:	f7ff ff1b 	bl	8000e7a <SD_SendCmd>
 8001044:	4603      	mov	r3, r0
 8001046:	2b01      	cmp	r3, #1
 8001048:	d801      	bhi.n	800104e <SD_disk_initialize+0x12a>
 800104a:	2302      	movs	r3, #2
 800104c:	e000      	b.n	8001050 <SD_disk_initialize+0x12c>
 800104e:	2301      	movs	r3, #1
 8001050:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8001052:	7bbb      	ldrb	r3, [r7, #14]
 8001054:	2b02      	cmp	r3, #2
 8001056:	d10e      	bne.n	8001076 <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8001058:	2100      	movs	r1, #0
 800105a:	2077      	movs	r0, #119	@ 0x77
 800105c:	f7ff ff0d 	bl	8000e7a <SD_SendCmd>
 8001060:	4603      	mov	r3, r0
 8001062:	2b01      	cmp	r3, #1
 8001064:	d80e      	bhi.n	8001084 <SD_disk_initialize+0x160>
 8001066:	2100      	movs	r1, #0
 8001068:	2069      	movs	r0, #105	@ 0x69
 800106a:	f7ff ff06 	bl	8000e7a <SD_SendCmd>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d107      	bne.n	8001084 <SD_disk_initialize+0x160>
 8001074:	e00c      	b.n	8001090 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8001076:	2100      	movs	r1, #0
 8001078:	2041      	movs	r0, #65	@ 0x41
 800107a:	f7ff fefe 	bl	8000e7a <SD_SendCmd>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d004      	beq.n	800108e <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8001084:	4b18      	ldr	r3, [pc, #96]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001086:	881b      	ldrh	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	d1e2      	bne.n	8001052 <SD_disk_initialize+0x12e>
 800108c:	e000      	b.n	8001090 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 800108e:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8001090:	4b15      	ldr	r3, [pc, #84]	@ (80010e8 <SD_disk_initialize+0x1c4>)
 8001092:	881b      	ldrh	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d007      	beq.n	80010a8 <SD_disk_initialize+0x184>
 8001098:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800109c:	2050      	movs	r0, #80	@ 0x50
 800109e:	f7ff feec 	bl	8000e7a <SD_SendCmd>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <SD_disk_initialize+0x188>
 80010a8:	2300      	movs	r3, #0
 80010aa:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 80010ac:	4a0f      	ldr	r2, [pc, #60]	@ (80010ec <SD_disk_initialize+0x1c8>)
 80010ae:	7bbb      	ldrb	r3, [r7, #14]
 80010b0:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 80010b2:	f7ff fd91 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80010b6:	f7ff fdd1 	bl	8000c5c <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 80010ba:	7bbb      	ldrb	r3, [r7, #14]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d008      	beq.n	80010d2 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 80010c0:	4b08      	ldr	r3, [pc, #32]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	4b05      	ldr	r3, [pc, #20]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010ce:	701a      	strb	r2, [r3, #0]
 80010d0:	e001      	b.n	80010d6 <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80010d2:	f7ff fe49 	bl	8000d68 <SD_PowerOff>
  }

  return Stat;
 80010d6:	4b03      	ldr	r3, [pc, #12]	@ (80010e4 <SD_disk_initialize+0x1c0>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	b2db      	uxtb	r3, r3
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3714      	adds	r7, #20
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd90      	pop	{r4, r7, pc}
 80010e4:	20000000 	.word	0x20000000
 80010e8:	2000009c 	.word	0x2000009c
 80010ec:	200000a0 	.word	0x200000a0

080010f0 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b083      	sub	sp, #12
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d001      	beq.n	8001104 <SD_disk_status+0x14>
 8001100:	2301      	movs	r3, #1
 8001102:	e002      	b.n	800110a <SD_disk_status+0x1a>
  return Stat;
 8001104:	4b04      	ldr	r3, [pc, #16]	@ (8001118 <SD_disk_status+0x28>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	b2db      	uxtb	r3, r3
}
 800110a:	4618      	mov	r0, r3
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr
 8001116:	bf00      	nop
 8001118:	20000000 	.word	0x20000000

0800111c <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 800111c:	b580      	push	{r7, lr}
 800111e:	b084      	sub	sp, #16
 8001120:	af00      	add	r7, sp, #0
 8001122:	60b9      	str	r1, [r7, #8]
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	603b      	str	r3, [r7, #0]
 8001128:	4603      	mov	r3, r0
 800112a:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 800112c:	7bfb      	ldrb	r3, [r7, #15]
 800112e:	2b00      	cmp	r3, #0
 8001130:	d102      	bne.n	8001138 <SD_disk_read+0x1c>
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d101      	bne.n	800113c <SD_disk_read+0x20>
 8001138:	2304      	movs	r3, #4
 800113a:	e051      	b.n	80011e0 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800113c:	4b2a      	ldr	r3, [pc, #168]	@ (80011e8 <SD_disk_read+0xcc>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	b2db      	uxtb	r3, r3
 8001142:	f003 0301 	and.w	r3, r3, #1
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <SD_disk_read+0x32>
 800114a:	2303      	movs	r3, #3
 800114c:	e048      	b.n	80011e0 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 800114e:	4b27      	ldr	r3, [pc, #156]	@ (80011ec <SD_disk_read+0xd0>)
 8001150:	781b      	ldrb	r3, [r3, #0]
 8001152:	f003 0304 	and.w	r3, r3, #4
 8001156:	2b00      	cmp	r3, #0
 8001158:	d102      	bne.n	8001160 <SD_disk_read+0x44>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	025b      	lsls	r3, r3, #9
 800115e:	607b      	str	r3, [r7, #4]

  SELECT();
 8001160:	f7ff fd2c 	bl	8000bbc <SELECT>

  if (count == 1)
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d111      	bne.n	800118e <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 800116a:	6879      	ldr	r1, [r7, #4]
 800116c:	2051      	movs	r0, #81	@ 0x51
 800116e:	f7ff fe84 	bl	8000e7a <SD_SendCmd>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d129      	bne.n	80011cc <SD_disk_read+0xb0>
 8001178:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800117c:	68b8      	ldr	r0, [r7, #8]
 800117e:	f7ff fe0b 	bl	8000d98 <SD_RxDataBlock>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d021      	beq.n	80011cc <SD_disk_read+0xb0>
 8001188:	2300      	movs	r3, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	e01e      	b.n	80011cc <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	2052      	movs	r0, #82	@ 0x52
 8001192:	f7ff fe72 	bl	8000e7a <SD_SendCmd>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d117      	bne.n	80011cc <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 800119c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80011a0:	68b8      	ldr	r0, [r7, #8]
 80011a2:	f7ff fdf9 	bl	8000d98 <SD_RxDataBlock>
 80011a6:	4603      	mov	r3, r0
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d00a      	beq.n	80011c2 <SD_disk_read+0xa6>
        buff += 512;
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80011b2:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	3b01      	subs	r3, #1
 80011b8:	603b      	str	r3, [r7, #0]
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d1ed      	bne.n	800119c <SD_disk_read+0x80>
 80011c0:	e000      	b.n	80011c4 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 80011c2:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 80011c4:	2100      	movs	r1, #0
 80011c6:	204c      	movs	r0, #76	@ 0x4c
 80011c8:	f7ff fe57 	bl	8000e7a <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 80011cc:	f7ff fd04 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80011d0:	f7ff fd44 	bl	8000c5c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	bf14      	ite	ne
 80011da:	2301      	movne	r3, #1
 80011dc:	2300      	moveq	r3, #0
 80011de:	b2db      	uxtb	r3, r3
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000000 	.word	0x20000000
 80011ec:	200000a0 	.word	0x200000a0

080011f0 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b084      	sub	sp, #16
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	4603      	mov	r3, r0
 80011fe:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d102      	bne.n	800120c <SD_disk_write+0x1c>
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d101      	bne.n	8001210 <SD_disk_write+0x20>
 800120c:	2304      	movs	r3, #4
 800120e:	e06b      	b.n	80012e8 <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8001210:	4b37      	ldr	r3, [pc, #220]	@ (80012f0 <SD_disk_write+0x100>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <SD_disk_write+0x32>
 800121e:	2303      	movs	r3, #3
 8001220:	e062      	b.n	80012e8 <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8001222:	4b33      	ldr	r3, [pc, #204]	@ (80012f0 <SD_disk_write+0x100>)
 8001224:	781b      	ldrb	r3, [r3, #0]
 8001226:	b2db      	uxtb	r3, r3
 8001228:	f003 0304 	and.w	r3, r3, #4
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SD_disk_write+0x44>
 8001230:	2302      	movs	r3, #2
 8001232:	e059      	b.n	80012e8 <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8001234:	4b2f      	ldr	r3, [pc, #188]	@ (80012f4 <SD_disk_write+0x104>)
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	f003 0304 	and.w	r3, r3, #4
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <SD_disk_write+0x56>
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	607b      	str	r3, [r7, #4]

  SELECT();
 8001246:	f7ff fcb9 	bl	8000bbc <SELECT>

  if (count == 1)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	2b01      	cmp	r3, #1
 800124e:	d110      	bne.n	8001272 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8001250:	6879      	ldr	r1, [r7, #4]
 8001252:	2058      	movs	r0, #88	@ 0x58
 8001254:	f7ff fe11 	bl	8000e7a <SD_SendCmd>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d13a      	bne.n	80012d4 <SD_disk_write+0xe4>
 800125e:	21fe      	movs	r1, #254	@ 0xfe
 8001260:	68b8      	ldr	r0, [r7, #8]
 8001262:	f7ff fdc7 	bl	8000df4 <SD_TxDataBlock>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d033      	beq.n	80012d4 <SD_disk_write+0xe4>
      count = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	603b      	str	r3, [r7, #0]
 8001270:	e030      	b.n	80012d4 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8001272:	4b20      	ldr	r3, [pc, #128]	@ (80012f4 <SD_disk_write+0x104>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	f003 0302 	and.w	r3, r3, #2
 800127a:	2b00      	cmp	r3, #0
 800127c:	d007      	beq.n	800128e <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 800127e:	2100      	movs	r1, #0
 8001280:	2077      	movs	r0, #119	@ 0x77
 8001282:	f7ff fdfa 	bl	8000e7a <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	2057      	movs	r0, #87	@ 0x57
 800128a:	f7ff fdf6 	bl	8000e7a <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 800128e:	6879      	ldr	r1, [r7, #4]
 8001290:	2059      	movs	r0, #89	@ 0x59
 8001292:	f7ff fdf2 	bl	8000e7a <SD_SendCmd>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d11b      	bne.n	80012d4 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 800129c:	21fc      	movs	r1, #252	@ 0xfc
 800129e:	68b8      	ldr	r0, [r7, #8]
 80012a0:	f7ff fda8 	bl	8000df4 <SD_TxDataBlock>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00a      	beq.n	80012c0 <SD_disk_write+0xd0>
        buff += 512;
 80012aa:	68bb      	ldr	r3, [r7, #8]
 80012ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80012b0:	60bb      	str	r3, [r7, #8]
      } while (--count);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	3b01      	subs	r3, #1
 80012b6:	603b      	str	r3, [r7, #0]
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d1ee      	bne.n	800129c <SD_disk_write+0xac>
 80012be:	e000      	b.n	80012c2 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 80012c0:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 80012c2:	21fd      	movs	r1, #253	@ 0xfd
 80012c4:	2000      	movs	r0, #0
 80012c6:	f7ff fd95 	bl	8000df4 <SD_TxDataBlock>
 80012ca:	4603      	mov	r3, r0
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d101      	bne.n	80012d4 <SD_disk_write+0xe4>
      {
        count = 1;
 80012d0:	2301      	movs	r3, #1
 80012d2:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 80012d4:	f7ff fc80 	bl	8000bd8 <DESELECT>
  SPI_RxByte();
 80012d8:	f7ff fcc0 	bl	8000c5c <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	bf14      	ite	ne
 80012e2:	2301      	movne	r3, #1
 80012e4:	2300      	moveq	r3, #0
 80012e6:	b2db      	uxtb	r3, r3
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	3710      	adds	r7, #16
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	20000000 	.word	0x20000000
 80012f4:	200000a0 	.word	0x200000a0

080012f8 <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 80012f8:	b590      	push	{r4, r7, lr}
 80012fa:	b08b      	sub	sp, #44	@ 0x2c
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	603a      	str	r2, [r7, #0]
 8001302:	71fb      	strb	r3, [r7, #7]
 8001304:	460b      	mov	r3, r1
 8001306:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SD_disk_ioctl+0x1e>
 8001312:	2304      	movs	r3, #4
 8001314:	e113      	b.n	800153e <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 800131c:	79bb      	ldrb	r3, [r7, #6]
 800131e:	2b05      	cmp	r3, #5
 8001320:	d124      	bne.n	800136c <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8001322:	6a3b      	ldr	r3, [r7, #32]
 8001324:	781b      	ldrb	r3, [r3, #0]
 8001326:	2b02      	cmp	r3, #2
 8001328:	d012      	beq.n	8001350 <SD_disk_ioctl+0x58>
 800132a:	2b02      	cmp	r3, #2
 800132c:	dc1a      	bgt.n	8001364 <SD_disk_ioctl+0x6c>
 800132e:	2b00      	cmp	r3, #0
 8001330:	d002      	beq.n	8001338 <SD_disk_ioctl+0x40>
 8001332:	2b01      	cmp	r3, #1
 8001334:	d006      	beq.n	8001344 <SD_disk_ioctl+0x4c>
 8001336:	e015      	b.n	8001364 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8001338:	f7ff fd16 	bl	8000d68 <SD_PowerOff>
      res = RES_OK;
 800133c:	2300      	movs	r3, #0
 800133e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001342:	e0fa      	b.n	800153a <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8001344:	f7ff fcce 	bl	8000ce4 <SD_PowerOn>
      res = RES_OK;
 8001348:	2300      	movs	r3, #0
 800134a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 800134e:	e0f4      	b.n	800153a <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8001350:	6a3b      	ldr	r3, [r7, #32]
 8001352:	1c5c      	adds	r4, r3, #1
 8001354:	f7ff fd14 	bl	8000d80 <SD_CheckPower>
 8001358:	4603      	mov	r3, r0
 800135a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 800135c:	2300      	movs	r3, #0
 800135e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001362:	e0ea      	b.n	800153a <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8001364:	2304      	movs	r3, #4
 8001366:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800136a:	e0e6      	b.n	800153a <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 800136c:	4b76      	ldr	r3, [pc, #472]	@ (8001548 <SD_disk_ioctl+0x250>)
 800136e:	781b      	ldrb	r3, [r3, #0]
 8001370:	b2db      	uxtb	r3, r3
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <SD_disk_ioctl+0x86>
 800137a:	2303      	movs	r3, #3
 800137c:	e0df      	b.n	800153e <SD_disk_ioctl+0x246>

    SELECT();
 800137e:	f7ff fc1d 	bl	8000bbc <SELECT>

    switch (ctrl)
 8001382:	79bb      	ldrb	r3, [r7, #6]
 8001384:	2b0d      	cmp	r3, #13
 8001386:	f200 80c9 	bhi.w	800151c <SD_disk_ioctl+0x224>
 800138a:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <SD_disk_ioctl+0x98>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	08001487 	.word	0x08001487
 8001394:	080013c9 	.word	0x080013c9
 8001398:	08001477 	.word	0x08001477
 800139c:	0800151d 	.word	0x0800151d
 80013a0:	0800151d 	.word	0x0800151d
 80013a4:	0800151d 	.word	0x0800151d
 80013a8:	0800151d 	.word	0x0800151d
 80013ac:	0800151d 	.word	0x0800151d
 80013b0:	0800151d 	.word	0x0800151d
 80013b4:	0800151d 	.word	0x0800151d
 80013b8:	0800151d 	.word	0x0800151d
 80013bc:	08001499 	.word	0x08001499
 80013c0:	080014bd 	.word	0x080014bd
 80013c4:	080014e1 	.word	0x080014e1
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 80013c8:	2100      	movs	r1, #0
 80013ca:	2049      	movs	r0, #73	@ 0x49
 80013cc:	f7ff fd55 	bl	8000e7a <SD_SendCmd>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	f040 80a6 	bne.w	8001524 <SD_disk_ioctl+0x22c>
 80013d8:	f107 030c 	add.w	r3, r7, #12
 80013dc:	2110      	movs	r1, #16
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fcda 	bl	8000d98 <SD_RxDataBlock>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	f000 809c 	beq.w	8001524 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 80013ec:	7b3b      	ldrb	r3, [r7, #12]
 80013ee:	099b      	lsrs	r3, r3, #6
 80013f0:	b2db      	uxtb	r3, r3
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d10d      	bne.n	8001412 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 80013f6:	7d7b      	ldrb	r3, [r7, #21]
 80013f8:	461a      	mov	r2, r3
 80013fa:	7d3b      	ldrb	r3, [r7, #20]
 80013fc:	021b      	lsls	r3, r3, #8
 80013fe:	b29b      	uxth	r3, r3
 8001400:	4413      	add	r3, r2
 8001402:	b29b      	uxth	r3, r3
 8001404:	3301      	adds	r3, #1
 8001406:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8001408:	8bfb      	ldrh	r3, [r7, #30]
 800140a:	029a      	lsls	r2, r3, #10
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	e02d      	b.n	800146e <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8001412:	7c7b      	ldrb	r3, [r7, #17]
 8001414:	f003 030f 	and.w	r3, r3, #15
 8001418:	b2da      	uxtb	r2, r3
 800141a:	7dbb      	ldrb	r3, [r7, #22]
 800141c:	09db      	lsrs	r3, r3, #7
 800141e:	b2db      	uxtb	r3, r3
 8001420:	4413      	add	r3, r2
 8001422:	b2da      	uxtb	r2, r3
 8001424:	7d7b      	ldrb	r3, [r7, #21]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	f003 0306 	and.w	r3, r3, #6
 800142e:	b2db      	uxtb	r3, r3
 8001430:	4413      	add	r3, r2
 8001432:	b2db      	uxtb	r3, r3
 8001434:	3302      	adds	r3, #2
 8001436:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 800143a:	7d3b      	ldrb	r3, [r7, #20]
 800143c:	099b      	lsrs	r3, r3, #6
 800143e:	b2db      	uxtb	r3, r3
 8001440:	461a      	mov	r2, r3
 8001442:	7cfb      	ldrb	r3, [r7, #19]
 8001444:	009b      	lsls	r3, r3, #2
 8001446:	b29b      	uxth	r3, r3
 8001448:	4413      	add	r3, r2
 800144a:	b29a      	uxth	r2, r3
 800144c:	7cbb      	ldrb	r3, [r7, #18]
 800144e:	029b      	lsls	r3, r3, #10
 8001450:	b29b      	uxth	r3, r3
 8001452:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001456:	b29b      	uxth	r3, r3
 8001458:	4413      	add	r3, r2
 800145a:	b29b      	uxth	r3, r3
 800145c:	3301      	adds	r3, #1
 800145e:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8001460:	8bfa      	ldrh	r2, [r7, #30]
 8001462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001466:	3b09      	subs	r3, #9
 8001468:	409a      	lsls	r2, r3
 800146a:	683b      	ldr	r3, [r7, #0]
 800146c:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 800146e:	2300      	movs	r3, #0
 8001470:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8001474:	e056      	b.n	8001524 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800147c:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 800147e:	2300      	movs	r3, #0
 8001480:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001484:	e055      	b.n	8001532 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8001486:	f7ff fc13 	bl	8000cb0 <SD_ReadyWait>
 800148a:	4603      	mov	r3, r0
 800148c:	2bff      	cmp	r3, #255	@ 0xff
 800148e:	d14b      	bne.n	8001528 <SD_disk_ioctl+0x230>
 8001490:	2300      	movs	r3, #0
 8001492:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8001496:	e047      	b.n	8001528 <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8001498:	2100      	movs	r1, #0
 800149a:	2049      	movs	r0, #73	@ 0x49
 800149c:	f7ff fced 	bl	8000e7a <SD_SendCmd>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d142      	bne.n	800152c <SD_disk_ioctl+0x234>
 80014a6:	2110      	movs	r1, #16
 80014a8:	6a38      	ldr	r0, [r7, #32]
 80014aa:	f7ff fc75 	bl	8000d98 <SD_RxDataBlock>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d03b      	beq.n	800152c <SD_disk_ioctl+0x234>
 80014b4:	2300      	movs	r3, #0
 80014b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014ba:	e037      	b.n	800152c <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 80014bc:	2100      	movs	r1, #0
 80014be:	204a      	movs	r0, #74	@ 0x4a
 80014c0:	f7ff fcdb 	bl	8000e7a <SD_SendCmd>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d132      	bne.n	8001530 <SD_disk_ioctl+0x238>
 80014ca:	2110      	movs	r1, #16
 80014cc:	6a38      	ldr	r0, [r7, #32]
 80014ce:	f7ff fc63 	bl	8000d98 <SD_RxDataBlock>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d02b      	beq.n	8001530 <SD_disk_ioctl+0x238>
 80014d8:	2300      	movs	r3, #0
 80014da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 80014de:	e027      	b.n	8001530 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 80014e0:	2100      	movs	r1, #0
 80014e2:	207a      	movs	r0, #122	@ 0x7a
 80014e4:	f7ff fcc9 	bl	8000e7a <SD_SendCmd>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d116      	bne.n	800151c <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 80014ee:	2300      	movs	r3, #0
 80014f0:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80014f4:	e00b      	b.n	800150e <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 80014f6:	6a3c      	ldr	r4, [r7, #32]
 80014f8:	1c63      	adds	r3, r4, #1
 80014fa:	623b      	str	r3, [r7, #32]
 80014fc:	f7ff fbae 	bl	8000c5c <SPI_RxByte>
 8001500:	4603      	mov	r3, r0
 8001502:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8001504:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001508:	3301      	adds	r3, #1
 800150a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800150e:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001512:	2b03      	cmp	r3, #3
 8001514:	d9ef      	bls.n	80014f6 <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8001516:	2300      	movs	r3, #0
 8001518:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 800151c:	2304      	movs	r3, #4
 800151e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8001522:	e006      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001524:	bf00      	nop
 8001526:	e004      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001528:	bf00      	nop
 800152a:	e002      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 800152c:	bf00      	nop
 800152e:	e000      	b.n	8001532 <SD_disk_ioctl+0x23a>
      break;
 8001530:	bf00      	nop
    }

    DESELECT();
 8001532:	f7ff fb51 	bl	8000bd8 <DESELECT>
    SPI_RxByte();
 8001536:	f7ff fb91 	bl	8000c5c <SPI_RxByte>
  }

  return res;
 800153a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800153e:	4618      	mov	r0, r3
 8001540:	372c      	adds	r7, #44	@ 0x2c
 8001542:	46bd      	mov	sp, r7
 8001544:	bd90      	pop	{r4, r7, pc}
 8001546:	bf00      	nop
 8001548:	20000000 	.word	0x20000000

0800154c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001550:	f000 fc4a 	bl	8001de8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001554:	f000 f80a 	bl	800156c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001558:	f000 f89c 	bl	8001694 <MX_GPIO_Init>
  MX_SPI1_Init();
 800155c:	f000 f864 	bl	8001628 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001560:	f002 f834 	bl	80035cc <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  process_SD_card();
 8001564:	f000 f96a 	bl	800183c <process_SD_card>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001568:	bf00      	nop
 800156a:	e7fd      	b.n	8001568 <main+0x1c>

0800156c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b094      	sub	sp, #80	@ 0x50
 8001570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2234      	movs	r2, #52	@ 0x34
 8001578:	2100      	movs	r1, #0
 800157a:	4618      	mov	r0, r3
 800157c:	f005 fcd2 	bl	8006f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001580:	f107 0308 	add.w	r3, r7, #8
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001590:	2300      	movs	r3, #0
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	4b22      	ldr	r3, [pc, #136]	@ (8001620 <SystemClock_Config+0xb4>)
 8001596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001598:	4a21      	ldr	r2, [pc, #132]	@ (8001620 <SystemClock_Config+0xb4>)
 800159a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800159e:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <SystemClock_Config+0xb4>)
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015a8:	607b      	str	r3, [r7, #4]
 80015aa:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015ac:	2300      	movs	r3, #0
 80015ae:	603b      	str	r3, [r7, #0]
 80015b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001624 <SystemClock_Config+0xb8>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001624 <SystemClock_Config+0xb8>)
 80015b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80015ba:	6013      	str	r3, [r2, #0]
 80015bc:	4b19      	ldr	r3, [pc, #100]	@ (8001624 <SystemClock_Config+0xb8>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015c4:	603b      	str	r3, [r7, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015cc:	2301      	movs	r3, #1
 80015ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015d0:	2310      	movs	r3, #16
 80015d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015d4:	2300      	movs	r3, #0
 80015d6:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015d8:	f107 031c 	add.w	r3, r7, #28
 80015dc:	4618      	mov	r0, r3
 80015de:	f001 f919 	bl	8002814 <HAL_RCC_OscConfig>
 80015e2:	4603      	mov	r3, r0
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d001      	beq.n	80015ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80015e8:	f000 fa38 	bl	8001a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015ec:	230f      	movs	r3, #15
 80015ee:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015f4:	2300      	movs	r3, #0
 80015f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80015f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80015fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80015fe:	2300      	movs	r3, #0
 8001600:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001602:	f107 0308 	add.w	r3, r7, #8
 8001606:	2100      	movs	r1, #0
 8001608:	4618      	mov	r0, r3
 800160a:	f000 ff17 	bl	800243c <HAL_RCC_ClockConfig>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <SystemClock_Config+0xac>
  {
    Error_Handler();
 8001614:	f000 fa22 	bl	8001a5c <Error_Handler>
  }
}
 8001618:	bf00      	nop
 800161a:	3750      	adds	r7, #80	@ 0x50
 800161c:	46bd      	mov	sp, r7
 800161e:	bd80      	pop	{r7, pc}
 8001620:	40023800 	.word	0x40023800
 8001624:	40007000 	.word	0x40007000

08001628 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800162c:	4b17      	ldr	r3, [pc, #92]	@ (800168c <MX_SPI1_Init+0x64>)
 800162e:	4a18      	ldr	r2, [pc, #96]	@ (8001690 <MX_SPI1_Init+0x68>)
 8001630:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001632:	4b16      	ldr	r3, [pc, #88]	@ (800168c <MX_SPI1_Init+0x64>)
 8001634:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001638:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800163a:	4b14      	ldr	r3, [pc, #80]	@ (800168c <MX_SPI1_Init+0x64>)
 800163c:	2200      	movs	r2, #0
 800163e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001640:	4b12      	ldr	r3, [pc, #72]	@ (800168c <MX_SPI1_Init+0x64>)
 8001642:	2200      	movs	r2, #0
 8001644:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001646:	4b11      	ldr	r3, [pc, #68]	@ (800168c <MX_SPI1_Init+0x64>)
 8001648:	2200      	movs	r2, #0
 800164a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800164c:	4b0f      	ldr	r3, [pc, #60]	@ (800168c <MX_SPI1_Init+0x64>)
 800164e:	2200      	movs	r2, #0
 8001650:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001652:	4b0e      	ldr	r3, [pc, #56]	@ (800168c <MX_SPI1_Init+0x64>)
 8001654:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001658:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800165a:	4b0c      	ldr	r3, [pc, #48]	@ (800168c <MX_SPI1_Init+0x64>)
 800165c:	2200      	movs	r2, #0
 800165e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001660:	4b0a      	ldr	r3, [pc, #40]	@ (800168c <MX_SPI1_Init+0x64>)
 8001662:	2200      	movs	r2, #0
 8001664:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001666:	4b09      	ldr	r3, [pc, #36]	@ (800168c <MX_SPI1_Init+0x64>)
 8001668:	2200      	movs	r2, #0
 800166a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800166c:	4b07      	ldr	r3, [pc, #28]	@ (800168c <MX_SPI1_Init+0x64>)
 800166e:	2200      	movs	r2, #0
 8001670:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <MX_SPI1_Init+0x64>)
 8001674:	220a      	movs	r2, #10
 8001676:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001678:	4804      	ldr	r0, [pc, #16]	@ (800168c <MX_SPI1_Init+0x64>)
 800167a:	f001 fb4f 	bl	8002d1c <HAL_SPI_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001684:	f000 f9ea 	bl	8001a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001688:	bf00      	nop
 800168a:	bd80      	pop	{r7, pc}
 800168c:	200000a4 	.word	0x200000a4
 8001690:	40013000 	.word	0x40013000

08001694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	b08c      	sub	sp, #48	@ 0x30
 8001698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	2200      	movs	r2, #0
 80016a0:	601a      	str	r2, [r3, #0]
 80016a2:	605a      	str	r2, [r3, #4]
 80016a4:	609a      	str	r2, [r3, #8]
 80016a6:	60da      	str	r2, [r3, #12]
 80016a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	4b5d      	ldr	r3, [pc, #372]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a5c      	ldr	r2, [pc, #368]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016b4:	f043 0304 	orr.w	r3, r3, #4
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b5a      	ldr	r3, [pc, #360]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0304 	and.w	r3, r3, #4
 80016c2:	61bb      	str	r3, [r7, #24]
 80016c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	4b56      	ldr	r3, [pc, #344]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ce:	4a55      	ldr	r2, [pc, #340]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80016d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80016d6:	4b53      	ldr	r3, [pc, #332]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b4f      	ldr	r3, [pc, #316]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ea:	4a4e      	ldr	r2, [pc, #312]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80016f2:	4b4c      	ldr	r3, [pc, #304]	@ (8001824 <MX_GPIO_Init+0x190>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b48      	ldr	r3, [pc, #288]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001706:	4a47      	ldr	r2, [pc, #284]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	@ 0x30
 800170e:	4b45      	ldr	r3, [pc, #276]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60bb      	str	r3, [r7, #8]
 800171e:	4b41      	ldr	r3, [pc, #260]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a40      	ldr	r2, [pc, #256]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001724:	f043 0308 	orr.w	r3, r3, #8
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b3e      	ldr	r3, [pc, #248]	@ (8001824 <MX_GPIO_Init+0x190>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0308 	and.w	r3, r3, #8
 8001732:	60bb      	str	r3, [r7, #8]
 8001734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	607b      	str	r3, [r7, #4]
 800173a:	4b3a      	ldr	r3, [pc, #232]	@ (8001824 <MX_GPIO_Init+0x190>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a39      	ldr	r2, [pc, #228]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001740:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b37      	ldr	r3, [pc, #220]	@ (8001824 <MX_GPIO_Init+0x190>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800174e:	607b      	str	r3, [r7, #4]
 8001750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin, GPIO_PIN_RESET);
 8001752:	2200      	movs	r2, #0
 8001754:	f244 01c1 	movw	r1, #16577	@ 0x40c1
 8001758:	4833      	ldr	r0, [pc, #204]	@ (8001828 <MX_GPIO_Init+0x194>)
 800175a:	f000 fe55 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800175e:	2200      	movs	r2, #0
 8001760:	2140      	movs	r1, #64	@ 0x40
 8001762:	4832      	ldr	r0, [pc, #200]	@ (800182c <MX_GPIO_Init+0x198>)
 8001764:	f000 fe50 	bl	8002408 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001768:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800176c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800176e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001772:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001774:	2300      	movs	r3, #0
 8001776:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001778:	f107 031c 	add.w	r3, r7, #28
 800177c:	4619      	mov	r1, r3
 800177e:	482c      	ldr	r0, [pc, #176]	@ (8001830 <MX_GPIO_Init+0x19c>)
 8001780:	f000 fcae 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin PB6 LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|GPIO_PIN_6|LD2_Pin;
 8001784:	f244 03c1 	movw	r3, #16577	@ 0x40c1
 8001788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178a:	2301      	movs	r3, #1
 800178c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001792:	2300      	movs	r3, #0
 8001794:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	4822      	ldr	r0, [pc, #136]	@ (8001828 <MX_GPIO_Init+0x194>)
 800179e:	f000 fc9f 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLK_RX_Pin STLK_TX_Pin */
  GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80017a2:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80017a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b4:	2307      	movs	r3, #7
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	481d      	ldr	r0, [pc, #116]	@ (8001834 <MX_GPIO_Init+0x1a0>)
 80017c0:	f000 fc8e 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80017c4:	2340      	movs	r3, #64	@ 0x40
 80017c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017c8:	2301      	movs	r3, #1
 80017ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	2300      	movs	r3, #0
 80017ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d0:	2300      	movs	r3, #0
 80017d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80017d4:	f107 031c 	add.w	r3, r7, #28
 80017d8:	4619      	mov	r1, r3
 80017da:	4814      	ldr	r0, [pc, #80]	@ (800182c <MX_GPIO_Init+0x198>)
 80017dc:	f000 fc80 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80017e0:	2380      	movs	r3, #128	@ 0x80
 80017e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80017e4:	2300      	movs	r3, #0
 80017e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e8:	2300      	movs	r3, #0
 80017ea:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80017ec:	f107 031c 	add.w	r3, r7, #28
 80017f0:	4619      	mov	r1, r3
 80017f2:	480e      	ldr	r0, [pc, #56]	@ (800182c <MX_GPIO_Init+0x198>)
 80017f4:	f000 fc74 	bl	80020e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80017f8:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 80017fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001806:	2303      	movs	r3, #3
 8001808:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800180a:	230a      	movs	r3, #10
 800180c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	4808      	ldr	r0, [pc, #32]	@ (8001838 <MX_GPIO_Init+0x1a4>)
 8001816:	f000 fc63 	bl	80020e0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800181a:	bf00      	nop
 800181c:	3730      	adds	r7, #48	@ 0x30
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40023800 	.word	0x40023800
 8001828:	40020400 	.word	0x40020400
 800182c:	40021800 	.word	0x40021800
 8001830:	40020800 	.word	0x40020800
 8001834:	40020c00 	.word	0x40020c00
 8001838:	40020000 	.word	0x40020000

0800183c <process_SD_card>:

/* USER CODE BEGIN 4 */
void process_SD_card( void )
{
 800183c:	b580      	push	{r7, lr}
 800183e:	f5ad 5d03 	sub.w	sp, sp, #8384	@ 0x20c0
 8001842:	b088      	sub	sp, #32
 8001844:	af00      	add	r7, sp, #0
  char        buf[100];

  do
  {
    //Mount the SD Card
    fres = f_mount(&FatFs, "", 1);    //1=mount now
 8001846:	f507 5385 	add.w	r3, r7, #4256	@ 0x10a0
 800184a:	3b04      	subs	r3, #4
 800184c:	2201      	movs	r2, #1
 800184e:	4976      	ldr	r1, [pc, #472]	@ (8001a28 <process_SD_card+0x1ec>)
 8001850:	4618      	mov	r0, r3
 8001852:	f004 f903 	bl	8005a5c <f_mount>
 8001856:	4603      	mov	r3, r0
 8001858:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800185c:	f102 021f 	add.w	r2, r2, #31
 8001860:	7013      	strb	r3, [r2, #0]
    if (fres != FR_OK)
 8001862:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001866:	f103 031f 	add.w	r3, r3, #31
 800186a:	781b      	ldrb	r3, [r3, #0]
 800186c:	2b00      	cmp	r3, #0
 800186e:	d009      	beq.n	8001884 <process_SD_card+0x48>
    {
      printf("No SD Card found : (%i)\r\n", fres);
 8001870:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001874:	f103 031f 	add.w	r3, r3, #31
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	4619      	mov	r1, r3
 800187c:	486b      	ldr	r0, [pc, #428]	@ (8001a2c <process_SD_card+0x1f0>)
 800187e:	f005 fa09 	bl	8006c94 <iprintf>
      break;
 8001882:	e0c2      	b.n	8001a0a <process_SD_card+0x1ce>
    }
    printf("SD Card Mounted Successfully!!!\r\n");
 8001884:	486a      	ldr	r0, [pc, #424]	@ (8001a30 <process_SD_card+0x1f4>)
 8001886:	f005 fa6d 	bl	8006d64 <puts>
    //Read the SD Card Total size and Free Size
    FATFS *pfs;
    DWORD fre_clust;
    uint32_t totalSpace, freeSpace;

    f_getfree("", &fre_clust, &pfs);
 800188a:	f107 0220 	add.w	r2, r7, #32
 800188e:	3a1c      	subs	r2, #28
 8001890:	f107 0320 	add.w	r3, r7, #32
 8001894:	3b20      	subs	r3, #32
 8001896:	4619      	mov	r1, r3
 8001898:	4863      	ldr	r0, [pc, #396]	@ (8001a28 <process_SD_card+0x1ec>)
 800189a:	f004 fe88 	bl	80065ae <f_getfree>
    totalSpace = (uint32_t)((pfs->n_fatent - 2) * pfs->csize * 0.5);
 800189e:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018a2:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80018a6:	69db      	ldr	r3, [r3, #28]
 80018a8:	3b02      	subs	r3, #2
 80018aa:	f107 02e0 	add.w	r2, r7, #224	@ 0xe0
 80018ae:	f852 2cdc 	ldr.w	r2, [r2, #-220]
 80018b2:	8952      	ldrh	r2, [r2, #10]
 80018b4:	fb02 f303 	mul.w	r3, r2, r3
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe ff6d 	bl	8000798 <__aeabi_ui2d>
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	4b5c      	ldr	r3, [pc, #368]	@ (8001a34 <process_SD_card+0x1f8>)
 80018c4:	f7fe fcfc 	bl	80002c0 <__aeabi_dmul>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7fe ffdc 	bl	800088c <__aeabi_d2uiz>
 80018d4:	4603      	mov	r3, r0
 80018d6:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80018da:	f102 0218 	add.w	r2, r2, #24
 80018de:	6013      	str	r3, [r2, #0]
    freeSpace = (uint32_t)(fre_clust * pfs->csize * 0.5);
 80018e0:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018e4:	f853 3cdc 	ldr.w	r3, [r3, #-220]
 80018e8:	895b      	ldrh	r3, [r3, #10]
 80018ea:	461a      	mov	r2, r3
 80018ec:	f107 03e0 	add.w	r3, r7, #224	@ 0xe0
 80018f0:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 80018f4:	fb02 f303 	mul.w	r3, r2, r3
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7fe ff4d 	bl	8000798 <__aeabi_ui2d>
 80018fe:	f04f 0200 	mov.w	r2, #0
 8001902:	4b4c      	ldr	r3, [pc, #304]	@ (8001a34 <process_SD_card+0x1f8>)
 8001904:	f7fe fcdc 	bl	80002c0 <__aeabi_dmul>
 8001908:	4602      	mov	r2, r0
 800190a:	460b      	mov	r3, r1
 800190c:	4610      	mov	r0, r2
 800190e:	4619      	mov	r1, r3
 8001910:	f7fe ffbc 	bl	800088c <__aeabi_d2uiz>
 8001914:	4603      	mov	r3, r0
 8001916:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 800191a:	f102 0214 	add.w	r2, r2, #20
 800191e:	6013      	str	r3, [r2, #0]

    printf("TotalSpace : %lu bytes, FreeSpace = %lu bytes\n", totalSpace, freeSpace);
 8001920:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001924:	f103 0314 	add.w	r3, r3, #20
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800192e:	f103 0318 	add.w	r3, r3, #24
 8001932:	6819      	ldr	r1, [r3, #0]
 8001934:	4840      	ldr	r0, [pc, #256]	@ (8001a38 <process_SD_card+0x1fc>)
 8001936:	f005 f9ad 	bl	8006c94 <iprintf>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_WRITE | FA_READ | FA_CREATE_ALWAYS);
 800193a:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800193e:	3b34      	subs	r3, #52	@ 0x34
 8001940:	220b      	movs	r2, #11
 8001942:	493e      	ldr	r1, [pc, #248]	@ (8001a3c <process_SD_card+0x200>)
 8001944:	4618      	mov	r0, r3
 8001946:	f004 f8cf 	bl	8005ae8 <f_open>
 800194a:	4603      	mov	r3, r0
 800194c:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 8001950:	f102 021f 	add.w	r2, r2, #31
 8001954:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 8001956:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 800195a:	f103 031f 	add.w	r3, r3, #31
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d009      	beq.n	8001978 <process_SD_card+0x13c>
    {
      printf("File creation/open Error : (%i)\r\n", fres);
 8001964:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 8001968:	f103 031f 	add.w	r3, r3, #31
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	4619      	mov	r1, r3
 8001970:	4833      	ldr	r0, [pc, #204]	@ (8001a40 <process_SD_card+0x204>)
 8001972:	f005 f98f 	bl	8006c94 <iprintf>
      break;
 8001976:	e048      	b.n	8001a0a <process_SD_card+0x1ce>
    }

    printf("Writing data!!!\r\n");
 8001978:	4832      	ldr	r0, [pc, #200]	@ (8001a44 <process_SD_card+0x208>)
 800197a:	f005 f9f3 	bl	8006d64 <puts>
    //write the data
    f_puts("Welcome to EmbeTronicX", &fil);
 800197e:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001982:	3b34      	subs	r3, #52	@ 0x34
 8001984:	4619      	mov	r1, r3
 8001986:	4830      	ldr	r0, [pc, #192]	@ (8001a48 <process_SD_card+0x20c>)
 8001988:	f004 ff7b 	bl	8006882 <f_puts>

    //close your file
    f_close(&fil);
 800198c:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 8001990:	3b34      	subs	r3, #52	@ 0x34
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fde1 	bl	800655a <f_close>

    //Open the file
    fres = f_open(&fil, "EmbeTronicX.txt", FA_READ);
 8001998:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 800199c:	3b34      	subs	r3, #52	@ 0x34
 800199e:	2201      	movs	r2, #1
 80019a0:	4926      	ldr	r1, [pc, #152]	@ (8001a3c <process_SD_card+0x200>)
 80019a2:	4618      	mov	r0, r3
 80019a4:	f004 f8a0 	bl	8005ae8 <f_open>
 80019a8:	4603      	mov	r3, r0
 80019aa:	f507 5203 	add.w	r2, r7, #8384	@ 0x20c0
 80019ae:	f102 021f 	add.w	r2, r2, #31
 80019b2:	7013      	strb	r3, [r2, #0]
    if(fres != FR_OK)
 80019b4:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019b8:	f103 031f 	add.w	r3, r3, #31
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d009      	beq.n	80019d6 <process_SD_card+0x19a>
    {
      printf("File opening Error : (%i)\r\n", fres);
 80019c2:	f507 5303 	add.w	r3, r7, #8384	@ 0x20c0
 80019c6:	f103 031f 	add.w	r3, r3, #31
 80019ca:	781b      	ldrb	r3, [r3, #0]
 80019cc:	4619      	mov	r1, r3
 80019ce:	481f      	ldr	r0, [pc, #124]	@ (8001a4c <process_SD_card+0x210>)
 80019d0:	f005 f960 	bl	8006c94 <iprintf>
      break;
 80019d4:	e019      	b.n	8001a0a <process_SD_card+0x1ce>
    }

    //read the data
    f_gets(buf, sizeof(buf), &fil);
 80019d6:	f107 02a0 	add.w	r2, r7, #160	@ 0xa0
 80019da:	3a34      	subs	r2, #52	@ 0x34
 80019dc:	f107 0320 	add.w	r3, r7, #32
 80019e0:	3b18      	subs	r3, #24
 80019e2:	2164      	movs	r1, #100	@ 0x64
 80019e4:	4618      	mov	r0, r3
 80019e6:	f004 fe97 	bl	8006718 <f_gets>

    printf("Read Data : %s\n", buf);
 80019ea:	f107 0320 	add.w	r3, r7, #32
 80019ee:	3b18      	subs	r3, #24
 80019f0:	4619      	mov	r1, r3
 80019f2:	4817      	ldr	r0, [pc, #92]	@ (8001a50 <process_SD_card+0x214>)
 80019f4:	f005 f94e 	bl	8006c94 <iprintf>

    //close your file
    f_close(&fil);
 80019f8:	f107 03a0 	add.w	r3, r7, #160	@ 0xa0
 80019fc:	3b34      	subs	r3, #52	@ 0x34
 80019fe:	4618      	mov	r0, r3
 8001a00:	f004 fdab 	bl	800655a <f_close>
    printf("Closing File!!!\r\n");
 8001a04:	4813      	ldr	r0, [pc, #76]	@ (8001a54 <process_SD_card+0x218>)
 8001a06:	f005 f9ad 	bl	8006d64 <puts>
    }
#endif
  } while( false );

  //We're done, so de-mount the drive
  f_mount(NULL, "", 0);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	4906      	ldr	r1, [pc, #24]	@ (8001a28 <process_SD_card+0x1ec>)
 8001a0e:	2000      	movs	r0, #0
 8001a10:	f004 f824 	bl	8005a5c <f_mount>
  printf("SD Card Unmounted Successfully!!!\r\n");
 8001a14:	4810      	ldr	r0, [pc, #64]	@ (8001a58 <process_SD_card+0x21c>)
 8001a16:	f005 f9a5 	bl	8006d64 <puts>
}
 8001a1a:	bf00      	nop
 8001a1c:	f507 5703 	add.w	r7, r7, #8384	@ 0x20c0
 8001a20:	3720      	adds	r7, #32
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	08007a44 	.word	0x08007a44
 8001a2c:	08007a48 	.word	0x08007a48
 8001a30:	08007a64 	.word	0x08007a64
 8001a34:	3fe00000 	.word	0x3fe00000
 8001a38:	08007a88 	.word	0x08007a88
 8001a3c:	08007ab8 	.word	0x08007ab8
 8001a40:	08007ac8 	.word	0x08007ac8
 8001a44:	08007aec 	.word	0x08007aec
 8001a48:	08007b00 	.word	0x08007b00
 8001a4c:	08007b18 	.word	0x08007b18
 8001a50:	08007b34 	.word	0x08007b34
 8001a54:	08007b44 	.word	0x08007b44
 8001a58:	08007b58 	.word	0x08007b58

08001a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a60:	b672      	cpsid	i
}
 8001a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a64:	bf00      	nop
 8001a66:	e7fd      	b.n	8001a64 <Error_Handler+0x8>

08001a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a6e:	2300      	movs	r3, #0
 8001a70:	607b      	str	r3, [r7, #4]
 8001a72:	4b10      	ldr	r3, [pc, #64]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a76:	4a0f      	ldr	r2, [pc, #60]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a86:	607b      	str	r3, [r7, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
 8001a8e:	4b09      	ldr	r3, [pc, #36]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a92:	4a08      	ldr	r2, [pc, #32]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a9a:	4b06      	ldr	r3, [pc, #24]	@ (8001ab4 <HAL_MspInit+0x4c>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	603b      	str	r3, [r7, #0]
 8001aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40023800 	.word	0x40023800

08001ab8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b08a      	sub	sp, #40	@ 0x28
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ac0:	f107 0314 	add.w	r3, r7, #20
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
 8001ac8:	605a      	str	r2, [r3, #4]
 8001aca:	609a      	str	r2, [r3, #8]
 8001acc:	60da      	str	r2, [r3, #12]
 8001ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a19      	ldr	r2, [pc, #100]	@ (8001b3c <HAL_SPI_MspInit+0x84>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d12b      	bne.n	8001b32 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	613b      	str	r3, [r7, #16]
 8001ade:	4b18      	ldr	r3, [pc, #96]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ae2:	4a17      	ldr	r2, [pc, #92]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001aea:	4b15      	ldr	r3, [pc, #84]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001af2:	613b      	str	r3, [r7, #16]
 8001af4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001afe:	4a10      	ldr	r2, [pc, #64]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001b00:	f043 0301 	orr.w	r3, r3, #1
 8001b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b06:	4b0e      	ldr	r3, [pc, #56]	@ (8001b40 <HAL_SPI_MspInit+0x88>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	f003 0301 	and.w	r3, r3, #1
 8001b0e:	60fb      	str	r3, [r7, #12]
 8001b10:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001b12:	23e0      	movs	r3, #224	@ 0xe0
 8001b14:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b16:	2302      	movs	r3, #2
 8001b18:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001b22:	2305      	movs	r3, #5
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b26:	f107 0314 	add.w	r3, r7, #20
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4805      	ldr	r0, [pc, #20]	@ (8001b44 <HAL_SPI_MspInit+0x8c>)
 8001b2e:	f000 fad7 	bl	80020e0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b32:	bf00      	nop
 8001b34:	3728      	adds	r7, #40	@ 0x28
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40013000 	.word	0x40013000
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40020000 	.word	0x40020000

08001b48 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001b4c:	bf00      	nop
 8001b4e:	e7fd      	b.n	8001b4c <NMI_Handler+0x4>

08001b50 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b50:	b480      	push	{r7}
 8001b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b54:	bf00      	nop
 8001b56:	e7fd      	b.n	8001b54 <HardFault_Handler+0x4>

08001b58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b5c:	bf00      	nop
 8001b5e:	e7fd      	b.n	8001b5c <MemManage_Handler+0x4>

08001b60 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b64:	bf00      	nop
 8001b66:	e7fd      	b.n	8001b64 <BusFault_Handler+0x4>

08001b68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b6c:	bf00      	nop
 8001b6e:	e7fd      	b.n	8001b6c <UsageFault_Handler+0x4>

08001b70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b74:	bf00      	nop
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b82:	bf00      	nop
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr

08001b8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8001bd0 <SysTick_Handler+0x34>)
 8001ba2:	881b      	ldrh	r3, [r3, #0]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d005      	beq.n	8001bb4 <SysTick_Handler+0x18>
	  Timer1--;
 8001ba8:	4b09      	ldr	r3, [pc, #36]	@ (8001bd0 <SysTick_Handler+0x34>)
 8001baa:	881b      	ldrh	r3, [r3, #0]
 8001bac:	3b01      	subs	r3, #1
 8001bae:	b29a      	uxth	r2, r3
 8001bb0:	4b07      	ldr	r3, [pc, #28]	@ (8001bd0 <SysTick_Handler+0x34>)
 8001bb2:	801a      	strh	r2, [r3, #0]
	if(Timer2 > 0)
 8001bb4:	4b07      	ldr	r3, [pc, #28]	@ (8001bd4 <SysTick_Handler+0x38>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d005      	beq.n	8001bc8 <SysTick_Handler+0x2c>
	  Timer2--;
 8001bbc:	4b05      	ldr	r3, [pc, #20]	@ (8001bd4 <SysTick_Handler+0x38>)
 8001bbe:	881b      	ldrh	r3, [r3, #0]
 8001bc0:	3b01      	subs	r3, #1
 8001bc2:	b29a      	uxth	r2, r3
 8001bc4:	4b03      	ldr	r3, [pc, #12]	@ (8001bd4 <SysTick_Handler+0x38>)
 8001bc6:	801a      	strh	r2, [r3, #0]
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 f960 	bl	8001e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}
 8001bd0:	2000009c 	.word	0x2000009c
 8001bd4:	2000009e 	.word	0x2000009e

08001bd8 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	4603      	mov	r3, r0
 8001be0:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001be2:	4b0f      	ldr	r3, [pc, #60]	@ (8001c20 <ITM_SendChar+0x48>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a0e      	ldr	r2, [pc, #56]	@ (8001c20 <ITM_SendChar+0x48>)
 8001be8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001bec:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001bee:	4b0d      	ldr	r3, [pc, #52]	@ (8001c24 <ITM_SendChar+0x4c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a0c      	ldr	r2, [pc, #48]	@ (8001c24 <ITM_SendChar+0x4c>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001bfa:	bf00      	nop
 8001bfc:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d0f8      	beq.n	8001bfc <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001c0a:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001c0e:	79fb      	ldrb	r3, [r7, #7]
 8001c10:	6013      	str	r3, [r2, #0]
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	e000edfc 	.word	0xe000edfc
 8001c24:	e0000e00 	.word	0xe0000e00

08001c28 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
 8001c38:	e00a      	b.n	8001c50 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c3a:	f3af 8000 	nop.w
 8001c3e:	4601      	mov	r1, r0
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	1c5a      	adds	r2, r3, #1
 8001c44:	60ba      	str	r2, [r7, #8]
 8001c46:	b2ca      	uxtb	r2, r1
 8001c48:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	617b      	str	r3, [r7, #20]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	dbf0      	blt.n	8001c3a <_read+0x12>
  }

  return len;
 8001c58:	687b      	ldr	r3, [r7, #4]
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3718      	adds	r7, #24
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}

08001c62 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c62:	b580      	push	{r7, lr}
 8001c64:	b086      	sub	sp, #24
 8001c66:	af00      	add	r7, sp, #0
 8001c68:	60f8      	str	r0, [r7, #12]
 8001c6a:	60b9      	str	r1, [r7, #8]
 8001c6c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c6e:	2300      	movs	r3, #0
 8001c70:	617b      	str	r3, [r7, #20]
 8001c72:	e009      	b.n	8001c88 <_write+0x26>
  {
    //__io_putchar(*ptr++);
	  ITM_SendChar(*ptr++);
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	1c5a      	adds	r2, r3, #1
 8001c78:	60ba      	str	r2, [r7, #8]
 8001c7a:	781b      	ldrb	r3, [r3, #0]
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ffab 	bl	8001bd8 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	3301      	adds	r3, #1
 8001c86:	617b      	str	r3, [r7, #20]
 8001c88:	697a      	ldr	r2, [r7, #20]
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	dbf1      	blt.n	8001c74 <_write+0x12>
  }
  return len;
 8001c90:	687b      	ldr	r3, [r7, #4]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3718      	adds	r7, #24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <_close>:

int _close(int file)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b083      	sub	sp, #12
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cc2:	605a      	str	r2, [r3, #4]
  return 0;
 8001cc4:	2300      	movs	r3, #0
}
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	370c      	adds	r7, #12
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr

08001cd2 <_isatty>:

int _isatty(int file)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cda:	2301      	movs	r3, #1
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b085      	sub	sp, #20
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	60f8      	str	r0, [r7, #12]
 8001cf0:	60b9      	str	r1, [r7, #8]
 8001cf2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3714      	adds	r7, #20
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr
	...

08001d04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d0c:	4a14      	ldr	r2, [pc, #80]	@ (8001d60 <_sbrk+0x5c>)
 8001d0e:	4b15      	ldr	r3, [pc, #84]	@ (8001d64 <_sbrk+0x60>)
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d14:	697b      	ldr	r3, [r7, #20]
 8001d16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d18:	4b13      	ldr	r3, [pc, #76]	@ (8001d68 <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d102      	bne.n	8001d26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d20:	4b11      	ldr	r3, [pc, #68]	@ (8001d68 <_sbrk+0x64>)
 8001d22:	4a12      	ldr	r2, [pc, #72]	@ (8001d6c <_sbrk+0x68>)
 8001d24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d26:	4b10      	ldr	r3, [pc, #64]	@ (8001d68 <_sbrk+0x64>)
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4413      	add	r3, r2
 8001d2e:	693a      	ldr	r2, [r7, #16]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d207      	bcs.n	8001d44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d34:	f005 f944 	bl	8006fc0 <__errno>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	220c      	movs	r2, #12
 8001d3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d3e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d42:	e009      	b.n	8001d58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d44:	4b08      	ldr	r3, [pc, #32]	@ (8001d68 <_sbrk+0x64>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d4a:	4b07      	ldr	r3, [pc, #28]	@ (8001d68 <_sbrk+0x64>)
 8001d4c:	681a      	ldr	r2, [r3, #0]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4413      	add	r3, r2
 8001d52:	4a05      	ldr	r2, [pc, #20]	@ (8001d68 <_sbrk+0x64>)
 8001d54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d56:	68fb      	ldr	r3, [r7, #12]
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3718      	adds	r7, #24
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	20050000 	.word	0x20050000
 8001d64:	00000400 	.word	0x00000400
 8001d68:	200000fc 	.word	0x200000fc
 8001d6c:	20000490 	.word	0x20000490

08001d70 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d74:	4b06      	ldr	r3, [pc, #24]	@ (8001d90 <SystemInit+0x20>)
 8001d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d7a:	4a05      	ldr	r2, [pc, #20]	@ (8001d90 <SystemInit+0x20>)
 8001d7c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d80:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d84:	bf00      	nop
 8001d86:	46bd      	mov	sp, r7
 8001d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8c:	4770      	bx	lr
 8001d8e:	bf00      	nop
 8001d90:	e000ed00 	.word	0xe000ed00

08001d94 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack       /* set stack pointer */
 8001d94:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001dcc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001d98:	f7ff ffea 	bl	8001d70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001d9c:	480c      	ldr	r0, [pc, #48]	@ (8001dd0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001d9e:	490d      	ldr	r1, [pc, #52]	@ (8001dd4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001da0:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001da2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001da4:	e002      	b.n	8001dac <LoopCopyDataInit>

08001da6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001da6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001da8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001daa:	3304      	adds	r3, #4

08001dac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001db0:	d3f9      	bcc.n	8001da6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001db2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ddc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001db4:	4c0a      	ldr	r4, [pc, #40]	@ (8001de0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001db8:	e001      	b.n	8001dbe <LoopFillZerobss>

08001dba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dbc:	3204      	adds	r2, #4

08001dbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dc0:	d3fb      	bcc.n	8001dba <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8001dc2:	f005 f903 	bl	8006fcc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001dc6:	f7ff fbc1 	bl	800154c <main>
  bx  lr    
 8001dca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001dcc:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8001dd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001dd4:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001dd8:	08008058 	.word	0x08008058
  ldr r2, =_sbss
 8001ddc:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001de0:	2000048c 	.word	0x2000048c

08001de4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001de4:	e7fe      	b.n	8001de4 <ADC_IRQHandler>
	...

08001de8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <HAL_Init+0x40>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a0d      	ldr	r2, [pc, #52]	@ (8001e28 <HAL_Init+0x40>)
 8001df2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001df6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001df8:	4b0b      	ldr	r3, [pc, #44]	@ (8001e28 <HAL_Init+0x40>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a0a      	ldr	r2, [pc, #40]	@ (8001e28 <HAL_Init+0x40>)
 8001dfe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e02:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e04:	4b08      	ldr	r3, [pc, #32]	@ (8001e28 <HAL_Init+0x40>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a07      	ldr	r2, [pc, #28]	@ (8001e28 <HAL_Init+0x40>)
 8001e0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e0e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e10:	2003      	movs	r0, #3
 8001e12:	f000 f931 	bl	8002078 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e16:	2000      	movs	r0, #0
 8001e18:	f000 f808 	bl	8001e2c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e1c:	f7ff fe24 	bl	8001a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40023c00 	.word	0x40023c00

08001e2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b082      	sub	sp, #8
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e34:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_InitTick+0x54>)
 8001e36:	681a      	ldr	r2, [r3, #0]
 8001e38:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_InitTick+0x58>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e42:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e46:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f000 f93b 	bl	80020c6 <HAL_SYSTICK_Config>
 8001e50:	4603      	mov	r3, r0
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d001      	beq.n	8001e5a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e56:	2301      	movs	r3, #1
 8001e58:	e00e      	b.n	8001e78 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	2b0f      	cmp	r3, #15
 8001e5e:	d80a      	bhi.n	8001e76 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e60:	2200      	movs	r2, #0
 8001e62:	6879      	ldr	r1, [r7, #4]
 8001e64:	f04f 30ff 	mov.w	r0, #4294967295
 8001e68:	f000 f911 	bl	800208e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e6c:	4a06      	ldr	r2, [pc, #24]	@ (8001e88 <HAL_InitTick+0x5c>)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e000      	b.n	8001e78 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
}
 8001e78:	4618      	mov	r0, r3
 8001e7a:	3708      	adds	r7, #8
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	bd80      	pop	{r7, pc}
 8001e80:	20000004 	.word	0x20000004
 8001e84:	2000000c 	.word	0x2000000c
 8001e88:	20000008 	.word	0x20000008

08001e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e90:	4b06      	ldr	r3, [pc, #24]	@ (8001eac <HAL_IncTick+0x20>)
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	461a      	mov	r2, r3
 8001e96:	4b06      	ldr	r3, [pc, #24]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	4413      	add	r3, r2
 8001e9c:	4a04      	ldr	r2, [pc, #16]	@ (8001eb0 <HAL_IncTick+0x24>)
 8001e9e:	6013      	str	r3, [r2, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea8:	4770      	bx	lr
 8001eaa:	bf00      	nop
 8001eac:	2000000c 	.word	0x2000000c
 8001eb0:	20000100 	.word	0x20000100

08001eb4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	af00      	add	r7, sp, #0
  return uwTick;
 8001eb8:	4b03      	ldr	r3, [pc, #12]	@ (8001ec8 <HAL_GetTick+0x14>)
 8001eba:	681b      	ldr	r3, [r3, #0]
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec4:	4770      	bx	lr
 8001ec6:	bf00      	nop
 8001ec8:	20000100 	.word	0x20000100

08001ecc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ed4:	f7ff ffee 	bl	8001eb4 <HAL_GetTick>
 8001ed8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ee4:	d005      	beq.n	8001ef2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8001f10 <HAL_Delay+0x44>)
 8001ee8:	781b      	ldrb	r3, [r3, #0]
 8001eea:	461a      	mov	r2, r3
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4413      	add	r3, r2
 8001ef0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ef2:	bf00      	nop
 8001ef4:	f7ff ffde 	bl	8001eb4 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	68fa      	ldr	r2, [r7, #12]
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d8f7      	bhi.n	8001ef4 <HAL_Delay+0x28>
  {
  }
}
 8001f04:	bf00      	nop
 8001f06:	bf00      	nop
 8001f08:	3710      	adds	r7, #16
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
 8001f0e:	bf00      	nop
 8001f10:	2000000c 	.word	0x2000000c

08001f14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b085      	sub	sp, #20
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f24:	4b0c      	ldr	r3, [pc, #48]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f30:	4013      	ands	r3, r2
 8001f32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f46:	4a04      	ldr	r2, [pc, #16]	@ (8001f58 <__NVIC_SetPriorityGrouping+0x44>)
 8001f48:	68bb      	ldr	r3, [r7, #8]
 8001f4a:	60d3      	str	r3, [r2, #12]
}
 8001f4c:	bf00      	nop
 8001f4e:	3714      	adds	r7, #20
 8001f50:	46bd      	mov	sp, r7
 8001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f56:	4770      	bx	lr
 8001f58:	e000ed00 	.word	0xe000ed00

08001f5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f60:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <__NVIC_GetPriorityGrouping+0x18>)
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	0a1b      	lsrs	r3, r3, #8
 8001f66:	f003 0307 	and.w	r3, r3, #7
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f72:	4770      	bx	lr
 8001f74:	e000ed00 	.word	0xe000ed00

08001f78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	4603      	mov	r3, r0
 8001f80:	6039      	str	r1, [r7, #0]
 8001f82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	db0a      	blt.n	8001fa2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	b2da      	uxtb	r2, r3
 8001f90:	490c      	ldr	r1, [pc, #48]	@ (8001fc4 <__NVIC_SetPriority+0x4c>)
 8001f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f96:	0112      	lsls	r2, r2, #4
 8001f98:	b2d2      	uxtb	r2, r2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001fa0:	e00a      	b.n	8001fb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	b2da      	uxtb	r2, r3
 8001fa6:	4908      	ldr	r1, [pc, #32]	@ (8001fc8 <__NVIC_SetPriority+0x50>)
 8001fa8:	79fb      	ldrb	r3, [r7, #7]
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	3b04      	subs	r3, #4
 8001fb0:	0112      	lsls	r2, r2, #4
 8001fb2:	b2d2      	uxtb	r2, r2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	761a      	strb	r2, [r3, #24]
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	e000e100 	.word	0xe000e100
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b089      	sub	sp, #36	@ 0x24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f003 0307 	and.w	r3, r3, #7
 8001fde:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fe0:	69fb      	ldr	r3, [r7, #28]
 8001fe2:	f1c3 0307 	rsb	r3, r3, #7
 8001fe6:	2b04      	cmp	r3, #4
 8001fe8:	bf28      	it	cs
 8001fea:	2304      	movcs	r3, #4
 8001fec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	3304      	adds	r3, #4
 8001ff2:	2b06      	cmp	r3, #6
 8001ff4:	d902      	bls.n	8001ffc <NVIC_EncodePriority+0x30>
 8001ff6:	69fb      	ldr	r3, [r7, #28]
 8001ff8:	3b03      	subs	r3, #3
 8001ffa:	e000      	b.n	8001ffe <NVIC_EncodePriority+0x32>
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002000:	f04f 32ff 	mov.w	r2, #4294967295
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	fa02 f303 	lsl.w	r3, r2, r3
 800200a:	43da      	mvns	r2, r3
 800200c:	68bb      	ldr	r3, [r7, #8]
 800200e:	401a      	ands	r2, r3
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002014:	f04f 31ff 	mov.w	r1, #4294967295
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	fa01 f303 	lsl.w	r3, r1, r3
 800201e:	43d9      	mvns	r1, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002024:	4313      	orrs	r3, r2
         );
}
 8002026:	4618      	mov	r0, r3
 8002028:	3724      	adds	r7, #36	@ 0x24
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
	...

08002034 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b082      	sub	sp, #8
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002044:	d301      	bcc.n	800204a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002046:	2301      	movs	r3, #1
 8002048:	e00f      	b.n	800206a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800204a:	4a0a      	ldr	r2, [pc, #40]	@ (8002074 <SysTick_Config+0x40>)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3b01      	subs	r3, #1
 8002050:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002052:	210f      	movs	r1, #15
 8002054:	f04f 30ff 	mov.w	r0, #4294967295
 8002058:	f7ff ff8e 	bl	8001f78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800205c:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <SysTick_Config+0x40>)
 800205e:	2200      	movs	r2, #0
 8002060:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002062:	4b04      	ldr	r3, [pc, #16]	@ (8002074 <SysTick_Config+0x40>)
 8002064:	2207      	movs	r2, #7
 8002066:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002068:	2300      	movs	r3, #0
}
 800206a:	4618      	mov	r0, r3
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	e000e010 	.word	0xe000e010

08002078 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b082      	sub	sp, #8
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ff47 	bl	8001f14 <__NVIC_SetPriorityGrouping>
}
 8002086:	bf00      	nop
 8002088:	3708      	adds	r7, #8
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}

0800208e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800208e:	b580      	push	{r7, lr}
 8002090:	b086      	sub	sp, #24
 8002092:	af00      	add	r7, sp, #0
 8002094:	4603      	mov	r3, r0
 8002096:	60b9      	str	r1, [r7, #8]
 8002098:	607a      	str	r2, [r7, #4]
 800209a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80020a0:	f7ff ff5c 	bl	8001f5c <__NVIC_GetPriorityGrouping>
 80020a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	68b9      	ldr	r1, [r7, #8]
 80020aa:	6978      	ldr	r0, [r7, #20]
 80020ac:	f7ff ff8e 	bl	8001fcc <NVIC_EncodePriority>
 80020b0:	4602      	mov	r2, r0
 80020b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020b6:	4611      	mov	r1, r2
 80020b8:	4618      	mov	r0, r3
 80020ba:	f7ff ff5d 	bl	8001f78 <__NVIC_SetPriority>
}
 80020be:	bf00      	nop
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}

080020c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020c6:	b580      	push	{r7, lr}
 80020c8:	b082      	sub	sp, #8
 80020ca:	af00      	add	r7, sp, #0
 80020cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f7ff ffb0 	bl	8002034 <SysTick_Config>
 80020d4:	4603      	mov	r3, r0
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3708      	adds	r7, #8
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
	...

080020e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	@ 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020ee:	2300      	movs	r3, #0
 80020f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020f2:	2300      	movs	r3, #0
 80020f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	61fb      	str	r3, [r7, #28]
 80020fa:	e165      	b.n	80023c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020fc:	2201      	movs	r2, #1
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	fa02 f303 	lsl.w	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	697a      	ldr	r2, [r7, #20]
 800210c:	4013      	ands	r3, r2
 800210e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002110:	693a      	ldr	r2, [r7, #16]
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	429a      	cmp	r2, r3
 8002116:	f040 8154 	bne.w	80023c2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	f003 0303 	and.w	r3, r3, #3
 8002122:	2b01      	cmp	r3, #1
 8002124:	d005      	beq.n	8002132 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800212e:	2b02      	cmp	r3, #2
 8002130:	d130      	bne.n	8002194 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002138:	69fb      	ldr	r3, [r7, #28]
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	2203      	movs	r2, #3
 800213e:	fa02 f303 	lsl.w	r3, r2, r3
 8002142:	43db      	mvns	r3, r3
 8002144:	69ba      	ldr	r2, [r7, #24]
 8002146:	4013      	ands	r3, r2
 8002148:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	68da      	ldr	r2, [r3, #12]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	005b      	lsls	r3, r3, #1
 8002152:	fa02 f303 	lsl.w	r3, r2, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4313      	orrs	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	69ba      	ldr	r2, [r7, #24]
 8002160:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002168:	2201      	movs	r2, #1
 800216a:	69fb      	ldr	r3, [r7, #28]
 800216c:	fa02 f303 	lsl.w	r3, r2, r3
 8002170:	43db      	mvns	r3, r3
 8002172:	69ba      	ldr	r2, [r7, #24]
 8002174:	4013      	ands	r3, r2
 8002176:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	091b      	lsrs	r3, r3, #4
 800217e:	f003 0201 	and.w	r2, r3, #1
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	69ba      	ldr	r2, [r7, #24]
 800218a:	4313      	orrs	r3, r2
 800218c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	69ba      	ldr	r2, [r7, #24]
 8002192:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0303 	and.w	r3, r3, #3
 800219c:	2b03      	cmp	r3, #3
 800219e:	d017      	beq.n	80021d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	005b      	lsls	r3, r3, #1
 80021aa:	2203      	movs	r2, #3
 80021ac:	fa02 f303 	lsl.w	r3, r2, r3
 80021b0:	43db      	mvns	r3, r3
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4013      	ands	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	689a      	ldr	r2, [r3, #8]
 80021bc:	69fb      	ldr	r3, [r7, #28]
 80021be:	005b      	lsls	r3, r3, #1
 80021c0:	fa02 f303 	lsl.w	r3, r2, r3
 80021c4:	69ba      	ldr	r2, [r7, #24]
 80021c6:	4313      	orrs	r3, r2
 80021c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	69ba      	ldr	r2, [r7, #24]
 80021ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	f003 0303 	and.w	r3, r3, #3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d123      	bne.n	8002224 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	08da      	lsrs	r2, r3, #3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	3208      	adds	r2, #8
 80021e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	220f      	movs	r2, #15
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	691a      	ldr	r2, [r3, #16]
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f003 0307 	and.w	r3, r3, #7
 800220a:	009b      	lsls	r3, r3, #2
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	69ba      	ldr	r2, [r7, #24]
 8002212:	4313      	orrs	r3, r2
 8002214:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002216:	69fb      	ldr	r3, [r7, #28]
 8002218:	08da      	lsrs	r2, r3, #3
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	3208      	adds	r2, #8
 800221e:	69b9      	ldr	r1, [r7, #24]
 8002220:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	2203      	movs	r2, #3
 8002230:	fa02 f303 	lsl.w	r3, r2, r3
 8002234:	43db      	mvns	r3, r3
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	4013      	ands	r3, r2
 800223a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	f003 0203 	and.w	r2, r3, #3
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	fa02 f303 	lsl.w	r3, r2, r3
 800224c:	69ba      	ldr	r2, [r7, #24]
 800224e:	4313      	orrs	r3, r2
 8002250:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	69ba      	ldr	r2, [r7, #24]
 8002256:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002258:	683b      	ldr	r3, [r7, #0]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002260:	2b00      	cmp	r3, #0
 8002262:	f000 80ae 	beq.w	80023c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002266:	2300      	movs	r3, #0
 8002268:	60fb      	str	r3, [r7, #12]
 800226a:	4b5d      	ldr	r3, [pc, #372]	@ (80023e0 <HAL_GPIO_Init+0x300>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800226e:	4a5c      	ldr	r2, [pc, #368]	@ (80023e0 <HAL_GPIO_Init+0x300>)
 8002270:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002274:	6453      	str	r3, [r2, #68]	@ 0x44
 8002276:	4b5a      	ldr	r3, [pc, #360]	@ (80023e0 <HAL_GPIO_Init+0x300>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002282:	4a58      	ldr	r2, [pc, #352]	@ (80023e4 <HAL_GPIO_Init+0x304>)
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	089b      	lsrs	r3, r3, #2
 8002288:	3302      	adds	r3, #2
 800228a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	220f      	movs	r2, #15
 800229a:	fa02 f303 	lsl.w	r3, r2, r3
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4a4f      	ldr	r2, [pc, #316]	@ (80023e8 <HAL_GPIO_Init+0x308>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d025      	beq.n	80022fa <HAL_GPIO_Init+0x21a>
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	4a4e      	ldr	r2, [pc, #312]	@ (80023ec <HAL_GPIO_Init+0x30c>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d01f      	beq.n	80022f6 <HAL_GPIO_Init+0x216>
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a4d      	ldr	r2, [pc, #308]	@ (80023f0 <HAL_GPIO_Init+0x310>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d019      	beq.n	80022f2 <HAL_GPIO_Init+0x212>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a4c      	ldr	r2, [pc, #304]	@ (80023f4 <HAL_GPIO_Init+0x314>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d013      	beq.n	80022ee <HAL_GPIO_Init+0x20e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a4b      	ldr	r2, [pc, #300]	@ (80023f8 <HAL_GPIO_Init+0x318>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d00d      	beq.n	80022ea <HAL_GPIO_Init+0x20a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	@ (80023fc <HAL_GPIO_Init+0x31c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d007      	beq.n	80022e6 <HAL_GPIO_Init+0x206>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a49      	ldr	r2, [pc, #292]	@ (8002400 <HAL_GPIO_Init+0x320>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d101      	bne.n	80022e2 <HAL_GPIO_Init+0x202>
 80022de:	2306      	movs	r3, #6
 80022e0:	e00c      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022e2:	2307      	movs	r3, #7
 80022e4:	e00a      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e008      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022ea:	2304      	movs	r3, #4
 80022ec:	e006      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022ee:	2303      	movs	r3, #3
 80022f0:	e004      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022f2:	2302      	movs	r3, #2
 80022f4:	e002      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022f6:	2301      	movs	r3, #1
 80022f8:	e000      	b.n	80022fc <HAL_GPIO_Init+0x21c>
 80022fa:	2300      	movs	r3, #0
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f002 0203 	and.w	r2, r2, #3
 8002302:	0092      	lsls	r2, r2, #2
 8002304:	4093      	lsls	r3, r2
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	4313      	orrs	r3, r2
 800230a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800230c:	4935      	ldr	r1, [pc, #212]	@ (80023e4 <HAL_GPIO_Init+0x304>)
 800230e:	69fb      	ldr	r3, [r7, #28]
 8002310:	089b      	lsrs	r3, r3, #2
 8002312:	3302      	adds	r3, #2
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800231a:	4b3a      	ldr	r3, [pc, #232]	@ (8002404 <HAL_GPIO_Init+0x324>)
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d003      	beq.n	800233e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800233e:	4a31      	ldr	r2, [pc, #196]	@ (8002404 <HAL_GPIO_Init+0x324>)
 8002340:	69bb      	ldr	r3, [r7, #24]
 8002342:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002344:	4b2f      	ldr	r3, [pc, #188]	@ (8002404 <HAL_GPIO_Init+0x324>)
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	43db      	mvns	r3, r3
 800234e:	69ba      	ldr	r2, [r7, #24]
 8002350:	4013      	ands	r3, r2
 8002352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800235c:	2b00      	cmp	r3, #0
 800235e:	d003      	beq.n	8002368 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	4313      	orrs	r3, r2
 8002366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002368:	4a26      	ldr	r2, [pc, #152]	@ (8002404 <HAL_GPIO_Init+0x324>)
 800236a:	69bb      	ldr	r3, [r7, #24]
 800236c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800236e:	4b25      	ldr	r3, [pc, #148]	@ (8002404 <HAL_GPIO_Init+0x324>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002374:	693b      	ldr	r3, [r7, #16]
 8002376:	43db      	mvns	r3, r3
 8002378:	69ba      	ldr	r2, [r7, #24]
 800237a:	4013      	ands	r3, r2
 800237c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d003      	beq.n	8002392 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800238a:	69ba      	ldr	r2, [r7, #24]
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002392:	4a1c      	ldr	r2, [pc, #112]	@ (8002404 <HAL_GPIO_Init+0x324>)
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002398:	4b1a      	ldr	r3, [pc, #104]	@ (8002404 <HAL_GPIO_Init+0x324>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d003      	beq.n	80023bc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023bc:	4a11      	ldr	r2, [pc, #68]	@ (8002404 <HAL_GPIO_Init+0x324>)
 80023be:	69bb      	ldr	r3, [r7, #24]
 80023c0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	3301      	adds	r3, #1
 80023c6:	61fb      	str	r3, [r7, #28]
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	2b0f      	cmp	r3, #15
 80023cc:	f67f ae96 	bls.w	80020fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	3724      	adds	r7, #36	@ 0x24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr
 80023de:	bf00      	nop
 80023e0:	40023800 	.word	0x40023800
 80023e4:	40013800 	.word	0x40013800
 80023e8:	40020000 	.word	0x40020000
 80023ec:	40020400 	.word	0x40020400
 80023f0:	40020800 	.word	0x40020800
 80023f4:	40020c00 	.word	0x40020c00
 80023f8:	40021000 	.word	0x40021000
 80023fc:	40021400 	.word	0x40021400
 8002400:	40021800 	.word	0x40021800
 8002404:	40013c00 	.word	0x40013c00

08002408 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002408:	b480      	push	{r7}
 800240a:	b083      	sub	sp, #12
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
 8002410:	460b      	mov	r3, r1
 8002412:	807b      	strh	r3, [r7, #2]
 8002414:	4613      	mov	r3, r2
 8002416:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002418:	787b      	ldrb	r3, [r7, #1]
 800241a:	2b00      	cmp	r3, #0
 800241c:	d003      	beq.n	8002426 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800241e:	887a      	ldrh	r2, [r7, #2]
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002424:	e003      	b.n	800242e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002426:	887b      	ldrh	r3, [r7, #2]
 8002428:	041a      	lsls	r2, r3, #16
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	619a      	str	r2, [r3, #24]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
	...

0800243c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b084      	sub	sp, #16
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
 8002444:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800244c:	2301      	movs	r3, #1
 800244e:	e0cc      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002450:	4b68      	ldr	r3, [pc, #416]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0307 	and.w	r3, r3, #7
 8002458:	683a      	ldr	r2, [r7, #0]
 800245a:	429a      	cmp	r2, r3
 800245c:	d90c      	bls.n	8002478 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800245e:	4b65      	ldr	r3, [pc, #404]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002466:	4b63      	ldr	r3, [pc, #396]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0307 	and.w	r3, r3, #7
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d001      	beq.n	8002478 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b8      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0302 	and.w	r3, r3, #2
 8002480:	2b00      	cmp	r3, #0
 8002482:	d020      	beq.n	80024c6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f003 0304 	and.w	r3, r3, #4
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002490:	4b59      	ldr	r3, [pc, #356]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	4a58      	ldr	r2, [pc, #352]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800249a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0308 	and.w	r3, r3, #8
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d005      	beq.n	80024b4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80024a8:	4b53      	ldr	r3, [pc, #332]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	4a52      	ldr	r2, [pc, #328]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80024b2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b4:	4b50      	ldr	r3, [pc, #320]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	689b      	ldr	r3, [r3, #8]
 80024c0:	494d      	ldr	r1, [pc, #308]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024c2:	4313      	orrs	r3, r2
 80024c4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0301 	and.w	r3, r3, #1
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d044      	beq.n	800255c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	2b01      	cmp	r3, #1
 80024d8:	d107      	bne.n	80024ea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024da:	4b47      	ldr	r3, [pc, #284]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d119      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e07f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	2b02      	cmp	r3, #2
 80024f0:	d003      	beq.n	80024fa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d107      	bne.n	800250a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024fa:	4b3f      	ldr	r3, [pc, #252]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d109      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	e06f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800250a:	4b3b      	ldr	r3, [pc, #236]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0302 	and.w	r3, r3, #2
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e067      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800251a:	4b37      	ldr	r3, [pc, #220]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f023 0203 	bic.w	r2, r3, #3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	4934      	ldr	r1, [pc, #208]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	4313      	orrs	r3, r2
 800252a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800252c:	f7ff fcc2 	bl	8001eb4 <HAL_GetTick>
 8002530:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002532:	e00a      	b.n	800254a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002534:	f7ff fcbe 	bl	8001eb4 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002542:	4293      	cmp	r3, r2
 8002544:	d901      	bls.n	800254a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	e04f      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800254a:	4b2b      	ldr	r3, [pc, #172]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800254c:	689b      	ldr	r3, [r3, #8]
 800254e:	f003 020c 	and.w	r2, r3, #12
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	009b      	lsls	r3, r3, #2
 8002558:	429a      	cmp	r2, r3
 800255a:	d1eb      	bne.n	8002534 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800255c:	4b25      	ldr	r3, [pc, #148]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	429a      	cmp	r2, r3
 8002568:	d20c      	bcs.n	8002584 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800256a:	4b22      	ldr	r3, [pc, #136]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 800256c:	683a      	ldr	r2, [r7, #0]
 800256e:	b2d2      	uxtb	r2, r2
 8002570:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002572:	4b20      	ldr	r3, [pc, #128]	@ (80025f4 <HAL_RCC_ClockConfig+0x1b8>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f003 0307 	and.w	r3, r3, #7
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	429a      	cmp	r2, r3
 800257e:	d001      	beq.n	8002584 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e032      	b.n	80025ea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 0304 	and.w	r3, r3, #4
 800258c:	2b00      	cmp	r3, #0
 800258e:	d008      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002590:	4b19      	ldr	r3, [pc, #100]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	4916      	ldr	r1, [pc, #88]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f003 0308 	and.w	r3, r3, #8
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d009      	beq.n	80025c2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80025ae:	4b12      	ldr	r3, [pc, #72]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	490e      	ldr	r1, [pc, #56]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025c2:	f000 f821 	bl	8002608 <HAL_RCC_GetSysClockFreq>
 80025c6:	4602      	mov	r2, r0
 80025c8:	4b0b      	ldr	r3, [pc, #44]	@ (80025f8 <HAL_RCC_ClockConfig+0x1bc>)
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	091b      	lsrs	r3, r3, #4
 80025ce:	f003 030f 	and.w	r3, r3, #15
 80025d2:	490a      	ldr	r1, [pc, #40]	@ (80025fc <HAL_RCC_ClockConfig+0x1c0>)
 80025d4:	5ccb      	ldrb	r3, [r1, r3]
 80025d6:	fa22 f303 	lsr.w	r3, r2, r3
 80025da:	4a09      	ldr	r2, [pc, #36]	@ (8002600 <HAL_RCC_ClockConfig+0x1c4>)
 80025dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025de:	4b09      	ldr	r3, [pc, #36]	@ (8002604 <HAL_RCC_ClockConfig+0x1c8>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff fc22 	bl	8001e2c <HAL_InitTick>

  return HAL_OK;
 80025e8:	2300      	movs	r3, #0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3710      	adds	r7, #16
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40023c00 	.word	0x40023c00
 80025f8:	40023800 	.word	0x40023800
 80025fc:	08007bc4 	.word	0x08007bc4
 8002600:	20000004 	.word	0x20000004
 8002604:	20000008 	.word	0x20000008

08002608 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002608:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800260c:	b094      	sub	sp, #80	@ 0x50
 800260e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002610:	2300      	movs	r3, #0
 8002612:	647b      	str	r3, [r7, #68]	@ 0x44
 8002614:	2300      	movs	r3, #0
 8002616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002618:	2300      	movs	r3, #0
 800261a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800261c:	2300      	movs	r3, #0
 800261e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002620:	4b79      	ldr	r3, [pc, #484]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	f003 030c 	and.w	r3, r3, #12
 8002628:	2b08      	cmp	r3, #8
 800262a:	d00d      	beq.n	8002648 <HAL_RCC_GetSysClockFreq+0x40>
 800262c:	2b08      	cmp	r3, #8
 800262e:	f200 80e1 	bhi.w	80027f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002632:	2b00      	cmp	r3, #0
 8002634:	d002      	beq.n	800263c <HAL_RCC_GetSysClockFreq+0x34>
 8002636:	2b04      	cmp	r3, #4
 8002638:	d003      	beq.n	8002642 <HAL_RCC_GetSysClockFreq+0x3a>
 800263a:	e0db      	b.n	80027f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800263c:	4b73      	ldr	r3, [pc, #460]	@ (800280c <HAL_RCC_GetSysClockFreq+0x204>)
 800263e:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8002640:	e0db      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002642:	4b73      	ldr	r3, [pc, #460]	@ (8002810 <HAL_RCC_GetSysClockFreq+0x208>)
 8002644:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002646:	e0d8      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002648:	4b6f      	ldr	r3, [pc, #444]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002650:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002652:	4b6d      	ldr	r3, [pc, #436]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800265a:	2b00      	cmp	r3, #0
 800265c:	d063      	beq.n	8002726 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800265e:	4b6a      	ldr	r3, [pc, #424]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	099b      	lsrs	r3, r3, #6
 8002664:	2200      	movs	r2, #0
 8002666:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002668:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800266a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800266c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002670:	633b      	str	r3, [r7, #48]	@ 0x30
 8002672:	2300      	movs	r3, #0
 8002674:	637b      	str	r3, [r7, #52]	@ 0x34
 8002676:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800267a:	4622      	mov	r2, r4
 800267c:	462b      	mov	r3, r5
 800267e:	f04f 0000 	mov.w	r0, #0
 8002682:	f04f 0100 	mov.w	r1, #0
 8002686:	0159      	lsls	r1, r3, #5
 8002688:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800268c:	0150      	lsls	r0, r2, #5
 800268e:	4602      	mov	r2, r0
 8002690:	460b      	mov	r3, r1
 8002692:	4621      	mov	r1, r4
 8002694:	1a51      	subs	r1, r2, r1
 8002696:	6139      	str	r1, [r7, #16]
 8002698:	4629      	mov	r1, r5
 800269a:	eb63 0301 	sbc.w	r3, r3, r1
 800269e:	617b      	str	r3, [r7, #20]
 80026a0:	f04f 0200 	mov.w	r2, #0
 80026a4:	f04f 0300 	mov.w	r3, #0
 80026a8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80026ac:	4659      	mov	r1, fp
 80026ae:	018b      	lsls	r3, r1, #6
 80026b0:	4651      	mov	r1, sl
 80026b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026b6:	4651      	mov	r1, sl
 80026b8:	018a      	lsls	r2, r1, #6
 80026ba:	4651      	mov	r1, sl
 80026bc:	ebb2 0801 	subs.w	r8, r2, r1
 80026c0:	4659      	mov	r1, fp
 80026c2:	eb63 0901 	sbc.w	r9, r3, r1
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	f04f 0300 	mov.w	r3, #0
 80026ce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026d2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026d6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026da:	4690      	mov	r8, r2
 80026dc:	4699      	mov	r9, r3
 80026de:	4623      	mov	r3, r4
 80026e0:	eb18 0303 	adds.w	r3, r8, r3
 80026e4:	60bb      	str	r3, [r7, #8]
 80026e6:	462b      	mov	r3, r5
 80026e8:	eb49 0303 	adc.w	r3, r9, r3
 80026ec:	60fb      	str	r3, [r7, #12]
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	f04f 0300 	mov.w	r3, #0
 80026f6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026fa:	4629      	mov	r1, r5
 80026fc:	024b      	lsls	r3, r1, #9
 80026fe:	4621      	mov	r1, r4
 8002700:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002704:	4621      	mov	r1, r4
 8002706:	024a      	lsls	r2, r1, #9
 8002708:	4610      	mov	r0, r2
 800270a:	4619      	mov	r1, r3
 800270c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800270e:	2200      	movs	r2, #0
 8002710:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002712:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002714:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002718:	f7fe f8d8 	bl	80008cc <__aeabi_uldivmod>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4613      	mov	r3, r2
 8002722:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002724:	e058      	b.n	80027d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002726:	4b38      	ldr	r3, [pc, #224]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	099b      	lsrs	r3, r3, #6
 800272c:	2200      	movs	r2, #0
 800272e:	4618      	mov	r0, r3
 8002730:	4611      	mov	r1, r2
 8002732:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002736:	623b      	str	r3, [r7, #32]
 8002738:	2300      	movs	r3, #0
 800273a:	627b      	str	r3, [r7, #36]	@ 0x24
 800273c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002740:	4642      	mov	r2, r8
 8002742:	464b      	mov	r3, r9
 8002744:	f04f 0000 	mov.w	r0, #0
 8002748:	f04f 0100 	mov.w	r1, #0
 800274c:	0159      	lsls	r1, r3, #5
 800274e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002752:	0150      	lsls	r0, r2, #5
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4641      	mov	r1, r8
 800275a:	ebb2 0a01 	subs.w	sl, r2, r1
 800275e:	4649      	mov	r1, r9
 8002760:	eb63 0b01 	sbc.w	fp, r3, r1
 8002764:	f04f 0200 	mov.w	r2, #0
 8002768:	f04f 0300 	mov.w	r3, #0
 800276c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002770:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002774:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002778:	ebb2 040a 	subs.w	r4, r2, sl
 800277c:	eb63 050b 	sbc.w	r5, r3, fp
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	00eb      	lsls	r3, r5, #3
 800278a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800278e:	00e2      	lsls	r2, r4, #3
 8002790:	4614      	mov	r4, r2
 8002792:	461d      	mov	r5, r3
 8002794:	4643      	mov	r3, r8
 8002796:	18e3      	adds	r3, r4, r3
 8002798:	603b      	str	r3, [r7, #0]
 800279a:	464b      	mov	r3, r9
 800279c:	eb45 0303 	adc.w	r3, r5, r3
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	f04f 0200 	mov.w	r2, #0
 80027a6:	f04f 0300 	mov.w	r3, #0
 80027aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027ae:	4629      	mov	r1, r5
 80027b0:	028b      	lsls	r3, r1, #10
 80027b2:	4621      	mov	r1, r4
 80027b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027b8:	4621      	mov	r1, r4
 80027ba:	028a      	lsls	r2, r1, #10
 80027bc:	4610      	mov	r0, r2
 80027be:	4619      	mov	r1, r3
 80027c0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c2:	2200      	movs	r2, #0
 80027c4:	61bb      	str	r3, [r7, #24]
 80027c6:	61fa      	str	r2, [r7, #28]
 80027c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027cc:	f7fe f87e 	bl	80008cc <__aeabi_uldivmod>
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4613      	mov	r3, r2
 80027d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_RCC_GetSysClockFreq+0x200>)
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	0c1b      	lsrs	r3, r3, #16
 80027de:	f003 0303 	and.w	r3, r3, #3
 80027e2:	3301      	adds	r3, #1
 80027e4:	005b      	lsls	r3, r3, #1
 80027e6:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 80027e8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80027ea:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f2:	e002      	b.n	80027fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027f4:	4b05      	ldr	r3, [pc, #20]	@ (800280c <HAL_RCC_GetSysClockFreq+0x204>)
 80027f6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80027f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027fa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80027fc:	4618      	mov	r0, r3
 80027fe:	3750      	adds	r7, #80	@ 0x50
 8002800:	46bd      	mov	sp, r7
 8002802:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002806:	bf00      	nop
 8002808:	40023800 	.word	0x40023800
 800280c:	00f42400 	.word	0x00f42400
 8002810:	007a1200 	.word	0x007a1200

08002814 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b086      	sub	sp, #24
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d101      	bne.n	8002826 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	e273      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b00      	cmp	r3, #0
 8002830:	d075      	beq.n	800291e <HAL_RCC_OscConfig+0x10a>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002832:	4b88      	ldr	r3, [pc, #544]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	f003 030c 	and.w	r3, r3, #12
 800283a:	2b04      	cmp	r3, #4
 800283c:	d00c      	beq.n	8002858 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800283e:	4b85      	ldr	r3, [pc, #532]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002846:	2b08      	cmp	r3, #8
 8002848:	d112      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800284a:	4b82      	ldr	r3, [pc, #520]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002852:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002856:	d10b      	bne.n	8002870 <HAL_RCC_OscConfig+0x5c>
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002858:	4b7e      	ldr	r3, [pc, #504]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d05b      	beq.n	800291c <HAL_RCC_OscConfig+0x108>
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d157      	bne.n	800291c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e24e      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002878:	d106      	bne.n	8002888 <HAL_RCC_OscConfig+0x74>
 800287a:	4b76      	ldr	r3, [pc, #472]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	4a75      	ldr	r2, [pc, #468]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002880:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002884:	6013      	str	r3, [r2, #0]
 8002886:	e01d      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002890:	d10c      	bne.n	80028ac <HAL_RCC_OscConfig+0x98>
 8002892:	4b70      	ldr	r3, [pc, #448]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a6f      	ldr	r2, [pc, #444]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002898:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800289c:	6013      	str	r3, [r2, #0]
 800289e:	4b6d      	ldr	r3, [pc, #436]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	4a6c      	ldr	r2, [pc, #432]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028a4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028a8:	6013      	str	r3, [r2, #0]
 80028aa:	e00b      	b.n	80028c4 <HAL_RCC_OscConfig+0xb0>
 80028ac:	4b69      	ldr	r3, [pc, #420]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a68      	ldr	r2, [pc, #416]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028b2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028b6:	6013      	str	r3, [r2, #0]
 80028b8:	4b66      	ldr	r3, [pc, #408]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a65      	ldr	r2, [pc, #404]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028be:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80028c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d013      	beq.n	80028f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028cc:	f7ff faf2 	bl	8001eb4 <HAL_GetTick>
 80028d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028d2:	e008      	b.n	80028e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028d4:	f7ff faee 	bl	8001eb4 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	2b64      	cmp	r3, #100	@ 0x64
 80028e0:	d901      	bls.n	80028e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028e2:	2303      	movs	r3, #3
 80028e4:	e213      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028e6:	4b5b      	ldr	r3, [pc, #364]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d0f0      	beq.n	80028d4 <HAL_RCC_OscConfig+0xc0>
 80028f2:	e014      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7ff fade 	bl	8001eb4 <HAL_GetTick>
 80028f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028fa:	e008      	b.n	800290e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028fc:	f7ff fada 	bl	8001eb4 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	693b      	ldr	r3, [r7, #16]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	2b64      	cmp	r3, #100	@ 0x64
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e1ff      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800290e:	4b51      	ldr	r3, [pc, #324]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1f0      	bne.n	80028fc <HAL_RCC_OscConfig+0xe8>
 800291a:	e000      	b.n	800291e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800291c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f003 0302 	and.w	r3, r3, #2
 8002926:	2b00      	cmp	r3, #0
 8002928:	d063      	beq.n	80029f2 <HAL_RCC_OscConfig+0x1de>
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800292a:	4b4a      	ldr	r3, [pc, #296]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 800292c:	689b      	ldr	r3, [r3, #8]
 800292e:	f003 030c 	and.w	r3, r3, #12
 8002932:	2b00      	cmp	r3, #0
 8002934:	d00b      	beq.n	800294e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002936:	4b47      	ldr	r3, [pc, #284]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800293e:	2b08      	cmp	r3, #8
 8002940:	d11c      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002942:	4b44      	ldr	r3, [pc, #272]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d116      	bne.n	800297c <HAL_RCC_OscConfig+0x168>
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800294e:	4b41      	ldr	r3, [pc, #260]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0302 	and.w	r3, r3, #2
 8002956:	2b00      	cmp	r3, #0
 8002958:	d005      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	68db      	ldr	r3, [r3, #12]
 800295e:	2b01      	cmp	r3, #1
 8002960:	d001      	beq.n	8002966 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
 8002964:	e1d3      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002966:	4b3b      	ldr	r3, [pc, #236]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4937      	ldr	r1, [pc, #220]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002976:	4313      	orrs	r3, r2
 8002978:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800297a:	e03a      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d020      	beq.n	80029c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002984:	4b34      	ldr	r3, [pc, #208]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 8002986:	2201      	movs	r2, #1
 8002988:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800298a:	f7ff fa93 	bl	8001eb4 <HAL_GetTick>
 800298e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002990:	e008      	b.n	80029a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002992:	f7ff fa8f 	bl	8001eb4 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d901      	bls.n	80029a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1b4      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d0f0      	beq.n	8002992 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b0:	4b28      	ldr	r3, [pc, #160]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	00db      	lsls	r3, r3, #3
 80029be:	4925      	ldr	r1, [pc, #148]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	600b      	str	r3, [r1, #0]
 80029c4:	e015      	b.n	80029f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80029c6:	4b24      	ldr	r3, [pc, #144]	@ (8002a58 <HAL_RCC_OscConfig+0x244>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029cc:	f7ff fa72 	bl	8001eb4 <HAL_GetTick>
 80029d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029d2:	e008      	b.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029d4:	f7ff fa6e 	bl	8001eb4 <HAL_GetTick>
 80029d8:	4602      	mov	r2, r0
 80029da:	693b      	ldr	r3, [r7, #16]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	2b02      	cmp	r3, #2
 80029e0:	d901      	bls.n	80029e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029e2:	2303      	movs	r3, #3
 80029e4:	e193      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029e6:	4b1b      	ldr	r3, [pc, #108]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0302 	and.w	r3, r3, #2
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d1f0      	bne.n	80029d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d036      	beq.n	8002a6c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d016      	beq.n	8002a34 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a06:	4b15      	ldr	r3, [pc, #84]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a08:	2201      	movs	r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a0c:	f7ff fa52 	bl	8001eb4 <HAL_GetTick>
 8002a10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a12:	e008      	b.n	8002a26 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a14:	f7ff fa4e 	bl	8001eb4 <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	1ad3      	subs	r3, r2, r3
 8002a1e:	2b02      	cmp	r3, #2
 8002a20:	d901      	bls.n	8002a26 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002a22:	2303      	movs	r3, #3
 8002a24:	e173      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a26:	4b0b      	ldr	r3, [pc, #44]	@ (8002a54 <HAL_RCC_OscConfig+0x240>)
 8002a28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2a:	f003 0302 	and.w	r3, r3, #2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d0f0      	beq.n	8002a14 <HAL_RCC_OscConfig+0x200>
 8002a32:	e01b      	b.n	8002a6c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a34:	4b09      	ldr	r3, [pc, #36]	@ (8002a5c <HAL_RCC_OscConfig+0x248>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a3a:	f7ff fa3b 	bl	8001eb4 <HAL_GetTick>
 8002a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a40:	e00e      	b.n	8002a60 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a42:	f7ff fa37 	bl	8001eb4 <HAL_GetTick>
 8002a46:	4602      	mov	r2, r0
 8002a48:	693b      	ldr	r3, [r7, #16]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d907      	bls.n	8002a60 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a50:	2303      	movs	r3, #3
 8002a52:	e15c      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
 8002a54:	40023800 	.word	0x40023800
 8002a58:	42470000 	.word	0x42470000
 8002a5c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a60:	4b8a      	ldr	r3, [pc, #552]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002a62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a64:	f003 0302 	and.w	r3, r3, #2
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d1ea      	bne.n	8002a42 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f003 0304 	and.w	r3, r3, #4
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	f000 8097 	beq.w	8002ba8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4b83      	ldr	r3, [pc, #524]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d10f      	bne.n	8002aaa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	60bb      	str	r3, [r7, #8]
 8002a8e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	4a7e      	ldr	r2, [pc, #504]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a9a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aaa:	4b79      	ldr	r3, [pc, #484]	@ (8002c90 <HAL_RCC_OscConfig+0x47c>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d118      	bne.n	8002ae8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ab6:	4b76      	ldr	r3, [pc, #472]	@ (8002c90 <HAL_RCC_OscConfig+0x47c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a75      	ldr	r2, [pc, #468]	@ (8002c90 <HAL_RCC_OscConfig+0x47c>)
 8002abc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ac0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ac2:	f7ff f9f7 	bl	8001eb4 <HAL_GetTick>
 8002ac6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac8:	e008      	b.n	8002adc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002aca:	f7ff f9f3 	bl	8001eb4 <HAL_GetTick>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	1ad3      	subs	r3, r2, r3
 8002ad4:	2b02      	cmp	r3, #2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e118      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002adc:	4b6c      	ldr	r3, [pc, #432]	@ (8002c90 <HAL_RCC_OscConfig+0x47c>)
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0f0      	beq.n	8002aca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d106      	bne.n	8002afe <HAL_RCC_OscConfig+0x2ea>
 8002af0:	4b66      	ldr	r3, [pc, #408]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002af4:	4a65      	ldr	r2, [pc, #404]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002af6:	f043 0301 	orr.w	r3, r3, #1
 8002afa:	6713      	str	r3, [r2, #112]	@ 0x70
 8002afc:	e01c      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	2b05      	cmp	r3, #5
 8002b04:	d10c      	bne.n	8002b20 <HAL_RCC_OscConfig+0x30c>
 8002b06:	4b61      	ldr	r3, [pc, #388]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b0a:	4a60      	ldr	r2, [pc, #384]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b0c:	f043 0304 	orr.w	r3, r3, #4
 8002b10:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b12:	4b5e      	ldr	r3, [pc, #376]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b16:	4a5d      	ldr	r2, [pc, #372]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b1e:	e00b      	b.n	8002b38 <HAL_RCC_OscConfig+0x324>
 8002b20:	4b5a      	ldr	r3, [pc, #360]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b24:	4a59      	ldr	r2, [pc, #356]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b26:	f023 0301 	bic.w	r3, r3, #1
 8002b2a:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b2c:	4b57      	ldr	r3, [pc, #348]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b30:	4a56      	ldr	r2, [pc, #344]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b32:	f023 0304 	bic.w	r3, r3, #4
 8002b36:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d015      	beq.n	8002b6c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b40:	f7ff f9b8 	bl	8001eb4 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b46:	e00a      	b.n	8002b5e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b48:	f7ff f9b4 	bl	8001eb4 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d901      	bls.n	8002b5e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b5a:	2303      	movs	r3, #3
 8002b5c:	e0d7      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b5e:	4b4b      	ldr	r3, [pc, #300]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b62:	f003 0302 	and.w	r3, r3, #2
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d0ee      	beq.n	8002b48 <HAL_RCC_OscConfig+0x334>
 8002b6a:	e014      	b.n	8002b96 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b6c:	f7ff f9a2 	bl	8001eb4 <HAL_GetTick>
 8002b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b72:	e00a      	b.n	8002b8a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b74:	f7ff f99e 	bl	8001eb4 <HAL_GetTick>
 8002b78:	4602      	mov	r2, r0
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	1ad3      	subs	r3, r2, r3
 8002b7e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0c1      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b8a:	4b40      	ldr	r3, [pc, #256]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d1ee      	bne.n	8002b74 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b96:	7dfb      	ldrb	r3, [r7, #23]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d105      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b9c:	4b3b      	ldr	r3, [pc, #236]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002b9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ba0:	4a3a      	ldr	r2, [pc, #232]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ba6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	699b      	ldr	r3, [r3, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	f000 80ad 	beq.w	8002d0c <HAL_RCC_OscConfig+0x4f8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bb2:	4b36      	ldr	r3, [pc, #216]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002bb4:	689b      	ldr	r3, [r3, #8]
 8002bb6:	f003 030c 	and.w	r3, r3, #12
 8002bba:	2b08      	cmp	r3, #8
 8002bbc:	d060      	beq.n	8002c80 <HAL_RCC_OscConfig+0x46c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	699b      	ldr	r3, [r3, #24]
 8002bc2:	2b02      	cmp	r3, #2
 8002bc4:	d145      	bne.n	8002c52 <HAL_RCC_OscConfig+0x43e>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bc6:	4b33      	ldr	r3, [pc, #204]	@ (8002c94 <HAL_RCC_OscConfig+0x480>)
 8002bc8:	2200      	movs	r2, #0
 8002bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7ff f972 	bl	8001eb4 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bd4:	f7ff f96e 	bl	8001eb4 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b02      	cmp	r3, #2
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e093      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be6:	4b29      	ldr	r3, [pc, #164]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f0      	bne.n	8002bd4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	69da      	ldr	r2, [r3, #28]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	431a      	orrs	r2, r3
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c00:	019b      	lsls	r3, r3, #6
 8002c02:	431a      	orrs	r2, r3
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c08:	085b      	lsrs	r3, r3, #1
 8002c0a:	3b01      	subs	r3, #1
 8002c0c:	041b      	lsls	r3, r3, #16
 8002c0e:	431a      	orrs	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c14:	061b      	lsls	r3, r3, #24
 8002c16:	431a      	orrs	r2, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c1c:	071b      	lsls	r3, r3, #28
 8002c1e:	491b      	ldr	r1, [pc, #108]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c24:	4b1b      	ldr	r3, [pc, #108]	@ (8002c94 <HAL_RCC_OscConfig+0x480>)
 8002c26:	2201      	movs	r2, #1
 8002c28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c2a:	f7ff f943 	bl	8001eb4 <HAL_GetTick>
 8002c2e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c30:	e008      	b.n	8002c44 <HAL_RCC_OscConfig+0x430>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c32:	f7ff f93f 	bl	8001eb4 <HAL_GetTick>
 8002c36:	4602      	mov	r2, r0
 8002c38:	693b      	ldr	r3, [r7, #16]
 8002c3a:	1ad3      	subs	r3, r2, r3
 8002c3c:	2b02      	cmp	r3, #2
 8002c3e:	d901      	bls.n	8002c44 <HAL_RCC_OscConfig+0x430>
          {
            return HAL_TIMEOUT;
 8002c40:	2303      	movs	r3, #3
 8002c42:	e064      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c44:	4b11      	ldr	r3, [pc, #68]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d0f0      	beq.n	8002c32 <HAL_RCC_OscConfig+0x41e>
 8002c50:	e05c      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c52:	4b10      	ldr	r3, [pc, #64]	@ (8002c94 <HAL_RCC_OscConfig+0x480>)
 8002c54:	2200      	movs	r2, #0
 8002c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c58:	f7ff f92c 	bl	8001eb4 <HAL_GetTick>
 8002c5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c5e:	e008      	b.n	8002c72 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c60:	f7ff f928 	bl	8001eb4 <HAL_GetTick>
 8002c64:	4602      	mov	r2, r0
 8002c66:	693b      	ldr	r3, [r7, #16]
 8002c68:	1ad3      	subs	r3, r2, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d901      	bls.n	8002c72 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c6e:	2303      	movs	r3, #3
 8002c70:	e04d      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c72:	4b06      	ldr	r3, [pc, #24]	@ (8002c8c <HAL_RCC_OscConfig+0x478>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d1f0      	bne.n	8002c60 <HAL_RCC_OscConfig+0x44c>
 8002c7e:	e045      	b.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d107      	bne.n	8002c98 <HAL_RCC_OscConfig+0x484>
      {
        return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e040      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000
 8002c94:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c98:	4b1f      	ldr	r3, [pc, #124]	@ (8002d18 <HAL_RCC_OscConfig+0x504>)
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d030      	beq.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d129      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d122      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002cc2:	68fa      	ldr	r2, [r7, #12]
 8002cc4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002cc8:	4013      	ands	r3, r2
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002cce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d119      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cde:	085b      	lsrs	r3, r3, #1
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d10f      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002cf2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d107      	bne.n	8002d08 <HAL_RCC_OscConfig+0x4f4>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d02:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d001      	beq.n	8002d0c <HAL_RCC_OscConfig+0x4f8>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	e000      	b.n	8002d0e <HAL_RCC_OscConfig+0x4fa>
        }
      }
    }
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023800 	.word	0x40023800

08002d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b082      	sub	sp, #8
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e07b      	b.n	8002e26 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002d3e:	d009      	beq.n	8002d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	e005      	b.n	8002d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fea2 	bl	8001ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d8a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	689b      	ldr	r3, [r3, #8]
 8002d98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d9c:	431a      	orrs	r2, r3
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	68db      	ldr	r3, [r3, #12]
 8002da2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	691b      	ldr	r3, [r3, #16]
 8002dac:	f003 0302 	and.w	r3, r3, #2
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	f003 0301 	and.w	r3, r3, #1
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	699b      	ldr	r3, [r3, #24]
 8002dc0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a1b      	ldr	r3, [r3, #32]
 8002dd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002dd8:	ea42 0103 	orr.w	r1, r2, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	430a      	orrs	r2, r1
 8002dea:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	699b      	ldr	r3, [r3, #24]
 8002df0:	0c1b      	lsrs	r3, r3, #16
 8002df2:	f003 0104 	and.w	r1, r3, #4
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dfa:	f003 0210 	and.w	r2, r3, #16
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	430a      	orrs	r2, r1
 8002e04:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	69da      	ldr	r2, [r3, #28]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e2e:	b580      	push	{r7, lr}
 8002e30:	b088      	sub	sp, #32
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	60f8      	str	r0, [r7, #12]
 8002e36:	60b9      	str	r1, [r7, #8]
 8002e38:	603b      	str	r3, [r7, #0]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e3e:	2300      	movs	r3, #0
 8002e40:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d101      	bne.n	8002e50 <HAL_SPI_Transmit+0x22>
 8002e4c:	2302      	movs	r3, #2
 8002e4e:	e12d      	b.n	80030ac <HAL_SPI_Transmit+0x27e>
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e58:	f7ff f82c 	bl	8001eb4 <HAL_GetTick>
 8002e5c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e5e:	88fb      	ldrh	r3, [r7, #6]
 8002e60:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b01      	cmp	r3, #1
 8002e6c:	d002      	beq.n	8002e74 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e6e:	2302      	movs	r3, #2
 8002e70:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e72:	e116      	b.n	80030a2 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d002      	beq.n	8002e80 <HAL_SPI_Transmit+0x52>
 8002e7a:	88fb      	ldrh	r3, [r7, #6]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d102      	bne.n	8002e86 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e84:	e10d      	b.n	80030a2 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	2203      	movs	r2, #3
 8002e8a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	2200      	movs	r2, #0
 8002e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	88fa      	ldrh	r2, [r7, #6]
 8002e9e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	88fa      	ldrh	r2, [r7, #6]
 8002ea4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	2200      	movs	r2, #0
 8002ebc:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002ecc:	d10f      	bne.n	8002eee <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002edc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002eec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ef8:	2b40      	cmp	r3, #64	@ 0x40
 8002efa:	d007      	beq.n	8002f0c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	681a      	ldr	r2, [r3, #0]
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f0a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f14:	d14f      	bne.n	8002fb6 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d002      	beq.n	8002f24 <HAL_SPI_Transmit+0xf6>
 8002f1e:	8afb      	ldrh	r3, [r7, #22]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d142      	bne.n	8002faa <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f28:	881a      	ldrh	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	1c9a      	adds	r2, r3, #2
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	3b01      	subs	r3, #1
 8002f42:	b29a      	uxth	r2, r3
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f48:	e02f      	b.n	8002faa <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f003 0302 	and.w	r3, r3, #2
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d112      	bne.n	8002f7e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f5c:	881a      	ldrh	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	1c9a      	adds	r2, r3, #2
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	3b01      	subs	r3, #1
 8002f76:	b29a      	uxth	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f7c:	e015      	b.n	8002faa <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f7e:	f7fe ff99 	bl	8001eb4 <HAL_GetTick>
 8002f82:	4602      	mov	r2, r0
 8002f84:	69bb      	ldr	r3, [r7, #24]
 8002f86:	1ad3      	subs	r3, r2, r3
 8002f88:	683a      	ldr	r2, [r7, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d803      	bhi.n	8002f96 <HAL_SPI_Transmit+0x168>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f94:	d102      	bne.n	8002f9c <HAL_SPI_Transmit+0x16e>
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d106      	bne.n	8002faa <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002fa8:	e07b      	b.n	80030a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ca      	bne.n	8002f4a <HAL_SPI_Transmit+0x11c>
 8002fb4:	e050      	b.n	8003058 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d002      	beq.n	8002fc4 <HAL_SPI_Transmit+0x196>
 8002fbe:	8afb      	ldrh	r3, [r7, #22]
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d144      	bne.n	800304e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	330c      	adds	r3, #12
 8002fce:	7812      	ldrb	r2, [r2, #0]
 8002fd0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd6:	1c5a      	adds	r2, r3, #1
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	3b01      	subs	r3, #1
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002fea:	e030      	b.n	800304e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d113      	bne.n	8003022 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	330c      	adds	r3, #12
 8003004:	7812      	ldrb	r2, [r2, #0]
 8003006:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800300c:	1c5a      	adds	r2, r3, #1
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003016:	b29b      	uxth	r3, r3
 8003018:	3b01      	subs	r3, #1
 800301a:	b29a      	uxth	r2, r3
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003020:	e015      	b.n	800304e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003022:	f7fe ff47 	bl	8001eb4 <HAL_GetTick>
 8003026:	4602      	mov	r2, r0
 8003028:	69bb      	ldr	r3, [r7, #24]
 800302a:	1ad3      	subs	r3, r2, r3
 800302c:	683a      	ldr	r2, [r7, #0]
 800302e:	429a      	cmp	r2, r3
 8003030:	d803      	bhi.n	800303a <HAL_SPI_Transmit+0x20c>
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003038:	d102      	bne.n	8003040 <HAL_SPI_Transmit+0x212>
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d106      	bne.n	800304e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800304c:	e029      	b.n	80030a2 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003052:	b29b      	uxth	r3, r3
 8003054:	2b00      	cmp	r3, #0
 8003056:	d1c9      	bne.n	8002fec <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	68f8      	ldr	r0, [r7, #12]
 800305e:	f000 fa61 	bl	8003524 <SPI_EndRxTxTransaction>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d002      	beq.n	800306e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2220      	movs	r2, #32
 800306c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d10a      	bne.n	800308c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003076:	2300      	movs	r3, #0
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68db      	ldr	r3, [r3, #12]
 8003080:	613b      	str	r3, [r7, #16]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689b      	ldr	r3, [r3, #8]
 8003088:	613b      	str	r3, [r7, #16]
 800308a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003090:	2b00      	cmp	r3, #0
 8003092:	d002      	beq.n	800309a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	77fb      	strb	r3, [r7, #31]
 8003098:	e003      	b.n	80030a2 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80030aa:	7ffb      	ldrb	r3, [r7, #31]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3720      	adds	r7, #32
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b08c      	sub	sp, #48	@ 0x30
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	60f8      	str	r0, [r7, #12]
 80030bc:	60b9      	str	r1, [r7, #8]
 80030be:	607a      	str	r2, [r7, #4]
 80030c0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030c2:	2301      	movs	r3, #1
 80030c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030c6:	2300      	movs	r3, #0
 80030c8:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_SPI_TransmitReceive+0x26>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e198      	b.n	800340c <HAL_SPI_TransmitReceive+0x358>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030e2:	f7fe fee7 	bl	8001eb4 <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80030ee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	685b      	ldr	r3, [r3, #4]
 80030f6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80030f8:	887b      	ldrh	r3, [r7, #2]
 80030fa:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80030fc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003100:	2b01      	cmp	r3, #1
 8003102:	d00f      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x70>
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800310a:	d107      	bne.n	800311c <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	2b00      	cmp	r3, #0
 8003112:	d103      	bne.n	800311c <HAL_SPI_TransmitReceive+0x68>
 8003114:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003118:	2b04      	cmp	r3, #4
 800311a:	d003      	beq.n	8003124 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800311c:	2302      	movs	r3, #2
 800311e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003122:	e16d      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d005      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x82>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d002      	beq.n	8003136 <HAL_SPI_TransmitReceive+0x82>
 8003130:	887b      	ldrh	r3, [r7, #2]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d103      	bne.n	800313e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003136:	2301      	movs	r3, #1
 8003138:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 800313c:	e160      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003144:	b2db      	uxtb	r3, r3
 8003146:	2b04      	cmp	r3, #4
 8003148:	d003      	beq.n	8003152 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	2205      	movs	r2, #5
 800314e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	887a      	ldrh	r2, [r7, #2]
 8003162:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	887a      	ldrh	r2, [r7, #2]
 8003168:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	68ba      	ldr	r2, [r7, #8]
 800316e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	887a      	ldrh	r2, [r7, #2]
 8003174:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	887a      	ldrh	r2, [r7, #2]
 800317a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	2200      	movs	r2, #0
 8003186:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003192:	2b40      	cmp	r3, #64	@ 0x40
 8003194:	d007      	beq.n	80031a6 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80031a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80031ae:	d17c      	bne.n	80032aa <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d002      	beq.n	80031be <HAL_SPI_TransmitReceive+0x10a>
 80031b8:	8b7b      	ldrh	r3, [r7, #26]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	d16a      	bne.n	8003294 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031c2:	881a      	ldrh	r2, [r3, #0]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80031ce:	1c9a      	adds	r2, r3, #2
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031d8:	b29b      	uxth	r3, r3
 80031da:	3b01      	subs	r3, #1
 80031dc:	b29a      	uxth	r2, r3
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80031e2:	e057      	b.n	8003294 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 0302 	and.w	r3, r3, #2
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d11b      	bne.n	800322a <HAL_SPI_TransmitReceive+0x176>
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80031f6:	b29b      	uxth	r3, r3
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d016      	beq.n	800322a <HAL_SPI_TransmitReceive+0x176>
 80031fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d113      	bne.n	800322a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003206:	881a      	ldrh	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003212:	1c9a      	adds	r2, r3, #2
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800321c:	b29b      	uxth	r3, r3
 800321e:	3b01      	subs	r3, #1
 8003220:	b29a      	uxth	r2, r3
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003226:	2300      	movs	r3, #0
 8003228:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0301 	and.w	r3, r3, #1
 8003234:	2b01      	cmp	r3, #1
 8003236:	d119      	bne.n	800326c <HAL_SPI_TransmitReceive+0x1b8>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800323c:	b29b      	uxth	r3, r3
 800323e:	2b00      	cmp	r3, #0
 8003240:	d014      	beq.n	800326c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	68da      	ldr	r2, [r3, #12]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800324c:	b292      	uxth	r2, r2
 800324e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003254:	1c9a      	adds	r2, r3, #2
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003268:	2301      	movs	r3, #1
 800326a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800326c:	f7fe fe22 	bl	8001eb4 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003278:	429a      	cmp	r2, r3
 800327a:	d80b      	bhi.n	8003294 <HAL_SPI_TransmitReceive+0x1e0>
 800327c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800327e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003282:	d007      	beq.n	8003294 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003284:	2303      	movs	r3, #3
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2201      	movs	r2, #1
 800328e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003292:	e0b5      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003298:	b29b      	uxth	r3, r3
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1a2      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x130>
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d19d      	bne.n	80031e4 <HAL_SPI_TransmitReceive+0x130>
 80032a8:	e080      	b.n	80033ac <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_SPI_TransmitReceive+0x204>
 80032b2:	8b7b      	ldrh	r3, [r7, #26]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d16f      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	330c      	adds	r3, #12
 80032c2:	7812      	ldrb	r2, [r2, #0]
 80032c4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	1c5a      	adds	r2, r3, #1
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032d4:	b29b      	uxth	r3, r3
 80032d6:	3b01      	subs	r3, #1
 80032d8:	b29a      	uxth	r2, r3
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032de:	e05b      	b.n	8003398 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	f003 0302 	and.w	r3, r3, #2
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d11c      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x274>
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80032f2:	b29b      	uxth	r3, r3
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d017      	beq.n	8003328 <HAL_SPI_TransmitReceive+0x274>
 80032f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032fa:	2b01      	cmp	r3, #1
 80032fc:	d114      	bne.n	8003328 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	7812      	ldrb	r2, [r2, #0]
 800330a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003310:	1c5a      	adds	r2, r3, #1
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800331a:	b29b      	uxth	r3, r3
 800331c:	3b01      	subs	r3, #1
 800331e:	b29a      	uxth	r2, r3
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003324:	2300      	movs	r3, #0
 8003326:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b01      	cmp	r3, #1
 8003334:	d119      	bne.n	800336a <HAL_SPI_TransmitReceive+0x2b6>
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800333a:	b29b      	uxth	r3, r3
 800333c:	2b00      	cmp	r3, #0
 800333e:	d014      	beq.n	800336a <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68da      	ldr	r2, [r3, #12]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800334a:	b2d2      	uxtb	r2, r2
 800334c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003352:	1c5a      	adds	r2, r3, #1
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800335c:	b29b      	uxth	r3, r3
 800335e:	3b01      	subs	r3, #1
 8003360:	b29a      	uxth	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003366:	2301      	movs	r3, #1
 8003368:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800336a:	f7fe fda3 	bl	8001eb4 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003376:	429a      	cmp	r2, r3
 8003378:	d803      	bhi.n	8003382 <HAL_SPI_TransmitReceive+0x2ce>
 800337a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003380:	d102      	bne.n	8003388 <HAL_SPI_TransmitReceive+0x2d4>
 8003382:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003384:	2b00      	cmp	r3, #0
 8003386:	d107      	bne.n	8003398 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2201      	movs	r2, #1
 8003392:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003396:	e033      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339c:	b29b      	uxth	r3, r3
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d19e      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x22c>
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80033a6:	b29b      	uxth	r3, r3
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d199      	bne.n	80032e0 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80033ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80033ae:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 f8b7 	bl	8003524 <SPI_EndRxTxTransaction>
 80033b6:	4603      	mov	r3, r0
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d006      	beq.n	80033ca <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2220      	movs	r2, #32
 80033c6:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 80033c8:	e01a      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	689b      	ldr	r3, [r3, #8]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d10a      	bne.n	80033e8 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80033d2:	2300      	movs	r3, #0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	617b      	str	r3, [r7, #20]
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	617b      	str	r3, [r7, #20]
 80033e6:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80033f0:	2301      	movs	r3, #1
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033f6:	e003      	b.n	8003400 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003408:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 800340c:	4618      	mov	r0, r3
 800340e:	3730      	adds	r7, #48	@ 0x30
 8003410:	46bd      	mov	sp, r7
 8003412:	bd80      	pop	{r7, pc}

08003414 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b088      	sub	sp, #32
 8003418:	af00      	add	r7, sp, #0
 800341a:	60f8      	str	r0, [r7, #12]
 800341c:	60b9      	str	r1, [r7, #8]
 800341e:	603b      	str	r3, [r7, #0]
 8003420:	4613      	mov	r3, r2
 8003422:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003424:	f7fe fd46 	bl	8001eb4 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800342c:	1a9b      	subs	r3, r3, r2
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	4413      	add	r3, r2
 8003432:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003434:	f7fe fd3e 	bl	8001eb4 <HAL_GetTick>
 8003438:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800343a:	4b39      	ldr	r3, [pc, #228]	@ (8003520 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	015b      	lsls	r3, r3, #5
 8003440:	0d1b      	lsrs	r3, r3, #20
 8003442:	69fa      	ldr	r2, [r7, #28]
 8003444:	fb02 f303 	mul.w	r3, r2, r3
 8003448:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800344a:	e054      	b.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003452:	d050      	beq.n	80034f6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003454:	f7fe fd2e 	bl	8001eb4 <HAL_GetTick>
 8003458:	4602      	mov	r2, r0
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	1ad3      	subs	r3, r2, r3
 800345e:	69fa      	ldr	r2, [r7, #28]
 8003460:	429a      	cmp	r2, r3
 8003462:	d902      	bls.n	800346a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d13d      	bne.n	80034e6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	685a      	ldr	r2, [r3, #4]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003478:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003482:	d111      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800348c:	d004      	beq.n	8003498 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	689b      	ldr	r3, [r3, #8]
 8003492:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003496:	d107      	bne.n	80034a8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034a6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80034b0:	d10f      	bne.n	80034d2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	681a      	ldr	r2, [r3, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034c0:	601a      	str	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	681a      	ldr	r2, [r3, #0]
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80034d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80034e2:	2303      	movs	r3, #3
 80034e4:	e017      	b.n	8003516 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d101      	bne.n	80034f0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80034f0:	697b      	ldr	r3, [r7, #20]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	4013      	ands	r3, r2
 8003500:	68ba      	ldr	r2, [r7, #8]
 8003502:	429a      	cmp	r2, r3
 8003504:	bf0c      	ite	eq
 8003506:	2301      	moveq	r3, #1
 8003508:	2300      	movne	r3, #0
 800350a:	b2db      	uxtb	r3, r3
 800350c:	461a      	mov	r2, r3
 800350e:	79fb      	ldrb	r3, [r7, #7]
 8003510:	429a      	cmp	r2, r3
 8003512:	d19b      	bne.n	800344c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003514:	2300      	movs	r3, #0
}
 8003516:	4618      	mov	r0, r3
 8003518:	3720      	adds	r7, #32
 800351a:	46bd      	mov	sp, r7
 800351c:	bd80      	pop	{r7, pc}
 800351e:	bf00      	nop
 8003520:	20000004 	.word	0x20000004

08003524 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af02      	add	r7, sp, #8
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	2201      	movs	r2, #1
 8003538:	2102      	movs	r1, #2
 800353a:	68f8      	ldr	r0, [r7, #12]
 800353c:	f7ff ff6a 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 8003540:	4603      	mov	r3, r0
 8003542:	2b00      	cmp	r3, #0
 8003544:	d007      	beq.n	8003556 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800354a:	f043 0220 	orr.w	r2, r3, #32
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e032      	b.n	80035bc <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003556:	4b1b      	ldr	r3, [pc, #108]	@ (80035c4 <SPI_EndRxTxTransaction+0xa0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a1b      	ldr	r2, [pc, #108]	@ (80035c8 <SPI_EndRxTxTransaction+0xa4>)
 800355c:	fba2 2303 	umull	r2, r3, r2, r3
 8003560:	0d5b      	lsrs	r3, r3, #21
 8003562:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003566:	fb02 f303 	mul.w	r3, r2, r3
 800356a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003574:	d112      	bne.n	800359c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68bb      	ldr	r3, [r7, #8]
 800357c:	2200      	movs	r2, #0
 800357e:	2180      	movs	r1, #128	@ 0x80
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff ff47 	bl	8003414 <SPI_WaitFlagStateUntilTimeout>
 8003586:	4603      	mov	r3, r0
 8003588:	2b00      	cmp	r3, #0
 800358a:	d016      	beq.n	80035ba <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003590:	f043 0220 	orr.w	r2, r3, #32
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003598:	2303      	movs	r3, #3
 800359a:	e00f      	b.n	80035bc <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800359c:	697b      	ldr	r3, [r7, #20]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d00a      	beq.n	80035b8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80035a2:	697b      	ldr	r3, [r7, #20]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b2:	2b80      	cmp	r3, #128	@ 0x80
 80035b4:	d0f2      	beq.n	800359c <SPI_EndRxTxTransaction+0x78>
 80035b6:	e000      	b.n	80035ba <SPI_EndRxTxTransaction+0x96>
        break;
 80035b8:	bf00      	nop
  }

  return HAL_OK;
 80035ba:	2300      	movs	r3, #0
}
 80035bc:	4618      	mov	r0, r3
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	20000004 	.word	0x20000004
 80035c8:	165e9f81 	.word	0x165e9f81

080035cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80035d0:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <MX_FATFS_Init+0x18>)
 80035d2:	4805      	ldr	r0, [pc, #20]	@ (80035e8 <MX_FATFS_Init+0x1c>)
 80035d4:	f003 f9c6 	bl	8006964 <FATFS_LinkDriver>
 80035d8:	4603      	mov	r3, r0
 80035da:	461a      	mov	r2, r3
 80035dc:	4b03      	ldr	r3, [pc, #12]	@ (80035ec <MX_FATFS_Init+0x20>)
 80035de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80035e0:	bf00      	nop
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	20000108 	.word	0x20000108
 80035e8:	20000010 	.word	0x20000010
 80035ec:	20000104 	.word	0x20000104

080035f0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80035f0:	b480      	push	{r7}
 80035f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80035f4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 80035f6:	4618      	mov	r0, r3
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr

08003600 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b082      	sub	sp, #8
 8003604:	af00      	add	r7, sp, #0
 8003606:	4603      	mov	r3, r0
 8003608:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return SD_disk_initialize(pdrv);
 800360a:	79fb      	ldrb	r3, [r7, #7]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fd fc89 	bl	8000f24 <SD_disk_initialize>
 8003612:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8003614:	4618      	mov	r0, r3
 8003616:	3708      	adds	r7, #8
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b082      	sub	sp, #8
 8003620:	af00      	add	r7, sp, #0
 8003622:	4603      	mov	r3, r0
 8003624:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    //Stat = STA_NOINIT;
   // return Stat;
	return SD_disk_status(pdrv);
 8003626:	79fb      	ldrb	r3, [r7, #7]
 8003628:	4618      	mov	r0, r3
 800362a:	f7fd fd61 	bl	80010f0 <SD_disk_status>
 800362e:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8003638:	b580      	push	{r7, lr}
 800363a:	b084      	sub	sp, #16
 800363c:	af00      	add	r7, sp, #0
 800363e:	60b9      	str	r1, [r7, #8]
 8003640:	607a      	str	r2, [r7, #4]
 8003642:	603b      	str	r3, [r7, #0]
 8003644:	4603      	mov	r3, r0
 8003646:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    //return RES_OK;
	return SD_disk_read(pdrv, buff, sector, count);
 8003648:	7bf8      	ldrb	r0, [r7, #15]
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	687a      	ldr	r2, [r7, #4]
 800364e:	68b9      	ldr	r1, [r7, #8]
 8003650:	f7fd fd64 	bl	800111c <SD_disk_read>
 8003654:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8003656:	4618      	mov	r0, r3
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60b9      	str	r1, [r7, #8]
 8003666:	607a      	str	r2, [r7, #4]
 8003668:	603b      	str	r3, [r7, #0]
 800366a:	4603      	mov	r3, r0
 800366c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    //return RES_OK;
	return SD_disk_write(pdrv, buff, sector, count);
 800366e:	7bf8      	ldrb	r0, [r7, #15]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	687a      	ldr	r2, [r7, #4]
 8003674:	68b9      	ldr	r1, [r7, #8]
 8003676:	f7fd fdbb 	bl	80011f0 <SD_disk_write>
 800367a:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	4603      	mov	r3, r0
 800368c:	603a      	str	r2, [r7, #0]
 800368e:	71fb      	strb	r3, [r7, #7]
 8003690:	460b      	mov	r3, r1
 8003692:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    //DRESULT res = RES_ERROR;
    //return res;
	return SD_disk_ioctl(pdrv, cmd, buff);
 8003694:	79b9      	ldrb	r1, [r7, #6]
 8003696:	79fb      	ldrb	r3, [r7, #7]
 8003698:	683a      	ldr	r2, [r7, #0]
 800369a:	4618      	mov	r0, r3
 800369c:	f7fd fe2c 	bl	80012f8 <SD_disk_ioctl>
 80036a0:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3708      	adds	r7, #8
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	4603      	mov	r3, r0
 80036b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80036b6:	79fb      	ldrb	r3, [r7, #7]
 80036b8:	4a08      	ldr	r2, [pc, #32]	@ (80036dc <disk_status+0x30>)
 80036ba:	009b      	lsls	r3, r3, #2
 80036bc:	4413      	add	r3, r2
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	79fa      	ldrb	r2, [r7, #7]
 80036c4:	4905      	ldr	r1, [pc, #20]	@ (80036dc <disk_status+0x30>)
 80036c6:	440a      	add	r2, r1
 80036c8:	7a12      	ldrb	r2, [r2, #8]
 80036ca:	4610      	mov	r0, r2
 80036cc:	4798      	blx	r3
 80036ce:	4603      	mov	r3, r0
 80036d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80036d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	20000334 	.word	0x20000334

080036e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	4603      	mov	r3, r0
 80036e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80036ea:	2300      	movs	r3, #0
 80036ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80036ee:	79fb      	ldrb	r3, [r7, #7]
 80036f0:	4a0e      	ldr	r2, [pc, #56]	@ (800372c <disk_initialize+0x4c>)
 80036f2:	5cd3      	ldrb	r3, [r2, r3]
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d114      	bne.n	8003722 <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80036f8:	79fb      	ldrb	r3, [r7, #7]
 80036fa:	4a0c      	ldr	r2, [pc, #48]	@ (800372c <disk_initialize+0x4c>)
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	4413      	add	r3, r2
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	79fa      	ldrb	r2, [r7, #7]
 8003706:	4909      	ldr	r1, [pc, #36]	@ (800372c <disk_initialize+0x4c>)
 8003708:	440a      	add	r2, r1
 800370a:	7a12      	ldrb	r2, [r2, #8]
 800370c:	4610      	mov	r0, r2
 800370e:	4798      	blx	r3
 8003710:	4603      	mov	r3, r0
 8003712:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b00      	cmp	r3, #0
 8003718:	d103      	bne.n	8003722 <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 800371a:	79fb      	ldrb	r3, [r7, #7]
 800371c:	4a03      	ldr	r2, [pc, #12]	@ (800372c <disk_initialize+0x4c>)
 800371e:	2101      	movs	r1, #1
 8003720:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8003722:	7bfb      	ldrb	r3, [r7, #15]
}
 8003724:	4618      	mov	r0, r3
 8003726:	3710      	adds	r7, #16
 8003728:	46bd      	mov	sp, r7
 800372a:	bd80      	pop	{r7, pc}
 800372c:	20000334 	.word	0x20000334

08003730 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b087      	sub	sp, #28
 8003734:	af00      	add	r7, sp, #0
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	607a      	str	r2, [r7, #4]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8003740:	7bfb      	ldrb	r3, [r7, #15]
 8003742:	4a0a      	ldr	r2, [pc, #40]	@ (800376c <disk_read+0x3c>)
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	4413      	add	r3, r2
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	689c      	ldr	r4, [r3, #8]
 800374c:	7bfb      	ldrb	r3, [r7, #15]
 800374e:	4a07      	ldr	r2, [pc, #28]	@ (800376c <disk_read+0x3c>)
 8003750:	4413      	add	r3, r2
 8003752:	7a18      	ldrb	r0, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	68b9      	ldr	r1, [r7, #8]
 800375a:	47a0      	blx	r4
 800375c:	4603      	mov	r3, r0
 800375e:	75fb      	strb	r3, [r7, #23]
  return res;
 8003760:	7dfb      	ldrb	r3, [r7, #23]
}
 8003762:	4618      	mov	r0, r3
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	bd90      	pop	{r4, r7, pc}
 800376a:	bf00      	nop
 800376c:	20000334 	.word	0x20000334

08003770 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8003770:	b590      	push	{r4, r7, lr}
 8003772:	b087      	sub	sp, #28
 8003774:	af00      	add	r7, sp, #0
 8003776:	60b9      	str	r1, [r7, #8]
 8003778:	607a      	str	r2, [r7, #4]
 800377a:	603b      	str	r3, [r7, #0]
 800377c:	4603      	mov	r3, r0
 800377e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8003780:	7bfb      	ldrb	r3, [r7, #15]
 8003782:	4a0a      	ldr	r2, [pc, #40]	@ (80037ac <disk_write+0x3c>)
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	4413      	add	r3, r2
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	68dc      	ldr	r4, [r3, #12]
 800378c:	7bfb      	ldrb	r3, [r7, #15]
 800378e:	4a07      	ldr	r2, [pc, #28]	@ (80037ac <disk_write+0x3c>)
 8003790:	4413      	add	r3, r2
 8003792:	7a18      	ldrb	r0, [r3, #8]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68b9      	ldr	r1, [r7, #8]
 800379a:	47a0      	blx	r4
 800379c:	4603      	mov	r3, r0
 800379e:	75fb      	strb	r3, [r7, #23]
  return res;
 80037a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80037a2:	4618      	mov	r0, r3
 80037a4:	371c      	adds	r7, #28
 80037a6:	46bd      	mov	sp, r7
 80037a8:	bd90      	pop	{r4, r7, pc}
 80037aa:	bf00      	nop
 80037ac:	20000334 	.word	0x20000334

080037b0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	4603      	mov	r3, r0
 80037b8:	603a      	str	r2, [r7, #0]
 80037ba:	71fb      	strb	r3, [r7, #7]
 80037bc:	460b      	mov	r3, r1
 80037be:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80037c0:	79fb      	ldrb	r3, [r7, #7]
 80037c2:	4a09      	ldr	r2, [pc, #36]	@ (80037e8 <disk_ioctl+0x38>)
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	4413      	add	r3, r2
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	79fa      	ldrb	r2, [r7, #7]
 80037ce:	4906      	ldr	r1, [pc, #24]	@ (80037e8 <disk_ioctl+0x38>)
 80037d0:	440a      	add	r2, r1
 80037d2:	7a10      	ldrb	r0, [r2, #8]
 80037d4:	79b9      	ldrb	r1, [r7, #6]
 80037d6:	683a      	ldr	r2, [r7, #0]
 80037d8:	4798      	blx	r3
 80037da:	4603      	mov	r3, r0
 80037dc:	73fb      	strb	r3, [r7, #15]
  return res;
 80037de:	7bfb      	ldrb	r3, [r7, #15]
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}
 80037e8:	20000334 	.word	0x20000334

080037ec <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80037ec:	b480      	push	{r7}
 80037ee:	b085      	sub	sp, #20
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	3301      	adds	r3, #1
 80037f8:	781b      	ldrb	r3, [r3, #0]
 80037fa:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80037fc:	89fb      	ldrh	r3, [r7, #14]
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	b21a      	sxth	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	781b      	ldrb	r3, [r3, #0]
 8003806:	b21b      	sxth	r3, r3
 8003808:	4313      	orrs	r3, r2
 800380a:	b21b      	sxth	r3, r3
 800380c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800380e:	89fb      	ldrh	r3, [r7, #14]
}
 8003810:	4618      	mov	r0, r3
 8003812:	3714      	adds	r7, #20
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr

0800381c <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800381c:	b480      	push	{r7}
 800381e:	b085      	sub	sp, #20
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	3303      	adds	r3, #3
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	021b      	lsls	r3, r3, #8
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	3202      	adds	r2, #2
 8003834:	7812      	ldrb	r2, [r2, #0]
 8003836:	4313      	orrs	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	021b      	lsls	r3, r3, #8
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	3201      	adds	r2, #1
 8003842:	7812      	ldrb	r2, [r2, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	021b      	lsls	r3, r3, #8
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	7812      	ldrb	r2, [r2, #0]
 8003850:	4313      	orrs	r3, r2
 8003852:	60fb      	str	r3, [r7, #12]
	return rv;
 8003854:	68fb      	ldr	r3, [r7, #12]
}
 8003856:	4618      	mov	r0, r3
 8003858:	3714      	adds	r7, #20
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr

08003862 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8003862:	b480      	push	{r7}
 8003864:	b083      	sub	sp, #12
 8003866:	af00      	add	r7, sp, #0
 8003868:	6078      	str	r0, [r7, #4]
 800386a:	460b      	mov	r3, r1
 800386c:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	1c5a      	adds	r2, r3, #1
 8003872:	607a      	str	r2, [r7, #4]
 8003874:	887a      	ldrh	r2, [r7, #2]
 8003876:	b2d2      	uxtb	r2, r2
 8003878:	701a      	strb	r2, [r3, #0]
 800387a:	887b      	ldrh	r3, [r7, #2]
 800387c:	0a1b      	lsrs	r3, r3, #8
 800387e:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	607a      	str	r2, [r7, #4]
 8003886:	887a      	ldrh	r2, [r7, #2]
 8003888:	b2d2      	uxtb	r2, r2
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr

08003898 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003898:	b480      	push	{r7}
 800389a:	b083      	sub	sp, #12
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	1c5a      	adds	r2, r3, #1
 80038a6:	607a      	str	r2, [r7, #4]
 80038a8:	683a      	ldr	r2, [r7, #0]
 80038aa:	b2d2      	uxtb	r2, r2
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	0a1b      	lsrs	r3, r3, #8
 80038b2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	1c5a      	adds	r2, r3, #1
 80038b8:	607a      	str	r2, [r7, #4]
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	b2d2      	uxtb	r2, r2
 80038be:	701a      	strb	r2, [r3, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	0a1b      	lsrs	r3, r3, #8
 80038c4:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	1c5a      	adds	r2, r3, #1
 80038ca:	607a      	str	r2, [r7, #4]
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	b2d2      	uxtb	r2, r2
 80038d0:	701a      	strb	r2, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	0a1b      	lsrs	r3, r3, #8
 80038d6:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	1c5a      	adds	r2, r3, #1
 80038dc:	607a      	str	r2, [r7, #4]
 80038de:	683a      	ldr	r2, [r7, #0]
 80038e0:	b2d2      	uxtb	r2, r2
 80038e2:	701a      	strb	r2, [r3, #0]
}
 80038e4:	bf00      	nop
 80038e6:	370c      	adds	r7, #12
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr

080038f0 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d00d      	beq.n	8003926 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800390a:	693a      	ldr	r2, [r7, #16]
 800390c:	1c53      	adds	r3, r2, #1
 800390e:	613b      	str	r3, [r7, #16]
 8003910:	697b      	ldr	r3, [r7, #20]
 8003912:	1c59      	adds	r1, r3, #1
 8003914:	6179      	str	r1, [r7, #20]
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	3b01      	subs	r3, #1
 800391e:	607b      	str	r3, [r7, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d1f1      	bne.n	800390a <mem_cpy+0x1a>
	}
}
 8003926:	bf00      	nop
 8003928:	371c      	adds	r7, #28
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr

08003932 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003932:	b480      	push	{r7}
 8003934:	b087      	sub	sp, #28
 8003936:	af00      	add	r7, sp, #0
 8003938:	60f8      	str	r0, [r7, #12]
 800393a:	60b9      	str	r1, [r7, #8]
 800393c:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	1c5a      	adds	r2, r3, #1
 8003946:	617a      	str	r2, [r7, #20]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	b2d2      	uxtb	r2, r2
 800394c:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	3b01      	subs	r3, #1
 8003952:	607b      	str	r3, [r7, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f3      	bne.n	8003942 <mem_set+0x10>
}
 800395a:	bf00      	nop
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003968:	b480      	push	{r7}
 800396a:	b089      	sub	sp, #36	@ 0x24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	61fb      	str	r3, [r7, #28]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800397c:	2300      	movs	r3, #0
 800397e:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8003980:	69fb      	ldr	r3, [r7, #28]
 8003982:	1c5a      	adds	r2, r3, #1
 8003984:	61fa      	str	r2, [r7, #28]
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	4619      	mov	r1, r3
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	1c5a      	adds	r2, r3, #1
 800398e:	61ba      	str	r2, [r7, #24]
 8003990:	781b      	ldrb	r3, [r3, #0]
 8003992:	1acb      	subs	r3, r1, r3
 8003994:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	3b01      	subs	r3, #1
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d002      	beq.n	80039a8 <mem_cmp+0x40>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d0eb      	beq.n	8003980 <mem_cmp+0x18>

	return r;
 80039a8:	697b      	ldr	r3, [r7, #20]
}
 80039aa:	4618      	mov	r0, r3
 80039ac:	3724      	adds	r7, #36	@ 0x24
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 80039c0:	e002      	b.n	80039c8 <chk_chr+0x12>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	3301      	adds	r3, #1
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d005      	beq.n	80039dc <chk_chr+0x26>
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	781b      	ldrb	r3, [r3, #0]
 80039d4:	461a      	mov	r2, r3
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	4293      	cmp	r3, r2
 80039da:	d1f2      	bne.n	80039c2 <chk_chr+0xc>
	return *str;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	781b      	ldrb	r3, [r3, #0]
}
 80039e0:	4618      	mov	r0, r3
 80039e2:	370c      	adds	r7, #12
 80039e4:	46bd      	mov	sp, r7
 80039e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ea:	4770      	bx	lr

080039ec <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80039ec:	b480      	push	{r7}
 80039ee:	b085      	sub	sp, #20
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80039f6:	2300      	movs	r3, #0
 80039f8:	60bb      	str	r3, [r7, #8]
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	60fb      	str	r3, [r7, #12]
 80039fe:	e029      	b.n	8003a54 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8003a00:	4a27      	ldr	r2, [pc, #156]	@ (8003aa0 <chk_lock+0xb4>)
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	011b      	lsls	r3, r3, #4
 8003a06:	4413      	add	r3, r2
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d01d      	beq.n	8003a4a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a0e:	4a24      	ldr	r2, [pc, #144]	@ (8003aa0 <chk_lock+0xb4>)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	4413      	add	r3, r2
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d116      	bne.n	8003a4e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8003a20:	4a1f      	ldr	r2, [pc, #124]	@ (8003aa0 <chk_lock+0xb4>)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	4413      	add	r3, r2
 8003a28:	3304      	adds	r3, #4
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d10c      	bne.n	8003a4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a34:	4a1a      	ldr	r2, [pc, #104]	@ (8003aa0 <chk_lock+0xb4>)
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003a44:	429a      	cmp	r2, r3
 8003a46:	d102      	bne.n	8003a4e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003a48:	e007      	b.n	8003a5a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	3301      	adds	r3, #1
 8003a52:	60fb      	str	r3, [r7, #12]
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d9d2      	bls.n	8003a00 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d109      	bne.n	8003a74 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d102      	bne.n	8003a6c <chk_lock+0x80>
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d101      	bne.n	8003a70 <chk_lock+0x84>
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	e010      	b.n	8003a92 <chk_lock+0xa6>
 8003a70:	2312      	movs	r3, #18
 8003a72:	e00e      	b.n	8003a92 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d108      	bne.n	8003a8c <chk_lock+0xa0>
 8003a7a:	4a09      	ldr	r2, [pc, #36]	@ (8003aa0 <chk_lock+0xb4>)
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	011b      	lsls	r3, r3, #4
 8003a80:	4413      	add	r3, r2
 8003a82:	330c      	adds	r3, #12
 8003a84:	881b      	ldrh	r3, [r3, #0]
 8003a86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a8a:	d101      	bne.n	8003a90 <chk_lock+0xa4>
 8003a8c:	2310      	movs	r3, #16
 8003a8e:	e000      	b.n	8003a92 <chk_lock+0xa6>
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3714      	adds	r7, #20
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	20000114 	.word	0x20000114

08003aa4 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003aaa:	2300      	movs	r3, #0
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	e002      	b.n	8003ab6 <enq_lock+0x12>
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	607b      	str	r3, [r7, #4]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d806      	bhi.n	8003aca <enq_lock+0x26>
 8003abc:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <enq_lock+0x40>)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	011b      	lsls	r3, r3, #4
 8003ac2:	4413      	add	r3, r2
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1f2      	bne.n	8003ab0 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b02      	cmp	r3, #2
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	b2db      	uxtb	r3, r3
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	370c      	adds	r7, #12
 8003ada:	46bd      	mov	sp, r7
 8003adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae0:	4770      	bx	lr
 8003ae2:	bf00      	nop
 8003ae4:	20000114 	.word	0x20000114

08003ae8 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	b085      	sub	sp, #20
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	6078      	str	r0, [r7, #4]
 8003af0:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003af2:	2300      	movs	r3, #0
 8003af4:	60fb      	str	r3, [r7, #12]
 8003af6:	e01f      	b.n	8003b38 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8003af8:	4a41      	ldr	r2, [pc, #260]	@ (8003c00 <inc_lock+0x118>)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	4413      	add	r3, r2
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	429a      	cmp	r2, r3
 8003b08:	d113      	bne.n	8003b32 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8003b0a:	4a3d      	ldr	r2, [pc, #244]	@ (8003c00 <inc_lock+0x118>)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	4413      	add	r3, r2
 8003b12:	3304      	adds	r3, #4
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8003b1a:	429a      	cmp	r2, r3
 8003b1c:	d109      	bne.n	8003b32 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8003b1e:	4a38      	ldr	r2, [pc, #224]	@ (8003c00 <inc_lock+0x118>)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	4413      	add	r3, r2
 8003b26:	3308      	adds	r3, #8
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d006      	beq.n	8003b40 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d9dc      	bls.n	8003af8 <inc_lock+0x10>
 8003b3e:	e000      	b.n	8003b42 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8003b40:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d132      	bne.n	8003bae <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003b48:	2300      	movs	r3, #0
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	e002      	b.n	8003b54 <inc_lock+0x6c>
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60fb      	str	r3, [r7, #12]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b01      	cmp	r3, #1
 8003b58:	d806      	bhi.n	8003b68 <inc_lock+0x80>
 8003b5a:	4a29      	ldr	r2, [pc, #164]	@ (8003c00 <inc_lock+0x118>)
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	011b      	lsls	r3, r3, #4
 8003b60:	4413      	add	r3, r2
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f2      	bne.n	8003b4e <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2b02      	cmp	r3, #2
 8003b6c:	d101      	bne.n	8003b72 <inc_lock+0x8a>
 8003b6e:	2300      	movs	r3, #0
 8003b70:	e040      	b.n	8003bf4 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681a      	ldr	r2, [r3, #0]
 8003b76:	4922      	ldr	r1, [pc, #136]	@ (8003c00 <inc_lock+0x118>)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	440b      	add	r3, r1
 8003b7e:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	491e      	ldr	r1, [pc, #120]	@ (8003c00 <inc_lock+0x118>)
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	440b      	add	r3, r1
 8003b8c:	3304      	adds	r3, #4
 8003b8e:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	695a      	ldr	r2, [r3, #20]
 8003b94:	491a      	ldr	r1, [pc, #104]	@ (8003c00 <inc_lock+0x118>)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	440b      	add	r3, r1
 8003b9c:	3308      	adds	r3, #8
 8003b9e:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8003ba0:	4a17      	ldr	r2, [pc, #92]	@ (8003c00 <inc_lock+0x118>)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	4413      	add	r3, r2
 8003ba8:	330c      	adds	r3, #12
 8003baa:	2200      	movs	r2, #0
 8003bac:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d009      	beq.n	8003bc8 <inc_lock+0xe0>
 8003bb4:	4a12      	ldr	r2, [pc, #72]	@ (8003c00 <inc_lock+0x118>)
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	4413      	add	r3, r2
 8003bbc:	330c      	adds	r3, #12
 8003bbe:	881b      	ldrh	r3, [r3, #0]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	d001      	beq.n	8003bc8 <inc_lock+0xe0>
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	e015      	b.n	8003bf4 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d108      	bne.n	8003be0 <inc_lock+0xf8>
 8003bce:	4a0c      	ldr	r2, [pc, #48]	@ (8003c00 <inc_lock+0x118>)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	011b      	lsls	r3, r3, #4
 8003bd4:	4413      	add	r3, r2
 8003bd6:	330c      	adds	r3, #12
 8003bd8:	881b      	ldrh	r3, [r3, #0]
 8003bda:	3301      	adds	r3, #1
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	e001      	b.n	8003be4 <inc_lock+0xfc>
 8003be0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003be4:	4906      	ldr	r1, [pc, #24]	@ (8003c00 <inc_lock+0x118>)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	440b      	add	r3, r1
 8003bec:	330c      	adds	r3, #12
 8003bee:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	3301      	adds	r3, #1
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3714      	adds	r7, #20
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfe:	4770      	bx	lr
 8003c00:	20000114 	.word	0x20000114

08003c04 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b085      	sub	sp, #20
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	607b      	str	r3, [r7, #4]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d825      	bhi.n	8003c64 <dec_lock+0x60>
		n = Files[i].ctr;
 8003c18:	4a17      	ldr	r2, [pc, #92]	@ (8003c78 <dec_lock+0x74>)
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	011b      	lsls	r3, r3, #4
 8003c1e:	4413      	add	r3, r2
 8003c20:	330c      	adds	r3, #12
 8003c22:	881b      	ldrh	r3, [r3, #0]
 8003c24:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8003c26:	89fb      	ldrh	r3, [r7, #14]
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2c:	d101      	bne.n	8003c32 <dec_lock+0x2e>
 8003c2e:	2300      	movs	r3, #0
 8003c30:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8003c32:	89fb      	ldrh	r3, [r7, #14]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d002      	beq.n	8003c3e <dec_lock+0x3a>
 8003c38:	89fb      	ldrh	r3, [r7, #14]
 8003c3a:	3b01      	subs	r3, #1
 8003c3c:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8003c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8003c78 <dec_lock+0x74>)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	011b      	lsls	r3, r3, #4
 8003c44:	4413      	add	r3, r2
 8003c46:	330c      	adds	r3, #12
 8003c48:	89fa      	ldrh	r2, [r7, #14]
 8003c4a:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003c4c:	89fb      	ldrh	r3, [r7, #14]
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d105      	bne.n	8003c5e <dec_lock+0x5a>
 8003c52:	4a09      	ldr	r2, [pc, #36]	@ (8003c78 <dec_lock+0x74>)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	011b      	lsls	r3, r3, #4
 8003c58:	4413      	add	r3, r2
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8003c5e:	2300      	movs	r3, #0
 8003c60:	737b      	strb	r3, [r7, #13]
 8003c62:	e001      	b.n	8003c68 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003c64:	2302      	movs	r3, #2
 8003c66:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003c68:	7b7b      	ldrb	r3, [r7, #13]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	3714      	adds	r7, #20
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000114 	.word	0x20000114

08003c7c <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e010      	b.n	8003cac <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003c8a:	4a0d      	ldr	r2, [pc, #52]	@ (8003cc0 <clear_lock+0x44>)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	011b      	lsls	r3, r3, #4
 8003c90:	4413      	add	r3, r2
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d105      	bne.n	8003ca6 <clear_lock+0x2a>
 8003c9a:	4a09      	ldr	r2, [pc, #36]	@ (8003cc0 <clear_lock+0x44>)
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	3301      	adds	r3, #1
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b01      	cmp	r3, #1
 8003cb0:	d9eb      	bls.n	8003c8a <clear_lock+0xe>
	}
}
 8003cb2:	bf00      	nop
 8003cb4:	bf00      	nop
 8003cb6:	3714      	adds	r7, #20
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr
 8003cc0:	20000114 	.word	0x20000114

08003cc4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	78db      	ldrb	r3, [r3, #3]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d034      	beq.n	8003d42 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003cdc:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	7858      	ldrb	r0, [r3, #1]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003ce8:	2301      	movs	r3, #1
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	f7ff fd40 	bl	8003770 <disk_write>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d002      	beq.n	8003cfc <sync_window+0x38>
			res = FR_DISK_ERR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	73fb      	strb	r3, [r7, #15]
 8003cfa:	e022      	b.n	8003d42 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d06:	697a      	ldr	r2, [r7, #20]
 8003d08:	1ad2      	subs	r2, r2, r3
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	6a1b      	ldr	r3, [r3, #32]
 8003d0e:	429a      	cmp	r2, r3
 8003d10:	d217      	bcs.n	8003d42 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	789b      	ldrb	r3, [r3, #2]
 8003d16:	613b      	str	r3, [r7, #16]
 8003d18:	e010      	b.n	8003d3c <sync_window+0x78>
					wsect += fs->fsize;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6a1b      	ldr	r3, [r3, #32]
 8003d1e:	697a      	ldr	r2, [r7, #20]
 8003d20:	4413      	add	r3, r2
 8003d22:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	7858      	ldrb	r0, [r3, #1]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d2e:	2301      	movs	r3, #1
 8003d30:	697a      	ldr	r2, [r7, #20]
 8003d32:	f7ff fd1d 	bl	8003770 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	3b01      	subs	r3, #1
 8003d3a:	613b      	str	r3, [r7, #16]
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d8eb      	bhi.n	8003d1a <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003d42:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3718      	adds	r7, #24
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b084      	sub	sp, #16
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003d56:	2300      	movs	r3, #0
 8003d58:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	429a      	cmp	r2, r3
 8003d62:	d01b      	beq.n	8003d9c <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	f7ff ffad 	bl	8003cc4 <sync_window>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d113      	bne.n	8003d9c <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	7858      	ldrb	r0, [r3, #1]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003d7e:	2301      	movs	r3, #1
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	f7ff fcd5 	bl	8003730 <disk_read>
 8003d86:	4603      	mov	r3, r0
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d004      	beq.n	8003d96 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003d8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003d90:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003d92:	2301      	movs	r3, #1
 8003d94:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	683a      	ldr	r2, [r7, #0]
 8003d9a:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8003d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	3710      	adds	r7, #16
 8003da2:	46bd      	mov	sp, r7
 8003da4:	bd80      	pop	{r7, pc}
	...

08003da8 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003db0:	6878      	ldr	r0, [r7, #4]
 8003db2:	f7ff ff87 	bl	8003cc4 <sync_window>
 8003db6:	4603      	mov	r3, r0
 8003db8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003dba:	7bfb      	ldrb	r3, [r7, #15]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d159      	bne.n	8003e74 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	781b      	ldrb	r3, [r3, #0]
 8003dc4:	2b03      	cmp	r3, #3
 8003dc6:	d149      	bne.n	8003e5c <sync_fs+0xb4>
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	791b      	ldrb	r3, [r3, #4]
 8003dcc:	2b01      	cmp	r3, #1
 8003dce:	d145      	bne.n	8003e5c <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	899b      	ldrh	r3, [r3, #12]
 8003dda:	461a      	mov	r2, r3
 8003ddc:	2100      	movs	r1, #0
 8003dde:	f7ff fda8 	bl	8003932 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3338      	adds	r3, #56	@ 0x38
 8003de6:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8003dea:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 8003dee:	4618      	mov	r0, r3
 8003df0:	f7ff fd37 	bl	8003862 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	3338      	adds	r3, #56	@ 0x38
 8003df8:	4921      	ldr	r1, [pc, #132]	@ (8003e80 <sync_fs+0xd8>)
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	f7ff fd4c 	bl	8003898 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	3338      	adds	r3, #56	@ 0x38
 8003e04:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8003e08:	491e      	ldr	r1, [pc, #120]	@ (8003e84 <sync_fs+0xdc>)
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f7ff fd44 	bl	8003898 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	3338      	adds	r3, #56	@ 0x38
 8003e14:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	699b      	ldr	r3, [r3, #24]
 8003e1c:	4619      	mov	r1, r3
 8003e1e:	4610      	mov	r0, r2
 8003e20:	f7ff fd3a 	bl	8003898 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	3338      	adds	r3, #56	@ 0x38
 8003e28:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	4619      	mov	r1, r3
 8003e32:	4610      	mov	r0, r2
 8003e34:	f7ff fd30 	bl	8003898 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	1c5a      	adds	r2, r3, #1
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	7858      	ldrb	r0, [r3, #1]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e50:	2301      	movs	r3, #1
 8003e52:	f7ff fc8d 	bl	8003770 <disk_write>
			fs->fsi_flag = 0;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2200      	movs	r2, #0
 8003e5a:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	785b      	ldrb	r3, [r3, #1]
 8003e60:	2200      	movs	r2, #0
 8003e62:	2100      	movs	r1, #0
 8003e64:	4618      	mov	r0, r3
 8003e66:	f7ff fca3 	bl	80037b0 <disk_ioctl>
 8003e6a:	4603      	mov	r3, r0
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d001      	beq.n	8003e74 <sync_fs+0xcc>
 8003e70:	2301      	movs	r3, #1
 8003e72:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003e74:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3710      	adds	r7, #16
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}
 8003e7e:	bf00      	nop
 8003e80:	41615252 	.word	0x41615252
 8003e84:	61417272 	.word	0x61417272

08003e88 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b083      	sub	sp, #12
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	3b02      	subs	r3, #2
 8003e96:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	69db      	ldr	r3, [r3, #28]
 8003e9c:	3b02      	subs	r3, #2
 8003e9e:	683a      	ldr	r2, [r7, #0]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d301      	bcc.n	8003ea8 <clust2sect+0x20>
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e008      	b.n	8003eba <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	895b      	ldrh	r3, [r3, #10]
 8003eac:	461a      	mov	r2, r3
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	fb03 f202 	mul.w	r2, r3, r2
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003eb8:	4413      	add	r3, r2
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	370c      	adds	r7, #12
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003ec6:	b580      	push	{r7, lr}
 8003ec8:	b086      	sub	sp, #24
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b01      	cmp	r3, #1
 8003eda:	d904      	bls.n	8003ee6 <get_fat+0x20>
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	69db      	ldr	r3, [r3, #28]
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <get_fat+0x26>
		val = 1;	/* Internal error */
 8003ee6:	2301      	movs	r3, #1
 8003ee8:	617b      	str	r3, [r7, #20]
 8003eea:	e0ba      	b.n	8004062 <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003eec:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003ef2:	693b      	ldr	r3, [r7, #16]
 8003ef4:	781b      	ldrb	r3, [r3, #0]
 8003ef6:	2b03      	cmp	r3, #3
 8003ef8:	f000 8082 	beq.w	8004000 <get_fat+0x13a>
 8003efc:	2b03      	cmp	r3, #3
 8003efe:	f300 80a6 	bgt.w	800404e <get_fat+0x188>
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d002      	beq.n	8003f0c <get_fat+0x46>
 8003f06:	2b02      	cmp	r3, #2
 8003f08:	d055      	beq.n	8003fb6 <get_fat+0xf0>
 8003f0a:	e0a0      	b.n	800404e <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	085b      	lsrs	r3, r3, #1
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4413      	add	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	899b      	ldrh	r3, [r3, #12]
 8003f22:	4619      	mov	r1, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f2a:	4413      	add	r3, r2
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	6938      	ldr	r0, [r7, #16]
 8003f30:	f7ff ff0c 	bl	8003d4c <move_window>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	f040 808c 	bne.w	8004054 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	1c5a      	adds	r2, r3, #1
 8003f40:	60fa      	str	r2, [r7, #12]
 8003f42:	693a      	ldr	r2, [r7, #16]
 8003f44:	8992      	ldrh	r2, [r2, #12]
 8003f46:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f4a:	fb01 f202 	mul.w	r2, r1, r2
 8003f4e:	1a9b      	subs	r3, r3, r2
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	4413      	add	r3, r2
 8003f54:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f58:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	899b      	ldrh	r3, [r3, #12]
 8003f62:	4619      	mov	r1, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	4619      	mov	r1, r3
 8003f6e:	6938      	ldr	r0, [r7, #16]
 8003f70:	f7ff feec 	bl	8003d4c <move_window>
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d16e      	bne.n	8004058 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	899b      	ldrh	r3, [r3, #12]
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	fbb3 f1f2 	udiv	r1, r3, r2
 8003f86:	fb01 f202 	mul.w	r2, r1, r2
 8003f8a:	1a9b      	subs	r3, r3, r2
 8003f8c:	693a      	ldr	r2, [r7, #16]
 8003f8e:	4413      	add	r3, r2
 8003f90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003f94:	021b      	lsls	r3, r3, #8
 8003f96:	68ba      	ldr	r2, [r7, #8]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <get_fat+0xe6>
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	e002      	b.n	8003fb2 <get_fat+0xec>
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb2:	617b      	str	r3, [r7, #20]
			break;
 8003fb4:	e055      	b.n	8004062 <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	899b      	ldrh	r3, [r3, #12]
 8003fbe:	085b      	lsrs	r3, r3, #1
 8003fc0:	b29b      	uxth	r3, r3
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fca:	4413      	add	r3, r2
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6938      	ldr	r0, [r7, #16]
 8003fd0:	f7ff febc 	bl	8003d4c <move_window>
 8003fd4:	4603      	mov	r3, r0
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d140      	bne.n	800405c <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	005b      	lsls	r3, r3, #1
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	8992      	ldrh	r2, [r2, #12]
 8003fe8:	fbb3 f0f2 	udiv	r0, r3, r2
 8003fec:	fb00 f202 	mul.w	r2, r0, r2
 8003ff0:	1a9b      	subs	r3, r3, r2
 8003ff2:	440b      	add	r3, r1
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7ff fbf9 	bl	80037ec <ld_word>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	617b      	str	r3, [r7, #20]
			break;
 8003ffe:	e030      	b.n	8004062 <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004004:	693b      	ldr	r3, [r7, #16]
 8004006:	899b      	ldrh	r3, [r3, #12]
 8004008:	089b      	lsrs	r3, r3, #2
 800400a:	b29b      	uxth	r3, r3
 800400c:	4619      	mov	r1, r3
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	fbb3 f3f1 	udiv	r3, r3, r1
 8004014:	4413      	add	r3, r2
 8004016:	4619      	mov	r1, r3
 8004018:	6938      	ldr	r0, [r7, #16]
 800401a:	f7ff fe97 	bl	8003d4c <move_window>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d11d      	bne.n	8004060 <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	693a      	ldr	r2, [r7, #16]
 8004030:	8992      	ldrh	r2, [r2, #12]
 8004032:	fbb3 f0f2 	udiv	r0, r3, r2
 8004036:	fb00 f202 	mul.w	r2, r0, r2
 800403a:	1a9b      	subs	r3, r3, r2
 800403c:	440b      	add	r3, r1
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff fbec 	bl	800381c <ld_dword>
 8004044:	4603      	mov	r3, r0
 8004046:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800404a:	617b      	str	r3, [r7, #20]
			break;
 800404c:	e009      	b.n	8004062 <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800404e:	2301      	movs	r3, #1
 8004050:	617b      	str	r3, [r7, #20]
 8004052:	e006      	b.n	8004062 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004054:	bf00      	nop
 8004056:	e004      	b.n	8004062 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004058:	bf00      	nop
 800405a:	e002      	b.n	8004062 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800405c:	bf00      	nop
 800405e:	e000      	b.n	8004062 <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004060:	bf00      	nop
		}
	}

	return val;
 8004062:	697b      	ldr	r3, [r7, #20]
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800406c:	b590      	push	{r4, r7, lr}
 800406e:	b089      	sub	sp, #36	@ 0x24
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8004078:	2302      	movs	r3, #2
 800407a:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800407c:	68bb      	ldr	r3, [r7, #8]
 800407e:	2b01      	cmp	r3, #1
 8004080:	f240 8109 	bls.w	8004296 <put_fat+0x22a>
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	429a      	cmp	r2, r3
 800408c:	f080 8103 	bcs.w	8004296 <put_fat+0x22a>
		switch (fs->fs_type) {
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	781b      	ldrb	r3, [r3, #0]
 8004094:	2b03      	cmp	r3, #3
 8004096:	f000 80b6 	beq.w	8004206 <put_fat+0x19a>
 800409a:	2b03      	cmp	r3, #3
 800409c:	f300 80fb 	bgt.w	8004296 <put_fat+0x22a>
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d003      	beq.n	80040ac <put_fat+0x40>
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	f000 8083 	beq.w	80041b0 <put_fat+0x144>
 80040aa:	e0f4      	b.n	8004296 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 80040ac:	68bb      	ldr	r3, [r7, #8]
 80040ae:	61bb      	str	r3, [r7, #24]
 80040b0:	69bb      	ldr	r3, [r7, #24]
 80040b2:	085b      	lsrs	r3, r3, #1
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4413      	add	r3, r2
 80040b8:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	899b      	ldrh	r3, [r3, #12]
 80040c2:	4619      	mov	r1, r3
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80040ca:	4413      	add	r3, r2
 80040cc:	4619      	mov	r1, r3
 80040ce:	68f8      	ldr	r0, [r7, #12]
 80040d0:	f7ff fe3c 	bl	8003d4c <move_window>
 80040d4:	4603      	mov	r3, r0
 80040d6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80040d8:	7ffb      	ldrb	r3, [r7, #31]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f040 80d4 	bne.w	8004288 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80040e6:	69bb      	ldr	r3, [r7, #24]
 80040e8:	1c5a      	adds	r2, r3, #1
 80040ea:	61ba      	str	r2, [r7, #24]
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	8992      	ldrh	r2, [r2, #12]
 80040f0:	fbb3 f0f2 	udiv	r0, r3, r2
 80040f4:	fb00 f202 	mul.w	r2, r0, r2
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	440b      	add	r3, r1
 80040fc:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 80040fe:	68bb      	ldr	r3, [r7, #8]
 8004100:	f003 0301 	and.w	r3, r3, #1
 8004104:	2b00      	cmp	r3, #0
 8004106:	d00d      	beq.n	8004124 <put_fat+0xb8>
 8004108:	697b      	ldr	r3, [r7, #20]
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b25b      	sxtb	r3, r3
 800410e:	f003 030f 	and.w	r3, r3, #15
 8004112:	b25a      	sxtb	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	b2db      	uxtb	r3, r3
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	b25b      	sxtb	r3, r3
 800411c:	4313      	orrs	r3, r2
 800411e:	b25b      	sxtb	r3, r3
 8004120:	b2db      	uxtb	r3, r3
 8004122:	e001      	b.n	8004128 <put_fat+0xbc>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	b2db      	uxtb	r3, r3
 8004128:	697a      	ldr	r2, [r7, #20]
 800412a:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	2201      	movs	r2, #1
 8004130:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	899b      	ldrh	r3, [r3, #12]
 800413a:	4619      	mov	r1, r3
 800413c:	69bb      	ldr	r3, [r7, #24]
 800413e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004142:	4413      	add	r3, r2
 8004144:	4619      	mov	r1, r3
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f7ff fe00 	bl	8003d4c <move_window>
 800414c:	4603      	mov	r3, r0
 800414e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004150:	7ffb      	ldrb	r3, [r7, #31]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f040 809a 	bne.w	800428c <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	899b      	ldrh	r3, [r3, #12]
 8004162:	461a      	mov	r2, r3
 8004164:	69bb      	ldr	r3, [r7, #24]
 8004166:	fbb3 f0f2 	udiv	r0, r3, r2
 800416a:	fb00 f202 	mul.w	r2, r0, r2
 800416e:	1a9b      	subs	r3, r3, r2
 8004170:	440b      	add	r3, r1
 8004172:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8004174:	68bb      	ldr	r3, [r7, #8]
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	2b00      	cmp	r3, #0
 800417c:	d003      	beq.n	8004186 <put_fat+0x11a>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	091b      	lsrs	r3, r3, #4
 8004182:	b2db      	uxtb	r3, r3
 8004184:	e00e      	b.n	80041a4 <put_fat+0x138>
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	781b      	ldrb	r3, [r3, #0]
 800418a:	b25b      	sxtb	r3, r3
 800418c:	f023 030f 	bic.w	r3, r3, #15
 8004190:	b25a      	sxtb	r2, r3
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	0a1b      	lsrs	r3, r3, #8
 8004196:	b25b      	sxtb	r3, r3
 8004198:	f003 030f 	and.w	r3, r3, #15
 800419c:	b25b      	sxtb	r3, r3
 800419e:	4313      	orrs	r3, r2
 80041a0:	b25b      	sxtb	r3, r3
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	697a      	ldr	r2, [r7, #20]
 80041a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2201      	movs	r2, #1
 80041ac:	70da      	strb	r2, [r3, #3]
			break;
 80041ae:	e072      	b.n	8004296 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	899b      	ldrh	r3, [r3, #12]
 80041b8:	085b      	lsrs	r3, r3, #1
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	4619      	mov	r1, r3
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	fbb3 f3f1 	udiv	r3, r3, r1
 80041c4:	4413      	add	r3, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	68f8      	ldr	r0, [r7, #12]
 80041ca:	f7ff fdbf 	bl	8003d4c <move_window>
 80041ce:	4603      	mov	r3, r0
 80041d0:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80041d2:	7ffb      	ldrb	r3, [r7, #31]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d15b      	bne.n	8004290 <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	005b      	lsls	r3, r3, #1
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	8992      	ldrh	r2, [r2, #12]
 80041e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80041ea:	fb00 f202 	mul.w	r2, r0, r2
 80041ee:	1a9b      	subs	r3, r3, r2
 80041f0:	440b      	add	r3, r1
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	b292      	uxth	r2, r2
 80041f6:	4611      	mov	r1, r2
 80041f8:	4618      	mov	r0, r3
 80041fa:	f7ff fb32 	bl	8003862 <st_word>
			fs->wflag = 1;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2201      	movs	r2, #1
 8004202:	70da      	strb	r2, [r3, #3]
			break;
 8004204:	e047      	b.n	8004296 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	899b      	ldrh	r3, [r3, #12]
 800420e:	089b      	lsrs	r3, r3, #2
 8004210:	b29b      	uxth	r3, r3
 8004212:	4619      	mov	r1, r3
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	fbb3 f3f1 	udiv	r3, r3, r1
 800421a:	4413      	add	r3, r2
 800421c:	4619      	mov	r1, r3
 800421e:	68f8      	ldr	r0, [r7, #12]
 8004220:	f7ff fd94 	bl	8003d4c <move_window>
 8004224:	4603      	mov	r3, r0
 8004226:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004228:	7ffb      	ldrb	r3, [r7, #31]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d132      	bne.n	8004294 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	68fa      	ldr	r2, [r7, #12]
 8004240:	8992      	ldrh	r2, [r2, #12]
 8004242:	fbb3 f0f2 	udiv	r0, r3, r2
 8004246:	fb00 f202 	mul.w	r2, r0, r2
 800424a:	1a9b      	subs	r3, r3, r2
 800424c:	440b      	add	r3, r1
 800424e:	4618      	mov	r0, r3
 8004250:	f7ff fae4 	bl	800381c <ld_dword>
 8004254:	4603      	mov	r3, r0
 8004256:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 800425a:	4323      	orrs	r3, r4
 800425c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	8992      	ldrh	r2, [r2, #12]
 800426c:	fbb3 f0f2 	udiv	r0, r3, r2
 8004270:	fb00 f202 	mul.w	r2, r0, r2
 8004274:	1a9b      	subs	r3, r3, r2
 8004276:	440b      	add	r3, r1
 8004278:	6879      	ldr	r1, [r7, #4]
 800427a:	4618      	mov	r0, r3
 800427c:	f7ff fb0c 	bl	8003898 <st_dword>
			fs->wflag = 1;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	2201      	movs	r2, #1
 8004284:	70da      	strb	r2, [r3, #3]
			break;
 8004286:	e006      	b.n	8004296 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004288:	bf00      	nop
 800428a:	e004      	b.n	8004296 <put_fat+0x22a>
			if (res != FR_OK) break;
 800428c:	bf00      	nop
 800428e:	e002      	b.n	8004296 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004290:	bf00      	nop
 8004292:	e000      	b.n	8004296 <put_fat+0x22a>
			if (res != FR_OK) break;
 8004294:	bf00      	nop
		}
	}
	return res;
 8004296:	7ffb      	ldrb	r3, [r7, #31]
}
 8004298:	4618      	mov	r0, r3
 800429a:	3724      	adds	r7, #36	@ 0x24
 800429c:	46bd      	mov	sp, r7
 800429e:	bd90      	pop	{r4, r7, pc}

080042a0 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b088      	sub	sp, #32
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	60f8      	str	r0, [r7, #12]
 80042a8:	60b9      	str	r1, [r7, #8]
 80042aa:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80042ac:	2300      	movs	r3, #0
 80042ae:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d904      	bls.n	80042c6 <remove_chain+0x26>
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	69db      	ldr	r3, [r3, #28]
 80042c0:	68ba      	ldr	r2, [r7, #8]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d301      	bcc.n	80042ca <remove_chain+0x2a>
 80042c6:	2302      	movs	r3, #2
 80042c8:	e04b      	b.n	8004362 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d00c      	beq.n	80042ea <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 80042d0:	f04f 32ff 	mov.w	r2, #4294967295
 80042d4:	6879      	ldr	r1, [r7, #4]
 80042d6:	69b8      	ldr	r0, [r7, #24]
 80042d8:	f7ff fec8 	bl	800406c <put_fat>
 80042dc:	4603      	mov	r3, r0
 80042de:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 80042e0:	7ffb      	ldrb	r3, [r7, #31]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <remove_chain+0x4a>
 80042e6:	7ffb      	ldrb	r3, [r7, #31]
 80042e8:	e03b      	b.n	8004362 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 80042ea:	68b9      	ldr	r1, [r7, #8]
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f7ff fdea 	bl	8003ec6 <get_fat>
 80042f2:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d031      	beq.n	800435e <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <remove_chain+0x64>
 8004300:	2302      	movs	r3, #2
 8004302:	e02e      	b.n	8004362 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800430a:	d101      	bne.n	8004310 <remove_chain+0x70>
 800430c:	2301      	movs	r3, #1
 800430e:	e028      	b.n	8004362 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8004310:	2200      	movs	r2, #0
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	69b8      	ldr	r0, [r7, #24]
 8004316:	f7ff fea9 	bl	800406c <put_fat>
 800431a:	4603      	mov	r3, r0
 800431c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800431e:	7ffb      	ldrb	r3, [r7, #31]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d001      	beq.n	8004328 <remove_chain+0x88>
 8004324:	7ffb      	ldrb	r3, [r7, #31]
 8004326:	e01c      	b.n	8004362 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8004328:	69bb      	ldr	r3, [r7, #24]
 800432a:	699a      	ldr	r2, [r3, #24]
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	3b02      	subs	r3, #2
 8004332:	429a      	cmp	r2, r3
 8004334:	d20b      	bcs.n	800434e <remove_chain+0xae>
			fs->free_clst++;
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	699b      	ldr	r3, [r3, #24]
 800433a:	1c5a      	adds	r2, r3, #1
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 8004340:	69bb      	ldr	r3, [r7, #24]
 8004342:	791b      	ldrb	r3, [r3, #4]
 8004344:	f043 0301 	orr.w	r3, r3, #1
 8004348:	b2da      	uxtb	r2, r3
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8004352:	69bb      	ldr	r3, [r7, #24]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	68ba      	ldr	r2, [r7, #8]
 8004358:	429a      	cmp	r2, r3
 800435a:	d3c6      	bcc.n	80042ea <remove_chain+0x4a>
 800435c:	e000      	b.n	8004360 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800435e:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3720      	adds	r7, #32
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}

0800436a <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800436a:	b580      	push	{r7, lr}
 800436c:	b088      	sub	sp, #32
 800436e:	af00      	add	r7, sp, #0
 8004370:	6078      	str	r0, [r7, #4]
 8004372:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	2b00      	cmp	r3, #0
 800437e:	d10d      	bne.n	800439c <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	695b      	ldr	r3, [r3, #20]
 8004384:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d004      	beq.n	8004396 <create_chain+0x2c>
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	69db      	ldr	r3, [r3, #28]
 8004390:	69ba      	ldr	r2, [r7, #24]
 8004392:	429a      	cmp	r2, r3
 8004394:	d31b      	bcc.n	80043ce <create_chain+0x64>
 8004396:	2301      	movs	r3, #1
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	e018      	b.n	80043ce <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800439c:	6839      	ldr	r1, [r7, #0]
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f7ff fd91 	bl	8003ec6 <get_fat>
 80043a4:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d801      	bhi.n	80043b0 <create_chain+0x46>
 80043ac:	2301      	movs	r3, #1
 80043ae:	e070      	b.n	8004492 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043b6:	d101      	bne.n	80043bc <create_chain+0x52>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	e06a      	b.n	8004492 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	69db      	ldr	r3, [r3, #28]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d201      	bcs.n	80043ca <create_chain+0x60>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	e063      	b.n	8004492 <create_chain+0x128>
		scl = clst;
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	3301      	adds	r3, #1
 80043d6:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	69db      	ldr	r3, [r3, #28]
 80043dc:	69fa      	ldr	r2, [r7, #28]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d307      	bcc.n	80043f2 <create_chain+0x88>
				ncl = 2;
 80043e2:	2302      	movs	r3, #2
 80043e4:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 80043e6:	69fa      	ldr	r2, [r7, #28]
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d901      	bls.n	80043f2 <create_chain+0x88>
 80043ee:	2300      	movs	r3, #0
 80043f0:	e04f      	b.n	8004492 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 80043f2:	69f9      	ldr	r1, [r7, #28]
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fd66 	bl	8003ec6 <get_fat>
 80043fa:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d00e      	beq.n	8004420 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b01      	cmp	r3, #1
 8004406:	d003      	beq.n	8004410 <create_chain+0xa6>
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d101      	bne.n	8004414 <create_chain+0xaa>
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	e03e      	b.n	8004492 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8004414:	69fa      	ldr	r2, [r7, #28]
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	d1da      	bne.n	80043d2 <create_chain+0x68>
 800441c:	2300      	movs	r3, #0
 800441e:	e038      	b.n	8004492 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004420:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004422:	f04f 32ff 	mov.w	r2, #4294967295
 8004426:	69f9      	ldr	r1, [r7, #28]
 8004428:	6938      	ldr	r0, [r7, #16]
 800442a:	f7ff fe1f 	bl	800406c <put_fat>
 800442e:	4603      	mov	r3, r0
 8004430:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004432:	7dfb      	ldrb	r3, [r7, #23]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d109      	bne.n	800444c <create_chain+0xe2>
 8004438:	683b      	ldr	r3, [r7, #0]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d006      	beq.n	800444c <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800443e:	69fa      	ldr	r2, [r7, #28]
 8004440:	6839      	ldr	r1, [r7, #0]
 8004442:	6938      	ldr	r0, [r7, #16]
 8004444:	f7ff fe12 	bl	800406c <put_fat>
 8004448:	4603      	mov	r3, r0
 800444a:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800444c:	7dfb      	ldrb	r3, [r7, #23]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d116      	bne.n	8004480 <create_chain+0x116>
		fs->last_clst = ncl;
 8004452:	693b      	ldr	r3, [r7, #16]
 8004454:	69fa      	ldr	r2, [r7, #28]
 8004456:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 8004458:	693b      	ldr	r3, [r7, #16]
 800445a:	699a      	ldr	r2, [r3, #24]
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	69db      	ldr	r3, [r3, #28]
 8004460:	3b02      	subs	r3, #2
 8004462:	429a      	cmp	r2, r3
 8004464:	d804      	bhi.n	8004470 <create_chain+0x106>
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	699b      	ldr	r3, [r3, #24]
 800446a:	1e5a      	subs	r2, r3, #1
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	791b      	ldrb	r3, [r3, #4]
 8004474:	f043 0301 	orr.w	r3, r3, #1
 8004478:	b2da      	uxtb	r2, r3
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	711a      	strb	r2, [r3, #4]
 800447e:	e007      	b.n	8004490 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004480:	7dfb      	ldrb	r3, [r7, #23]
 8004482:	2b01      	cmp	r3, #1
 8004484:	d102      	bne.n	800448c <create_chain+0x122>
 8004486:	f04f 33ff 	mov.w	r3, #4294967295
 800448a:	e000      	b.n	800448e <create_chain+0x124>
 800448c:	2301      	movs	r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004490:	69fb      	ldr	r3, [r7, #28]
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}

0800449a <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800449a:	b480      	push	{r7}
 800449c:	b087      	sub	sp, #28
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ae:	3304      	adds	r3, #4
 80044b0:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	899b      	ldrh	r3, [r3, #12]
 80044b6:	461a      	mov	r2, r3
 80044b8:	683b      	ldr	r3, [r7, #0]
 80044ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	8952      	ldrh	r2, [r2, #10]
 80044c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80044c6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	1d1a      	adds	r2, r3, #4
 80044cc:	613a      	str	r2, [r7, #16]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d101      	bne.n	80044dc <clmt_clust+0x42>
 80044d8:	2300      	movs	r3, #0
 80044da:	e010      	b.n	80044fe <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 80044dc:	697a      	ldr	r2, [r7, #20]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	429a      	cmp	r2, r3
 80044e2:	d307      	bcc.n	80044f4 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 80044e4:	697a      	ldr	r2, [r7, #20]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	617b      	str	r3, [r7, #20]
 80044ec:	693b      	ldr	r3, [r7, #16]
 80044ee:	3304      	adds	r3, #4
 80044f0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80044f2:	e7e9      	b.n	80044c8 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 80044f4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80044f6:	693b      	ldr	r3, [r7, #16]
 80044f8:	681a      	ldr	r2, [r3, #0]
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	4413      	add	r3, r2
}
 80044fe:	4618      	mov	r0, r3
 8004500:	371c      	adds	r7, #28
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr

0800450a <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800450a:	b580      	push	{r7, lr}
 800450c:	b086      	sub	sp, #24
 800450e:	af00      	add	r7, sp, #0
 8004510:	6078      	str	r0, [r7, #4]
 8004512:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004520:	d204      	bcs.n	800452c <dir_sdi+0x22>
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	f003 031f 	and.w	r3, r3, #31
 8004528:	2b00      	cmp	r3, #0
 800452a:	d001      	beq.n	8004530 <dir_sdi+0x26>
		return FR_INT_ERR;
 800452c:	2302      	movs	r3, #2
 800452e:	e071      	b.n	8004614 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	683a      	ldr	r2, [r7, #0]
 8004534:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	689b      	ldr	r3, [r3, #8]
 800453a:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800453c:	697b      	ldr	r3, [r7, #20]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d106      	bne.n	8004550 <dir_sdi+0x46>
 8004542:	693b      	ldr	r3, [r7, #16]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	2b02      	cmp	r3, #2
 8004548:	d902      	bls.n	8004550 <dir_sdi+0x46>
		clst = fs->dirbase;
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454e:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8004550:	697b      	ldr	r3, [r7, #20]
 8004552:	2b00      	cmp	r3, #0
 8004554:	d10c      	bne.n	8004570 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	095b      	lsrs	r3, r3, #5
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	8912      	ldrh	r2, [r2, #8]
 800455e:	4293      	cmp	r3, r2
 8004560:	d301      	bcc.n	8004566 <dir_sdi+0x5c>
 8004562:	2302      	movs	r3, #2
 8004564:	e056      	b.n	8004614 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	61da      	str	r2, [r3, #28]
 800456e:	e02d      	b.n	80045cc <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	895b      	ldrh	r3, [r3, #10]
 8004574:	461a      	mov	r2, r3
 8004576:	693b      	ldr	r3, [r7, #16]
 8004578:	899b      	ldrh	r3, [r3, #12]
 800457a:	fb02 f303 	mul.w	r3, r2, r3
 800457e:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004580:	e019      	b.n	80045b6 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4618      	mov	r0, r3
 8004588:	f7ff fc9d 	bl	8003ec6 <get_fat>
 800458c:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004594:	d101      	bne.n	800459a <dir_sdi+0x90>
 8004596:	2301      	movs	r3, #1
 8004598:	e03c      	b.n	8004614 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	2b01      	cmp	r3, #1
 800459e:	d904      	bls.n	80045aa <dir_sdi+0xa0>
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	69db      	ldr	r3, [r3, #28]
 80045a4:	697a      	ldr	r2, [r7, #20]
 80045a6:	429a      	cmp	r2, r3
 80045a8:	d301      	bcc.n	80045ae <dir_sdi+0xa4>
 80045aa:	2302      	movs	r3, #2
 80045ac:	e032      	b.n	8004614 <dir_sdi+0x10a>
			ofs -= csz;
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80045b6:	683a      	ldr	r2, [r7, #0]
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	429a      	cmp	r2, r3
 80045bc:	d2e1      	bcs.n	8004582 <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 80045be:	6979      	ldr	r1, [r7, #20]
 80045c0:	6938      	ldr	r0, [r7, #16]
 80045c2:	f7ff fc61 	bl	8003e88 <clust2sect>
 80045c6:	4602      	mov	r2, r0
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	697a      	ldr	r2, [r7, #20]
 80045d0:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	69db      	ldr	r3, [r3, #28]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d101      	bne.n	80045de <dir_sdi+0xd4>
 80045da:	2302      	movs	r3, #2
 80045dc:	e01a      	b.n	8004614 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	69da      	ldr	r2, [r3, #28]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	899b      	ldrh	r3, [r3, #12]
 80045e6:	4619      	mov	r1, r3
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80045ee:	441a      	add	r2, r3
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	899b      	ldrh	r3, [r3, #12]
 80045fe:	461a      	mov	r2, r3
 8004600:	683b      	ldr	r3, [r7, #0]
 8004602:	fbb3 f0f2 	udiv	r0, r3, r2
 8004606:	fb00 f202 	mul.w	r2, r0, r2
 800460a:	1a9b      	subs	r3, r3, r2
 800460c:	18ca      	adds	r2, r1, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8004612:	2300      	movs	r3, #0
}
 8004614:	4618      	mov	r0, r3
 8004616:	3718      	adds	r7, #24
 8004618:	46bd      	mov	sp, r7
 800461a:	bd80      	pop	{r7, pc}

0800461c <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800461c:	b580      	push	{r7, lr}
 800461e:	b086      	sub	sp, #24
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
 8004624:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	695b      	ldr	r3, [r3, #20]
 8004630:	3320      	adds	r3, #32
 8004632:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	69db      	ldr	r3, [r3, #28]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d003      	beq.n	8004644 <dir_next+0x28>
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004642:	d301      	bcc.n	8004648 <dir_next+0x2c>
 8004644:	2304      	movs	r3, #4
 8004646:	e0bb      	b.n	80047c0 <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	899b      	ldrh	r3, [r3, #12]
 800464c:	461a      	mov	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	fbb3 f1f2 	udiv	r1, r3, r2
 8004654:	fb01 f202 	mul.w	r2, r1, r2
 8004658:	1a9b      	subs	r3, r3, r2
 800465a:	2b00      	cmp	r3, #0
 800465c:	f040 809d 	bne.w	800479a <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69db      	ldr	r3, [r3, #28]
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d10b      	bne.n	800468a <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	095b      	lsrs	r3, r3, #5
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	8912      	ldrh	r2, [r2, #8]
 800467a:	4293      	cmp	r3, r2
 800467c:	f0c0 808d 	bcc.w	800479a <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2200      	movs	r2, #0
 8004684:	61da      	str	r2, [r3, #28]
 8004686:	2304      	movs	r3, #4
 8004688:	e09a      	b.n	80047c0 <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	899b      	ldrh	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	68bb      	ldr	r3, [r7, #8]
 8004692:	fbb3 f3f2 	udiv	r3, r3, r2
 8004696:	68fa      	ldr	r2, [r7, #12]
 8004698:	8952      	ldrh	r2, [r2, #10]
 800469a:	3a01      	subs	r2, #1
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d17b      	bne.n	800479a <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	4619      	mov	r1, r3
 80046aa:	4610      	mov	r0, r2
 80046ac:	f7ff fc0b 	bl	8003ec6 <get_fat>
 80046b0:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d801      	bhi.n	80046bc <dir_next+0xa0>
 80046b8:	2302      	movs	r3, #2
 80046ba:	e081      	b.n	80047c0 <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046c2:	d101      	bne.n	80046c8 <dir_next+0xac>
 80046c4:	2301      	movs	r3, #1
 80046c6:	e07b      	b.n	80047c0 <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	69db      	ldr	r3, [r3, #28]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	429a      	cmp	r2, r3
 80046d0:	d359      	bcc.n	8004786 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d104      	bne.n	80046e2 <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	61da      	str	r2, [r3, #28]
 80046de:	2304      	movs	r3, #4
 80046e0:	e06e      	b.n	80047c0 <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	699b      	ldr	r3, [r3, #24]
 80046e8:	4619      	mov	r1, r3
 80046ea:	4610      	mov	r0, r2
 80046ec:	f7ff fe3d 	bl	800436a <create_chain>
 80046f0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d101      	bne.n	80046fc <dir_next+0xe0>
 80046f8:	2307      	movs	r3, #7
 80046fa:	e061      	b.n	80047c0 <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d101      	bne.n	8004706 <dir_next+0xea>
 8004702:	2302      	movs	r3, #2
 8004704:	e05c      	b.n	80047c0 <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004706:	697b      	ldr	r3, [r7, #20]
 8004708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800470c:	d101      	bne.n	8004712 <dir_next+0xf6>
 800470e:	2301      	movs	r3, #1
 8004710:	e056      	b.n	80047c0 <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8004712:	68f8      	ldr	r0, [r7, #12]
 8004714:	f7ff fad6 	bl	8003cc4 <sync_window>
 8004718:	4603      	mov	r3, r0
 800471a:	2b00      	cmp	r3, #0
 800471c:	d001      	beq.n	8004722 <dir_next+0x106>
 800471e:	2301      	movs	r3, #1
 8004720:	e04e      	b.n	80047c0 <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8004728:	68fb      	ldr	r3, [r7, #12]
 800472a:	899b      	ldrh	r3, [r3, #12]
 800472c:	461a      	mov	r2, r3
 800472e:	2100      	movs	r1, #0
 8004730:	f7ff f8ff 	bl	8003932 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004734:	2300      	movs	r3, #0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	6979      	ldr	r1, [r7, #20]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff fba4 	bl	8003e88 <clust2sect>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	635a      	str	r2, [r3, #52]	@ 0x34
 8004746:	e012      	b.n	800476e <dir_next+0x152>
						fs->wflag = 1;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	2201      	movs	r2, #1
 800474c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800474e:	68f8      	ldr	r0, [r7, #12]
 8004750:	f7ff fab8 	bl	8003cc4 <sync_window>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <dir_next+0x142>
 800475a:	2301      	movs	r3, #1
 800475c:	e030      	b.n	80047c0 <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800475e:	693b      	ldr	r3, [r7, #16]
 8004760:	3301      	adds	r3, #1
 8004762:	613b      	str	r3, [r7, #16]
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	635a      	str	r2, [r3, #52]	@ 0x34
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	895b      	ldrh	r3, [r3, #10]
 8004772:	461a      	mov	r2, r3
 8004774:	693b      	ldr	r3, [r7, #16]
 8004776:	4293      	cmp	r3, r2
 8004778:	d3e6      	bcc.n	8004748 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	1ad2      	subs	r2, r2, r3
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	697a      	ldr	r2, [r7, #20]
 800478a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800478c:	6979      	ldr	r1, [r7, #20]
 800478e:	68f8      	ldr	r0, [r7, #12]
 8004790:	f7ff fb7a 	bl	8003e88 <clust2sect>
 8004794:	4602      	mov	r2, r0
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	68ba      	ldr	r2, [r7, #8]
 800479e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	899b      	ldrh	r3, [r3, #12]
 80047aa:	461a      	mov	r2, r3
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80047b2:	fb00 f202 	mul.w	r2, r0, r2
 80047b6:	1a9b      	subs	r3, r3, r2
 80047b8:	18ca      	adds	r2, r1, r3
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80047be:	2300      	movs	r3, #0
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}

080047c8 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b086      	sub	sp, #24
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 80047d8:	2100      	movs	r1, #0
 80047da:	6878      	ldr	r0, [r7, #4]
 80047dc:	f7ff fe95 	bl	800450a <dir_sdi>
 80047e0:	4603      	mov	r3, r0
 80047e2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80047e4:	7dfb      	ldrb	r3, [r7, #23]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d12b      	bne.n	8004842 <dir_alloc+0x7a>
		n = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	69db      	ldr	r3, [r3, #28]
 80047f2:	4619      	mov	r1, r3
 80047f4:	68f8      	ldr	r0, [r7, #12]
 80047f6:	f7ff faa9 	bl	8003d4c <move_window>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80047fe:	7dfb      	ldrb	r3, [r7, #23]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d11d      	bne.n	8004840 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	2be5      	cmp	r3, #229	@ 0xe5
 800480c:	d004      	beq.n	8004818 <dir_alloc+0x50>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6a1b      	ldr	r3, [r3, #32]
 8004812:	781b      	ldrb	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d107      	bne.n	8004828 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	3301      	adds	r3, #1
 800481c:	613b      	str	r3, [r7, #16]
 800481e:	693a      	ldr	r2, [r7, #16]
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	429a      	cmp	r2, r3
 8004824:	d102      	bne.n	800482c <dir_alloc+0x64>
 8004826:	e00c      	b.n	8004842 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8004828:	2300      	movs	r3, #0
 800482a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800482c:	2101      	movs	r1, #1
 800482e:	6878      	ldr	r0, [r7, #4]
 8004830:	f7ff fef4 	bl	800461c <dir_next>
 8004834:	4603      	mov	r3, r0
 8004836:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8004838:	7dfb      	ldrb	r3, [r7, #23]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d0d7      	beq.n	80047ee <dir_alloc+0x26>
 800483e:	e000      	b.n	8004842 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004840:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004842:	7dfb      	ldrb	r3, [r7, #23]
 8004844:	2b04      	cmp	r3, #4
 8004846:	d101      	bne.n	800484c <dir_alloc+0x84>
 8004848:	2307      	movs	r3, #7
 800484a:	75fb      	strb	r3, [r7, #23]
	return res;
 800484c:	7dfb      	ldrb	r3, [r7, #23]
}
 800484e:	4618      	mov	r0, r3
 8004850:	3718      	adds	r7, #24
 8004852:	46bd      	mov	sp, r7
 8004854:	bd80      	pop	{r7, pc}

08004856 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004856:	b580      	push	{r7, lr}
 8004858:	b084      	sub	sp, #16
 800485a:	af00      	add	r7, sp, #0
 800485c:	6078      	str	r0, [r7, #4]
 800485e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	331a      	adds	r3, #26
 8004864:	4618      	mov	r0, r3
 8004866:	f7fe ffc1 	bl	80037ec <ld_word>
 800486a:	4603      	mov	r3, r0
 800486c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	2b03      	cmp	r3, #3
 8004874:	d109      	bne.n	800488a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	4618      	mov	r0, r3
 800487c:	f7fe ffb6 	bl	80037ec <ld_word>
 8004880:	4603      	mov	r3, r0
 8004882:	041b      	lsls	r3, r3, #16
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800488a:	68fb      	ldr	r3, [r7, #12]
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	331a      	adds	r3, #26
 80048a4:	687a      	ldr	r2, [r7, #4]
 80048a6:	b292      	uxth	r2, r2
 80048a8:	4611      	mov	r1, r2
 80048aa:	4618      	mov	r0, r3
 80048ac:	f7fe ffd9 	bl	8003862 <st_word>
	if (fs->fs_type == FS_FAT32) {
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	781b      	ldrb	r3, [r3, #0]
 80048b4:	2b03      	cmp	r3, #3
 80048b6:	d109      	bne.n	80048cc <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f103 0214 	add.w	r2, r3, #20
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	0c1b      	lsrs	r3, r3, #16
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	4619      	mov	r1, r3
 80048c6:	4610      	mov	r0, r2
 80048c8:	f7fe ffcb 	bl	8003862 <st_word>
	}
}
 80048cc:	bf00      	nop
 80048ce:	3710      	adds	r7, #16
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bd80      	pop	{r7, pc}

080048d4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 80048d4:	b590      	push	{r4, r7, lr}
 80048d6:	b087      	sub	sp, #28
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	331a      	adds	r3, #26
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fe ff82 	bl	80037ec <ld_word>
 80048e8:	4603      	mov	r3, r0
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d001      	beq.n	80048f2 <cmp_lfn+0x1e>
 80048ee:	2300      	movs	r3, #0
 80048f0:	e059      	b.n	80049a6 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80048fa:	1e5a      	subs	r2, r3, #1
 80048fc:	4613      	mov	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4413      	add	r3, r2
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	4413      	add	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004908:	2301      	movs	r3, #1
 800490a:	81fb      	strh	r3, [r7, #14]
 800490c:	2300      	movs	r3, #0
 800490e:	613b      	str	r3, [r7, #16]
 8004910:	e033      	b.n	800497a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8004912:	4a27      	ldr	r2, [pc, #156]	@ (80049b0 <cmp_lfn+0xdc>)
 8004914:	693b      	ldr	r3, [r7, #16]
 8004916:	4413      	add	r3, r2
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	461a      	mov	r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	4413      	add	r3, r2
 8004920:	4618      	mov	r0, r3
 8004922:	f7fe ff63 	bl	80037ec <ld_word>
 8004926:	4603      	mov	r3, r0
 8004928:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800492a:	89fb      	ldrh	r3, [r7, #14]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d01a      	beq.n	8004966 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8004930:	697b      	ldr	r3, [r7, #20]
 8004932:	2bfe      	cmp	r3, #254	@ 0xfe
 8004934:	d812      	bhi.n	800495c <cmp_lfn+0x88>
 8004936:	89bb      	ldrh	r3, [r7, #12]
 8004938:	4618      	mov	r0, r3
 800493a:	f002 f85f 	bl	80069fc <ff_wtoupper>
 800493e:	4603      	mov	r3, r0
 8004940:	461c      	mov	r4, r3
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	1c5a      	adds	r2, r3, #1
 8004946:	617a      	str	r2, [r7, #20]
 8004948:	005b      	lsls	r3, r3, #1
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4413      	add	r3, r2
 800494e:	881b      	ldrh	r3, [r3, #0]
 8004950:	4618      	mov	r0, r3
 8004952:	f002 f853 	bl	80069fc <ff_wtoupper>
 8004956:	4603      	mov	r3, r0
 8004958:	429c      	cmp	r4, r3
 800495a:	d001      	beq.n	8004960 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800495c:	2300      	movs	r3, #0
 800495e:	e022      	b.n	80049a6 <cmp_lfn+0xd2>
			}
			wc = uc;
 8004960:	89bb      	ldrh	r3, [r7, #12]
 8004962:	81fb      	strh	r3, [r7, #14]
 8004964:	e006      	b.n	8004974 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8004966:	89bb      	ldrh	r3, [r7, #12]
 8004968:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800496c:	4293      	cmp	r3, r2
 800496e:	d001      	beq.n	8004974 <cmp_lfn+0xa0>
 8004970:	2300      	movs	r3, #0
 8004972:	e018      	b.n	80049a6 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	3301      	adds	r3, #1
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	2b0c      	cmp	r3, #12
 800497e:	d9c8      	bls.n	8004912 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	781b      	ldrb	r3, [r3, #0]
 8004984:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d00b      	beq.n	80049a4 <cmp_lfn+0xd0>
 800498c:	89fb      	ldrh	r3, [r7, #14]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d008      	beq.n	80049a4 <cmp_lfn+0xd0>
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	005b      	lsls	r3, r3, #1
 8004996:	687a      	ldr	r2, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <cmp_lfn+0xd0>
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 80049a4:	2301      	movs	r3, #1
}
 80049a6:	4618      	mov	r0, r3
 80049a8:	371c      	adds	r7, #28
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd90      	pop	{r4, r7, pc}
 80049ae:	bf00      	nop
 80049b0:	08007c54 	.word	0x08007c54

080049b4 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	60f8      	str	r0, [r7, #12]
 80049bc:	60b9      	str	r1, [r7, #8]
 80049be:	4611      	mov	r1, r2
 80049c0:	461a      	mov	r2, r3
 80049c2:	460b      	mov	r3, r1
 80049c4:	71fb      	strb	r3, [r7, #7]
 80049c6:	4613      	mov	r3, r2
 80049c8:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	330d      	adds	r3, #13
 80049ce:	79ba      	ldrb	r2, [r7, #6]
 80049d0:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	330b      	adds	r3, #11
 80049d6:	220f      	movs	r2, #15
 80049d8:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	330c      	adds	r3, #12
 80049de:	2200      	movs	r2, #0
 80049e0:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	331a      	adds	r3, #26
 80049e6:	2100      	movs	r1, #0
 80049e8:	4618      	mov	r0, r3
 80049ea:	f7fe ff3a 	bl	8003862 <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 80049ee:	79fb      	ldrb	r3, [r7, #7]
 80049f0:	1e5a      	subs	r2, r3, #1
 80049f2:	4613      	mov	r3, r2
 80049f4:	005b      	lsls	r3, r3, #1
 80049f6:	4413      	add	r3, r2
 80049f8:	009b      	lsls	r3, r3, #2
 80049fa:	4413      	add	r3, r2
 80049fc:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 80049fe:	2300      	movs	r3, #0
 8004a00:	82fb      	strh	r3, [r7, #22]
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8004a06:	8afb      	ldrh	r3, [r7, #22]
 8004a08:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d007      	beq.n	8004a20 <put_lfn+0x6c>
 8004a10:	69fb      	ldr	r3, [r7, #28]
 8004a12:	1c5a      	adds	r2, r3, #1
 8004a14:	61fa      	str	r2, [r7, #28]
 8004a16:	005b      	lsls	r3, r3, #1
 8004a18:	68fa      	ldr	r2, [r7, #12]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	881b      	ldrh	r3, [r3, #0]
 8004a1e:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8004a20:	4a17      	ldr	r2, [pc, #92]	@ (8004a80 <put_lfn+0xcc>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	4413      	add	r3, r2
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	461a      	mov	r2, r3
 8004a2a:	68bb      	ldr	r3, [r7, #8]
 8004a2c:	4413      	add	r3, r2
 8004a2e:	8afa      	ldrh	r2, [r7, #22]
 8004a30:	4611      	mov	r1, r2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe ff15 	bl	8003862 <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8004a38:	8afb      	ldrh	r3, [r7, #22]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d102      	bne.n	8004a44 <put_lfn+0x90>
 8004a3e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a42:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8004a44:	69bb      	ldr	r3, [r7, #24]
 8004a46:	3301      	adds	r3, #1
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	2b0c      	cmp	r3, #12
 8004a4e:	d9da      	bls.n	8004a06 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8004a50:	8afb      	ldrh	r3, [r7, #22]
 8004a52:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d006      	beq.n	8004a68 <put_lfn+0xb4>
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4413      	add	r3, r2
 8004a62:	881b      	ldrh	r3, [r3, #0]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d103      	bne.n	8004a70 <put_lfn+0xbc>
 8004a68:	79fb      	ldrb	r3, [r7, #7]
 8004a6a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a6e:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8004a70:	68bb      	ldr	r3, [r7, #8]
 8004a72:	79fa      	ldrb	r2, [r7, #7]
 8004a74:	701a      	strb	r2, [r3, #0]
}
 8004a76:	bf00      	nop
 8004a78:	3720      	adds	r7, #32
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	08007c54 	.word	0x08007c54

08004a84 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b08c      	sub	sp, #48	@ 0x30
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]
 8004a90:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8004a92:	220b      	movs	r2, #11
 8004a94:	68b9      	ldr	r1, [r7, #8]
 8004a96:	68f8      	ldr	r0, [r7, #12]
 8004a98:	f7fe ff2a 	bl	80038f0 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	2b05      	cmp	r3, #5
 8004aa0:	d92b      	bls.n	8004afa <gen_numname+0x76>
		sr = seq;
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8004aa6:	e022      	b.n	8004aee <gen_numname+0x6a>
			wc = *lfn++;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	1c9a      	adds	r2, r3, #2
 8004aac:	607a      	str	r2, [r7, #4]
 8004aae:	881b      	ldrh	r3, [r3, #0]
 8004ab0:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ab6:	e017      	b.n	8004ae8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8004ab8:	69fb      	ldr	r3, [r7, #28]
 8004aba:	005a      	lsls	r2, r3, #1
 8004abc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004abe:	f003 0301 	and.w	r3, r3, #1
 8004ac2:	4413      	add	r3, r2
 8004ac4:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8004ac6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <gen_numname+0x5e>
 8004ad6:	69fb      	ldr	r3, [r7, #28]
 8004ad8:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8004adc:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 8004ae0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8004ae2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae4:	3301      	adds	r3, #1
 8004ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004aea:	2b0f      	cmp	r3, #15
 8004aec:	d9e4      	bls.n	8004ab8 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	881b      	ldrh	r3, [r3, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d1d8      	bne.n	8004aa8 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8004afa:	2307      	movs	r3, #7
 8004afc:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	b2db      	uxtb	r3, r3
 8004b02:	f003 030f 	and.w	r3, r3, #15
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	3330      	adds	r3, #48	@ 0x30
 8004b0a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 8004b0e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b12:	2b39      	cmp	r3, #57	@ 0x39
 8004b14:	d904      	bls.n	8004b20 <gen_numname+0x9c>
 8004b16:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004b1a:	3307      	adds	r3, #7
 8004b1c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 8004b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b22:	1e5a      	subs	r2, r3, #1
 8004b24:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b26:	3330      	adds	r3, #48	@ 0x30
 8004b28:	443b      	add	r3, r7
 8004b2a:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8004b2e:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	603b      	str	r3, [r7, #0]
	} while (seq);
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1df      	bne.n	8004afe <gen_numname+0x7a>
	ns[i] = '~';
 8004b3e:	f107 0214 	add.w	r2, r7, #20
 8004b42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b44:	4413      	add	r3, r2
 8004b46:	227e      	movs	r2, #126	@ 0x7e
 8004b48:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b4e:	e002      	b.n	8004b56 <gen_numname+0xd2>
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	3301      	adds	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d205      	bcs.n	8004b6a <gen_numname+0xe6>
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b62:	4413      	add	r3, r2
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b20      	cmp	r3, #32
 8004b68:	d1f2      	bne.n	8004b50 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8004b6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6c:	2b07      	cmp	r3, #7
 8004b6e:	d807      	bhi.n	8004b80 <gen_numname+0xfc>
 8004b70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b72:	1c5a      	adds	r2, r3, #1
 8004b74:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004b76:	3330      	adds	r3, #48	@ 0x30
 8004b78:	443b      	add	r3, r7
 8004b7a:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8004b7e:	e000      	b.n	8004b82 <gen_numname+0xfe>
 8004b80:	2120      	movs	r1, #32
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	1c5a      	adds	r2, r3, #1
 8004b86:	627a      	str	r2, [r7, #36]	@ 0x24
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	4413      	add	r3, r2
 8004b8c:	460a      	mov	r2, r1
 8004b8e:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8004b90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b92:	2b07      	cmp	r3, #7
 8004b94:	d9e9      	bls.n	8004b6a <gen_numname+0xe6>
}
 8004b96:	bf00      	nop
 8004b98:	bf00      	nop
 8004b9a:	3730      	adds	r7, #48	@ 0x30
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bd80      	pop	{r7, pc}

08004ba0 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8004ba0:	b480      	push	{r7}
 8004ba2:	b085      	sub	sp, #20
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8004ba8:	2300      	movs	r3, #0
 8004baa:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8004bac:	230b      	movs	r3, #11
 8004bae:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8004bb0:	7bfb      	ldrb	r3, [r7, #15]
 8004bb2:	b2da      	uxtb	r2, r3
 8004bb4:	0852      	lsrs	r2, r2, #1
 8004bb6:	01db      	lsls	r3, r3, #7
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	b2da      	uxtb	r2, r3
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	1c59      	adds	r1, r3, #1
 8004bc0:	6079      	str	r1, [r7, #4]
 8004bc2:	781b      	ldrb	r3, [r3, #0]
 8004bc4:	4413      	add	r3, r2
 8004bc6:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	3b01      	subs	r3, #1
 8004bcc:	60bb      	str	r3, [r7, #8]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ed      	bne.n	8004bb0 <sum_sfn+0x10>
	return sum;
 8004bd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	3714      	adds	r7, #20
 8004bda:	46bd      	mov	sp, r7
 8004bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be0:	4770      	bx	lr

08004be2 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004be2:	b580      	push	{r7, lr}
 8004be4:	b086      	sub	sp, #24
 8004be6:	af00      	add	r7, sp, #0
 8004be8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004bf0:	2100      	movs	r1, #0
 8004bf2:	6878      	ldr	r0, [r7, #4]
 8004bf4:	f7ff fc89 	bl	800450a <dir_sdi>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004bfc:	7dfb      	ldrb	r3, [r7, #23]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d001      	beq.n	8004c06 <dir_find+0x24>
 8004c02:	7dfb      	ldrb	r3, [r7, #23]
 8004c04:	e0a9      	b.n	8004d5a <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004c06:	23ff      	movs	r3, #255	@ 0xff
 8004c08:	753b      	strb	r3, [r7, #20]
 8004c0a:	7d3b      	ldrb	r3, [r7, #20]
 8004c0c:	757b      	strb	r3, [r7, #21]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	f04f 32ff 	mov.w	r2, #4294967295
 8004c14:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	69db      	ldr	r3, [r3, #28]
 8004c1a:	4619      	mov	r1, r3
 8004c1c:	6938      	ldr	r0, [r7, #16]
 8004c1e:	f7ff f895 	bl	8003d4c <move_window>
 8004c22:	4603      	mov	r3, r0
 8004c24:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	f040 8090 	bne.w	8004d4e <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a1b      	ldr	r3, [r3, #32]
 8004c32:	781b      	ldrb	r3, [r3, #0]
 8004c34:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004c36:	7dbb      	ldrb	r3, [r7, #22]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d102      	bne.n	8004c42 <dir_find+0x60>
 8004c3c:	2304      	movs	r3, #4
 8004c3e:	75fb      	strb	r3, [r7, #23]
 8004c40:	e08a      	b.n	8004d58 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6a1b      	ldr	r3, [r3, #32]
 8004c46:	330b      	adds	r3, #11
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	7bfa      	ldrb	r2, [r7, #15]
 8004c54:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8004c56:	7dbb      	ldrb	r3, [r7, #22]
 8004c58:	2be5      	cmp	r3, #229	@ 0xe5
 8004c5a:	d007      	beq.n	8004c6c <dir_find+0x8a>
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
 8004c5e:	f003 0308 	and.w	r3, r3, #8
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d009      	beq.n	8004c7a <dir_find+0x98>
 8004c66:	7bfb      	ldrb	r3, [r7, #15]
 8004c68:	2b0f      	cmp	r3, #15
 8004c6a:	d006      	beq.n	8004c7a <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004c6c:	23ff      	movs	r3, #255	@ 0xff
 8004c6e:	757b      	strb	r3, [r7, #21]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f04f 32ff 	mov.w	r2, #4294967295
 8004c76:	631a      	str	r2, [r3, #48]	@ 0x30
 8004c78:	e05e      	b.n	8004d38 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8004c7a:	7bfb      	ldrb	r3, [r7, #15]
 8004c7c:	2b0f      	cmp	r3, #15
 8004c7e:	d136      	bne.n	8004cee <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d154      	bne.n	8004d38 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8004c8e:	7dbb      	ldrb	r3, [r7, #22]
 8004c90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a1b      	ldr	r3, [r3, #32]
 8004c9c:	7b5b      	ldrb	r3, [r3, #13]
 8004c9e:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8004ca0:	7dbb      	ldrb	r3, [r7, #22]
 8004ca2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ca6:	75bb      	strb	r3, [r7, #22]
 8004ca8:	7dbb      	ldrb	r3, [r7, #22]
 8004caa:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695a      	ldr	r2, [r3, #20]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8004cb4:	7dba      	ldrb	r2, [r7, #22]
 8004cb6:	7d7b      	ldrb	r3, [r7, #21]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d115      	bne.n	8004ce8 <dir_find+0x106>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	330d      	adds	r3, #13
 8004cc2:	781b      	ldrb	r3, [r3, #0]
 8004cc4:	7d3a      	ldrb	r2, [r7, #20]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d10e      	bne.n	8004ce8 <dir_find+0x106>
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	691a      	ldr	r2, [r3, #16]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	4610      	mov	r0, r2
 8004cd6:	f7ff fdfd 	bl	80048d4 <cmp_lfn>
 8004cda:	4603      	mov	r3, r0
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d003      	beq.n	8004ce8 <dir_find+0x106>
 8004ce0:	7d7b      	ldrb	r3, [r7, #21]
 8004ce2:	3b01      	subs	r3, #1
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e000      	b.n	8004cea <dir_find+0x108>
 8004ce8:	23ff      	movs	r3, #255	@ 0xff
 8004cea:	757b      	strb	r3, [r7, #21]
 8004cec:	e024      	b.n	8004d38 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004cee:	7d7b      	ldrb	r3, [r7, #21]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d109      	bne.n	8004d08 <dir_find+0x126>
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a1b      	ldr	r3, [r3, #32]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7ff ff51 	bl	8004ba0 <sum_sfn>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	461a      	mov	r2, r3
 8004d02:	7d3b      	ldrb	r3, [r7, #20]
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d024      	beq.n	8004d52 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d10a      	bne.n	8004d2c <dir_find+0x14a>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a18      	ldr	r0, [r3, #32]
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	3324      	adds	r3, #36	@ 0x24
 8004d1e:	220b      	movs	r2, #11
 8004d20:	4619      	mov	r1, r3
 8004d22:	f7fe fe21 	bl	8003968 <mem_cmp>
 8004d26:	4603      	mov	r3, r0
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d014      	beq.n	8004d56 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8004d2c:	23ff      	movs	r3, #255	@ 0xff
 8004d2e:	757b      	strb	r3, [r7, #21]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f04f 32ff 	mov.w	r2, #4294967295
 8004d36:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8004d38:	2100      	movs	r1, #0
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f7ff fc6e 	bl	800461c <dir_next>
 8004d40:	4603      	mov	r3, r0
 8004d42:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004d44:	7dfb      	ldrb	r3, [r7, #23]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	f43f af65 	beq.w	8004c16 <dir_find+0x34>
 8004d4c:	e004      	b.n	8004d58 <dir_find+0x176>
		if (res != FR_OK) break;
 8004d4e:	bf00      	nop
 8004d50:	e002      	b.n	8004d58 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8004d52:	bf00      	nop
 8004d54:	e000      	b.n	8004d58 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8004d56:	bf00      	nop

	return res;
 8004d58:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3718      	adds	r7, #24
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	bd80      	pop	{r7, pc}
	...

08004d64 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b08c      	sub	sp, #48	@ 0x30
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8004d78:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d001      	beq.n	8004d84 <dir_register+0x20>
 8004d80:	2306      	movs	r3, #6
 8004d82:	e0e0      	b.n	8004f46 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8004d84:	2300      	movs	r3, #0
 8004d86:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d88:	e002      	b.n	8004d90 <dir_register+0x2c>
 8004d8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	691a      	ldr	r2, [r3, #16]
 8004d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d96:	005b      	lsls	r3, r3, #1
 8004d98:	4413      	add	r3, r2
 8004d9a:	881b      	ldrh	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1f4      	bne.n	8004d8a <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8004da6:	f107 030c 	add.w	r3, r7, #12
 8004daa:	220c      	movs	r2, #12
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fe fd9f 	bl	80038f0 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8004db2:	7dfb      	ldrb	r3, [r7, #23]
 8004db4:	f003 0301 	and.w	r3, r3, #1
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d032      	beq.n	8004e22 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2240      	movs	r2, #64	@ 0x40
 8004dc0:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dc8:	e016      	b.n	8004df8 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	f107 010c 	add.w	r1, r7, #12
 8004dd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dda:	f7ff fe53 	bl	8004a84 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8004dde:	6878      	ldr	r0, [r7, #4]
 8004de0:	f7ff feff 	bl	8004be2 <dir_find>
 8004de4:	4603      	mov	r3, r0
 8004de6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8004dea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d106      	bne.n	8004e00 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8004df2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004df4:	3301      	adds	r3, #1
 8004df6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfa:	2b63      	cmp	r3, #99	@ 0x63
 8004dfc:	d9e5      	bls.n	8004dca <dir_register+0x66>
 8004dfe:	e000      	b.n	8004e02 <dir_register+0x9e>
			if (res != FR_OK) break;
 8004e00:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	2b64      	cmp	r3, #100	@ 0x64
 8004e06:	d101      	bne.n	8004e0c <dir_register+0xa8>
 8004e08:	2307      	movs	r3, #7
 8004e0a:	e09c      	b.n	8004f46 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8004e0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e10:	2b04      	cmp	r3, #4
 8004e12:	d002      	beq.n	8004e1a <dir_register+0xb6>
 8004e14:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e18:	e095      	b.n	8004f46 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8004e1a:	7dfa      	ldrb	r2, [r7, #23]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8004e22:	7dfb      	ldrb	r3, [r7, #23]
 8004e24:	f003 0302 	and.w	r3, r3, #2
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d007      	beq.n	8004e3c <dir_register+0xd8>
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e2e:	330c      	adds	r3, #12
 8004e30:	4a47      	ldr	r2, [pc, #284]	@ (8004f50 <dir_register+0x1ec>)
 8004e32:	fba2 2303 	umull	r2, r3, r2, r3
 8004e36:	089b      	lsrs	r3, r3, #2
 8004e38:	3301      	adds	r3, #1
 8004e3a:	e000      	b.n	8004e3e <dir_register+0xda>
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8004e40:	6a39      	ldr	r1, [r7, #32]
 8004e42:	6878      	ldr	r0, [r7, #4]
 8004e44:	f7ff fcc0 	bl	80047c8 <dir_alloc>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8004e4e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d148      	bne.n	8004ee8 <dir_register+0x184>
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	623b      	str	r3, [r7, #32]
 8004e5c:	6a3b      	ldr	r3, [r7, #32]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d042      	beq.n	8004ee8 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	695a      	ldr	r2, [r3, #20]
 8004e66:	6a3b      	ldr	r3, [r7, #32]
 8004e68:	015b      	lsls	r3, r3, #5
 8004e6a:	1ad3      	subs	r3, r2, r3
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f7ff fb4b 	bl	800450a <dir_sdi>
 8004e74:	4603      	mov	r3, r0
 8004e76:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004e7a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d132      	bne.n	8004ee8 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3324      	adds	r3, #36	@ 0x24
 8004e86:	4618      	mov	r0, r3
 8004e88:	f7ff fe8a 	bl	8004ba0 <sum_sfn>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	4619      	mov	r1, r3
 8004e96:	69f8      	ldr	r0, [r7, #28]
 8004e98:	f7fe ff58 	bl	8003d4c <move_window>
 8004e9c:	4603      	mov	r3, r0
 8004e9e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 8004ea2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d11d      	bne.n	8004ee6 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	6918      	ldr	r0, [r3, #16]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a19      	ldr	r1, [r3, #32]
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	b2da      	uxtb	r2, r3
 8004eb6:	7efb      	ldrb	r3, [r7, #27]
 8004eb8:	f7ff fd7c 	bl	80049b4 <put_lfn>
				fs->wflag = 1;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff fba9 	bl	800461c <dir_next>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 8004ed0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d107      	bne.n	8004ee8 <dir_register+0x184>
 8004ed8:	6a3b      	ldr	r3, [r7, #32]
 8004eda:	3b01      	subs	r3, #1
 8004edc:	623b      	str	r3, [r7, #32]
 8004ede:	6a3b      	ldr	r3, [r7, #32]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1d5      	bne.n	8004e90 <dir_register+0x12c>
 8004ee4:	e000      	b.n	8004ee8 <dir_register+0x184>
				if (res != FR_OK) break;
 8004ee6:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004ee8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d128      	bne.n	8004f42 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	69db      	ldr	r3, [r3, #28]
 8004ef4:	4619      	mov	r1, r3
 8004ef6:	69f8      	ldr	r0, [r7, #28]
 8004ef8:	f7fe ff28 	bl	8003d4c <move_window>
 8004efc:	4603      	mov	r3, r0
 8004efe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 8004f02:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d11b      	bne.n	8004f42 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a1b      	ldr	r3, [r3, #32]
 8004f0e:	2220      	movs	r2, #32
 8004f10:	2100      	movs	r1, #0
 8004f12:	4618      	mov	r0, r3
 8004f14:	f7fe fd0d 	bl	8003932 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a18      	ldr	r0, [r3, #32]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	3324      	adds	r3, #36	@ 0x24
 8004f20:	220b      	movs	r2, #11
 8004f22:	4619      	mov	r1, r3
 8004f24:	f7fe fce4 	bl	80038f0 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	330c      	adds	r3, #12
 8004f34:	f002 0218 	and.w	r2, r2, #24
 8004f38:	b2d2      	uxtb	r2, r2
 8004f3a:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	2201      	movs	r2, #1
 8004f40:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004f42:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3730      	adds	r7, #48	@ 0x30
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}
 8004f4e:	bf00      	nop
 8004f50:	4ec4ec4f 	.word	0x4ec4ec4f

08004f54 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b08a      	sub	sp, #40	@ 0x28
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8004f5e:	683b      	ldr	r3, [r7, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	613b      	str	r3, [r7, #16]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	691b      	ldr	r3, [r3, #16]
 8004f6a:	60fb      	str	r3, [r7, #12]
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	617b      	str	r3, [r7, #20]
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8004f74:	69bb      	ldr	r3, [r7, #24]
 8004f76:	1c5a      	adds	r2, r3, #1
 8004f78:	61ba      	str	r2, [r7, #24]
 8004f7a:	693a      	ldr	r2, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	781b      	ldrb	r3, [r3, #0]
 8004f80:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8004f82:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f84:	2b1f      	cmp	r3, #31
 8004f86:	d940      	bls.n	800500a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8004f88:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f8a:	2b2f      	cmp	r3, #47	@ 0x2f
 8004f8c:	d006      	beq.n	8004f9c <create_name+0x48>
 8004f8e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004f90:	2b5c      	cmp	r3, #92	@ 0x5c
 8004f92:	d110      	bne.n	8004fb6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8004f94:	e002      	b.n	8004f9c <create_name+0x48>
 8004f96:	69bb      	ldr	r3, [r7, #24]
 8004f98:	3301      	adds	r3, #1
 8004f9a:	61bb      	str	r3, [r7, #24]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	69bb      	ldr	r3, [r7, #24]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	781b      	ldrb	r3, [r3, #0]
 8004fa4:	2b2f      	cmp	r3, #47	@ 0x2f
 8004fa6:	d0f6      	beq.n	8004f96 <create_name+0x42>
 8004fa8:	693a      	ldr	r2, [r7, #16]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	4413      	add	r3, r2
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b5c      	cmp	r3, #92	@ 0x5c
 8004fb2:	d0f0      	beq.n	8004f96 <create_name+0x42>
			break;
 8004fb4:	e02a      	b.n	800500c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	2bfe      	cmp	r3, #254	@ 0xfe
 8004fba:	d901      	bls.n	8004fc0 <create_name+0x6c>
 8004fbc:	2306      	movs	r3, #6
 8004fbe:	e17d      	b.n	80052bc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 8004fc0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fc2:	b2db      	uxtb	r3, r3
 8004fc4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8004fc6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fc8:	2101      	movs	r1, #1
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f001 fcda 	bl	8006984 <ff_convert>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8004fd4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d101      	bne.n	8004fde <create_name+0x8a>
 8004fda:	2306      	movs	r3, #6
 8004fdc:	e16e      	b.n	80052bc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8004fde:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fe0:	2b7f      	cmp	r3, #127	@ 0x7f
 8004fe2:	d809      	bhi.n	8004ff8 <create_name+0xa4>
 8004fe4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8004fe6:	4619      	mov	r1, r3
 8004fe8:	488d      	ldr	r0, [pc, #564]	@ (8005220 <create_name+0x2cc>)
 8004fea:	f7fe fce4 	bl	80039b6 <chk_chr>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <create_name+0xa4>
 8004ff4:	2306      	movs	r3, #6
 8004ff6:	e161      	b.n	80052bc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8004ff8:	697b      	ldr	r3, [r7, #20]
 8004ffa:	1c5a      	adds	r2, r3, #1
 8004ffc:	617a      	str	r2, [r7, #20]
 8004ffe:	005b      	lsls	r3, r3, #1
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4413      	add	r3, r2
 8005004:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005006:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8005008:	e7b4      	b.n	8004f74 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800500a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800500c:	693a      	ldr	r2, [r7, #16]
 800500e:	69bb      	ldr	r3, [r7, #24]
 8005010:	441a      	add	r2, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8005016:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005018:	2b1f      	cmp	r3, #31
 800501a:	d801      	bhi.n	8005020 <create_name+0xcc>
 800501c:	2304      	movs	r3, #4
 800501e:	e000      	b.n	8005022 <create_name+0xce>
 8005020:	2300      	movs	r3, #0
 8005022:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8005026:	e011      	b.n	800504c <create_name+0xf8>
		w = lfn[di - 1];
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800502e:	3b01      	subs	r3, #1
 8005030:	005b      	lsls	r3, r3, #1
 8005032:	68fa      	ldr	r2, [r7, #12]
 8005034:	4413      	add	r3, r2
 8005036:	881b      	ldrh	r3, [r3, #0]
 8005038:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 800503a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800503c:	2b20      	cmp	r3, #32
 800503e:	d002      	beq.n	8005046 <create_name+0xf2>
 8005040:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005042:	2b2e      	cmp	r3, #46	@ 0x2e
 8005044:	d106      	bne.n	8005054 <create_name+0x100>
		di--;
 8005046:	697b      	ldr	r3, [r7, #20]
 8005048:	3b01      	subs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1ea      	bne.n	8005028 <create_name+0xd4>
 8005052:	e000      	b.n	8005056 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8005054:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8005056:	697b      	ldr	r3, [r7, #20]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4413      	add	r3, r2
 800505e:	2200      	movs	r2, #0
 8005060:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8005062:	697b      	ldr	r3, [r7, #20]
 8005064:	2b00      	cmp	r3, #0
 8005066:	d101      	bne.n	800506c <create_name+0x118>
 8005068:	2306      	movs	r3, #6
 800506a:	e127      	b.n	80052bc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	3324      	adds	r3, #36	@ 0x24
 8005070:	220b      	movs	r2, #11
 8005072:	2120      	movs	r1, #32
 8005074:	4618      	mov	r0, r3
 8005076:	f7fe fc5c 	bl	8003932 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e002      	b.n	8005086 <create_name+0x132>
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	3301      	adds	r3, #1
 8005084:	61bb      	str	r3, [r7, #24]
 8005086:	69bb      	ldr	r3, [r7, #24]
 8005088:	005b      	lsls	r3, r3, #1
 800508a:	68fa      	ldr	r2, [r7, #12]
 800508c:	4413      	add	r3, r2
 800508e:	881b      	ldrh	r3, [r3, #0]
 8005090:	2b20      	cmp	r3, #32
 8005092:	d0f5      	beq.n	8005080 <create_name+0x12c>
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	68fa      	ldr	r2, [r7, #12]
 800509a:	4413      	add	r3, r2
 800509c:	881b      	ldrh	r3, [r3, #0]
 800509e:	2b2e      	cmp	r3, #46	@ 0x2e
 80050a0:	d0ee      	beq.n	8005080 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 80050a2:	69bb      	ldr	r3, [r7, #24]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d009      	beq.n	80050bc <create_name+0x168>
 80050a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80050ac:	f043 0303 	orr.w	r3, r3, #3
 80050b0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80050b4:	e002      	b.n	80050bc <create_name+0x168>
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	3b01      	subs	r3, #1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d009      	beq.n	80050d6 <create_name+0x182>
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80050c8:	3b01      	subs	r3, #1
 80050ca:	005b      	lsls	r3, r3, #1
 80050cc:	68fa      	ldr	r2, [r7, #12]
 80050ce:	4413      	add	r3, r2
 80050d0:	881b      	ldrh	r3, [r3, #0]
 80050d2:	2b2e      	cmp	r3, #46	@ 0x2e
 80050d4:	d1ef      	bne.n	80050b6 <create_name+0x162>

	i = b = 0; ni = 8;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80050dc:	2300      	movs	r3, #0
 80050de:	623b      	str	r3, [r7, #32]
 80050e0:	2308      	movs	r3, #8
 80050e2:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80050e4:	69bb      	ldr	r3, [r7, #24]
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	61ba      	str	r2, [r7, #24]
 80050ea:	005b      	lsls	r3, r3, #1
 80050ec:	68fa      	ldr	r2, [r7, #12]
 80050ee:	4413      	add	r3, r2
 80050f0:	881b      	ldrh	r3, [r3, #0]
 80050f2:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 80050f4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8090 	beq.w	800521c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80050fc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80050fe:	2b20      	cmp	r3, #32
 8005100:	d006      	beq.n	8005110 <create_name+0x1bc>
 8005102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005104:	2b2e      	cmp	r3, #46	@ 0x2e
 8005106:	d10a      	bne.n	800511e <create_name+0x1ca>
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	429a      	cmp	r2, r3
 800510e:	d006      	beq.n	800511e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 8005110:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005114:	f043 0303 	orr.w	r3, r3, #3
 8005118:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800511c:	e07d      	b.n	800521a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	429a      	cmp	r2, r3
 8005124:	d203      	bcs.n	800512e <create_name+0x1da>
 8005126:	69ba      	ldr	r2, [r7, #24]
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	429a      	cmp	r2, r3
 800512c:	d123      	bne.n	8005176 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	2b0b      	cmp	r3, #11
 8005132:	d106      	bne.n	8005142 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 8005134:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005138:	f043 0303 	orr.w	r3, r3, #3
 800513c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8005140:	e075      	b.n	800522e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8005142:	69ba      	ldr	r2, [r7, #24]
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	429a      	cmp	r2, r3
 8005148:	d005      	beq.n	8005156 <create_name+0x202>
 800514a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800514e:	f043 0303 	orr.w	r3, r3, #3
 8005152:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	697b      	ldr	r3, [r7, #20]
 800515a:	429a      	cmp	r2, r3
 800515c:	d866      	bhi.n	800522c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	61bb      	str	r3, [r7, #24]
 8005162:	2308      	movs	r3, #8
 8005164:	623b      	str	r3, [r7, #32]
 8005166:	230b      	movs	r3, #11
 8005168:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800516a:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005174:	e051      	b.n	800521a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8005176:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005178:	2b7f      	cmp	r3, #127	@ 0x7f
 800517a:	d914      	bls.n	80051a6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800517c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800517e:	2100      	movs	r1, #0
 8005180:	4618      	mov	r0, r3
 8005182:	f001 fbff 	bl	8006984 <ff_convert>
 8005186:	4603      	mov	r3, r0
 8005188:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800518a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800518c:	2b00      	cmp	r3, #0
 800518e:	d004      	beq.n	800519a <create_name+0x246>
 8005190:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005192:	3b80      	subs	r3, #128	@ 0x80
 8005194:	4a23      	ldr	r2, [pc, #140]	@ (8005224 <create_name+0x2d0>)
 8005196:	5cd3      	ldrb	r3, [r2, r3]
 8005198:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800519a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800519e:	f043 0302 	orr.w	r3, r3, #2
 80051a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 80051a6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d007      	beq.n	80051bc <create_name+0x268>
 80051ac:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ae:	4619      	mov	r1, r3
 80051b0:	481d      	ldr	r0, [pc, #116]	@ (8005228 <create_name+0x2d4>)
 80051b2:	f7fe fc00 	bl	80039b6 <chk_chr>
 80051b6:	4603      	mov	r3, r0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d008      	beq.n	80051ce <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80051bc:	235f      	movs	r3, #95	@ 0x5f
 80051be:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80051c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80051c4:	f043 0303 	orr.w	r3, r3, #3
 80051c8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80051cc:	e01b      	b.n	8005206 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80051ce:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051d0:	2b40      	cmp	r3, #64	@ 0x40
 80051d2:	d909      	bls.n	80051e8 <create_name+0x294>
 80051d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051d6:	2b5a      	cmp	r3, #90	@ 0x5a
 80051d8:	d806      	bhi.n	80051e8 <create_name+0x294>
					b |= 2;
 80051da:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051de:	f043 0302 	orr.w	r3, r3, #2
 80051e2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80051e6:	e00e      	b.n	8005206 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80051e8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051ea:	2b60      	cmp	r3, #96	@ 0x60
 80051ec:	d90b      	bls.n	8005206 <create_name+0x2b2>
 80051ee:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80051f0:	2b7a      	cmp	r3, #122	@ 0x7a
 80051f2:	d808      	bhi.n	8005206 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 80051f4:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80051f8:	f043 0301 	orr.w	r3, r3, #1
 80051fc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8005200:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005202:	3b20      	subs	r3, #32
 8005204:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	1c5a      	adds	r2, r3, #1
 800520a:	623a      	str	r2, [r7, #32]
 800520c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800520e:	b2d1      	uxtb	r1, r2
 8005210:	687a      	ldr	r2, [r7, #4]
 8005212:	4413      	add	r3, r2
 8005214:	460a      	mov	r2, r1
 8005216:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 800521a:	e763      	b.n	80050e4 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800521c:	bf00      	nop
 800521e:	e006      	b.n	800522e <create_name+0x2da>
 8005220:	08007b7c 	.word	0x08007b7c
 8005224:	08007bd4 	.word	0x08007bd4
 8005228:	08007b88 	.word	0x08007b88
			if (si > di) break;			/* No extension */
 800522c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8005234:	2be5      	cmp	r3, #229	@ 0xe5
 8005236:	d103      	bne.n	8005240 <create_name+0x2ec>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2205      	movs	r2, #5
 800523c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 8005240:	69fb      	ldr	r3, [r7, #28]
 8005242:	2b08      	cmp	r3, #8
 8005244:	d104      	bne.n	8005250 <create_name+0x2fc>
 8005246:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 8005250:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005254:	f003 030c 	and.w	r3, r3, #12
 8005258:	2b0c      	cmp	r3, #12
 800525a:	d005      	beq.n	8005268 <create_name+0x314>
 800525c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005260:	f003 0303 	and.w	r3, r3, #3
 8005264:	2b03      	cmp	r3, #3
 8005266:	d105      	bne.n	8005274 <create_name+0x320>
 8005268:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800526c:	f043 0302 	orr.w	r3, r3, #2
 8005270:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8005274:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005278:	f003 0302 	and.w	r3, r3, #2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d117      	bne.n	80052b0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8005280:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8005284:	f003 0303 	and.w	r3, r3, #3
 8005288:	2b01      	cmp	r3, #1
 800528a:	d105      	bne.n	8005298 <create_name+0x344>
 800528c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005290:	f043 0310 	orr.w	r3, r3, #16
 8005294:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8005298:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800529c:	f003 030c 	and.w	r3, r3, #12
 80052a0:	2b04      	cmp	r3, #4
 80052a2:	d105      	bne.n	80052b0 <create_name+0x35c>
 80052a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80052a8:	f043 0308 	orr.w	r3, r3, #8
 80052ac:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80052b6:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 80052ba:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3728      	adds	r7, #40	@ 0x28
 80052c0:	46bd      	mov	sp, r7
 80052c2:	bd80      	pop	{r7, pc}

080052c4 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b086      	sub	sp, #24
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80052d8:	e002      	b.n	80052e0 <follow_path+0x1c>
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	3301      	adds	r3, #1
 80052de:	603b      	str	r3, [r7, #0]
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b2f      	cmp	r3, #47	@ 0x2f
 80052e6:	d0f8      	beq.n	80052da <follow_path+0x16>
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	781b      	ldrb	r3, [r3, #0]
 80052ec:	2b5c      	cmp	r3, #92	@ 0x5c
 80052ee:	d0f4      	beq.n	80052da <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	2200      	movs	r2, #0
 80052f4:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	781b      	ldrb	r3, [r3, #0]
 80052fa:	2b1f      	cmp	r3, #31
 80052fc:	d80a      	bhi.n	8005314 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	2280      	movs	r2, #128	@ 0x80
 8005302:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8005306:	2100      	movs	r1, #0
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff f8fe 	bl	800450a <dir_sdi>
 800530e:	4603      	mov	r3, r0
 8005310:	75fb      	strb	r3, [r7, #23]
 8005312:	e048      	b.n	80053a6 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005314:	463b      	mov	r3, r7
 8005316:	4619      	mov	r1, r3
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f7ff fe1b 	bl	8004f54 <create_name>
 800531e:	4603      	mov	r3, r0
 8005320:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8005322:	7dfb      	ldrb	r3, [r7, #23]
 8005324:	2b00      	cmp	r3, #0
 8005326:	d139      	bne.n	800539c <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7ff fc5a 	bl	8004be2 <dir_find>
 800532e:	4603      	mov	r3, r0
 8005330:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8005338:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800533a:	7dfb      	ldrb	r3, [r7, #23]
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00a      	beq.n	8005356 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8005340:	7dfb      	ldrb	r3, [r7, #23]
 8005342:	2b04      	cmp	r3, #4
 8005344:	d12c      	bne.n	80053a0 <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8005346:	7afb      	ldrb	r3, [r7, #11]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d127      	bne.n	80053a0 <follow_path+0xdc>
 8005350:	2305      	movs	r3, #5
 8005352:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 8005354:	e024      	b.n	80053a0 <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8005356:	7afb      	ldrb	r3, [r7, #11]
 8005358:	f003 0304 	and.w	r3, r3, #4
 800535c:	2b00      	cmp	r3, #0
 800535e:	d121      	bne.n	80053a4 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	799b      	ldrb	r3, [r3, #6]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b00      	cmp	r3, #0
 800536a:	d102      	bne.n	8005372 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800536c:	2305      	movs	r3, #5
 800536e:	75fb      	strb	r3, [r7, #23]
 8005370:	e019      	b.n	80053a6 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	695b      	ldr	r3, [r3, #20]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	8992      	ldrh	r2, [r2, #12]
 8005380:	fbb3 f0f2 	udiv	r0, r3, r2
 8005384:	fb00 f202 	mul.w	r2, r0, r2
 8005388:	1a9b      	subs	r3, r3, r2
 800538a:	440b      	add	r3, r1
 800538c:	4619      	mov	r1, r3
 800538e:	68f8      	ldr	r0, [r7, #12]
 8005390:	f7ff fa61 	bl	8004856 <ld_clust>
 8005394:	4602      	mov	r2, r0
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800539a:	e7bb      	b.n	8005314 <follow_path+0x50>
			if (res != FR_OK) break;
 800539c:	bf00      	nop
 800539e:	e002      	b.n	80053a6 <follow_path+0xe2>
				break;
 80053a0:	bf00      	nop
 80053a2:	e000      	b.n	80053a6 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80053a4:	bf00      	nop
			}
		}
	}

	return res;
 80053a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3718      	adds	r7, #24
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80053b8:	f04f 33ff 	mov.w	r3, #4294967295
 80053bc:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d031      	beq.n	800542a <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e002      	b.n	80053d4 <get_ldnumber+0x24>
 80053ce:	697b      	ldr	r3, [r7, #20]
 80053d0:	3301      	adds	r3, #1
 80053d2:	617b      	str	r3, [r7, #20]
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b1f      	cmp	r3, #31
 80053da:	d903      	bls.n	80053e4 <get_ldnumber+0x34>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b3a      	cmp	r3, #58	@ 0x3a
 80053e2:	d1f4      	bne.n	80053ce <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80053e4:	697b      	ldr	r3, [r7, #20]
 80053e6:	781b      	ldrb	r3, [r3, #0]
 80053e8:	2b3a      	cmp	r3, #58	@ 0x3a
 80053ea:	d11c      	bne.n	8005426 <get_ldnumber+0x76>
			tp = *path;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	60fa      	str	r2, [r7, #12]
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	3b30      	subs	r3, #48	@ 0x30
 80053fc:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b09      	cmp	r3, #9
 8005402:	d80e      	bhi.n	8005422 <get_ldnumber+0x72>
 8005404:	68fa      	ldr	r2, [r7, #12]
 8005406:	697b      	ldr	r3, [r7, #20]
 8005408:	429a      	cmp	r2, r3
 800540a:	d10a      	bne.n	8005422 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d107      	bne.n	8005422 <get_ldnumber+0x72>
					vol = (int)i;
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	3301      	adds	r3, #1
 800541a:	617b      	str	r3, [r7, #20]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	e002      	b.n	800542c <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8005426:	2300      	movs	r3, #0
 8005428:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800542a:	693b      	ldr	r3, [r7, #16]
}
 800542c:	4618      	mov	r0, r3
 800542e:	371c      	adds	r7, #28
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
 8005440:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2200      	movs	r2, #0
 8005446:	70da      	strb	r2, [r3, #3]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	f04f 32ff 	mov.w	r2, #4294967295
 800544e:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8005450:	6839      	ldr	r1, [r7, #0]
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f7fe fc7a 	bl	8003d4c <move_window>
 8005458:	4603      	mov	r3, r0
 800545a:	2b00      	cmp	r3, #0
 800545c:	d001      	beq.n	8005462 <check_fs+0x2a>
 800545e:	2304      	movs	r3, #4
 8005460:	e038      	b.n	80054d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	3338      	adds	r3, #56	@ 0x38
 8005466:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800546a:	4618      	mov	r0, r3
 800546c:	f7fe f9be 	bl	80037ec <ld_word>
 8005470:	4603      	mov	r3, r0
 8005472:	461a      	mov	r2, r3
 8005474:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005478:	429a      	cmp	r2, r3
 800547a:	d001      	beq.n	8005480 <check_fs+0x48>
 800547c:	2303      	movs	r3, #3
 800547e:	e029      	b.n	80054d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005486:	2be9      	cmp	r3, #233	@ 0xe9
 8005488:	d009      	beq.n	800549e <check_fs+0x66>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8005490:	2beb      	cmp	r3, #235	@ 0xeb
 8005492:	d11e      	bne.n	80054d2 <check_fs+0x9a>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800549a:	2b90      	cmp	r3, #144	@ 0x90
 800549c:	d119      	bne.n	80054d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3338      	adds	r3, #56	@ 0x38
 80054a2:	3336      	adds	r3, #54	@ 0x36
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fe f9b9 	bl	800381c <ld_dword>
 80054aa:	4603      	mov	r3, r0
 80054ac:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80054b0:	4a0a      	ldr	r2, [pc, #40]	@ (80054dc <check_fs+0xa4>)
 80054b2:	4293      	cmp	r3, r2
 80054b4:	d101      	bne.n	80054ba <check_fs+0x82>
 80054b6:	2300      	movs	r3, #0
 80054b8:	e00c      	b.n	80054d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	3338      	adds	r3, #56	@ 0x38
 80054be:	3352      	adds	r3, #82	@ 0x52
 80054c0:	4618      	mov	r0, r3
 80054c2:	f7fe f9ab 	bl	800381c <ld_dword>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a05      	ldr	r2, [pc, #20]	@ (80054e0 <check_fs+0xa8>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <check_fs+0x9a>
 80054ce:	2300      	movs	r3, #0
 80054d0:	e000      	b.n	80054d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80054d2:	2302      	movs	r3, #2
}
 80054d4:	4618      	mov	r0, r3
 80054d6:	3708      	adds	r7, #8
 80054d8:	46bd      	mov	sp, r7
 80054da:	bd80      	pop	{r7, pc}
 80054dc:	00544146 	.word	0x00544146
 80054e0:	33544146 	.word	0x33544146

080054e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b096      	sub	sp, #88	@ 0x58
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	60f8      	str	r0, [r7, #12]
 80054ec:	60b9      	str	r1, [r7, #8]
 80054ee:	4613      	mov	r3, r2
 80054f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80054f2:	68bb      	ldr	r3, [r7, #8]
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f7ff ff59 	bl	80053b0 <get_ldnumber>
 80054fe:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005500:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005502:	2b00      	cmp	r3, #0
 8005504:	da01      	bge.n	800550a <find_volume+0x26>
 8005506:	230b      	movs	r3, #11
 8005508:	e265      	b.n	80059d6 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800550a:	4a9f      	ldr	r2, [pc, #636]	@ (8005788 <find_volume+0x2a4>)
 800550c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800550e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005512:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8005514:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005516:	2b00      	cmp	r3, #0
 8005518:	d101      	bne.n	800551e <find_volume+0x3a>
 800551a:	230c      	movs	r3, #12
 800551c:	e25b      	b.n	80059d6 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005522:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8005524:	79fb      	ldrb	r3, [r7, #7]
 8005526:	f023 0301 	bic.w	r3, r3, #1
 800552a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800552c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800552e:	781b      	ldrb	r3, [r3, #0]
 8005530:	2b00      	cmp	r3, #0
 8005532:	d01a      	beq.n	800556a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8005534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005536:	785b      	ldrb	r3, [r3, #1]
 8005538:	4618      	mov	r0, r3
 800553a:	f7fe f8b7 	bl	80036ac <disk_status>
 800553e:	4603      	mov	r3, r0
 8005540:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8005544:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005548:	f003 0301 	and.w	r3, r3, #1
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10c      	bne.n	800556a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8005550:	79fb      	ldrb	r3, [r7, #7]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d007      	beq.n	8005566 <find_volume+0x82>
 8005556:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	d001      	beq.n	8005566 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8005562:	230a      	movs	r3, #10
 8005564:	e237      	b.n	80059d6 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8005566:	2300      	movs	r3, #0
 8005568:	e235      	b.n	80059d6 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800556a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800556c:	2200      	movs	r2, #0
 800556e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8005570:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005572:	b2da      	uxtb	r2, r3
 8005574:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005576:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800557a:	785b      	ldrb	r3, [r3, #1]
 800557c:	4618      	mov	r0, r3
 800557e:	f7fe f8af 	bl	80036e0 <disk_initialize>
 8005582:	4603      	mov	r3, r0
 8005584:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8005588:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800558c:	f003 0301 	and.w	r3, r3, #1
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005594:	2303      	movs	r3, #3
 8005596:	e21e      	b.n	80059d6 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d007      	beq.n	80055ae <find_volume+0xca>
 800559e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80055a2:	f003 0304 	and.w	r3, r3, #4
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d001      	beq.n	80055ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80055aa:	230a      	movs	r3, #10
 80055ac:	e213      	b.n	80059d6 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 80055ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b0:	7858      	ldrb	r0, [r3, #1]
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	330c      	adds	r3, #12
 80055b6:	461a      	mov	r2, r3
 80055b8:	2102      	movs	r1, #2
 80055ba:	f7fe f8f9 	bl	80037b0 <disk_ioctl>
 80055be:	4603      	mov	r3, r0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d001      	beq.n	80055c8 <find_volume+0xe4>
 80055c4:	2301      	movs	r3, #1
 80055c6:	e206      	b.n	80059d6 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 80055c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055ca:	899b      	ldrh	r3, [r3, #12]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055d0:	d80d      	bhi.n	80055ee <find_volume+0x10a>
 80055d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055d4:	899b      	ldrh	r3, [r3, #12]
 80055d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055da:	d308      	bcc.n	80055ee <find_volume+0x10a>
 80055dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055de:	899b      	ldrh	r3, [r3, #12]
 80055e0:	461a      	mov	r2, r3
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	899b      	ldrh	r3, [r3, #12]
 80055e6:	3b01      	subs	r3, #1
 80055e8:	4013      	ands	r3, r2
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d001      	beq.n	80055f2 <find_volume+0x10e>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e1f1      	b.n	80059d6 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80055f2:	2300      	movs	r3, #0
 80055f4:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80055f6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80055f8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80055fa:	f7ff ff1d 	bl	8005438 <check_fs>
 80055fe:	4603      	mov	r3, r0
 8005600:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8005604:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005608:	2b02      	cmp	r3, #2
 800560a:	d149      	bne.n	80056a0 <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800560c:	2300      	movs	r3, #0
 800560e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005610:	e01e      	b.n	8005650 <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8005612:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005614:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8005618:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800561a:	011b      	lsls	r3, r3, #4
 800561c:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8005620:	4413      	add	r3, r2
 8005622:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8005624:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005626:	3304      	adds	r3, #4
 8005628:	781b      	ldrb	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d006      	beq.n	800563c <find_volume+0x158>
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	3308      	adds	r3, #8
 8005632:	4618      	mov	r0, r3
 8005634:	f7fe f8f2 	bl	800381c <ld_dword>
 8005638:	4602      	mov	r2, r0
 800563a:	e000      	b.n	800563e <find_volume+0x15a>
 800563c:	2200      	movs	r2, #0
 800563e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005640:	009b      	lsls	r3, r3, #2
 8005642:	3358      	adds	r3, #88	@ 0x58
 8005644:	443b      	add	r3, r7
 8005646:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800564a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800564c:	3301      	adds	r3, #1
 800564e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005650:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005652:	2b03      	cmp	r3, #3
 8005654:	d9dd      	bls.n	8005612 <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8005656:	2300      	movs	r3, #0
 8005658:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 800565a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <find_volume+0x182>
 8005660:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005662:	3b01      	subs	r3, #1
 8005664:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8005666:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	3358      	adds	r3, #88	@ 0x58
 800566c:	443b      	add	r3, r7
 800566e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8005672:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8005674:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005676:	2b00      	cmp	r3, #0
 8005678:	d005      	beq.n	8005686 <find_volume+0x1a2>
 800567a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800567c:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800567e:	f7ff fedb 	bl	8005438 <check_fs>
 8005682:	4603      	mov	r3, r0
 8005684:	e000      	b.n	8005688 <find_volume+0x1a4>
 8005686:	2303      	movs	r3, #3
 8005688:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800568c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005690:	2b01      	cmp	r3, #1
 8005692:	d905      	bls.n	80056a0 <find_volume+0x1bc>
 8005694:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005696:	3301      	adds	r3, #1
 8005698:	643b      	str	r3, [r7, #64]	@ 0x40
 800569a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800569c:	2b03      	cmp	r3, #3
 800569e:	d9e2      	bls.n	8005666 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80056a0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d101      	bne.n	80056ac <find_volume+0x1c8>
 80056a8:	2301      	movs	r3, #1
 80056aa:	e194      	b.n	80059d6 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80056ac:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d901      	bls.n	80056b8 <find_volume+0x1d4>
 80056b4:	230d      	movs	r3, #13
 80056b6:	e18e      	b.n	80059d6 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80056b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ba:	3338      	adds	r3, #56	@ 0x38
 80056bc:	330b      	adds	r3, #11
 80056be:	4618      	mov	r0, r3
 80056c0:	f7fe f894 	bl	80037ec <ld_word>
 80056c4:	4603      	mov	r3, r0
 80056c6:	461a      	mov	r2, r3
 80056c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ca:	899b      	ldrh	r3, [r3, #12]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d001      	beq.n	80056d4 <find_volume+0x1f0>
 80056d0:	230d      	movs	r3, #13
 80056d2:	e180      	b.n	80059d6 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80056d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056d6:	3338      	adds	r3, #56	@ 0x38
 80056d8:	3316      	adds	r3, #22
 80056da:	4618      	mov	r0, r3
 80056dc:	f7fe f886 	bl	80037ec <ld_word>
 80056e0:	4603      	mov	r3, r0
 80056e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80056e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d106      	bne.n	80056f8 <find_volume+0x214>
 80056ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056ec:	3338      	adds	r3, #56	@ 0x38
 80056ee:	3324      	adds	r3, #36	@ 0x24
 80056f0:	4618      	mov	r0, r3
 80056f2:	f7fe f893 	bl	800381c <ld_dword>
 80056f6:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 80056f8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80056fc:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80056fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005700:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8005704:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005706:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8005708:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800570a:	789b      	ldrb	r3, [r3, #2]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d005      	beq.n	800571c <find_volume+0x238>
 8005710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005712:	789b      	ldrb	r3, [r3, #2]
 8005714:	2b02      	cmp	r3, #2
 8005716:	d001      	beq.n	800571c <find_volume+0x238>
 8005718:	230d      	movs	r3, #13
 800571a:	e15c      	b.n	80059d6 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800571c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800571e:	789b      	ldrb	r3, [r3, #2]
 8005720:	461a      	mov	r2, r3
 8005722:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005724:	fb02 f303 	mul.w	r3, r2, r3
 8005728:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800572a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800572c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005730:	461a      	mov	r2, r3
 8005732:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005734:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8005736:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005738:	895b      	ldrh	r3, [r3, #10]
 800573a:	2b00      	cmp	r3, #0
 800573c:	d008      	beq.n	8005750 <find_volume+0x26c>
 800573e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005740:	895b      	ldrh	r3, [r3, #10]
 8005742:	461a      	mov	r2, r3
 8005744:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005746:	895b      	ldrh	r3, [r3, #10]
 8005748:	3b01      	subs	r3, #1
 800574a:	4013      	ands	r3, r2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d001      	beq.n	8005754 <find_volume+0x270>
 8005750:	230d      	movs	r3, #13
 8005752:	e140      	b.n	80059d6 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8005754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005756:	3338      	adds	r3, #56	@ 0x38
 8005758:	3311      	adds	r3, #17
 800575a:	4618      	mov	r0, r3
 800575c:	f7fe f846 	bl	80037ec <ld_word>
 8005760:	4603      	mov	r3, r0
 8005762:	461a      	mov	r2, r3
 8005764:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005766:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8005768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576a:	891b      	ldrh	r3, [r3, #8]
 800576c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800576e:	8992      	ldrh	r2, [r2, #12]
 8005770:	0952      	lsrs	r2, r2, #5
 8005772:	b292      	uxth	r2, r2
 8005774:	fbb3 f1f2 	udiv	r1, r3, r2
 8005778:	fb01 f202 	mul.w	r2, r1, r2
 800577c:	1a9b      	subs	r3, r3, r2
 800577e:	b29b      	uxth	r3, r3
 8005780:	2b00      	cmp	r3, #0
 8005782:	d003      	beq.n	800578c <find_volume+0x2a8>
 8005784:	230d      	movs	r3, #13
 8005786:	e126      	b.n	80059d6 <find_volume+0x4f2>
 8005788:	2000010c 	.word	0x2000010c

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800578c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800578e:	3338      	adds	r3, #56	@ 0x38
 8005790:	3313      	adds	r3, #19
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f82a 	bl	80037ec <ld_word>
 8005798:	4603      	mov	r3, r0
 800579a:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800579c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <find_volume+0x2cc>
 80057a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a4:	3338      	adds	r3, #56	@ 0x38
 80057a6:	3320      	adds	r3, #32
 80057a8:	4618      	mov	r0, r3
 80057aa:	f7fe f837 	bl	800381c <ld_dword>
 80057ae:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	3338      	adds	r3, #56	@ 0x38
 80057b4:	330e      	adds	r3, #14
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe f818 	bl	80037ec <ld_word>
 80057bc:	4603      	mov	r3, r0
 80057be:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80057c0:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d101      	bne.n	80057ca <find_volume+0x2e6>
 80057c6:	230d      	movs	r3, #13
 80057c8:	e105      	b.n	80059d6 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80057ca:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 80057cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80057ce:	4413      	add	r3, r2
 80057d0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057d2:	8911      	ldrh	r1, [r2, #8]
 80057d4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057d6:	8992      	ldrh	r2, [r2, #12]
 80057d8:	0952      	lsrs	r2, r2, #5
 80057da:	b292      	uxth	r2, r2
 80057dc:	fbb1 f2f2 	udiv	r2, r1, r2
 80057e0:	b292      	uxth	r2, r2
 80057e2:	4413      	add	r3, r2
 80057e4:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80057e6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	429a      	cmp	r2, r3
 80057ec:	d201      	bcs.n	80057f2 <find_volume+0x30e>
 80057ee:	230d      	movs	r3, #13
 80057f0:	e0f1      	b.n	80059d6 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80057f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f6:	1ad3      	subs	r3, r2, r3
 80057f8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80057fa:	8952      	ldrh	r2, [r2, #10]
 80057fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8005800:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005802:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005804:	2b00      	cmp	r3, #0
 8005806:	d101      	bne.n	800580c <find_volume+0x328>
 8005808:	230d      	movs	r3, #13
 800580a:	e0e4      	b.n	80059d6 <find_volume+0x4f2>
		fmt = FS_FAT32;
 800580c:	2303      	movs	r3, #3
 800580e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8005812:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005814:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8005818:	4293      	cmp	r3, r2
 800581a:	d802      	bhi.n	8005822 <find_volume+0x33e>
 800581c:	2302      	movs	r3, #2
 800581e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8005822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005824:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8005828:	4293      	cmp	r3, r2
 800582a:	d802      	bhi.n	8005832 <find_volume+0x34e>
 800582c:	2301      	movs	r3, #1
 800582e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8005832:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005834:	1c9a      	adds	r2, r3, #2
 8005836:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005838:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 800583a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800583c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800583e:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8005840:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8005842:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005844:	441a      	add	r2, r3
 8005846:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005848:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 800584a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800584c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800584e:	441a      	add	r2, r3
 8005850:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005852:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8005854:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005858:	2b03      	cmp	r3, #3
 800585a:	d11e      	bne.n	800589a <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800585c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800585e:	3338      	adds	r3, #56	@ 0x38
 8005860:	332a      	adds	r3, #42	@ 0x2a
 8005862:	4618      	mov	r0, r3
 8005864:	f7fd ffc2 	bl	80037ec <ld_word>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d001      	beq.n	8005872 <find_volume+0x38e>
 800586e:	230d      	movs	r3, #13
 8005870:	e0b1      	b.n	80059d6 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	891b      	ldrh	r3, [r3, #8]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d001      	beq.n	800587e <find_volume+0x39a>
 800587a:	230d      	movs	r3, #13
 800587c:	e0ab      	b.n	80059d6 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800587e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005880:	3338      	adds	r3, #56	@ 0x38
 8005882:	332c      	adds	r3, #44	@ 0x2c
 8005884:	4618      	mov	r0, r3
 8005886:	f7fd ffc9 	bl	800381c <ld_dword>
 800588a:	4602      	mov	r2, r0
 800588c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800588e:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8005890:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005892:	69db      	ldr	r3, [r3, #28]
 8005894:	009b      	lsls	r3, r3, #2
 8005896:	647b      	str	r3, [r7, #68]	@ 0x44
 8005898:	e01f      	b.n	80058da <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800589a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800589c:	891b      	ldrh	r3, [r3, #8]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d101      	bne.n	80058a6 <find_volume+0x3c2>
 80058a2:	230d      	movs	r3, #13
 80058a4:	e097      	b.n	80059d6 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80058a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058a8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80058aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058ac:	441a      	add	r2, r3
 80058ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058b0:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80058b2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d103      	bne.n	80058c2 <find_volume+0x3de>
 80058ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058bc:	69db      	ldr	r3, [r3, #28]
 80058be:	005b      	lsls	r3, r3, #1
 80058c0:	e00a      	b.n	80058d8 <find_volume+0x3f4>
 80058c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058c4:	69da      	ldr	r2, [r3, #28]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	085a      	lsrs	r2, r3, #1
 80058ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058d0:	69db      	ldr	r3, [r3, #28]
 80058d2:	f003 0301 	and.w	r3, r3, #1
 80058d6:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80058d8:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80058da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058dc:	6a1a      	ldr	r2, [r3, #32]
 80058de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058e0:	899b      	ldrh	r3, [r3, #12]
 80058e2:	4619      	mov	r1, r3
 80058e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80058e6:	440b      	add	r3, r1
 80058e8:	3b01      	subs	r3, #1
 80058ea:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80058ec:	8989      	ldrh	r1, [r1, #12]
 80058ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d201      	bcs.n	80058fa <find_volume+0x416>
 80058f6:	230d      	movs	r3, #13
 80058f8:	e06d      	b.n	80059d6 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80058fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80058fc:	f04f 32ff 	mov.w	r2, #4294967295
 8005900:	619a      	str	r2, [r3, #24]
 8005902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005904:	699a      	ldr	r2, [r3, #24]
 8005906:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005908:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 800590a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800590c:	2280      	movs	r2, #128	@ 0x80
 800590e:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8005910:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8005914:	2b03      	cmp	r3, #3
 8005916:	d149      	bne.n	80059ac <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8005918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800591a:	3338      	adds	r3, #56	@ 0x38
 800591c:	3330      	adds	r3, #48	@ 0x30
 800591e:	4618      	mov	r0, r3
 8005920:	f7fd ff64 	bl	80037ec <ld_word>
 8005924:	4603      	mov	r3, r0
 8005926:	2b01      	cmp	r3, #1
 8005928:	d140      	bne.n	80059ac <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 800592a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800592c:	3301      	adds	r3, #1
 800592e:	4619      	mov	r1, r3
 8005930:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005932:	f7fe fa0b 	bl	8003d4c <move_window>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d137      	bne.n	80059ac <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 800593c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800593e:	2200      	movs	r2, #0
 8005940:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8005942:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005944:	3338      	adds	r3, #56	@ 0x38
 8005946:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 800594a:	4618      	mov	r0, r3
 800594c:	f7fd ff4e 	bl	80037ec <ld_word>
 8005950:	4603      	mov	r3, r0
 8005952:	461a      	mov	r2, r3
 8005954:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8005958:	429a      	cmp	r2, r3
 800595a:	d127      	bne.n	80059ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800595c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595e:	3338      	adds	r3, #56	@ 0x38
 8005960:	4618      	mov	r0, r3
 8005962:	f7fd ff5b 	bl	800381c <ld_dword>
 8005966:	4603      	mov	r3, r0
 8005968:	4a1d      	ldr	r2, [pc, #116]	@ (80059e0 <find_volume+0x4fc>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d11e      	bne.n	80059ac <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800596e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005970:	3338      	adds	r3, #56	@ 0x38
 8005972:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8005976:	4618      	mov	r0, r3
 8005978:	f7fd ff50 	bl	800381c <ld_dword>
 800597c:	4603      	mov	r3, r0
 800597e:	4a19      	ldr	r2, [pc, #100]	@ (80059e4 <find_volume+0x500>)
 8005980:	4293      	cmp	r3, r2
 8005982:	d113      	bne.n	80059ac <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	3338      	adds	r3, #56	@ 0x38
 8005988:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 800598c:	4618      	mov	r0, r3
 800598e:	f7fd ff45 	bl	800381c <ld_dword>
 8005992:	4602      	mov	r2, r0
 8005994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005996:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8005998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800599a:	3338      	adds	r3, #56	@ 0x38
 800599c:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7fd ff3b 	bl	800381c <ld_dword>
 80059a6:	4602      	mov	r2, r0
 80059a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059aa:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80059b2:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80059b4:	4b0c      	ldr	r3, [pc, #48]	@ (80059e8 <find_volume+0x504>)
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	4b0a      	ldr	r3, [pc, #40]	@ (80059e8 <find_volume+0x504>)
 80059be:	801a      	strh	r2, [r3, #0]
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <find_volume+0x504>)
 80059c2:	881a      	ldrh	r2, [r3, #0]
 80059c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c6:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80059c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ca:	4a08      	ldr	r2, [pc, #32]	@ (80059ec <find_volume+0x508>)
 80059cc:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80059ce:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80059d0:	f7fe f954 	bl	8003c7c <clear_lock>
#endif
	return FR_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3758      	adds	r7, #88	@ 0x58
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
 80059de:	bf00      	nop
 80059e0:	41615252 	.word	0x41615252
 80059e4:	61417272 	.word	0x61417272
 80059e8:	20000110 	.word	0x20000110
 80059ec:	20000134 	.word	0x20000134

080059f0 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80059f0:	b580      	push	{r7, lr}
 80059f2:	b084      	sub	sp, #16
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
 80059f8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80059fa:	2309      	movs	r3, #9
 80059fc:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01c      	beq.n	8005a3e <validate+0x4e>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d018      	beq.n	8005a3e <validate+0x4e>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d013      	beq.n	8005a3e <validate+0x4e>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	889a      	ldrh	r2, [r3, #4]
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	88db      	ldrh	r3, [r3, #6]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d10c      	bne.n	8005a3e <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	785b      	ldrb	r3, [r3, #1]
 8005a2a:	4618      	mov	r0, r3
 8005a2c:	f7fd fe3e 	bl	80036ac <disk_status>
 8005a30:	4603      	mov	r3, r0
 8005a32:	f003 0301 	and.w	r3, r3, #1
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d101      	bne.n	8005a3e <validate+0x4e>
			res = FR_OK;
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d102      	bne.n	8005a4a <validate+0x5a>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	e000      	b.n	8005a4c <validate+0x5c>
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	683a      	ldr	r2, [r7, #0]
 8005a4e:	6013      	str	r3, [r2, #0]
	return res;
 8005a50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a52:	4618      	mov	r0, r3
 8005a54:	3710      	adds	r7, #16
 8005a56:	46bd      	mov	sp, r7
 8005a58:	bd80      	pop	{r7, pc}
	...

08005a5c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	b088      	sub	sp, #32
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	60f8      	str	r0, [r7, #12]
 8005a64:	60b9      	str	r1, [r7, #8]
 8005a66:	4613      	mov	r3, r2
 8005a68:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8005a6e:	f107 0310 	add.w	r3, r7, #16
 8005a72:	4618      	mov	r0, r3
 8005a74:	f7ff fc9c 	bl	80053b0 <get_ldnumber>
 8005a78:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	da01      	bge.n	8005a84 <f_mount+0x28>
 8005a80:	230b      	movs	r3, #11
 8005a82:	e02b      	b.n	8005adc <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005a84:	4a17      	ldr	r2, [pc, #92]	@ (8005ae4 <f_mount+0x88>)
 8005a86:	69fb      	ldr	r3, [r7, #28]
 8005a88:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005a8c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8005a8e:	69bb      	ldr	r3, [r7, #24]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d005      	beq.n	8005aa0 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8005a94:	69b8      	ldr	r0, [r7, #24]
 8005a96:	f7fe f8f1 	bl	8003c7c <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005a9a:	69bb      	ldr	r3, [r7, #24]
 8005a9c:	2200      	movs	r2, #0
 8005a9e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d002      	beq.n	8005aac <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	490d      	ldr	r1, [pc, #52]	@ (8005ae4 <f_mount+0x88>)
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d002      	beq.n	8005ac2 <f_mount+0x66>
 8005abc:	79fb      	ldrb	r3, [r7, #7]
 8005abe:	2b01      	cmp	r3, #1
 8005ac0:	d001      	beq.n	8005ac6 <f_mount+0x6a>
 8005ac2:	2300      	movs	r3, #0
 8005ac4:	e00a      	b.n	8005adc <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8005ac6:	f107 010c 	add.w	r1, r7, #12
 8005aca:	f107 0308 	add.w	r3, r7, #8
 8005ace:	2200      	movs	r2, #0
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	f7ff fd07 	bl	80054e4 <find_volume>
 8005ad6:	4603      	mov	r3, r0
 8005ad8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8005ada:	7dfb      	ldrb	r3, [r7, #23]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	2000010c 	.word	0x2000010c

08005ae8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b09a      	sub	sp, #104	@ 0x68
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	60f8      	str	r0, [r7, #12]
 8005af0:	60b9      	str	r1, [r7, #8]
 8005af2:	4613      	mov	r3, r2
 8005af4:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d101      	bne.n	8005b00 <f_open+0x18>
 8005afc:	2309      	movs	r3, #9
 8005afe:	e1b7      	b.n	8005e70 <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005b06:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8005b08:	79fa      	ldrb	r2, [r7, #7]
 8005b0a:	f107 0114 	add.w	r1, r7, #20
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff fce6 	bl	80054e4 <find_volume>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 8005b1e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	f040 819b 	bne.w	8005e5e <f_open+0x376>
		dj.obj.fs = fs;
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8005b2c:	68ba      	ldr	r2, [r7, #8]
 8005b2e:	f107 0318 	add.w	r3, r7, #24
 8005b32:	4611      	mov	r1, r2
 8005b34:	4618      	mov	r0, r3
 8005b36:	f7ff fbc5 	bl	80052c4 <follow_path>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8005b40:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d118      	bne.n	8005b7a <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8005b48:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8005b4c:	b25b      	sxtb	r3, r3
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	da03      	bge.n	8005b5a <f_open+0x72>
				res = FR_INVALID_NAME;
 8005b52:	2306      	movs	r3, #6
 8005b54:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005b58:	e00f      	b.n	8005b7a <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005b5a:	79fb      	ldrb	r3, [r7, #7]
 8005b5c:	2b01      	cmp	r3, #1
 8005b5e:	bf8c      	ite	hi
 8005b60:	2301      	movhi	r3, #1
 8005b62:	2300      	movls	r3, #0
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	461a      	mov	r2, r3
 8005b68:	f107 0318 	add.w	r3, r7, #24
 8005b6c:	4611      	mov	r1, r2
 8005b6e:	4618      	mov	r0, r3
 8005b70:	f7fd ff3c 	bl	80039ec <chk_lock>
 8005b74:	4603      	mov	r3, r0
 8005b76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8005b7a:	79fb      	ldrb	r3, [r7, #7]
 8005b7c:	f003 031c 	and.w	r3, r3, #28
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d07f      	beq.n	8005c84 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8005b84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d017      	beq.n	8005bbc <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8005b8c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005b90:	2b04      	cmp	r3, #4
 8005b92:	d10e      	bne.n	8005bb2 <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8005b94:	f7fd ff86 	bl	8003aa4 <enq_lock>
 8005b98:	4603      	mov	r3, r0
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d006      	beq.n	8005bac <f_open+0xc4>
 8005b9e:	f107 0318 	add.w	r3, r7, #24
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	f7ff f8de 	bl	8004d64 <dir_register>
 8005ba8:	4603      	mov	r3, r0
 8005baa:	e000      	b.n	8005bae <f_open+0xc6>
 8005bac:	2312      	movs	r3, #18
 8005bae:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8005bb2:	79fb      	ldrb	r3, [r7, #7]
 8005bb4:	f043 0308 	orr.w	r3, r3, #8
 8005bb8:	71fb      	strb	r3, [r7, #7]
 8005bba:	e010      	b.n	8005bde <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005bbc:	7fbb      	ldrb	r3, [r7, #30]
 8005bbe:	f003 0311 	and.w	r3, r3, #17
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d003      	beq.n	8005bce <f_open+0xe6>
					res = FR_DENIED;
 8005bc6:	2307      	movs	r3, #7
 8005bc8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005bcc:	e007      	b.n	8005bde <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8005bce:	79fb      	ldrb	r3, [r7, #7]
 8005bd0:	f003 0304 	and.w	r3, r3, #4
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <f_open+0xf6>
 8005bd8:	2308      	movs	r3, #8
 8005bda:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8005bde:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d168      	bne.n	8005cb8 <f_open+0x1d0>
 8005be6:	79fb      	ldrb	r3, [r7, #7]
 8005be8:	f003 0308 	and.w	r3, r3, #8
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d063      	beq.n	8005cb8 <f_open+0x1d0>
				dw = GET_FATTIME();
 8005bf0:	f7fd fcfe 	bl	80035f0 <get_fattime>
 8005bf4:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	330e      	adds	r3, #14
 8005bfa:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	f7fd fe4b 	bl	8003898 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8005c02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c04:	3316      	adds	r3, #22
 8005c06:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f7fd fe45 	bl	8003898 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8005c0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c10:	330b      	adds	r3, #11
 8005c12:	2220      	movs	r2, #32
 8005c14:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8005c16:	697b      	ldr	r3, [r7, #20]
 8005c18:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005c1a:	4611      	mov	r1, r2
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	f7fe fe1a 	bl	8004856 <ld_clust>
 8005c22:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c28:	2200      	movs	r2, #0
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	f7fe fe32 	bl	8004894 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8005c30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c32:	331c      	adds	r3, #28
 8005c34:	2100      	movs	r1, #0
 8005c36:	4618      	mov	r0, r3
 8005c38:	f7fd fe2e 	bl	8003898 <st_dword>
					fs->wflag = 1;
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8005c42:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d037      	beq.n	8005cb8 <f_open+0x1d0>
						dw = fs->winsect;
 8005c48:	697b      	ldr	r3, [r7, #20]
 8005c4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005c4c:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8005c4e:	f107 0318 	add.w	r3, r7, #24
 8005c52:	2200      	movs	r2, #0
 8005c54:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005c56:	4618      	mov	r0, r3
 8005c58:	f7fe fb22 	bl	80042a0 <remove_chain>
 8005c5c:	4603      	mov	r3, r0
 8005c5e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 8005c62:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d126      	bne.n	8005cb8 <f_open+0x1d0>
							res = move_window(fs, dw);
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f7fe f86c 	bl	8003d4c <move_window>
 8005c74:	4603      	mov	r3, r0
 8005c76:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005c7e:	3a01      	subs	r2, #1
 8005c80:	615a      	str	r2, [r3, #20]
 8005c82:	e019      	b.n	8005cb8 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005c84:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005c88:	2b00      	cmp	r3, #0
 8005c8a:	d115      	bne.n	8005cb8 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8005c8c:	7fbb      	ldrb	r3, [r7, #30]
 8005c8e:	f003 0310 	and.w	r3, r3, #16
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d003      	beq.n	8005c9e <f_open+0x1b6>
					res = FR_NO_FILE;
 8005c96:	2304      	movs	r3, #4
 8005c98:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005c9c:	e00c      	b.n	8005cb8 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8005c9e:	79fb      	ldrb	r3, [r7, #7]
 8005ca0:	f003 0302 	and.w	r3, r3, #2
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d007      	beq.n	8005cb8 <f_open+0x1d0>
 8005ca8:	7fbb      	ldrb	r3, [r7, #30]
 8005caa:	f003 0301 	and.w	r3, r3, #1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d002      	beq.n	8005cb8 <f_open+0x1d0>
						res = FR_DENIED;
 8005cb2:	2307      	movs	r3, #7
 8005cb4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8005cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d126      	bne.n	8005d0e <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005cc0:	79fb      	ldrb	r3, [r7, #7]
 8005cc2:	f003 0308 	and.w	r3, r3, #8
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d003      	beq.n	8005cd2 <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8005cca:	79fb      	ldrb	r3, [r7, #7]
 8005ccc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005cd0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005cd2:	697b      	ldr	r3, [r7, #20]
 8005cd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8005cda:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	2b01      	cmp	r3, #1
 8005ce4:	bf8c      	ite	hi
 8005ce6:	2301      	movhi	r3, #1
 8005ce8:	2300      	movls	r3, #0
 8005cea:	b2db      	uxtb	r3, r3
 8005cec:	461a      	mov	r2, r3
 8005cee:	f107 0318 	add.w	r3, r7, #24
 8005cf2:	4611      	mov	r1, r2
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	f7fd fef7 	bl	8003ae8 <inc_lock>
 8005cfa:	4602      	mov	r2, r0
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	691b      	ldr	r3, [r3, #16]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d102      	bne.n	8005d0e <f_open+0x226>
 8005d08:	2302      	movs	r3, #2
 8005d0a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8005d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	f040 80a3 	bne.w	8005e5e <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005d1c:	4611      	mov	r1, r2
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fd99 	bl	8004856 <ld_clust>
 8005d24:	4602      	mov	r2, r0
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d2c:	331c      	adds	r3, #28
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f7fd fd74 	bl	800381c <ld_dword>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8005d40:	697a      	ldr	r2, [r7, #20]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	88da      	ldrh	r2, [r3, #6]
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	79fa      	ldrb	r2, [r7, #7]
 8005d52:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2200      	movs	r2, #0
 8005d5e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	3330      	adds	r3, #48	@ 0x30
 8005d6a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8005d6e:	2100      	movs	r1, #0
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7fd fdde 	bl	8003932 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8005d76:	79fb      	ldrb	r3, [r7, #7]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d06e      	beq.n	8005e5e <f_open+0x376>
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d06a      	beq.n	8005e5e <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	68da      	ldr	r2, [r3, #12]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	895b      	ldrh	r3, [r3, #10]
 8005d94:	461a      	mov	r2, r3
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	899b      	ldrh	r3, [r3, #12]
 8005d9a:	fb02 f303 	mul.w	r3, r2, r3
 8005d9e:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	689b      	ldr	r3, [r3, #8]
 8005da4:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	68db      	ldr	r3, [r3, #12]
 8005daa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005dac:	e016      	b.n	8005ddc <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7fe f887 	bl	8003ec6 <get_fat>
 8005db8:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8005dba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d802      	bhi.n	8005dc6 <f_open+0x2de>
 8005dc0:	2302      	movs	r3, #2
 8005dc2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005dc6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dcc:	d102      	bne.n	8005dd4 <f_open+0x2ec>
 8005dce:	2301      	movs	r3, #1
 8005dd0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005dd4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005dd8:	1ad3      	subs	r3, r2, r3
 8005dda:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005ddc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d103      	bne.n	8005dec <f_open+0x304>
 8005de4:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005de6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d8e0      	bhi.n	8005dae <f_open+0x2c6>
				}
				fp->clust = clst;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005df0:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8005df2:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d131      	bne.n	8005e5e <f_open+0x376>
 8005dfa:	697b      	ldr	r3, [r7, #20]
 8005dfc:	899b      	ldrh	r3, [r3, #12]
 8005dfe:	461a      	mov	r2, r3
 8005e00:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e02:	fbb3 f1f2 	udiv	r1, r3, r2
 8005e06:	fb01 f202 	mul.w	r2, r1, r2
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d026      	beq.n	8005e5e <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8005e14:	4618      	mov	r0, r3
 8005e16:	f7fe f837 	bl	8003e88 <clust2sect>
 8005e1a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8005e1c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d103      	bne.n	8005e2a <f_open+0x342>
						res = FR_INT_ERR;
 8005e22:	2302      	movs	r3, #2
 8005e24:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8005e28:	e019      	b.n	8005e5e <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8005e2a:	697b      	ldr	r3, [r7, #20]
 8005e2c:	899b      	ldrh	r3, [r3, #12]
 8005e2e:	461a      	mov	r2, r3
 8005e30:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005e32:	fbb3 f2f2 	udiv	r2, r3, r2
 8005e36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005e38:	441a      	add	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8005e3e:	697b      	ldr	r3, [r7, #20]
 8005e40:	7858      	ldrb	r0, [r3, #1]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1a      	ldr	r2, [r3, #32]
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f7fd fc6f 	bl	8003730 <disk_read>
 8005e52:	4603      	mov	r3, r0
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d002      	beq.n	8005e5e <f_open+0x376>
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8005e5e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d002      	beq.n	8005e6c <f_open+0x384>
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8005e6c:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8005e70:	4618      	mov	r0, r3
 8005e72:	3768      	adds	r7, #104	@ 0x68
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}

08005e78 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b08e      	sub	sp, #56	@ 0x38
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	60f8      	str	r0, [r7, #12]
 8005e80:	60b9      	str	r1, [r7, #8]
 8005e82:	607a      	str	r2, [r7, #4]
 8005e84:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	627b      	str	r3, [r7, #36]	@ 0x24


	*br = 0;	/* Clear read byte counter */
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	f107 0214 	add.w	r2, r7, #20
 8005e96:	4611      	mov	r1, r2
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fda9 	bl	80059f0 <validate>
 8005e9e:	4603      	mov	r3, r0
 8005ea0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8005ea4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d107      	bne.n	8005ebc <f_read+0x44>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	7d5b      	ldrb	r3, [r3, #21]
 8005eb0:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8005eb4:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <f_read+0x4a>
 8005ebc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8005ec0:	e135      	b.n	800612e <f_read+0x2b6>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	7d1b      	ldrb	r3, [r3, #20]
 8005ec6:	f003 0301 	and.w	r3, r3, #1
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <f_read+0x5a>
 8005ece:	2307      	movs	r3, #7
 8005ed0:	e12d      	b.n	800612e <f_read+0x2b6>
	remain = fp->obj.objsize - fp->fptr;
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	68da      	ldr	r2, [r3, #12]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	699b      	ldr	r3, [r3, #24]
 8005eda:	1ad3      	subs	r3, r2, r3
 8005edc:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	429a      	cmp	r2, r3
 8005ee4:	f240 811e 	bls.w	8006124 <f_read+0x2ac>
 8005ee8:	6a3b      	ldr	r3, [r7, #32]
 8005eea:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005eec:	e11a      	b.n	8006124 <f_read+0x2ac>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	8992      	ldrh	r2, [r2, #12]
 8005ef6:	fbb3 f1f2 	udiv	r1, r3, r2
 8005efa:	fb01 f202 	mul.w	r2, r1, r2
 8005efe:	1a9b      	subs	r3, r3, r2
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	f040 80d5 	bne.w	80060b0 <f_read+0x238>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	699b      	ldr	r3, [r3, #24]
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	8992      	ldrh	r2, [r2, #12]
 8005f0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005f12:	697a      	ldr	r2, [r7, #20]
 8005f14:	8952      	ldrh	r2, [r2, #10]
 8005f16:	3a01      	subs	r2, #1
 8005f18:	4013      	ands	r3, r2
 8005f1a:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d12f      	bne.n	8005f82 <f_read+0x10a>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	699b      	ldr	r3, [r3, #24]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d103      	bne.n	8005f32 <f_read+0xba>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8005f30:	e013      	b.n	8005f5a <f_read+0xe2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d007      	beq.n	8005f4a <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	699b      	ldr	r3, [r3, #24]
 8005f3e:	4619      	mov	r1, r3
 8005f40:	68f8      	ldr	r0, [r7, #12]
 8005f42:	f7fe faaa 	bl	800449a <clmt_clust>
 8005f46:	6338      	str	r0, [r7, #48]	@ 0x30
 8005f48:	e007      	b.n	8005f5a <f_read+0xe2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	69db      	ldr	r3, [r3, #28]
 8005f50:	4619      	mov	r1, r3
 8005f52:	4610      	mov	r0, r2
 8005f54:	f7fd ffb7 	bl	8003ec6 <get_fat>
 8005f58:	6338      	str	r0, [r7, #48]	@ 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8005f5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d804      	bhi.n	8005f6a <f_read+0xf2>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2202      	movs	r2, #2
 8005f64:	755a      	strb	r2, [r3, #21]
 8005f66:	2302      	movs	r3, #2
 8005f68:	e0e1      	b.n	800612e <f_read+0x2b6>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8005f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f70:	d104      	bne.n	8005f7c <f_read+0x104>
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	2201      	movs	r2, #1
 8005f76:	755a      	strb	r2, [r3, #21]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	e0d8      	b.n	800612e <f_read+0x2b6>
				fp->clust = clst;				/* Update current cluster */
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f80:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8005f82:	697a      	ldr	r2, [r7, #20]
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	69db      	ldr	r3, [r3, #28]
 8005f88:	4619      	mov	r1, r3
 8005f8a:	4610      	mov	r0, r2
 8005f8c:	f7fd ff7c 	bl	8003e88 <clust2sect>
 8005f90:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8005f92:	69bb      	ldr	r3, [r7, #24]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d104      	bne.n	8005fa2 <f_read+0x12a>
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	2202      	movs	r2, #2
 8005f9c:	755a      	strb	r2, [r3, #21]
 8005f9e:	2302      	movs	r3, #2
 8005fa0:	e0c5      	b.n	800612e <f_read+0x2b6>
			sect += csect;
 8005fa2:	69ba      	ldr	r2, [r7, #24]
 8005fa4:	69fb      	ldr	r3, [r7, #28]
 8005fa6:	4413      	add	r3, r2
 8005fa8:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	899b      	ldrh	r3, [r3, #12]
 8005fae:	461a      	mov	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	fbb3 f3f2 	udiv	r3, r3, r2
 8005fb6:	62bb      	str	r3, [r7, #40]	@ 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005fb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d041      	beq.n	8006042 <f_read+0x1ca>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005fbe:	69fa      	ldr	r2, [r7, #28]
 8005fc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fc2:	4413      	add	r3, r2
 8005fc4:	697a      	ldr	r2, [r7, #20]
 8005fc6:	8952      	ldrh	r2, [r2, #10]
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d905      	bls.n	8005fd8 <f_read+0x160>
					cc = fs->csize - csect;
 8005fcc:	697b      	ldr	r3, [r7, #20]
 8005fce:	895b      	ldrh	r3, [r3, #10]
 8005fd0:	461a      	mov	r2, r3
 8005fd2:	69fb      	ldr	r3, [r7, #28]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	7858      	ldrb	r0, [r3, #1]
 8005fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005fe2:	f7fd fba5 	bl	8003730 <disk_read>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d004      	beq.n	8005ff6 <f_read+0x17e>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	755a      	strb	r2, [r3, #21]
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e09b      	b.n	800612e <f_read+0x2b6>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	7d1b      	ldrb	r3, [r3, #20]
 8005ffa:	b25b      	sxtb	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da18      	bge.n	8006032 <f_read+0x1ba>
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	6a1a      	ldr	r2, [r3, #32]
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	1ad3      	subs	r3, r2, r3
 8006008:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800600a:	429a      	cmp	r2, r3
 800600c:	d911      	bls.n	8006032 <f_read+0x1ba>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6a1a      	ldr	r2, [r3, #32]
 8006012:	69bb      	ldr	r3, [r7, #24]
 8006014:	1ad3      	subs	r3, r2, r3
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	8992      	ldrh	r2, [r2, #12]
 800601a:	fb02 f303 	mul.w	r3, r2, r3
 800601e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006020:	18d0      	adds	r0, r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006028:	697b      	ldr	r3, [r7, #20]
 800602a:	899b      	ldrh	r3, [r3, #12]
 800602c:	461a      	mov	r2, r3
 800602e:	f7fd fc5f 	bl	80038f0 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	899b      	ldrh	r3, [r3, #12]
 8006036:	461a      	mov	r2, r3
 8006038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800603a:	fb02 f303 	mul.w	r3, r2, r3
 800603e:	62fb      	str	r3, [r7, #44]	@ 0x2c
				continue;
 8006040:	e05c      	b.n	80060fc <f_read+0x284>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	6a1b      	ldr	r3, [r3, #32]
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	429a      	cmp	r2, r3
 800604a:	d02e      	beq.n	80060aa <f_read+0x232>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	7d1b      	ldrb	r3, [r3, #20]
 8006050:	b25b      	sxtb	r3, r3
 8006052:	2b00      	cmp	r3, #0
 8006054:	da18      	bge.n	8006088 <f_read+0x210>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	7858      	ldrb	r0, [r3, #1]
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6a1a      	ldr	r2, [r3, #32]
 8006064:	2301      	movs	r3, #1
 8006066:	f7fd fb83 	bl	8003770 <disk_write>
 800606a:	4603      	mov	r3, r0
 800606c:	2b00      	cmp	r3, #0
 800606e:	d004      	beq.n	800607a <f_read+0x202>
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	2201      	movs	r2, #1
 8006074:	755a      	strb	r2, [r3, #21]
 8006076:	2301      	movs	r3, #1
 8006078:	e059      	b.n	800612e <f_read+0x2b6>
					fp->flag &= (BYTE)~FA_DIRTY;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	7d1b      	ldrb	r3, [r3, #20]
 800607e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006082:	b2da      	uxtb	r2, r3
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8006088:	697b      	ldr	r3, [r7, #20]
 800608a:	7858      	ldrb	r0, [r3, #1]
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006092:	2301      	movs	r3, #1
 8006094:	69ba      	ldr	r2, [r7, #24]
 8006096:	f7fd fb4b 	bl	8003730 <disk_read>
 800609a:	4603      	mov	r3, r0
 800609c:	2b00      	cmp	r3, #0
 800609e:	d004      	beq.n	80060aa <f_read+0x232>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2201      	movs	r2, #1
 80060a4:	755a      	strb	r2, [r3, #21]
 80060a6:	2301      	movs	r3, #1
 80060a8:	e041      	b.n	800612e <f_read+0x2b6>
			}
#endif
			fp->sect = sect;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	69ba      	ldr	r2, [r7, #24]
 80060ae:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	899b      	ldrh	r3, [r3, #12]
 80060b4:	4618      	mov	r0, r3
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	699b      	ldr	r3, [r3, #24]
 80060ba:	697a      	ldr	r2, [r7, #20]
 80060bc:	8992      	ldrh	r2, [r2, #12]
 80060be:	fbb3 f1f2 	udiv	r1, r3, r2
 80060c2:	fb01 f202 	mul.w	r2, r1, r2
 80060c6:	1a9b      	subs	r3, r3, r2
 80060c8:	1ac3      	subs	r3, r0, r3
 80060ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 80060cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	429a      	cmp	r2, r3
 80060d2:	d901      	bls.n	80060d8 <f_read+0x260>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	699b      	ldr	r3, [r3, #24]
 80060e2:	697a      	ldr	r2, [r7, #20]
 80060e4:	8992      	ldrh	r2, [r2, #12]
 80060e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80060ea:	fb00 f202 	mul.w	r2, r0, r2
 80060ee:	1a9b      	subs	r3, r3, r2
 80060f0:	440b      	add	r3, r1
 80060f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80060f4:	4619      	mov	r1, r3
 80060f6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80060f8:	f7fd fbfa 	bl	80038f0 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 80060fc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006100:	4413      	add	r3, r2
 8006102:	627b      	str	r3, [r7, #36]	@ 0x24
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	699a      	ldr	r2, [r3, #24]
 8006108:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800610a:	441a      	add	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	619a      	str	r2, [r3, #24]
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006116:	441a      	add	r2, r3
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	601a      	str	r2, [r3, #0]
 800611c:	687a      	ldr	r2, [r7, #4]
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	1ad3      	subs	r3, r2, r3
 8006122:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b00      	cmp	r3, #0
 8006128:	f47f aee1 	bne.w	8005eee <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3738      	adds	r7, #56	@ 0x38
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}

08006136 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8006136:	b580      	push	{r7, lr}
 8006138:	b08c      	sub	sp, #48	@ 0x30
 800613a:	af00      	add	r7, sp, #0
 800613c:	60f8      	str	r0, [r7, #12]
 800613e:	60b9      	str	r1, [r7, #8]
 8006140:	607a      	str	r2, [r7, #4]
 8006142:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	f107 0210 	add.w	r2, r7, #16
 8006154:	4611      	mov	r1, r2
 8006156:	4618      	mov	r0, r3
 8006158:	f7ff fc4a 	bl	80059f0 <validate>
 800615c:	4603      	mov	r3, r0
 800615e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8006162:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006166:	2b00      	cmp	r3, #0
 8006168:	d107      	bne.n	800617a <f_write+0x44>
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	7d5b      	ldrb	r3, [r3, #21]
 800616e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8006172:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8006176:	2b00      	cmp	r3, #0
 8006178:	d002      	beq.n	8006180 <f_write+0x4a>
 800617a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800617e:	e16a      	b.n	8006456 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	7d1b      	ldrb	r3, [r3, #20]
 8006184:	f003 0302 	and.w	r3, r3, #2
 8006188:	2b00      	cmp	r3, #0
 800618a:	d101      	bne.n	8006190 <f_write+0x5a>
 800618c:	2307      	movs	r3, #7
 800618e:	e162      	b.n	8006456 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	699a      	ldr	r2, [r3, #24]
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	441a      	add	r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	699b      	ldr	r3, [r3, #24]
 800619c:	429a      	cmp	r2, r3
 800619e:	f080 814c 	bcs.w	800643a <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	699b      	ldr	r3, [r3, #24]
 80061a6:	43db      	mvns	r3, r3
 80061a8:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 80061aa:	e146      	b.n	800643a <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	693a      	ldr	r2, [r7, #16]
 80061b2:	8992      	ldrh	r2, [r2, #12]
 80061b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80061b8:	fb01 f202 	mul.w	r2, r1, r2
 80061bc:	1a9b      	subs	r3, r3, r2
 80061be:	2b00      	cmp	r3, #0
 80061c0:	f040 80f1 	bne.w	80063a6 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	699b      	ldr	r3, [r3, #24]
 80061c8:	693a      	ldr	r2, [r7, #16]
 80061ca:	8992      	ldrh	r2, [r2, #12]
 80061cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80061d0:	693a      	ldr	r2, [r7, #16]
 80061d2:	8952      	ldrh	r2, [r2, #10]
 80061d4:	3a01      	subs	r2, #1
 80061d6:	4013      	ands	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 80061da:	69bb      	ldr	r3, [r7, #24]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d143      	bne.n	8006268 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	699b      	ldr	r3, [r3, #24]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10c      	bne.n	8006202 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	689b      	ldr	r3, [r3, #8]
 80061ec:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80061ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d11a      	bne.n	800622a <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2100      	movs	r1, #0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe f8b6 	bl	800436a <create_chain>
 80061fe:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006200:	e013      	b.n	800622a <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d007      	beq.n	800621a <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	699b      	ldr	r3, [r3, #24]
 800620e:	4619      	mov	r1, r3
 8006210:	68f8      	ldr	r0, [r7, #12]
 8006212:	f7fe f942 	bl	800449a <clmt_clust>
 8006216:	62b8      	str	r0, [r7, #40]	@ 0x28
 8006218:	e007      	b.n	800622a <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800621a:	68fa      	ldr	r2, [r7, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	69db      	ldr	r3, [r3, #28]
 8006220:	4619      	mov	r1, r3
 8006222:	4610      	mov	r0, r2
 8006224:	f7fe f8a1 	bl	800436a <create_chain>
 8006228:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 800622a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 8109 	beq.w	8006444 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 8006232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006234:	2b01      	cmp	r3, #1
 8006236:	d104      	bne.n	8006242 <f_write+0x10c>
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	2202      	movs	r2, #2
 800623c:	755a      	strb	r2, [r3, #21]
 800623e:	2302      	movs	r3, #2
 8006240:	e109      	b.n	8006456 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8006242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006248:	d104      	bne.n	8006254 <f_write+0x11e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	755a      	strb	r2, [r3, #21]
 8006250:	2301      	movs	r3, #1
 8006252:	e100      	b.n	8006456 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006258:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d102      	bne.n	8006268 <f_write+0x132>
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006266:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	7d1b      	ldrb	r3, [r3, #20]
 800626c:	b25b      	sxtb	r3, r3
 800626e:	2b00      	cmp	r3, #0
 8006270:	da18      	bge.n	80062a4 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	7858      	ldrb	r0, [r3, #1]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	6a1a      	ldr	r2, [r3, #32]
 8006280:	2301      	movs	r3, #1
 8006282:	f7fd fa75 	bl	8003770 <disk_write>
 8006286:	4603      	mov	r3, r0
 8006288:	2b00      	cmp	r3, #0
 800628a:	d004      	beq.n	8006296 <f_write+0x160>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2201      	movs	r2, #1
 8006290:	755a      	strb	r2, [r3, #21]
 8006292:	2301      	movs	r3, #1
 8006294:	e0df      	b.n	8006456 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	7d1b      	ldrb	r3, [r3, #20]
 800629a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800629e:	b2da      	uxtb	r2, r3
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	69db      	ldr	r3, [r3, #28]
 80062aa:	4619      	mov	r1, r3
 80062ac:	4610      	mov	r0, r2
 80062ae:	f7fd fdeb 	bl	8003e88 <clust2sect>
 80062b2:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 80062b4:	697b      	ldr	r3, [r7, #20]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d104      	bne.n	80062c4 <f_write+0x18e>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	755a      	strb	r2, [r3, #21]
 80062c0:	2302      	movs	r3, #2
 80062c2:	e0c8      	b.n	8006456 <f_write+0x320>
			sect += csect;
 80062c4:	697a      	ldr	r2, [r7, #20]
 80062c6:	69bb      	ldr	r3, [r7, #24]
 80062c8:	4413      	add	r3, r2
 80062ca:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	899b      	ldrh	r3, [r3, #12]
 80062d0:	461a      	mov	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80062d8:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 80062da:	6a3b      	ldr	r3, [r7, #32]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d043      	beq.n	8006368 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 80062e0:	69ba      	ldr	r2, [r7, #24]
 80062e2:	6a3b      	ldr	r3, [r7, #32]
 80062e4:	4413      	add	r3, r2
 80062e6:	693a      	ldr	r2, [r7, #16]
 80062e8:	8952      	ldrh	r2, [r2, #10]
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d905      	bls.n	80062fa <f_write+0x1c4>
					cc = fs->csize - csect;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	895b      	ldrh	r3, [r3, #10]
 80062f2:	461a      	mov	r2, r3
 80062f4:	69bb      	ldr	r3, [r7, #24]
 80062f6:	1ad3      	subs	r3, r2, r3
 80062f8:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	7858      	ldrb	r0, [r3, #1]
 80062fe:	6a3b      	ldr	r3, [r7, #32]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	69f9      	ldr	r1, [r7, #28]
 8006304:	f7fd fa34 	bl	8003770 <disk_write>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d004      	beq.n	8006318 <f_write+0x1e2>
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2201      	movs	r2, #1
 8006312:	755a      	strb	r2, [r3, #21]
 8006314:	2301      	movs	r3, #1
 8006316:	e09e      	b.n	8006456 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	6a1a      	ldr	r2, [r3, #32]
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	1ad3      	subs	r3, r2, r3
 8006320:	6a3a      	ldr	r2, [r7, #32]
 8006322:	429a      	cmp	r2, r3
 8006324:	d918      	bls.n	8006358 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1a      	ldr	r2, [r3, #32]
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	8992      	ldrh	r2, [r2, #12]
 8006338:	fb02 f303 	mul.w	r3, r2, r3
 800633c:	69fa      	ldr	r2, [r7, #28]
 800633e:	18d1      	adds	r1, r2, r3
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	899b      	ldrh	r3, [r3, #12]
 8006344:	461a      	mov	r2, r3
 8006346:	f7fd fad3 	bl	80038f0 <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	7d1b      	ldrb	r3, [r3, #20]
 800634e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006352:	b2da      	uxtb	r2, r3
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	899b      	ldrh	r3, [r3, #12]
 800635c:	461a      	mov	r2, r3
 800635e:	6a3b      	ldr	r3, [r7, #32]
 8006360:	fb02 f303 	mul.w	r3, r2, r3
 8006364:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8006366:	e04b      	b.n	8006400 <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	6a1b      	ldr	r3, [r3, #32]
 800636c:	697a      	ldr	r2, [r7, #20]
 800636e:	429a      	cmp	r2, r3
 8006370:	d016      	beq.n	80063a0 <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	699a      	ldr	r2, [r3, #24]
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800637a:	429a      	cmp	r2, r3
 800637c:	d210      	bcs.n	80063a0 <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	7858      	ldrb	r0, [r3, #1]
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8006388:	2301      	movs	r3, #1
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	f7fd f9d0 	bl	8003730 <disk_read>
 8006390:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8006392:	2b00      	cmp	r3, #0
 8006394:	d004      	beq.n	80063a0 <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	2201      	movs	r2, #1
 800639a:	755a      	strb	r2, [r3, #21]
 800639c:	2301      	movs	r3, #1
 800639e:	e05a      	b.n	8006456 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	899b      	ldrh	r3, [r3, #12]
 80063aa:	4618      	mov	r0, r3
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	8992      	ldrh	r2, [r2, #12]
 80063b4:	fbb3 f1f2 	udiv	r1, r3, r2
 80063b8:	fb01 f202 	mul.w	r2, r1, r2
 80063bc:	1a9b      	subs	r3, r3, r2
 80063be:	1ac3      	subs	r3, r0, r3
 80063c0:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 80063c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	429a      	cmp	r2, r3
 80063c8:	d901      	bls.n	80063ce <f_write+0x298>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	699b      	ldr	r3, [r3, #24]
 80063d8:	693a      	ldr	r2, [r7, #16]
 80063da:	8992      	ldrh	r2, [r2, #12]
 80063dc:	fbb3 f0f2 	udiv	r0, r3, r2
 80063e0:	fb00 f202 	mul.w	r2, r0, r2
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	440b      	add	r3, r1
 80063e8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80063ea:	69f9      	ldr	r1, [r7, #28]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f7fd fa7f 	bl	80038f0 <mem_cpy>
		fp->flag |= FA_DIRTY;
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	7d1b      	ldrb	r3, [r3, #20]
 80063f6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80063fa:	b2da      	uxtb	r2, r3
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 8006400:	69fa      	ldr	r2, [r7, #28]
 8006402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006404:	4413      	add	r3, r2
 8006406:	61fb      	str	r3, [r7, #28]
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800640e:	441a      	add	r2, r3
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	619a      	str	r2, [r3, #24]
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	68da      	ldr	r2, [r3, #12]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	699b      	ldr	r3, [r3, #24]
 800641c:	429a      	cmp	r2, r3
 800641e:	bf38      	it	cc
 8006420:	461a      	movcc	r2, r3
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	60da      	str	r2, [r3, #12]
 8006426:	683b      	ldr	r3, [r7, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800642c:	441a      	add	r2, r3
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	601a      	str	r2, [r3, #0]
 8006432:	687a      	ldr	r2, [r7, #4]
 8006434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006436:	1ad3      	subs	r3, r2, r3
 8006438:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	f47f aeb5 	bne.w	80061ac <f_write+0x76>
 8006442:	e000      	b.n	8006446 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006444:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	7d1b      	ldrb	r3, [r3, #20]
 800644a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800644e:	b2da      	uxtb	r2, r3
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8006454:	2300      	movs	r3, #0
}
 8006456:	4618      	mov	r0, r3
 8006458:	3730      	adds	r7, #48	@ 0x30
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b086      	sub	sp, #24
 8006462:	af00      	add	r7, sp, #0
 8006464:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f107 0208 	add.w	r2, r7, #8
 800646c:	4611      	mov	r1, r2
 800646e:	4618      	mov	r0, r3
 8006470:	f7ff fabe 	bl	80059f0 <validate>
 8006474:	4603      	mov	r3, r0
 8006476:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006478:	7dfb      	ldrb	r3, [r7, #23]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d168      	bne.n	8006550 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	7d1b      	ldrb	r3, [r3, #20]
 8006482:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006486:	2b00      	cmp	r3, #0
 8006488:	d062      	beq.n	8006550 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	7d1b      	ldrb	r3, [r3, #20]
 800648e:	b25b      	sxtb	r3, r3
 8006490:	2b00      	cmp	r3, #0
 8006492:	da15      	bge.n	80064c0 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	7858      	ldrb	r0, [r3, #1]
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6a1a      	ldr	r2, [r3, #32]
 80064a2:	2301      	movs	r3, #1
 80064a4:	f7fd f964 	bl	8003770 <disk_write>
 80064a8:	4603      	mov	r3, r0
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d001      	beq.n	80064b2 <f_sync+0x54>
 80064ae:	2301      	movs	r3, #1
 80064b0:	e04f      	b.n	8006552 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	7d1b      	ldrb	r3, [r3, #20]
 80064b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80064ba:	b2da      	uxtb	r2, r3
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 80064c0:	f7fd f896 	bl	80035f0 <get_fattime>
 80064c4:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 80064c6:	68ba      	ldr	r2, [r7, #8]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	4619      	mov	r1, r3
 80064ce:	4610      	mov	r0, r2
 80064d0:	f7fd fc3c 	bl	8003d4c <move_window>
 80064d4:	4603      	mov	r3, r0
 80064d6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 80064d8:	7dfb      	ldrb	r3, [r7, #23]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d138      	bne.n	8006550 <f_sync+0xf2>
					dir = fp->dir_ptr;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064e2:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	330b      	adds	r3, #11
 80064e8:	781a      	ldrb	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	330b      	adds	r3, #11
 80064ee:	f042 0220 	orr.w	r2, r2, #32
 80064f2:	b2d2      	uxtb	r2, r2
 80064f4:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	6818      	ldr	r0, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	461a      	mov	r2, r3
 8006500:	68f9      	ldr	r1, [r7, #12]
 8006502:	f7fe f9c7 	bl	8004894 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f103 021c 	add.w	r2, r3, #28
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	4619      	mov	r1, r3
 8006512:	4610      	mov	r0, r2
 8006514:	f7fd f9c0 	bl	8003898 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3316      	adds	r3, #22
 800651c:	6939      	ldr	r1, [r7, #16]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fd f9ba 	bl	8003898 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	3312      	adds	r3, #18
 8006528:	2100      	movs	r1, #0
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd f999 	bl	8003862 <st_word>
					fs->wflag = 1;
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	2201      	movs	r2, #1
 8006534:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd fc35 	bl	8003da8 <sync_fs>
 800653e:	4603      	mov	r3, r0
 8006540:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	7d1b      	ldrb	r3, [r3, #20]
 8006546:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800654a:	b2da      	uxtb	r2, r3
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8006550:	7dfb      	ldrb	r3, [r7, #23]
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}

0800655a <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800655a:	b580      	push	{r7, lr}
 800655c:	b084      	sub	sp, #16
 800655e:	af00      	add	r7, sp, #0
 8006560:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f7ff ff7b 	bl	800645e <f_sync>
 8006568:	4603      	mov	r3, r0
 800656a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d118      	bne.n	80065a4 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f107 0208 	add.w	r2, r7, #8
 8006578:	4611      	mov	r1, r2
 800657a:	4618      	mov	r0, r3
 800657c:	f7ff fa38 	bl	80059f0 <validate>
 8006580:	4603      	mov	r3, r0
 8006582:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006584:	7bfb      	ldrb	r3, [r7, #15]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d10c      	bne.n	80065a4 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	4618      	mov	r0, r3
 8006590:	f7fd fb38 	bl	8003c04 <dec_lock>
 8006594:	4603      	mov	r3, r0
 8006596:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8006598:	7bfb      	ldrb	r3, [r7, #15]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d102      	bne.n	80065a4 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	2200      	movs	r2, #0
 80065a2:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 80065a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3710      	adds	r7, #16
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b092      	sub	sp, #72	@ 0x48
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 80065ba:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80065be:	f107 030c 	add.w	r3, r7, #12
 80065c2:	2200      	movs	r2, #0
 80065c4:	4618      	mov	r0, r3
 80065c6:	f7fe ff8d 	bl	80054e4 <find_volume>
 80065ca:	4603      	mov	r3, r0
 80065cc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 80065d0:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	f040 8099 	bne.w	800670c <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 80065da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 80065e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065e6:	69db      	ldr	r3, [r3, #28]
 80065e8:	3b02      	subs	r3, #2
 80065ea:	429a      	cmp	r2, r3
 80065ec:	d804      	bhi.n	80065f8 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80065ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065f0:	699a      	ldr	r2, [r3, #24]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	601a      	str	r2, [r3, #0]
 80065f6:	e089      	b.n	800670c <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80065f8:	2300      	movs	r3, #0
 80065fa:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80065fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80065fe:	781b      	ldrb	r3, [r3, #0]
 8006600:	2b01      	cmp	r3, #1
 8006602:	d128      	bne.n	8006656 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 8006604:	2302      	movs	r3, #2
 8006606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800660a:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 800660c:	f107 0314 	add.w	r3, r7, #20
 8006610:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006612:	4618      	mov	r0, r3
 8006614:	f7fd fc57 	bl	8003ec6 <get_fat>
 8006618:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 800661a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800661c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006620:	d103      	bne.n	800662a <f_getfree+0x7c>
 8006622:	2301      	movs	r3, #1
 8006624:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006628:	e063      	b.n	80066f2 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 800662a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d103      	bne.n	8006638 <f_getfree+0x8a>
 8006630:	2302      	movs	r3, #2
 8006632:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8006636:	e05c      	b.n	80066f2 <f_getfree+0x144>
					if (stat == 0) nfree++;
 8006638:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800663a:	2b00      	cmp	r3, #0
 800663c:	d102      	bne.n	8006644 <f_getfree+0x96>
 800663e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006640:	3301      	adds	r3, #1
 8006642:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8006644:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006646:	3301      	adds	r3, #1
 8006648:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800664a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800664c:	69db      	ldr	r3, [r3, #28]
 800664e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006650:	429a      	cmp	r2, r3
 8006652:	d3db      	bcc.n	800660c <f_getfree+0x5e>
 8006654:	e04d      	b.n	80066f2 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8006656:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006658:	69db      	ldr	r3, [r3, #28]
 800665a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800665c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800665e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006660:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8006662:	2300      	movs	r3, #0
 8006664:	637b      	str	r3, [r7, #52]	@ 0x34
 8006666:	2300      	movs	r3, #0
 8006668:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 800666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800666c:	2b00      	cmp	r3, #0
 800666e:	d113      	bne.n	8006698 <f_getfree+0xea>
							res = move_window(fs, sect++);
 8006670:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006674:	1c5a      	adds	r2, r3, #1
 8006676:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006678:	4619      	mov	r1, r3
 800667a:	f7fd fb67 	bl	8003d4c <move_window>
 800667e:	4603      	mov	r3, r0
 8006680:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8006684:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8006688:	2b00      	cmp	r3, #0
 800668a:	d131      	bne.n	80066f0 <f_getfree+0x142>
							p = fs->win;
 800668c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800668e:	3338      	adds	r3, #56	@ 0x38
 8006690:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8006692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006694:	899b      	ldrh	r3, [r3, #12]
 8006696:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8006698:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b02      	cmp	r3, #2
 800669e:	d10f      	bne.n	80066c0 <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 80066a0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066a2:	f7fd f8a3 	bl	80037ec <ld_word>
 80066a6:	4603      	mov	r3, r0
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d102      	bne.n	80066b2 <f_getfree+0x104>
 80066ac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066ae:	3301      	adds	r3, #1
 80066b0:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 80066b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b4:	3302      	adds	r3, #2
 80066b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80066b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066ba:	3b02      	subs	r3, #2
 80066bc:	637b      	str	r3, [r7, #52]	@ 0x34
 80066be:	e010      	b.n	80066e2 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 80066c0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80066c2:	f7fd f8ab 	bl	800381c <ld_dword>
 80066c6:	4603      	mov	r3, r0
 80066c8:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d102      	bne.n	80066d6 <f_getfree+0x128>
 80066d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d2:	3301      	adds	r3, #1
 80066d4:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 80066d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066d8:	3304      	adds	r3, #4
 80066da:	633b      	str	r3, [r7, #48]	@ 0x30
 80066dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066de:	3b04      	subs	r3, #4
 80066e0:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80066e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066e4:	3b01      	subs	r3, #1
 80066e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80066e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d1bd      	bne.n	800666a <f_getfree+0xbc>
 80066ee:	e000      	b.n	80066f2 <f_getfree+0x144>
							if (res != FR_OK) break;
 80066f0:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80066f2:	68bb      	ldr	r3, [r7, #8]
 80066f4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066f6:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80066f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066fa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80066fc:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80066fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006700:	791a      	ldrb	r2, [r3, #4]
 8006702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006704:	f042 0201 	orr.w	r2, r2, #1
 8006708:	b2d2      	uxtb	r2, r2
 800670a:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 800670c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 8006710:	4618      	mov	r0, r3
 8006712:	3748      	adds	r7, #72	@ 0x48
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <f_gets>:
TCHAR* f_gets (
	TCHAR* buff,	/* Pointer to the string buffer to read */
	int len,		/* Size of string buffer (characters) */
	FIL* fp			/* Pointer to the file object */
)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b088      	sub	sp, #32
 800671c:	af00      	add	r7, sp, #0
 800671e:	60f8      	str	r0, [r7, #12]
 8006720:	60b9      	str	r1, [r7, #8]
 8006722:	607a      	str	r2, [r7, #4]
	int n = 0;
 8006724:	2300      	movs	r3, #0
 8006726:	61fb      	str	r3, [r7, #28]
	TCHAR c, *p = buff;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	61bb      	str	r3, [r7, #24]
	BYTE s[2];
	UINT rc;


	while (n < len - 1) {	/* Read characters until buffer gets filled */
 800672c:	e01c      	b.n	8006768 <f_gets+0x50>
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
#else						/* Read a character without conversion */
		f_read(fp, s, 1, &rc);
 800672e:	f107 0310 	add.w	r3, r7, #16
 8006732:	f107 0114 	add.w	r1, r7, #20
 8006736:	2201      	movs	r2, #1
 8006738:	6878      	ldr	r0, [r7, #4]
 800673a:	f7ff fb9d 	bl	8005e78 <f_read>
		if (rc != 1) break;
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	2b01      	cmp	r3, #1
 8006742:	d117      	bne.n	8006774 <f_gets+0x5c>
		c = s[0];
 8006744:	7d3b      	ldrb	r3, [r7, #20]
 8006746:	75fb      	strb	r3, [r7, #23]
#endif
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006748:	7dfb      	ldrb	r3, [r7, #23]
 800674a:	2b0d      	cmp	r3, #13
 800674c:	d00b      	beq.n	8006766 <f_gets+0x4e>
		*p++ = c;
 800674e:	69bb      	ldr	r3, [r7, #24]
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	61ba      	str	r2, [r7, #24]
 8006754:	7dfa      	ldrb	r2, [r7, #23]
 8006756:	701a      	strb	r2, [r3, #0]
		n++;
 8006758:	69fb      	ldr	r3, [r7, #28]
 800675a:	3301      	adds	r3, #1
 800675c:	61fb      	str	r3, [r7, #28]
		if (c == '\n') break;		/* Break on EOL */
 800675e:	7dfb      	ldrb	r3, [r7, #23]
 8006760:	2b0a      	cmp	r3, #10
 8006762:	d009      	beq.n	8006778 <f_gets+0x60>
 8006764:	e000      	b.n	8006768 <f_gets+0x50>
		if (_USE_STRFUNC == 2 && c == '\r') continue;	/* Strip '\r' */
 8006766:	bf00      	nop
	while (n < len - 1) {	/* Read characters until buffer gets filled */
 8006768:	68bb      	ldr	r3, [r7, #8]
 800676a:	3b01      	subs	r3, #1
 800676c:	69fa      	ldr	r2, [r7, #28]
 800676e:	429a      	cmp	r2, r3
 8006770:	dbdd      	blt.n	800672e <f_gets+0x16>
 8006772:	e002      	b.n	800677a <f_gets+0x62>
		if (rc != 1) break;
 8006774:	bf00      	nop
 8006776:	e000      	b.n	800677a <f_gets+0x62>
		if (c == '\n') break;		/* Break on EOL */
 8006778:	bf00      	nop
	}
	*p = 0;
 800677a:	69bb      	ldr	r3, [r7, #24]
 800677c:	2200      	movs	r2, #0
 800677e:	701a      	strb	r2, [r3, #0]
	return n ? buff : 0;			/* When no data read (eof or error), return with error. */
 8006780:	69fb      	ldr	r3, [r7, #28]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <f_gets+0x72>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	e000      	b.n	800678c <f_gets+0x74>
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3720      	adds	r7, #32
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b084      	sub	sp, #16
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	460b      	mov	r3, r1
 800679e:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80067a0:	78fb      	ldrb	r3, [r7, #3]
 80067a2:	2b0a      	cmp	r3, #10
 80067a4:	d103      	bne.n	80067ae <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80067a6:	210d      	movs	r1, #13
 80067a8:	6878      	ldr	r0, [r7, #4]
 80067aa:	f7ff fff3 	bl	8006794 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	685b      	ldr	r3, [r3, #4]
 80067b2:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	db25      	blt.n	8006806 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	1c5a      	adds	r2, r3, #1
 80067be:	60fa      	str	r2, [r7, #12]
 80067c0:	687a      	ldr	r2, [r7, #4]
 80067c2:	4413      	add	r3, r2
 80067c4:	78fa      	ldrb	r2, [r7, #3]
 80067c6:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b3c      	cmp	r3, #60	@ 0x3c
 80067cc:	dd12      	ble.n	80067f4 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f103 010c 	add.w	r1, r3, #12
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	f107 0308 	add.w	r3, r7, #8
 80067de:	f7ff fcaa 	bl	8006136 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 80067e2:	68ba      	ldr	r2, [r7, #8]
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	429a      	cmp	r2, r3
 80067e8:	d101      	bne.n	80067ee <putc_bfd+0x5a>
 80067ea:	2300      	movs	r3, #0
 80067ec:	e001      	b.n	80067f2 <putc_bfd+0x5e>
 80067ee:	f04f 33ff 	mov.w	r3, #4294967295
 80067f2:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	689b      	ldr	r3, [r3, #8]
 80067fe:	1c5a      	adds	r2, r3, #1
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	609a      	str	r2, [r3, #8]
 8006804:	e000      	b.n	8006808 <putc_bfd+0x74>
	if (i < 0) return;
 8006806:	bf00      	nop
}
 8006808:	3710      	adds	r7, #16
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b084      	sub	sp, #16
 8006812:	af00      	add	r7, sp, #0
 8006814:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	685b      	ldr	r3, [r3, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	db16      	blt.n	800684c <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6818      	ldr	r0, [r3, #0]
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f103 010c 	add.w	r1, r3, #12
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	461a      	mov	r2, r3
 800682e:	f107 030c 	add.w	r3, r7, #12
 8006832:	f7ff fc80 	bl	8006136 <f_write>
 8006836:	4603      	mov	r3, r0
 8006838:	2b00      	cmp	r3, #0
 800683a:	d107      	bne.n	800684c <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	68fa      	ldr	r2, [r7, #12]
 8006842:	4293      	cmp	r3, r2
 8006844:	d102      	bne.n	800684c <putc_flush+0x3e>
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	689b      	ldr	r3, [r3, #8]
 800684a:	e001      	b.n	8006850 <putc_flush+0x42>
	return EOF;
 800684c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006850:	4618      	mov	r0, r3
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	683a      	ldr	r2, [r7, #0]
 8006866:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	605a      	str	r2, [r3, #4]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685a      	ldr	r2, [r3, #4]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	609a      	str	r2, [r3, #8]
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8006882:	b580      	push	{r7, lr}
 8006884:	b096      	sub	sp, #88	@ 0x58
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
 800688a:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 800688c:	f107 030c 	add.w	r3, r7, #12
 8006890:	6839      	ldr	r1, [r7, #0]
 8006892:	4618      	mov	r0, r3
 8006894:	f7ff ffe0 	bl	8006858 <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8006898:	e009      	b.n	80068ae <f_puts+0x2c>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	1c5a      	adds	r2, r3, #1
 800689e:	607a      	str	r2, [r7, #4]
 80068a0:	781a      	ldrb	r2, [r3, #0]
 80068a2:	f107 030c 	add.w	r3, r7, #12
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff ff73 	bl	8006794 <putc_bfd>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d1f1      	bne.n	800689a <f_puts+0x18>
	return putc_flush(&pb);
 80068b6:	f107 030c 	add.w	r3, r7, #12
 80068ba:	4618      	mov	r0, r3
 80068bc:	f7ff ffa7 	bl	800680e <putc_flush>
 80068c0:	4603      	mov	r3, r0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3758      	adds	r7, #88	@ 0x58
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b087      	sub	sp, #28
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	60f8      	str	r0, [r7, #12]
 80068d4:	60b9      	str	r1, [r7, #8]
 80068d6:	4613      	mov	r3, r2
 80068d8:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80068da:	2301      	movs	r3, #1
 80068dc:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80068de:	2300      	movs	r3, #0
 80068e0:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80068e2:	4b1f      	ldr	r3, [pc, #124]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 80068e4:	7a5b      	ldrb	r3, [r3, #9]
 80068e6:	b2db      	uxtb	r3, r3
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d131      	bne.n	8006950 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80068ec:	4b1c      	ldr	r3, [pc, #112]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 80068ee:	7a5b      	ldrb	r3, [r3, #9]
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	461a      	mov	r2, r3
 80068f4:	4b1a      	ldr	r3, [pc, #104]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 80068f6:	2100      	movs	r1, #0
 80068f8:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80068fa:	4b19      	ldr	r3, [pc, #100]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 80068fc:	7a5b      	ldrb	r3, [r3, #9]
 80068fe:	b2db      	uxtb	r3, r3
 8006900:	4a17      	ldr	r2, [pc, #92]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 8006902:	009b      	lsls	r3, r3, #2
 8006904:	4413      	add	r3, r2
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800690a:	4b15      	ldr	r3, [pc, #84]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 800690c:	7a5b      	ldrb	r3, [r3, #9]
 800690e:	b2db      	uxtb	r3, r3
 8006910:	461a      	mov	r2, r3
 8006912:	4b13      	ldr	r3, [pc, #76]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 8006914:	4413      	add	r3, r2
 8006916:	79fa      	ldrb	r2, [r7, #7]
 8006918:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800691a:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 800691c:	7a5b      	ldrb	r3, [r3, #9]
 800691e:	b2db      	uxtb	r3, r3
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	b2d1      	uxtb	r1, r2
 8006924:	4a0e      	ldr	r2, [pc, #56]	@ (8006960 <FATFS_LinkDriverEx+0x94>)
 8006926:	7251      	strb	r1, [r2, #9]
 8006928:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800692a:	7dbb      	ldrb	r3, [r7, #22]
 800692c:	3330      	adds	r3, #48	@ 0x30
 800692e:	b2da      	uxtb	r2, r3
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006934:	68bb      	ldr	r3, [r7, #8]
 8006936:	3301      	adds	r3, #1
 8006938:	223a      	movs	r2, #58	@ 0x3a
 800693a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800693c:	68bb      	ldr	r3, [r7, #8]
 800693e:	3302      	adds	r3, #2
 8006940:	222f      	movs	r2, #47	@ 0x2f
 8006942:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	3303      	adds	r3, #3
 8006948:	2200      	movs	r2, #0
 800694a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800694c:	2300      	movs	r3, #0
 800694e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006950:	7dfb      	ldrb	r3, [r7, #23]
}
 8006952:	4618      	mov	r0, r3
 8006954:	371c      	adds	r7, #28
 8006956:	46bd      	mov	sp, r7
 8006958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695c:	4770      	bx	lr
 800695e:	bf00      	nop
 8006960:	20000334 	.word	0x20000334

08006964 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800696e:	2200      	movs	r2, #0
 8006970:	6839      	ldr	r1, [r7, #0]
 8006972:	6878      	ldr	r0, [r7, #4]
 8006974:	f7ff ffaa 	bl	80068cc <FATFS_LinkDriverEx>
 8006978:	4603      	mov	r3, r0
}
 800697a:	4618      	mov	r0, r3
 800697c:	3708      	adds	r7, #8
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
	...

08006984 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8006984:	b480      	push	{r7}
 8006986:	b085      	sub	sp, #20
 8006988:	af00      	add	r7, sp, #0
 800698a:	4603      	mov	r3, r0
 800698c:	6039      	str	r1, [r7, #0]
 800698e:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8006990:	88fb      	ldrh	r3, [r7, #6]
 8006992:	2b7f      	cmp	r3, #127	@ 0x7f
 8006994:	d802      	bhi.n	800699c <ff_convert+0x18>
		c = chr;
 8006996:	88fb      	ldrh	r3, [r7, #6]
 8006998:	81fb      	strh	r3, [r7, #14]
 800699a:	e025      	b.n	80069e8 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d00b      	beq.n	80069ba <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	2bff      	cmp	r3, #255	@ 0xff
 80069a6:	d805      	bhi.n	80069b4 <ff_convert+0x30>
 80069a8:	88fb      	ldrh	r3, [r7, #6]
 80069aa:	3b80      	subs	r3, #128	@ 0x80
 80069ac:	4a12      	ldr	r2, [pc, #72]	@ (80069f8 <ff_convert+0x74>)
 80069ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069b2:	e000      	b.n	80069b6 <ff_convert+0x32>
 80069b4:	2300      	movs	r3, #0
 80069b6:	81fb      	strh	r3, [r7, #14]
 80069b8:	e016      	b.n	80069e8 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80069ba:	2300      	movs	r3, #0
 80069bc:	81fb      	strh	r3, [r7, #14]
 80069be:	e009      	b.n	80069d4 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80069c0:	89fb      	ldrh	r3, [r7, #14]
 80069c2:	4a0d      	ldr	r2, [pc, #52]	@ (80069f8 <ff_convert+0x74>)
 80069c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069c8:	88fa      	ldrh	r2, [r7, #6]
 80069ca:	429a      	cmp	r2, r3
 80069cc:	d006      	beq.n	80069dc <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 80069ce:	89fb      	ldrh	r3, [r7, #14]
 80069d0:	3301      	adds	r3, #1
 80069d2:	81fb      	strh	r3, [r7, #14]
 80069d4:	89fb      	ldrh	r3, [r7, #14]
 80069d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80069d8:	d9f2      	bls.n	80069c0 <ff_convert+0x3c>
 80069da:	e000      	b.n	80069de <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 80069dc:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 80069de:	89fb      	ldrh	r3, [r7, #14]
 80069e0:	3380      	adds	r3, #128	@ 0x80
 80069e2:	b29b      	uxth	r3, r3
 80069e4:	b2db      	uxtb	r3, r3
 80069e6:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 80069e8:	89fb      	ldrh	r3, [r7, #14]
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3714      	adds	r7, #20
 80069ee:	46bd      	mov	sp, r7
 80069f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f4:	4770      	bx	lr
 80069f6:	bf00      	nop
 80069f8:	08007c64 	.word	0x08007c64

080069fc <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b087      	sub	sp, #28
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	4603      	mov	r3, r0
 8006a04:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8006a06:	88fb      	ldrh	r3, [r7, #6]
 8006a08:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006a0c:	d201      	bcs.n	8006a12 <ff_wtoupper+0x16>
 8006a0e:	4b3e      	ldr	r3, [pc, #248]	@ (8006b08 <ff_wtoupper+0x10c>)
 8006a10:	e000      	b.n	8006a14 <ff_wtoupper+0x18>
 8006a12:	4b3e      	ldr	r3, [pc, #248]	@ (8006b0c <ff_wtoupper+0x110>)
 8006a14:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8006a16:	697b      	ldr	r3, [r7, #20]
 8006a18:	1c9a      	adds	r2, r3, #2
 8006a1a:	617a      	str	r2, [r7, #20]
 8006a1c:	881b      	ldrh	r3, [r3, #0]
 8006a1e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8006a20:	8a7b      	ldrh	r3, [r7, #18]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d068      	beq.n	8006af8 <ff_wtoupper+0xfc>
 8006a26:	88fa      	ldrh	r2, [r7, #6]
 8006a28:	8a7b      	ldrh	r3, [r7, #18]
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d364      	bcc.n	8006af8 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8006a2e:	697b      	ldr	r3, [r7, #20]
 8006a30:	1c9a      	adds	r2, r3, #2
 8006a32:	617a      	str	r2, [r7, #20]
 8006a34:	881b      	ldrh	r3, [r3, #0]
 8006a36:	823b      	strh	r3, [r7, #16]
 8006a38:	8a3b      	ldrh	r3, [r7, #16]
 8006a3a:	0a1b      	lsrs	r3, r3, #8
 8006a3c:	81fb      	strh	r3, [r7, #14]
 8006a3e:	8a3b      	ldrh	r3, [r7, #16]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8006a44:	88fa      	ldrh	r2, [r7, #6]
 8006a46:	8a79      	ldrh	r1, [r7, #18]
 8006a48:	8a3b      	ldrh	r3, [r7, #16]
 8006a4a:	440b      	add	r3, r1
 8006a4c:	429a      	cmp	r2, r3
 8006a4e:	da49      	bge.n	8006ae4 <ff_wtoupper+0xe8>
			switch (cmd) {
 8006a50:	89fb      	ldrh	r3, [r7, #14]
 8006a52:	2b08      	cmp	r3, #8
 8006a54:	d84f      	bhi.n	8006af6 <ff_wtoupper+0xfa>
 8006a56:	a201      	add	r2, pc, #4	@ (adr r2, 8006a5c <ff_wtoupper+0x60>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a81 	.word	0x08006a81
 8006a60:	08006a93 	.word	0x08006a93
 8006a64:	08006aa9 	.word	0x08006aa9
 8006a68:	08006ab1 	.word	0x08006ab1
 8006a6c:	08006ab9 	.word	0x08006ab9
 8006a70:	08006ac1 	.word	0x08006ac1
 8006a74:	08006ac9 	.word	0x08006ac9
 8006a78:	08006ad1 	.word	0x08006ad1
 8006a7c:	08006ad9 	.word	0x08006ad9
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8006a80:	88fa      	ldrh	r2, [r7, #6]
 8006a82:	8a7b      	ldrh	r3, [r7, #18]
 8006a84:	1ad3      	subs	r3, r2, r3
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	697a      	ldr	r2, [r7, #20]
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	80fb      	strh	r3, [r7, #6]
 8006a90:	e027      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	8a7b      	ldrh	r3, [r7, #18]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	b29b      	uxth	r3, r3
 8006a9a:	f003 0301 	and.w	r3, r3, #1
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	88fa      	ldrh	r2, [r7, #6]
 8006aa2:	1ad3      	subs	r3, r2, r3
 8006aa4:	80fb      	strh	r3, [r7, #6]
 8006aa6:	e01c      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8006aa8:	88fb      	ldrh	r3, [r7, #6]
 8006aaa:	3b10      	subs	r3, #16
 8006aac:	80fb      	strh	r3, [r7, #6]
 8006aae:	e018      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8006ab0:	88fb      	ldrh	r3, [r7, #6]
 8006ab2:	3b20      	subs	r3, #32
 8006ab4:	80fb      	strh	r3, [r7, #6]
 8006ab6:	e014      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8006ab8:	88fb      	ldrh	r3, [r7, #6]
 8006aba:	3b30      	subs	r3, #48	@ 0x30
 8006abc:	80fb      	strh	r3, [r7, #6]
 8006abe:	e010      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8006ac0:	88fb      	ldrh	r3, [r7, #6]
 8006ac2:	3b1a      	subs	r3, #26
 8006ac4:	80fb      	strh	r3, [r7, #6]
 8006ac6:	e00c      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8006ac8:	88fb      	ldrh	r3, [r7, #6]
 8006aca:	3308      	adds	r3, #8
 8006acc:	80fb      	strh	r3, [r7, #6]
 8006ace:	e008      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8006ad0:	88fb      	ldrh	r3, [r7, #6]
 8006ad2:	3b50      	subs	r3, #80	@ 0x50
 8006ad4:	80fb      	strh	r3, [r7, #6]
 8006ad6:	e004      	b.n	8006ae2 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8006ad8:	88fb      	ldrh	r3, [r7, #6]
 8006ada:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8006ade:	80fb      	strh	r3, [r7, #6]
 8006ae0:	bf00      	nop
			}
			break;
 8006ae2:	e008      	b.n	8006af6 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8006ae4:	89fb      	ldrh	r3, [r7, #14]
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d195      	bne.n	8006a16 <ff_wtoupper+0x1a>
 8006aea:	8a3b      	ldrh	r3, [r7, #16]
 8006aec:	005b      	lsls	r3, r3, #1
 8006aee:	697a      	ldr	r2, [r7, #20]
 8006af0:	4413      	add	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8006af4:	e78f      	b.n	8006a16 <ff_wtoupper+0x1a>
			break;
 8006af6:	bf00      	nop
	}

	return chr;
 8006af8:	88fb      	ldrh	r3, [r7, #6]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	371c      	adds	r7, #28
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr
 8006b06:	bf00      	nop
 8006b08:	08007d64 	.word	0x08007d64
 8006b0c:	08007f58 	.word	0x08007f58

08006b10 <std>:
 8006b10:	2300      	movs	r3, #0
 8006b12:	b510      	push	{r4, lr}
 8006b14:	4604      	mov	r4, r0
 8006b16:	e9c0 3300 	strd	r3, r3, [r0]
 8006b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006b1e:	6083      	str	r3, [r0, #8]
 8006b20:	8181      	strh	r1, [r0, #12]
 8006b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8006b24:	81c2      	strh	r2, [r0, #14]
 8006b26:	6183      	str	r3, [r0, #24]
 8006b28:	4619      	mov	r1, r3
 8006b2a:	2208      	movs	r2, #8
 8006b2c:	305c      	adds	r0, #92	@ 0x5c
 8006b2e:	f000 f9f9 	bl	8006f24 <memset>
 8006b32:	4b0d      	ldr	r3, [pc, #52]	@ (8006b68 <std+0x58>)
 8006b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8006b36:	4b0d      	ldr	r3, [pc, #52]	@ (8006b6c <std+0x5c>)
 8006b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8006b70 <std+0x60>)
 8006b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006b74 <std+0x64>)
 8006b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8006b42:	4b0d      	ldr	r3, [pc, #52]	@ (8006b78 <std+0x68>)
 8006b44:	6224      	str	r4, [r4, #32]
 8006b46:	429c      	cmp	r4, r3
 8006b48:	d006      	beq.n	8006b58 <std+0x48>
 8006b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006b4e:	4294      	cmp	r4, r2
 8006b50:	d002      	beq.n	8006b58 <std+0x48>
 8006b52:	33d0      	adds	r3, #208	@ 0xd0
 8006b54:	429c      	cmp	r4, r3
 8006b56:	d105      	bne.n	8006b64 <std+0x54>
 8006b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b60:	f000 ba58 	b.w	8007014 <__retarget_lock_init_recursive>
 8006b64:	bd10      	pop	{r4, pc}
 8006b66:	bf00      	nop
 8006b68:	08006d75 	.word	0x08006d75
 8006b6c:	08006d97 	.word	0x08006d97
 8006b70:	08006dcf 	.word	0x08006dcf
 8006b74:	08006df3 	.word	0x08006df3
 8006b78:	20000340 	.word	0x20000340

08006b7c <stdio_exit_handler>:
 8006b7c:	4a02      	ldr	r2, [pc, #8]	@ (8006b88 <stdio_exit_handler+0xc>)
 8006b7e:	4903      	ldr	r1, [pc, #12]	@ (8006b8c <stdio_exit_handler+0x10>)
 8006b80:	4803      	ldr	r0, [pc, #12]	@ (8006b90 <stdio_exit_handler+0x14>)
 8006b82:	f000 b869 	b.w	8006c58 <_fwalk_sglue>
 8006b86:	bf00      	nop
 8006b88:	20000024 	.word	0x20000024
 8006b8c:	080078b5 	.word	0x080078b5
 8006b90:	20000034 	.word	0x20000034

08006b94 <cleanup_stdio>:
 8006b94:	6841      	ldr	r1, [r0, #4]
 8006b96:	4b0c      	ldr	r3, [pc, #48]	@ (8006bc8 <cleanup_stdio+0x34>)
 8006b98:	4299      	cmp	r1, r3
 8006b9a:	b510      	push	{r4, lr}
 8006b9c:	4604      	mov	r4, r0
 8006b9e:	d001      	beq.n	8006ba4 <cleanup_stdio+0x10>
 8006ba0:	f000 fe88 	bl	80078b4 <_fflush_r>
 8006ba4:	68a1      	ldr	r1, [r4, #8]
 8006ba6:	4b09      	ldr	r3, [pc, #36]	@ (8006bcc <cleanup_stdio+0x38>)
 8006ba8:	4299      	cmp	r1, r3
 8006baa:	d002      	beq.n	8006bb2 <cleanup_stdio+0x1e>
 8006bac:	4620      	mov	r0, r4
 8006bae:	f000 fe81 	bl	80078b4 <_fflush_r>
 8006bb2:	68e1      	ldr	r1, [r4, #12]
 8006bb4:	4b06      	ldr	r3, [pc, #24]	@ (8006bd0 <cleanup_stdio+0x3c>)
 8006bb6:	4299      	cmp	r1, r3
 8006bb8:	d004      	beq.n	8006bc4 <cleanup_stdio+0x30>
 8006bba:	4620      	mov	r0, r4
 8006bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bc0:	f000 be78 	b.w	80078b4 <_fflush_r>
 8006bc4:	bd10      	pop	{r4, pc}
 8006bc6:	bf00      	nop
 8006bc8:	20000340 	.word	0x20000340
 8006bcc:	200003a8 	.word	0x200003a8
 8006bd0:	20000410 	.word	0x20000410

08006bd4 <global_stdio_init.part.0>:
 8006bd4:	b510      	push	{r4, lr}
 8006bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8006c04 <global_stdio_init.part.0+0x30>)
 8006bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8006c08 <global_stdio_init.part.0+0x34>)
 8006bda:	4a0c      	ldr	r2, [pc, #48]	@ (8006c0c <global_stdio_init.part.0+0x38>)
 8006bdc:	601a      	str	r2, [r3, #0]
 8006bde:	4620      	mov	r0, r4
 8006be0:	2200      	movs	r2, #0
 8006be2:	2104      	movs	r1, #4
 8006be4:	f7ff ff94 	bl	8006b10 <std>
 8006be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006bec:	2201      	movs	r2, #1
 8006bee:	2109      	movs	r1, #9
 8006bf0:	f7ff ff8e 	bl	8006b10 <std>
 8006bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006bf8:	2202      	movs	r2, #2
 8006bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006bfe:	2112      	movs	r1, #18
 8006c00:	f7ff bf86 	b.w	8006b10 <std>
 8006c04:	20000478 	.word	0x20000478
 8006c08:	20000340 	.word	0x20000340
 8006c0c:	08006b7d 	.word	0x08006b7d

08006c10 <__sfp_lock_acquire>:
 8006c10:	4801      	ldr	r0, [pc, #4]	@ (8006c18 <__sfp_lock_acquire+0x8>)
 8006c12:	f000 ba00 	b.w	8007016 <__retarget_lock_acquire_recursive>
 8006c16:	bf00      	nop
 8006c18:	20000481 	.word	0x20000481

08006c1c <__sfp_lock_release>:
 8006c1c:	4801      	ldr	r0, [pc, #4]	@ (8006c24 <__sfp_lock_release+0x8>)
 8006c1e:	f000 b9fb 	b.w	8007018 <__retarget_lock_release_recursive>
 8006c22:	bf00      	nop
 8006c24:	20000481 	.word	0x20000481

08006c28 <__sinit>:
 8006c28:	b510      	push	{r4, lr}
 8006c2a:	4604      	mov	r4, r0
 8006c2c:	f7ff fff0 	bl	8006c10 <__sfp_lock_acquire>
 8006c30:	6a23      	ldr	r3, [r4, #32]
 8006c32:	b11b      	cbz	r3, 8006c3c <__sinit+0x14>
 8006c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006c38:	f7ff bff0 	b.w	8006c1c <__sfp_lock_release>
 8006c3c:	4b04      	ldr	r3, [pc, #16]	@ (8006c50 <__sinit+0x28>)
 8006c3e:	6223      	str	r3, [r4, #32]
 8006c40:	4b04      	ldr	r3, [pc, #16]	@ (8006c54 <__sinit+0x2c>)
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1f5      	bne.n	8006c34 <__sinit+0xc>
 8006c48:	f7ff ffc4 	bl	8006bd4 <global_stdio_init.part.0>
 8006c4c:	e7f2      	b.n	8006c34 <__sinit+0xc>
 8006c4e:	bf00      	nop
 8006c50:	08006b95 	.word	0x08006b95
 8006c54:	20000478 	.word	0x20000478

08006c58 <_fwalk_sglue>:
 8006c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c5c:	4607      	mov	r7, r0
 8006c5e:	4688      	mov	r8, r1
 8006c60:	4614      	mov	r4, r2
 8006c62:	2600      	movs	r6, #0
 8006c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c68:	f1b9 0901 	subs.w	r9, r9, #1
 8006c6c:	d505      	bpl.n	8006c7a <_fwalk_sglue+0x22>
 8006c6e:	6824      	ldr	r4, [r4, #0]
 8006c70:	2c00      	cmp	r4, #0
 8006c72:	d1f7      	bne.n	8006c64 <_fwalk_sglue+0xc>
 8006c74:	4630      	mov	r0, r6
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	89ab      	ldrh	r3, [r5, #12]
 8006c7c:	2b01      	cmp	r3, #1
 8006c7e:	d907      	bls.n	8006c90 <_fwalk_sglue+0x38>
 8006c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c84:	3301      	adds	r3, #1
 8006c86:	d003      	beq.n	8006c90 <_fwalk_sglue+0x38>
 8006c88:	4629      	mov	r1, r5
 8006c8a:	4638      	mov	r0, r7
 8006c8c:	47c0      	blx	r8
 8006c8e:	4306      	orrs	r6, r0
 8006c90:	3568      	adds	r5, #104	@ 0x68
 8006c92:	e7e9      	b.n	8006c68 <_fwalk_sglue+0x10>

08006c94 <iprintf>:
 8006c94:	b40f      	push	{r0, r1, r2, r3}
 8006c96:	b507      	push	{r0, r1, r2, lr}
 8006c98:	4906      	ldr	r1, [pc, #24]	@ (8006cb4 <iprintf+0x20>)
 8006c9a:	ab04      	add	r3, sp, #16
 8006c9c:	6808      	ldr	r0, [r1, #0]
 8006c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ca2:	6881      	ldr	r1, [r0, #8]
 8006ca4:	9301      	str	r3, [sp, #4]
 8006ca6:	f000 fadb 	bl	8007260 <_vfiprintf_r>
 8006caa:	b003      	add	sp, #12
 8006cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8006cb0:	b004      	add	sp, #16
 8006cb2:	4770      	bx	lr
 8006cb4:	20000030 	.word	0x20000030

08006cb8 <_puts_r>:
 8006cb8:	6a03      	ldr	r3, [r0, #32]
 8006cba:	b570      	push	{r4, r5, r6, lr}
 8006cbc:	6884      	ldr	r4, [r0, #8]
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	460e      	mov	r6, r1
 8006cc2:	b90b      	cbnz	r3, 8006cc8 <_puts_r+0x10>
 8006cc4:	f7ff ffb0 	bl	8006c28 <__sinit>
 8006cc8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cca:	07db      	lsls	r3, r3, #31
 8006ccc:	d405      	bmi.n	8006cda <_puts_r+0x22>
 8006cce:	89a3      	ldrh	r3, [r4, #12]
 8006cd0:	0598      	lsls	r0, r3, #22
 8006cd2:	d402      	bmi.n	8006cda <_puts_r+0x22>
 8006cd4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006cd6:	f000 f99e 	bl	8007016 <__retarget_lock_acquire_recursive>
 8006cda:	89a3      	ldrh	r3, [r4, #12]
 8006cdc:	0719      	lsls	r1, r3, #28
 8006cde:	d502      	bpl.n	8006ce6 <_puts_r+0x2e>
 8006ce0:	6923      	ldr	r3, [r4, #16]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d135      	bne.n	8006d52 <_puts_r+0x9a>
 8006ce6:	4621      	mov	r1, r4
 8006ce8:	4628      	mov	r0, r5
 8006cea:	f000 f8c5 	bl	8006e78 <__swsetup_r>
 8006cee:	b380      	cbz	r0, 8006d52 <_puts_r+0x9a>
 8006cf0:	f04f 35ff 	mov.w	r5, #4294967295
 8006cf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006cf6:	07da      	lsls	r2, r3, #31
 8006cf8:	d405      	bmi.n	8006d06 <_puts_r+0x4e>
 8006cfa:	89a3      	ldrh	r3, [r4, #12]
 8006cfc:	059b      	lsls	r3, r3, #22
 8006cfe:	d402      	bmi.n	8006d06 <_puts_r+0x4e>
 8006d00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006d02:	f000 f989 	bl	8007018 <__retarget_lock_release_recursive>
 8006d06:	4628      	mov	r0, r5
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	da04      	bge.n	8006d18 <_puts_r+0x60>
 8006d0e:	69a2      	ldr	r2, [r4, #24]
 8006d10:	429a      	cmp	r2, r3
 8006d12:	dc17      	bgt.n	8006d44 <_puts_r+0x8c>
 8006d14:	290a      	cmp	r1, #10
 8006d16:	d015      	beq.n	8006d44 <_puts_r+0x8c>
 8006d18:	6823      	ldr	r3, [r4, #0]
 8006d1a:	1c5a      	adds	r2, r3, #1
 8006d1c:	6022      	str	r2, [r4, #0]
 8006d1e:	7019      	strb	r1, [r3, #0]
 8006d20:	68a3      	ldr	r3, [r4, #8]
 8006d22:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006d26:	3b01      	subs	r3, #1
 8006d28:	60a3      	str	r3, [r4, #8]
 8006d2a:	2900      	cmp	r1, #0
 8006d2c:	d1ed      	bne.n	8006d0a <_puts_r+0x52>
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	da11      	bge.n	8006d56 <_puts_r+0x9e>
 8006d32:	4622      	mov	r2, r4
 8006d34:	210a      	movs	r1, #10
 8006d36:	4628      	mov	r0, r5
 8006d38:	f000 f85f 	bl	8006dfa <__swbuf_r>
 8006d3c:	3001      	adds	r0, #1
 8006d3e:	d0d7      	beq.n	8006cf0 <_puts_r+0x38>
 8006d40:	250a      	movs	r5, #10
 8006d42:	e7d7      	b.n	8006cf4 <_puts_r+0x3c>
 8006d44:	4622      	mov	r2, r4
 8006d46:	4628      	mov	r0, r5
 8006d48:	f000 f857 	bl	8006dfa <__swbuf_r>
 8006d4c:	3001      	adds	r0, #1
 8006d4e:	d1e7      	bne.n	8006d20 <_puts_r+0x68>
 8006d50:	e7ce      	b.n	8006cf0 <_puts_r+0x38>
 8006d52:	3e01      	subs	r6, #1
 8006d54:	e7e4      	b.n	8006d20 <_puts_r+0x68>
 8006d56:	6823      	ldr	r3, [r4, #0]
 8006d58:	1c5a      	adds	r2, r3, #1
 8006d5a:	6022      	str	r2, [r4, #0]
 8006d5c:	220a      	movs	r2, #10
 8006d5e:	701a      	strb	r2, [r3, #0]
 8006d60:	e7ee      	b.n	8006d40 <_puts_r+0x88>
	...

08006d64 <puts>:
 8006d64:	4b02      	ldr	r3, [pc, #8]	@ (8006d70 <puts+0xc>)
 8006d66:	4601      	mov	r1, r0
 8006d68:	6818      	ldr	r0, [r3, #0]
 8006d6a:	f7ff bfa5 	b.w	8006cb8 <_puts_r>
 8006d6e:	bf00      	nop
 8006d70:	20000030 	.word	0x20000030

08006d74 <__sread>:
 8006d74:	b510      	push	{r4, lr}
 8006d76:	460c      	mov	r4, r1
 8006d78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d7c:	f000 f8fc 	bl	8006f78 <_read_r>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	bfab      	itete	ge
 8006d84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006d86:	89a3      	ldrhlt	r3, [r4, #12]
 8006d88:	181b      	addge	r3, r3, r0
 8006d8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006d8e:	bfac      	ite	ge
 8006d90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006d92:	81a3      	strhlt	r3, [r4, #12]
 8006d94:	bd10      	pop	{r4, pc}

08006d96 <__swrite>:
 8006d96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d9a:	461f      	mov	r7, r3
 8006d9c:	898b      	ldrh	r3, [r1, #12]
 8006d9e:	05db      	lsls	r3, r3, #23
 8006da0:	4605      	mov	r5, r0
 8006da2:	460c      	mov	r4, r1
 8006da4:	4616      	mov	r6, r2
 8006da6:	d505      	bpl.n	8006db4 <__swrite+0x1e>
 8006da8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dac:	2302      	movs	r3, #2
 8006dae:	2200      	movs	r2, #0
 8006db0:	f000 f8d0 	bl	8006f54 <_lseek_r>
 8006db4:	89a3      	ldrh	r3, [r4, #12]
 8006db6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006dba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006dbe:	81a3      	strh	r3, [r4, #12]
 8006dc0:	4632      	mov	r2, r6
 8006dc2:	463b      	mov	r3, r7
 8006dc4:	4628      	mov	r0, r5
 8006dc6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006dca:	f000 b8e7 	b.w	8006f9c <_write_r>

08006dce <__sseek>:
 8006dce:	b510      	push	{r4, lr}
 8006dd0:	460c      	mov	r4, r1
 8006dd2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006dd6:	f000 f8bd 	bl	8006f54 <_lseek_r>
 8006dda:	1c43      	adds	r3, r0, #1
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	bf15      	itete	ne
 8006de0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006de2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006de6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006dea:	81a3      	strheq	r3, [r4, #12]
 8006dec:	bf18      	it	ne
 8006dee:	81a3      	strhne	r3, [r4, #12]
 8006df0:	bd10      	pop	{r4, pc}

08006df2 <__sclose>:
 8006df2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006df6:	f000 b89d 	b.w	8006f34 <_close_r>

08006dfa <__swbuf_r>:
 8006dfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfc:	460e      	mov	r6, r1
 8006dfe:	4614      	mov	r4, r2
 8006e00:	4605      	mov	r5, r0
 8006e02:	b118      	cbz	r0, 8006e0c <__swbuf_r+0x12>
 8006e04:	6a03      	ldr	r3, [r0, #32]
 8006e06:	b90b      	cbnz	r3, 8006e0c <__swbuf_r+0x12>
 8006e08:	f7ff ff0e 	bl	8006c28 <__sinit>
 8006e0c:	69a3      	ldr	r3, [r4, #24]
 8006e0e:	60a3      	str	r3, [r4, #8]
 8006e10:	89a3      	ldrh	r3, [r4, #12]
 8006e12:	071a      	lsls	r2, r3, #28
 8006e14:	d501      	bpl.n	8006e1a <__swbuf_r+0x20>
 8006e16:	6923      	ldr	r3, [r4, #16]
 8006e18:	b943      	cbnz	r3, 8006e2c <__swbuf_r+0x32>
 8006e1a:	4621      	mov	r1, r4
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	f000 f82b 	bl	8006e78 <__swsetup_r>
 8006e22:	b118      	cbz	r0, 8006e2c <__swbuf_r+0x32>
 8006e24:	f04f 37ff 	mov.w	r7, #4294967295
 8006e28:	4638      	mov	r0, r7
 8006e2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e2c:	6823      	ldr	r3, [r4, #0]
 8006e2e:	6922      	ldr	r2, [r4, #16]
 8006e30:	1a98      	subs	r0, r3, r2
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	b2f6      	uxtb	r6, r6
 8006e36:	4283      	cmp	r3, r0
 8006e38:	4637      	mov	r7, r6
 8006e3a:	dc05      	bgt.n	8006e48 <__swbuf_r+0x4e>
 8006e3c:	4621      	mov	r1, r4
 8006e3e:	4628      	mov	r0, r5
 8006e40:	f000 fd38 	bl	80078b4 <_fflush_r>
 8006e44:	2800      	cmp	r0, #0
 8006e46:	d1ed      	bne.n	8006e24 <__swbuf_r+0x2a>
 8006e48:	68a3      	ldr	r3, [r4, #8]
 8006e4a:	3b01      	subs	r3, #1
 8006e4c:	60a3      	str	r3, [r4, #8]
 8006e4e:	6823      	ldr	r3, [r4, #0]
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	6022      	str	r2, [r4, #0]
 8006e54:	701e      	strb	r6, [r3, #0]
 8006e56:	6962      	ldr	r2, [r4, #20]
 8006e58:	1c43      	adds	r3, r0, #1
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d004      	beq.n	8006e68 <__swbuf_r+0x6e>
 8006e5e:	89a3      	ldrh	r3, [r4, #12]
 8006e60:	07db      	lsls	r3, r3, #31
 8006e62:	d5e1      	bpl.n	8006e28 <__swbuf_r+0x2e>
 8006e64:	2e0a      	cmp	r6, #10
 8006e66:	d1df      	bne.n	8006e28 <__swbuf_r+0x2e>
 8006e68:	4621      	mov	r1, r4
 8006e6a:	4628      	mov	r0, r5
 8006e6c:	f000 fd22 	bl	80078b4 <_fflush_r>
 8006e70:	2800      	cmp	r0, #0
 8006e72:	d0d9      	beq.n	8006e28 <__swbuf_r+0x2e>
 8006e74:	e7d6      	b.n	8006e24 <__swbuf_r+0x2a>
	...

08006e78 <__swsetup_r>:
 8006e78:	b538      	push	{r3, r4, r5, lr}
 8006e7a:	4b29      	ldr	r3, [pc, #164]	@ (8006f20 <__swsetup_r+0xa8>)
 8006e7c:	4605      	mov	r5, r0
 8006e7e:	6818      	ldr	r0, [r3, #0]
 8006e80:	460c      	mov	r4, r1
 8006e82:	b118      	cbz	r0, 8006e8c <__swsetup_r+0x14>
 8006e84:	6a03      	ldr	r3, [r0, #32]
 8006e86:	b90b      	cbnz	r3, 8006e8c <__swsetup_r+0x14>
 8006e88:	f7ff fece 	bl	8006c28 <__sinit>
 8006e8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e90:	0719      	lsls	r1, r3, #28
 8006e92:	d422      	bmi.n	8006eda <__swsetup_r+0x62>
 8006e94:	06da      	lsls	r2, r3, #27
 8006e96:	d407      	bmi.n	8006ea8 <__swsetup_r+0x30>
 8006e98:	2209      	movs	r2, #9
 8006e9a:	602a      	str	r2, [r5, #0]
 8006e9c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ea0:	81a3      	strh	r3, [r4, #12]
 8006ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ea6:	e033      	b.n	8006f10 <__swsetup_r+0x98>
 8006ea8:	0758      	lsls	r0, r3, #29
 8006eaa:	d512      	bpl.n	8006ed2 <__swsetup_r+0x5a>
 8006eac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006eae:	b141      	cbz	r1, 8006ec2 <__swsetup_r+0x4a>
 8006eb0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006eb4:	4299      	cmp	r1, r3
 8006eb6:	d002      	beq.n	8006ebe <__swsetup_r+0x46>
 8006eb8:	4628      	mov	r0, r5
 8006eba:	f000 f8af 	bl	800701c <_free_r>
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	6363      	str	r3, [r4, #52]	@ 0x34
 8006ec2:	89a3      	ldrh	r3, [r4, #12]
 8006ec4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006ec8:	81a3      	strh	r3, [r4, #12]
 8006eca:	2300      	movs	r3, #0
 8006ecc:	6063      	str	r3, [r4, #4]
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	6023      	str	r3, [r4, #0]
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f043 0308 	orr.w	r3, r3, #8
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	6923      	ldr	r3, [r4, #16]
 8006edc:	b94b      	cbnz	r3, 8006ef2 <__swsetup_r+0x7a>
 8006ede:	89a3      	ldrh	r3, [r4, #12]
 8006ee0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006ee4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006ee8:	d003      	beq.n	8006ef2 <__swsetup_r+0x7a>
 8006eea:	4621      	mov	r1, r4
 8006eec:	4628      	mov	r0, r5
 8006eee:	f000 fd2f 	bl	8007950 <__smakebuf_r>
 8006ef2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ef6:	f013 0201 	ands.w	r2, r3, #1
 8006efa:	d00a      	beq.n	8006f12 <__swsetup_r+0x9a>
 8006efc:	2200      	movs	r2, #0
 8006efe:	60a2      	str	r2, [r4, #8]
 8006f00:	6962      	ldr	r2, [r4, #20]
 8006f02:	4252      	negs	r2, r2
 8006f04:	61a2      	str	r2, [r4, #24]
 8006f06:	6922      	ldr	r2, [r4, #16]
 8006f08:	b942      	cbnz	r2, 8006f1c <__swsetup_r+0xa4>
 8006f0a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006f0e:	d1c5      	bne.n	8006e9c <__swsetup_r+0x24>
 8006f10:	bd38      	pop	{r3, r4, r5, pc}
 8006f12:	0799      	lsls	r1, r3, #30
 8006f14:	bf58      	it	pl
 8006f16:	6962      	ldrpl	r2, [r4, #20]
 8006f18:	60a2      	str	r2, [r4, #8]
 8006f1a:	e7f4      	b.n	8006f06 <__swsetup_r+0x8e>
 8006f1c:	2000      	movs	r0, #0
 8006f1e:	e7f7      	b.n	8006f10 <__swsetup_r+0x98>
 8006f20:	20000030 	.word	0x20000030

08006f24 <memset>:
 8006f24:	4402      	add	r2, r0
 8006f26:	4603      	mov	r3, r0
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	d100      	bne.n	8006f2e <memset+0xa>
 8006f2c:	4770      	bx	lr
 8006f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8006f32:	e7f9      	b.n	8006f28 <memset+0x4>

08006f34 <_close_r>:
 8006f34:	b538      	push	{r3, r4, r5, lr}
 8006f36:	4d06      	ldr	r5, [pc, #24]	@ (8006f50 <_close_r+0x1c>)
 8006f38:	2300      	movs	r3, #0
 8006f3a:	4604      	mov	r4, r0
 8006f3c:	4608      	mov	r0, r1
 8006f3e:	602b      	str	r3, [r5, #0]
 8006f40:	f7fa feab 	bl	8001c9a <_close>
 8006f44:	1c43      	adds	r3, r0, #1
 8006f46:	d102      	bne.n	8006f4e <_close_r+0x1a>
 8006f48:	682b      	ldr	r3, [r5, #0]
 8006f4a:	b103      	cbz	r3, 8006f4e <_close_r+0x1a>
 8006f4c:	6023      	str	r3, [r4, #0]
 8006f4e:	bd38      	pop	{r3, r4, r5, pc}
 8006f50:	2000047c 	.word	0x2000047c

08006f54 <_lseek_r>:
 8006f54:	b538      	push	{r3, r4, r5, lr}
 8006f56:	4d07      	ldr	r5, [pc, #28]	@ (8006f74 <_lseek_r+0x20>)
 8006f58:	4604      	mov	r4, r0
 8006f5a:	4608      	mov	r0, r1
 8006f5c:	4611      	mov	r1, r2
 8006f5e:	2200      	movs	r2, #0
 8006f60:	602a      	str	r2, [r5, #0]
 8006f62:	461a      	mov	r2, r3
 8006f64:	f7fa fec0 	bl	8001ce8 <_lseek>
 8006f68:	1c43      	adds	r3, r0, #1
 8006f6a:	d102      	bne.n	8006f72 <_lseek_r+0x1e>
 8006f6c:	682b      	ldr	r3, [r5, #0]
 8006f6e:	b103      	cbz	r3, 8006f72 <_lseek_r+0x1e>
 8006f70:	6023      	str	r3, [r4, #0]
 8006f72:	bd38      	pop	{r3, r4, r5, pc}
 8006f74:	2000047c 	.word	0x2000047c

08006f78 <_read_r>:
 8006f78:	b538      	push	{r3, r4, r5, lr}
 8006f7a:	4d07      	ldr	r5, [pc, #28]	@ (8006f98 <_read_r+0x20>)
 8006f7c:	4604      	mov	r4, r0
 8006f7e:	4608      	mov	r0, r1
 8006f80:	4611      	mov	r1, r2
 8006f82:	2200      	movs	r2, #0
 8006f84:	602a      	str	r2, [r5, #0]
 8006f86:	461a      	mov	r2, r3
 8006f88:	f7fa fe4e 	bl	8001c28 <_read>
 8006f8c:	1c43      	adds	r3, r0, #1
 8006f8e:	d102      	bne.n	8006f96 <_read_r+0x1e>
 8006f90:	682b      	ldr	r3, [r5, #0]
 8006f92:	b103      	cbz	r3, 8006f96 <_read_r+0x1e>
 8006f94:	6023      	str	r3, [r4, #0]
 8006f96:	bd38      	pop	{r3, r4, r5, pc}
 8006f98:	2000047c 	.word	0x2000047c

08006f9c <_write_r>:
 8006f9c:	b538      	push	{r3, r4, r5, lr}
 8006f9e:	4d07      	ldr	r5, [pc, #28]	@ (8006fbc <_write_r+0x20>)
 8006fa0:	4604      	mov	r4, r0
 8006fa2:	4608      	mov	r0, r1
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	602a      	str	r2, [r5, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f7fa fe59 	bl	8001c62 <_write>
 8006fb0:	1c43      	adds	r3, r0, #1
 8006fb2:	d102      	bne.n	8006fba <_write_r+0x1e>
 8006fb4:	682b      	ldr	r3, [r5, #0]
 8006fb6:	b103      	cbz	r3, 8006fba <_write_r+0x1e>
 8006fb8:	6023      	str	r3, [r4, #0]
 8006fba:	bd38      	pop	{r3, r4, r5, pc}
 8006fbc:	2000047c 	.word	0x2000047c

08006fc0 <__errno>:
 8006fc0:	4b01      	ldr	r3, [pc, #4]	@ (8006fc8 <__errno+0x8>)
 8006fc2:	6818      	ldr	r0, [r3, #0]
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	20000030 	.word	0x20000030

08006fcc <__libc_init_array>:
 8006fcc:	b570      	push	{r4, r5, r6, lr}
 8006fce:	4d0d      	ldr	r5, [pc, #52]	@ (8007004 <__libc_init_array+0x38>)
 8006fd0:	4c0d      	ldr	r4, [pc, #52]	@ (8007008 <__libc_init_array+0x3c>)
 8006fd2:	1b64      	subs	r4, r4, r5
 8006fd4:	10a4      	asrs	r4, r4, #2
 8006fd6:	2600      	movs	r6, #0
 8006fd8:	42a6      	cmp	r6, r4
 8006fda:	d109      	bne.n	8006ff0 <__libc_init_array+0x24>
 8006fdc:	4d0b      	ldr	r5, [pc, #44]	@ (800700c <__libc_init_array+0x40>)
 8006fde:	4c0c      	ldr	r4, [pc, #48]	@ (8007010 <__libc_init_array+0x44>)
 8006fe0:	f000 fd24 	bl	8007a2c <_init>
 8006fe4:	1b64      	subs	r4, r4, r5
 8006fe6:	10a4      	asrs	r4, r4, #2
 8006fe8:	2600      	movs	r6, #0
 8006fea:	42a6      	cmp	r6, r4
 8006fec:	d105      	bne.n	8006ffa <__libc_init_array+0x2e>
 8006fee:	bd70      	pop	{r4, r5, r6, pc}
 8006ff0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ff4:	4798      	blx	r3
 8006ff6:	3601      	adds	r6, #1
 8006ff8:	e7ee      	b.n	8006fd8 <__libc_init_array+0xc>
 8006ffa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ffe:	4798      	blx	r3
 8007000:	3601      	adds	r6, #1
 8007002:	e7f2      	b.n	8006fea <__libc_init_array+0x1e>
 8007004:	08008050 	.word	0x08008050
 8007008:	08008050 	.word	0x08008050
 800700c:	08008050 	.word	0x08008050
 8007010:	08008054 	.word	0x08008054

08007014 <__retarget_lock_init_recursive>:
 8007014:	4770      	bx	lr

08007016 <__retarget_lock_acquire_recursive>:
 8007016:	4770      	bx	lr

08007018 <__retarget_lock_release_recursive>:
 8007018:	4770      	bx	lr
	...

0800701c <_free_r>:
 800701c:	b538      	push	{r3, r4, r5, lr}
 800701e:	4605      	mov	r5, r0
 8007020:	2900      	cmp	r1, #0
 8007022:	d041      	beq.n	80070a8 <_free_r+0x8c>
 8007024:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007028:	1f0c      	subs	r4, r1, #4
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfb8      	it	lt
 800702e:	18e4      	addlt	r4, r4, r3
 8007030:	f000 f8e0 	bl	80071f4 <__malloc_lock>
 8007034:	4a1d      	ldr	r2, [pc, #116]	@ (80070ac <_free_r+0x90>)
 8007036:	6813      	ldr	r3, [r2, #0]
 8007038:	b933      	cbnz	r3, 8007048 <_free_r+0x2c>
 800703a:	6063      	str	r3, [r4, #4]
 800703c:	6014      	str	r4, [r2, #0]
 800703e:	4628      	mov	r0, r5
 8007040:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007044:	f000 b8dc 	b.w	8007200 <__malloc_unlock>
 8007048:	42a3      	cmp	r3, r4
 800704a:	d908      	bls.n	800705e <_free_r+0x42>
 800704c:	6820      	ldr	r0, [r4, #0]
 800704e:	1821      	adds	r1, r4, r0
 8007050:	428b      	cmp	r3, r1
 8007052:	bf01      	itttt	eq
 8007054:	6819      	ldreq	r1, [r3, #0]
 8007056:	685b      	ldreq	r3, [r3, #4]
 8007058:	1809      	addeq	r1, r1, r0
 800705a:	6021      	streq	r1, [r4, #0]
 800705c:	e7ed      	b.n	800703a <_free_r+0x1e>
 800705e:	461a      	mov	r2, r3
 8007060:	685b      	ldr	r3, [r3, #4]
 8007062:	b10b      	cbz	r3, 8007068 <_free_r+0x4c>
 8007064:	42a3      	cmp	r3, r4
 8007066:	d9fa      	bls.n	800705e <_free_r+0x42>
 8007068:	6811      	ldr	r1, [r2, #0]
 800706a:	1850      	adds	r0, r2, r1
 800706c:	42a0      	cmp	r0, r4
 800706e:	d10b      	bne.n	8007088 <_free_r+0x6c>
 8007070:	6820      	ldr	r0, [r4, #0]
 8007072:	4401      	add	r1, r0
 8007074:	1850      	adds	r0, r2, r1
 8007076:	4283      	cmp	r3, r0
 8007078:	6011      	str	r1, [r2, #0]
 800707a:	d1e0      	bne.n	800703e <_free_r+0x22>
 800707c:	6818      	ldr	r0, [r3, #0]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	6053      	str	r3, [r2, #4]
 8007082:	4408      	add	r0, r1
 8007084:	6010      	str	r0, [r2, #0]
 8007086:	e7da      	b.n	800703e <_free_r+0x22>
 8007088:	d902      	bls.n	8007090 <_free_r+0x74>
 800708a:	230c      	movs	r3, #12
 800708c:	602b      	str	r3, [r5, #0]
 800708e:	e7d6      	b.n	800703e <_free_r+0x22>
 8007090:	6820      	ldr	r0, [r4, #0]
 8007092:	1821      	adds	r1, r4, r0
 8007094:	428b      	cmp	r3, r1
 8007096:	bf04      	itt	eq
 8007098:	6819      	ldreq	r1, [r3, #0]
 800709a:	685b      	ldreq	r3, [r3, #4]
 800709c:	6063      	str	r3, [r4, #4]
 800709e:	bf04      	itt	eq
 80070a0:	1809      	addeq	r1, r1, r0
 80070a2:	6021      	streq	r1, [r4, #0]
 80070a4:	6054      	str	r4, [r2, #4]
 80070a6:	e7ca      	b.n	800703e <_free_r+0x22>
 80070a8:	bd38      	pop	{r3, r4, r5, pc}
 80070aa:	bf00      	nop
 80070ac:	20000488 	.word	0x20000488

080070b0 <sbrk_aligned>:
 80070b0:	b570      	push	{r4, r5, r6, lr}
 80070b2:	4e0f      	ldr	r6, [pc, #60]	@ (80070f0 <sbrk_aligned+0x40>)
 80070b4:	460c      	mov	r4, r1
 80070b6:	6831      	ldr	r1, [r6, #0]
 80070b8:	4605      	mov	r5, r0
 80070ba:	b911      	cbnz	r1, 80070c2 <sbrk_aligned+0x12>
 80070bc:	f000 fca6 	bl	8007a0c <_sbrk_r>
 80070c0:	6030      	str	r0, [r6, #0]
 80070c2:	4621      	mov	r1, r4
 80070c4:	4628      	mov	r0, r5
 80070c6:	f000 fca1 	bl	8007a0c <_sbrk_r>
 80070ca:	1c43      	adds	r3, r0, #1
 80070cc:	d103      	bne.n	80070d6 <sbrk_aligned+0x26>
 80070ce:	f04f 34ff 	mov.w	r4, #4294967295
 80070d2:	4620      	mov	r0, r4
 80070d4:	bd70      	pop	{r4, r5, r6, pc}
 80070d6:	1cc4      	adds	r4, r0, #3
 80070d8:	f024 0403 	bic.w	r4, r4, #3
 80070dc:	42a0      	cmp	r0, r4
 80070de:	d0f8      	beq.n	80070d2 <sbrk_aligned+0x22>
 80070e0:	1a21      	subs	r1, r4, r0
 80070e2:	4628      	mov	r0, r5
 80070e4:	f000 fc92 	bl	8007a0c <_sbrk_r>
 80070e8:	3001      	adds	r0, #1
 80070ea:	d1f2      	bne.n	80070d2 <sbrk_aligned+0x22>
 80070ec:	e7ef      	b.n	80070ce <sbrk_aligned+0x1e>
 80070ee:	bf00      	nop
 80070f0:	20000484 	.word	0x20000484

080070f4 <_malloc_r>:
 80070f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80070f8:	1ccd      	adds	r5, r1, #3
 80070fa:	f025 0503 	bic.w	r5, r5, #3
 80070fe:	3508      	adds	r5, #8
 8007100:	2d0c      	cmp	r5, #12
 8007102:	bf38      	it	cc
 8007104:	250c      	movcc	r5, #12
 8007106:	2d00      	cmp	r5, #0
 8007108:	4606      	mov	r6, r0
 800710a:	db01      	blt.n	8007110 <_malloc_r+0x1c>
 800710c:	42a9      	cmp	r1, r5
 800710e:	d904      	bls.n	800711a <_malloc_r+0x26>
 8007110:	230c      	movs	r3, #12
 8007112:	6033      	str	r3, [r6, #0]
 8007114:	2000      	movs	r0, #0
 8007116:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800711a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80071f0 <_malloc_r+0xfc>
 800711e:	f000 f869 	bl	80071f4 <__malloc_lock>
 8007122:	f8d8 3000 	ldr.w	r3, [r8]
 8007126:	461c      	mov	r4, r3
 8007128:	bb44      	cbnz	r4, 800717c <_malloc_r+0x88>
 800712a:	4629      	mov	r1, r5
 800712c:	4630      	mov	r0, r6
 800712e:	f7ff ffbf 	bl	80070b0 <sbrk_aligned>
 8007132:	1c43      	adds	r3, r0, #1
 8007134:	4604      	mov	r4, r0
 8007136:	d158      	bne.n	80071ea <_malloc_r+0xf6>
 8007138:	f8d8 4000 	ldr.w	r4, [r8]
 800713c:	4627      	mov	r7, r4
 800713e:	2f00      	cmp	r7, #0
 8007140:	d143      	bne.n	80071ca <_malloc_r+0xd6>
 8007142:	2c00      	cmp	r4, #0
 8007144:	d04b      	beq.n	80071de <_malloc_r+0xea>
 8007146:	6823      	ldr	r3, [r4, #0]
 8007148:	4639      	mov	r1, r7
 800714a:	4630      	mov	r0, r6
 800714c:	eb04 0903 	add.w	r9, r4, r3
 8007150:	f000 fc5c 	bl	8007a0c <_sbrk_r>
 8007154:	4581      	cmp	r9, r0
 8007156:	d142      	bne.n	80071de <_malloc_r+0xea>
 8007158:	6821      	ldr	r1, [r4, #0]
 800715a:	1a6d      	subs	r5, r5, r1
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff ffa6 	bl	80070b0 <sbrk_aligned>
 8007164:	3001      	adds	r0, #1
 8007166:	d03a      	beq.n	80071de <_malloc_r+0xea>
 8007168:	6823      	ldr	r3, [r4, #0]
 800716a:	442b      	add	r3, r5
 800716c:	6023      	str	r3, [r4, #0]
 800716e:	f8d8 3000 	ldr.w	r3, [r8]
 8007172:	685a      	ldr	r2, [r3, #4]
 8007174:	bb62      	cbnz	r2, 80071d0 <_malloc_r+0xdc>
 8007176:	f8c8 7000 	str.w	r7, [r8]
 800717a:	e00f      	b.n	800719c <_malloc_r+0xa8>
 800717c:	6822      	ldr	r2, [r4, #0]
 800717e:	1b52      	subs	r2, r2, r5
 8007180:	d420      	bmi.n	80071c4 <_malloc_r+0xd0>
 8007182:	2a0b      	cmp	r2, #11
 8007184:	d917      	bls.n	80071b6 <_malloc_r+0xc2>
 8007186:	1961      	adds	r1, r4, r5
 8007188:	42a3      	cmp	r3, r4
 800718a:	6025      	str	r5, [r4, #0]
 800718c:	bf18      	it	ne
 800718e:	6059      	strne	r1, [r3, #4]
 8007190:	6863      	ldr	r3, [r4, #4]
 8007192:	bf08      	it	eq
 8007194:	f8c8 1000 	streq.w	r1, [r8]
 8007198:	5162      	str	r2, [r4, r5]
 800719a:	604b      	str	r3, [r1, #4]
 800719c:	4630      	mov	r0, r6
 800719e:	f000 f82f 	bl	8007200 <__malloc_unlock>
 80071a2:	f104 000b 	add.w	r0, r4, #11
 80071a6:	1d23      	adds	r3, r4, #4
 80071a8:	f020 0007 	bic.w	r0, r0, #7
 80071ac:	1ac2      	subs	r2, r0, r3
 80071ae:	bf1c      	itt	ne
 80071b0:	1a1b      	subne	r3, r3, r0
 80071b2:	50a3      	strne	r3, [r4, r2]
 80071b4:	e7af      	b.n	8007116 <_malloc_r+0x22>
 80071b6:	6862      	ldr	r2, [r4, #4]
 80071b8:	42a3      	cmp	r3, r4
 80071ba:	bf0c      	ite	eq
 80071bc:	f8c8 2000 	streq.w	r2, [r8]
 80071c0:	605a      	strne	r2, [r3, #4]
 80071c2:	e7eb      	b.n	800719c <_malloc_r+0xa8>
 80071c4:	4623      	mov	r3, r4
 80071c6:	6864      	ldr	r4, [r4, #4]
 80071c8:	e7ae      	b.n	8007128 <_malloc_r+0x34>
 80071ca:	463c      	mov	r4, r7
 80071cc:	687f      	ldr	r7, [r7, #4]
 80071ce:	e7b6      	b.n	800713e <_malloc_r+0x4a>
 80071d0:	461a      	mov	r2, r3
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	42a3      	cmp	r3, r4
 80071d6:	d1fb      	bne.n	80071d0 <_malloc_r+0xdc>
 80071d8:	2300      	movs	r3, #0
 80071da:	6053      	str	r3, [r2, #4]
 80071dc:	e7de      	b.n	800719c <_malloc_r+0xa8>
 80071de:	230c      	movs	r3, #12
 80071e0:	6033      	str	r3, [r6, #0]
 80071e2:	4630      	mov	r0, r6
 80071e4:	f000 f80c 	bl	8007200 <__malloc_unlock>
 80071e8:	e794      	b.n	8007114 <_malloc_r+0x20>
 80071ea:	6005      	str	r5, [r0, #0]
 80071ec:	e7d6      	b.n	800719c <_malloc_r+0xa8>
 80071ee:	bf00      	nop
 80071f0:	20000488 	.word	0x20000488

080071f4 <__malloc_lock>:
 80071f4:	4801      	ldr	r0, [pc, #4]	@ (80071fc <__malloc_lock+0x8>)
 80071f6:	f7ff bf0e 	b.w	8007016 <__retarget_lock_acquire_recursive>
 80071fa:	bf00      	nop
 80071fc:	20000480 	.word	0x20000480

08007200 <__malloc_unlock>:
 8007200:	4801      	ldr	r0, [pc, #4]	@ (8007208 <__malloc_unlock+0x8>)
 8007202:	f7ff bf09 	b.w	8007018 <__retarget_lock_release_recursive>
 8007206:	bf00      	nop
 8007208:	20000480 	.word	0x20000480

0800720c <__sfputc_r>:
 800720c:	6893      	ldr	r3, [r2, #8]
 800720e:	3b01      	subs	r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	b410      	push	{r4}
 8007214:	6093      	str	r3, [r2, #8]
 8007216:	da08      	bge.n	800722a <__sfputc_r+0x1e>
 8007218:	6994      	ldr	r4, [r2, #24]
 800721a:	42a3      	cmp	r3, r4
 800721c:	db01      	blt.n	8007222 <__sfputc_r+0x16>
 800721e:	290a      	cmp	r1, #10
 8007220:	d103      	bne.n	800722a <__sfputc_r+0x1e>
 8007222:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007226:	f7ff bde8 	b.w	8006dfa <__swbuf_r>
 800722a:	6813      	ldr	r3, [r2, #0]
 800722c:	1c58      	adds	r0, r3, #1
 800722e:	6010      	str	r0, [r2, #0]
 8007230:	7019      	strb	r1, [r3, #0]
 8007232:	4608      	mov	r0, r1
 8007234:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007238:	4770      	bx	lr

0800723a <__sfputs_r>:
 800723a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800723c:	4606      	mov	r6, r0
 800723e:	460f      	mov	r7, r1
 8007240:	4614      	mov	r4, r2
 8007242:	18d5      	adds	r5, r2, r3
 8007244:	42ac      	cmp	r4, r5
 8007246:	d101      	bne.n	800724c <__sfputs_r+0x12>
 8007248:	2000      	movs	r0, #0
 800724a:	e007      	b.n	800725c <__sfputs_r+0x22>
 800724c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007250:	463a      	mov	r2, r7
 8007252:	4630      	mov	r0, r6
 8007254:	f7ff ffda 	bl	800720c <__sfputc_r>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d1f3      	bne.n	8007244 <__sfputs_r+0xa>
 800725c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007260 <_vfiprintf_r>:
 8007260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007264:	460d      	mov	r5, r1
 8007266:	b09d      	sub	sp, #116	@ 0x74
 8007268:	4614      	mov	r4, r2
 800726a:	4698      	mov	r8, r3
 800726c:	4606      	mov	r6, r0
 800726e:	b118      	cbz	r0, 8007278 <_vfiprintf_r+0x18>
 8007270:	6a03      	ldr	r3, [r0, #32]
 8007272:	b90b      	cbnz	r3, 8007278 <_vfiprintf_r+0x18>
 8007274:	f7ff fcd8 	bl	8006c28 <__sinit>
 8007278:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800727a:	07d9      	lsls	r1, r3, #31
 800727c:	d405      	bmi.n	800728a <_vfiprintf_r+0x2a>
 800727e:	89ab      	ldrh	r3, [r5, #12]
 8007280:	059a      	lsls	r2, r3, #22
 8007282:	d402      	bmi.n	800728a <_vfiprintf_r+0x2a>
 8007284:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007286:	f7ff fec6 	bl	8007016 <__retarget_lock_acquire_recursive>
 800728a:	89ab      	ldrh	r3, [r5, #12]
 800728c:	071b      	lsls	r3, r3, #28
 800728e:	d501      	bpl.n	8007294 <_vfiprintf_r+0x34>
 8007290:	692b      	ldr	r3, [r5, #16]
 8007292:	b99b      	cbnz	r3, 80072bc <_vfiprintf_r+0x5c>
 8007294:	4629      	mov	r1, r5
 8007296:	4630      	mov	r0, r6
 8007298:	f7ff fdee 	bl	8006e78 <__swsetup_r>
 800729c:	b170      	cbz	r0, 80072bc <_vfiprintf_r+0x5c>
 800729e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072a0:	07dc      	lsls	r4, r3, #31
 80072a2:	d504      	bpl.n	80072ae <_vfiprintf_r+0x4e>
 80072a4:	f04f 30ff 	mov.w	r0, #4294967295
 80072a8:	b01d      	add	sp, #116	@ 0x74
 80072aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ae:	89ab      	ldrh	r3, [r5, #12]
 80072b0:	0598      	lsls	r0, r3, #22
 80072b2:	d4f7      	bmi.n	80072a4 <_vfiprintf_r+0x44>
 80072b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072b6:	f7ff feaf 	bl	8007018 <__retarget_lock_release_recursive>
 80072ba:	e7f3      	b.n	80072a4 <_vfiprintf_r+0x44>
 80072bc:	2300      	movs	r3, #0
 80072be:	9309      	str	r3, [sp, #36]	@ 0x24
 80072c0:	2320      	movs	r3, #32
 80072c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80072ca:	2330      	movs	r3, #48	@ 0x30
 80072cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800747c <_vfiprintf_r+0x21c>
 80072d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072d4:	f04f 0901 	mov.w	r9, #1
 80072d8:	4623      	mov	r3, r4
 80072da:	469a      	mov	sl, r3
 80072dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072e0:	b10a      	cbz	r2, 80072e6 <_vfiprintf_r+0x86>
 80072e2:	2a25      	cmp	r2, #37	@ 0x25
 80072e4:	d1f9      	bne.n	80072da <_vfiprintf_r+0x7a>
 80072e6:	ebba 0b04 	subs.w	fp, sl, r4
 80072ea:	d00b      	beq.n	8007304 <_vfiprintf_r+0xa4>
 80072ec:	465b      	mov	r3, fp
 80072ee:	4622      	mov	r2, r4
 80072f0:	4629      	mov	r1, r5
 80072f2:	4630      	mov	r0, r6
 80072f4:	f7ff ffa1 	bl	800723a <__sfputs_r>
 80072f8:	3001      	adds	r0, #1
 80072fa:	f000 80a7 	beq.w	800744c <_vfiprintf_r+0x1ec>
 80072fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007300:	445a      	add	r2, fp
 8007302:	9209      	str	r2, [sp, #36]	@ 0x24
 8007304:	f89a 3000 	ldrb.w	r3, [sl]
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 809f 	beq.w	800744c <_vfiprintf_r+0x1ec>
 800730e:	2300      	movs	r3, #0
 8007310:	f04f 32ff 	mov.w	r2, #4294967295
 8007314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007318:	f10a 0a01 	add.w	sl, sl, #1
 800731c:	9304      	str	r3, [sp, #16]
 800731e:	9307      	str	r3, [sp, #28]
 8007320:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007324:	931a      	str	r3, [sp, #104]	@ 0x68
 8007326:	4654      	mov	r4, sl
 8007328:	2205      	movs	r2, #5
 800732a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732e:	4853      	ldr	r0, [pc, #332]	@ (800747c <_vfiprintf_r+0x21c>)
 8007330:	f7f8 ff76 	bl	8000220 <memchr>
 8007334:	9a04      	ldr	r2, [sp, #16]
 8007336:	b9d8      	cbnz	r0, 8007370 <_vfiprintf_r+0x110>
 8007338:	06d1      	lsls	r1, r2, #27
 800733a:	bf44      	itt	mi
 800733c:	2320      	movmi	r3, #32
 800733e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007342:	0713      	lsls	r3, r2, #28
 8007344:	bf44      	itt	mi
 8007346:	232b      	movmi	r3, #43	@ 0x2b
 8007348:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800734c:	f89a 3000 	ldrb.w	r3, [sl]
 8007350:	2b2a      	cmp	r3, #42	@ 0x2a
 8007352:	d015      	beq.n	8007380 <_vfiprintf_r+0x120>
 8007354:	9a07      	ldr	r2, [sp, #28]
 8007356:	4654      	mov	r4, sl
 8007358:	2000      	movs	r0, #0
 800735a:	f04f 0c0a 	mov.w	ip, #10
 800735e:	4621      	mov	r1, r4
 8007360:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007364:	3b30      	subs	r3, #48	@ 0x30
 8007366:	2b09      	cmp	r3, #9
 8007368:	d94b      	bls.n	8007402 <_vfiprintf_r+0x1a2>
 800736a:	b1b0      	cbz	r0, 800739a <_vfiprintf_r+0x13a>
 800736c:	9207      	str	r2, [sp, #28]
 800736e:	e014      	b.n	800739a <_vfiprintf_r+0x13a>
 8007370:	eba0 0308 	sub.w	r3, r0, r8
 8007374:	fa09 f303 	lsl.w	r3, r9, r3
 8007378:	4313      	orrs	r3, r2
 800737a:	9304      	str	r3, [sp, #16]
 800737c:	46a2      	mov	sl, r4
 800737e:	e7d2      	b.n	8007326 <_vfiprintf_r+0xc6>
 8007380:	9b03      	ldr	r3, [sp, #12]
 8007382:	1d19      	adds	r1, r3, #4
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	9103      	str	r1, [sp, #12]
 8007388:	2b00      	cmp	r3, #0
 800738a:	bfbb      	ittet	lt
 800738c:	425b      	neglt	r3, r3
 800738e:	f042 0202 	orrlt.w	r2, r2, #2
 8007392:	9307      	strge	r3, [sp, #28]
 8007394:	9307      	strlt	r3, [sp, #28]
 8007396:	bfb8      	it	lt
 8007398:	9204      	strlt	r2, [sp, #16]
 800739a:	7823      	ldrb	r3, [r4, #0]
 800739c:	2b2e      	cmp	r3, #46	@ 0x2e
 800739e:	d10a      	bne.n	80073b6 <_vfiprintf_r+0x156>
 80073a0:	7863      	ldrb	r3, [r4, #1]
 80073a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80073a4:	d132      	bne.n	800740c <_vfiprintf_r+0x1ac>
 80073a6:	9b03      	ldr	r3, [sp, #12]
 80073a8:	1d1a      	adds	r2, r3, #4
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	9203      	str	r2, [sp, #12]
 80073ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073b2:	3402      	adds	r4, #2
 80073b4:	9305      	str	r3, [sp, #20]
 80073b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800748c <_vfiprintf_r+0x22c>
 80073ba:	7821      	ldrb	r1, [r4, #0]
 80073bc:	2203      	movs	r2, #3
 80073be:	4650      	mov	r0, sl
 80073c0:	f7f8 ff2e 	bl	8000220 <memchr>
 80073c4:	b138      	cbz	r0, 80073d6 <_vfiprintf_r+0x176>
 80073c6:	9b04      	ldr	r3, [sp, #16]
 80073c8:	eba0 000a 	sub.w	r0, r0, sl
 80073cc:	2240      	movs	r2, #64	@ 0x40
 80073ce:	4082      	lsls	r2, r0
 80073d0:	4313      	orrs	r3, r2
 80073d2:	3401      	adds	r4, #1
 80073d4:	9304      	str	r3, [sp, #16]
 80073d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073da:	4829      	ldr	r0, [pc, #164]	@ (8007480 <_vfiprintf_r+0x220>)
 80073dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80073e0:	2206      	movs	r2, #6
 80073e2:	f7f8 ff1d 	bl	8000220 <memchr>
 80073e6:	2800      	cmp	r0, #0
 80073e8:	d03f      	beq.n	800746a <_vfiprintf_r+0x20a>
 80073ea:	4b26      	ldr	r3, [pc, #152]	@ (8007484 <_vfiprintf_r+0x224>)
 80073ec:	bb1b      	cbnz	r3, 8007436 <_vfiprintf_r+0x1d6>
 80073ee:	9b03      	ldr	r3, [sp, #12]
 80073f0:	3307      	adds	r3, #7
 80073f2:	f023 0307 	bic.w	r3, r3, #7
 80073f6:	3308      	adds	r3, #8
 80073f8:	9303      	str	r3, [sp, #12]
 80073fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073fc:	443b      	add	r3, r7
 80073fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8007400:	e76a      	b.n	80072d8 <_vfiprintf_r+0x78>
 8007402:	fb0c 3202 	mla	r2, ip, r2, r3
 8007406:	460c      	mov	r4, r1
 8007408:	2001      	movs	r0, #1
 800740a:	e7a8      	b.n	800735e <_vfiprintf_r+0xfe>
 800740c:	2300      	movs	r3, #0
 800740e:	3401      	adds	r4, #1
 8007410:	9305      	str	r3, [sp, #20]
 8007412:	4619      	mov	r1, r3
 8007414:	f04f 0c0a 	mov.w	ip, #10
 8007418:	4620      	mov	r0, r4
 800741a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800741e:	3a30      	subs	r2, #48	@ 0x30
 8007420:	2a09      	cmp	r2, #9
 8007422:	d903      	bls.n	800742c <_vfiprintf_r+0x1cc>
 8007424:	2b00      	cmp	r3, #0
 8007426:	d0c6      	beq.n	80073b6 <_vfiprintf_r+0x156>
 8007428:	9105      	str	r1, [sp, #20]
 800742a:	e7c4      	b.n	80073b6 <_vfiprintf_r+0x156>
 800742c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007430:	4604      	mov	r4, r0
 8007432:	2301      	movs	r3, #1
 8007434:	e7f0      	b.n	8007418 <_vfiprintf_r+0x1b8>
 8007436:	ab03      	add	r3, sp, #12
 8007438:	9300      	str	r3, [sp, #0]
 800743a:	462a      	mov	r2, r5
 800743c:	4b12      	ldr	r3, [pc, #72]	@ (8007488 <_vfiprintf_r+0x228>)
 800743e:	a904      	add	r1, sp, #16
 8007440:	4630      	mov	r0, r6
 8007442:	f3af 8000 	nop.w
 8007446:	4607      	mov	r7, r0
 8007448:	1c78      	adds	r0, r7, #1
 800744a:	d1d6      	bne.n	80073fa <_vfiprintf_r+0x19a>
 800744c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744e:	07d9      	lsls	r1, r3, #31
 8007450:	d405      	bmi.n	800745e <_vfiprintf_r+0x1fe>
 8007452:	89ab      	ldrh	r3, [r5, #12]
 8007454:	059a      	lsls	r2, r3, #22
 8007456:	d402      	bmi.n	800745e <_vfiprintf_r+0x1fe>
 8007458:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800745a:	f7ff fddd 	bl	8007018 <__retarget_lock_release_recursive>
 800745e:	89ab      	ldrh	r3, [r5, #12]
 8007460:	065b      	lsls	r3, r3, #25
 8007462:	f53f af1f 	bmi.w	80072a4 <_vfiprintf_r+0x44>
 8007466:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007468:	e71e      	b.n	80072a8 <_vfiprintf_r+0x48>
 800746a:	ab03      	add	r3, sp, #12
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	462a      	mov	r2, r5
 8007470:	4b05      	ldr	r3, [pc, #20]	@ (8007488 <_vfiprintf_r+0x228>)
 8007472:	a904      	add	r1, sp, #16
 8007474:	4630      	mov	r0, r6
 8007476:	f000 f879 	bl	800756c <_printf_i>
 800747a:	e7e4      	b.n	8007446 <_vfiprintf_r+0x1e6>
 800747c:	08008014 	.word	0x08008014
 8007480:	0800801e 	.word	0x0800801e
 8007484:	00000000 	.word	0x00000000
 8007488:	0800723b 	.word	0x0800723b
 800748c:	0800801a 	.word	0x0800801a

08007490 <_printf_common>:
 8007490:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007494:	4616      	mov	r6, r2
 8007496:	4698      	mov	r8, r3
 8007498:	688a      	ldr	r2, [r1, #8]
 800749a:	690b      	ldr	r3, [r1, #16]
 800749c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074a0:	4293      	cmp	r3, r2
 80074a2:	bfb8      	it	lt
 80074a4:	4613      	movlt	r3, r2
 80074a6:	6033      	str	r3, [r6, #0]
 80074a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074ac:	4607      	mov	r7, r0
 80074ae:	460c      	mov	r4, r1
 80074b0:	b10a      	cbz	r2, 80074b6 <_printf_common+0x26>
 80074b2:	3301      	adds	r3, #1
 80074b4:	6033      	str	r3, [r6, #0]
 80074b6:	6823      	ldr	r3, [r4, #0]
 80074b8:	0699      	lsls	r1, r3, #26
 80074ba:	bf42      	ittt	mi
 80074bc:	6833      	ldrmi	r3, [r6, #0]
 80074be:	3302      	addmi	r3, #2
 80074c0:	6033      	strmi	r3, [r6, #0]
 80074c2:	6825      	ldr	r5, [r4, #0]
 80074c4:	f015 0506 	ands.w	r5, r5, #6
 80074c8:	d106      	bne.n	80074d8 <_printf_common+0x48>
 80074ca:	f104 0a19 	add.w	sl, r4, #25
 80074ce:	68e3      	ldr	r3, [r4, #12]
 80074d0:	6832      	ldr	r2, [r6, #0]
 80074d2:	1a9b      	subs	r3, r3, r2
 80074d4:	42ab      	cmp	r3, r5
 80074d6:	dc26      	bgt.n	8007526 <_printf_common+0x96>
 80074d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80074dc:	6822      	ldr	r2, [r4, #0]
 80074de:	3b00      	subs	r3, #0
 80074e0:	bf18      	it	ne
 80074e2:	2301      	movne	r3, #1
 80074e4:	0692      	lsls	r2, r2, #26
 80074e6:	d42b      	bmi.n	8007540 <_printf_common+0xb0>
 80074e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80074ec:	4641      	mov	r1, r8
 80074ee:	4638      	mov	r0, r7
 80074f0:	47c8      	blx	r9
 80074f2:	3001      	adds	r0, #1
 80074f4:	d01e      	beq.n	8007534 <_printf_common+0xa4>
 80074f6:	6823      	ldr	r3, [r4, #0]
 80074f8:	6922      	ldr	r2, [r4, #16]
 80074fa:	f003 0306 	and.w	r3, r3, #6
 80074fe:	2b04      	cmp	r3, #4
 8007500:	bf02      	ittt	eq
 8007502:	68e5      	ldreq	r5, [r4, #12]
 8007504:	6833      	ldreq	r3, [r6, #0]
 8007506:	1aed      	subeq	r5, r5, r3
 8007508:	68a3      	ldr	r3, [r4, #8]
 800750a:	bf0c      	ite	eq
 800750c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007510:	2500      	movne	r5, #0
 8007512:	4293      	cmp	r3, r2
 8007514:	bfc4      	itt	gt
 8007516:	1a9b      	subgt	r3, r3, r2
 8007518:	18ed      	addgt	r5, r5, r3
 800751a:	2600      	movs	r6, #0
 800751c:	341a      	adds	r4, #26
 800751e:	42b5      	cmp	r5, r6
 8007520:	d11a      	bne.n	8007558 <_printf_common+0xc8>
 8007522:	2000      	movs	r0, #0
 8007524:	e008      	b.n	8007538 <_printf_common+0xa8>
 8007526:	2301      	movs	r3, #1
 8007528:	4652      	mov	r2, sl
 800752a:	4641      	mov	r1, r8
 800752c:	4638      	mov	r0, r7
 800752e:	47c8      	blx	r9
 8007530:	3001      	adds	r0, #1
 8007532:	d103      	bne.n	800753c <_printf_common+0xac>
 8007534:	f04f 30ff 	mov.w	r0, #4294967295
 8007538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800753c:	3501      	adds	r5, #1
 800753e:	e7c6      	b.n	80074ce <_printf_common+0x3e>
 8007540:	18e1      	adds	r1, r4, r3
 8007542:	1c5a      	adds	r2, r3, #1
 8007544:	2030      	movs	r0, #48	@ 0x30
 8007546:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800754a:	4422      	add	r2, r4
 800754c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007550:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007554:	3302      	adds	r3, #2
 8007556:	e7c7      	b.n	80074e8 <_printf_common+0x58>
 8007558:	2301      	movs	r3, #1
 800755a:	4622      	mov	r2, r4
 800755c:	4641      	mov	r1, r8
 800755e:	4638      	mov	r0, r7
 8007560:	47c8      	blx	r9
 8007562:	3001      	adds	r0, #1
 8007564:	d0e6      	beq.n	8007534 <_printf_common+0xa4>
 8007566:	3601      	adds	r6, #1
 8007568:	e7d9      	b.n	800751e <_printf_common+0x8e>
	...

0800756c <_printf_i>:
 800756c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007570:	7e0f      	ldrb	r7, [r1, #24]
 8007572:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007574:	2f78      	cmp	r7, #120	@ 0x78
 8007576:	4691      	mov	r9, r2
 8007578:	4680      	mov	r8, r0
 800757a:	460c      	mov	r4, r1
 800757c:	469a      	mov	sl, r3
 800757e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007582:	d807      	bhi.n	8007594 <_printf_i+0x28>
 8007584:	2f62      	cmp	r7, #98	@ 0x62
 8007586:	d80a      	bhi.n	800759e <_printf_i+0x32>
 8007588:	2f00      	cmp	r7, #0
 800758a:	f000 80d2 	beq.w	8007732 <_printf_i+0x1c6>
 800758e:	2f58      	cmp	r7, #88	@ 0x58
 8007590:	f000 80b9 	beq.w	8007706 <_printf_i+0x19a>
 8007594:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007598:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800759c:	e03a      	b.n	8007614 <_printf_i+0xa8>
 800759e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075a2:	2b15      	cmp	r3, #21
 80075a4:	d8f6      	bhi.n	8007594 <_printf_i+0x28>
 80075a6:	a101      	add	r1, pc, #4	@ (adr r1, 80075ac <_printf_i+0x40>)
 80075a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075ac:	08007605 	.word	0x08007605
 80075b0:	08007619 	.word	0x08007619
 80075b4:	08007595 	.word	0x08007595
 80075b8:	08007595 	.word	0x08007595
 80075bc:	08007595 	.word	0x08007595
 80075c0:	08007595 	.word	0x08007595
 80075c4:	08007619 	.word	0x08007619
 80075c8:	08007595 	.word	0x08007595
 80075cc:	08007595 	.word	0x08007595
 80075d0:	08007595 	.word	0x08007595
 80075d4:	08007595 	.word	0x08007595
 80075d8:	08007719 	.word	0x08007719
 80075dc:	08007643 	.word	0x08007643
 80075e0:	080076d3 	.word	0x080076d3
 80075e4:	08007595 	.word	0x08007595
 80075e8:	08007595 	.word	0x08007595
 80075ec:	0800773b 	.word	0x0800773b
 80075f0:	08007595 	.word	0x08007595
 80075f4:	08007643 	.word	0x08007643
 80075f8:	08007595 	.word	0x08007595
 80075fc:	08007595 	.word	0x08007595
 8007600:	080076db 	.word	0x080076db
 8007604:	6833      	ldr	r3, [r6, #0]
 8007606:	1d1a      	adds	r2, r3, #4
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	6032      	str	r2, [r6, #0]
 800760c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007610:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007614:	2301      	movs	r3, #1
 8007616:	e09d      	b.n	8007754 <_printf_i+0x1e8>
 8007618:	6833      	ldr	r3, [r6, #0]
 800761a:	6820      	ldr	r0, [r4, #0]
 800761c:	1d19      	adds	r1, r3, #4
 800761e:	6031      	str	r1, [r6, #0]
 8007620:	0606      	lsls	r6, r0, #24
 8007622:	d501      	bpl.n	8007628 <_printf_i+0xbc>
 8007624:	681d      	ldr	r5, [r3, #0]
 8007626:	e003      	b.n	8007630 <_printf_i+0xc4>
 8007628:	0645      	lsls	r5, r0, #25
 800762a:	d5fb      	bpl.n	8007624 <_printf_i+0xb8>
 800762c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007630:	2d00      	cmp	r5, #0
 8007632:	da03      	bge.n	800763c <_printf_i+0xd0>
 8007634:	232d      	movs	r3, #45	@ 0x2d
 8007636:	426d      	negs	r5, r5
 8007638:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800763c:	4859      	ldr	r0, [pc, #356]	@ (80077a4 <_printf_i+0x238>)
 800763e:	230a      	movs	r3, #10
 8007640:	e011      	b.n	8007666 <_printf_i+0xfa>
 8007642:	6821      	ldr	r1, [r4, #0]
 8007644:	6833      	ldr	r3, [r6, #0]
 8007646:	0608      	lsls	r0, r1, #24
 8007648:	f853 5b04 	ldr.w	r5, [r3], #4
 800764c:	d402      	bmi.n	8007654 <_printf_i+0xe8>
 800764e:	0649      	lsls	r1, r1, #25
 8007650:	bf48      	it	mi
 8007652:	b2ad      	uxthmi	r5, r5
 8007654:	2f6f      	cmp	r7, #111	@ 0x6f
 8007656:	4853      	ldr	r0, [pc, #332]	@ (80077a4 <_printf_i+0x238>)
 8007658:	6033      	str	r3, [r6, #0]
 800765a:	bf14      	ite	ne
 800765c:	230a      	movne	r3, #10
 800765e:	2308      	moveq	r3, #8
 8007660:	2100      	movs	r1, #0
 8007662:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007666:	6866      	ldr	r6, [r4, #4]
 8007668:	60a6      	str	r6, [r4, #8]
 800766a:	2e00      	cmp	r6, #0
 800766c:	bfa2      	ittt	ge
 800766e:	6821      	ldrge	r1, [r4, #0]
 8007670:	f021 0104 	bicge.w	r1, r1, #4
 8007674:	6021      	strge	r1, [r4, #0]
 8007676:	b90d      	cbnz	r5, 800767c <_printf_i+0x110>
 8007678:	2e00      	cmp	r6, #0
 800767a:	d04b      	beq.n	8007714 <_printf_i+0x1a8>
 800767c:	4616      	mov	r6, r2
 800767e:	fbb5 f1f3 	udiv	r1, r5, r3
 8007682:	fb03 5711 	mls	r7, r3, r1, r5
 8007686:	5dc7      	ldrb	r7, [r0, r7]
 8007688:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800768c:	462f      	mov	r7, r5
 800768e:	42bb      	cmp	r3, r7
 8007690:	460d      	mov	r5, r1
 8007692:	d9f4      	bls.n	800767e <_printf_i+0x112>
 8007694:	2b08      	cmp	r3, #8
 8007696:	d10b      	bne.n	80076b0 <_printf_i+0x144>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	07df      	lsls	r7, r3, #31
 800769c:	d508      	bpl.n	80076b0 <_printf_i+0x144>
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	6861      	ldr	r1, [r4, #4]
 80076a2:	4299      	cmp	r1, r3
 80076a4:	bfde      	ittt	le
 80076a6:	2330      	movle	r3, #48	@ 0x30
 80076a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076b0:	1b92      	subs	r2, r2, r6
 80076b2:	6122      	str	r2, [r4, #16]
 80076b4:	f8cd a000 	str.w	sl, [sp]
 80076b8:	464b      	mov	r3, r9
 80076ba:	aa03      	add	r2, sp, #12
 80076bc:	4621      	mov	r1, r4
 80076be:	4640      	mov	r0, r8
 80076c0:	f7ff fee6 	bl	8007490 <_printf_common>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d14a      	bne.n	800775e <_printf_i+0x1f2>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295
 80076cc:	b004      	add	sp, #16
 80076ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d2:	6823      	ldr	r3, [r4, #0]
 80076d4:	f043 0320 	orr.w	r3, r3, #32
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	4833      	ldr	r0, [pc, #204]	@ (80077a8 <_printf_i+0x23c>)
 80076dc:	2778      	movs	r7, #120	@ 0x78
 80076de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80076e2:	6823      	ldr	r3, [r4, #0]
 80076e4:	6831      	ldr	r1, [r6, #0]
 80076e6:	061f      	lsls	r7, r3, #24
 80076e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80076ec:	d402      	bmi.n	80076f4 <_printf_i+0x188>
 80076ee:	065f      	lsls	r7, r3, #25
 80076f0:	bf48      	it	mi
 80076f2:	b2ad      	uxthmi	r5, r5
 80076f4:	6031      	str	r1, [r6, #0]
 80076f6:	07d9      	lsls	r1, r3, #31
 80076f8:	bf44      	itt	mi
 80076fa:	f043 0320 	orrmi.w	r3, r3, #32
 80076fe:	6023      	strmi	r3, [r4, #0]
 8007700:	b11d      	cbz	r5, 800770a <_printf_i+0x19e>
 8007702:	2310      	movs	r3, #16
 8007704:	e7ac      	b.n	8007660 <_printf_i+0xf4>
 8007706:	4827      	ldr	r0, [pc, #156]	@ (80077a4 <_printf_i+0x238>)
 8007708:	e7e9      	b.n	80076de <_printf_i+0x172>
 800770a:	6823      	ldr	r3, [r4, #0]
 800770c:	f023 0320 	bic.w	r3, r3, #32
 8007710:	6023      	str	r3, [r4, #0]
 8007712:	e7f6      	b.n	8007702 <_printf_i+0x196>
 8007714:	4616      	mov	r6, r2
 8007716:	e7bd      	b.n	8007694 <_printf_i+0x128>
 8007718:	6833      	ldr	r3, [r6, #0]
 800771a:	6825      	ldr	r5, [r4, #0]
 800771c:	6961      	ldr	r1, [r4, #20]
 800771e:	1d18      	adds	r0, r3, #4
 8007720:	6030      	str	r0, [r6, #0]
 8007722:	062e      	lsls	r6, r5, #24
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	d501      	bpl.n	800772c <_printf_i+0x1c0>
 8007728:	6019      	str	r1, [r3, #0]
 800772a:	e002      	b.n	8007732 <_printf_i+0x1c6>
 800772c:	0668      	lsls	r0, r5, #25
 800772e:	d5fb      	bpl.n	8007728 <_printf_i+0x1bc>
 8007730:	8019      	strh	r1, [r3, #0]
 8007732:	2300      	movs	r3, #0
 8007734:	6123      	str	r3, [r4, #16]
 8007736:	4616      	mov	r6, r2
 8007738:	e7bc      	b.n	80076b4 <_printf_i+0x148>
 800773a:	6833      	ldr	r3, [r6, #0]
 800773c:	1d1a      	adds	r2, r3, #4
 800773e:	6032      	str	r2, [r6, #0]
 8007740:	681e      	ldr	r6, [r3, #0]
 8007742:	6862      	ldr	r2, [r4, #4]
 8007744:	2100      	movs	r1, #0
 8007746:	4630      	mov	r0, r6
 8007748:	f7f8 fd6a 	bl	8000220 <memchr>
 800774c:	b108      	cbz	r0, 8007752 <_printf_i+0x1e6>
 800774e:	1b80      	subs	r0, r0, r6
 8007750:	6060      	str	r0, [r4, #4]
 8007752:	6863      	ldr	r3, [r4, #4]
 8007754:	6123      	str	r3, [r4, #16]
 8007756:	2300      	movs	r3, #0
 8007758:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800775c:	e7aa      	b.n	80076b4 <_printf_i+0x148>
 800775e:	6923      	ldr	r3, [r4, #16]
 8007760:	4632      	mov	r2, r6
 8007762:	4649      	mov	r1, r9
 8007764:	4640      	mov	r0, r8
 8007766:	47d0      	blx	sl
 8007768:	3001      	adds	r0, #1
 800776a:	d0ad      	beq.n	80076c8 <_printf_i+0x15c>
 800776c:	6823      	ldr	r3, [r4, #0]
 800776e:	079b      	lsls	r3, r3, #30
 8007770:	d413      	bmi.n	800779a <_printf_i+0x22e>
 8007772:	68e0      	ldr	r0, [r4, #12]
 8007774:	9b03      	ldr	r3, [sp, #12]
 8007776:	4298      	cmp	r0, r3
 8007778:	bfb8      	it	lt
 800777a:	4618      	movlt	r0, r3
 800777c:	e7a6      	b.n	80076cc <_printf_i+0x160>
 800777e:	2301      	movs	r3, #1
 8007780:	4632      	mov	r2, r6
 8007782:	4649      	mov	r1, r9
 8007784:	4640      	mov	r0, r8
 8007786:	47d0      	blx	sl
 8007788:	3001      	adds	r0, #1
 800778a:	d09d      	beq.n	80076c8 <_printf_i+0x15c>
 800778c:	3501      	adds	r5, #1
 800778e:	68e3      	ldr	r3, [r4, #12]
 8007790:	9903      	ldr	r1, [sp, #12]
 8007792:	1a5b      	subs	r3, r3, r1
 8007794:	42ab      	cmp	r3, r5
 8007796:	dcf2      	bgt.n	800777e <_printf_i+0x212>
 8007798:	e7eb      	b.n	8007772 <_printf_i+0x206>
 800779a:	2500      	movs	r5, #0
 800779c:	f104 0619 	add.w	r6, r4, #25
 80077a0:	e7f5      	b.n	800778e <_printf_i+0x222>
 80077a2:	bf00      	nop
 80077a4:	08008025 	.word	0x08008025
 80077a8:	08008036 	.word	0x08008036

080077ac <__sflush_r>:
 80077ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80077b4:	0716      	lsls	r6, r2, #28
 80077b6:	4605      	mov	r5, r0
 80077b8:	460c      	mov	r4, r1
 80077ba:	d454      	bmi.n	8007866 <__sflush_r+0xba>
 80077bc:	684b      	ldr	r3, [r1, #4]
 80077be:	2b00      	cmp	r3, #0
 80077c0:	dc02      	bgt.n	80077c8 <__sflush_r+0x1c>
 80077c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	dd48      	ble.n	800785a <__sflush_r+0xae>
 80077c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077ca:	2e00      	cmp	r6, #0
 80077cc:	d045      	beq.n	800785a <__sflush_r+0xae>
 80077ce:	2300      	movs	r3, #0
 80077d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80077d4:	682f      	ldr	r7, [r5, #0]
 80077d6:	6a21      	ldr	r1, [r4, #32]
 80077d8:	602b      	str	r3, [r5, #0]
 80077da:	d030      	beq.n	800783e <__sflush_r+0x92>
 80077dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80077de:	89a3      	ldrh	r3, [r4, #12]
 80077e0:	0759      	lsls	r1, r3, #29
 80077e2:	d505      	bpl.n	80077f0 <__sflush_r+0x44>
 80077e4:	6863      	ldr	r3, [r4, #4]
 80077e6:	1ad2      	subs	r2, r2, r3
 80077e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80077ea:	b10b      	cbz	r3, 80077f0 <__sflush_r+0x44>
 80077ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80077ee:	1ad2      	subs	r2, r2, r3
 80077f0:	2300      	movs	r3, #0
 80077f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80077f4:	6a21      	ldr	r1, [r4, #32]
 80077f6:	4628      	mov	r0, r5
 80077f8:	47b0      	blx	r6
 80077fa:	1c43      	adds	r3, r0, #1
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	d106      	bne.n	800780e <__sflush_r+0x62>
 8007800:	6829      	ldr	r1, [r5, #0]
 8007802:	291d      	cmp	r1, #29
 8007804:	d82b      	bhi.n	800785e <__sflush_r+0xb2>
 8007806:	4a2a      	ldr	r2, [pc, #168]	@ (80078b0 <__sflush_r+0x104>)
 8007808:	410a      	asrs	r2, r1
 800780a:	07d6      	lsls	r6, r2, #31
 800780c:	d427      	bmi.n	800785e <__sflush_r+0xb2>
 800780e:	2200      	movs	r2, #0
 8007810:	6062      	str	r2, [r4, #4]
 8007812:	04d9      	lsls	r1, r3, #19
 8007814:	6922      	ldr	r2, [r4, #16]
 8007816:	6022      	str	r2, [r4, #0]
 8007818:	d504      	bpl.n	8007824 <__sflush_r+0x78>
 800781a:	1c42      	adds	r2, r0, #1
 800781c:	d101      	bne.n	8007822 <__sflush_r+0x76>
 800781e:	682b      	ldr	r3, [r5, #0]
 8007820:	b903      	cbnz	r3, 8007824 <__sflush_r+0x78>
 8007822:	6560      	str	r0, [r4, #84]	@ 0x54
 8007824:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007826:	602f      	str	r7, [r5, #0]
 8007828:	b1b9      	cbz	r1, 800785a <__sflush_r+0xae>
 800782a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800782e:	4299      	cmp	r1, r3
 8007830:	d002      	beq.n	8007838 <__sflush_r+0x8c>
 8007832:	4628      	mov	r0, r5
 8007834:	f7ff fbf2 	bl	800701c <_free_r>
 8007838:	2300      	movs	r3, #0
 800783a:	6363      	str	r3, [r4, #52]	@ 0x34
 800783c:	e00d      	b.n	800785a <__sflush_r+0xae>
 800783e:	2301      	movs	r3, #1
 8007840:	4628      	mov	r0, r5
 8007842:	47b0      	blx	r6
 8007844:	4602      	mov	r2, r0
 8007846:	1c50      	adds	r0, r2, #1
 8007848:	d1c9      	bne.n	80077de <__sflush_r+0x32>
 800784a:	682b      	ldr	r3, [r5, #0]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d0c6      	beq.n	80077de <__sflush_r+0x32>
 8007850:	2b1d      	cmp	r3, #29
 8007852:	d001      	beq.n	8007858 <__sflush_r+0xac>
 8007854:	2b16      	cmp	r3, #22
 8007856:	d11e      	bne.n	8007896 <__sflush_r+0xea>
 8007858:	602f      	str	r7, [r5, #0]
 800785a:	2000      	movs	r0, #0
 800785c:	e022      	b.n	80078a4 <__sflush_r+0xf8>
 800785e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007862:	b21b      	sxth	r3, r3
 8007864:	e01b      	b.n	800789e <__sflush_r+0xf2>
 8007866:	690f      	ldr	r7, [r1, #16]
 8007868:	2f00      	cmp	r7, #0
 800786a:	d0f6      	beq.n	800785a <__sflush_r+0xae>
 800786c:	0793      	lsls	r3, r2, #30
 800786e:	680e      	ldr	r6, [r1, #0]
 8007870:	bf08      	it	eq
 8007872:	694b      	ldreq	r3, [r1, #20]
 8007874:	600f      	str	r7, [r1, #0]
 8007876:	bf18      	it	ne
 8007878:	2300      	movne	r3, #0
 800787a:	eba6 0807 	sub.w	r8, r6, r7
 800787e:	608b      	str	r3, [r1, #8]
 8007880:	f1b8 0f00 	cmp.w	r8, #0
 8007884:	dde9      	ble.n	800785a <__sflush_r+0xae>
 8007886:	6a21      	ldr	r1, [r4, #32]
 8007888:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800788a:	4643      	mov	r3, r8
 800788c:	463a      	mov	r2, r7
 800788e:	4628      	mov	r0, r5
 8007890:	47b0      	blx	r6
 8007892:	2800      	cmp	r0, #0
 8007894:	dc08      	bgt.n	80078a8 <__sflush_r+0xfc>
 8007896:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800789a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800789e:	81a3      	strh	r3, [r4, #12]
 80078a0:	f04f 30ff 	mov.w	r0, #4294967295
 80078a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078a8:	4407      	add	r7, r0
 80078aa:	eba8 0800 	sub.w	r8, r8, r0
 80078ae:	e7e7      	b.n	8007880 <__sflush_r+0xd4>
 80078b0:	dfbffffe 	.word	0xdfbffffe

080078b4 <_fflush_r>:
 80078b4:	b538      	push	{r3, r4, r5, lr}
 80078b6:	690b      	ldr	r3, [r1, #16]
 80078b8:	4605      	mov	r5, r0
 80078ba:	460c      	mov	r4, r1
 80078bc:	b913      	cbnz	r3, 80078c4 <_fflush_r+0x10>
 80078be:	2500      	movs	r5, #0
 80078c0:	4628      	mov	r0, r5
 80078c2:	bd38      	pop	{r3, r4, r5, pc}
 80078c4:	b118      	cbz	r0, 80078ce <_fflush_r+0x1a>
 80078c6:	6a03      	ldr	r3, [r0, #32]
 80078c8:	b90b      	cbnz	r3, 80078ce <_fflush_r+0x1a>
 80078ca:	f7ff f9ad 	bl	8006c28 <__sinit>
 80078ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d0f3      	beq.n	80078be <_fflush_r+0xa>
 80078d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80078d8:	07d0      	lsls	r0, r2, #31
 80078da:	d404      	bmi.n	80078e6 <_fflush_r+0x32>
 80078dc:	0599      	lsls	r1, r3, #22
 80078de:	d402      	bmi.n	80078e6 <_fflush_r+0x32>
 80078e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078e2:	f7ff fb98 	bl	8007016 <__retarget_lock_acquire_recursive>
 80078e6:	4628      	mov	r0, r5
 80078e8:	4621      	mov	r1, r4
 80078ea:	f7ff ff5f 	bl	80077ac <__sflush_r>
 80078ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078f0:	07da      	lsls	r2, r3, #31
 80078f2:	4605      	mov	r5, r0
 80078f4:	d4e4      	bmi.n	80078c0 <_fflush_r+0xc>
 80078f6:	89a3      	ldrh	r3, [r4, #12]
 80078f8:	059b      	lsls	r3, r3, #22
 80078fa:	d4e1      	bmi.n	80078c0 <_fflush_r+0xc>
 80078fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fe:	f7ff fb8b 	bl	8007018 <__retarget_lock_release_recursive>
 8007902:	e7dd      	b.n	80078c0 <_fflush_r+0xc>

08007904 <__swhatbuf_r>:
 8007904:	b570      	push	{r4, r5, r6, lr}
 8007906:	460c      	mov	r4, r1
 8007908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790c:	2900      	cmp	r1, #0
 800790e:	b096      	sub	sp, #88	@ 0x58
 8007910:	4615      	mov	r5, r2
 8007912:	461e      	mov	r6, r3
 8007914:	da0d      	bge.n	8007932 <__swhatbuf_r+0x2e>
 8007916:	89a3      	ldrh	r3, [r4, #12]
 8007918:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800791c:	f04f 0100 	mov.w	r1, #0
 8007920:	bf14      	ite	ne
 8007922:	2340      	movne	r3, #64	@ 0x40
 8007924:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007928:	2000      	movs	r0, #0
 800792a:	6031      	str	r1, [r6, #0]
 800792c:	602b      	str	r3, [r5, #0]
 800792e:	b016      	add	sp, #88	@ 0x58
 8007930:	bd70      	pop	{r4, r5, r6, pc}
 8007932:	466a      	mov	r2, sp
 8007934:	f000 f848 	bl	80079c8 <_fstat_r>
 8007938:	2800      	cmp	r0, #0
 800793a:	dbec      	blt.n	8007916 <__swhatbuf_r+0x12>
 800793c:	9901      	ldr	r1, [sp, #4]
 800793e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007942:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007946:	4259      	negs	r1, r3
 8007948:	4159      	adcs	r1, r3
 800794a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800794e:	e7eb      	b.n	8007928 <__swhatbuf_r+0x24>

08007950 <__smakebuf_r>:
 8007950:	898b      	ldrh	r3, [r1, #12]
 8007952:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007954:	079d      	lsls	r5, r3, #30
 8007956:	4606      	mov	r6, r0
 8007958:	460c      	mov	r4, r1
 800795a:	d507      	bpl.n	800796c <__smakebuf_r+0x1c>
 800795c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007960:	6023      	str	r3, [r4, #0]
 8007962:	6123      	str	r3, [r4, #16]
 8007964:	2301      	movs	r3, #1
 8007966:	6163      	str	r3, [r4, #20]
 8007968:	b003      	add	sp, #12
 800796a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800796c:	ab01      	add	r3, sp, #4
 800796e:	466a      	mov	r2, sp
 8007970:	f7ff ffc8 	bl	8007904 <__swhatbuf_r>
 8007974:	9f00      	ldr	r7, [sp, #0]
 8007976:	4605      	mov	r5, r0
 8007978:	4639      	mov	r1, r7
 800797a:	4630      	mov	r0, r6
 800797c:	f7ff fbba 	bl	80070f4 <_malloc_r>
 8007980:	b948      	cbnz	r0, 8007996 <__smakebuf_r+0x46>
 8007982:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007986:	059a      	lsls	r2, r3, #22
 8007988:	d4ee      	bmi.n	8007968 <__smakebuf_r+0x18>
 800798a:	f023 0303 	bic.w	r3, r3, #3
 800798e:	f043 0302 	orr.w	r3, r3, #2
 8007992:	81a3      	strh	r3, [r4, #12]
 8007994:	e7e2      	b.n	800795c <__smakebuf_r+0xc>
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	6020      	str	r0, [r4, #0]
 800799a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800799e:	81a3      	strh	r3, [r4, #12]
 80079a0:	9b01      	ldr	r3, [sp, #4]
 80079a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80079a6:	b15b      	cbz	r3, 80079c0 <__smakebuf_r+0x70>
 80079a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079ac:	4630      	mov	r0, r6
 80079ae:	f000 f81d 	bl	80079ec <_isatty_r>
 80079b2:	b128      	cbz	r0, 80079c0 <__smakebuf_r+0x70>
 80079b4:	89a3      	ldrh	r3, [r4, #12]
 80079b6:	f023 0303 	bic.w	r3, r3, #3
 80079ba:	f043 0301 	orr.w	r3, r3, #1
 80079be:	81a3      	strh	r3, [r4, #12]
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	431d      	orrs	r5, r3
 80079c4:	81a5      	strh	r5, [r4, #12]
 80079c6:	e7cf      	b.n	8007968 <__smakebuf_r+0x18>

080079c8 <_fstat_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	@ (80079e8 <_fstat_r+0x20>)
 80079cc:	2300      	movs	r3, #0
 80079ce:	4604      	mov	r4, r0
 80079d0:	4608      	mov	r0, r1
 80079d2:	4611      	mov	r1, r2
 80079d4:	602b      	str	r3, [r5, #0]
 80079d6:	f7fa f96c 	bl	8001cb2 <_fstat>
 80079da:	1c43      	adds	r3, r0, #1
 80079dc:	d102      	bne.n	80079e4 <_fstat_r+0x1c>
 80079de:	682b      	ldr	r3, [r5, #0]
 80079e0:	b103      	cbz	r3, 80079e4 <_fstat_r+0x1c>
 80079e2:	6023      	str	r3, [r4, #0]
 80079e4:	bd38      	pop	{r3, r4, r5, pc}
 80079e6:	bf00      	nop
 80079e8:	2000047c 	.word	0x2000047c

080079ec <_isatty_r>:
 80079ec:	b538      	push	{r3, r4, r5, lr}
 80079ee:	4d06      	ldr	r5, [pc, #24]	@ (8007a08 <_isatty_r+0x1c>)
 80079f0:	2300      	movs	r3, #0
 80079f2:	4604      	mov	r4, r0
 80079f4:	4608      	mov	r0, r1
 80079f6:	602b      	str	r3, [r5, #0]
 80079f8:	f7fa f96b 	bl	8001cd2 <_isatty>
 80079fc:	1c43      	adds	r3, r0, #1
 80079fe:	d102      	bne.n	8007a06 <_isatty_r+0x1a>
 8007a00:	682b      	ldr	r3, [r5, #0]
 8007a02:	b103      	cbz	r3, 8007a06 <_isatty_r+0x1a>
 8007a04:	6023      	str	r3, [r4, #0]
 8007a06:	bd38      	pop	{r3, r4, r5, pc}
 8007a08:	2000047c 	.word	0x2000047c

08007a0c <_sbrk_r>:
 8007a0c:	b538      	push	{r3, r4, r5, lr}
 8007a0e:	4d06      	ldr	r5, [pc, #24]	@ (8007a28 <_sbrk_r+0x1c>)
 8007a10:	2300      	movs	r3, #0
 8007a12:	4604      	mov	r4, r0
 8007a14:	4608      	mov	r0, r1
 8007a16:	602b      	str	r3, [r5, #0]
 8007a18:	f7fa f974 	bl	8001d04 <_sbrk>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_sbrk_r+0x1a>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_sbrk_r+0x1a>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	2000047c 	.word	0x2000047c

08007a2c <_init>:
 8007a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a2e:	bf00      	nop
 8007a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a32:	bc08      	pop	{r3}
 8007a34:	469e      	mov	lr, r3
 8007a36:	4770      	bx	lr

08007a38 <_fini>:
 8007a38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a3a:	bf00      	nop
 8007a3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3e:	bc08      	pop	{r3}
 8007a40:	469e      	mov	lr, r3
 8007a42:	4770      	bx	lr
